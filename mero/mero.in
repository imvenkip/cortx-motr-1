#!/bin/sh
#
# mero   Start the mero m0d service
#
# chkconfig: - 55 25
# description: This service starts up the mero m0d server daemon. \
#              It also ensures the m0mero kernel module is loaded.
#

# source function library
. @sysconfdir@/rc.d/init.d/functions

# pull in sysconfig settings
# M0D_OPTIONS and extra M0MERO_OPTIONS can be set in in sysconfig
[ -f @sysconfdir@/sysconfig/mero ] && . @sysconfdir@/sysconfig/mero

RETVAL=0
prog="m0d"
lockfile=@localstatedir@/lock/subsys/$prog

# Some macros to make the below more readable
M0D=@bindir@/m0d
M0CTL=@bindir@/m0ctl
M0MERO=m0mero
PID_FILE=@localstatedir@/run/m0d.pid
GENDERS=@sysconfdir@/mero/genders
OPTIONS=${M0D_OPTIONS:--Z -g}

rh_status() {
	status $prog
}

rh_status_q() {
	rh_status >/dev/null 2>&1
}

probe_kmod() {
	uuid=$(nodeattr -f $GENDERS -v m0_uuid)
	[ -z "$uuid" ] && echo "$GENDERS: m0_uuid is missing" && return 1
	# @todo fully support additional kernel module parameters, especially
	# support m0t1fs on same node as m0d.  May require a mechanism to
	# resolve m0_lnet_host to IP address.
	# Can set M0MERO_OPTIONS in sysconfig.

	modprobe $M0MERO node_uuid=$uuid $M0MERO_OPTIONS || return 2

	return 0
}

start() {
	[ -x $M0D ] || exit 5
	[ -f $GENDERS ] || exit 6
	var=$(nodeattr -f $GENDERS -v m0_var)
	[ -z "$var" ] && echo "$GENDERS: m0_var is missing" && exit 7
	mkdir -p "$var" || exit 7
	cd "$var" || (echo "$GENDERS: $var: not a directory" && exit 7)

	probe_kmod || exit 8

	echo -n $"Starting $prog: "
	$M0D $OPTIONS
	pid="`pidof $prog`"
	[ -n $pid ] && echo $pid > $PID_FILE
	rh_status_q && success || failure
	RETVAL=$?
	[ $RETVAL -eq 0 ] && touch $lockfile || modprobe -q -r $M0MERO
	echo
	return $RETVAL
}

stop() {
	echo -n $"Stopping $prog: "
	if [ -n "`pidfileofproc $M0D`" ] ; then
		killproc $M0D
	else
		failure $"Stopping $prog"
	fi
	RETVAL=$?
	[ $RETVAL -eq 0 ] && (rm -f $lockfile; modprobe -q -r $M0MERO)
	echo
	return $RETVAL
}

restart() {
	stop
	start
}

case "$1" in
	start)
		rh_status_q && exit 0
		start
		;;
	stop)
		if ! rh_status_q; then
			rm -f $lockfile
			exit 0
		fi
		stop
		;;
	restart)
		restart
		;;
	status)
		rh_status
		RETVAL=$?
		if [ $RETVAL -eq 3 -a -f $lockfile ] ; then
			RETVAL=2
		fi
		[ $RETVAL -eq 0 ] && $M0CTL query-all
		;;
	*)
		echo $"Usage: $0 {start|stop|restart|status}"
		RETVAL=2
		;;
esac
exit $RETVAL

# optional configure options
%define with_linux %( test -n "$kernel_src" && echo "--with-linux=$kernel_src" )

%define kernel_ver %(
                      if test -n "$kernel_src"; then
                          basename "$kernel_src" | tr - _
                      else
                          uname -r | tr - _
                      fi
                    )

%define kernel_ver_requires %( echo %{kernel_ver} | sed -e 's/\.x86_64$//' -e 's/_/-/g' )

Name:           @PACKAGE@
Version:        @PACKAGE_VERSION@
Release:        1_%{kernel_ver}@GIT_REV_ID_RPM@%{?dist}
Summary:        Mero filesystem and development libraries
Group:          System Environment/Base
License:        Xyratex
Source:         %{name}-%{version}.tar.gz
BuildArch:      x86_64
ExcludeArch:    i686

BuildRequires:  automake
BuildRequires:  autoconf
BuildRequires:  libtool
BuildRequires:  make
BuildRequires:  gcc
BuildRequires:  gcc-c++
BuildRequires:  gccxml
BuildRequires:  glibc-headers
BuildRequires:  asciidoc
BuildRequires:  libyaml-devel
BuildRequires:  libaio-devel
BuildRequires:  perl
BuildRequires:  perl-XML-LibXML
BuildRequires:  perl-List-MoreUtils
BuildRequires:  perl-File-Find-Rule
BuildRequires:  perl-IO-All
BuildRequires:  kernel-devel = %{kernel_ver_requires}
BuildRequires:  lustre-devel

Requires:       kernel = %{kernel_ver_requires}
Requires:       lustre-modules
Requires:       libyaml
Requires:       genders
Requires:       sysvinit-tools
Requires:       perl
Requires:       perl-YAML-LibYAML
Requires:       perl-DateTime
Requires:       perl-File-Which
Requires:       perl-List-MoreUtils

%description
Mero filesystem runtime environment and servers.

%package devel
Summary: Mero include headers
Group: Development/Kernel
Provides: %{name}-devel = %{version}
Requires: %{name} = %{version}

%description devel
This package contains the headers required to build external
applications that use Mero libraries.

%prep
%setup -q

%build
%configure %{with_linux} --enable-release --disable-unit-tests
make %{?_smp_mflags}

%install
rm -rf %{buildroot}
make DESTDIR=%{buildroot} install
find %{buildroot} -name '*.la' | sed -e 's#^%{buildroot}##' > devel.files
find %{buildroot}%{_includedir} | sed -e 's#^%{buildroot}##' >> devel.files
mkdir -p %{buildroot}%{_localstatedir}/mero

%files
%doc AUTHORS README NEWS ChangeLog COPYING
%{_bindir}/*
%{_sbindir}/*
%{_libdir}/*
%{_mandir}/*
%{_localstatedir}/mero
/lib/modules/*
%config  %{_sysconfdir}/*
%exclude %{_includedir}
%exclude %{_libdir}/*.la

%files devel -f devel.files

%pre
if initctl list | grep -q 'mero' ; then
    status mero-client | grep -q 'start/running' && stop mero-client
    status mero        | grep -q 'start/running' && stop mero
    status mero-kernel | grep -q 'start/running' && stop mero-kernel
fi || true

%post
/sbin/depmod -a
/sbin/initctl reload-configuration
/bin/sed -i -e "s/<host>/$(hostname -s)/" /etc/mero/genders
/bin/sed -i -e "s/00000000-0000-0000-0000-000000000000/$(uuidgen)/" /etc/mero/genders

#disk_cnt=$(/usr/sbin/m0gendisks -c) # use all available disks
disk_cnt=8 # currently m0d not able to initialize more disks in a reasonable time
if [ $? -eq 0 ] && [ $disk_cnt -ne 0 ] ; then
    /usr/sbin/m0gendisks -d $disk_cnt -o /etc/mero/disks-singlenode.conf
    /bin/sed -i -r -e "s/m0_pool_width=[[:digit:]]+/m0_pool_width=$disk_cnt/" /etc/mero/genders
fi

%preun
if initctl list | grep -q 'mero' ; then
    status mero-client | grep -q 'start/running' && stop mero-client
    status mero        | grep -q 'start/running' && stop mero
    status mero-kernel | grep -q 'start/running' && stop mero-kernel
fi || true

%postun
/sbin/depmod -a
/sbin/initctl reload-configuration

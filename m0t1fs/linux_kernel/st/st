#!/bin/bash

## This line should precede `set -e'.
. /etc/rc.d/init.d/functions  # status

set -e
set -u

## CAUTION: This path will be removed by superuser.
SANDBOX_DIR=~devvm/_m0-sandbox

# TRACE_MASK=all
TRACE_MASK='!rpc,formation'
TRACE_LEVEL='debug+'
# TRACE_CONTEXT=full

MAX_RPC_MSG_SIZE=163840
TM_MIN_RECV_QUEUE_LEN=2

die() { echo "$@" >&2; exit 1; }

M0_CORE_DIR=`readlink -f $0`
M0_CORE_DIR=${M0_CORE_DIR%/*/*/*/*}
[ "${M0_CORE_DIR##*/}" = core ] || die 'Unable to determine M0_CORE_DIR'

## Path to the file with configuration string for confd.
##
## XXX For "confd hack" to work, this path should correspond to
## `[M0_CM_ST]' entry in confd_hack.c.in.
CONF_FILE="$M0_CORE_DIR/m0t1fs/linux_kernel/st/_conf_str.txt"
trap "rm -f '$CONF_FILE'" 0

### Starts LNET. (Note that the script never stops LNET.)
lnet_up() {
    modprobe lnet
    lctl network up >/dev/null
    local LNET_NID=`lctl list_nids | head -1`

    export M0T1FS_ENDPOINT="$LNET_NID:12345:34:6"
    export IOS_ENDPOINT="$LNET_NID:12345:34:1"
    export MDS_ENDPOINT="$IOS_ENDPOINT"
    export CONFD_ENDPOINT="$IOS_ENDPOINT"
    # export CONFD_ENDPOINT="$LNET_NID:12345:34:100"
}

### Usage: m0_modules {insert|remove}
### Inserts/removes Mero kernel modules (m0mero.ko and galois.ko).
m0_modules() {
    case "$1" in
	insert)
	    insmod $M0_CORE_DIR/../galois/src/linux_kernel/galois.ko || {
		echo 'Inserting galois.ko failed' >&2
		return 1
	    }

	    ## Print kernel messages on the console. (See proc(5).)
	    echo 8 >/proc/sys/kernel/printk

	    insmod $M0_CORE_DIR/build_kernel_modules/m0mero.ko \
		local_addr=$M0T1FS_ENDPOINT \
		max_rpc_msg_size=$MAX_RPC_MSG_SIZE \
		tm_recv_queue_min_len=$TM_MIN_RECV_QUEUE_LEN \
		${TRACE_MASK:+trace_immediate_mask=$TRACE_MASK} \
		${TRACE_LEVEL:+trace_level=$TRACE_LEVEL} \
		${TRACE_CONTEXT:+trace_print_context=$TRACE_CONTEXT} \
		|| {
		echo 'Inserting m0mero.ko failed' >&2
		rmmod galois
		return 1
	    }
	    ;;
	remove)
	    rmmod m0mero

	    ## Not interested in console output any more.
	    echo 4 >/proc/sys/kernel/printk

	    rmmod galois
	    ;;
	*) die 'm0_modules: Invalid argument';;
    esac
}

### Usage: m0_services {start|stop}
### Starts/stops Mero services.
m0_services() {
    case "$1" in
	start)
	    env ${TRACE_MASK:+M0_TRACE_IMMEDIATE_MASK=$TRACE_MASK} \
		${TRACE_LEVEL:+M0_TRACE_LEVEL=$TRACE_LEVEL} \
		${TRACE_CONTEXT:+M0_TRACE_PRINT_CONTEXT=$TRACE_CONTEXT} \
	    $M0_CORE_DIR/mero/m0d \
		-r -p -D $SANDBOX_DIR/db -T linux -S $SANDBOX_DIR/stobs \
		-e lnet:$IOS_ENDPOINT -s confd -s mdservice -s ioservice \
		-m $MAX_RPC_MSG_SIZE -q $TM_MIN_RECV_QUEUE_LEN \
		>$SANDBOX_DIR/m0d.log 2>&1 &
	    sleep 1
	    status $M0_CORE_DIR/mero/.libs/lt-m0d >/dev/null || return 1
	    ;;
	stop)
	    killall -q lt-m0d
	    sleep 3
	    ;;
	*) die 'm0_services: Invalid argument';;
    esac
}

sandbox_init() {
    rm -rf $SANDBOX_DIR
    mkdir $SANDBOX_DIR
    cd $SANDBOX_DIR
}

sandbox_fini() {
    ## Note that the script does not delete $SANDBOX_DIR: developers
    ## may want to analyze the logs contained there.
    cd - >/dev/null
}

_init() {
    lnet_up
    m0_modules insert

    sandbox_init
    m0_services start || {
	echo 'Failed to start Mero services' >&2
	sandbox_fini
	m0_modules remove
	die
    }
    mkdir $SANDBOX_DIR/mnt
}

_fini() {
    rmdir $SANDBOX_DIR/mnt
    m0_services stop
    sandbox_fini
    m0_modules remove
    exit ${1:-$?}
}

_mount() {
    local LOCAL_CONF=
    local FS_PARAMS=\
'[4: "pool_width=3","nr_data_units=1","nr_parity_units=1","unit_size=4096"]'

    case "${1:-}" in
	bad_conf) LOCAL_CONF='garbage';;
	bad_fs_param) FS_PARAMS='[1: "bad_param"]';;
    esac

    [ -z "$LOCAL_CONF" ] && LOCAL_CONF="`cat <<EOF
[3:
  ("prof", {1| ("fs")}),
  ("fs", {2| ((11, 22), $FS_PARAMS, [1: "ios"])}),
  ("ios", {3| (2, [1: "$IOS_ENDPOINT"], "node-0")})]
EOF`"

    if [ "${1:-}" = 'net' ]; then
	echo "$LOCAL_CONF" >"$CONF_FILE"
	mount -t m0t1fs -o profile=prof,confd=$CONFD_ENDPOINT,\
mds=$MDS_ENDPOINT,ios=$IOS_ENDPOINT none $SANDBOX_DIR/mnt || return $?
    else
	mount -t m0t1fs -o profile=prof,local_conf="$LOCAL_CONF",\
mds=$MDS_ENDPOINT,ios=$IOS_ENDPOINT none $SANDBOX_DIR/mnt || return $?
    fi
}

usage() {
    echo "Usage: ${0##*/} [COMMAND]"
    echo
    echo 'Supported commands:'
    echo '  run      run system tests (default command)'
    echo '  insmod   insert Mero kernel modules: m0mero.ko, galois.ko'
    echo '  rmmod    remove Mero kernel modules'
    echo '  help     display this help and exit'
}

## -------------------------------------------------------------------
## main()
## -------------------------------------------------------------------

[ `id -u` -eq 0 ] || die 'Must be run by superuser'

case "${1:-}" in
    run|'') ;;
    insmod) lnet_up; m0_modules insert; exit;;
    rmmod)           m0_modules remove; exit;;
    help) usage; exit;;
    *)    usage >&2; die;;
esac

_init

## -------------------------------------------------------------------
## Failures
## XXX TODO: failures of confd should also be tested.

echo 4 >/proc/sys/kernel/printk  # Not interested in console output.
for c in bad_conf bad_fs_param; do
    _mount $c 2>/dev/null && {
	echo 'Failed to fail' >&2
	_fini 1
    }
done

## -------------------------------------------------------------------
## Successes

echo 8 >/proc/sys/kernel/printk  # Print kernel messages to the console.
_mount || _fini $?
umount $SANDBOX_DIR/mnt

_mount net || _fini $?
umount $SANDBOX_DIR/mnt

_fini

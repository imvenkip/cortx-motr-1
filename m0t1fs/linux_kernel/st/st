#!/bin/bash
set -eu

## CAUTION: This path will be removed by superuser.
SANDBOX_DIR=${SANDBOX_DIR:-~devvm/_m0-sandbox}

TRACE_MASK=${M0_TRACE_IMMEDIATE_MASK:-!rpc,formation,fop,memory}
TRACE_LEVEL=${M0_TRACE_LEVEL:-info+}
TRACE_CONTEXT=${M0_TRACE_PRINT_CONTEXT:-}

MAX_RPC_MSG_SIZE=163840
TM_MIN_RECV_QUEUE_LEN=2

die() { echo "$@" >&2; exit 1; }

M0_CORE_DIR=`readlink -f $0`
M0_CORE_DIR=${M0_CORE_DIR%/*/*/*/*}

## Path to the file with configuration string for confd.
CONF_FILE=$SANDBOX_DIR/conf.txt

export_lnet_nid_endpoints() {
    local LNET_NID=`lctl list_nids | head -1`

    ## LNet endpoint address format (see net/lnet/lnet.h):
    ##     NID:PID:Portal:TMID
    ##
    ## The PID value of 12345 is used by Lustre in the kernel and is
    ## the only value currently supported.
    export M0T1FS_ENDPOINT="$LNET_NID:12345:34:6"
    export IOS0_ENDPOINT="$LNET_NID:12345:34:1"
    export IOS1_ENDPOINT="$LNET_NID:12345:34:2"
    export MDS_ENDPOINT="$IOS0_ENDPOINT"
    export RMS_ENDPOINT="$IOS0_ENDPOINT"
    export CONFD_ENDPOINT="$IOS0_ENDPOINT"
}

init_endpoints() {
    if killall -q -0 lt-m0d; then
	export_lnet_nid_endpoints
    else
	_init
    fi
}

### Starts LNET. (Note that the script never stops LNET.)
lnet_up() {
    modprobe lnet
    lctl network up >/dev/null
    export_lnet_nid_endpoints
}

sandbox_init() {
    rm -rf $SANDBOX_DIR
    mkdir -p $SANDBOX_DIR/mnt
}

sandbox_fini() {
    if [ -d $SANDBOX_DIR/mnt ]; then
	rmdir $SANDBOX_DIR/mnt
    fi
    ## Note that the script does not delete $SANDBOX_DIR itself:
    ## developers may want to analyze the logs contained there.
}

modules_insert() {
    insmod $M0_CORE_DIR/extra-libs/galois/src/linux_kernel/galois.ko || \
	die 'Inserting galois.ko failed'

    insmod $M0_CORE_DIR/mero/m0mero.ko \
	local_addr=$M0T1FS_ENDPOINT \
	max_rpc_msg_size=$MAX_RPC_MSG_SIZE \
	tm_recv_queue_min_len=$TM_MIN_RECV_QUEUE_LEN \
	${TRACE_MASK:+trace_immediate_mask=$TRACE_MASK} \
	${TRACE_LEVEL:+trace_level=$TRACE_LEVEL} \
	${TRACE_CONTEXT:+trace_print_context=$TRACE_CONTEXT} \
	|| {
	rmmod galois
	die 'Inserting m0mero.ko failed'
    }
}

modules_remove() {
    rmmod m0mero
    rmmod galois
}

###
### Starts Mero services.
###
### There are three modes of operation:
###
###   services_start
###       m0d starts "confd", "mdservice", and "ioservice".
###
###   services_start noconfd
###       m0d does not start "confd" service. This mode is used for
###       failure testing.
###
###   services_start autoconf
###       m0d is started with minimum of options and configures itself.
###
services_start() {
    [ $# -eq 0 -o "${1:-}" = noconfd -o "${1:-}" = autoconf ] || \
	error 'Invalid argument'
    local MODE="${1:-}"

    PROF='(1, 0)'
    PROF_OPT='1:0'
    FS='(1, 1)'
    MDS='(1, 2)'
    RM='(1, 3)'
    STATS='(1, 4)'
    IOS='(1, 5)'
    NODE0='(4, 0)'
    NODE1='(4, 1)'

    PROF_AC='(11, 0)'
    PROF_AC_OPT='11:0'
    FS1='(11, 1)'
    IOS1='(11, 5)'

    local CONF="`cat <<EOF
[9:
  ($PROF, {1| ($FS)}),
  ($FS, {2| ((11, 22),
              [4: "pool_width=3", "nr_data_units=1", "nr_parity_units=1",
                  "unit_size=4096"],
              [3: $MDS, $RM, $IOS])}),
  ($MDS, {3| (1, [1: "$MDS_ENDPOINT"], $NODE0)}),
  ($RM, {3| (4, [1: "$RMS_ENDPOINT"], $NODE0)}),
  ($IOS, {3| (2, [1: "$IOS0_ENDPOINT"], $NODE0)}),

  ($PROF_AC, {1| ($FS1)}),
  ($FS1, {2| ((11, 22),
                [12: "-r", "-p", "-T", "linux", "-D", "db", "-S", "stobs",
                     "-A", "addb-stobs", "-w", "3"],
                [1: $IOS1])}),
  ($IOS1, {3| (2, [1: "lnet:$IOS1_ENDPOINT"], $NODE1)}),
  ($NODE1, {4| (163840, 0, 0, 16, 0, [0], [0])})]
EOF`"

    local CONFD_SPEC=
    [ "$MODE" = noconfd ] || {
	CONFD_SPEC="-s confd -c $CONF_FILE"
	echo "$CONF" >"$CONF_FILE"
    }

    local OPTIONS="`cat <<EOF
-r -p -D $SANDBOX_DIR/db -T linux -S $SANDBOX_DIR/stobs
-A $SANDBOX_DIR/addb-stobs
-e lnet:$IOS0_ENDPOINT $CONFD_SPEC -s mdservice -s addb -s ioservice
 -m $MAX_RPC_MSG_SIZE -q $TM_MIN_RECV_QUEUE_LEN -w 3
EOF`"
    [ "$MODE" = autoconf ] && OPTIONS="-C $CONFD_ENDPOINT -P $PROF_AC_OPT"

    echo "--- `date` ---" >>$SANDBOX_DIR/m0d.log
    cd $SANDBOX_DIR
    ($M0_CORE_DIR/mero/m0d $OPTIONS >>$SANDBOX_DIR/m0d.log 2>&1 &)

    sleep 1
    killall -q -0 lt-m0d || {
	sandbox_fini
	modules_remove
	die 'Failed to start Mero services'
    }
}

services_stop() {
    killall -q lt-m0d && sleep 4
    killall -q -KILL lt-m0d && sleep 1 || true
}

_mount() {
    [ $# -eq 1 -o $# -eq 2 ] || die 'Usage: _mount MODE [FAULT]'
    local mode="$1"
    local fault="${2:-}"

    local FS_PARAMS=\
'[4: "pool_width=3","nr_data_units=1","nr_parity_units=1","unit_size=4096"]'
    [ "$fault" = bad_fs_params ] && FS_PARAMS='[1: "bad_param"]'

    PROF='(1, 0)'
    FS='(1, 1)'
    MDS='(1, 2)'
    RM='(1, 3)'
    STATS='(1, 4)'
    IOS='(1, 5)'
    NODE0='(4, 0)'
    local CONF="`cat <<EOF
[5:
  ($PROF, {1| ($FS)}),
  ($FS, {2| ((11, 22), $FS_PARAMS, [3: $MDS, $RM, $IOS])}),
  ($MDS, {3| (1, [1: "$MDS_ENDPOINT"], $NODE0)}),
  ($RM, {3| (4, [1: "$RMS_ENDPOINT"], $NODE0)}),
  ($IOS, {3| (2, [1: "$IOS0_ENDPOINT"], $NODE0)})],
EOF`"

    case "$fault" in
	garbage)        CONF="$(head -c 64 /dev/urandom)";;
	premature_eof)  CONF="$(echo $CONF | head -c 64)";;
	duplicated_ids) CONF=$(echo $CONF | sed "s/$MDS/$IOS/g");;
	no_fs_data)     CONF='[1: ($PROF, {1| ($FS)})]';;
	'' | bad_fs_params) ;;
	*) die "_mount: Unsupported value of \`fault' argument: $fault";;
    esac

    case "$mode" in
	net) # XXX TODO: Feed bad configuration strings to confd as well.
	    mount -t m0t1fs -o profile=$PROF_OPT,confd=$CONFD_ENDPOINT \
		none $SANDBOX_DIR/mnt || return $?;;
	local)
	    mount -t m0t1fs -o profile=$PROF_OPT,local_conf="$CONF" \
		none $SANDBOX_DIR/mnt || return $?;;
	*) die "_mount: Unsupported value of \`mode' argument: $mode";;
    esac
}

_init() {
    lnet_up
    modules_insert

    sandbox_init
    services_start
}

_fini() {
    services_stop
    sandbox_fini
    modules_remove
    exit ${1:-$?}
}

error() {
    echo "$@" >&2
    _fini 1
}

usage() {
    echo "Usage: ${0##*/} [COMMAND]"
    echo
    echo 'Supported commands:'
    echo '  run      run system tests (default command)'
    echo '  insmod   insert Mero kernel modules: m0mero.ko, galois.ko'
    echo '  rmmod    remove Mero kernel modules'
    echo '  sstart   start Mero user-space services'
    echo '  sstop    stop Mero user-space services'
    echo '  help     display this help and exit'
}

## Keep the audience engaged.
## XXX TODO: Measure and report elapsed time a la CUnit.
say() { echo "$@" | tee -a $SANDBOX_DIR/m0d.log; }

## -------------------------------------------------------------------
## main()
## -------------------------------------------------------------------

[ `id -u` -eq 0 ] || die 'Must be run by superuser'

case "${1:-}" in
    run|'') ;;
    insmod) lnet_up; modules_insert; exit;;
    rmmod) modules_remove; exit;;
    sstart) _init; exit;;
    sstop) _fini; exit;;
    mount) init_endpoints; _mount local; exit;;
    umount) umount $SANDBOX_DIR/mnt; exit;;
    help) usage; exit;;
    *) usage >&2; die;;
esac

_init

## -------------------------------------------------------------------
say 'Suite: failures'

echo 4 >/proc/sys/kernel/printk  # Not interested in console output.

for c in garbage premature_eof duplicated_ids no_fs_data bad_fs_params; do
    say "  Test: $(echo $c | tr _ ' ')"
    _mount local $c 2>/dev/null && error 'Failed to fail'
done

## -------------------------------------------------------------------
say 'Suite: successes'

echo 8 >/proc/sys/kernel/printk  # Print kernel messages to the console.

say '  Test: m0t1fs local_conf'
_mount local || _fini $?
umount $SANDBOX_DIR/mnt

say '  Test: m0t1fs confd'
_mount net || _fini $?
umount $SANDBOX_DIR/mnt

## "conf-reqh" demo: start another instance of m0d, which configures
## itself retrieving data from confd.
say "  Test: reqh"
services_start autoconf
sleep 3

_fini

# -*- sh -*-

die() { echo "$@" >&2; exit 1; }

sandbox_init() {
    [ -n "${SANDBOX_DIR:-}" ] || die 'SANDBOX_DIR: unbound variable'
    rm -rf $SANDBOX_DIR
    mkdir $SANDBOX_DIR
    pushd $SANDBOX_DIR >/dev/null
}

sandbox_fini() {
    [ -n "${SANDBOX_DIR:-}" ] || die 'SANDBOX_DIR: unbound variable'
    local rc=${1:-0} # non-zero value denotes unsuccessful termination

    popd &>/dev/null || true
    if [ -z "${KEEP_SANDBOX:-}" -a $rc -eq 0 ]; then
        rm -r $SANDBOX_DIR
    fi
}

report_and_exit() {
    [ $# -eq 2 ] || die "${FUNCNAME[0]}: Invalid usage"
    local name=$1
    local rc=$2

    if [ $rc -eq 0 ]; then
        ## This message is used by Jenkins as a test success criteria;
        ## it must appear on stdout.
        echo "$name: test status: SUCCESS"
    else
        echo "$name: FAILURE $rc" >&2
    fi
    exit $rc
}

### Similar to `source` builtin command with `set +eu` in effect.
###
### Vanilla `. /etc/rc.d/init.d/functions` will fail if either "errexit"
### (set -e) or "nounset" (set -u) option is turned on.
source+eu() {
    local orig=$-
    set +eu
    . "$@"
    set -$orig
}

### Example:
###     $ opcode M0_LAYOUT_OPCODE
###     92
opcode() {
    [ $# -eq 1 ] || die "${FUNCNAME[0]}: Invalid usage"
    local NAME="$1"

    [ -n "${M0_SRC_DIR:-}" ] || die 'M0_SRC_DIR: unbound variable'
    grep -v '#pragma once' $M0_SRC_DIR/rpc/rpc_opcodes.h | cpp |
        awk "/$NAME/ {print \$3}" | tr -d ,
}

#!/bin/bash

### wrapper to run user-space programs, which depend on m0mero kernel module

#
# Global vars
#

# constants
readonly PROG_NAME=$(basename $0)
readonly self=$(readlink -f $0)
readonly base_rundir='/var/mero'
readonly top_srcdir=$(echo $(dirname $self) \
                      | sed -r -e 's#/?utils/?$##' -e 's#^/usr/s?bin##')

# variables
verbose=false
debugger=
force_modules_reload=false
rundir=$base_rundir
node_uuid=${M0_NODE_UUID:-00000000-0000-0000-0000-000000000000}
trace_level=${M0_TRACE_LEVEL:-notice+}
trace_immediate_mask=${M0_TRACE_MASK:-all}
trace_print_context=${M0_TRACE_PRINT_CONTEXT:-short}
cli_args=
binary=

#
# Usage
#

help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

usage()
{
    cat <<USAGE_END
Usage: $PROG_NAME [options] <exec-file> [-- exec-options]

  Helper tool to run user-space programs, which depend on m0mero kernel module.
  It's possible to specify various Mero kernel module and user library parameters
  with command-line options. m0run starts LNet service and loads Mero kernel
  modules on start-up, before executing a user space program. On exit, Mero
  modules are unloaded, but LNet remains running. If Mero modules are already
  loaded then m0run doesn't touch them (i.e. doesn't reload on start and doesn't
  unload on exit). This is default behaviour, which can be changed with -f
  option (see below).

    <exec-file>   Name of executable to run, it should be either found in PATH
                  or have a symlink under 'utils/' in Mero source tree. If
                  options need to be passed to executable, they should be
                  specified after '--' token.

  Options:

    -f                  Force modules reloading. If Mero modules are already
                        loaded, this forces reload on start and unload on exit.
                        LNet service is restarted as well, but it's kept running
                        on exit. It works only for system-wide Mero
                        installation, otherwise this option is ignored.

    -r|--rundir         Where to run <exec-file> ($PROG_NAME will cd into this
                        dir), by default it's '$base_rundir'.

    -d[debugger], --debugger[=debugger]

                        Run <exec-file> under 'debugger'. If 'debugger' is
                        omitted, gdb is used by default. Valid debuggers are
                        'gdb' and 'valgrind'.

    -l|--trace-level    Trace level (for both m0mero.ko and libmero.so).
                        By default it's 'notice+'.

    -m|--trace-mask     Trace subsystem mask (for both m0mero.ko and libmero.so).
                        By default it's 'all'.

    -c|--trace-ctx      Trace print context (for both m0mero.ko and libmero.so).
                        By default it's 'short'.

    -u|--uuid           Node uuid for m0mero.ko.

    -v|--verbose        Print what's going on.

    -h|--help           Print this help screen.
USAGE_END
}

#
# Parse CLI options
#

parse_cli_options()
{
    # Note that we use `"$@"' to let each command-line parameter expand to a
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.
    local TEMP=$( getopt -o hvfr:d::l:m:c:u: \
                         --long help,verbose,rundir:,debugger::,trace-level:,trace-mask:,trace-ctx:,uuid: \
                         -n "$PROG_NAME" -- "$@" )

    [[ $? != 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -f)                 force_modules_reload=true; shift ;;
            -r|--rundir)        rundir=$2; shift 2 ;;
            -d|--debugger)      [[ -n $2 ]] && debugger=$2 || debugger='gdb'; shift 2 ;;
            -l|--trace-level)   trace_level=$2; export M0_TRACE_LEVEL=$2; shift 2 ;;
            -m|--trace-mask)    trace_mask=$2; export M0_TRACE_MASK=$2; shift 2 ;;
            -c|--trace-ctx)     trace_ctx=$2; export M0_TRACE_PRINT_CONTEXT=$2; shift 2 ;;
            -u|-uuid)           node_uuid=$2; shift 2 ;;
            -v|--verbose)       verbose=true; shift ;;
            -h|--help)          help stdout ;;
            --)                 shift; break ;;
            *)                  echo 'getopt: internal error...'; exit 1 ;;
        esac
    done

    # remaining command line arguments
    cli_args="$@"
}

#
# Utility functions
#

die()
{
    echo "$PROG_NAME: ERROR: $@" >&2
    exit 1
}

log()
{
    ! $verbose || echo "$PROG_NAME: $@"
}

srcdir_path_of()
{
    local binary=$top_srcdir/utils/$1

    if [[ -z $top_srcdir ]] ; then
        echo $1
    elif [[ -L $binary ]] ; then
        echo "$top_srcdir/$(readlink $binary | sed -e 's#^../##')"
    fi
}

run_gdb()
{
    local gdbinit=${top_srcdir:+-x ${top_srcdir}/.gdbinit}

    log "gdb $gdbinit --args $binary $@"
    gdb $gdbinit --args $binary "$@"
}

run_valgrind()
{
    log "valgrind" \
            "--tool=memcheck" \
            "--trace-children=yes --track-fds=yes" \
            "--leak-check=full --track-origins=yes" \
            "$binary $@"
    valgrind \
        --tool=memcheck \
        --trace-children=yes --track-fds=yes \
        --leak-check=full --track-origins=yes \
        $binary "$@"
    echo

    log "valgrind --tool=cachegrind $binary $@"
    valgrind --tool=cachegrind $binary "$@"
    echo

    log "valgrind --tool=callgrind $binary $@"
    valgrind --tool=callgrind $binary "$@"
    echo

    log "valgrind --tool=helgrind $binary $@"
    valgrind --tool=helgrind $binary "$@"
    echo

    #log "valgrind --tool=drd --free-is-write=yes $binary $@"
    #valgrind --tool=drd --free-is-write=yes $binary "$@"
    #echo

    log "valgrind --tool=massif $binary $@"
    valgrind --tool=massif $binary "$@"
    echo

    #log "valgrind --tool=ptrcheck $binary $@"
    #valgrind --tool=ptrcheck $binary "$@"
}

# Loads Mero modules either from source tree or system-wide, if source tree is
# not found.
load_modules()
{
    if [[ -n $top_srcdir ]] ; then
        source $top_srcdir/utils/modload-all.sh
    else
        # don't try to load Mero modules if they already are
        # and don't unload them as well (EXIT trap is not set)
        # unless '-f' option was used
        local loaded=false
        if lsmod | grep -Eq 'm0|galois' ; then
            log 'Mero kernel modules are already loaded'
            loaded=true
            if $force_modules_reload ; then
                log 'forcing Mero modules reloading'
                modprobe -r m0mero
                loaded=false
            else
                return 0
            fi
        fi

        local lnet_status=$(service lnet status)
        if $force_modules_reload || [[ $lnet_status != running ]] ; then
            log '(re)starting LNet service'
            service lnet stop
            service lnet start
        fi

        if ! $loaded ; then
            log 'loading Mero modules'
            modprobe m0mero "node_uuid=$node_uuid" \
                            "trace_immediate_mask=$trace_immediate_mask" \
                            "trace_print_context=$trace_print_context" \
                            "trace_level=$trace_level"

            trap unload_modules EXIT
        fi
    fi
}

unload_modules()
{
    log 'unloading Mero modules'
    modprobe -r m0mero
}

#
# Main
#

# exit immediately if one the commands exits with a non-zero status
set -e

parse_cli_options "$@"
eval set -- "$cli_args"

[[ $UID -eq 0 ]] ||
    die 'Please, run this script with "root" privileges.'

binary=$1
[[ -n $binary ]] ||
    die "Please, specify which binary to run as a first command-line argument."
shift

if [[ -n $top_srcdir &&
      ! (-f $(srcdir_path_of $binary) && -x $(srcdir_path_of $binary)) ]] ||
   [[ -z $top_srcdir ]] && ! which $binary &>/dev/null
then
    die "'$binary' is not found or missing executable permissions."
fi

# for unit tests allow only 'fatal' and higher trace messages to be printed on
# console by default, to prevent cluttering of UT output with "fake" error
# messages, generated while testing various error paths using fault injection;
# this can be overridden with '-e' CLI option of `m0ut`.
if [[ $binary =~ .*m0ut$ ]] ; then
    export M0_TRACE_LEVEL='fatal+'
fi

[[ $rundir != $base_rundir ]] || rundir="$base_rundir/$binary"

mkdir -p "$rundir"
log "cd '$rundir'"
cd "$rundir"

load_modules

if [[ -n $debugger ]] ; then
    # libmero will attach debugger in case of panic, disable this as we already
    # going to run it under debugger
    unset M0_DEBUGGER

    if [[ -n $top_srcdir ]] ; then
        # nasty libtool creates wrapper shell scripts for non-installed
        # binaries and links them on first run under '.libs/' directory with
        # 'lt-' prefix
        lt_binary="$(dirname $(srcdir_path_of $binary))/.libs/lt-$binary"
        if [[ ! -x $lt_binary ]] ; then
            log "generating '$lt_binary' binary"
            set +e
            $(srcdir_path_of $binary) -h &> /dev/null
            set -e
        fi
        binary=$lt_binary
    fi

    case $debugger in
        gdb)      run_gdb "$@" ;;
        valgrind) run_valgrind "$@" ;;
        *)        die "unsupported debugger '$debugger'." ;;
    esac
else
    log "$(srcdir_path_of $binary) $@"
    # TODO: add output redirection (-o|--stdout, -O|--stdboth, -e|--stderr)
    $(srcdir_path_of $binary) "$@"
fi

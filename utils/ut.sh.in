#! /bin/sh

# Small wrapper to run user-space UT, which depends on m0mero module

. @abs_top_srcdir@/utils/modload-all.sh

# allow only 'fatal' and higher trace messages to be printed on console by
# default, to prevent cluttering of UT output with "fake" error messages,
# generated while testing various error paths using fault injection;
# this can be overridden with '-e' CLI option.
export M0_TRACE_LEVEL=${M0_TRACE_LEVEL:-'fatal+'}

# $EXEC allows to reuse this script to execute different utilities which need
# loaded mero modules prior to be run. For example, running utitiliy called `ub'
# will need the following symlink to be created: `ln -s ut.sh ub.sh'.
EXEC=`echo ${0##*/} | sed 's/\.sh$//'`

DIR=${RUNDIR:-/var/mero/ut}
mkdir -p $DIR
cd $DIR

if test x$enable_rpm = xyes; then
    $EXEC "$@"
elif test x$1 = x-d ;then
    shift
    unset M0_DEBUGGER
    BINARY=@abs_top_srcdir@/utils/.libs/lt-$EXEC
    if [ ! -x $BINARY ] ;then
	#
	# Create the binary first by running the wrapper.
	#
	@abs_top_srcdir@/utils/$EXEC -h >/dev/null 2>/dev/null
    fi
    gdb -x @abs_top_srcdir@/.gdbinit --args $BINARY "$@"
else
    @abs_top_srcdir@/utils/$EXEC "$@"
fi

AC_PREREQ(2.63)
AC_INIT([mero],[0.1.0],[mero@xyratex.com])

# The AC_PROG_CC macro sets CFLAGS to '-g -O2' by default if CFLAGS is not
# initialized by the user, we don't need this because we use a separate
# M0_CFLAGS variable to control compiler's options while allowing user to
# override it via CFLAGS from command-line.
CFLAGS=${CFLAGS:=""}

AM_INIT_AUTOMAKE([-Wall -Werror nostdinc foreign subdir-objects silent-rules])
AM_SILENT_RULES([yes])

LT_INIT

AC_CONFIG_SRCDIR([mero/init.c])
AC_CONFIG_MACRO_DIR([m4])

AC_CONFIG_HEADERS([config.h])

# PACKAGE_VERSION is a default autoconf variable, generated by AC_INIT from
# it's "version" argument
AC_SUBST([LT_RELEASE], [$PACKAGE_VERSION])

AC_SUBST([SRCDIR], [$srcdir])
AC_SUBST([ABS_SRCDIR], [$(cd $srcdir; pwd)])
AC_SUBST([ABS_BUILDDIR], [$(pwd)])

#
# Checking for OS support
#

AC_MSG_CHECKING([for operating system])
AC_MSG_RESULT([$host_os])

AS_CASE([$host_os],
        # supported operating systems:
        [linux*], [],
        # default action for unsupported OS is to abort with error
        [AC_MSG_ERROR([Unsupported platform detected!])]
)

#
# Configuration options
#

AC_ARG_VAR([KCFLAGS], [kernel-space CFLAGS])
AC_ARG_VAR([GCCXML],  [gccxml command])

AH_TEMPLATE([ENABLE_SYNC_ATOMIC],     [Enable gcc built-in automic functions])
AH_TEMPLATE([ENABLE_DEBUG],           [Enable debug info.])
AH_TEMPLATE([ENABLE_PROFILER],        [Enable profile samples gathering.])
AH_TEMPLATE([ENABLE_FAULT_INJECTION], [Enable fault injection.])
AH_TEMPLATE([ENABLE_IMMEDIATE_TRACE], [Enable immediate tracing.])
AH_TEMPLATE([ENABLE_EXPENSIVE_CHECKS],[Enable expensive checks.])
AH_TEMPLATE([M0_NDEBUG],              [Disable M0_ASSERT.])
AH_TEMPLATE([HAVE_JOURNAL_ABORT],     [Have journal_abort() function])
AH_TEMPLATE([HAVE_FILE_READV],        [Have fops->readv function])
AH_TEMPLATE([HAVE_FILE_AIO_READ],     [Have fops->aio_read function])
AH_TEMPLATE([HAVE_INODE_BLKSIZE],     [Have inode->i_blksize field])
AH_TEMPLATE([HAVE_WRITE_BEGIN_END],   [Have .begin_write/end_write])
AH_TEMPLATE([HAVE_SENDFILE],          [Have .sendfile])
AH_TEMPLATE([HAVE_MALLINFO],          [Have mallinfo() function])
AH_TEMPLATE([HAVE_MALLOC_SIZE],       [Have malloc_size() function])
AH_TEMPLATE([HAVE_BACKTRACE],         [Have backtrace(3) function])

AC_ARG_ENABLE([debug],
        [AS_HELP_STRING([--enable-debug], [enable debug information and logs])],
        [], [enable_debug=no]
)
AM_CONDITIONAL([ENABLE_DEBUG],
               [test "x$enable_debug" = xyes])

AC_ARG_ENABLE([profiler],
        [AS_HELP_STRING([--enable-profiler],
                       [enable gperftools profiling information])],
        [], [enable_profiler=no]
)
AM_CONDITIONAL([ENABLE_PROFILER],
               [test "x$enable_profiler" = xyes])

AC_ARG_ENABLE([coverage],
        [AS_HELP_STRING([--enable-coverage], [build for test coverage analysis])],
        [], [enable_coverage=no]
)
AC_SUBST([ENABLE_COVERAGE], [$enable_coverage])


AC_ARG_ENABLE([finject],
        AS_HELP_STRING([--disable-finject],[disable fault injection support]),
        [], [enable_finject=yes]
)
AS_IF([test x$enable_finject = xyes],
      AC_DEFINE([ENABLE_FAULT_INJECTION]))

AC_ARG_ENABLE([immediate-trace],
        AC_HELP_STRING([--disable-immediate-trace], [disable immediate tracing]),
        [], [enable_immediate_trace=yes]
)
AS_IF([test x$enable_immediate_trace = xyes],
      AC_DEFINE([ENABLE_IMMEDIATE_TRACE]))

AC_ARG_ENABLE([sync-atomic],
        AS_HELP_STRING([--enable-sync-atomic],
                        [enable gcc built-in __sync_atomic functions]),
        [], [enable_sync_atomic=no]
)
AS_IF([test x$enable_sync_atomic = xyes],
      AC_DEFINE([ENABLE_SYNC_ATOMIC]))

AC_ARG_ENABLE([mcheck],
        [AS_HELP_STRING([--enable-mcheck],[enable glibc malloc check])], [],
        [enable_mcheck=no]
)

AC_ARG_ENABLE([m0_asserts],
        AS_HELP_STRING([--disable-m0-asserts],[disable M0_ASSERT]),
        [], [enable_m0_asserts=yes]
)
AS_IF([test x$enable_m0_asserts = xno],
      AC_DEFINE([M0_NDEBUG]))

AC_ARG_ENABLE([expensive_checks],
        AS_HELP_STRING([--disable-expensive-checks],[disable expensive checks]),
        [], [enable_expensive_checks=yes]
)
AS_IF([test x$enable_expensive_checks = xyes],
      AC_DEFINE([ENABLE_EXPENSIVE_CHECKS]))

AC_ARG_ENABLE([altogether-mode],
        [AS_HELP_STRING([--disable-altogether-mode],[disable altogether build mode])],
        [], [enable_altogether_mode=yes]
)
AM_CONDITIONAL([ENABLE_MERO_ALTOGETHER],
               [test "x$enable_altogether_mode" = xyes])

AC_ARG_ENABLE([rpm],
        [AS_HELP_STRING([--enable-rpm],[enable rpm build mode])], [],
        [enable_rpm=no]
)

AC_ARG_WITH([linux],
        [AS_HELP_STRING([--with-linux=path],
                        [set path to Linux kernel dir, default is /lib/modules/`uname -r`/build])],
        [LINUX=$with_linux; LINUX_OBJ=$LINUX; LINUX_MOD=$LINUX],
        [LINUX=/lib/modules/`uname -r`; LINUX_OBJ=$LINUX/build; LINUX_MOD=$LINUX]
)
AC_SUBST([LINUX_OBJ])
AC_SUBST([LINUX_MOD])

AC_ARG_WITH([lustre],
        [AS_HELP_STRING([--with-lustre=path],
                        [set path to lustre headers or built sources dir, default is /usr/src/lustre-*])],
        [LUSTRE=$with_lustre],
        [LUSTRE=/usr/src/`ls /usr/src | grep lustre- | tail -1`]
)
AS_IF([test -z "$LUSTRE" || ! test -d "$LUSTRE/"],
      [AC_MSG_ERROR([Lustre headers not found! Please, install lustre-devel \
package or provide the path to a directory with built Lustre sources, \
using --with-lustre option.])]
)
AC_SUBST([LUSTRE])

#
# Checking for required programs
#

AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_CPP
AC_PROG_AWK
AC_PROG_SED
AC_PROG_LN_S
AC_PROG_INSTALL

# gccxml is required by xcode/gccxml2xcode script
AC_CHECK_PROG(GCCXML, gccxml, gccxml)
AS_IF([test -z $GCCXML],
      AC_MSG_ERROR([gccxml is not found: it can be installed from gccxml \
package on Red Hat based systems])
)

# c++ compiler is required by gccxml
AC_CHECK_PROG(CXX, g++, g++)
AS_IF([test -z $CXX],
      AC_MSG_ERROR([g++ is not found: it can be installed from gcc-c++ package \
on Red Hat based systems])
)

# the following two perl-modules are required by xcode/gccxml2xcode script
AX_PROG_PERL_MODULES([XML::LibXML], ,
        AC_MSG_ERROR([No XML::LibXML Perl module found: it can be installed \
from perl-XML-LibXML package on Red Hat based systems])
)

AX_PROG_PERL_MODULES([List::MoreUtils], ,
        AC_MSG_ERROR([No List::MoreUtils Perl module found: it can be \
installed from perl-List-MoreUtils package on Red Hat based systems])
)

# these two perl-modules are required for scripts/check-sources script
AX_PROG_PERL_MODULES([File::Find::Rule], ,
        AC_MSG_ERROR([No File::Find::Rule Perl module found: it can be \
installed from perl-File-Find-Rule package on Red Hat based systems])
)

AX_PROG_PERL_MODULES([IO::All], ,
        AC_MSG_ERROR([No IO::All Perl module found: it can be installed from \
perl-IO-All package on Red Hat based systems])
)

AC_CHECK_PROG(DOXYGEN, doxygen, doxygen,
              [echo doxygen is not found please install it])

# BASH variable is already set by configure to /bin/sh, so we need to unset it
# first to prevent AC_CHECK_PROG from using cached value
unset BASH

# bash shell is required by Makefile.am to build kernel modules
# see 'build-kernel-modules' make target for more details
AC_CHECK_PROG(BASH, bash, bash)
AS_IF([test -z $BASH],
      AC_MSG_ERROR([bash is not found: it can be installed from bash package on \
Red Hat based systems])
)

#
# Checking for required libraries
#

# sqrt() requires m library
MERO_SEARCH_LIBS([sqrt], [c m], [MATH_LIBS],
        [sqrt cannot be found! Try to install libc-devel.]
)
AC_SUBST([MATH_LIBS])

# pthread library is required for a subset of pthread_XXX funcs
MERO_SEARCH_LIBS([pthread_create], [c pthread], [PTHREAD_LIBS],
        [pthread_create cannot be found! Try to install libc-devel or libpthread-devel.]
)
AC_SUBST([PTHREAD_LIBS])

# check for aio library (io_submit(3) & co.)
MERO_SEARCH_LIBS([io_getevents], [aio c], [AIO_LIBS],
        [io_getevents cannot be found! Try to install libaio-devel.]
)
AC_SUBST([AIO_LIBS])

# rt library is required for: aio_read(3), aio_write(3), timer_create(2)
MERO_SEARCH_LIBS([aio_read], [rt aio c], [RT_LIBS],
        [aio_read cannot be found! Try to install librt-devel or libaio-devel.]
)
AC_SUBST([RT_LIBS])

#
# Checking for required header files
#

AC_CHECK_HEADERS([arpa/inet.h fcntl.h limits.h malloc.h memory.h netdb.h \
                  netinet/in.h stddef.h stdint.h stdlib.h string.h sys/ioctl.h \
                  sys/socket.h sys/time.h unistd.h])

AC_CHECK_HEADERS([pthread.h], [], [AC_MSG_ERROR([pthread.h cannot be found!])])

AC_HEADER_STDBOOL

#
# Checking for required types
#

AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_TYPE_UID_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_TYPE_UINT8_T

AC_CHECK_TYPES([pthread_barrier_t], [], [], [[#include <pthread.h>]])

#
# Checking for compiler characteristics
#

AC_CHECK_SIZEOF([long])

AC_MSG_CHECKING([whether target platform is a 64-bit one])
AS_IF([test $ac_cv_sizeof_long -eq 8],
      [AC_MSG_RESULT([yes])],
      [
       AC_MSG_RESULT([no])
       AC_MSG_ERROR([Only 64bit platforms are supported!])
      ]
)

AC_C_INLINE

MERO_COMPILER_OPTION_CHECK([-Wno-unused-but-set-variable],
        [M0_KCFLAGS="-Wno-unused-but-set-variable $M0_KCFLAGS"],
        [M0_KCFLAGS="$M0_KCFLAGS"])

#
# Checking for required library functions
#

AC_FUNC_ERROR_AT_LINE
AC_FUNC_MALLOC
AC_FUNC_MMAP

AC_CHECK_FUNCS([dup2 getcwd getpagesize gettimeofday memmove memset mkdir \
                munmap setenv sqrt strcasecmp strchr strdup strerror strrchr \
                strstr strtol strtoul strtoull])

AC_CHECK_DECL([mallinfo], [AC_DEFINE([HAVE_MALLINFO])], [], [[#include <malloc.h>]])
AC_CHECK_DECL([malloc_size], [AC_DEFINE([HAVE_MALLOC_SIZE])], [], [[#include <malloc/malloc.h>]])
AC_CHECK_DECL([backtrace], [AC_DEFINE([HAVE_BACKTRACE])], [], [[#include <execinfo.h>]])

#
# Checking for required linux kernel API
#

# Prepare linux configuration checks facility.
# Should be done before any *_LINUX_* checks.
MERO_LINUX_INIT_CONFIG

MERO_LINUX_CHECK_SYMBOL([journal_abort], [AC_DEFINE([HAVE_JOURNAL_ABORT])])

MERO_LINUX_INODE_BLKSIZE
MERO_LINUX_FILE_READV
MERO_LINUX_FILE_AIO_READ
MERO_LINUX_WRITE_BEGIN_END
MERO_LINUX_SENDFILE

#
# Checking for Lustre
#

AC_MSG_CHECKING([for LNet header dir])
AS_IF([! test -d $LUSTRE/lnet/include],
      [AC_MSG_ERROR([lnet/include not found in '$LUSTRE', please provide a
correct path to Lustre headers using --with-lustre option])]
)
AC_MSG_RESULT([$LUSTRE/lnet/include])

AC_MSG_CHECKING([for Lustre config.h])
LUSTRE_CONFIG="$LUSTRE/config.h"
AS_IF([! test -e $LUSTRE_CONFIG],
      [ AC_MSG_RESULT([no])
        AC_MSG_ERROR([$LUSTRE_CONFIG not found! Did you configure Lustre?])
      ],[
        (cd $ABS_BUILDDIR; $LN_S $LUSTRE_CONFIG lustre_config.h)
      ]
)
AC_MSG_RESULT([$LUSTRE_CONFIG])
AC_SUBST([LUSTRE_CONFIG_LINK], [$ABS_BUILDDIR/lustre_config.h])

AC_MSG_CHECKING([for Lustre symbols file])
LUSTRE_SYMVERS="$LUSTRE/Module.symvers"
AS_IF([! test -e $LUSTRE_SYMVERS],
      AC_MSG_RESULT([no])
      AC_MSG_ERROR([$LUSTRE_SYMVERS not found! Did you build Lustre?])
)
AC_MSG_RESULT([$LUSTRE_SYMVERS])
AC_SUBST([LUSTRE_SYMVERS])

#
# Configure and build dependencies in external mero repositories
#

OLD_LIBS=$LIBS
OLD_CFLAGS=$CFLAGS
LIBS=""
CFLAGS=""

if test x$enable_rpm = xyes; then

# Check for galois

GALOIS_SRC=""

MERO_SEARCH_LIBS([galois_create_mult_tables], [galois], [GALOIS_LIBS],
        [libgalois cannot be found! Try install galois package from \
$SRCDIR/extra-libs/galois or from rpm]
)

AC_CHECK_HEADERS([galois/galois.h], [],
                 AC_MSG_ERROR([galois/galois.h is not found. Try install \
galois from $SRCDIR/extra-libs/galois or from rpm])
)

galois_locations="{/usr,/usr/local,/opt,/opt/local}"
GALOIS_SYMVERS=$(ls $(echo $ECHO_N $galois_locations)/share/galois/symvers/Module.symvers \
                 2>/dev/null | head -n1)
AC_MSG_CHECKING([galois symvers])
AS_IF([test x$GALOIS_SYMVERS = x],
      AC_MSG_ERROR([Galois Module.symvers is not found in the following \
locations: $(echo $ECHO_N $galois_locations)])
)
AC_MSG_RESULT([$GALOIS_SYMVERS])
AC_SUBST([GALOIS_SYMVERS])

# Check for yaml

MERO_SEARCH_LIBS([yaml_parser_initialize], [yaml], [YAML_LIBS],
        [yaml_parser_initialize cannot be found! Try install yaml package from \
$SRCDIR/extra-libs/yaml or from rpm]
)

# Check for CUnit

MERO_SEARCH_LIBS([CU_add_suite], [cunit], [CUNIT_LIBS],
        [CU_add_suite cannot be found! Try install CUnit package from \
$SRCDIR/extra-libs/cunit or from rpm]
)

AC_CHECK_HEADERS([CUnit/Basic.h], [],
                 AC_MSG_ERROR([CUnit/Basic.h is not found. Try install CUnit \
from $SRCDIR/extra-libs/cunit or CUnit-devel rpm package])
)

# Check for berkeley db

MERO_SEARCH_LIBS([db_env_create], [db], [DB_LIBS],
        [db_env_create cannot be found! Try install db4-devel package]
)

AC_CHECK_HEADERS([db.h], [],
                 AC_MSG_ERROR([db.h is not found. Try install db4-devel package])
)

else # non-rpm setup

# Check for galois

GALOIS_SRC=$ABS_SRCDIR/extra-libs/galois
GALOIS_INCLUDES="-I$GALOIS_SRC/include"
GALOIS_LIBS="$GALOIS_SRC/src/libgalois.la"
AC_MSG_CHECKING([for galois libs])
MERO_BUILD_LIB([galois], [$GALOIS_SRC], [$GALOIS_LIBS], [.],
                  ["--with-linux-obj=$LINUX_OBJ"])

GALOIS_SYMVERS="$GALOIS_SRC/src/linux_kernel/Module.symvers"
AC_MSG_CHECKING([galois symvers])
AS_IF([! test -f $GALOIS_SYMVERS],
        AC_MSG_ERROR([Cant find ${GALOIS_SYMVERS}! Make sure that galois is built correctly.])
)
AC_MSG_RESULT([$GALOIS_SYMVERS])
AC_SUBST([GALOIS_SYMVERS])

# Check for yaml

YAML_SRC=$SRCDIR/extra-libs/yaml
YAML_INCLUDES="-I$YAML_SRC/include"
YAML_LIBS="$YAML_SRC/src/libyaml.la"
AC_MSG_CHECKING([for yaml libs])
MERO_BUILD_LIB([yaml], [$YAML_SRC], [$YAML_LIBS])

# Check for CUnit

CUNIT_SRC=$SRCDIR/extra-libs/cunit
CUNIT_LIBS="$CUNIT_SRC/CUnit/Sources/libcunit.la"
CUNIT_INCLUDES="-I$CUNIT_SRC/CUnit/Headers"
AC_MSG_CHECKING([for cunit libs])
MERO_BUILD_LIB([cunit], [$CUNIT_SRC], [$CUNIT_LIBS])

# Check for berkeley db

DB_SRC="$SRCDIR/extra-libs/db4/build_unix"
DB_INCLUDES="-I$DB_SRC/build_unix -I$DB_SRC"
DB_LIBS="$DB_SRC/libdb-4.8.la"
AC_MSG_CHECKING([for db libs])
MERO_BUILD_LIB([db], [$DB_SRC], [$DB_LIBS], ["../dist"], ["--with-pic"])

fi

LIBS=$OLD_LIBS
CFLAGS=$OLD_CFLAGS

AC_SUBST([GALOIS_SRC])
AC_SUBST([GALOIS_LIBS])
AC_SUBST([YAML_LIBS])
AC_SUBST([CUNIT_LIBS])
AC_SUBST([DB_SRC])
AC_SUBST([DB_INCLUDES])
AC_SUBST([DB_LIBS])

#
# Handle configuration options
#

AS_IF([test x$enable_debug = xyes],
      [
       M0_CFLAGS="-g -O0 $M0_CFLAGS"
       M0_KCFLAGS="-g -O0 $M0_KCFLAGS"
       AC_DEFINE([ENABLE_DEBUG])
      ],[
       M0_CFLAGS="-g -O2 $M0_CFLAGS"
       M0_KCFLAGS="-g -O2 $M0_KCFLAGS"
      ]
)

AS_IF([test x$enable_profiler = xyes],
      [AC_DEFINE([ENABLE_PROFILER])
       AC_CHECK_PROG(PPROF, pprof, pprof)
       AS_IF([test -z $PPROF],
             AC_MSG_ERROR([pprof not found. Try to 'yum install pprof'.]))
       MERO_SEARCH_LIBS([ProfilerStart], [c profiler], [PROFILER_LIBS],
                        [libprofiler not found. Try to \
'yum install gperftools-libs gperftools-devel gperf-debuginfo'.])
       AC_SUBST([PROFILER_LIBS])],
       [PROFILER_LIBS=" "])

AS_IF([test x$enable_coverage = xyes],
      [
        # Remove -O<digit> flag from $M0_CFLAGS
        M0_CFLAGS="$(echo $M0_CFLAGS | sed 's/-O[[0-9]]//g') --coverage"
        M0_LDFLAGS="-lgcov $M0_LDFLAGS"
        K_ENABLE_COVERAGE=y
      ],
      [K_ENABLE_COVERAGE=n]
)
# TODO: check if K_ENABLE_COVERAGE really requires y/n value or it's OK to use
# yes/no ?
AC_SUBST([K_ENABLE_COVERAGE])

AS_IF([test x$enable_mcheck = xyes],
      [M0_LDFLAGS="-lmcheck $M0_LDFLAGS"]
)

AS_IF([test x$enable_rpm != xyes],
      [M0_CPPFLAGS="$GALOIS_INCLUDES $YAML_INCLUDES $CUNIT_INCLUDES \
                    $DB_INCLUDES $M0_CPPFLAGS"]
)

# _GNU_SOURCE for asprintf(3), open(2) O_DIRECT flag
M0_CPPFLAGS="-D_REENTRANT -D_GNU_SOURCE -DM0_INTERNAL='' -DM0_EXTERN=extern \
             -iquote $ABS_BUILDDIR -iquote $SRCDIR -include config.h \
             $M0_CPPFLAGS"

# -Wno-attributes is required to suppress warnings about unrecognized
# __attribute__, such as __attribute__((gccxml(...))). It's important because we
# use -Werror, which turns warnings into errors, but we still need to be able to
# use gccxml attributes.
M0_CFLAGS="-Wall -Werror -Wno-attributes -fno-strict-aliasing $M0_CFLAGS"

# Prevents gcc from introducing common symbols in object files. These symbols
# are avoided because they break the compilation toolchain that Parallel
# Scientific is using.
M0_CFLAGS="-fno-common $M0_CFLAGS"

M0_LDFLAGS="-rdynamic $M0_LDFLAGS"

M0_KCPPFLAGS="-DM0_INTERNAL='' -DM0_EXTERN=extern \
              -include $ABS_BUILDDIR/config.h -iquote $ABS_BUILDDIR -iquote $ABS_SRCDIR \
              -I $LUSTRE/lnet/include -I$LUSTRE/libcfs/include -I$LUSTRE/lustre/include \
              $GALOIS_INCLUDES $M0_KCPPFLAGS"

M0_KCFLAGS="-Wall -Werror -Wno-attributes $M0_KCFLAGS"

# trim spaces at the end of flags
M0_CPPFLAGS=$(echo $M0_CPPFLAGS | sed 's/[[[:blank:]]]*$//')
M0_CFLAGS=$(echo $M0_CFLAGS | sed 's/[[[:blank:]]]*$//')
M0_KCPPFLAGS=$(echo $M0_KCPPFLAGS | sed 's/[[[:blank:]]]*$//')
M0_KCFLAGS=$(echo $M0_KCFLAGS | sed 's/[[[:blank:]]]*$//')
M0_LDFLAGS=$(echo $M0_LDFLAGS | sed 's/[[[:blank:]]]*$//')

AC_SUBST([M0_CPPFLAGS])
AC_SUBST([M0_CFLAGS])
AC_SUBST([M0_KCPPFLAGS])
AC_SUBST([M0_KCFLAGS])
AC_SUBST([M0_LDFLAGS])

#
# Setup output files
#

AC_CONFIG_FILES([
                 Makefile
                 Kbuild
                ])
AC_CONFIG_FILES([mdservice/ut/mdstore.h])
AC_CONFIG_FILES([mero.spec])
AC_CONFIG_FILES([addb/dump/m0addbdump.sh], [chmod +x addb/dump/m0addbdump.sh])
AC_CONFIG_FILES([m0t1fs/linux_kernel/st/common.sh],
                [chmod +x m0t1fs/linux_kernel/st/common.sh])
AC_CONFIG_FILES([net/test/m0nettest.sh], [chmod +x net/test/m0nettest.sh])
AC_CONFIG_FILES([net/test/m0nettestd.sh], [chmod +x net/test/m0nettestd.sh])
AC_CONFIG_FILES([net/test/test-user.sh], [chmod +x net/test/test-user.sh])
AC_CONFIG_FILES([net/test/st/st-config.sh], [chmod +x net/test/st/st-config.sh])
AC_CONFIG_FILES([net/test/demo/demo-config.sh], [chmod +x net/test/demo/demo-config.sh])
AC_CONFIG_FILES([utils/ut.sh], [chmod +x utils/ut.sh;
			        (cd utils/ && ${LN_S} ut.sh ub.sh)])
AC_CONFIG_FILES([utils/linux_kernel/ut.sh], [chmod +x utils/linux_kernel/ut.sh])

AC_OUTPUT

#
# Display resulting values of some important build variables
#

echo ""

AS_IF([test "x$CFLAGS" != x],
      [echo "CFLAGS       :  \"$CFLAGS\""])
AS_IF([test "x$CPPFLAGS" != x],
      [echo "CPPFLAGS     :  \"$CPPFLAGS\""])
AS_IF([test "x$KCFLAGS" != x],
      [echo "KCFLAGS      :  \"$KCFLAGS\""])
AS_IF([test "x$KCPPFLAGS" != x],
      [echo "KCPPFLAGS    :  \"$KCPPFLAGS\""])
AS_IF([test "x$LDFLAGS" != x],
      [echo "LDFLAGS      :  \"$LDFLAGS\""])
AS_IF([test "x$LIBS" != x],
      [echo "LIBS         :  \"$LIBS\""])

echo ""
echo "M0_CPPFLAGS  :  \"$M0_CPPFLAGS\""
echo "M0_CFLAGS    :  \"$M0_CFLAGS\""
echo "M0_KCPPFLAGS :  \"$M0_KCPPFLAGS\""
echo "M0_KCFLAGS   :  \"$M0_KCFLAGS\""
echo "M0_LDFLAGS   :  \"$M0_LDFLAGS\""
echo ""
echo "MATH_LIBS    :  \"$MATH_LIBS\""
echo "PTHREAD_LIBS :  \"$PTHREAD_LIBS\""
echo "AIO_LIBS     :  \"$AIO_LIBS\""
echo "RT_LIBS      :  \"$RT_LIBS\""
echo "PROFILER_LIBS:  \"$PROFILER_LIBS\""
echo "GALOIS_LIBS  :  \"$GALOIS_LIBS\""
echo "CUNIT_LIBS   :  \"$CUNIT_LIBS\""
echo "YAML_LIBS    :  \"$YAML_LIBS\""
echo "DB_LIBS      :  \"$DB_LIBS\""
echo ""
echo "Linux Obj    :  \"$LINUX_OBJ\""
echo "Lustre       :  \"$LUSTRE\""
echo ""

echo 'Run `make` to build Mero or `make help` for other options'

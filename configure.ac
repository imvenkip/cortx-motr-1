AC_PREREQ([2.59])
AC_INIT([colibri], [0.1], [colibri@clusterstor.com])
AC_CONFIG_SRCDIR([colibri/init.c])
AC_CONFIG_HEADER([config.h])
AC_CONFIG_MACRO_DIR([m4])

AH_TEMPLATE([PACKAGE], [Package name.])
AH_TEMPLATE([VERSION], [Version of the package.])
AH_TEMPLATE([ENABLE_DEBUG], [Enable debug info.])
AH_TEMPLATE([ENABLE_GSSRPC], [Enable gssrpc.])
AH_TEMPLATE([HAVE_JOURNAL_ABORT], [Have journal_abort() function])
AH_TEMPLATE([HAVE_FILE_READV], [Have fops->readv function])
AH_TEMPLATE([HAVE_FILE_AIO_READ], [Have fops->aio_read function])
AH_TEMPLATE([HAVE_INODE_BLKSIZE], [Have inode->i_blksize field])
AH_TEMPLATE([HAVE_WRITE_BEGIN_END], [Have .begin_write/end_write])
AH_TEMPLATE([HAVE_SENDFILE], [Have .sendfile])
AH_TEMPLATE([HAVE_STRUCT_NET], [Use struct net in sunrpc])
AH_TEMPLATE([HAVE_CRED_IN_REQ], [Have rq_cred in rpc_rqst])
AH_TEMPLATE([HAVE_MALLINFO], [Have mallinfo() function])
AH_TEMPLATE([HAVE_MALLOC_SIZE], [Have malloc_size() function])
AH_TEMPLATE([HAVE_BACKTRACE], [Have backtrace(3) function])

COLIBRI_MAJOR_VERSION=0
COLIBRI_MINOR_VERSION=1

PACKAGE=colibri
VERSION=$COLIBRI_MAJOR_VERSION.$COLIBRI_MINOR_VERSION

AM_INIT_AUTOMAKE([$PACKAGE], [$VERSION])

LT_RELEASE=$COLIBRI_MAJOR_VERSION.$COLIBRI_MINOR_VERSION
AC_SUBST([LT_RELEASE])

AC_DEFUN([COLIBRI_LINUX_CHECK_SYMBOL],
        AC_MSG_CHECKING([for symbols file])
        if grep -q Modules.symvers $LINUX/scripts/Makefile.modpost ; then
                SYMVERFILE=Modules.symvers
        else
                SYMVERFILE=Module.symvers
	fi
	AC_MSG_RESULT([$LINUX/$SYMVERFILE])

        [AC_MSG_CHECKING([for symbol $1 exported])
        grep -q -E '[[[:space:]]]$1[[[:space:]]]' $LINUX/$SYMVERFILE 2>/dev/null
        rc=$?
        if test $rc -eq 0; then
    	        AC_MSG_RESULT([yes])
    	        $2
        else
                AC_MSG_RESULT([no])
                $3
        fi
])

AC_DEFUN([COLIBRI_LINUX_CONFTEST],
[cat >conftest.c <<_ACEOF
$1
_ACEOF
])

AC_DEFUN([COLIBRI_LANG_PROGRAM],
[$1
int
main (void)
{
dnl Do *not* indent the following line: there may be CPP directives.
dnl Don't move the `;' right after for the same reason.
$2
  ;
  return 0;
}])

AC_DEFUN([COLIBRI_LINUX_COMPILE_IFELSE],
[m4_ifvaln([$1], [COLIBRI_LINUX_CONFTEST([$1])])
rm -f config/conftest.o config/conftest.mod.c config/conftest.ko
AS_IF([AC_TRY_COMMAND([cp conftest.c config && cd config && make -d $2 ${LD:+"LD=$LD"} CC="$CC" LINUX_OBJ=$LINUX_OBJ]) >/dev/null && AC_TRY_COMMAND([$3])],
	[$4],
	[_AC_MSG_LOG_CONFTEST
m4_ifvaln([$5],[$5])])
rm -f config/conftest.o config/conftest.mod.c config/conftest.mod.o config/conftest.ko m4_ifval([$1], [config/conftest.c conftest.c])[]
])

AC_DEFUN([COLIBRI_LINUX_TRY_COMPILE],[
        COLIBRI_LINUX_COMPILE_IFELSE(
                [AC_LANG_SOURCE([COLIBRI_LANG_PROGRAM([[$1]], [[$2]])])],
                [modules],
                [test -s config/conftest.o],
                [$3], [$4])
])

AC_DEFUN([COLIBRI_LINUX_CONFIG],
[AC_MSG_CHECKING([if Linux was built with CONFIG_$1])
COLIBRI_LINUX_TRY_COMPILE([
#include <linux/autoconf.h>
],[
#ifndef CONFIG_$1
#error CONFIG_$1 not #defined
#endif
],[
        AC_MSG_RESULT([yes])
        $2
],[
        AC_MSG_RESULT([no])
        $3
])
])

AC_DEFUN([COLIBRI_LINUX_FILE_READV],
[AC_MSG_CHECKING([readv in fops])
COLIBRI_LINUX_TRY_COMPILE([
#include <linux/fs.h>
],[
        struct file_operations *fops = NULL;
        fops->readv = NULL;
],[
        AC_MSG_RESULT([yes])
        AC_DEFINE([HAVE_FILE_READV])
],[
        AC_MSG_RESULT([no])
])
])

AC_DEFUN([COLIBRI_LINUX_FILE_AIO_READ],
[AC_MSG_CHECKING([->aio_read in fops])
COLIBRI_LINUX_TRY_COMPILE([
#include <linux/fs.h>
],[
        struct file_operations *fops = NULL;
        fops->aio_read = NULL;
],[
        AC_MSG_RESULT([yes])
        AC_DEFINE([HAVE_FILE_AIO_READ])
],[
	AC_MSG_RESULT([no])
])
])

AC_DEFUN([COLIBRI_LINUX_INODE_BLKSIZE],
[AC_MSG_CHECKING([inode has i_blksize field])
COLIBRI_LINUX_TRY_COMPILE([
#include <linux/fs.h>
],[
	struct inode i;
	i.i_blksize = 0;
],[
	AC_MSG_RESULT([yes])
	AC_DEFINE([HAVE_INODE_BLKSIZE])
],[
	AC_MSG_RESULT([no])
])
])

AC_DEFUN([COLIBRI_LINUX_WRITE_BEGIN_END],
[AC_MSG_CHECKING([if kernel has .write_begin/end])
COLIBRI_LINUX_TRY_COMPILE([
#include <linux/fs.h>
#ifdef HAVE_MMTYPES_H
#include <linux/mm_types.h>
#endif
#include <linux/pagemap.h>
],[
        struct address_space_operations aops;
        struct page *page;

        aops.write_begin = NULL;
        aops.write_end = NULL;
        page = grab_cache_page_write_begin(NULL, 0, 0);
], [
        AC_MSG_RESULT([yes])
        AC_DEFINE([HAVE_WRITE_BEGIN_END])
],[
        AC_MSG_RESULT([no])
])
])

AC_DEFUN([COLIBRI_LINUX_SENDFILE],
[
AC_MSG_CHECKING([if kernel has .sendfile])
COLIBRI_LINUX_TRY_COMPILE([
#include <linux/fs.h>
],[
        struct file_operations file;

        file.sendfile = NULL;
], [
        AC_MSG_RESULT([yes])
        AC_DEFINE([HAVE_SENDFILE])
],[
        AC_MSG_RESULT([no])
])
])

AC_DEFUN([COLIBRI_LINUX_STRUCT_NET],
[
AC_MSG_CHECKING([if kernel sunrpc uses struct net])
COLIBRI_LINUX_TRY_COMPILE([
#include <linux/sunrpc/clnt.h>
],[
        struct rpc_create_args a;

        a.net = NULL;
], [
        AC_MSG_RESULT([yes])
        AC_DEFINE([HAVE_STRUCT_NET])
],[
        AC_MSG_RESULT([no])
])
])

AC_DEFUN([COLIBRI_LINUX_CRED_IN_REQ],
[
AC_MSG_CHECKING([if kernel sunrpc has rq_cred in rpc_rqst])
COLIBRI_LINUX_TRY_COMPILE([
#include <linux/sunrpc/clnt.h>
],[
        struct rpc_rqst r;

        r.rq_cred = NULL;
], [
        AC_MSG_RESULT([yes])
        AC_DEFINE([HAVE_CRED_IN_REQ])
],[
        AC_MSG_RESULT([no])
])
])

AC_DEFUN([COLIBRI_LINUX_INIT_CONFIG], [
rm -fr config > /dev/null 2>&1
mkdir config
cat >config/Makefile <<_ACEOF
obj-m := conftest.o

modules:
	\$(MAKE) -C \$(LINUX_OBJ) M=\`pwd\` modules
_ACEOF
])

# Checks for programs.
AM_PROG_CC_C_O
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_AWK
AC_PROG_LIBTOOL
AM_PROG_CC_C_O

AC_PATH_PROG([NM_B], [nm], [null])
if test "x$NM_B" = "xnull"; then
        AC_MSG_ERROR([Cannot find nm program])
fi

SRCDIR=$(cd $srcdir && echo $PWD)
if ! test -d $SRCDIR; then
	AC_MSG_ERROR([Cannot figure out full path for srcdir!])
fi
AC_SUBST([SRCDIR])

AC_MSG_CHECKING([whether target platform is 64bit one])
AC_COMPUTE_INT(n_bits, [sizeof(long) * 8])
if test $n_bits -lt 64; then
	AC_MSG_RESULT([no])
	AC_MSG_ERROR([Only 64bit platforms are supported!])
fi
AC_MSG_RESULT([yes])

# Checks for libraries.
OLD_LIBS=$LIBS
AC_SEARCH_LIBS([xdr_domainname], [c nsl], [], [AC_MSG_ERROR([xdr_domainname cannot be found!])])
NSL_LIBS=$LIBS
LIBS=$OLD_LIBS
AC_SUBST([NSL_LIBS])

OLD_LIBS=$LIBS
AC_SEARCH_LIBS([pthread_create], [c pthread], [], [AC_MSG_ERROR([pthread_create cannot be found!])])
PTHREAD_LIBS=$LIBS
LIBS=$OLD_LIBS
AC_SUBST([PTHREAD_LIBS])

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([stdlib.h])
AC_CHECK_HEADERS([pthread.h], [], [AC_MSG_ERROR([pthread.h cannot be found!])])
AC_CHECK_HEADERS([netinet/in.h], [AC_DEFINE([HAVE_NETINET_IN_H])])

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_SIZE_T

AC_CHECK_DECL([mallinfo], [AC_DEFINE([HAVE_MALLINFO])], [], [[#include <malloc.h>]])
AC_CHECK_DECL([malloc_size], [AC_DEFINE([HAVE_MALLOC_SIZE])], [], [[#include <malloc/malloc.h>]])
AC_CHECK_DECL([backtrace], [AC_DEFINE([HAVE_BACKTRACE])], [], [[#include <execinfo.h>]])
AC_CHECK_TYPES([pthread_barrier_t], [AC_DEFINE([HAVE_PTHREAD_BARRIER_T])], [], [[#include <pthread.h>]])

# Checks for library functions.
AC_FUNC_MALLOC

# Configure options
AC_ARG_ENABLE([debug],
        [AC_HELP_STRING([--disable-debug], [disable debug information and logs])], [],
        [enable_debug=yes]
)

AC_ARG_ENABLE([gssrpc],
        [AC_HELP_STRING([--enable-gssrpc], [enable gssrpc support])], [],
        [enable_gssrpc=no]
)

#AC_ARG_ENABLE([db-o_direct],
#        [AC_HELP_STRING([--enable-db-o_direct], [enable db direct IO support])], [],
#        [enable_db_o_direct=no]
#)

AC_MSG_CHECKING([for operating system])
AC_MSG_RESULT([$host_os])
case $host_os in
        linux*)
                ;;
        *)
                AC_MSG_ERROR([Unsupported platform detected!])
                ;;
esac

AC_MSG_CHECKING([for linux sources dir])
AC_ARG_WITH([linux],
        [AC_HELP_STRING([--with-linux=path], [set path to linux sources])],
        [LINUX=$with_linux],
        [LINUX=/lib/modules/`uname -r`/build]
)

AC_MSG_RESULT([$LINUX])
AC_SUBST([LINUX])

AC_ARG_ENABLE(coverage,
	[  --enable-coverage  Build for test coverage analysis],
	[case "${enableval}" in
		yes) ENABLE_COVERAGE=1 ;;
		no) ENABLE_COVERAGE=0 ;;
		*) AC_MSG_ERROR([Invalid value ${enableval} for --enable-coverage]) ;;
	esac],
	[ENABLE_COVERAGE=0])

AC_SUBST([ENABLE_COVERAGE])

if test "x[$]ENABLE_COVERAGE" = "x1"
then
	# Remove -O<digit> flag from $CFLAGS
	CFLAGS="`echo $CFLAGS | sed 's/-O[0-9]//g'` --coverage"
	LDFLAGS="-lgcov"
	K_ENABLE_COVERAGE=y
else
	K_ENABLE_COVERAGE=n
fi

AC_SUBST([K_ENABLE_COVERAGE])

AC_MSG_CHECKING([for linux objects dir])
AC_ARG_WITH([linux-obj],
        [AC_HELP_STRING([--with-linux-obj=path], [set path to linux objects dir])],
        [LINUX_OBJ=$with_linux_obj],
        [LINUX_OBJ=$LINUX]
)

AC_MSG_RESULT([$LINUX_OBJ])
AC_SUBST([LINUX_OBJ])

LINUX_MOD="/lib/modules/`uname -r`"
AC_SUBST([LINUX_MOD])

# Prepare linux configuration checks facility. Should be done before
# any *_LINUX_* checks.
COLIBRI_LINUX_INIT_CONFIG

COLIBRI_LINUX_CHECK_SYMBOL([journal_abort],
        [AC_DEFINE([HAVE_JOURNAL_ABORT])])

COLIBRI_LINUX_INODE_BLKSIZE
COLIBRI_LINUX_FILE_READV
COLIBRI_LINUX_FILE_AIO_READ
COLIBRI_LINUX_WRITE_BEGIN_END
COLIBRI_LINUX_SENDFILE
COLIBRI_LINUX_STRUCT_NET
COLIBRI_LINUX_CRED_IN_REQ

OLD_LIBS=$LIBS
OLD_CFLAGS=$CFLAGS
LIBS=""
CFLAGS=""

# Check for galois
OLD_LIBS=$LIBS
LIBS=""
AC_SEARCH_LIBS([galois_create_mult_tables], [galois], [
        AC_CHECK_HEADERS([galois.h], [],
        [
                AC_MSG_ERROR([galois.h is not found. Try install galois from $SRCDIR/../galois or from rpm])
        ],[])
], [
        AC_MSG_ERROR([galois_create_mult_tables cannot be found! Try install galois package from $SRCDIR/../galois or from rpm])
])
GALOIS_LIBS=$LIBS
LIBS=$OLD_LIBS

# Check for yaml
OLD_LIBS=$LIBS
LIBS=""
AC_SEARCH_LIBS([yaml_parser_initialize], [yaml], [], [AC_MSG_ERROR([yaml_parser_initialize cannot be found! Try install yaml package from $SRCDIR/../yaml or from rpm])])
YAML_LIBS=$LIBS
LIBS=$OLD_LIBS

# Check for CUnit
OLD_LIBS=$LIBS
LIBS=""
AC_SEARCH_LIBS([CU_add_suite], [cunit],
[
        AC_CHECK_HEADERS([CUnit/Basic.h], [],
        [
                AC_MSG_ERROR([CUnit/Basic.h is not found. Try install CUnit from $SRCDIR/../cunit or CUnit-devel rpm package])
        ],[])
], [
        AC_MSG_ERROR([CU_add_suite cannot be found! Try install CUnit package from $SRCDIR/../cunit or from rpm])
], [-lncurses])
CUNIT_LIBS=$LIBS
LIBS=$OLD_LIBS

# Check for berkley db
OLD_LIBS=$LIBS
LIBS=""
AC_SEARCH_LIBS([db_env_create], [db], [
        AC_CHECK_HEADERS([db.h], [],
        [
                AC_MSG_ERROR([db.h is not found. Try install db4-devel package])
        ],[])
], [
        AC_MSG_ERROR([db_env_create cannot be found! Try install db4-devel package])
])
DB_LIBS=$LIBS

LIBS=$OLD_LIBS
CFLAGS=$OLD_CFLAGS

AC_SUBST([DB_SRC])
AC_SUBST([DB_LIBS])
AC_SUBST([GALOIS_LIBS])
AC_SUBST([YAML_LIBS])
AC_SUBST([CUNIT_LIBS])

if test x$enable_gssrpc = xyes; then
        AC_CHECK_LIB([gssrpc], [xdr_int], [
            AC_CHECK_HEADERS([gssrpc/rpc.h gssrpc/pmap_clnt.h], [],
                [
                    enable_gssrpc=no
                    AC_MSG_NOTICE([gssrpc/pmap_clnt.h gssrpc/rpc.h is not found. Gssrpc is disabled!])
                ],
                [[
                    #ifdef HAVE_GSSRPC_RPC_H
                    #include <gssrpc/rpc.h>
                    #endif
                ]])
            ],
            [
                enable_gssrpc=no
                AC_MSG_NOTICE([libgssrpc is not found. Gssrpc is disabled!])
            ]
        )
        if test x$enable_gssrpc = xyes; then
                AC_DEFINE([ENABLE_GSSRPC])
                LIBS="-lgssrpc $LIBS"
        fi
fi

# Check for libaio
OLD_LIBS=$LIBS
LIBS=""
AC_SEARCH_LIBS([io_getevents], [c aio], [], [AC_MSG_ERROR([io_getevents cannot be found! Try install libaio-devel.])])
AIO_LIBS=$LIBS
AC_SUBST([AIO_LIBS])
LIBS=$OLD_LIBS

if test x$enable_debug = xyes; then
        # If debug options specified we are free to strip all the default
        # optimization and debug flags.
        CFLAGS="$(echo $CFLAGS | sed 's/-g//' | sed 's/-O2//') -g -O0"
        KCFLAGS="$(echo $KCFLAGS | sed 's/-g//' | sed 's/-O2//') -g -O0"
        AC_DEFINE([ENABLE_DEBUG])
else
        # Remove debug flags but keep default or user optimizations
        # passed via construction like ./configure CFLAGS=-O3
        CFLAGS="$(echo $CFLAGS | sed 's/-g//')"
fi

# Check if gcc option is supported in current gcc version.
AC_DEFUN([COLIBRI_COMPILER_OPTION_CHECK],
[AC_MSG_CHECKING([whether compiler $CC supports $1 option])
OLD_CFLAGS="$CFLAGS"
CFLAGS="$OLD_CFLAGS $1"
AC_COMPILE_IFELSE([COLIBRI_LANG_PROGRAM()],
        [AC_MSG_RESULT([yes]);
         KCFLAGS="$KCFLAGS $1"],
        [AC_MSG_RESULT([no]);
	 KCFLAGS="$KCFLAGS"]
)]
CFLAGS="$OLD_CFLAGS")

#
# _GNU_SOURCE for asprintf(3), open(2) O_DIRECT flag
#
CFLAGS=`echo "-Wall -Werror -D_REENTRANT -D_GNU_SOURCE -fno-strict-aliasing -I. -I$SRCDIR $CFLAGS"`
KCFLAGS="-Wall -Werror $KCFLAGS"
COLIBRI_COMPILER_OPTION_CHECK([-Wno-unused-but-set-variable])

LDFLAGS="-rdynamic $LDFLAGS"

# trim spaces at the end of flags
CFLAGS=$(echo $CFLAGS | sed 's/[[:blank:]]*$//')
KCFLAGS=$(echo $KCFLAGS | sed 's/[[:blank:]]*$//')
LDFLAGS=$(echo $LDFLAGS | sed 's/[[:blank:]]*$//')
AC_SUBST([KCFLAGS])

# Please keep this list sorted (always appending new items at the end
# results in needless merge conflicts)
AC_CONFIG_FILES([
                 Makefile
                 addb/Makefile
                 addb/addb_pseudo/Makefile
                 balloc/Makefile
                 balloc/ut/Makefile
                 build_kernel_modules/Makefile
                 capa/Makefile
                 capa/ut/Makefile
                 c2t1fs/Makefile
                 cfg/Makefile
                 cob/Makefile
                 cob/ut/Makefile
                 colibri/Makefile
                 colibri/ut/Makefile
		 console/Makefile
                 console/bin/Makefile
                 console/ut/Makefile
                 console/st/Makefile
                 db/Makefile
                 db/ut/Makefile
                 desim/Makefile
                 desim/ut/Makefile
                 doc/Makefile
                 dtm/Makefile
                 fid/Makefile
                 fol/Makefile
                 fol/ut/Makefile
                 fop/Makefile
                 fop/fop2c
                 fop/rt/Makefile
                 fop/ut/Makefile
                 ioservice/Makefile
                 ioservice/ut/Makefile
                 layout/Makefile
                 layout/ut/Makefile
                 lib/Makefile
                 lib/user_space/Makefile
                 lib/ut/Makefile
                 m4/Makefile
                 man/Makefile
                 mds/Makefile
                 mw/Makefile
                 net/Makefile
		 net/bulk_emulation/Makefile
		 net/bulk_emulation/st/Makefile
		 net/bulk_emulation/st/linux_kernel/Makefile
		 net/bulk_emulation/ut/Makefile
                 net/usunrpc/Makefile
		 net/ut/Makefile
		 net/st/Makefile
                 nrs/Makefile
                 patches/Makefile
                 pool/Makefile
                 reqh/Makefile
		 reqh/ut/Makefile
                 rpc/Makefile
                 rpc/ut/Makefile
                 rpc/it/Makefile
		 rpc/it/linux_kernel/Makefile
                 sm/Makefile
                 sm/ut/Makefile
                 sns/Makefile
                 sns/ut/Makefile
                 stob/Makefile
                 stob/ut/Makefile
                 udb/Makefile
                 udb/ut/Makefile
                 ut/Makefile
                 ut/linux_kernel/Makefile
                 utils/Makefile
                 utils/linux_kernel/Makefile
                 utils/ploss/Makefile
                 xcode/Makefile
                 xcode/ff2c/Makefile
                 xcode/ut/Makefile
		 yaml2db/Makefile
		 yaml2db/ut/Makefile
		 yaml2db/st/Makefile
		 colibri.spec
                ])
AC_OUTPUT

#
# Set up execute bit on our "compiler" generated from fop2c.in above.
#
chmod +x fop/fop2c

echo ""
echo "LIBS   :  \"$LIBS\""
echo "CFLAGS :  \"$CFLAGS\""
echo "KCFLAGS:  \"$KCFLAGS\""
echo "LDFLAGS:  \"$LDFLAGS\""
echo ""

echo "Linux  :  \"$LINUX\""
echo ""

echo "Type 'make' to build Colibri"

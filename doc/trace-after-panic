Google doc link - http://goo.gl/CEcbVb

Prerequisites

The system on which the panic may happen (most probably the
client where Mero m0mero.ko module is run and m0t1fs is mounted)
should be configured to dump vmcore after panic. Refer to this
document for reference:
https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/ch-kdump.html

On tibia setup it is configured on tibia10 node which dumps
vmcores to tibia00:/var/crash directory.

IMPORTANT: The kernel module image is needed to be saved
beforehand every time the m0mero.ko module is loaded so the
trace buffer could be parsed afterwards with m0tracedump. To
get the image, mount debugfs (mount -t debugfs none
/sys/kernel/debug) and just copy /sys/kernel/debug/mero/core
to some file.

Mero Trace buffer size should be configured to adequate value.
For example, if the throughput is expected to be high, the
buffer size should be at least 128MB. In /etc/sysconfig/mero
file update the following parameter:

MERO_KMOD_EXTRA_PARAMS="trace_buf_size=134217728"


Main steps

1) Get the system logs and figure out the address of Mero trace buffer

[ant@tibia00 ~]$ crash /var/crash/172.16.2.13-2014-10-21-07\:47\:23/vmcore /usr/lib/debug/lib/modules/2.6.32-220.7.1.el6.lustre.4222.x86_64/vmlinux
...
crash> log
...
[233525.664575] mero: trace buffer address: 0xffffc9001c179000 

The Mero stack could be also seen from the log.

2) Get the dump of trace buffer into the file

crash> rd -8 -x 0xffffc9001c178000 134221824 > tb.ascii

Note: start address is less on 4K (page size) to include the
trace buffer header. As result, the buffer size is bigger on
4K (in our case 128M + 4K).

3) Decode the dump into binary format with xxd utility

The trace buffer which is dumped by crash utility is written
in the ASCII format. But we need the plain binary format to
feed into m0tracedump utility. For this reason we make reverse
conversion from ASCII format into binary one:

[ant@tibia00 ~]$ cat tb.ascii | sed 's/.*:  //' > tb2.ascii # cut addresses off
[ant@tibia00 ~]$ xxd -r -p tb2.ascii tb.bin
[ant@tibia00 ~]$ ls -l tb.bin 
-rw-rw-r-- 1 ant ant 134221824 Nov 10 03:21 tb.bin

Now, the trace buffer can be converted to Yaml format with
m0tracedump (module image is needed saved beforehand) and
eventually parsed with m0trace:

[root@tibia10 ~]# m0tracedump -k m0mero.img -i tb.bin -o trace.yml
[root@tibia10 ~]# m0trace --format='custom:%N %T %a %l %F:%L %f %m' -i trace.yml

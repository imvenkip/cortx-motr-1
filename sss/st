#!/bin/bash
set -eu

umask 0002

# TRACE_m0d='M0_TRACE_IMMEDIATE_MASK=!memory,stob M0_TRACE_LEVEL=info+'
# TRACE_console='M0_TRACE_IMMEDIATE_MASK=!memory,stob M0_TRACE_LEVEL=info+'

## CAUTION: This path will be removed by superuser.
SANDBOX_DIR=${SANDBOX_DIR:-/var/mero/sandbox.sss-st}

SERVER_TMID=1001
CLIENT_TMID=1002
SVC_ID='(8286623314361712641, 1)'
SVC_ID_ARG='<7300000000000001:1>'

M0_CORE_DIR=`readlink -f $0`
M0_CORE_DIR=${M0_CORE_DIR%/*/*}

. $M0_CORE_DIR/scripts/functions  # die, opcode

CONFDB_PATH=$M0_CORE_DIR/conf/ut/conf-str.txt
if [ "$(perl -wse 'print int(rand(2))')" -eq 0 ]; then  # 0.5 probability
	CONFDB_m0d="-c $CONFDB_PATH"
fi

sss_send() {
	[ $# -eq 3 ] || die 'Invalid arguments'
	local SVC="$1"
	local CMD=
	case "$2" in  # see m0_sss_req_cmd for the values
		M0_SERVICE_INIT)
			CMD=4
			if [ $SVC = confd -a -z "${CONFDB_m0d:-}" ]; then
				local SS_PARAM="$CONFDB_PATH"
			fi;;
		M0_SERVICE_START)  CMD=0;;
		M0_SERVICE_STOP)   CMD=1;;
		M0_SERVICE_STATUS) CMD=2;;
		M0_SERVICE_QUIESCE) CMD=3;;
		*) die 'Invalid value';;
	esac
	local ID="$3"

	env ${TRACE_console:-} $M0_CORE_DIR/console/bin/m0console \
		-f $(opcode M0_SSS_REQ_OPCODE) \
		-s $(endpoint $SERVER_TMID) -c $(endpoint $CLIENT_TMID) \
		-d "($CMD, \"$SVC\", $ID, \"${SS_PARAM:-}\")" -v
}

svc_state() {
	case "${1:-}" in  # see m0_reqh_service_state for the values
		M0_RST_INITIALISED) echo 1;;
		M0_RST_STARTED) echo 3;;
		M0_RST_STOPPING) echo 4;;
		M0_RST_STOPPED) echo 5;;
		_ENOENT)   echo -2;;
		_EINVAL)   echo -22;;
		_EPROTO)   echo -71;;
		_EALREADY) echo -114;;
		*) die 'Invalid value';;
	esac
}

sss_check() {
	[ $# -eq 5 ] || die 'Invalid arguments'
	local SERVICE_NAME="$1"
	local COMMAND="$2"
	local SERVICE_ID="$3"
	local KEY_NAME="$4"
	local EXPECTED_VALUE="$5"

	echo -n "$SERVICE_NAME $COMMAND... " >&2
	sss_send $SERVICE_NAME $COMMAND "$SERVICE_ID" &>$SANDBOX_DIR/console.log
	local ACTUAL=$(awk "/$KEY_NAME/ {print \$3}" $SANDBOX_DIR/console.log)
	local EXPECTED=$(svc_state $EXPECTED_VALUE)
	[ "$ACTUAL" = "$EXPECTED" ] || \
		die "Expected service state (${EXPECTED}) != actual (${ACTUAL})"
	echo 'OK' >&2
}

sandbox_init() {
	rm -rf $SANDBOX_DIR
	mkdir $SANDBOX_DIR
	pushd $SANDBOX_DIR >/dev/null
}

sandbox_fini() {
	popd >/dev/null
	rm -r $SANDBOX_DIR
}

endpoint() {
	local LNET_NID=`lctl list_nids | head -1`
	local TMID="${1:-}"  # numeric value, e.g. 1001
	## LNet endpoint address format (see net/lnet/lnet.h):
	##     NID:PID:Portal:TMID
	##
	## The PID value of 12345 is used by Lustre in the kernel and is
	## the only value currently supported.
	echo "${LNET_NID}:12345:34:${TMID}"
}

m0d_start() {
	local MKFS_OPTS='-T linux -D sss_st.db -S sss_st.stob'\
' -A linuxstob:sss_st-addb.stob'
	local M0D_OPT='-w 4 -m 163840 -q 16'

	echo -n 'Running m0mkfs... ' >&2
	$M0_CORE_DIR/utils/mkfs/m0mkfs $MKFS_OPTS &>$SANDBOX_DIR/mkfs.log || \
		die 'm0mkfs failed'
	echo 'OK' >&2

	## "sns_repair" and "sns_rebalance" (see below)
	## require "ioservice" running.
	env ${TRACE_m0d:-} $M0_CORE_DIR/mero/m0d $MKFS_OPTS \
		-e lnet:$(endpoint $SERVER_TMID) ${CONFDB_m0d:-} $M0D_OPT \
		-s "ioservice:$SVC_ID_ARG" &>$SANDBOX_DIR/m0d.log &
	sleep 1
	killall -q -0 lt-m0d || die 'Failed to start m0d'
}

m0d_stop() {
	killall -q lt-m0d && wait 2>/dev/null || true
}

usage() {
	cat <<EOF
Usage: ${0##*/} [COMMAND]

Supported commands:
  run      run system tests (default command)
  help     display this help and exit
EOF
}

## -------------------------------------------------------------------
## main
## -------------------------------------------------------------------

[ `id -u` -eq 0 ] || die 'Must be run by superuser'

case "${1:-}" in
	run|'') ;;
	help) usage; exit;;
	*) usage >&2; die;;
esac

$M0_CORE_DIR/conf/st insmod
sandbox_init
m0d_start

sss_check ioservice M0_SERVICE_STATUS "$SVC_ID" ssr_state M0_RST_STARTED
sss_check ioservice M0_SERVICE_STATUS '(0, 0)'  ssr_rc    _EINVAL

SVC_NAMES=(confd stats rmservice mdservice addb sns_repair sns_rebalance)
for ((i=0; i < ${#SVC_NAMES[*]}; i += 1)); do
	SVC2_ID="(8286623314361712642, $i)"
	echo "id=$SVC2_ID"
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STATUS "$SVC2_ID" \
		ssr_rc _ENOENT
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_INIT   "$SVC2_ID" \
		ssr_state M0_RST_INITIALISED
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STATUS "$SVC2_ID" \
		ssr_state M0_RST_INITIALISED
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_START  "$SVC2_ID" \
		ssr_state M0_RST_STARTED
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STATUS "$SVC2_ID" \
		ssr_state M0_RST_STARTED
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_START  "$SVC2_ID" \
		ssr_rc    _EPROTO
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_QUIESCE   "$SVC2_ID" \
		ssr_state M0_RST_STOPPING
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STATUS "$SVC2_ID" \
		ssr_state M0_RST_STOPPING
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STOP   "$SVC2_ID" \
		ssr_state M0_RST_STOPPED
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STATUS "$SVC2_ID" \
		ssr_rc _ENOENT
done
sss_check unknown_service M0_SERVICE_START   "(8286623314361712643, 10)" ssr_rc  _ENOENT
sss_check ioservice       M0_SERVICE_QUIESCE "$SVC_ID" ssr_state M0_RST_STOPPING
sss_check ioservice       M0_SERVICE_STATUS  "$SVC_ID" ssr_state M0_RST_STOPPING
sss_check ioservice       M0_SERVICE_STOP    "$SVC_ID" ssr_state M0_RST_STOPPED
sss_check ioservice       M0_SERVICE_STATUS  "$SVC_ID" ssr_rc _ENOENT

m0d_stop
sandbox_fini
$M0_CORE_DIR/conf/st rmmod

#!/bin/bash
set -eu

umask 0002

# TRACE_m0d='M0_TRACE_IMMEDIATE_MASK=!memory,stob M0_TRACE_LEVEL=info+'
# TRACE_console='M0_TRACE_IMMEDIATE_MASK=!memory,stob M0_TRACE_LEVEL=info+'

## CAUTION: This path will be removed by superuser.
SANDBOX_DIR=${SANDBOX_DIR:-/var/mero/sandbox.sss-st}

SERVER_TMID=1
CLIENT_TMID=1002
SVC_IOS_FID='<7300000000000001:1>'
CONFD_FID='<7300000000000001:2>'
SVC_IOS_ID='(8286623314361712641, 1)'
SVC_ID_NOENT='(8286623314361712641, 10)'
SVC_ID=$SVC_IOS_ID
PROC_ID='^r|1:5'

M0_CORE_DIR=`readlink -f $0`
M0_CORE_DIR=${M0_CORE_DIR%/*/*}

. $M0_CORE_DIR/scripts/functions  # die, opcode

CONF_PROFILE='<0x7000000000000001:0>'
CONFDB_PATH=$M0_CORE_DIR/ut/conf-str.txt
if [ "$(perl -wse 'print int(rand(2))')" -eq 0 ]; then  # 0.5 probability
	CONFDB_m0d="-c $CONFDB_PATH"
fi

sss_send() {
	[ $# -eq 3 ] || die 'Invalid arguments'
	local SVC="$1"
	local CMD=
	case "$2" in  # see m0_sss_req_cmd for the values
		M0_SERVICE_INIT)
			CMD=4
			if [ $SVC = confd -a -z "${CONFDB_m0d:-}" ]; then
				local SS_PARAM="$CONFDB_PATH"
			fi;;
		M0_SERVICE_START)  CMD=0;;
		M0_SERVICE_STOP)   CMD=1;;
		M0_SERVICE_STATUS) CMD=2;;
		M0_SERVICE_QUIESCE) CMD=3;;
		*) die 'Invalid value';;
	esac
	local ID="$3"

	env ${TRACE_console:-} $M0_CORE_DIR/console/bin/m0console \
		-f $(opcode M0_SSS_REQ_OPCODE) \
		-s $(endpoint $SERVER_TMID) -c $(endpoint $CLIENT_TMID) \
		-d "($CMD, \"$SVC\", $ID, \"${SS_PARAM:-}\")" -v
}

sss_process_send() {
	[ $# -eq 2 ] || die 'Invalid arguments'
	local CMD=
	case "$1" in  # see m0_ss_process_req_cmd for the values
		M0_PROCESS_STOP) CMD=0;;
		M0_PROCESS_RECONFIG) CMD=1;;
		M0_PROCESS_HEALTH) CMD=2;;
		M0_PROCESS_QUIESCE) CMD=3;;
		M0_PROCESS_RUNNING_LIST) CMD=4;;
		*) die 'Invalid value';;
	esac
	local ID="$2"

	env ${TRACE_console:-} timeout 60 $M0_CORE_DIR/console/bin/m0console \
		-f $(opcode M0_SSS_PROCESS_REQ_OPCODE) \
		-s $(endpoint $SERVER_TMID) -c $(endpoint $CLIENT_TMID) \
		-d "($CMD, $ID)" -v || true

}

svc_state() {
	case "${1:-}" in  # see m0_reqh_service_state for the values
		M0_RST_INITIALISED) echo 1;;
		M0_RST_STARTED) echo 3;;
		M0_RST_STOPPING) echo 4;;
		M0_RST_STOPPED) echo 5;;
		_ENOENT)   echo -2;;
		_EINVAL)   echo -22;;
		_EPROTO)   echo -71;;
		_EALREADY) echo -114;;
		OK) echo 0;;
		*) die 'Invalid value';;
	esac
}

sss_check() {
	[ $# -eq 5 ] || die 'Invalid arguments'
	local SERVICE_NAME="$1"
	local COMMAND="$2"
	local SERVICE_ID="$3"
	local KEY_NAME="$4"
	local EXPECTED_VALUE="$5"

	echo -n "$SERVICE_NAME $COMMAND... " >&2
	sss_send $SERVICE_NAME $COMMAND "$SERVICE_ID" &>$SANDBOX_DIR/console.log
	local ACTUAL=$(awk "/$KEY_NAME/ {print \$3}" $SANDBOX_DIR/console.log)
	local EXPECTED=$(svc_state $EXPECTED_VALUE)
	[ "$ACTUAL" = "$EXPECTED" ] || \
		die "Expected service state (${EXPECTED}) != actual (${ACTUAL})"
	echo 'OK' >&2
}

sss_process_check() {
	[ $# -eq 4 ] || die 'Invalid arguments'
	local COMMAND="$1"
	local PROCESS_ID="$2"
	local KEY_NAME="$3"
	local EXPECTED_VALUE="$4"

	echo -n "$COMMAND $PROCESS_ID... " >&2
	sss_process_send $COMMAND "$PROCESS_ID" &>$SANDBOX_DIR/console.log
	local ACTUAL=$(awk "/$KEY_NAME/ {print \$3}" $SANDBOX_DIR/console.log)
	local EXPECTED=$(svc_state $EXPECTED_VALUE)
	[ "$ACTUAL" = "$EXPECTED" ] || \
		die "Expected service state (${EXPECTED}) != actual (${ACTUAL})"
	echo 'OK' >&2
}

sss_process_restart_check() {
	local EXPECTED=$(grep Restarting $SANDBOX_DIR/m0d.log)
	[ A"$EXPECTED" = A"Restarting" ] || die "Expected restarting state"
	echo 'Restart OK' >&2
}

sandbox_init() {
	rm -rf $SANDBOX_DIR
	mkdir $SANDBOX_DIR
	pushd $SANDBOX_DIR >/dev/null
}

sandbox_fini() {
	popd >/dev/null
	rm -r $SANDBOX_DIR
}

endpoint() {
	local LNET_NID="0@lo" #`lctl list_nids | head -1`
	local TMID="${1:-}"  # numeric value, e.g. 1001
	## LNet endpoint address format (see net/lnet/lnet.h):
	##     NID:PID:Portal:TMID
	##
	## The PID value of 12345 is used by Lustre in the kernel and is
	## the only value currently supported.
	echo "${LNET_NID}:12345:34:${TMID}"
}

m0d_start() {
	local MKFS_OPTS="-T linux -D sss_st.db -S sss_st.stob'\
		' -A linuxstob:sss_st-addb.stob -e lnet:$(endpoint\
		$SERVER_TMID) -s confd:$CONFD_FID -c $CONFDB_PATH\
		-P $CONF_PROFILE"
	local M0D_OPT='-w 4 -m 163840 -q 16'

	echo -n 'Running m0mkfs... ' >&2
	$M0_CORE_DIR/utils/mkfs/m0mkfs $MKFS_OPTS &>$SANDBOX_DIR/mkfs.log || \
		die 'm0mkfs failed'
	echo 'OK' >&2

	## "sns_repair" and "sns_rebalance" (see below)
	## require "ioservice" running.
	env ${TRACE_m0d:-} $M0_CORE_DIR/mero/m0d $MKFS_OPTS \
		${CONFDB_m0d:-} $M0D_OPT -f '<0x7200000000000001:1>'\
		-s "ioservice:$SVC_IOS_FID" &>$SANDBOX_DIR/m0d.log &
	sleep 1
	killall -q -0 lt-m0d || die 'Failed to start m0d'
}

m0d_stop() {
	killall -q lt-m0d && wait 2>/dev/null || true
}

usage() {
	cat <<EOF
Usage: ${0##*/} [COMMAND]

Supported commands:
  run      run system tests (default command)
  help     display this help and exit
EOF
}

## -------------------------------------------------------------------
## main
## -------------------------------------------------------------------

[ `id -u` -eq 0 ] || die 'Must be run by superuser'

case "${1:-}" in
	run|'') ;;
	help) usage; exit;;
	*) usage >&2; die;;
esac

$M0_CORE_DIR/conf/st insmod
sandbox_init
m0d_start

sss_process_check M0_PROCESS_RECONFIG "$PROC_ID" sspr_rc OK
# wait reconfigure
sleep 5
sss_process_restart_check

sss_check ioservice M0_SERVICE_STATUS "$SVC_ID" ssr_state M0_RST_STARTED
sss_check ioservice M0_SERVICE_STATUS "$SVC_ID_NOENT" ssr_rc _ENOENT  # invalid id

SVC_NAMES=(stats rmservice mdservice addb2 sns_repair sns_rebalance)
for ((i=0; i < ${#SVC_NAMES[*]}; i += 1)); do
        SVC_ID="(8286623314361712642, $i)"
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STATUS  "$SVC_ID" \
		ssr_rc _ENOENT
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_INIT    "$SVC_ID" \
		ssr_state M0_RST_INITIALISED
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STATUS  "$SVC_ID" \
		ssr_state M0_RST_INITIALISED
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_START   "$SVC_ID" \
		ssr_state M0_RST_STARTED
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STATUS  "$SVC_ID" \
		ssr_state M0_RST_STARTED
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_START   "$SVC_ID" \
		ssr_rc    _EPROTO
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_QUIESCE "$SVC_ID" \
		ssr_state M0_RST_STOPPING
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STATUS  "$SVC_ID" \
		ssr_state M0_RST_STOPPING
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STOP    "$SVC_ID" \
		ssr_state M0_RST_STOPPED
	sss_check ${SVC_NAMES[$i]} M0_SERVICE_STATUS  "$SVC_ID" \
		ssr_rc _ENOENT
done
SVC_ID=$SVC_IOS_ID
sss_check unknown_service M0_SERVICE_START   "$SVC_ID_NOENT" ssr_rc  _ENOENT
sss_check unknown_service M0_SERVICE_START   "$SVC_ID" ssr_rc    _EPROTO
sss_check ioservice       M0_SERVICE_QUIESCE "$SVC_ID" ssr_state M0_RST_STOPPING
sss_check ioservice       M0_SERVICE_STATUS  "$SVC_ID" ssr_state M0_RST_STOPPING
sss_check ioservice       M0_SERVICE_STOP    "$SVC_ID" ssr_state M0_RST_STOPPED
sss_check ioservice       M0_SERVICE_STATUS  "$SVC_ID" ssr_rc    _ENOENT

m0d_stop
sandbox_fini
$M0_CORE_DIR/conf/st rmmod

# this msg is used by Jenkins as a test success criteria;
# it should appear on STDOUT
if [ $? -eq 0 ] ; then
    echo "sss: test status: SUCCESS"
fi

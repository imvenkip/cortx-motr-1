From 273a7d0953831924b37ef7da73fddebe842d85ae Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Wed, 5 Mar 2014 17:38:04 +0530
Subject: [PATCH 07/20]  - Changed timer arguments  - Fix for
 sm_addb_counter_fini issue.  - Increased lockers max value.

---
 addb/addb_monitor.c    |  1 -
 fop/fom.c              | 16 ++++++++--------
 fop/fop_rate_monitor.c |  5 ++++-
 reqh/reqh.h            |  2 +-
 4 files changed, 13 insertions(+), 11 deletions(-)

diff --git a/addb/addb_monitor.c b/addb/addb_monitor.c
index 8756f87..bebc454 100644
--- a/addb/addb_monitor.c
+++ b/addb/addb_monitor.c
@@ -309,7 +309,6 @@ M0_INTERNAL void m0_addb_monitor_sum_rec_fini(struct m0_addb_sum_rec *sum_rec)
 
 	sum_rec->asr_rec.ss_id              = M0_STATS_ID_UNDEFINED;
 	sum_rec->asr_rec.ss_data.au64s_nr   = 0;
-	m0_free(sum_rec->asr_rec.ss_data.au64s_data);
 	sum_rec->asr_rec.ss_data.au64s_data = NULL;
 
 	m0_mutex_fini(&sum_rec->asr_mutex);
diff --git a/fop/fom.c b/fop/fom.c
index 206422f..31da51d 100644
--- a/fop/fom.c
+++ b/fop/fom.c
@@ -811,13 +811,14 @@ static int loc_init(struct m0_fom_locality *loc, size_t cpu, size_t cpu_max)
 	M0_ADDB_CTX_INIT(addb_mc, &loc->fl_addb_ctx, &m0_addb_ct_fom_locality,
 			 &loc->fl_dom->fd_reqh->rh_addb_ctx, cpu);
 
-	expire = m0_time_from_now(M0_FOP_RATE_INTERVAL_SECOND, 0);
-	result = m0_timer_init(&loc->fl_fop_rate_timer, M0_TIMER_SOFT, expire,
+	result = m0_timer_init(&loc->fl_fop_rate_timer, M0_TIMER_SOFT, NULL,
 			       fop_rate_timer_callback, (unsigned long)loc);
-	result = result != 0 ? :  m0_timer_start(&loc->fl_fop_rate_timer);
 	if (result != 0)
 		goto err4;
 
+	expire = m0_time_from_now(M0_FOP_RATE_INTERVAL_SECOND, 0);
+	m0_timer_start(&loc->fl_fop_rate_timer, expire);
+
 	result = m0_addb_counter_init(&loc->fl_stat_run_times,
 				      &m0_addb_rt_fl_run_times);
 	if (result != 0)
@@ -1031,15 +1032,14 @@ void m0_fom_fini(struct m0_fom *fom)
 	loc  = fom->fo_loc;
 	reqh = loc->fl_dom->fd_reqh;
 	fom_state_set(fom, M0_FOS_FINISH);
+
 	if (m0_addb_ctx_is_initialized(&fom->fo_addb_ctx)) {
 		m0_sm_stats_post(&fom->fo_sm_phase, &reqh->rh_addb_mc,
-				M0_FOM_ADDB_CTX_VEC(fom));
+				 M0_FOM_ADDB_CTX_VEC(fom));
 		m0_sm_stats_post(&fom->fo_sm_state, &reqh->rh_addb_mc,
-				M0_FOM_ADDB_CTX_VEC(fom));
-		m0_addb_sm_counter_fini(&fom->fo_sm_state_stats);
+				 M0_FOM_ADDB_CTX_VEC(fom));
 	}
-	if (fom->fo_sm_state_stats.asc_data != NULL)
-		m0_addb_sm_counter_fini(&fom->fo_sm_state_stats);
+	m0_addb_sm_counter_fini(&fom->fo_sm_state_stats);
 	if (fom->fo_sm_phase_stats.asc_data != NULL) {
 		m0_free(fom->fo_sm_phase_stats.asc_data);
 		m0_addb_sm_counter_fini(&fom->fo_sm_phase_stats);
diff --git a/fop/fop_rate_monitor.c b/fop/fop_rate_monitor.c
index dc36467..bd5c890 100644
--- a/fop/fop_rate_monitor.c
+++ b/fop/fop_rate_monitor.c
@@ -120,8 +120,10 @@ int m0_fop_rate_monitor_init(struct m0_reqh         *reqh,
 
 	FOP_ALLOC_ARR(md, fop_rate_stats_nr, FOM_RATE_MON_INIT,
 		      &m0_fop_addb_ctx);
-	if (md == NULL)
+	if (md == NULL) {
+		m0_free(sum_rec);
 		M0_RETURN(-ENOMEM);
+	}
 
 	m0_addb_monitor_init(monitor, &fop_rate_monitor_ops);
 	loc = container_of(monitor, struct m0_fom_locality,
@@ -154,6 +156,7 @@ void m0_fop_rate_monitor_fini(struct m0_reqh         *reqh,
 	m0_reqh_lockers_clear(reqh, fop_rate_monitor_key);
 
 	m0_addb_monitor_sum_rec_fini(sum_rec);
+	m0_free(sum_rec->asr_rec.ss_data.au64s_data);
 	m0_free(sum_rec);
 
 	m0_addb_monitor_fini(monitor);
diff --git a/reqh/reqh.h b/reqh/reqh.h
index 106a8b3..bcc57aa 100644
--- a/reqh/reqh.h
+++ b/reqh/reqh.h
@@ -62,7 +62,7 @@ struct m0_net_xprt;
 struct m0_rpc_machine;
 struct m0_local_service_ops;
 
-M0_LOCKERS_DECLARE(M0_EXTERN, m0_reqh, 256);
+M0_LOCKERS_DECLARE(M0_EXTERN, m0_reqh, 512);
 
 /** Local reply consumer service (testing or replicator) */
 struct m0_local_service {
-- 
1.8.3.2


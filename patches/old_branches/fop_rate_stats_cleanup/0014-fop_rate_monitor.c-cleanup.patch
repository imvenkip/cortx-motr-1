From 4bbeb732c297f2c2e975d2da72f534493cc12dc6 Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Mon, 24 Mar 2014 19:19:59 +0530
Subject: [PATCH 14/20]  - fop_rate_monitor.c cleanup

---
 fop/fom.c              |  11 +--
 fop/fop_rate_monitor.c | 210 ++++++++++++++++++++++++-------------------------
 fop/fop_rate_monitor.h |  11 ++-
 3 files changed, 113 insertions(+), 119 deletions(-)

diff --git a/fop/fom.c b/fop/fom.c
index fd16f65..b66ce5c 100644
--- a/fop/fom.c
+++ b/fop/fom.c
@@ -862,7 +862,8 @@ static void loc_ast_post_stats(struct m0_sm_group *grp, struct m0_sm_ast *ast)
 	struct m0_fom_locality     *loc = container_of(ast,
 						       struct m0_fom_locality,
 						       fl_post_stats_ast);
-	struct m0_fop_rate_monitor *fop_rate_monitor = m0_fop_rate_monitor(loc);
+	struct m0_fop_rate_monitor *fop_rate_monitor =
+		m0_fop_rate_monitor_get(loc);
 	struct m0_addb_ctx         *cv[] = {&loc->fl_addb_ctx, NULL};
 	struct m0_addb_mc          *mc   = &loc->fl_dom->fd_reqh->rh_addb_mc;
 
@@ -870,8 +871,8 @@ static void loc_ast_post_stats(struct m0_sm_group *grp, struct m0_sm_ast *ast)
 		M0_ADDB_POST_CNTR(mc, cv, &loc->fl_stat_run_times);
 	if (m0_addb_counter_nr(&loc->fl_stat_sched_wait_times) > 0)
 		M0_ADDB_POST_CNTR(mc, cv, &loc->fl_stat_sched_wait_times);
-	if (m0_addb_counter_nr(&fop_rate_monitor->frm_stat_fop_rate) > 0)
-		M0_ADDB_POST_CNTR(mc, cv, &fop_rate_monitor->frm_stat_fop_rate);
+	if (m0_addb_counter_nr(&fop_rate_monitor->frm_addb_ctr) > 0)
+		M0_ADDB_POST_CNTR(mc, cv, &fop_rate_monitor->frm_addb_ctr);
 
 	M0_ADDB_POST(mc, &m0_addb_rt_fl_runq_nr, cv, loc->fl_runq_nr);
 	M0_ADDB_POST(mc, &m0_addb_rt_fl_wail_nr, cv, loc->fl_wail_nr);
@@ -1030,9 +1031,9 @@ void m0_fom_fini(struct m0_fom *fom)
 
 	M0_CNT_DEC(loc->fl_foms);
 
-	fop_rate_monitor = m0_fop_rate_monitor(loc);
+	fop_rate_monitor = m0_fop_rate_monitor_get(loc);
 	if (fop_rate_monitor != NULL)
-		M0_CNT_INC(fop_rate_monitor->frm_fop_rate_count);
+		M0_CNT_INC(fop_rate_monitor->frm_count);
 	if (loc->fl_foms == 0)
 		m0_chan_signal_lock(&reqh->rh_sd_signal);
 }
diff --git a/fop/fop_rate_monitor.c b/fop/fop_rate_monitor.c
index 9124812..d026101 100644
--- a/fop/fop_rate_monitor.c
+++ b/fop/fop_rate_monitor.c
@@ -35,11 +35,13 @@
  */
 struct m0_reqh;
 
+enum {
+	INTERVAL_SECOND = 1,
+};
+
 int key = 0;
-static int
-fop_rate_monitor_timer_arm(struct m0_fop_rate_monitor *fop_rate_monitor);
-static void fop_rate_monitor_timer_rearm(struct m0_sm_group *grp,
-					 struct m0_sm_ast   *ast);
+static void timer_rearm(struct m0_sm_group *grp, struct m0_sm_ast *ast);
+
 static struct fop_rate_stats_sum_rec {
 	uint64_t ssr_fop_rate;
 }fop_rate_stats_sum;
@@ -47,35 +49,90 @@ static struct fop_rate_stats_sum_rec {
 M0_BASSERT((sizeof(fop_rate_stats_sum) / sizeof(uint64_t)) ==
 	   M0_FOP_RATE_MON_DATA_NR);
 
-static struct m0_addb_sum_rec *
-fop_rate_monitor_sum_rec(struct m0_addb_monitor *mon,
-		         struct m0_reqh         *reqh)
+static void __timer_fini(struct m0_timer *timer)
+{
+	m0_timer_stop(timer);
+	m0_timer_fini(timer);
+}
+
+static unsigned long timer_callback(unsigned long arg)
+{
+	struct m0_fop_rate_monitor *mon = (struct m0_fop_rate_monitor *)arg;
+
+	m0_addb_counter_update(&mon->frm_addb_ctr, mon->frm_count);
+	mon->frm_count = 0;
+	if (mon->frm_loc->fl_post_stats_ast.sa_next == NULL) {
+		mon->frm_loc->fl_post_stats_ast.sa_cb = timer_rearm;
+		m0_sm_ast_post(&mon->frm_loc->fl_group,
+			       &mon->frm_loc->fl_post_stats_ast);
+	}
+	return 0;
+}
+
+static int timer_arm(struct m0_fop_rate_monitor *mon)
+{
+	int              result;
+	m0_time_t        expire;
+	struct m0_timer *timer = &mon->frm_timer;
+
+	result = m0_timer_init(timer, M0_TIMER_SOFT, NULL, timer_callback,
+			       (unsigned long)mon);
+	if (result != 0)
+		return result;
+
+	expire = m0_time_from_now(INTERVAL_SECOND, 0);
+	m0_timer_start(timer, expire);
+
+	return 0;
+}
+
+static void timer_rearm(struct m0_sm_group *grp, struct m0_sm_ast *ast)
+{
+	int                         result = 0;
+	struct m0_fom_locality     *loc = container_of(ast,
+						       struct m0_fom_locality,
+						       fl_post_stats_ast);
+	struct m0_fop_rate_monitor *monitor = m0_fop_rate_monitor_get(loc);
+
+	if (monitor != NULL) {
+		__timer_fini(&monitor->frm_timer);
+		result = timer_arm(monitor);
+	}
+
+	if (monitor == NULL || result != 0)
+		M0_LOG(M0_WARN, "Failed to re-arm fop_rate timer.");
+}
+
+static struct m0_fop_rate_monitor *
+monitor_to_fmonitor(struct m0_addb_monitor *mon)
 {
-	struct m0_fop_rate_monitor *fop_rate_monitor;
+	M0_PRE(mon != NULL);
+	return container_of(mon, struct m0_fop_rate_monitor, frm_monitor);
+}
+
+static struct m0_addb_sum_rec *monitor_sum_rec(struct m0_addb_monitor *mon,
+					       struct m0_reqh         *reqh)
+{
+	struct m0_fop_rate_monitor *fmon = monitor_to_fmonitor(mon);
 
-	M0_PRE(mon != NULL && reqh != NULL);
-	fop_rate_monitor = container_of(mon, struct m0_fop_rate_monitor,
-					frm_monitor);
-	return &fop_rate_monitor->frm_sum_rec;
+	return &fmon->frm_sum_rec;
 }
 
-static void fop_rate_monitor_watch(struct m0_addb_monitor   *monitor,
-				   const struct m0_addb_rec *rec,
-				   struct m0_reqh           *reqh)
+static void monitor_watch(struct m0_addb_monitor   *monitor,
+			  const struct m0_addb_rec *rec,
+			  struct m0_reqh           *reqh)
 {
 
 	M0_PRE(monitor != NULL && reqh != NULL);
 
 	if (m0_addb_rec_rid_make(M0_ADDB_BRT_CNTR,
 			         M0_ADDB_RECID_FOP_RATE_CNTR) == rec->ar_rid) {
-		struct m0_fop_rate_monitor    *fop_rate_monitor;
+		struct m0_fop_rate_monitor    *fmon;
 		struct fop_rate_stats_sum_rec *f_rate;
 		struct m0_addb_sum_rec        *sum_rec;
 
-		fop_rate_monitor = container_of(monitor,
-						struct m0_fop_rate_monitor,
-						frm_monitor);
-		sum_rec = &fop_rate_monitor->frm_sum_rec;
+		fmon = monitor_to_fmonitor(monitor);
+		sum_rec = &fmon->frm_sum_rec;
 
 		m0_mutex_lock(&sum_rec->asr_mutex);
 		M0_ASSERT(sum_rec->asr_rec.ss_id == M0_ADDB_RECID_FOP_RATE);
@@ -93,128 +150,65 @@ static void fop_rate_monitor_watch(struct m0_addb_monitor   *monitor,
 	}
 }
 
-const struct m0_addb_monitor_ops fop_rate_monitor_ops = {
-	.amo_watch = fop_rate_monitor_watch,
-	.amo_sum_rec = fop_rate_monitor_sum_rec
+const struct m0_addb_monitor_ops monitor_ops = {
+	.amo_watch   = monitor_watch,
+	.amo_sum_rec = monitor_sum_rec
 };
 
 M0_INTERNAL
 int m0_fop_rate_monitor_init(struct m0_fom_locality *loc)
 {
-	struct m0_fop_rate_monitor *fop_rate_monitor;
+	struct m0_fop_rate_monitor *fmon;
 	int                         result;
 
-	FOP_ALLOC_PTR(fop_rate_monitor, FOM_RATE_MON_INIT, &m0_fop_addb_ctx);
-	if (fop_rate_monitor == NULL)
+	FOP_ALLOC_PTR(fmon, FOM_RATE_MON_INIT, &m0_fop_addb_ctx);
+	if (fmon == NULL)
 		M0_RETURN(-ENOMEM);
 
-	result = m0_addb_counter_init(&fop_rate_monitor->frm_stat_fop_rate,
+	result = m0_addb_counter_init(&fmon->frm_addb_ctr,
 				      &m0_addb_rt_fop_rate_cntr);
 	if (result != 0)
 		goto err1;
 
-	result = fop_rate_monitor_timer_arm(fop_rate_monitor);
+	result = timer_arm(fmon);
 	if (result != 0)
 		goto err0;
 
-	m0_addb_monitor_init(&fop_rate_monitor->frm_monitor,
-			     &fop_rate_monitor_ops);
+	m0_addb_monitor_init(&fmon->frm_monitor, &monitor_ops);
 
-	m0_addb_monitor_sum_rec_init(&fop_rate_monitor->frm_sum_rec,
-				     &m0_addb_rt_fop_rate,
-				     fop_rate_monitor->frm_md,
-				     M0_FOP_RATE_MON_DATA_NR);
-	fop_rate_monitor->frm_loc = loc;
+	m0_addb_monitor_sum_rec_init(&fmon->frm_sum_rec, &m0_addb_rt_fop_rate,
+				     fmon->frm_md, M0_FOP_RATE_MON_DATA_NR);
+	fmon->frm_loc = loc;
+
+	m0_fom_locality_lockers_set(loc, key, fmon);
+	m0_addb_monitor_add(loc->fl_dom->fd_reqh, &fmon->frm_monitor);
 
-	m0_fom_locality_lockers_set(loc, key, fop_rate_monitor);
-	m0_addb_monitor_add(loc->fl_dom->fd_reqh,
-			    &fop_rate_monitor->frm_monitor);
 	return 0;
 
 err0:
-	m0_addb_counter_fini(&fop_rate_monitor->frm_stat_fop_rate);
+	m0_addb_counter_fini(&fmon->frm_addb_ctr);
 err1:
-	m0_free(fop_rate_monitor);
+	m0_free(fmon);
 	M0_RETURN(result);
 }
 
 M0_INTERNAL
 void m0_fop_rate_monitor_fini(struct m0_fom_locality *loc)
 {
-	struct m0_fop_rate_monitor *fop_rate_monitor = m0_fop_rate_monitor(loc);
+	struct m0_fop_rate_monitor *fmon = m0_fop_rate_monitor_get(loc);
 
 	m0_fom_locality_lockers_clear(loc, key);
-	m0_addb_monitor_del(loc->fl_dom->fd_reqh,
-			    &fop_rate_monitor->frm_monitor);
-	m0_addb_monitor_fini(&fop_rate_monitor->frm_monitor);
-	m0_addb_counter_fini(&fop_rate_monitor->frm_stat_fop_rate);
-	m0_timer_stop(&fop_rate_monitor->frm_fop_rate_timer);
-	m0_timer_fini(&fop_rate_monitor->frm_fop_rate_timer);
-
-	m0_addb_monitor_sum_rec_fini(&fop_rate_monitor->frm_sum_rec);
-	m0_free(fop_rate_monitor);
-}
-
-static unsigned long fop_rate_monitor_timer_callback(unsigned long arg)
-{
-	struct m0_fop_rate_monitor *fr_mon = (struct m0_fop_rate_monitor *)arg;
-
-	m0_addb_counter_update(&fr_mon->frm_stat_fop_rate,
-			       fr_mon->frm_fop_rate_count);
-	fr_mon->frm_fop_rate_count = 0;
-	if (fr_mon->frm_loc->fl_post_stats_ast.sa_next == NULL) {
-		fr_mon->frm_loc->fl_post_stats_ast.sa_cb =
-		fop_rate_monitor_timer_rearm;
-		m0_sm_ast_post(&fr_mon->frm_loc->fl_group,
-			       &fr_mon->frm_loc->fl_post_stats_ast);
-	}
-	return 0;
-}
-
-static int
-fop_rate_monitor_timer_arm(struct m0_fop_rate_monitor *fop_rate_monitor)
-{
-	int              result;
-	m0_time_t        expire;
-	struct m0_timer *timer = &fop_rate_monitor->frm_fop_rate_timer;
-
-	result = m0_timer_init(timer, M0_TIMER_SOFT, NULL,
-			       fop_rate_monitor_timer_callback,
-			       (unsigned long)fop_rate_monitor);
-	if (result != 0)
-		return result;
-
-	expire = m0_time_from_now(M0_FOP_RATE_INTERVAL_SECOND, 0);
-	m0_timer_start(timer, expire);
-
-	return 0;
-}
-
-static void fop_rate_monitor_timer_rearm(struct m0_sm_group *grp,
-					 struct m0_sm_ast   *ast)
-{
-	int                         result = 0;
-	struct m0_fom_locality     *loc = container_of(ast,
-						       struct m0_fom_locality,
-						       fl_post_stats_ast);
-	struct m0_fop_rate_monitor *fop_rate_monitor = m0_fop_rate_monitor(loc);
-
-	if (fop_rate_monitor != NULL) {
-		m0_timer_stop(&fop_rate_monitor->frm_fop_rate_timer);
-		m0_timer_fini(&fop_rate_monitor->frm_fop_rate_timer);
-
-		result = fop_rate_monitor_timer_arm(fop_rate_monitor);
-	}
-
-	if (fop_rate_monitor == NULL || result != 0)
-		M0_LOG(M0_WARN, "Failed to re-arm fop_rate timer.");
+	m0_addb_monitor_del(loc->fl_dom->fd_reqh, &fmon->frm_monitor);
+	m0_addb_monitor_fini(&fmon->frm_monitor);
+	m0_addb_counter_fini(&fmon->frm_addb_ctr);
+	__timer_fini(&fmon->frm_timer);
+	m0_addb_monitor_sum_rec_fini(&fmon->frm_sum_rec);
+	m0_free(fmon);
 }
 
 M0_INTERNAL
-struct m0_fop_rate_monitor *m0_fop_rate_monitor(struct m0_fom_locality *loc)
+struct m0_fop_rate_monitor *m0_fop_rate_monitor_get(struct m0_fom_locality *loc)
 {
-	M0_PRE(m0_locality_invariant(loc));
-
 	return m0_fom_locality_lockers_get(loc, key);
 }
 
diff --git a/fop/fop_rate_monitor.h b/fop/fop_rate_monitor.h
index 9b0abad..a54d3ee 100644
--- a/fop/fop_rate_monitor.h
+++ b/fop/fop_rate_monitor.h
@@ -31,7 +31,6 @@
  */
 
 enum {
-	M0_FOP_RATE_INTERVAL_SECOND = 1,
 	M0_FOP_RATE_MON_DATA_NR = 1
 };
 
@@ -40,15 +39,15 @@ enum {
  */
 struct m0_fop_rate_monitor {
 	uint64_t                frm_magic;
-	uint64_t                frm_fop_rate_count;
+	uint64_t                frm_count;
 	/** Fop rate monitor data. */
 	uint64_t                frm_md[M0_FOP_RATE_MON_DATA_NR];
 	struct m0_addb_sum_rec  frm_sum_rec;
 	struct m0_fom_locality *frm_loc;
 	/** Timer to calculate fop_rate */
-	struct m0_timer	        frm_fop_rate_timer;
+	struct m0_timer	        frm_timer;
 	/** FOP rate counter. It is fop executed per sec. */
-	struct m0_addb_counter  frm_stat_fop_rate;
+	struct m0_addb_counter  frm_addb_ctr;
 	/** fop rate monitor */
 	struct m0_addb_monitor  frm_monitor;
 };
@@ -74,8 +73,8 @@ void m0_fop_rate_monitor_fini(struct m0_fom_locality *loc);
  * @param loc pointer to fom locality.
  * @retval ptr to fop_rate_monitor.
  */
-M0_INTERNAL
-struct m0_fop_rate_monitor *m0_fop_rate_monitor(struct m0_fom_locality *loc);
+M0_INTERNAL struct m0_fop_rate_monitor *
+m0_fop_rate_monitor_get(struct m0_fom_locality *loc);
 
 /** @} end of fop group */
 
-- 
1.8.3.2


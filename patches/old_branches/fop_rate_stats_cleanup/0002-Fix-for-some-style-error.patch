From e1ce258a30139fd366dac6312766b56d34d2f796 Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Tue, 14 Jan 2014 12:50:12 +0530
Subject: [PATCH 02/20] - Fix for some style error - Removed some of macros -
 Changed fop_rate_monitor_init() api parameters. - Removed locked from some
 places

---
 addb/addb_monitor.c    |  7 +++++++
 addb/addb_monitor.h    |  9 +++++++++
 fop/fom.c              | 30 ++++++++++++++++--------------
 fop/fop_rate_monitor.c | 39 +++++++++++++--------------------------
 fop/fop_rate_monitor.h |  7 ++-----
 5 files changed, 47 insertions(+), 45 deletions(-)

diff --git a/addb/addb_monitor.c b/addb/addb_monitor.c
index 8e88051..bebc454 100644
--- a/addb/addb_monitor.c
+++ b/addb/addb_monitor.c
@@ -322,6 +322,13 @@ M0_INTERNAL void m0_addb_monitor_fini(struct m0_addb_monitor *monitor)
 	addb_mon_tlink_fini(monitor);
 }
 
+M0_INTERNAL bool m0_addb_monitor_is_initialised(struct m0_addb_monitor *monitor)
+{
+	M0_PRE(m0_addb_monitor_invariant(monitor));
+
+	return addb_mon_tlink_is_in(monitor);
+}
+
 M0_INTERNAL void m0_addb_monitor_add(struct m0_reqh               *reqh,
 				     struct m0_addb_monitor       *monitor)
 {
diff --git a/addb/addb_monitor.h b/addb/addb_monitor.h
index 05e1ab9..d0b7934 100644
--- a/addb/addb_monitor.h
+++ b/addb/addb_monitor.h
@@ -328,6 +328,15 @@ M0_INTERNAL void m0_addb_monitor_sum_rec_init(struct m0_addb_sum_rec        *rec
 M0_INTERNAL void m0_addb_monitor_sum_rec_fini(struct m0_addb_sum_rec *sum_rec);
 
 /**
+ * Check if monitor is initialised ot not ?
+ * @param monitor monitor object
+ * @retval true if initialised
+ *         false otherwise
+ */
+M0_INTERNAL
+bool m0_addb_monitor_is_initialised(struct m0_addb_monitor *monitor);
+
+/**
  * Add a particular monitor with the ADDB monitoring sub-system
  * @param reqh Request handler
  * @param monitor ADDB monitor to register
diff --git a/fop/fom.c b/fop/fom.c
index 5d076d3..174f16b 100644
--- a/fop/fom.c
+++ b/fop/fom.c
@@ -174,7 +174,6 @@ M0_TL_DEFINE(wail, static, struct m0_fom);
 static bool fom_wait_time_is_out(const struct m0_fom_domain *dom,
                                  const struct m0_fom *fom);
 static int loc_thr_create(struct m0_fom_locality *loc);
-static void __fom_domain_fini(struct m0_fom_domain *dom);
 
 /**
  * Fom domain operations.
@@ -908,6 +907,7 @@ M0_INTERNAL int m0_fom_domain_init(struct m0_fom_domain *dom)
 
 	M0_PRE(dom != NULL);
 
+	dom->fd_fop_rate_monitor_key = 0;
 	cpu_max = m0_processor_nr_max();
 	dom->fd_ops = &m0_fom_dom_ops;
 	result = m0_bitmap_init(&onln_cpu_map, cpu_max);
@@ -946,7 +946,7 @@ M0_INTERNAL int m0_fom_domain_init(struct m0_fom_domain *dom)
 		loc->fl_dom = dom;
 		result = loc_init(loc, cpu, cpu_max);
 		if (result != 0) {
-			__fom_domain_fini(dom);
+			m0_fom_domain_fini(dom);
 			break;
 		}
 		m0_locality_set(cpu, &(struct m0_locality){
@@ -957,13 +957,17 @@ M0_INTERNAL int m0_fom_domain_init(struct m0_fom_domain *dom)
 	}
 
 	m0_bitmap_fini(&onln_cpu_map);
-	dom->fd_fop_rate_monitor_key = 0;
-	return m0_fop_rate_monitor_init(dom->fd_reqh,
-				        &dom->fd_fop_rate_monitor,
-				        &dom->fd_fop_rate_monitor_key);
+	result = m0_fop_rate_monitor_init(dom->fd_reqh,
+					  &dom->fd_fop_rate_monitor);
+	if (result < 0)
+		m0_fom_domain_fini(dom);
+	else
+		dom->fd_fop_rate_monitor_key = result;
+
+	return result;
 }
 
-static void __fom_domain_fini(struct m0_fom_domain *dom)
+M0_INTERNAL void m0_fom_domain_fini(struct m0_fom_domain *dom)
 {
 	int fd_loc_nr;
 	int i;
@@ -980,14 +984,12 @@ static void __fom_domain_fini(struct m0_fom_domain *dom)
 		m0_free(dom->fd_localities[i]);
 	}
 	m0_free(dom->fd_localities);
-}
 
-M0_INTERNAL void m0_fom_domain_fini(struct m0_fom_domain *dom)
-{
-	__fom_domain_fini(dom);
-	m0_fop_rate_monitor_fini(dom->fd_reqh,
-			         &dom->fd_fop_rate_monitor,
-			         dom->fd_fop_rate_monitor_key);
+	if (m0_addb_monitor_is_initialised(&dom->fd_fop_rate_monitor)){
+		m0_fop_rate_monitor_fini(dom->fd_reqh,
+					 &dom->fd_fop_rate_monitor,
+					 dom->fd_fop_rate_monitor_key);
+	}
 }
 
 M0_INTERNAL bool m0_fom_domain_is_idle(const struct m0_fom_domain *dom)
diff --git a/fop/fop_rate_monitor.c b/fop/fop_rate_monitor.c
index 491e12e..b6153f2 100644
--- a/fop/fop_rate_monitor.c
+++ b/fop/fop_rate_monitor.c
@@ -45,9 +45,6 @@
  */
 m0_time_t fop_rate_interval = M0_MKTIME(1, 0);
 
-#undef FOM_RATE_KEY
-#define FOM_RATE_KEY(reqh)	(reqh->rh_fom_dom.fd_fop_rate_monitor_key)
-
 static struct fop_rate_stats_sum_rec {
 	uint64_t ssr_fop_rate;
 } fop_rate_stats_sum;
@@ -57,12 +54,12 @@ fop_rate_monitor_sum_rec(const struct m0_addb_monitor *mon,
 		         struct m0_reqh               *reqh)
 {
 	struct m0_addb_sum_rec *sum_rec;
+	uint32_t                key;
 
 	M0_PRE(reqh != NULL);
+	key = reqh->rh_fom_dom.fd_fop_rate_monitor_key;
 
-	m0_rwlock_read_lock(&reqh->rh_rwlock);
-	sum_rec = m0_reqh_lockers_get(reqh, FOM_RATE_KEY(reqh));
-	m0_rwlock_read_unlock(&reqh->rh_rwlock);
+	sum_rec = m0_reqh_lockers_get(reqh, key);
 
 	M0_ASSERT(sum_rec != NULL);
 
@@ -73,10 +70,6 @@ static void fop_rate_monitor_watch(const struct m0_addb_monitor *monitor,
 				   const struct m0_addb_rec     *rec,
 				   struct m0_reqh               *reqh)
 {
-#undef FOP_RATE
-#define FOP_RATE(sum_rec)					\
-	(struct fop_rate_stats_sum_rec *)sum_rec->asr_rec.ss_data.au64s_data
-
 	struct m0_addb_sum_rec        *sum_rec;
 	struct fop_rate_stats_sum_rec *f_rate;
 
@@ -91,7 +84,8 @@ static void fop_rate_monitor_watch(const struct m0_addb_monitor *monitor,
 		m0_mutex_lock(&sum_rec->asr_mutex);
 		M0_ASSERT(sum_rec->asr_rec.ss_id ==
 			  M0_ADDB_RECID_FOP_RATE);
-		f_rate = FOP_RATE(sum_rec);
+		f_rate = (struct fop_rate_stats_sum_rec *)
+			 sum_rec->asr_rec.ss_data.au64s_data;
 		M0_ASSERT(f_rate != NULL);
 		/*
 		 * fop_rate is ADDB counter.
@@ -103,7 +97,6 @@ static void fop_rate_monitor_watch(const struct m0_addb_monitor *monitor,
 		sum_rec->asr_dirty = true;
 		m0_mutex_unlock(&sum_rec->asr_mutex);
 	}
-#undef FOP_RATE
 }
 
 const struct m0_addb_monitor_ops fop_rate_monitor_ops = {
@@ -113,13 +106,12 @@ const struct m0_addb_monitor_ops fop_rate_monitor_ops = {
 
 M0_INTERNAL
 int m0_fop_rate_monitor_init(struct m0_reqh         *reqh,
-			     struct m0_addb_monitor *monitor,
-			     uint32_t               *fop_rate_monitor_key)
+			     struct m0_addb_monitor *monitor)
 {
-#undef FOP_RATE_STATS_NR
-#define FOP_RATE_STATS_NR (sizeof(fop_rate_stats_sum) / sizeof(uint64_t))
-
 	struct m0_addb_sum_rec *sum_rec;
+	uint32_t                fop_rate_monitor_key;
+	const size_t            fop_rate_stats_nr =
+				sizeof(fop_rate_stats_sum) / sizeof(uint64_t);
 
 	M0_PRE(monitor != NULL && reqh != NULL);
 
@@ -130,16 +122,14 @@ int m0_fop_rate_monitor_init(struct m0_reqh         *reqh,
 	m0_addb_monitor_init(monitor, &fop_rate_monitor_ops);
 	m0_addb_monitor_sum_rec_init(sum_rec, &m0_addb_rt_fop_rate,
 				     (uint64_t *)&fop_rate_stats_sum,
-				     FOP_RATE_STATS_NR);
+				     fop_rate_stats_nr);
 
-	*fop_rate_monitor_key = m0_reqh_lockers_allot();
+	fop_rate_monitor_key = m0_reqh_lockers_allot();
 
-	m0_rwlock_write_lock(&reqh->rh_rwlock);
-	m0_reqh_lockers_set(reqh, *fop_rate_monitor_key, sum_rec);
-	m0_rwlock_write_unlock(&reqh->rh_rwlock);
+	m0_reqh_lockers_set(reqh, fop_rate_monitor_key, sum_rec);
 
 	m0_addb_monitor_add(reqh, monitor);
-	return 0;
+	return fop_rate_monitor_key;
 }
 
 M0_INTERNAL
@@ -154,9 +144,7 @@ void m0_fop_rate_monitor_fini(struct m0_reqh         *reqh,
 	sum_rec = monitor->am_ops->amo_sum_rec(monitor, reqh);
 	m0_addb_monitor_del(reqh, monitor);
 
-	m0_rwlock_write_lock(&reqh->rh_rwlock);
 	m0_reqh_lockers_clear(reqh, fop_rate_monitor_key);
-	m0_rwlock_write_unlock(&reqh->rh_rwlock);
 
 	m0_addb_monitor_sum_rec_fini(sum_rec);
 	m0_free(sum_rec);
@@ -165,7 +153,6 @@ void m0_fop_rate_monitor_fini(struct m0_reqh         *reqh,
 }
 
 /** @} endgroup fom */
-#undef FOM_RATE_KEY
 #undef M0_TRACE_SUBSYSTEM
 /*
  *  Local variables:
diff --git a/fop/fop_rate_monitor.h b/fop/fop_rate_monitor.h
index 04488a1..86e8bf7 100644
--- a/fop/fop_rate_monitor.h
+++ b/fop/fop_rate_monitor.h
@@ -34,15 +34,12 @@
  * It initialise fop rate monitor.
  * @param reqh pointer to request handler.
  * @param monitor monitor object to intialise.
- * @param fop_rate_monitor_key pointer to fop rate monitor key in request
- * 			       handler lockers.
- * @retval 0 if sucess
+ * @retval fop_rate_monitor_key if sucess
  * 	   -ENOMEM if failed to allocate summary record.
  */
 M0_INTERNAL
 int m0_fop_rate_monitor_init(struct m0_reqh         *reqh,
-			     struct m0_addb_monitor *monitor,
-			     uint32_t		    *fop_rate_monitor_key);
+			     struct m0_addb_monitor *monitor);
 /*
  * It finalise fop rate monitor.
  * @param reqh pointer to request handler.
-- 
1.8.3.2


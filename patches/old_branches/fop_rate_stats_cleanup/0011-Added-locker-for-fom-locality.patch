From 37c8d9d6df5eb7e0bdf88666a896477e2079f8d3 Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Fri, 14 Mar 2014 16:48:36 +0530
Subject: [PATCH 11/20]  - Added locker for fom locality.

---
 fop/fom.c              | 22 +++++++++++++---------
 fop/fom.h              |  8 +++++---
 fop/fop_rate_monitor.c | 26 ++++++++++----------------
 fop/fop_rate_monitor.h | 13 +++++--------
 4 files changed, 33 insertions(+), 36 deletions(-)

diff --git a/fop/fom.c b/fop/fom.c
index 1b0ae65..8b660c1 100644
--- a/fop/fom.c
+++ b/fop/fom.c
@@ -157,6 +157,8 @@ struct m0_loc_thread {
 	uint64_t                lt_magix;
 };
 
+extern int m0_fop_rate_monitor_key;
+
 M0_TL_DESCR_DEFINE(thr, "fom thread", static, struct m0_loc_thread, lt_linkage,
 		   lt_magix, M0_FOM_THREAD_MAGIC, M0_FOM_THREAD_HEAD_MAGIC);
 M0_TL_DEFINE(thr, static, struct m0_loc_thread);
@@ -169,6 +171,8 @@ M0_TL_DESCR_DEFINE(wail, "wail fom", static, struct m0_fom, fo_linkage,
 		   fo_magic, M0_FOM_MAGIC, M0_FOM_WAIL_MAGIC);
 M0_TL_DEFINE(wail, static, struct m0_fom);
 
+M0_LOCKERS_DEFINE(M0_INTERNAL, m0_fom_locality, fl_locker);
+
 static bool fom_wait_time_is_out(const struct m0_fom_domain *dom,
                                  const struct m0_fom *fom);
 static int loc_thr_create(struct m0_fom_locality *loc);
@@ -758,9 +762,7 @@ static void loc_fini(struct m0_fom_locality *loc)
 
 	m0_bitmap_fini(&loc->fl_processors);
 
-	m0_fop_rate_monitor_fini(&loc->fl_fop_rate_monitor_key);
-	m0_reqh_lockers_clear(loc->fl_dom->fd_reqh,
-			      loc->fl_fop_rate_monitor_key);
+	m0_fop_rate_monitor_fini(loc);
 	m0_addb_counter_fini(&loc->fl_stat_sched_wait_times);
 	m0_addb_counter_fini(&loc->fl_stat_run_times);
 	m0_addb_ctx_fini(&loc->fl_addb_ctx);
@@ -808,8 +810,9 @@ static int loc_init(struct m0_fom_locality *loc, size_t cpu, size_t cpu_max)
 	if (result != 0)
 		goto err1;
 
-	loc->fl_fop_rate_monitor_key = m0_reqh_lockers_allot();
-	result = m0_fop_rate_monitor_init(&loc->fl_fop_rate_monitor_key);
+	m0_fom_locality_lockers_init(loc);
+
+	result = m0_fop_rate_monitor_init(loc);
 	if (result < 0)
 		goto err0;
 
@@ -847,6 +850,7 @@ static int loc_init(struct m0_fom_locality *loc, size_t cpu, size_t cpu_max)
 	return result;
 
 err0:
+	m0_fom_locality_lockers_fini(loc);
 	m0_addb_counter_fini(&loc->fl_stat_sched_wait_times);
 err1:
 	m0_addb_counter_fini(&loc->fl_stat_run_times);
@@ -863,8 +867,8 @@ static void loc_ast_post_stats(struct m0_sm_group *grp, struct m0_sm_ast *ast)
 	struct m0_addb_ctx *cv[] = {&loc->fl_addb_ctx, NULL};
 	struct m0_addb_mc  *mc   = &loc->fl_dom->fd_reqh->rh_addb_mc;
 
-	fop_rate_monitor = m0_reqh_lockers_get(loc->fl_dom->fd_reqh,
-					       loc->fl_fop_rate_monitor_key); 
+	fop_rate_monitor = m0_fom_locality_lockers_get(loc,
+						       m0_fop_rate_monitor_key); 
 
 	if (m0_addb_counter_nr(&loc->fl_stat_run_times) > 0)
 		M0_ADDB_POST_CNTR(mc, cv, &loc->fl_stat_run_times);
@@ -1030,8 +1034,8 @@ void m0_fom_fini(struct m0_fom *fom)
 
 	M0_CNT_DEC(loc->fl_foms);
 
-	fop_rate_monitor = m0_reqh_lockers_get(loc->fl_dom->fd_reqh,
-					       loc->fl_fop_rate_monitor_key); 
+	fop_rate_monitor = m0_fom_locality_lockers_get(loc,
+						       m0_fop_rate_monitor_key); 
 	if (fop_rate_monitor != NULL)
         	M0_CNT_INC(fop_rate_monitor->frm_fop_rate_count);
 	if (loc->fl_foms == 0)
diff --git a/fop/fom.h b/fop/fom.h
index 170c2d7..9af8d40 100644
--- a/fop/fom.h
+++ b/fop/fom.h
@@ -204,6 +204,7 @@ Doc?docid=0AQaCw6YRYSVSZGZmMzV6NzJfMTNkOGNjZmdnYg
 #include "lib/chan.h"
 #include "lib/atomic.h"
 #include "lib/tlist.h"
+#include "lib/lockers.h"
 
 #include "dtm/dtm.h"               /* m0_dtx */
 #include "fol/fol.h"
@@ -226,6 +227,8 @@ struct m0_fop_rate_monitor;
 /* defined in fom.c */
 struct m0_loc_thread;
 
+M0_LOCKERS_DECLARE(M0_EXTERN, m0_fom_locality, 16);
+
 /**
  * A locality is a partition of computational resources dedicated to fom
  * execution on the node.
@@ -298,13 +301,12 @@ struct m0_fom_locality {
 	 */
 	struct m0_addb_counter       fl_stat_sched_wait_times;
 
-	/** fop rate monitor key */
-	uint32_t		     fl_fop_rate_monitor_key;
-
 	/** AST which triggers the posting of statistics */
 	struct m0_sm_ast             fl_post_stats_ast;
 
 	/** Something for memory, see set_mempolicy(2). */
+
+	struct m0_fom_locality_lockers fl_locker;
 };
 
 /**
diff --git a/fop/fop_rate_monitor.c b/fop/fop_rate_monitor.c
index 5d1c026..a09b5d3 100644
--- a/fop/fop_rate_monitor.c
+++ b/fop/fop_rate_monitor.c
@@ -44,6 +44,7 @@
  * @addtogroup fom
  * @{
  */
+int m0_fop_rate_monitor_key = 0;
 static
 int fop_rate_monitor_timer_arm(struct m0_fop_rate_monitor *fop_rate_monitor);
 static void fop_rate_monitor_timer_rearm(struct m0_sm_group *grp,
@@ -104,20 +105,16 @@ const struct m0_addb_monitor_ops fop_rate_monitor_ops = {
 };
 
 M0_INTERNAL
-int m0_fop_rate_monitor_init(uint32_t *fop_rate_monitor_key)
+int m0_fop_rate_monitor_init(struct m0_fom_locality *loc)
 {
 	struct m0_fop_rate_monitor *fop_rate_monitor;
 	struct m0_addb_sum_rec     *sum_rec;
 	const size_t                fop_rate_stats_nr =
 				    sizeof(fop_rate_stats_sum) /
 				    sizeof(uint64_t);
-	struct m0_fom_locality     *loc;
 	uint64_t                   *md;
 	int                         result;
 
-	loc = container_of(fop_rate_monitor_key, struct m0_fom_locality,
-			   fl_fop_rate_monitor_key);
-
 	FOP_ALLOC_PTR(fop_rate_monitor, FOM_RATE_MON_INIT, &m0_fop_addb_ctx);
 	if (fop_rate_monitor == NULL)
 		M0_RETURN(-ENOMEM);
@@ -152,8 +149,8 @@ int m0_fop_rate_monitor_init(uint32_t *fop_rate_monitor_key)
 	fop_rate_monitor->frm_sum_rec = sum_rec;
 	fop_rate_monitor->frm_loc = loc;
 
-	m0_reqh_lockers_set(loc->fl_dom->fd_reqh, *fop_rate_monitor_key,
-			    fop_rate_monitor);
+	m0_fom_locality_lockers_set(loc, m0_fop_rate_monitor_key,
+				    fop_rate_monitor);
 
 	m0_addb_monitor_add(loc->fl_dom->fd_reqh,
 			    &fop_rate_monitor->frm_monitor);
@@ -171,16 +168,13 @@ err3:
 }
 
 M0_INTERNAL
-void m0_fop_rate_monitor_fini(uint32_t *fop_rate_monitor_key)
+void m0_fop_rate_monitor_fini(struct m0_fom_locality *loc)
 {
 	struct m0_fop_rate_monitor *fop_rate_monitor;
-	struct m0_fom_locality     *loc;
-
-	loc = container_of(fop_rate_monitor_key, struct m0_fom_locality,
-			   fl_fop_rate_monitor_key);
 
-	fop_rate_monitor = m0_reqh_lockers_get(loc->fl_dom->fd_reqh,
-					       *fop_rate_monitor_key);
+	fop_rate_monitor = m0_fom_locality_lockers_get(loc,
+						       m0_fop_rate_monitor_key);
+	m0_fom_locality_lockers_clear(loc, m0_fop_rate_monitor_key);
 	m0_addb_monitor_del(loc->fl_dom->fd_reqh,
 			    &fop_rate_monitor->frm_monitor);
 	m0_addb_monitor_fini(&fop_rate_monitor->frm_monitor);
@@ -239,8 +233,8 @@ static void fop_rate_monitor_timer_rearm(struct m0_sm_group *grp,
 
 	M0_PRE(m0_locality_invariant(loc));
 
-	fop_rate_monitor = m0_reqh_lockers_get(loc->fl_dom->fd_reqh,
-					       loc->fl_fop_rate_monitor_key); 
+	fop_rate_monitor = m0_fom_locality_lockers_get(loc,
+						       m0_fop_rate_monitor_key);
 
 	if (fop_rate_monitor != NULL) {
 		m0_timer_stop(&fop_rate_monitor->frm_fop_rate_timer);
diff --git a/fop/fop_rate_monitor.h b/fop/fop_rate_monitor.h
index 9bb4c50..89c05f4 100644
--- a/fop/fop_rate_monitor.h
+++ b/fop/fop_rate_monitor.h
@@ -52,22 +52,19 @@ struct m0_fop_rate_monitor {
 
 /**
  * It initialise fop rate monitor.
- * @param reqh pointer to request handler.
- * @param monitor monitor object to intialise.
- * @retval fop_rate_monitor_key if sucess
+ * @param loc pointer to fom locality.
+ * @retval 0 if sucess
  * 	   -ENOMEM if failed to allocate summary record.
  */
 M0_INTERNAL
-int m0_fop_rate_monitor_init(uint32_t *fop_rate_monitor);
+int m0_fop_rate_monitor_init(struct m0_fom_locality *loc);
 
 /**
  * It finalise fop rate monitor.
- * @param reqh pointer to request handler.
- * @param monitor monitor object to finalise.
- * @param fop_rate_monitor_key fop rate monitor key in request handler lockers.
+ * @param loc pointer to fom locality.
  */
 M0_INTERNAL
-void m0_fop_rate_monitor_fini(uint32_t *fop_rate_monitor);
+void m0_fop_rate_monitor_fini(struct m0_fom_locality *loc);
 
 /** @} end of fop group */
 
-- 
1.8.3.2


From 08f58e2374e33706230ef6736d393eb0e174e7a3 Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Thu, 28 Nov 2013 00:56:35 +0200
Subject: [PATCH 09/13] scripts/be_allocator: print total stats

---
 scripts/be_allocator.stp | 43 +++++++++++++++++++++++++++----------------
 1 file changed, 27 insertions(+), 16 deletions(-)

diff --git a/scripts/be_allocator.stp b/scripts/be_allocator.stp
index 90990a1..3f360f7 100644
--- a/scripts/be_allocator.stp
+++ b/scripts/be_allocator.stp
@@ -2,6 +2,9 @@
 
 global func_time
 global func_time_stats
+global total_stats
+global calls
+global times
 
 probe	process(@1).function("m0_be_alloc_aligned"),
 	process(@1).function("m0_be_free_aligned")
@@ -12,25 +15,39 @@ probe	process(@1).function("m0_be_alloc_aligned"),
 probe	process(@1).function("m0_be_alloc_aligned").return,
 	process(@1).function("m0_be_free_aligned").return
 {
+	/* 1s stats */
 	time_elapsed = gettimeofday_ns() - func_time[tid(), ppfunc()]
 	delete func_time[tid(), ppfunc()]
 	func_time_stats[ppfunc()] <<< time_elapsed
-	// printf("%s %s %s %d\n", m0_timestamp(), ppfunc(), $$parms, time_elapsed)
+	/* total stats */
+	total_stats <<< time_elapsed
+	calls[ppfunc()] += 1
+	times[ppfunc()] += time_elapsed
 }
 
+/* It isn't possible to pass aggregate variable to function  */
+@define PRINT_STATS(tag, stats)
+%(
+	if (@count(@stats) > 0) {
+		printf("%s: min/max/avg/count/sum %d/%d/%d/%d/%d microseconds\n",
+		       @tag, @min(@stats), @max(@stats),
+		       @avg(@stats), @count(@stats), @sum(@stats));
+		print(@hist_log(@stats))
+	}
+%)
+
 function print_allocator_stats()
 {
 	printf("%s\n", tz_ctime(gettimeofday_s()))
+	foreach (func in calls) {
+		printf("%s(): %d calls, %d ms total time, %d ns avg time per call\n",
+		       func, calls[func], times[func] / 1000000,
+		       calls[func] == 0 ? 0 : times[func] / calls[func]);
+	}
 	foreach (ftime in func_time_stats) {
-		printf("%s(): min/max/avg/count/sum %d/%d/%d/%d/%d ns\n",
-		       ftime,
-		       @min(func_time_stats[ftime]),
-		       @max(func_time_stats[ftime]),
-		       @avg(func_time_stats[ftime]),
-		       @count(func_time_stats[ftime]),
-		       @sum(func_time_stats[ftime]));
-		print(@hist_log(func_time_stats[ftime]))
+		@PRINT_STATS(ftime, func_time_stats[ftime])
 	}
+	@PRINT_STATS("total", total_stats)
 }
 
 probe timer.ms(1000)
@@ -41,6 +58,7 @@ probe timer.ms(1000)
 
 probe begin
 {
+	print_allocator_stats()
 	printf("begin\n");
 }
 
@@ -49,10 +67,3 @@ probe end
 	print_allocator_stats()
 	printf("end\n");
 }
-
-function m0_timestamp:string()
-{
-	time = gettimeofday_ns();
-	one_billion = 1000000000;
-	return sprintf("%d.%09d", time / one_billion, time % one_billion);
-}
-- 
1.8.3.2


From 1b41e42b11225827be5d40da470328a1410807e2 Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Thu, 28 Nov 2013 07:36:34 -0800
Subject: [PATCH 13/13] scripts: systemtap scripts added

---
 scripts/contention.stp | 35 ++++++++++++++++++++++++++++++++
 scripts/futexes.stp    | 26 ++++++++++++++++++++++++
 scripts/futexes2.sh    |  8 ++++++++
 scripts/futexes2.stp   | 18 +++++++++++++++++
 scripts/lock_addr.sh   | 10 +++++++++
 scripts/lock_addr.stp  | 55 ++++++++++++++++++++++++++++++++++++++++++++++++++
 scripts/locks_addr.stp |  0
 7 files changed, 152 insertions(+)
 create mode 100644 scripts/contention.stp
 create mode 100644 scripts/futexes.stp
 create mode 100755 scripts/futexes2.sh
 create mode 100644 scripts/futexes2.stp
 create mode 100755 scripts/lock_addr.sh
 create mode 100644 scripts/lock_addr.stp
 create mode 100644 scripts/locks_addr.stp

diff --git a/scripts/contention.stp b/scripts/contention.stp
new file mode 100644
index 0000000..c976626
--- /dev/null
+++ b/scripts/contention.stp
@@ -0,0 +1,35 @@
+#! /usr/bin/env stap
+
+global thread_thislock
+global thread_blocktime
+global FUTEX_WAIT = 0
+
+global lock_waits
+global process_names
+
+probe syscall.futex {
+  if (op != FUTEX_WAIT) next
+  t = tid ()
+  process_names[pid()] = execname()
+  thread_thislock[t] = $uaddr
+  thread_blocktime[t] = gettimeofday_us()
+}
+
+probe syscall.futex.return {
+  t = tid()
+  ts = thread_blocktime[t]
+  if (ts) {
+    elapsed = gettimeofday_us() - ts
+    lock_waits[pid(), thread_thislock[t]] <<< elapsed
+    delete thread_blocktime[t]
+    delete thread_thislock[t]
+  }
+}
+
+probe end {
+  foreach ([pid+, lock] in lock_waits)
+    printf ("%s[%d] lock %p contended %d times, %d avg us\n",
+            process_names[pid], pid, lock, @count(lock_waits[pid,lock]),
+            @avg(lock_waits[pid,lock]))
+}
+
diff --git a/scripts/futexes.stp b/scripts/futexes.stp
new file mode 100644
index 0000000..09cc818
--- /dev/null
+++ b/scripts/futexes.stp
@@ -0,0 +1,26 @@
+#! /usr/bin/env stap
+
+# This script tries to identify contended user-space locks by hooking
+# into the futex system call.
+
+global FUTEX_WAIT = 0 /*, FUTEX_WAKE = 1 */
+global FUTEX_PRIVATE_FLAG = 128 /* linux 2.6.22+ */
+global FUTEX_CLOCK_REALTIME = 256 /* linux 2.6.29+ */
+
+global lock_waits # long-lived stats on (tid,lock) blockage elapsed time
+global process_names # long-lived pid-to-execname mapping
+
+probe syscall.futex.return {  
+  if (($op & ~(FUTEX_PRIVATE_FLAG|FUTEX_CLOCK_REALTIME)) != FUTEX_WAIT) next
+  process_names[pid()] = execname()
+  elapsed = gettimeofday_us() - @entry(gettimeofday_us())
+  lock_waits[pid(), $uaddr] <<< elapsed
+}
+
+probe end {
+  foreach ([pid+, lock] in lock_waits) 
+    printf ("%s[%d] lock %p contended %d times, %d avg us\n",
+            process_names[pid], pid, lock, @count(lock_waits[pid,lock]),
+            @avg(lock_waits[pid,lock]))
+}
+
diff --git a/scripts/futexes2.sh b/scripts/futexes2.sh
new file mode 100755
index 0000000..4bb5823
--- /dev/null
+++ b/scripts/futexes2.sh
@@ -0,0 +1,8 @@
+#!/bin/bash
+
+CWD=$(cd "$( dirname "$0")" && pwd)
+
+BINARY="${1-$CWD/../mero/.libs/libmero-0.1.0.so}"
+stap -vv -d "$BINARY" --ldd -DMAXTRACE=10 -DSTP_NO_OVERLOAD -DMAXSKIPPED=1000000 -DMAXERRORS=1000 \
+	         ./scripts/lock_addr.stp "$BINARY"
+
diff --git a/scripts/futexes2.stp b/scripts/futexes2.stp
new file mode 100644
index 0000000..cf6eacd
--- /dev/null
+++ b/scripts/futexes2.stp
@@ -0,0 +1,18 @@
+#!/usr/bin/env stap
+
+global FUTEX_WAIT = 0 /*, FUTEX_WAKE = 1 */
+global FUTEX_PRIVATE_FLAG = 128 /* linux 2.6.22+ */
+global FUTEX_CLOCK_REALTIME = 256 /* linux 2.6.29+ */
+
+probe syscall.futex.return {
+  if (($op & ~(FUTEX_PRIVATE_FLAG|FUTEX_CLOCK_REALTIME)) != FUTEX_WAIT) next
+
+  if (sprintf("%p", $uaddr) == @1) {
+        sprint_usyms(ubacktrace())
+  }
+}
+
+probe  process("/local/home/mmedved/mero/mero/.libs/libmero-0.1.0.so").function("m0_mutex_lock")
+{
+        sprint_usyms(ubacktrace())
+}
diff --git a/scripts/lock_addr.sh b/scripts/lock_addr.sh
new file mode 100755
index 0000000..1f50752
--- /dev/null
+++ b/scripts/lock_addr.sh
@@ -0,0 +1,10 @@
+#!/bin/bash
+set -eux
+
+CWD=$(cd "$( dirname "$0")" && pwd)
+
+BINARY="${1-$CWD/../mero/.libs/libmero-0.1.0.so}"
+BINARY1="${1-$CWD/../utils/.libs/lt-ut}"
+stap -vv -d "$BINARY" -d "$BINARY1" -d /lib64/libpthread.so.0 --ldd -DMAXTRACE=10 -DSTP_NO_OVERLOAD -DMAXSKIPPED=1000000 \
+		-DMAXERRORS=1000 -DMAXMAPENTRIES=100000 -DDMAXACTION=1000000\
+	         ./scripts/lock_addr.stp "$BINARY"
diff --git a/scripts/lock_addr.stp b/scripts/lock_addr.stp
new file mode 100644
index 0000000..f0c9bd6
--- /dev/null
+++ b/scripts/lock_addr.stp
@@ -0,0 +1,55 @@
+#! /usr/bin/env stap
+
+global backtraces
+
+global FUTEX_WAIT = 0 /*, FUTEX_WAKE = 1 */
+global FUTEX_PRIVATE_FLAG = 128 /* linux 2.6.22+ */
+global FUTEX_CLOCK_REALTIME = 256 /* linux 2.6.29+ */
+
+global lock_waits # long-lived stats on (tid,lock) blockage elapsed time
+global process_names # long-lived pid-to-execname mapping
+global lock_time
+
+probe syscall.futex.return {   
+  if (($op & ~(FUTEX_PRIVATE_FLAG|FUTEX_CLOCK_REALTIME)) != FUTEX_WAIT) next
+  process_names[pid()] = execname()
+  elapsed = gettimeofday_us() - @entry(gettimeofday_us())
+  lock_waits[pid(), $uaddr] <<< elapsed
+}
+
+function log_backtrace(addr)
+{
+	if (backtraces[addr] == "")
+		backtraces[addr] = sprint_usyms(ubacktrace())
+}
+
+probe process(@1).function("m0_semaphore_down")
+{
+	log_backtrace($semaphore)
+}
+
+probe process(@1).function("m0_mutex_lock")
+{
+	log_backtrace($mutex)
+}
+
+probe process(@1).function("m0_rwlock_write_lock"),
+      process(@1).function("m0_rwlock_read_lock")
+{
+	log_backtrace($lock)
+}
+
+probe end
+{
+	foreach ([pid+, lock] in lock_waits) {
+		total_locked_time = @count(lock_waits[pid,lock]) * @avg(lock_waits[pid,lock]);
+		str = sprintf("%s[%d] lock %p contended %d times, %d avg us, total %d us\n%s",
+			      process_names[pid], pid, lock, @count(lock_waits[pid,lock]),
+			      @avg(lock_waits[pid,lock]), total_locked_time,
+			      backtraces[lock]);
+		lock_time[total_locked_time] = str
+	}
+	foreach (ltime+ in lock_time) {
+		printf("%s\n", lock_time[ltime])
+	}
+}
diff --git a/scripts/locks_addr.stp b/scripts/locks_addr.stp
new file mode 100644
index 0000000..e69de29
-- 
1.8.3.2


From 9a19cc924ca56e58a3095241b62625f2b48dc3e4 Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Mon, 12 Mar 2012 13:05:15 +0200
Subject: [PATCH 1/9] .fto_create couldn't be called for some foms. fixed

---
 fop/fop_format.c    | 12 +++++++
 fop/fop_format.h    | 12 +++++--
 ioservice/io_foms.c |  4 +--
 ioservice/io_foms.h |  2 ++
 ioservice/io_fops.c | 11 +++---
 rpc/it/ping_fom.c   | 24 +++++--------
 rpc/it/ping_fom.h   |  2 ++
 rpc/it/ping_fop.c   | 14 ++++----
 rpc/session_foms.c  |  8 ++---
 rpc/session_foms.h  | 13 ++++---
 rpc/session_fops.c  | 45 +++++++++++-------------
 stob/io_fop.c       | 98 ++++++++++++++++++++++++++++-------------------------
 ut/cs_fop_foms.c    | 20 +++++++++--
 13 files changed, 154 insertions(+), 111 deletions(-)

diff --git a/fop/fop_format.c b/fop/fop_format.c
index f11d33d..61cbd87 100644
--- a/fop/fop_format.c
+++ b/fop/fop_format.c
@@ -39,6 +39,18 @@ static struct c2_fop_decorator *decorators[C2_FOP_DECORATOR_MAX];
 static size_t decorators_nr = 0;
 static bool decoration_used = false;
 
+/** Default fom type ops */
+const struct c2_fom_type_ops c2_fom_type_ops_default = {
+	.fto_create = c2_fom_create_dummy
+};
+C2_EXPORTED(c2_fom_type_ops_default);
+
+int c2_fom_create_dummy(struct c2_fop *fop, struct c2_fom **fom)
+{
+	*fom = NULL;
+	return 0;
+}
+
 void c2_fop_field_type_unprepare(struct c2_fop_field_type *ftype)
 {
 	int    i;
diff --git a/fop/fop_format.h b/fop/fop_format.h
index e49578e..be99a12 100644
--- a/fop/fop_format.h
+++ b/fop/fop_format.h
@@ -80,6 +80,7 @@
 #endif
 
 extern const struct c2_rpc_item_type_ops c2_rpc_fop_default_item_type_ops;
+extern const struct c2_fom_type_ops	 c2_fom_type_ops_default;
 
 struct c2_fop_memlayout;
 
@@ -102,6 +103,8 @@ void c2_fop_type_format_fini(struct c2_fop_type_format *fmt);
 int  c2_fop_type_format_parse_nr(struct c2_fop_type_format **fmt, int nr);
 void c2_fop_type_format_fini_nr(struct c2_fop_type_format **fmt, int nr);
 
+int c2_fom_create_dummy(struct c2_fop *fop, struct c2_fom **fom);
+
 /**
    Returns the address of a sub-field within a field.
 
@@ -204,7 +207,8 @@ struct c2_fop_memlayout {
 	} fm_child[];
 };
 
-#define C2_FOP_TYPE_DECLARE_OPS(fopt, name, ops, opcode, itflags, itops) \
+#define C2_FOP_TYPE_DECLARE_OPS(fopt, name, ops, opcode, itflags, itops, \
+		fom_ops)						\
 struct c2_fop_type fopt ## _fopt = {					\
 	.ft_name = name,						\
 	.ft_fmt  = &__paste(fopt),					\
@@ -213,12 +217,16 @@ struct c2_fop_type fopt ## _fopt = {					\
 		.rit_opcode = (opcode),					\
 		.rit_flags  = (itflags),				\
 		.rit_ops    = (itops)					\
+	},								\
+	.ft_fom_type = {						\
+		.ft_ops = (fom_ops)					\
 	}								\
 };
 
 #define C2_FOP_TYPE_DECLARE(fopt, name, ops, opcode, itflags)		\
         C2_FOP_TYPE_DECLARE_OPS(fopt, name, ops, opcode, itflags,	\
-				&c2_rpc_fop_default_item_type_ops)
+				&c2_rpc_fop_default_item_type_ops,	\
+				&c2_fom_type_ops_default)
 
 /** @} end of fop group */
 
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index 922d338..27125e6 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -61,11 +61,11 @@ static struct c2_fom_ops c2_io_fom_rwv_ops = {
 	.fo_home_locality = io_fom_locality_get,
 };
 
-static const struct c2_fom_type_ops c2_io_cob_rwv_type_ops = {
+const struct c2_fom_type_ops c2_io_cob_rwv_type_ops = {
 	.fto_create = io_fop_cob_rwv_fom_init,
 };
 
-static struct c2_fom_type c2_io_cob_rwv_type = {
+struct c2_fom_type c2_io_cob_rwv_type = {
 	.ft_ops = &c2_io_cob_rwv_type_ops,
 };
 
diff --git a/ioservice/io_foms.h b/ioservice/io_foms.h
index e4ad291..83ec18a 100644
--- a/ioservice/io_foms.h
+++ b/ioservice/io_foms.h
@@ -74,6 +74,8 @@ enum c2_io_fom_cob_rwv_phases {
 	FOPH_COB_IO_WAIT,
 };
 
+extern const struct c2_fom_type_ops c2_io_cob_rwv_type_ops;
+
 #endif
 
 /** @} end of io_foms */
diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index fd33726..ef647ad 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -24,6 +24,7 @@
 #endif
 
 #include "ioservice/io_fops.h"
+#include "ioservice/io_foms.h"
 
 #ifdef __KERNEL__
 #include "ioservice/io_fops_k.h"
@@ -507,21 +508,23 @@ const struct c2_fop_type_ops c2_io_rwv_rep_ops = {
 
 C2_FOP_TYPE_DECLARE_OPS(c2_fop_cob_readv, "Read request", &c2_io_cob_readv_ops,
 			C2_IOSERVICE_READV_OPCODE, C2_RPC_ITEM_TYPE_REQUEST,
-			&rpc_item_iov_type_ops);
+			&rpc_item_iov_type_ops, &c2_io_cob_rwv_type_ops);
 C2_FOP_TYPE_DECLARE_OPS(c2_fop_cob_writev, "Write request",
 			&c2_io_cob_writev_ops,
 			C2_IOSERVICE_WRITEV_OPCODE, C2_RPC_ITEM_TYPE_REQUEST,
-			&rpc_item_iov_type_ops);
+			&rpc_item_iov_type_ops, &c2_io_cob_rwv_type_ops);
 
 /**
  * FOP definitions of readv and writev reply FOPs.
  */
 C2_FOP_TYPE_DECLARE_OPS(c2_fop_cob_writev_rep, "Write reply",
 			&c2_io_rwv_rep_ops, C2_IOSERVICE_WRITEV_REP_OPCODE,
-			C2_RPC_ITEM_TYPE_REPLY, &rpc_item_iov_type_ops);
+			C2_RPC_ITEM_TYPE_REPLY, &rpc_item_iov_type_ops,
+			&c2_fom_type_ops_default);
 C2_FOP_TYPE_DECLARE_OPS(c2_fop_cob_readv_rep, "Read reply",
 			&c2_io_rwv_rep_ops, C2_IOSERVICE_READV_REP_OPCODE,
-			C2_RPC_ITEM_TYPE_REPLY,  &rpc_item_iov_type_ops);
+			C2_RPC_ITEM_TYPE_REPLY,  &rpc_item_iov_type_ops,
+			&c2_fom_type_ops_default);
 
 static struct c2_fop_type_format *ioservice_fmts[] = {
 	&c2_fop_file_fid_tfmt,
diff --git a/rpc/it/ping_fom.c b/rpc/it/ping_fom.c
index 1055339..d35b1fb 100644
--- a/rpc/it/ping_fom.c
+++ b/rpc/it/ping_fom.c
@@ -46,13 +46,13 @@ struct c2_fom_ops c2_fom_ping_ops = {
 };
 
 /** FOM type specific functions for ping FOP. */
-static const struct c2_fom_type_ops c2_fom_ping_type_ops = {
+const struct c2_fom_type_ops c2_fom_ping_type_ops = {
 	.fto_create = ping_fop_fom_create
 };
 
 /** Ping specific FOM type operations vector. */
-struct c2_fom_type c2_fom_ping_mopt = {
-        .ft_ops = &c2_fom_ping_type_ops,
+static struct c2_fom_type c2_fom_ping_mopt = {
+        .ft_ops = &c2_fom_ping_type_ops
 };
 
 size_t c2_fom_ping_home_locality(const struct c2_fom *fom)
@@ -89,25 +89,19 @@ int c2_fom_ping_state(struct c2_fom *fom)
 /* Init for ping */
 static int ping_fop_fom_create(struct c2_fop *fop, struct c2_fom **m)
 {
-        struct c2_fom                   *fom;
-        struct c2_fom_ping		*fom_obj;
-        struct c2_fom_type              *fom_type;
+        struct c2_fom	   *fom;
+        struct c2_fom_ping *fom_obj;
 
         C2_PRE(fop != NULL);
         C2_PRE(m != NULL);
 
-        fom_obj= c2_alloc(sizeof(struct c2_fom_ping));
+        fom_obj = c2_alloc(sizeof *fom_obj);
         if (fom_obj == NULL)
                 return -ENOMEM;
-        fom_type = &c2_fom_ping_mopt;
-        C2_ASSERT(fom_type != NULL);
-        fop->f_type->ft_fom_type = *fom_type;
-	fom = &fom_obj->fp_gen;
-	c2_fom_init(fom);
-	fom->fo_type = fom_type;
-	fom->fo_ops = &c2_fom_ping_ops;
-	fom->fo_fop = fop;
 	fom_obj->fp_fop = fop;
+
+	fom = &fom_obj->fp_gen;
+	c2_fom_create(fom, &c2_fom_ping_mopt, &c2_fom_ping_ops, fop, NULL);
 	*m = fom;
 	return 0;
 }
diff --git a/rpc/it/ping_fom.h b/rpc/it/ping_fom.h
index 525ee79..9434e86 100644
--- a/rpc/it/ping_fom.h
+++ b/rpc/it/ping_fom.h
@@ -34,6 +34,8 @@ struct c2_fom_ping {
         struct c2_fop			*fp_fop;
 };
 
+extern const struct c2_fom_type_ops c2_fom_ping_type_ops;
+
 /**
  * <b> State Transition function for "ping" operation
  *     that executes on data server. </b>
diff --git a/rpc/it/ping_fop.c b/rpc/it/ping_fop.c
index 83d3685..fd2e51c 100644
--- a/rpc/it/ping_fop.c
+++ b/rpc/it/ping_fop.c
@@ -59,9 +59,11 @@ const struct c2_fop_type_ops c2_fop_ping_rep_ops = {
 };
 
 /* Ping fop assignment */
-C2_FOP_TYPE_DECLARE(c2_fop_ping, "ping fop", &c2_fop_ping_ops,
-		    C2_RPC_PING_OPCODE,
-		    C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO);
+C2_FOP_TYPE_DECLARE_OPS(c2_fop_ping, "ping fop", &c2_fop_ping_ops,
+			C2_RPC_PING_OPCODE,
+			C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO,
+			&c2_rpc_fop_default_item_type_ops,
+			&c2_fom_ping_type_ops);
 
 C2_FOP_TYPE_DECLARE(c2_fop_ping_rep, "ping fop reply", &c2_fop_ping_rep_ops,
 		    C2_RPC_PING_REPLY_OPCODE, C2_RPC_ITEM_TYPE_REPLY);
@@ -81,14 +83,12 @@ void c2_ping_fop_fini(void)
         c2_fop_type_fini_nr(fops, ARRAY_SIZE(fops));
 }
 
-extern struct c2_fom_type c2_fom_ping_mopt;
-
 int c2_ping_fop_init(void)
 {
         int result;
 	result = c2_fop_type_format_parse_nr(fmts, ARRAY_SIZE(fmts));
-        result = c2_fop_type_build_nr(fops, ARRAY_SIZE(fops));
-	c2_fop_ping_fopt.ft_fom_type = c2_fom_ping_mopt;
+	if (result == 0)
+		result = c2_fop_type_build_nr(fops, ARRAY_SIZE(fops));
         return result;
 }
 
diff --git a/rpc/session_foms.c b/rpc/session_foms.c
index 027bd32..84e0909 100644
--- a/rpc/session_foms.c
+++ b/rpc/session_foms.c
@@ -136,7 +136,7 @@ const struct c2_fom_ops c2_rpc_fom_conn_establish_ops = {
 	.fo_home_locality = c2_rpc_session_default_home_locality
 };
 
-static struct c2_fom_type_ops c2_rpc_fom_conn_establish_type_ops = {
+struct c2_fom_type_ops c2_rpc_fom_conn_establish_type_ops = {
 	.fto_create = session_gen_fom_create
 };
 
@@ -293,7 +293,7 @@ const struct c2_fom_ops c2_rpc_fom_session_establish_ops = {
 	.fo_home_locality = c2_rpc_session_default_home_locality
 };
 
-static struct c2_fom_type_ops c2_rpc_fom_session_establish_type_ops = {
+struct c2_fom_type_ops c2_rpc_fom_session_establish_type_ops = {
 	.fto_create = session_gen_fom_create
 };
 
@@ -391,7 +391,7 @@ const struct c2_fom_ops c2_rpc_fom_session_terminate_ops = {
 	.fo_home_locality = c2_rpc_session_default_home_locality
 };
 
-static struct c2_fom_type_ops c2_rpc_fom_session_terminate_type_ops = {
+struct c2_fom_type_ops c2_rpc_fom_session_terminate_type_ops = {
 	.fto_create = session_gen_fom_create
 };
 
@@ -478,7 +478,7 @@ const struct c2_fom_ops c2_rpc_fom_conn_terminate_ops = {
 	.fo_home_locality = c2_rpc_session_default_home_locality
 };
 
-static struct c2_fom_type_ops c2_rpc_fom_conn_terminate_type_ops = {
+struct c2_fom_type_ops c2_rpc_fom_conn_terminate_type_ops = {
 	.fto_create = session_gen_fom_create
 };
 
diff --git a/rpc/session_foms.h b/rpc/session_foms.h
index 4281a08..b65e700 100644
--- a/rpc/session_foms.h
+++ b/rpc/session_foms.h
@@ -50,12 +50,14 @@ enum c2_rpc_fom_conn_establish_phase {
 	FOPH_CONN_ESTABLISHING = FOPH_NR + 1
 };
 
-extern struct c2_fom_type c2_rpc_fom_conn_establish_type;
+extern struct c2_fom_type      c2_rpc_fom_conn_establish_type;
+extern struct c2_fom_type_ops  c2_rpc_fom_conn_establish_type_ops;
 extern const struct c2_fom_ops c2_rpc_fom_conn_establish_ops;
 
 size_t c2_rpc_session_default_home_locality(const struct c2_fom *fom);
 int c2_rpc_fom_conn_establish_state(struct c2_fom *fom);
 void c2_rpc_fom_conn_establish_fini(struct c2_fom *fom);
+
 /*
  * FOM to execute "Session Create" request
  */
@@ -64,7 +66,8 @@ enum c2_rpc_fom_session_establish_phase {
 	FOPH_SESSION_ESTABLISHING = FOPH_NR + 1
 };
 
-extern struct c2_fom_type c2_rpc_fom_session_establish_type;
+extern struct c2_fom_type      c2_rpc_fom_session_establish_type;
+extern struct c2_fom_type_ops  c2_rpc_fom_session_establish_type_ops;
 extern const struct c2_fom_ops c2_rpc_fom_session_establish_ops;
 
 int c2_rpc_fom_session_establish_state(struct c2_fom *fom);
@@ -78,7 +81,8 @@ enum c2_rpc_fom_session_terminate_phase {
 	FOPH_SESSION_TERMINATING = FOPH_NR + 1
 };
 
-extern struct c2_fom_type c2_rpc_fom_session_terminate_type;
+extern struct c2_fom_type      c2_rpc_fom_session_terminate_type;
+extern struct c2_fom_type_ops  c2_rpc_fom_session_terminate_type_ops;
 extern const struct c2_fom_ops c2_rpc_fom_session_terminate_ops;
 
 int c2_rpc_fom_session_terminate_state(struct c2_fom *fom);
@@ -92,7 +96,8 @@ enum c2_rpc_fom_conn_terminate_phase {
 	FOPH_CONN_TERMINATING = FOPH_NR + 1
 };
 
-extern struct c2_fom_type c2_rpc_fom_conn_terminate_type;
+extern struct c2_fom_type      c2_rpc_fom_conn_terminate_type;
+extern struct c2_fom_type_ops  c2_rpc_fom_conn_terminate_type_ops;
 extern const struct c2_fom_ops c2_rpc_fom_conn_terminate_ops;
 
 int c2_rpc_fom_conn_terminate_state(struct c2_fom *fom);
diff --git a/rpc/session_fops.c b/rpc/session_fops.c
index e2fd2f7..28ac841 100644
--- a/rpc/session_fops.c
+++ b/rpc/session_fops.c
@@ -138,22 +138,29 @@ C2_FOP_TYPE_DECLARE_OPS(c2_rpc_fop_conn_establish, "rpc_conn_establish",
 			&default_fop_type_ops,
 			C2_RPC_CONN_ESTABLISH_OPCODE,
 			C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO,
-			&conn_establish_item_type_ops);
+			&conn_establish_item_type_ops,
+			&c2_rpc_fom_conn_establish_type_ops);
 
-C2_FOP_TYPE_DECLARE(c2_rpc_fop_conn_terminate, "rpc_conn_terminate",
-		    &default_fop_type_ops,
-		    C2_RPC_CONN_TERMINATE_OPCODE,
-		    C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO);
+C2_FOP_TYPE_DECLARE_OPS(c2_rpc_fop_conn_terminate, "rpc_conn_terminate",
+			&default_fop_type_ops,
+			C2_RPC_CONN_TERMINATE_OPCODE,
+			C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO,
+			&c2_rpc_fop_default_item_type_ops,
+			&c2_rpc_fom_conn_terminate_type_ops);
 
-C2_FOP_TYPE_DECLARE(c2_rpc_fop_session_establish, "rpc_session_establish",
-		    &default_fop_type_ops,
-		    C2_RPC_SESSION_ESTABLISH_OPCODE,
-		    C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO);
+C2_FOP_TYPE_DECLARE_OPS(c2_rpc_fop_session_establish, "rpc_session_establish",
+			&default_fop_type_ops,
+			C2_RPC_SESSION_ESTABLISH_OPCODE,
+			C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO,
+			&c2_rpc_fop_default_item_type_ops,
+			&c2_rpc_fom_session_establish_type_ops);
 
-C2_FOP_TYPE_DECLARE(c2_rpc_fop_session_terminate, "rpc_session_terminate",
-		    &default_fop_type_ops,
-		    C2_RPC_SESSION_TERMINATE_OPCODE,
-		    C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO);
+C2_FOP_TYPE_DECLARE_OPS(c2_rpc_fop_session_terminate, "rpc_session_terminate",
+			&default_fop_type_ops,
+			C2_RPC_SESSION_TERMINATE_OPCODE,
+			C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO,
+			&c2_rpc_fop_default_item_type_ops,
+			&c2_rpc_fom_session_terminate_type_ops);
 
 /*
  *  REPLY fops
@@ -211,18 +218,6 @@ int c2_rpc_session_fop_init(void)
 	if (result != 0)
 		c2_rpc_session_fop_fini();
 
-	c2_rpc_fop_conn_establish_fopt.ft_fom_type =
-		c2_rpc_fom_conn_establish_type;
-
-	c2_rpc_fop_conn_terminate_fopt.ft_fom_type =
-		c2_rpc_fom_conn_terminate_type;
-
-	c2_rpc_fop_session_establish_fopt.ft_fom_type =
-		c2_rpc_fom_session_establish_type;
-
-	c2_rpc_fop_session_terminate_fopt.ft_fom_type =
-		c2_rpc_fom_session_terminate_type;
-
 	return result;
 }
 
diff --git a/stob/io_fop.c b/stob/io_fop.c
index 8154227..dbae3be 100644
--- a/stob/io_fop.c
+++ b/stob/io_fop.c
@@ -90,17 +90,60 @@ static const struct c2_fop_type_ops default_rep_fop_ops = {
 };
 
 /**
+ * Fom type operations structures for corresponding foms.
+ */
+static int stob_create_fom_create(struct c2_fop *fop, struct c2_fom **out);
+static int stob_read_fom_create(struct c2_fop *fop, struct c2_fom **out);
+static int stob_write_fom_create(struct c2_fop *fop, struct c2_fom **out);
+
+static const struct c2_fom_type_ops stob_create_fom_type_ops = {
+	.fto_create = stob_create_fom_create,
+};
+
+static const struct c2_fom_type_ops stob_read_fom_type_ops = {
+	.fto_create = stob_read_fom_create,
+};
+
+static const struct c2_fom_type_ops stob_write_fom_type_ops = {
+	.fto_create = stob_write_fom_create,
+};
+
+static struct c2_fom_type stob_create_fom_mopt = {
+	.ft_ops = &stob_create_fom_type_ops,
+};
+
+static struct c2_fom_type stob_read_fom_mopt = {
+	.ft_ops = &stob_read_fom_type_ops,
+};
+
+static struct c2_fom_type stob_write_fom_mopt = {
+	.ft_ops = &stob_write_fom_type_ops,
+};
+
+static struct c2_fom_type *stob_fom_types[] = {
+	&stob_create_fom_mopt,
+	&stob_write_fom_mopt,
+	&stob_read_fom_mopt,
+};
+
+/**
  * Fop type declarations for corresponding fops
  */
-C2_FOP_TYPE_DECLARE(c2_stob_io_create, "stob_create", &default_fop_ops,
-		    C2_STOB_IO_CREATE_REQ_OPCODE,
-		    C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO);
-C2_FOP_TYPE_DECLARE(c2_stob_io_read, "stob_read", &default_fop_ops,
-		    C2_STOB_IO_READ_REQ_OPCODE,
-		    C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO);
-C2_FOP_TYPE_DECLARE(c2_stob_io_write, "stob_write", &default_fop_ops,
-		    C2_STOB_IO_WRITE_REQ_OPCODE,
-		    C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO);
+C2_FOP_TYPE_DECLARE_OPS(c2_stob_io_create, "stob_create", &default_fop_ops,
+			C2_STOB_IO_CREATE_REQ_OPCODE,
+			C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO,
+			&c2_rpc_fop_default_item_type_ops,
+			&stob_create_fom_type_ops);
+C2_FOP_TYPE_DECLARE_OPS(c2_stob_io_read, "stob_read", &default_fop_ops,
+			C2_STOB_IO_READ_REQ_OPCODE,
+			C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO,
+			&c2_rpc_fop_default_item_type_ops,
+			&stob_read_fom_type_ops);
+C2_FOP_TYPE_DECLARE_OPS(c2_stob_io_write, "stob_write", &default_fop_ops,
+			C2_STOB_IO_WRITE_REQ_OPCODE,
+			C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO,
+			&c2_rpc_fop_default_item_type_ops,
+			&stob_write_fom_type_ops);
 
 C2_FOP_TYPE_DECLARE(c2_stob_io_create_rep, "stob_create reply",
 		    &default_rep_fop_ops,
@@ -147,10 +190,6 @@ struct c2_stob_io_fom {
 	struct c2_stob_io		 sif_stio;
 };
 
-static int stob_create_fom_create(struct c2_fop *fop, struct c2_fom **out);
-static int stob_read_fom_create(struct c2_fop *fop, struct c2_fom **out);
-static int stob_write_fom_create(struct c2_fop *fop, struct c2_fom **out);
-
 static int stob_create_fom_state(struct c2_fom *fom);
 static int stob_read_fom_state(struct c2_fom *fom);
 static int stob_write_fom_state(struct c2_fom *fom);
@@ -180,39 +219,6 @@ static struct c2_fom_ops stob_read_fom_ops = {
 };
 
 /**
- * Fom type operations structures for corresponding foms.
- */
-static const struct c2_fom_type_ops stob_create_fom_type_ops = {
-	.fto_create = stob_create_fom_create,
-};
-
-static const struct c2_fom_type_ops stob_read_fom_type_ops = {
-	.fto_create = stob_read_fom_create,
-};
-
-static const struct c2_fom_type_ops stob_write_fom_type_ops = {
-	.fto_create = stob_write_fom_create,
-};
-
-static struct c2_fom_type stob_create_fom_mopt = {
-	.ft_ops = &stob_create_fom_type_ops,
-};
-
-static struct c2_fom_type stob_read_fom_mopt = {
-	.ft_ops = &stob_read_fom_type_ops,
-};
-
-static struct c2_fom_type stob_write_fom_mopt = {
-	.ft_ops = &stob_write_fom_type_ops,
-};
-
-static struct c2_fom_type *stob_fom_types[] = {
-	&stob_create_fom_mopt,
-	&stob_write_fom_mopt,
-	&stob_read_fom_mopt,
-};
-
-/**
  * Function to map a fop to its corresponding fom
  */
 static struct c2_fom_type *stob_fom_type_map(c2_fop_type_code_t code)
diff --git a/ut/cs_fop_foms.c b/ut/cs_fop_foms.c
index 33e4de5..94d94e5 100644
--- a/ut/cs_fop_foms.c
+++ b/ut/cs_fop_foms.c
@@ -154,6 +154,14 @@ static struct c2_fom_type cs_ds1_req_fop_fom_mopt = {
 	.ft_ops = &cs_ds1_req_fop_fom_type_ops,
 };
 
+static const struct c2_fom_type_ops cs_ds1_rep_fop_fom_type_ops = {
+        .fto_create = NULL
+};
+
+static struct c2_fom_type cs_ds1_rep_fop_fom_mopt = {
+	.ft_ops = &cs_ds1_rep_fop_fom_type_ops,
+};
+
 /*
   Fom type operations for ds2 service foms.
  */
@@ -165,6 +173,14 @@ static struct c2_fom_type cs_ds2_req_fop_fom_mopt = {
 	.ft_ops = &cs_ds2_req_fop_fom_type_ops,
 };
 
+static const struct c2_fom_type_ops cs_ds2_rep_fop_fom_type_ops = {
+        .fto_create = NULL
+};
+
+static struct c2_fom_type cs_ds2_rep_fop_fom_mopt = {
+	.ft_ops = &cs_ds2_rep_fop_fom_type_ops,
+};
+
 static void cs_ut_rpc_item_reply_cb(struct c2_rpc_item *item)
 {
 	struct c2_fop *req_fop;
@@ -209,7 +225,7 @@ int c2_cs_ut_ds1_fop_init(void)
 	cs_ds1_fopts[0]->ft_fmt = &cs_ds1_req_fop_tfmt;
 	cs_ds1_fopts[1]->ft_fmt = &cs_ds1_rep_fop_tfmt;
 	cs_ds1_fopts[0]->ft_fom_type = cs_ds1_req_fop_fom_mopt;
-	cs_ds1_fopts[1]->ft_fom_type = cs_ds1_req_fop_fom_mopt;
+	cs_ds1_fopts[1]->ft_fom_type = cs_ds1_rep_fop_fom_mopt;
 
         result = c2_fop_type_build_nr(cs_ds1_fopts, ARRAY_SIZE(cs_ds1_fopts));
         if (result != 0)
@@ -238,7 +254,7 @@ int c2_cs_ut_ds2_fop_init(void)
 	cs_ds2_fopts[0]->ft_fmt = &cs_ds2_req_fop_tfmt;
 	cs_ds2_fopts[1]->ft_fmt = &cs_ds2_rep_fop_tfmt;
 	cs_ds2_fopts[0]->ft_fom_type = cs_ds2_req_fop_fom_mopt;
-	cs_ds2_fopts[1]->ft_fom_type = cs_ds2_req_fop_fom_mopt;
+	cs_ds2_fopts[1]->ft_fom_type = cs_ds2_rep_fop_fom_mopt;
 
         result = c2_fop_type_build_nr(cs_ds2_fopts, ARRAY_SIZE(cs_ds2_fopts));
         if (result != 0)
-- 
1.8.3.2


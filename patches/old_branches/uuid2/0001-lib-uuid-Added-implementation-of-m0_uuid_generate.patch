From 41a9689d5f6390c8205544958bc484b06efc3937 Mon Sep 17 00:00:00 2001
From: Amit Jambure <Amit_Jambure@xyratex.com>
Date: Thu, 25 Apr 2013 16:46:46 +0530
Subject: [PATCH 1/5] lib/uuid: Added implementation of m0_uuid_generate().

Uses uuid_generate() from libuuid and generate_random_uuid() from
linux/random.h in user and kernel space respectively.
---
 Makefile.am   |  3 ++-
 configure.ac  |  5 +++++
 lib/ut/uuid.c |  8 ++++++++
 lib/uuid.c    | 20 ++++++++++++++++++++
 lib/uuid.h    |  2 ++
 5 files changed, 37 insertions(+), 1 deletion(-)

diff --git a/Makefile.am b/Makefile.am
index 98f2f08..fa6085c 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -149,7 +149,8 @@ lib_LTLIBRARIES          += mero/libmero.la
 mero_libmero_la_CPPFLAGS  = -DM0_TARGET='libmero' $(AM_CPPFLAGS)
 mero_libmero_la_LDFLAGS   = -release @LT_RELEASE@ -pthread $(AM_LDFLAGS)
 mero_libmero_la_LIBADD    = @MATH_LIBS@ @PTHREAD_LIBS@ @AIO_LIBS@ @RT_LIBS@ \
-                            @DB_LIBS@ @GALOIS_LIBS@ @YAML_LIBS@ @PROFILER_LIBS@
+                            @DB_LIBS@ @GALOIS_LIBS@ @YAML_LIBS@ @PROFILER_LIBS@ \
+			    @UUID_LIBS@
 
 # install directory for public libmero headers
 mero_includedir             = $(includedir)/mero
diff --git a/configure.ac b/configure.ac
index bfb386b..4efa0bd 100644
--- a/configure.ac
+++ b/configure.ac
@@ -327,6 +327,10 @@ MERO_SEARCH_LIBS([aio_read], [rt aio c], [RT_LIBS],
 )
 AC_SUBST([RT_LIBS])
 
+MERO_SEARCH_LIBS([uuid_generate], [uuid c], [UUID_LIBS],
+	[uuid_generate cannot be found! Try to install libuuid.])
+AC_SUBST([UUID_LIBS])
+
 #
 # Checking for required header files
 #
@@ -679,6 +683,7 @@ echo "GALOIS_LIBS  :  \"$GALOIS_LIBS\""
 echo "CUNIT_LIBS   :  \"$CUNIT_LIBS\""
 echo "YAML_LIBS    :  \"$YAML_LIBS\""
 echo "DB_LIBS      :  \"$DB_LIBS\""
+echo "UUID_LIBS    :  \"$UUID_LIBS\""
 echo ""
 echo "Linux kernel :  \"$LINUX_OBJ\""
 echo "Lustre       :  \"$LUSTRE\""
diff --git a/lib/ut/uuid.c b/lib/ut/uuid.c
index 0d073fa..2fa29e5 100644
--- a/lib/ut/uuid.c
+++ b/lib/ut/uuid.c
@@ -67,11 +67,13 @@ static bool test_identity_op(const char *str)
 	return (u1.u_hi == u2.u_hi) && (u1.u_lo == u2.u_lo);
 }
 
+struct m0_uint128 uuid[1000];
 void m0_test_lib_uuid(void)
 {
 	struct m0_uint128 u;
 	int rc;
 	int i;
+	int j;
 
 	rc = m0_uuid_parse(nil_uuid, &u);
 	M0_UT_ASSERT(rc == 0);
@@ -111,6 +113,12 @@ void m0_test_lib_uuid(void)
 		rc = m0_uuid_parse(bad_uuids_long[i], &u);
 		M0_UT_ASSERT(rc == -EINVAL);
 	}
+
+	for (i = 0; i < ARRAY_SIZE(uuid); ++i)
+		m0_uuid_generate2(&uuid[i]);
+	for (i = 0; i < ARRAY_SIZE(uuid); ++i)
+		for (j = i + 1; j < ARRAY_SIZE(uuid); ++j)
+			M0_UT_ASSERT(m0_uint128_cmp(&uuid[i], &uuid[j]) != 0);
 }
 M0_EXPORTED(m0_test_lib_uuid);
 
diff --git a/lib/uuid.c b/lib/uuid.c
index 1448e02..43f6818 100644
--- a/lib/uuid.c
+++ b/lib/uuid.c
@@ -26,6 +26,26 @@
 #include "lib/time.h"
 #include "lib/uuid.h"
 
+#ifdef __KERNEL__
+#  include <linux/random.h>     /* get_random_uuid */
+#else
+#  include <uuid/uuid.h>        /* generate_uuid */
+#endif
+
+M0_BASSERT(sizeof (struct m0_uint128) == sizeof (char[16]));
+#ifndef __KERNEL__
+M0_BASSERT(sizeof (struct m0_uint128) == sizeof (uuid_t));
+#endif
+
+M0_INTERNAL void m0_uuid_generate2(struct m0_uint128 *u)
+{
+#ifdef __KERNEL__
+	generate_random_uuid((unsigned char *)u);
+#else
+	uuid_generate((unsigned char *)u);
+#endif
+}
+
 /**
    Convert the leading hex string of a specified length to binary.
    The length and characters are enforced.
diff --git a/lib/uuid.h b/lib/uuid.h
index 34edede..0f535df 100644
--- a/lib/uuid.h
+++ b/lib/uuid.h
@@ -58,6 +58,8 @@ M0_INTERNAL void m0_uuid_format(const struct m0_uint128 *val,
 /** Generate unique UUID. */
 M0_INTERNAL uint64_t m0_uuid_generate(void);
 
+M0_INTERNAL void m0_uuid_generate2(struct m0_uint128 *u);
+
 /** @} end uuid group */
 
 #endif /* __MERO_LIB_UUID_H__ */
-- 
1.8.3.2


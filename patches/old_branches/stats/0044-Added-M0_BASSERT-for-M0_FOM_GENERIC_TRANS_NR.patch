From f372d8a1034138a465e1879a8131e434dd669ef7 Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Fri, 7 Feb 2014 15:37:29 +0530
Subject: [PATCH 44/50]  - Added M0_BASSERT for M0_FOM_GENERIC_TRANS_NR  -
 Removed max_size param from m0_sm_conf_trans_extend()

---
 fop/fom_generic.c   |  2 ++
 fop/fom_generic.h   | 99 ++---------------------------------------------------
 ioservice/io_fops.c |  4 +--
 sm/sm.c             |  9 ++---
 sm/sm.h             |  5 ++-
 5 files changed, 10 insertions(+), 109 deletions(-)

diff --git a/fop/fom_generic.c b/fop/fom_generic.c
index a8c9ad2..292137e 100644
--- a/fop/fom_generic.c
+++ b/fop/fom_generic.c
@@ -46,6 +46,8 @@
 struct m0_fop_type m0_fop_generic_reply_fopt;
 M0_EXPORTED(m0_fop_generic_reply_fopt);
 
+M0_BASSERT(ARRAY_SIZE(m0_generic_phases_trans) == M0_FOM_GENERIC_TRANS_NR);
+
 M0_INTERNAL void m0_fom_generic_fini(void)
 {
 	m0_fop_type_fini(&m0_fop_generic_reply_fopt);
diff --git a/fop/fom_generic.h b/fop/fom_generic.h
index ad80f4e..72fb4f4 100644
--- a/fop/fom_generic.h
+++ b/fop/fom_generic.h
@@ -196,112 +196,17 @@ enum m0_fom_standard_phase {
    @todo standard fom phases implementation, depends on the support routines for
 	handling various standard operations on fop as mentioned above
  */
-/*
-struct m0_sm_trans_descr generic_phases_trans[] = {
-	{"FOM initialised",	M0_FOPH_INIT,	M0_FOPH_AUTHENTICATE},
-	{"FOM finished",	M0_FOPH_INIT,	M0_FOPH_FINISH},
-	{"FOM Success",	        M0_FOPH_INIT,	M0_FOPH_SUCCESS},
-	{"FOM init failed",	M0_FOPH_INIT,	M0_FOPH_FAILURE},
-	{"FOM initialised start specific phases",
-				M0_FOPH_INIT, M0_FOPH_TYPE_SPECIFIC},
-	{"FOM wait authentication",
-				M0_FOPH_AUTHENTICATE,
-				M0_FOPH_AUTHENTICATE_WAIT},
-	{"FOM authentication finished",
-				M0_FOPH_AUTHENTICATE, M0_FOPH_RESOURCE_LOCAL},
-	{"FOM authentication init failed",
-				M0_FOPH_AUTHENTICATE, M0_FOPH_FAILURE},
-	{"FOM wait authentication finished",
-				M0_FOPH_AUTHENTICATE_WAIT,
-			        M0_FOPH_RESOURCE_LOCAL},
-	{"FOM authentication failed",
-				M0_FOPH_AUTHENTICATE_WAIT, M0_FOPH_FAILURE},
-	{"Wait identify local resource",
-				M0_FOPH_RESOURCE_LOCAL,
-				M0_FOPH_RESOURCE_LOCAL_WAIT},
-	{"Local resource identified",
-				M0_FOPH_RESOURCE_LOCAL,
-			        M0_FOPH_RESOURCE_DISTRIBUTED},
-	{"Local resource identification init failed",
-				M0_FOPH_RESOURCE_LOCAL, M0_FOPH_FAILURE},
-	{"Wait local resource identify finished",
-				M0_FOPH_RESOURCE_LOCAL_WAIT,
-				M0_FOPH_RESOURCE_DISTRIBUTED},
-	{"Local resource identification failed",
-				M0_FOPH_RESOURCE_LOCAL_WAIT, M0_FOPH_FAILURE},
-	{"Wait identify distributed resource",
-				M0_FOPH_RESOURCE_DISTRIBUTED,
-			        M0_FOPH_RESOURCE_DISTRIBUTED_WAIT},
-	{"Distributed resource identified",
-				M0_FOPH_RESOURCE_DISTRIBUTED,
-			        M0_FOPH_OBJECT_CHECK},
-	{"Distributed resource identification init failed",
-				M0_FOPH_RESOURCE_DISTRIBUTED,
-				M0_FOPH_FAILURE},
-	{"Distributed resource identified",
-				M0_FOPH_RESOURCE_DISTRIBUTED_WAIT,
-			        M0_FOPH_OBJECT_CHECK},
-	{"Wait identify distributed resource failed",
-				M0_FOPH_RESOURCE_DISTRIBUTED_WAIT,
-				M0_FOPH_FAILURE},
-	{"Wait check for FS objects initiate",
-				M0_FOPH_OBJECT_CHECK,
-			        M0_FOPH_OBJECT_CHECK_WAIT},
-	{"FS objects located",  M0_FOPH_OBJECT_CHECK, M0_FOPH_AUTHORISATION},
-	{"Check for FS objects init failed",
-				M0_FOPH_OBJECT_CHECK, M0_FOPH_FAILURE},
-	{"Wait check for FS objects finished",
-				M0_FOPH_OBJECT_CHECK_WAIT,
-				M0_FOPH_AUTHORISATION},
-	{"Check for FS object failed",
-				M0_FOPH_OBJECT_CHECK_WAIT, M0_FOPH_FAILURE},
-	{"Wait authorisation",
-				M0_FOPH_AUTHORISATION,
-			        M0_FOPH_AUTHORISATION_WAIT},
-	{"Authorisation init finish",
-				M0_FOPH_AUTHORISATION, M0_FOPH_TXN_INIT},
-	{"Autorisation init failed",
-				M0_FOPH_AUTHORISATION, M0_FOPH_FAILURE},
-	{"Wait authorisation finished",
-				M0_FOPH_AUTHORISATION_WAIT, M0_FOPH_TXN_INIT},
-	{"Wait authorisation failed",
-				M0_FOPH_AUTHORISATION_WAIT, M0_FOPH_FAILURE},
-	{"Transaction initialised",
-				M0_FOPH_TXN_INIT, M0_FOPH_TXN_OPEN},
-	{"Wait for transaction open",
-				M0_FOPH_TXN_OPEN, M0_FOPH_TXN_WAIT},
-	{"Transaction open failed",
-				M0_FOPH_TXN_WAIT, M0_FOPH_FAILURE},
-	{"Transaction opened",  M0_FOPH_TXN_WAIT, M0_FOPH_TYPE_SPECIFIC},
-	{"FOM successfully completed",
-				 M0_FOPH_SUCCESS, M0_FOPH_FOL_REC_ADD},
-	{"FOL record added",     M0_FOPH_FOL_REC_ADD, M0_FOPH_TXN_COMMIT},
-	{"Transaction commited", M0_FOPH_TXN_COMMIT, M0_FOPH_QUEUE_REPLY},
-	{"Wait reply queue",     M0_FOPH_QUEUE_REPLY, M0_FOPH_QUEUE_REPLY_WAIT},
-	{"Reply sent FOM finish",
-				 M0_FOPH_QUEUE_REPLY, M0_FOPH_FINISH},
-	{"Wait reply queue finished",
-				 M0_FOPH_QUEUE_REPLY_WAIT,
-				 M0_FOPH_TXN_COMMIT_WAIT},
-	{"Reply queued FOM finished",
-				 M0_FOPH_QUEUE_REPLY_WAIT, M0_FOPH_FINISH},
-	{"Wait transaction commit finished",
-				 M0_FOPH_TXN_COMMIT_WAIT, M0_FOPH_FINISH},
-	{"FOM timed out",        M0_FOPH_TIMEOUT, M0_FOPH_FAILURE},
-	{"FOM failed",           M0_FOPH_FAILURE, M0_FOPH_TXN_COMMIT},
-};
-*/
 int m0_fom_tick_generic(struct m0_fom *fom);
 
 M0_INTERNAL void m0_fom_generic_fini(void);
 M0_INTERNAL int m0_fom_generic_init(void);
 
 enum {
-	M0_GENERIC_PHASES_TRANS_COUNT = 44,
+	M0_FOM_GENERIC_TRANS_NR = 44,
 };
 
 extern struct m0_sm_trans_descr
-m0_generic_phases_trans[M0_GENERIC_PHASES_TRANS_COUNT];
+m0_generic_phases_trans[M0_FOM_GENERIC_TRANS_NR];
 extern struct m0_sm_conf m0_generic_conf;
 
 /**
diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index d5a4aa4..adf282d 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -209,7 +209,6 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 {
 	struct m0_sm_conf *p_cob_ops_conf;
 #ifndef __KERNEL__
-	uint32_t           new_nr;
 	p_cob_ops_conf = &cob_ops_conf;
 #else
 	p_cob_ops_conf = &m0_generic_conf;
@@ -227,8 +226,7 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 	m0_sm_conf_extend(m0_generic_conf.scf_state, cob_ops_phases,
 			  m0_generic_conf.scf_nr_states);
 
-	new_nr = io_conf.scf_trans_nr + m0_generic_conf.scf_trans_nr;
-	m0_sm_conf_trans_extend(&m0_generic_conf, &io_conf, new_nr);
+	m0_sm_conf_trans_extend(&m0_generic_conf, &io_conf);
 
 	m0_sm_conf_init(&io_conf);
 #endif
diff --git a/sm/sm.c b/sm/sm.c
index fb0ca05..da104ce 100644
--- a/sm/sm.c
+++ b/sm/sm.c
@@ -648,21 +648,18 @@ static bool trans_exists(const struct m0_sm_conf *conf,
 }
 
 M0_INTERNAL void m0_sm_conf_trans_extend(const struct m0_sm_conf *base,
-					 struct m0_sm_conf *sub,
-					 uint32_t max_size)
+					 struct m0_sm_conf *sub)
 {
 	uint32_t i;
 
 	M0_PRE(conf_invariant(base));
-//	M0_PRE(sub->scf_trans_nr <= max_size);
+	M0_PRE(sub->scf_trans_nr > base->scf_trans_nr);
 
 	for (i = 0; i < base->scf_trans_nr; i++) {
 		const struct m0_sm_trans_descr *b = &base->scf_trans[i];
 
-		if (!trans_exists(sub, b->td_src, b->td_tgt)) {
+		if (!trans_exists(sub, b->td_src, b->td_tgt))
 			sub->scf_trans[i] = *b;
-		//	M0_ASSERT(sub->scf_trans_nr <= max_size);
-		}
 	}
 	M0_POST(conf_invariant(sub));
 }
diff --git a/sm/sm.h b/sm/sm.h
index 69561c6..3862101 100644
--- a/sm/sm.h
+++ b/sm/sm.h
@@ -732,11 +732,10 @@ enum m0_sm_return {
  * Resulting table is stored in "sub", which should be of sufficient size.
  * Transitions in "sub" override matching transitions in "base".
  *
- * @param max_size size of array allocated for sub->scf_trans[].
+ * sub->scf_trans[] reserves array elements for base.
  */
 M0_INTERNAL void m0_sm_conf_trans_extend(const struct m0_sm_conf *base,
-					 struct m0_sm_conf *sub,
-					 uint32_t max_size);
+					 struct m0_sm_conf *sub);
 /**
  * "Extends" base state descriptions with the given sub descriptions.
  *
-- 
1.8.3.2


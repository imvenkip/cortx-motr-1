From b4a361a526a45e160e454b29745529f19f5e09b9 Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Mon, 16 Dec 2013 13:37:42 +0530
Subject: [PATCH 28/50]  - Fix for bulk-server-ut failure.

---
 fop/fom.c                   |  6 +++++-
 fop/fom.h                   |  4 ++--
 ioservice/cob_foms.c        | 18 ++++++++++--------
 ioservice/io_foms.c         | 11 ++---------
 ioservice/io_fops.c         |  5 +++--
 ioservice/io_service.c      |  8 +++++++-
 ioservice/io_service_addb.h |  1 +
 ioservice/ut/bulkio_ut.c    |  6 ++++++
 8 files changed, 36 insertions(+), 23 deletions(-)

diff --git a/fop/fom.c b/fop/fom.c
index 979e312..6f53abb 100644
--- a/fop/fom.c
+++ b/fop/fom.c
@@ -1472,7 +1472,11 @@ M0_INTERNAL void m0_fom_sm_init(struct m0_fom *fom)
 					fom->fo_fos_stats_data,
 					sizeof(fom->fo_fos_stats_data));
 		m0_sm_stats_enable(&fom->fo_sm_state,
-				   &fom->fo_sm_state_stats);
+			   	   &fom->fo_sm_state_stats);
+
+		if (fom->fo_phase_stats_data != NULL)
+			m0_sm_stats_enable(&fom->fo_sm_phase,
+				   	   &fom->fo_sm_phase_stats);
 	}
 }
 
diff --git a/fop/fom.h b/fop/fom.h
index 2d444b0..c91d79d 100644
--- a/fop/fom.h
+++ b/fop/fom.h
@@ -559,8 +559,8 @@ struct m0_fom {
          * counter data for states statistics
          * fo_addb_init() allocates it.
          */
-	uint8_t                   *fo_phase_stats_data;
-	uint32_t                   fo_phase_stats_data_size;
+	uint8_t                  *fo_phase_stats_data;
+	uint32_t                  fo_phase_stats_data_size;
 
 	/** Thread executing current phase transition. */
 	struct m0_loc_thread     *fo_thread;
diff --git a/ioservice/cob_foms.c b/ioservice/cob_foms.c
index 776c83f..0435e25 100644
--- a/ioservice/cob_foms.c
+++ b/ioservice/cob_foms.c
@@ -92,7 +92,7 @@ static struct m0_sm_trans_descr cob_fom_phase_trans[] = {
 };
 
 struct m0_sm_conf cob_ops_conf = {
-	.scf_magic     = M0_SM_CONF_MAGIC,
+//	.scf_magic     = M0_SM_CONF_MAGIC,
 	.scf_name      = "COB create/delete phases",
 	.scf_nr_states = ARRAY_SIZE(cob_ops_phases),
 	.scf_state     = cob_ops_phases,
@@ -620,8 +620,11 @@ static void cd_fom_fini(struct m0_fom *fom)
 
 static void cd_fom_addb_init(struct m0_fom *fom, struct m0_addb_mc *mc)
 {
+#undef FOM_PHASE_TRANS_NR
+#define FOM_PHASE_TRANS_NR(fom)                 \
+        (FOM_PHASE_STATS_DATA_SZ((fom)->fo_type->ft_conf->scf_trans_nr))
+
 	struct m0_fom_cob_op *cfom;
-	bool                  phase_stats_enabled;
 
 	cfom = cob_fom_get(fom);
 
@@ -630,17 +633,16 @@ static void cd_fom_addb_init(struct m0_fom *fom, struct m0_addb_mc *mc)
 			 cfom->fco_gfid.f_container, cfom->fco_gfid.f_key,
 			 cfom->fco_cfid.f_container, cfom->fco_gfid.f_key);
 
-        phase_stats_enabled = fom->fo_sm_phase.sm_state_epoch != 0;
-
-	if (phase_stats_enabled) {
+        IOS_ALLOC_ARR(fom->fo_phase_stats_data, FOM_PHASE_TRANS_NR(fom),
+		      &m0_ios_addb_ctx, COB_FOM_ADDB_INIT);
+	if (fom->fo_phase_stats_data != NULL) {
+		fom->fo_phase_stats_data_size = FOM_PHASE_TRANS_NR(fom) * 8;
 		m0_addb_sm_counter_init(&fom->fo_sm_phase_stats,
 					&m0_addb_rt_ios_cob_fom_phase_stats,
 					fom->fo_phase_stats_data,
 					fom->fo_phase_stats_data_size);
-		m0_sm_stats_enable(&fom->fo_sm_phase,
-				   &fom->fo_sm_phase_stats);
 	}
-
+#undef FOM_PHASE_TRANS_NR
 }
 
 static int cd_cob_delete(struct m0_fom *fom, struct m0_fom_cob_op *cd)
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index 2038e04..1ca4cfc 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -792,7 +792,7 @@ struct m0_sm_trans_descr io_phases_trans[] = {
 };
 
 struct m0_sm_conf io_conf = {
-	.scf_magic     = M0_SM_CONF_MAGIC,
+	//.scf_magic     = M0_SM_CONF_MAGIC,
 	.scf_name      = "IO phases",
 	.scf_nr_states = ARRAY_SIZE(io_phases),
 	.scf_state     = io_phases,
@@ -2086,7 +2086,6 @@ static void m0_io_fom_cob_rw_addb_init(struct m0_fom *fom,
 	(FOM_PHASE_STATS_DATA_SZ((fom)->fo_type->ft_conf->scf_trans_nr))
 
         struct m0_fop_cob_rw *rwfop;
-	bool                  phase_stats_enabled;
 
 	rwfop = io_rw_get(fom->fo_fop);
 	M0_ADDB_CTX_INIT(mc, &fom->fo_addb_ctx, &m0_addb_ct_cob_io_rw_fom,
@@ -2097,18 +2096,12 @@ static void m0_io_fom_cob_rw_addb_init(struct m0_fom *fom,
 
 	IOS_ALLOC_ARR(fom->fo_phase_stats_data, FOM_PHASE_TRANS_NR(fom),
 		      &m0_ios_addb_ctx, FOM_COB_RW_ADDB_INIT);
-	if (fom->fo_phase_stats_data != NULL)
+	if (fom->fo_phase_stats_data != NULL) {
 		fom->fo_phase_stats_data_size = FOM_PHASE_TRANS_NR(fom) * 8;
-
-        phase_stats_enabled = fom->fo_sm_phase.sm_state_epoch != 0;
-
-	if (phase_stats_enabled) {
 		m0_addb_sm_counter_init(&fom->fo_sm_phase_stats,
 					&m0_addb_rt_ios_io_fom_phase_stats,
 					fom->fo_phase_stats_data,
 					fom->fo_phase_stats_data_size);
-		m0_sm_stats_enable(&fom->fo_sm_phase,
-				   &fom->fo_sm_phase_stats);
 	}
 
 #undef FOM_PHASE_TRANS_NR
diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index d9dae9f..a388cf7 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -221,6 +221,7 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 	 */
 	m0_xc_io_fops_init();
 #ifndef __KERNEL__
+//	m0_debugger_invoke();
 	m0_sm_conf_extend(m0_generic_conf.scf_state, io_phases,
 			  m0_generic_conf.scf_nr_states);
 	m0_sm_conf_extend(m0_generic_conf.scf_state, cob_ops_phases,
@@ -228,8 +229,8 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 	/** @todo ignore error ??? */
 	m0_sm_conf_trans_extend(&io_conf, &m0_generic_conf);
 	m0_sm_conf_trans_extend(p_cob_ops_conf, &m0_generic_conf);
-//	m0_sm_conf_init(&io_conf);
-//	m0_sm_conf_init(p_cob_ops_conf);
+	m0_sm_conf_init(&io_conf);
+	m0_sm_conf_init(p_cob_ops_conf);
 #endif
 	M0_FOP_TYPE_INIT(&m0_fop_cob_readv_fopt,
 			 .name      = "Read request",
diff --git a/ioservice/io_service.c b/ioservice/io_service.c
index eff03b6..13344b4 100644
--- a/ioservice/io_service.c
+++ b/ioservice/io_service.c
@@ -179,6 +179,7 @@ static struct m0_addb_rec_type *ios_rwfom_cntr_rts[] = {
 M0_INTERNAL int m0_ios_register(void)
 {
 	int i;
+	int rc;
 
 	/* The onwire version-number structure is declared as a struct,
 	 * not a sequence (which is more like an array.
@@ -191,6 +192,11 @@ M0_INTERNAL int m0_ios_register(void)
 	for (i = 0; i < ARRAY_SIZE(ios_rwfom_cntr_rts); ++i)
 		m0_addb_rec_type_register(ios_rwfom_cntr_rts[i]);
 
+	rc = m0_ioservice_fop_init();
+	if (rc != 0) {
+		return rc;
+	}
+
 #undef RT_REG
 #define RT_REG(n) m0_addb_rec_type_register(&m0_addb_rt_ios_##n)
 	RT_REG(rwfom_finish);
@@ -210,7 +216,7 @@ M0_INTERNAL int m0_ios_register(void)
 	ios_cdom_key = m0_reqh_lockers_allot();
 	poolmach_key = m0_reqh_lockers_allot();
 	ios_mds_conn_key = m0_reqh_lockers_allot();
-	return m0_ioservice_fop_init();
+	return rc;
 }
 
 /**
diff --git a/ioservice/io_service_addb.h b/ioservice/io_service_addb.h
index 47af0dd..891d461 100644
--- a/ioservice/io_service_addb.h
+++ b/ioservice/io_service_addb.h
@@ -177,6 +177,7 @@ enum {
 	M0_IOS_ADDB_LOC_ALIGN_BUFVEC_2,
 	M0_IOS_ADDB_LOC_COB_FOM_CREATE_1,
 	M0_IOS_ADDB_LOC_COB_FOM_CREATE_2,
+	M0_IOS_ADDB_LOC_COB_FOM_ADDB_INIT,
 	M0_IOS_ADDB_LOC_CC_STOB_CREATE_CRED,
 	M0_IOS_ADDB_LOC_CC_STOB_CREATE_1,
 	M0_IOS_ADDB_LOC_CC_STOB_CREATE_2,
diff --git a/ioservice/ut/bulkio_ut.c b/ioservice/ut/bulkio_ut.c
index f44c43e..5635c0b 100644
--- a/ioservice/ut/bulkio_ut.c
+++ b/ioservice/ut/bulkio_ut.c
@@ -1155,8 +1155,14 @@ static int io_fop_stob_create_fom_create(struct m0_fop  *fop,
 	int            rc;
 	struct m0_fom *fom;
 
+//	m0_debugger_invoke();
+
 	rc = m0_io_fom_cob_rw_create(fop, &fom, reqh);
         M0_UT_ASSERT(rc == 0);
+
+	/* Ignore fom stats */
+	fom->fo_phase_stats_data = (void *)0;
+
 	fom->fo_ops = &bulkio_stob_create_fom_ops;
 	*m = fom;
         M0_UT_ASSERT(fom->fo_fop != 0);
-- 
1.8.3.2


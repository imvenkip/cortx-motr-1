From e36b43c6a26ed0c49e27e8a25a57a13a52ec62ca Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Fri, 27 Dec 2013 17:06:25 +0530
Subject: [PATCH 36/50]  - Fix for m0_sm_conf_trans_extend()  - Changed
 .td_cause dicscriptions

---
 fop/fom_generic.c      | 46 ++++++++++++++++++++++++++--------------------
 ioservice/io_foms.c    | 33 ++++++++++++++++++---------------
 ioservice/io_fops.c    | 16 ++++++++++++++--
 ioservice/io_service.c |  3 +++
 sm/sm.c                | 33 +++++++++++++--------------------
 sm/sm.h                |  5 +++--
 6 files changed, 77 insertions(+), 59 deletions(-)

diff --git a/fop/fom_generic.c b/fop/fom_generic.c
index 7c8217f..1c3362a 100644
--- a/fop/fom_generic.c
+++ b/fop/fom_generic.c
@@ -663,37 +663,39 @@ static struct m0_sm_trans_descr generic_phases_trans[] = {
 	{"FOM initialised",	M0_FOPH_INIT,	M0_FOPH_AUTHENTICATE},
 	{"FOM finished",	M0_FOPH_INIT,	M0_FOPH_FINISH},
 	{"FOM Success",	M0_FOPH_INIT,	M0_FOPH_SUCCESS},
-	{"FOM failed",	M0_FOPH_INIT,	M0_FOPH_FAILURE},
-	{"FOM initialised",	M0_FOPH_INIT,	M0_FOPH_TYPE_SPECIFIC},
+	{"FOM init failed",	M0_FOPH_INIT,	M0_FOPH_FAILURE},
+	{"FOM initialised start specific phases", M0_FOPH_INIT,
+						  M0_FOPH_TYPE_SPECIFIC},
 	{"FOM wait authentication", M0_FOPH_AUTHENTICATE,
 				    M0_FOPH_AUTHENTICATE_WAIT},
 	{"FOM authentication finished", M0_FOPH_AUTHENTICATE,
 					M0_FOPH_RESOURCE_LOCAL},
-	{"FOM authentication failed",	M0_FOPH_AUTHENTICATE, M0_FOPH_FAILURE},
-	{"FOM authentication finished", M0_FOPH_AUTHENTICATE_WAIT,
-					M0_FOPH_RESOURCE_LOCAL},
+	{"FOM authentication init failed", M0_FOPH_AUTHENTICATE,
+					   M0_FOPH_FAILURE},
+	{"FOM wait authentication finished", M0_FOPH_AUTHENTICATE_WAIT,
+					     M0_FOPH_RESOURCE_LOCAL},
 	{"FOM authentication failed", M0_FOPH_AUTHENTICATE_WAIT,
 				      M0_FOPH_FAILURE},
 	{"Wait identify local resource", M0_FOPH_RESOURCE_LOCAL,
 					 M0_FOPH_RESOURCE_LOCAL_WAIT},
 	{"Local resource identified", M0_FOPH_RESOURCE_LOCAL,
 				      M0_FOPH_RESOURCE_DISTRIBUTED},
-	{"Local resource identification failed", M0_FOPH_RESOURCE_LOCAL,
-						 M0_FOPH_FAILURE},
-	{"Local resource identified", M0_FOPH_RESOURCE_LOCAL_WAIT,
-				      M0_FOPH_RESOURCE_DISTRIBUTED},
+	{"Local resource identification init failed", M0_FOPH_RESOURCE_LOCAL,
+						      M0_FOPH_FAILURE},
+	{"Wait local resource identify finished", M0_FOPH_RESOURCE_LOCAL_WAIT,
+				                  M0_FOPH_RESOURCE_DISTRIBUTED},
 	{"Local resource identification failed", M0_FOPH_RESOURCE_LOCAL_WAIT,
 					         M0_FOPH_FAILURE},
 	{"Wait identify distributed resource", M0_FOPH_RESOURCE_DISTRIBUTED,
 					     M0_FOPH_RESOURCE_DISTRIBUTED_WAIT},
 	{"Distributed resource identified", M0_FOPH_RESOURCE_DISTRIBUTED,
 					    M0_FOPH_OBJECT_CHECK},
-	{"Distributed resource identification failed",
+	{"Distributed resource identification init failed",
 					M0_FOPH_RESOURCE_DISTRIBUTED,
 					M0_FOPH_FAILURE},
 	{"Distributed resource identified", M0_FOPH_RESOURCE_DISTRIBUTED_WAIT,
 					    M0_FOPH_OBJECT_CHECK},
-	{"Distributed resource identification failed",
+	{"Wait identify distributed resource failed",
 					M0_FOPH_RESOURCE_DISTRIBUTED_WAIT,
 					M0_FOPH_FAILURE},
 	{"Wait check for FS objects initiate", M0_FOPH_OBJECT_CHECK,
@@ -701,16 +703,18 @@ static struct m0_sm_trans_descr generic_phases_trans[] = {
 	{"FS objects located", M0_FOPH_OBJECT_CHECK, M0_FOPH_AUTHORISATION},
 	{"Check for FS objects init failed", M0_FOPH_OBJECT_CHECK,
 					     M0_FOPH_FAILURE},
-	{"FS objects located", M0_FOPH_OBJECT_CHECK_WAIT,
-						M0_FOPH_AUTHORISATION},
+	{"Wait check for FS objects finished", M0_FOPH_OBJECT_CHECK_WAIT,
+					       M0_FOPH_AUTHORISATION},
 	{"Check for FS object failed", M0_FOPH_OBJECT_CHECK_WAIT,
 				       M0_FOPH_FAILURE},
 	{"Wait authorisation", M0_FOPH_AUTHORISATION,
 			       M0_FOPH_AUTHORISATION_WAIT},
-	{"Authorisation finish", M0_FOPH_AUTHORISATION, M0_FOPH_TXN_INIT},
-	{"Autorisation failed",  M0_FOPH_AUTHORISATION, M0_FOPH_FAILURE},
-	{"Authorisation finish", M0_FOPH_AUTHORISATION_WAIT, M0_FOPH_TXN_INIT},
-	{"Authorisation failed", M0_FOPH_AUTHORISATION_WAIT, M0_FOPH_FAILURE},
+	{"Authorisation init finish", M0_FOPH_AUTHORISATION, M0_FOPH_TXN_INIT},
+	{"Autorisation init failed",  M0_FOPH_AUTHORISATION, M0_FOPH_FAILURE},
+	{"Wait authorisation finished", M0_FOPH_AUTHORISATION_WAIT,
+					M0_FOPH_TXN_INIT},
+	{"Wait authorisation failed", M0_FOPH_AUTHORISATION_WAIT,
+				      M0_FOPH_FAILURE},
 	{"Transaction initialised", M0_FOPH_TXN_INIT, M0_FOPH_TXN_OPEN},
 	{"Wait for transaction open", M0_FOPH_TXN_OPEN, M0_FOPH_TXN_WAIT},
 	{"Transaction open failed", M0_FOPH_TXN_WAIT, M0_FOPH_FAILURE},
@@ -720,9 +724,11 @@ static struct m0_sm_trans_descr generic_phases_trans[] = {
 	{"Transaction commited", M0_FOPH_TXN_COMMIT, M0_FOPH_QUEUE_REPLY},
 	{"Wait reply queue", M0_FOPH_QUEUE_REPLY, M0_FOPH_QUEUE_REPLY_WAIT},
 	{"Reply sent FOM finish", M0_FOPH_QUEUE_REPLY, M0_FOPH_FINISH},
-	{"Reply queued", M0_FOPH_QUEUE_REPLY_WAIT, M0_FOPH_TXN_COMMIT_WAIT},
-	{"Reply queued", M0_FOPH_QUEUE_REPLY_WAIT, M0_FOPH_FINISH},
-	{"Transaction commited", M0_FOPH_TXN_COMMIT_WAIT, M0_FOPH_FINISH},
+	{"Wait reply queue finished", M0_FOPH_QUEUE_REPLY_WAIT,
+				      M0_FOPH_TXN_COMMIT_WAIT},
+	{"Reply queued FOM finished", M0_FOPH_QUEUE_REPLY_WAIT, M0_FOPH_FINISH},
+	{"Wait transaction commit finished", M0_FOPH_TXN_COMMIT_WAIT,
+					     M0_FOPH_FINISH},
 	{"FOM timed out", M0_FOPH_TIMEOUT, M0_FOPH_FAILURE},
 	{"FOM failed", M0_FOPH_FAILURE, M0_FOPH_TXN_COMMIT},
 };
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index c063d45..470ca85 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -757,40 +757,43 @@ struct m0_sm_state_descr io_phases[] = {
 struct m0_sm_trans_descr io_phases_trans[] = {
 	{"IO Prepared", M0_FOPH_IO_FOM_PREPARE, M0_FOPH_IO_FOM_BUFFER_ACQUIRE},
 	{"IO Prepare Failed", M0_FOPH_IO_FOM_PREPARE, M0_FOPH_FAILURE},
-	{"Network buffer acquired", M0_FOPH_IO_FOM_BUFFER_ACQUIRE,
+	{"Network buffer acquired stobio init", M0_FOPH_IO_FOM_BUFFER_ACQUIRE,
 						M0_FOPH_IO_STOB_INIT},
-	{"Network buffer acquired", M0_FOPH_IO_FOM_BUFFER_ACQUIRE,
+	{"Network buffer acquired zerocopy init", M0_FOPH_IO_FOM_BUFFER_ACQUIRE,
 						M0_FOPH_IO_ZERO_COPY_INIT},
-	{"Network buffer not available", M0_FOPH_IO_FOM_BUFFER_ACQUIRE,
+	{"Wait for network buffer", M0_FOPH_IO_FOM_BUFFER_ACQUIRE,
 						M0_FOPH_IO_FOM_BUFFER_WAIT},
 	{"Network buffer acquire failure", M0_FOPH_IO_FOM_BUFFER_ACQUIRE,
 						M0_FOPH_FAILURE},
-	{"Network buffer acquired", M0_FOPH_IO_FOM_BUFFER_WAIT,
-						M0_FOPH_IO_STOB_INIT},
-	{"Network buffer acquired", M0_FOPH_IO_FOM_BUFFER_WAIT,
+	{"Network buffer wait finished stobio init", M0_FOPH_IO_FOM_BUFFER_WAIT,
+					 M0_FOPH_IO_STOB_INIT},
+	{"Wait for network buffer finished zerocopy init",
+						M0_FOPH_IO_FOM_BUFFER_WAIT,
 						M0_FOPH_IO_ZERO_COPY_INIT},
 	{"Network buffer not available", M0_FOPH_IO_FOM_BUFFER_WAIT,
 						M0_FOPH_IO_FOM_BUFFER_WAIT},
-	{"Network buffer acquire failure", M0_FOPH_IO_FOM_BUFFER_WAIT,
+	{"Wait for network buffer failure", M0_FOPH_IO_FOM_BUFFER_WAIT,
 						M0_FOPH_FAILURE},
 	{"STOB I/O launched", M0_FOPH_IO_STOB_INIT, M0_FOPH_IO_STOB_WAIT},
 	{"STOB I/O launch failed", M0_FOPH_IO_STOB_INIT, M0_FOPH_FAILURE},
-	{"STOB I/O finished",  M0_FOPH_IO_STOB_WAIT, M0_FOPH_IO_ZERO_COPY_INIT},
-	{"STOB I/O finished",  M0_FOPH_IO_STOB_WAIT, M0_FOPH_IO_BUFFER_RELEASE},
-	{"STOB I/O failed",  M0_FOPH_IO_STOB_WAIT, M0_FOPH_FAILURE},
+	{"Wait for STOB I/O finished zerocopy init", M0_FOPH_IO_STOB_WAIT,
+						     M0_FOPH_IO_ZERO_COPY_INIT},
+	{"Wait for STOB I/O finished buffer release", M0_FOPH_IO_STOB_WAIT,
+						     M0_FOPH_IO_BUFFER_RELEASE},
+	{"Wait for STOB I/O failed",  M0_FOPH_IO_STOB_WAIT, M0_FOPH_FAILURE},
 	{"Zero-copy initiated", M0_FOPH_IO_ZERO_COPY_INIT,
 						  M0_FOPH_IO_ZERO_COPY_WAIT},
 	{"Zero-copy initiate failed", M0_FOPH_IO_ZERO_COPY_INIT,
 						  M0_FOPH_FAILURE},
-	{"Zero-copy finished", M0_FOPH_IO_ZERO_COPY_WAIT,
+	{"Wait for Zero-copy finished buffer release",M0_FOPH_IO_ZERO_COPY_WAIT,
 						  M0_FOPH_IO_BUFFER_RELEASE},
-	{"Zero-copy finished", M0_FOPH_IO_ZERO_COPY_WAIT,
-						  M0_FOPH_IO_STOB_INIT},
-	{"Zero-copy failed", M0_FOPH_IO_ZERO_COPY_WAIT,
+	{"Wait for Zero-copy finished stobio init", M0_FOPH_IO_ZERO_COPY_WAIT,
+						    M0_FOPH_IO_STOB_INIT},
+	{"Wait for Zero-copy failed", M0_FOPH_IO_ZERO_COPY_WAIT,
 						  M0_FOPH_FAILURE},
 	{"Network buffer released", M0_FOPH_IO_BUFFER_RELEASE,
 						M0_FOPH_IO_FOM_BUFFER_ACQUIRE},
-	{"Network buffer released", M0_FOPH_IO_BUFFER_RELEASE,
+	{"Network buffer released FOM succeed", M0_FOPH_IO_BUFFER_RELEASE,
 						M0_FOPH_SUCCESS},
 };
 
diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index 4b82d8a..200f263 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -181,6 +181,10 @@ const struct m0_fop_type_ops io_fop_cd_ops = {
 	.fto_redo = io_fol_cd_rec_part_redo,
 };
 
+#ifndef __KERNEL__
+static struct m0_sm_trans_descr *new_trans;
+#endif
+
 M0_INTERNAL void m0_ioservice_fop_fini(void)
 {
 	m0_fop_type_fini(&m0_fop_cob_op_reply_fopt);
@@ -192,6 +196,11 @@ M0_INTERNAL void m0_ioservice_fop_fini(void)
 	m0_fop_type_fini(&m0_fop_cob_writev_fopt);
 	m0_fop_type_fini(&m0_fop_cob_readv_fopt);
 
+#ifndef __KERNEL__
+	if (new_trans != NULL)
+		m0_free(new_trans);
+#endif
+
 	m0_xc_io_fops_fini();
 	m0_addb_ctx_fini(&m0_ios_addb_ctx);
 }
@@ -209,7 +218,7 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 {
 	struct m0_sm_conf *p_cob_ops_conf;
 #ifndef __KERNEL__
-	int                rc;
+	int                       rc;
 
 	p_cob_ops_conf = &cob_ops_conf;
 #else
@@ -228,13 +237,16 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 	m0_sm_conf_extend(m0_generic_conf.scf_state, cob_ops_phases,
 			  m0_generic_conf.scf_nr_states);
 
-	rc = m0_sm_conf_trans_extend(&m0_generic_conf, &io_conf);
+	rc = m0_sm_conf_trans_extend(&m0_generic_conf, &io_conf, &new_trans);
 	if (rc != 0) {
 		m0_xc_io_fops_fini();
 		m0_addb_ctx_fini(&m0_ios_addb_ctx);
 		return rc;
 	}
 
+	io_conf.scf_trans    = new_trans;
+	io_conf.scf_trans_nr += m0_generic_conf.scf_trans_nr;
+
 	m0_sm_conf_init(&io_conf);
 #endif
 	M0_FOP_TYPE_INIT(&m0_fop_cob_readv_fopt,
diff --git a/ioservice/io_service.c b/ioservice/io_service.c
index b2b48b9..9b63371 100644
--- a/ioservice/io_service.c
+++ b/ioservice/io_service.c
@@ -197,6 +197,9 @@ M0_INTERNAL int m0_ios_register(void)
 		return rc;
 	}
 
+/**
+ * @todo Need to get rid of these macros
+ */
 #undef RT_REG
 #define RT_REG(n) m0_addb_rec_type_register(&m0_addb_rt_ios_##n)
 	RT_REG(rwfom_finish);
diff --git a/sm/sm.c b/sm/sm.c
index 6f823c4..1db6545 100644
--- a/sm/sm.c
+++ b/sm/sm.c
@@ -639,36 +639,29 @@ M0_INTERNAL bool m0_sm_timeout_is_armed(const struct m0_sm_timeout *to)
 	return m0_sm_timer_is_armed(&to->st_timer);
 }
 
-M0_INTERNAL int m0_sm_conf_trans_extend(const struct m0_sm_conf *base,
-				        struct m0_sm_conf       *sub)
+M0_INTERNAL int m0_sm_conf_trans_extend(const struct m0_sm_conf   *base,
+				        const struct m0_sm_conf   *sub,
+					struct m0_sm_trans_descr **new)
 {
-	struct m0_sm_trans_descr *trans_descr;
-	uint32_t                  trans_nr;
-	uint32_t                  i;
-	uint32_t                  j;
+	uint32_t new_nr;
+	uint32_t i;
+	uint32_t j;
 
 	M0_PRE(base != NULL && sub != NULL);
 	M0_PRE(conf_invariant(base));
 	M0_PRE(conf_invariant(sub));
 
-	trans_nr = base->scf_trans_nr + sub->scf_trans_nr;
-	M0_ALLOC_ARR(trans_descr, trans_nr);
-	if (trans_descr == NULL)
+	new_nr  = base->scf_trans_nr + sub->scf_trans_nr;
+
+	M0_ALLOC_ARR(*new, new_nr);
+	if (*new == NULL)
 		M0_RETURN(-ENOMEM);
 
 	for (i = 0; i < base->scf_trans_nr; ++i)
-		trans_descr[i] = base->scf_trans[i];
-
-	for (j = 0; i < trans_nr && j < sub->scf_trans_nr; ++i, j++)
-		trans_descr[i] = sub->scf_trans[j];
+		(*new)[i] = base->scf_trans[i];
 
-	/*
-	 * Since ->scf_trans statically allocated array, no need to free here.
-	 * This may required when ->scf_trans
-	 * created programatically from conf.
-	 */
-	sub->scf_trans_nr = trans_nr;
-	sub->scf_trans    = trans_descr;
+	for (j = 0; i < new_nr && j < sub->scf_trans_nr; ++i, j++)
+		(*new)[i] = sub->scf_trans[j];
 
 	return 0;
 }
diff --git a/sm/sm.h b/sm/sm.h
index dd27737..e89b771 100644
--- a/sm/sm.h
+++ b/sm/sm.h
@@ -729,8 +729,9 @@ enum m0_sm_return {
 /**
  * "Extends" base transition descriptions with the given sub descriptions.
  */
-M0_INTERNAL int m0_sm_conf_trans_extend(struct m0_sm_conf       *base,
-			                const struct m0_sm_conf *sub);
+M0_INTERNAL int m0_sm_conf_trans_extend(const struct m0_sm_conf   *base,
+			                const struct m0_sm_conf   *sub,
+					struct m0_sm_trans_descr **new);
 /**
  * "Extends" base state descriptions with the given sub descriptions.
  *
-- 
1.8.3.2


From a62a800fc386856bd70c7e92781f98a7f9aa072f Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Mon, 9 Dec 2013 15:52:40 +0530
Subject: [PATCH 03/50] - Moved phase stats counters to addb_init fom
 operation.

---
 fop/fom.c                   | 12 -------
 fop/fom_generic.c           |  6 ++--
 fop/fom_generic.h           | 17 ++++++++-
 fop/fop.c                   |  1 -
 fop/fop_addb.h              | 10 ------
 ioservice/cob_foms.c        | 27 +++++++++++++-
 ioservice/io_foms.c         | 47 ++++++++++++------------
 ioservice/io_fops.c         | 88 ++++++++++++++++++++++-----------------------
 ioservice/io_service.c      |  2 ++
 ioservice/io_service_addb.h | 29 +++++++++++++++
 sm/sm.c                     | 31 +++++++++++-----
 sm/sm.h                     |  5 ++-
 12 files changed, 166 insertions(+), 109 deletions(-)

diff --git a/fop/fom.c b/fop/fom.c
index d62653a..979e312 100644
--- a/fop/fom.c
+++ b/fop/fom.c
@@ -1447,7 +1447,6 @@ M0_INTERNAL void m0_fom_sm_init(struct m0_fom *fom)
 	struct m0_sm_group             *fom_group;
 	struct m0_addb_ctx             *fom_addb_ctx = NULL;
 	const struct m0_sm_conf        *conf;
-	bool                            phase_stats_enabled;
 
 	M0_PRE(fom != NULL);
 	M0_PRE(fom->fo_loc != NULL);
@@ -1464,9 +1463,6 @@ M0_INTERNAL void m0_fom_sm_init(struct m0_fom *fom)
 	if (fom->fo_service != NULL && fom->fo_service->rs_reqh != NULL)
 		fom_addb_ctx = &fom->fo_service->rs_reqh->rh_addb_ctx;
 
-	/* Preserve these across the call to m0_sm_init(). */
-	phase_stats_enabled = fom->fo_sm_phase.sm_state_epoch != 0;
-
 	m0_sm_init(&fom->fo_sm_phase, conf, M0_FOM_PHASE_INIT, fom_group);
 	m0_sm_init(&fom->fo_sm_state, &fom_states_conf, M0_FOS_INIT, fom_group);
 
@@ -1477,14 +1473,6 @@ M0_INTERNAL void m0_fom_sm_init(struct m0_fom *fom)
 					sizeof(fom->fo_fos_stats_data));
 		m0_sm_stats_enable(&fom->fo_sm_state,
 				   &fom->fo_sm_state_stats);
-		if (phase_stats_enabled) {
-			m0_addb_sm_counter_init(&fom->fo_sm_phase_stats,
-						&m0_addb_rt_fom_phase_stats,
-						fom->fo_phase_stats_data,
-						fom->fo_phase_stats_data_size);
-			m0_sm_stats_enable(&fom->fo_sm_phase,
-					   &fom->fo_sm_phase_stats);
-		}
 	}
 }
 
diff --git a/fop/fom_generic.c b/fop/fom_generic.c
index 80ecc91..4f8e476 100644
--- a/fop/fom_generic.c
+++ b/fop/fom_generic.c
@@ -718,13 +718,11 @@ static struct m0_sm_trans_descr generic_phases_trans[] = {
 	{"fom_txn_commit_wait", M0_FOPH_TXN_COMMIT_WAIT, M0_FOPH_FINISH},
 	{"fom_timeout", M0_FOPH_TIMEOUT, M0_FOPH_FAILURE},
 	{"fom_failure", M0_FOPH_FAILURE, M0_FOPH_TXN_COMMIT},
-	{"SM finish", M0_FOPH_FINISH, 0}, /* @todo need to check for this. */
-	{"Specific phase", M0_FOPH_TYPE_SPECIFIC, M0_FOPH_SUCCESS},
-	{"Specific phase", M0_FOPH_TYPE_SPECIFIC, M0_FOPH_FAILURE},
-	{"Specific phase", M0_FOPH_TYPE_SPECIFIC, M0_FOPH_FINISH},
+	/*{"SM finish", M0_FOPH_FINISH, 0},*/
 };
 
 struct m0_sm_conf m0_generic_conf = {
+	.scf_magic     = M0_SM_CONF_MAGIC,
 	.scf_name      = "FOM standard phases",
 	.scf_nr_states = ARRAY_SIZE(generic_phases),
 	.scf_state     = generic_phases,
diff --git a/fop/fom_generic.h b/fop/fom_generic.h
index a58a430..1bc4a59 100644
--- a/fop/fom_generic.h
+++ b/fop/fom_generic.h
@@ -36,9 +36,24 @@ struct m0_rpc_item;
  */
 
 enum {
-	M0_FOM_GENERIC_PHASES_TRANS_NR = 42,
+	M0_FOM_GENERIC_PHASES_TRANS_NR = 44,
 };
 
+/** @todo Need to remove duplication */
+#undef M0_FOM_PHASE_STATS_HIST_ARGS
+
+#ifdef M0_FOM_PHASE_STATS_HIST_ARGS
+#define M0_FOM_PHASE_STATS_HIST_ARGS2 0, M0_FOM_PHASE_STATS_HIST_ARGS
+#else
+#define M0_FOM_PHASE_STATS_HIST_ARGS2
+#endif
+
+#define FOM_PHASE_STATS_DATA_SZ(NR)				      \
+	((sizeof(struct m0_addb_counter_data) +                       \
+         ((M0_COUNT_PARAMS(M0_FOM_PHASE_STATS_HIST_ARGS2) > 0 ?       \
+           M0_COUNT_PARAMS(M0_FOM_PHASE_STATS_HIST_ARGS2) + 1 : 0) *  \
+           sizeof(uint64_t))) * NR)
+
 /**
  * "Phases" through which fom execution typically passes.
  *
diff --git a/fop/fop.c b/fop/fop.c
index 95d702d..f241b2f 100644
--- a/fop/fop.c
+++ b/fop/fop.c
@@ -254,7 +254,6 @@ M0_INTERNAL int m0_fops_init(void)
 	m0_addb_rec_type_register(&m0_addb_rt_fom_init);
 	m0_addb_rec_type_register(&m0_addb_rt_fom_fini);
 	m0_addb_rec_type_register(&m0_addb_rt_fom_state_stats);
-	m0_addb_rec_type_register(&m0_addb_rt_fom_phase_stats);
 	m0_addb_rec_type_register(&m0_addb_rt_fl_run_times);
 	m0_addb_rec_type_register(&m0_addb_rt_fl_sched_wait_times);
 	m0_addb_rec_type_register(&m0_addb_rt_fl_runq_nr);
diff --git a/fop/fop_addb.h b/fop/fop_addb.h
index 2789bb2..c0028ce 100644
--- a/fop/fop_addb.h
+++ b/fop/fop_addb.h
@@ -95,7 +95,6 @@ enum {
 	M0_ADDB_RECID_FL_WAIL_NR          = 68,
 	M0_ADDB_RECID_FOP_RATE_CNTR       = 69,
 	M0_ADDB_RECID_FOP_RATE            = 70,
-	M0_ADDB_RECID_FOM_PHASE_STATS     = 71,
 };
 
 /**
@@ -128,15 +127,6 @@ M0_ADDB_RT_SM_CNTR(m0_addb_rt_fom_state_stats, M0_ADDB_RECID_FOM_STATE_STATS,
 		   &fom_states_conf);
 #endif
 
-#ifdef FOM_PHASE_STATS_HIST_ARGS
-/** FOM state statistics counter */
-M0_ADDB_RT_SM_CNTR(m0_addb_rt_fom_phase_stats, M0_ADDB_RECID_FOM_PHASE_STATS,
-		   &fom_states_conf, FOM_PHASE_STATS_HIST_ARGS);
-#else
-M0_ADDB_RT_SM_CNTR(m0_addb_rt_fom_phase_stats, M0_ADDB_RECID_FOM_PHASE_STATS,
-		   &fom_states_conf);
-#endif
-
 /**
  * Accumulated run time of all locality foms (in "binary" usec).
  * "Binary usec" == (nsec >> 10).
diff --git a/ioservice/cob_foms.c b/ioservice/cob_foms.c
index 41d7de6..776c83f 100644
--- a/ioservice/cob_foms.c
+++ b/ioservice/cob_foms.c
@@ -82,10 +82,22 @@ struct m0_sm_state_descr cob_ops_phases[] = {
 	}
 };
 
+static struct m0_sm_trans_descr cob_fom_phase_trans[] = {
+	{"COB Create/Delete Prepare", M0_FOPH_COB_OPS_PREPARE,
+				      M0_FOPH_COB_OPS_CREATE_DELETE},
+	{"COB Create/Delete Prepare", M0_FOPH_COB_OPS_PREPARE,
+				      M0_FOPH_FAILURE},
+	{"COB Create/Delete", M0_FOPH_COB_OPS_CREATE_DELETE, M0_FOPH_SUCCESS},
+	{"COB Create/Delete", M0_FOPH_COB_OPS_CREATE_DELETE, M0_FOPH_FAILURE},
+};
+
 struct m0_sm_conf cob_ops_conf = {
+	.scf_magic     = M0_SM_CONF_MAGIC,
 	.scf_name      = "COB create/delete phases",
 	.scf_nr_states = ARRAY_SIZE(cob_ops_phases),
-	.scf_state     = cob_ops_phases
+	.scf_state     = cob_ops_phases,
+	.scf_trans     = cob_fom_phase_trans,
+	.scf_trans_nr  = ARRAY_SIZE(cob_fom_phase_trans),
 };
 
 /** Cob create fom ops. */
@@ -609,6 +621,7 @@ static void cd_fom_fini(struct m0_fom *fom)
 static void cd_fom_addb_init(struct m0_fom *fom, struct m0_addb_mc *mc)
 {
 	struct m0_fom_cob_op *cfom;
+	bool                  phase_stats_enabled;
 
 	cfom = cob_fom_get(fom);
 
@@ -616,6 +629,18 @@ static void cd_fom_addb_init(struct m0_fom *fom, struct m0_addb_mc *mc)
 			 &fom->fo_service->rs_addb_ctx,
 			 cfom->fco_gfid.f_container, cfom->fco_gfid.f_key,
 			 cfom->fco_cfid.f_container, cfom->fco_gfid.f_key);
+
+        phase_stats_enabled = fom->fo_sm_phase.sm_state_epoch != 0;
+
+	if (phase_stats_enabled) {
+		m0_addb_sm_counter_init(&fom->fo_sm_phase_stats,
+					&m0_addb_rt_ios_cob_fom_phase_stats,
+					fom->fo_phase_stats_data,
+					fom->fo_phase_stats_data_size);
+		m0_sm_stats_enable(&fom->fo_sm_phase,
+				   &fom->fo_sm_phase_stats);
+	}
+
 }
 
 static int cd_cob_delete(struct m0_fom *fom, struct m0_fom_cob_op *cd)
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index f5155bb..2038e04 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -607,28 +607,6 @@ static int net_buffer_release(struct m0_fom *);
 
 static inline struct m0_addb_mc *fom_to_addb_mc(const struct m0_fom *fom);
 
-/** @todo Need to remove duplication */
-#undef M0_FOM_PHASE_STATS_HIST_ARGS
-
-#ifdef M0_FOM_PHASE_STATS_HIST_ARGS
-#define M0_FOM_PHASE_STATS_HIST_ARGS2 0, M0_FOM_PHASE_STATS_HIST_ARGS
-#else
-#define M0_FOM_PHASE_STATS_HIST_ARGS2
-#endif
-
-enum {
-	IO_FOM_SPECIFIC_PHASE_TRANS_NR = 22,
-	IO_FOM_PHASE_TRANS_NR          =
-	M0_FOM_GENERIC_PHASES_TRANS_NR + IO_FOM_SPECIFIC_PHASE_TRANS_NR,
-        FOM_PHASE_STATS_DATA_SZ        =
-                (sizeof(struct m0_addb_counter_data) +
-                  ((M0_COUNT_PARAMS(M0_FOM_PHASE_STATS_HIST_ARGS2) > 0 ?
-                    M0_COUNT_PARAMS(M0_FOM_PHASE_STATS_HIST_ARGS2) + 1 : 0) *
-                   sizeof(uint64_t))) *
-                IO_FOM_PHASE_TRANS_NR
-};
-
-
 /**
  * I/O FOM operation vector.
  */
@@ -773,7 +751,7 @@ struct m0_sm_state_descr io_phases[] = {
 	},
 };
 
-struct m0_sm_trans_descr io_phases_trans[IO_FOM_PHASE_TRANS_NR] = {
+struct m0_sm_trans_descr io_phases_trans[] = {
 	{"IO Prepare", M0_FOPH_IO_FOM_PREPARE, M0_FOPH_IO_FOM_BUFFER_ACQUIRE},
 	{"IO Prepare", M0_FOPH_IO_FOM_PREPARE, M0_FOPH_FAILURE},
 	{"Network buffer acquire", M0_FOPH_IO_FOM_BUFFER_ACQUIRE,
@@ -814,6 +792,7 @@ struct m0_sm_trans_descr io_phases_trans[IO_FOM_PHASE_TRANS_NR] = {
 };
 
 struct m0_sm_conf io_conf = {
+	.scf_magic     = M0_SM_CONF_MAGIC,
 	.scf_name      = "IO phases",
 	.scf_nr_states = ARRAY_SIZE(io_phases),
 	.scf_state     = io_phases,
@@ -2102,7 +2081,12 @@ static size_t m0_io_fom_cob_rw_locality_get(const struct m0_fom *fom)
 static void m0_io_fom_cob_rw_addb_init(struct m0_fom *fom,
 				       struct m0_addb_mc *mc)
 {
+#undef FOM_PHASE_TRANS_NR
+#define FOM_PHASE_TRANS_NR(fom)			\
+	(FOM_PHASE_STATS_DATA_SZ((fom)->fo_type->ft_conf->scf_trans_nr))
+
         struct m0_fop_cob_rw *rwfop;
+	bool                  phase_stats_enabled;
 
 	rwfop = io_rw_get(fom->fo_fop);
 	M0_ADDB_CTX_INIT(mc, &fom->fo_addb_ctx, &m0_addb_ct_cob_io_rw_fom,
@@ -2111,10 +2095,23 @@ static void m0_io_fom_cob_rw_addb_init(struct m0_fom *fom,
 			 rwfop->crw_desc.id_nr, rwfop->crw_flags);
 	m0_fom_op_addb_ctx_import(fom, &rwfop->crw_addb_ctx_id);
 
-	IOS_ALLOC_ARR(fom->fo_phase_stats_data, FOM_PHASE_STATS_DATA_SZ,
+	IOS_ALLOC_ARR(fom->fo_phase_stats_data, FOM_PHASE_TRANS_NR(fom),
 		      &m0_ios_addb_ctx, FOM_COB_RW_ADDB_INIT);
 	if (fom->fo_phase_stats_data != NULL)
-		fom->fo_phase_stats_data_size = FOM_PHASE_STATS_DATA_SZ * 8;
+		fom->fo_phase_stats_data_size = FOM_PHASE_TRANS_NR(fom) * 8;
+
+        phase_stats_enabled = fom->fo_sm_phase.sm_state_epoch != 0;
+
+	if (phase_stats_enabled) {
+		m0_addb_sm_counter_init(&fom->fo_sm_phase_stats,
+					&m0_addb_rt_ios_io_fom_phase_stats,
+					fom->fo_phase_stats_data,
+					fom->fo_phase_stats_data_size);
+		m0_sm_stats_enable(&fom->fo_sm_phase,
+				   &fom->fo_sm_phase_stats);
+	}
+
+#undef FOM_PHASE_TRANS_NR
 }
 
 /**
diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index fa65b30..9c9bc6b 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -204,7 +204,6 @@ extern struct m0_sm_conf io_conf;
 extern struct m0_sm_state_descr io_phases[];
 extern struct m0_sm_conf cob_ops_conf;
 extern struct m0_sm_state_descr cob_ops_phases[];
-extern struct m0_sm_trans_descr io_phases_trans[];
 
 M0_INTERNAL int m0_ioservice_fop_init(void)
 {
@@ -226,9 +225,11 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 			  m0_generic_conf.scf_nr_states);
 	m0_sm_conf_extend(m0_generic_conf.scf_state, cob_ops_phases,
 			  m0_generic_conf.scf_nr_states);
-	m0_sm_conf_init(&io_conf);
-	m0_sm_conf_trans_extend(m0_generic_conf.scf_trans, io_phases_trans,
-			        io_conf.scf_trans_nr);
+	/** @todo ignore error ??? */
+	m0_sm_conf_trans_extend(&io_conf, &m0_generic_conf);
+	m0_sm_conf_trans_extend(p_cob_ops_conf, &m0_generic_conf);
+//	m0_sm_conf_init(&io_conf);
+//	m0_sm_conf_init(p_cob_ops_conf);
 #endif
 	M0_FOP_TYPE_INIT(&m0_fop_cob_readv_fopt,
 			 .name      = "Read request",
@@ -254,50 +255,49 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 			 .sm        = &io_conf,
 			 .svc_type  = &m0_ios_type,
 #endif
-			 .rpc_ops   = &io_item_type_ops);
-	M0_FOP_TYPE_INIT(&m0_fop_cob_readv_rep_fopt,
-			 .name      = "Read reply",
-			 .opcode    = M0_IOSERVICE_READV_REP_OPCODE,
-			 .xt        = m0_fop_cob_readv_rep_xc,
-			 .rpc_flags = M0_RPC_ITEM_TYPE_REPLY);
-	M0_FOP_TYPE_INIT(&m0_fop_cob_writev_rep_fopt,
-			 .name      = "Write reply",
-			 .opcode    = M0_IOSERVICE_WRITEV_REP_OPCODE,
-			 .xt        = m0_fop_cob_writev_rep_xc,
-			 .rpc_flags = M0_RPC_ITEM_TYPE_REPLY);
-	M0_FOP_TYPE_INIT(&m0_fop_cob_create_fopt,
-			 .name      = "Cob create request",
-			 .opcode    = M0_IOSERVICE_COB_CREATE_OPCODE,
-			 .xt        = m0_fop_cob_create_xc,
-			 .rpc_flags = M0_RPC_ITEM_TYPE_REQUEST,
-			 .fop_ops   = &io_fop_cd_ops,
+				 .rpc_ops   = &io_item_type_ops) ?:
+		M0_FOP_TYPE_INIT(&m0_fop_cob_readv_rep_fopt,
+				 .name      = "Read reply",
+				 .opcode    = M0_IOSERVICE_READV_REP_OPCODE,
+				 .xt        = m0_fop_cob_readv_rep_xc,
+				 .rpc_flags = M0_RPC_ITEM_TYPE_REPLY) ?:
+		M0_FOP_TYPE_INIT(&m0_fop_cob_writev_rep_fopt,
+				 .name      = "Write reply",
+				 .opcode    = M0_IOSERVICE_WRITEV_REP_OPCODE,
+				 .xt        = m0_fop_cob_writev_rep_xc,
+				 .rpc_flags = M0_RPC_ITEM_TYPE_REPLY) ?:
+		M0_FOP_TYPE_INIT(&m0_fop_cob_create_fopt,
+				 .name      = "Cob create request",
+				 .opcode    = M0_IOSERVICE_COB_CREATE_OPCODE,
+				 .xt        = m0_fop_cob_create_xc,
+				 .rpc_flags = M0_RPC_ITEM_TYPE_REQUEST,
 #ifndef __KERNEL__
-			 .fom_ops   = &cob_fom_type_ops,
-			 .svc_type  = &m0_ios_type,
+				 .fom_ops   = &cob_fom_type_ops,
+				 .svc_type  = &m0_ios_type,
+				 .sm        = p_cob_ops_conf,
 #endif
-			 .sm        = p_cob_ops_conf);
-	M0_FOP_TYPE_INIT(&m0_fop_cob_delete_fopt,
-			 .name      = "Cob delete request",
-			 .opcode    = M0_IOSERVICE_COB_DELETE_OPCODE,
-			 .xt        = m0_fop_cob_delete_xc,
-			 .rpc_flags = M0_RPC_ITEM_TYPE_REQUEST,
-			 .fop_ops   = &io_fop_cd_ops,
+				 .fop_ops   = &io_fop_cd_ops) ?:
+		M0_FOP_TYPE_INIT(&m0_fop_cob_delete_fopt,
+				 .name      = "Cob delete request",
+				 .opcode    = M0_IOSERVICE_COB_DELETE_OPCODE,
+				 .xt        = m0_fop_cob_delete_xc,
+				 .rpc_flags = M0_RPC_ITEM_TYPE_REQUEST,
 #ifndef __KERNEL__
-			 .fom_ops   = &cob_fom_type_ops,
-			 .svc_type  = &m0_ios_type,
+				 .fom_ops   = &cob_fom_type_ops,
+				 .svc_type  = &m0_ios_type,
+				 .sm        = p_cob_ops_conf,
 #endif
-			 .sm        = p_cob_ops_conf);
-	M0_FOP_TYPE_INIT(&m0_fop_cob_op_reply_fopt,
-			 .name      = "Cob create or delete reply",
-			 .opcode    =  M0_IOSERVICE_COB_OP_REPLY_OPCODE,
-			 .xt        = m0_fop_cob_op_reply_xc,
-			 .rpc_flags = M0_RPC_ITEM_TYPE_REPLY);
-	M0_FOP_TYPE_INIT(&m0_fop_fv_notification_fopt,
-			 .name   = "Failure vector update notification",
-			 .opcode = M0_IOSERVICE_FV_NOTIFICATION_OPCODE,
-			 .xt        = m0_fop_fv_notification_xc,
-			 .rpc_flags = M0_RPC_ITEM_TYPE_ONEWAY);
-	return 0;
+				 .fop_ops   = &io_fop_cd_ops) ?:
+		M0_FOP_TYPE_INIT(&m0_fop_cob_op_reply_fopt,
+				 .name      = "Cob create or delete reply",
+				 .opcode    =  M0_IOSERVICE_COB_OP_REPLY_OPCODE,
+				 .xt        = m0_fop_cob_op_reply_xc,
+				 .rpc_flags = M0_RPC_ITEM_TYPE_REPLY) ?:
+		M0_FOP_TYPE_INIT(&m0_fop_fv_notification_fopt,
+				 .name   = "Failure vector update notification",
+				 .opcode = M0_IOSERVICE_FV_NOTIFICATION_OPCODE,
+				 .xt        = m0_fop_fv_notification_xc,
+				 .rpc_flags = M0_RPC_ITEM_TYPE_ONEWAY);
 }
 
 /**
diff --git a/ioservice/io_service.c b/ioservice/io_service.c
index 68e3e1b..eff03b6 100644
--- a/ioservice/io_service.c
+++ b/ioservice/io_service.c
@@ -199,6 +199,8 @@ M0_INTERNAL int m0_ios_register(void)
 	RT_REG(io_finish);
 	RT_REG(desc_io_finish);
 	RT_REG(buffer_pool_low);
+	RT_REG(io_fom_phase_stats);
+	RT_REG(cob_fom_phase_stats);
 #undef RT_REG
 
 	m0_addb_ctx_type_register(&m0_addb_ct_cob_create_fom);
diff --git a/ioservice/io_service_addb.h b/ioservice/io_service_addb.h
index 2fc410d..47af0dd 100644
--- a/ioservice/io_service_addb.h
+++ b/ioservice/io_service_addb.h
@@ -24,6 +24,7 @@
 #define __MERO_IOSERVICE_IO_SERVICE_ADDB_H__
 
 #include "addb/addb.h"
+#include "fop/fom.h"   /* FOM_STATE_STATS_HIST_ARGS */
 
 /**
    @addtogroup io_foms
@@ -78,6 +79,10 @@ enum {
 	M0_ADDB_RECID_IOS_DESC_IO_FINISH,
 	/** Data point record to convey buffer pool low condition */
 	M0_ADDB_RECID_IOS_BUFFER_POOL_LOW,
+	/** IO fom phases statistic counters */
+	M0_ADDB_RECID_IOS_IO_FOM_PHASE_STATS,
+	/** COB fom phases statistic couters */
+	M0_ADDB_RECID_IOS_COB_FOM_PHASE_STATS,
 };
 
 /** @todo adjust IOS counter histogram buckets */
@@ -196,6 +201,30 @@ enum {
 };
 
 extern struct m0_addb_ctx m0_ios_addb_ctx;
+extern struct m0_sm_conf cob_ops_conf;
+extern struct m0_sm_conf io_conf;
+
+#ifdef FOM_PHASE_STATS_HIST_ARGS
+/** FOM state statistics counter */
+M0_ADDB_RT_SM_CNTR(m0_addb_rt_ios_io_fom_phase_stats,
+		   M0_ADDB_RECID_IOS_IO_FOM_PHASE_STATS,
+		   &io_conf, FOM_PHASE_STATS_HIST_ARGS);
+#else
+M0_ADDB_RT_SM_CNTR(m0_addb_rt_ios_io_fom_phase_stats,
+		   M0_ADDB_RECID_IOS_IO_FOM_PHASE_STATS,
+		   &io_conf);
+#endif
+
+#ifdef FOM_PHASE_STATS_HIST_ARGS
+/** FOM state statistics counter */
+M0_ADDB_RT_SM_CNTR(m0_addb_rt_ios_cob_fom_phase_stats,
+		   M0_ADDB_RECID_IOS_COB_FOM_PHASE_STATS,
+		   &io_conf, FOM_PHASE_STATS_HIST_ARGS);
+#else
+M0_ADDB_RT_SM_CNTR(m0_addb_rt_ios_cob_fom_phase_stats,
+		   M0_ADDB_RECID_IOS_COB_FOM_PHASE_STATS,
+		   &io_conf);
+#endif
 
 /* Total time required and size for IO */
 M0_ADDB_RT_DP(m0_addb_rt_ios_io_finish, M0_ADDB_RECID_IOS_IO_FINISH,
diff --git a/sm/sm.c b/sm/sm.c
index 4cc5101..b7d40f6 100644
--- a/sm/sm.c
+++ b/sm/sm.c
@@ -639,16 +639,31 @@ M0_INTERNAL bool m0_sm_timeout_is_armed(const struct m0_sm_timeout *to)
 	return m0_sm_timer_is_armed(&to->st_timer);
 }
 
-M0_INTERNAL void m0_sm_conf_trans_extend(const struct m0_sm_trans_descr *base,
-				         struct m0_sm_trans_descr       *sub,
-					 uint32_t                        nr)
+M0_INTERNAL int m0_sm_conf_trans_extend(struct m0_sm_conf       *base,
+				        const struct m0_sm_conf *sub)
 {
-	uint32_t i;
+	struct m0_sm_trans_descr *trans_descr;
+	uint32_t                  trans_nr;
+	uint32_t                  i;
+	uint32_t                  j;
 
-	for (i = 0; i < nr; ++i) {
-		if (sub[i].td_cause == NULL && base[i].td_cause != NULL)
-			sub[i] = base[i];
-	}
+	M0_PRE(base != NULL && sub != NULL);
+
+	trans_nr = base->scf_trans_nr + sub->scf_trans_nr;
+	M0_ALLOC_ARR(trans_descr, trans_nr);
+	if (trans_descr == NULL)
+		M0_RETURN(-ENOMEM);
+
+	for (i = 0; i < base->scf_trans_nr; ++i)
+		trans_descr[i] = base->scf_trans[i];
+
+	for (j = 0; i < trans_nr && j < sub->scf_trans_nr; ++i, j++)
+		trans_descr[i] = sub->scf_trans[j];
+
+	base->scf_trans_nr = trans_nr;
+	base->scf_trans = trans_descr;
+
+	return 0;
 }
 
 M0_INTERNAL void m0_sm_conf_extend(const struct m0_sm_state_descr *base,
diff --git a/sm/sm.h b/sm/sm.h
index 3bfcd70..dd27737 100644
--- a/sm/sm.h
+++ b/sm/sm.h
@@ -729,9 +729,8 @@ enum m0_sm_return {
 /**
  * "Extends" base transition descriptions with the given sub descriptions.
  */
-M0_INTERNAL void m0_sm_conf_trans_extend(const struct m0_sm_trans_descr *base,
-				         struct m0_sm_trans_descr       *sub,
-					 uint32_t                        nr);
+M0_INTERNAL int m0_sm_conf_trans_extend(struct m0_sm_conf       *base,
+			                const struct m0_sm_conf *sub);
 /**
  * "Extends" base state descriptions with the given sub descriptions.
  *
-- 
1.8.3.2


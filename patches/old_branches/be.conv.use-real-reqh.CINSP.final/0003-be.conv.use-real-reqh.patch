From c1b2dcc97a21e9c9be44dc3c7513b36ceff6ab13 Mon Sep 17 00:00:00 2001
From: Mandar Sawant <mandar_sawant@xyratex.com>
Date: Wed, 5 Feb 2014 16:40:32 +0530
Subject: [PATCH 3/9] be.conv.use-real-reqh - Add
 m0_ut_be_fom_domain_idle_wait() in-order to handle be/tx_group_fom. - Invoke
 m0_ut_be_fom_domain_idle_wait() in respective ut's.

---
 be/tx_group_fom.c          |  3 ++-
 be/ut/helper.c             |  4 ++--
 cm/ut/cm.c                 |  4 ++--
 cm/ut/common_service.c     | 14 --------------
 cm/ut/common_service.h     |  2 --
 cm/ut/cp.c                 |  6 +++---
 sns/cm/repair/ut/net.c     |  3 ++-
 sns/cm/repair/ut/storage.c |  5 +++--
 sns/cm/repair/ut/xform.c   |  7 ++++---
 ut/be.c                    |  7 +++----
 10 files changed, 21 insertions(+), 34 deletions(-)

diff --git a/be/tx_group_fom.c b/be/tx_group_fom.c
index 5676b13..5feed11 100644
--- a/be/tx_group_fom.c
+++ b/be/tx_group_fom.c
@@ -484,7 +484,8 @@ static void be_tx_group_fom_stop(struct m0_sm_group *gr, struct m0_sm_ast *ast)
 		container_of(ast, struct m0_be_tx_group_fom, tgf_ast_stop);
 
 	m->tgf_stopping = true;
-	if (m0_fom_is_waiting(&m->tgf_gen))
+	if (!M0_IN(m0_fom_phase(&gf->tgf_gen), (TGS_FINISH, TGS_STOPPING)))
+	//if (m0_fom_is_waiting(&m->tgf_gen))
 		m0_fom_wakeup(&m->tgf_gen);
 }
 
diff --git a/be/ut/helper.c b/be/ut/helper.c
index 353398a..1eeca30 100644
--- a/be/ut/helper.c
+++ b/be/ut/helper.c
@@ -239,8 +239,8 @@ void m0_be_ut_backend_cfg_default(struct m0_be_domain_cfg *cfg)
 		.bc_engine = {
 			.bec_group_nr	    = 1,
 			.bec_log_size	    = 1 << 27,
-			.bec_tx_size_max    = M0_BE_TX_CREDIT(1 << 18, 1 << 24),//(1 << 21, 1 << 26),//(1 << 18, 1 << 24),
-			.bec_group_size_max = M0_BE_TX_CREDIT(1 << 18, 1 << 24),//(1 << 22, 1 << 27),//(1 << 18, 1 << 24),
+			.bec_tx_size_max    = M0_BE_TX_CREDIT(1 << 18, 1 << 24),
+			.bec_group_size_max = M0_BE_TX_CREDIT(1 << 18, 1 << 24),
 			.bec_group_tx_max   = 20,
 			.bec_log_replay	    = false,
 			.bec_group_close_timeout = M0_TIME_ONE_MSEC,
diff --git a/cm/ut/cm.c b/cm/ut/cm.c
index 43b0343..1185294 100644
--- a/cm/ut/cm.c
+++ b/cm/ut/cm.c
@@ -23,6 +23,7 @@
 #include "lib/finject.h"
 #include "lib/memory.h"
 #include "ut/ut.h"
+#include "ut/be.h"
 #include "lib/misc.h"
 #include "lib/thread.h"
 
@@ -112,8 +113,7 @@ static void cm_setup_ut(void)
 	M0_UT_ASSERT(rc == 0);
 	//m0_reqh_shutdown_wait(&cmut_rmach_ctx.rmc_reqh);
 	m0_reqh_shutdown(&cmut_rmach_ctx.rmc_reqh);
-	cm_cp_ut_fom_domain_idle_wait(&cmut_rmach_ctx.rmc_reqh);
-
+	m0_ut_be_fom_domain_idle_wait(&cmut_rmach_ctx.rmc_reqh);
 	reqh = cm_ut_service->rs_reqh;
 	pm = m0_ios_poolmach_get(reqh);
 	grp  = m0_locality0_get()->lo_grp;
diff --git a/cm/ut/common_service.c b/cm/ut/common_service.c
index f768d45..7f4d358 100644
--- a/cm/ut/common_service.c
+++ b/cm/ut/common_service.c
@@ -272,20 +272,6 @@ int cm_ut_server_start(struct m0_mero *m0ctx, struct m0_net_xprt **xprts,
 	return rc;
 }
 
-void cm_cp_ut_fom_domain_idle_wait(struct m0_reqh *reqh)
-{
-        struct m0_clink clink;
-
-        M0_PRE(reqh != NULL);
-        m0_clink_init(&clink, NULL);
-        m0_clink_add_lock(&reqh->rh_sd_signal, &clink);
-
-        while (reqh->rh_fom_dom.fd_localities[0].fl_foms > 1)
-                m0_chan_timedwait(&clink, m0_time_from_now(2, 0));
-        m0_clink_del_lock(&clink);
-        m0_clink_fini(&clink);
-}
-
 M0_ADDB_CT(m0_addb_ct_ut_service, M0_ADDB_CTXID_UT_SERVICE, "hi", "low");
 /*
  *  Local variables:
diff --git a/cm/ut/common_service.h b/cm/ut/common_service.h
index e429cb5..5c5ec48 100644
--- a/cm/ut/common_service.h
+++ b/cm/ut/common_service.h
@@ -80,8 +80,6 @@ void cm_ut_server_stop(struct m0_mero *mero_ctx);
 void cm_ut_service_alloc_init();
 void cm_ut_service_cleanup();
 
-void cm_cp_ut_fom_domain_idle_wait(struct m0_reqh *reqh);
-
 #endif /** __MERO_CM_UT_COMMON_SERVICE_H__ */
 /*
  *  Local variables:
diff --git a/cm/ut/cp.c b/cm/ut/cp.c
index bddde1a..6d0d8f8 100644
--- a/cm/ut/cp.c
+++ b/cm/ut/cp.c
@@ -19,6 +19,7 @@
  */
 
 #include "ut/ut.h"
+#include "ut/be.h"
 #include "lib/memory.h"
 #include "lib/misc.h"
 #include "reqh/reqh.h"
@@ -238,8 +239,7 @@ static void test_cp_single_thread(void)
          * processed.
          */
         //m0_reqh_fom_domain_idle_wait(&cmut_rmach_ctx.rmc_reqh);
-
-	cm_cp_ut_fom_domain_idle_wait(&cmut_rmach_ctx.rmc_reqh);
+	m0_ut_be_fom_domain_idle_wait(&cmut_rmach_ctx.rmc_reqh);
 	m0_semaphore_fini(&sem);
 }
 
@@ -277,7 +277,7 @@ static void test_cp_multi_thread(void)
          * processed.
          */
         //m0_reqh_fom_domain_idle_wait(&cmut_rmach_ctx.rmc_reqh);
-	cm_cp_ut_fom_domain_idle_wait(&cmut_rmach_ctx.rmc_reqh);
+	m0_ut_be_fom_domain_idle_wait(&cmut_rmach_ctx.rmc_reqh);
         m0_free(cp_thread);
 	m0_semaphore_fini(&sem);
 }
diff --git a/sns/cm/repair/ut/net.c b/sns/cm/repair/ut/net.c
index 6849ca4..1a51645 100644
--- a/sns/cm/repair/ut/net.c
+++ b/sns/cm/repair/ut/net.c
@@ -31,6 +31,7 @@
 #include "reqh/reqh_service.h"
 #include "cm/proxy.h"
 #include "ut/ut_rpc_machine.h"
+#include "ut/be.h"
 #include "cm/ut/common_service.h"
 #include <unistd.h>			/* usleep */
 
@@ -765,7 +766,7 @@ static void sender_fini()
         M0_UT_ASSERT(rc == 0);
         m0_net_domain_fini(&client_net_dom);
 	//m0_reqh_fom_domain_idle_wait(&rmach_ctx.rmc_reqh);
-	cm_cp_ut_fom_domain_idle_wait(&rmach_ctx.rmc_reqh);
+	m0_ut_be_fom_domain_idle_wait(&rmach_ctx.rmc_reqh);
 	reqh = sender_cm_service->rs_reqh;
 	pm = m0_ios_poolmach_get(reqh);
 	grp  = m0_locality0_get()->lo_grp;
diff --git a/sns/cm/repair/ut/storage.c b/sns/cm/repair/ut/storage.c
index 61f3350..12eba89 100644
--- a/sns/cm/repair/ut/storage.c
+++ b/sns/cm/repair/ut/storage.c
@@ -26,6 +26,7 @@
 #include "lib/trace.h"
 #include "lib/misc.h"
 #include "lib/locality.h"
+#include "ut/be.h"
 #include "reqh/reqh.h"
 #include "mero/setup.h"
 #include "net/net.h"
@@ -249,7 +250,7 @@ void write_post(void)
 	 * processed. This is required for further validity checks.
 	 */
 	//m0_reqh_fom_domain_idle_wait(reqh);
-	cm_cp_ut_fom_domain_idle_wait(reqh);
+	m0_ut_be_fom_domain_idle_wait(reqh);
 }
 
 const struct m0_cm_cp_ops read_cp_dummy_ops = {
@@ -299,7 +300,7 @@ static void read_post(void)
          * processed. This is required for further validity checks.
          */
 	//m0_reqh_fom_domain_idle_wait(reqh);
-	cm_cp_ut_fom_domain_idle_wait(reqh);
+	m0_ut_be_fom_domain_idle_wait(reqh);
 }
 
 static void test_cp_write_read(void)
diff --git a/sns/cm/repair/ut/xform.c b/sns/cm/repair/ut/xform.c
index 4f896f6..c491288 100644
--- a/sns/cm/repair/ut/xform.c
+++ b/sns/cm/repair/ut/xform.c
@@ -19,6 +19,7 @@
  */
 
 #include "lib/locality.h"
+#include "ut/be.h"
 #include "ioservice/io_service.h"
 #include "ioservice/io_device.h"
 #include "mero/setup.h"
@@ -340,7 +341,7 @@ static void test_single_cp(void)
 	 * processed. This is required for further validity checks.
 	 */
 	//m0_reqh_fom_domain_idle_wait(reqh);
-	cm_cp_ut_fom_domain_idle_wait(reqh);
+	m0_ut_be_fom_domain_idle_wait(reqh);
 
 	/*
 	 * These asserts ensure that the single copy packet has been treated
@@ -387,7 +388,7 @@ static void test_multi_cp_single_failure(void)
 	 * processed. This is required for further validity checks.
 	 */
 	//m0_reqh_fom_domain_idle_wait(reqh);
-	cm_cp_ut_fom_domain_idle_wait(reqh);
+	m0_ut_be_fom_domain_idle_wait(reqh);
 
 	/*
 	 * These asserts ensure that all the copy packets have been collected
@@ -523,7 +524,7 @@ static void test_multi_cp_multi_failures(void)
          * processed. This is required for further validity checks.
          */
         //m0_reqh_fom_domain_idle_wait(reqh);
-	cm_cp_ut_fom_domain_idle_wait(reqh);
+	m0_ut_be_fom_domain_idle_wait(reqh);
 
 	/* Verify that first accumulator contains recovered data for D1. */
 	bv_populate(&src, 's', SEG_NR, SEG_SIZE);
diff --git a/ut/be.c b/ut/be.c
index 7a4deeb..e98462e 100644
--- a/ut/be.c
+++ b/ut/be.c
@@ -145,8 +145,7 @@ static bool fom_domain_is_idle(const struct m0_fom_domain *dom)
 	bool result = false;
 
 	for (i = 0; i < dom->fd_localities_nr; ++i) {
-		if ((i == 0 &&
-			dom->fd_localities[i].fl_foms == 1) ||
+		if ((i == 0 && dom->fd_localities[i].fl_foms == 1) ||
 			dom->fd_localities[i].fl_foms == 0)
 			result = true;
 		else
@@ -163,8 +162,8 @@ void m0_ut_be_fom_domain_idle_wait(struct m0_reqh *reqh)
 	M0_PRE(reqh != NULL);
 	m0_clink_init(&clink, NULL);
 	m0_clink_add_lock(&reqh->rh_sd_signal, &clink);
-	if (!fom_domain_is_idle(&reqh->rh_fom_dom))
-		m0_chan_timedwait(&clink, m0_time_from_now(2, 0));
+	while (!fom_domain_is_idle(&reqh->rh_fom_dom))
+		m0_chan_timedwait((&clink), m0_time_from_now(2, 0));
 	m0_clink_del_lock(&clink);
 	m0_clink_fini(&clink);
 }
-- 
1.8.3.2


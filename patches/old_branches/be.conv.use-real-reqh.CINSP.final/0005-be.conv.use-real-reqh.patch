From 6249f4dd6e04ace1a3f951a5c0ad48ae3cdfe91e Mon Sep 17 00:00:00 2001
From: Mandar Sawant <mandar_sawant@xyratex.com>
Date: Thu, 6 Feb 2014 14:54:08 +0530
Subject: [PATCH 5/9] be.conv.use-real-reqh, - Remove reqh_emu - Use
 m0_reqh_fom_domain_idle_wait() in dtm/ut/transmit.c for kernel. - misc fixes.

---
 be/tx_group_fom.c        | 213 -----------------------------------------------
 be/ut/helper.c           |  19 +----
 be/ut/helper.h           |   7 +-
 conf/ut/db.c             |  22 ++---
 dtm/ut/transmit.c        |  10 ++-
 ioservice/ut/bulkio_ut.c |   2 +
 ut/be.c                  |  40 +--------
 ut/be.h                  |   9 --
 8 files changed, 25 insertions(+), 297 deletions(-)

diff --git a/be/tx_group_fom.c b/be/tx_group_fom.c
index 0b4df82..5ba9314 100644
--- a/be/tx_group_fom.c
+++ b/be/tx_group_fom.c
@@ -39,209 +39,6 @@
  * @{
  */
 
-#define REQH_EMU 0
-
-#if REQH_EMU
-#if 0
-m0_fom_phase - ok
-m0_fom_phase_set - ok
-m0_be_op_tick_ret - problem
-tx_group_fom_fini == fo_fini == m0_fom_fini - problem
-m0_fom_wakeup - problem
-m0_reqh_state_get - problem - solved
-m0_fom_init - problem
-m0_fom_type_init - ok
-m0_fom_queue - problem
-#endif
-#define m0_reqh_state_get(reqh) M0_REQH_ST_NORMAL
-#define m0_fom_init reqh_emu_fom_init
-#define m0_fom_fini reqh_emu_fom_fini
-#define m0_fom_queue reqh_emu_fom_queue
-#define m0_fom_wakeup reqh_emu_fom_wakeup
-#define m0_be_op_tick_ret reqh_emu_op_tick_ret
-#endif
-
-#if REQH_EMU
-
-struct reqh_emu_fom {
-	struct m0_sm_group     *re_grp;
-	struct m0_semaphore	re_stop_sem;
-	struct m0_semaphore	re_fom_wakeup;
-	struct m0_thread	re_thread;
-	struct m0_fom	       *re_gen;
-	struct m0_fom_locality	re_fom_loc;
-	struct m0_clink		re_op_wait_clink;
-	struct m0_be_op	       *re_op_current;
-};
-
-static struct reqh_emu_fom *fom2reqh_emu_fom(struct m0_fom *m)
-{
-	return (struct reqh_emu_fom *)m->fo_fop;
-}
-
-static void reqh_emu_loc_handler_thread(struct reqh_emu_fom *re)
-{
-	struct m0_sm_group *grp = re->re_grp;
-	struct m0_fom	   *fom = re->re_gen;
-	int		    rc;
-
-	while (!m0_semaphore_trydown(&re->re_stop_sem)) {
-		m0_chan_wait(&grp->s_clink);
-		m0_sm_group_lock(grp);
-
-		M0_ASSERT(m0_fom_invariant(fom));
-
-		/* see fom_exec */
-		if (m0_semaphore_trydown(&re->re_fom_wakeup)) {
-			do {
-				M0_ASSERT(m0_fom_phase(fom)
-					  != M0_FOM_PHASE_FINISH);
-				rc = fom->fo_ops->fo_tick(fom);
-			} while (rc == M0_FSO_AGAIN);
-			M0_ASSERT(rc == M0_FSO_WAIT);
-			if (m0_fom_phase(fom) == M0_FOM_PHASE_FINISH) {
-				fom->fo_ops->fo_fini(fom);
-				m0_sm_group_unlock(grp);
-				break;
-			}
-		}
-
-		m0_sm_group_unlock(grp);
-	}
-}
-
-static struct m0_sm_conf tx_group_fom_conf;
-
-M0_INTERNAL void reqh_emu_fom_wakeup(struct m0_fom *fom)
-{
-	struct reqh_emu_fom *re = fom2reqh_emu_fom(fom);
-
-	m0_semaphore_up(&re->re_fom_wakeup);
-	m0_clink_signal(&re->re_grp->s_clink);
-}
-
-static bool reqh_emu_fom_wakeup_cb(struct m0_clink *clink)
-{
-	enum m0_be_op_state  state;
-	struct reqh_emu_fom *re;
-
-	re = container_of(clink, struct reqh_emu_fom, re_op_wait_clink);
-	state = m0_be_op_state(re->re_op_current);
-	if (M0_IN(state, (M0_BOS_SUCCESS, M0_BOS_FAILURE))) {
-		m0_clink_del(clink);
-		reqh_emu_fom_wakeup(re->re_gen);
-		re->re_op_current = NULL;
-	}
-	return true;
-}
-
-/* XXX copied from fop/fom.c to pass m0_fom_invariant() */
-M0_TL_DESCR_DEFINE(runq_emu, "runq fom", static, struct m0_fom, fo_linkage,
-		   fo_magic, M0_FOM_MAGIC, M0_FOM_RUNQ_MAGIC);
-M0_TL_DEFINE(runq_emu, static, struct m0_fom);
-M0_TL_DESCR_DEFINE(wail_emu, "wail fom", static, struct m0_fom, fo_linkage,
-		   fo_magic, M0_FOM_MAGIC, M0_FOM_WAIL_MAGIC);
-M0_TL_DEFINE(wail_emu, static, struct m0_fom);
-
-void reqh_emu_fom_init(struct m0_fom *fom, struct m0_fom_type *fom_type,
-		 const struct m0_fom_ops *ops, struct m0_fop *fop,
-		 struct m0_fop *reply, struct m0_reqh *reqh,
-		 const struct m0_reqh_service_type *stype)
-{
-	struct reqh_emu_fom *re;
-
-	M0_ALLOC_PTR(re);
-	M0_ASSERT(re != NULL);
-
-	*fom = (struct m0_fom){
-		.fo_fop  = (void *)re,
-		.fo_ops  = ops,
-		.fo_loc  = &re->re_fom_loc,
-		.fo_type = fom_type,
-	};
-
-	re->re_gen = fom;
-	re->re_grp = &re->re_fom_loc.fl_group;
-	m0_clink_init(&re->re_op_wait_clink, &reqh_emu_fom_wakeup_cb);
-	m0_sm_group_init(re->re_grp);
-	m0_semaphore_init(&re->re_stop_sem, 0);
-	m0_semaphore_init(&re->re_fom_wakeup, 0);
-	m0_sm_init(&fom->fo_sm_phase, &tx_group_fom_conf,
-		   M0_FOM_PHASE_INIT, re->re_grp);
-	fom->fo_sm_state.sm_grp = re->re_grp;
-	fom->fo_sm_state.sm_state = M0_FOS_WAITING;
-	fom->fo_cb.fc_state = M0_FCS_DONE;
-	runq_emu_tlink_init(fom);
-	runq_emu_tlist_init(&fom->fo_loc->fl_runq);
-	wail_emu_tlist_init(&fom->fo_loc->fl_wail);
-	wail_emu_tlist_add_tail(&fom->fo_loc->fl_wail, fom);
-}
-
-void reqh_emu_fom_fini(struct m0_fom *fom)
-{
-	struct reqh_emu_fom *re = fom2reqh_emu_fom(fom);
-	int		     rc;
-
-	m0_semaphore_up(&re->re_stop_sem);
-	m0_clink_signal(&re->re_grp->s_clink);
-
-	rc = m0_thread_join(&re->re_thread);
-	M0_ASSERT(rc == 0);
-	m0_thread_fini(&re->re_thread);
-
-	wail_emu_tlist_del(fom);
-	wail_emu_tlist_fini(&fom->fo_loc->fl_wail);
-	runq_emu_tlist_fini(&fom->fo_loc->fl_runq);
-	runq_emu_tlink_fini(fom);
-
-	m0_sm_group_lock(re->re_grp);
-	m0_sm_fini(&fom->fo_sm_phase);
-	m0_sm_group_unlock(re->re_grp);
-
-	m0_semaphore_fini(&re->re_stop_sem);
-	m0_semaphore_fini(&re->re_fom_wakeup);
-	m0_sm_group_fini(re->re_grp);
-	m0_clink_fini(&re->re_op_wait_clink);
-
-	m0_free(re);
-}
-
-M0_INTERNAL void reqh_emu_fom_queue(struct m0_fom *fom, struct m0_reqh *reqh)
-{
-	struct reqh_emu_fom *re = fom2reqh_emu_fom(fom);
-	int		     rc;
-
-	rc = M0_THREAD_INIT(&re->re_thread, struct reqh_emu_fom *, NULL,
-			    &reqh_emu_loc_handler_thread, re,
-			    "%preqh_emu_fom", re);
-	M0_ASSERT(rc == 0);
-	reqh_emu_fom_wakeup(fom);
-}
-
-M0_INTERNAL int
-reqh_emu_op_tick_ret(struct m0_be_op *op, struct m0_fom *fom, int next_state)
-{
-	enum m0_fom_phase_outcome  ret = M0_FSO_AGAIN;
-	struct reqh_emu_fom	  *re = fom2reqh_emu_fom(fom);
-
-	m0_sm_group_lock(op->bo_sm.sm_grp);
-	M0_PRE(M0_IN(op->bo_sm.sm_state,
-		     (M0_BOS_ACTIVE, M0_BOS_SUCCESS, M0_BOS_FAILURE)));
-
-	if (M0_IN(op->bo_sm.sm_state, (M0_BOS_INIT, M0_BOS_ACTIVE))) {
-		ret = M0_FSO_WAIT;
-		M0_ASSERT(re->re_op_current == NULL);
-		re->re_op_current = op;
-		m0_mb();
-		m0_clink_add(&op->bo_sm.sm_chan, &re->re_op_wait_clink);
-	}
-	m0_sm_group_unlock(op->bo_sm.sm_grp);
-
-	m0_fom_phase_set(fom, next_state);
-	return ret;
-}
-#endif
-
 static struct m0_be_tx_group_fom *fom2tx_group_fom(const struct m0_fom *fom);
 static void tx_group_fom_fini(struct m0_fom *fom);
 static void be_op_reset(struct m0_be_op *op);
@@ -637,16 +434,6 @@ static void be_op_reset(struct m0_be_op *op)
 	m0_be_op_init(op);
 }
 
-#if REQH_EMU
-#undef m0_reqh_state_get
-#undef m0_fom_init
-#undef m0_fom_fini
-#undef m0_fom_queue
-#undef m0_fom_wakeup
-#undef m0_be_op_tick_ret
-#undef REQH_EMU
-#endif
-
 /** @} end of be group */
 #undef M0_TRACE_SUBSYSTEM
 
diff --git a/be/ut/helper.c b/be/ut/helper.c
index 1eeca30..e25aecd 100644
--- a/be/ut/helper.c
+++ b/be/ut/helper.c
@@ -42,8 +42,6 @@
 
 #define BE_UT_H_STORAGE_DIR "./__seg_ut_stob"
 
-//#define REQH_EMU 1
-
 enum {
 	BE_UT_SEG_START_ADDR = 0x400000000000ULL,
 	BE_UT_SEG_START_ID   = 42ULL,
@@ -135,7 +133,7 @@ static void be_ut_helper_init_once(void)
 	M0_ASSERT(rc == 0);
 }
 
-struct m0_reqh *m0_be_ut_reqh_get(void)
+M0_INTERNAL struct m0_reqh *m0_be_ut_reqh_get(void)
 {
 	struct m0_reqh *reqh;
 	int             result;
@@ -154,7 +152,7 @@ struct m0_reqh *m0_be_ut_reqh_get(void)
 	return reqh;
 }
 
-void m0_be_ut_reqh_put(struct m0_reqh *reqh)
+M0_INTERNAL void m0_be_ut_reqh_put(struct m0_reqh *reqh)
 {
 
 	struct be_ut_helper_struct *h = &be_ut_helper;
@@ -409,19 +407,6 @@ void m0_be_ut_tx_init(struct m0_be_tx *tx, struct m0_be_ut_backend *ut_be)
 	be_ut_tx_unlock_if(grp, ut_be);
 }
 
-void m0_be_ut_tx_prep(struct m0_be_tx *tx, struct m0_be_ut_backend *ut_be,
-		      struct m0_be_tx_credit *cred)
-{
-	be_ut_tx_lock_if(tx->t_sm.sm_grp, ut_be);
-	m0_be_tx_prep(tx, cred);
-}
-
-void m0_be_ut_tx_fini(struct m0_be_tx *tx, struct m0_be_ut_backend *ut_be)
-{
-	m0_be_tx_fini(tx);
-	be_ut_tx_unlock_if(tx->t_sm.sm_grp, ut_be);
-}
-
 struct m0_stob *m0_be_ut_stob_get_by_id(uint64_t id, bool stob_create)
 {
 	struct be_ut_helper_struct *h = &be_ut_helper;
diff --git a/be/ut/helper.h b/be/ut/helper.h
index 7a5142b..bcd1766 100644
--- a/be/ut/helper.h
+++ b/be/ut/helper.h
@@ -54,8 +54,8 @@ void m0_be_ut_backend_fini(struct m0_be_ut_backend *ut_be);
 M0_INTERNAL void m0_be_ut_backend_init_cfg(struct m0_be_ut_backend *ut_be,
 					   struct m0_be_domain_cfg *cfg);
 
-struct m0_reqh *m0_be_ut_reqh_get(void);
-void m0_be_ut_reqh_put(struct m0_reqh *reqh);
+M0_INTERNAL struct m0_reqh *m0_be_ut_reqh_get(void);
+M0_INTERNAL void m0_be_ut_reqh_put(struct m0_reqh *reqh);
 
 struct m0_sm_group *
 m0_be_ut_backend_sm_group_lookup(struct m0_be_ut_backend *ut_be);
@@ -66,9 +66,6 @@ void m0_be_ut_backend_thread_exit(struct m0_be_ut_backend *ut_be);
 
 /* will work with single thread only */
 void m0_be_ut_tx_init(struct m0_be_tx *tx, struct m0_be_ut_backend *ut_be);
-void m0_be_ut_tx_prep(struct m0_be_tx *tx, struct m0_be_ut_backend *ut_be,
-		      struct m0_be_tx_credit *cred);
-void m0_be_ut_tx_fini(struct m0_be_tx *tx, struct m0_be_ut_backend *ut_be);
 
 struct m0_be_ut_seg {
 	/** Stob for segment */
diff --git a/conf/ut/db.c b/conf/ut/db.c
index b9bfdec..910e189 100644
--- a/conf/ut/db.c
+++ b/conf/ut/db.c
@@ -35,7 +35,6 @@
 
 static struct m0_be_ut_backend ut_be;
 static struct m0_be_ut_seg     ut_seg;
-static struct m0_reqh          reqh;
 static struct m0_be_seg       *seg;
 
 /* ----------------------------------------------------------------
@@ -174,17 +173,16 @@ static void cleanup(void)
 
 static void conf_ut_db_init()
 {
-	//struct m0_sm_group     *grp;
-	//int                     rc;
-
-        //m0_be_ut_backend_init(&ut_be);
-       // m0_be_ut_seg_init(&ut_seg, &ut_be, 1ULL << 24);
-       // m0_be_ut_seg_allocator_init(&ut_seg, &ut_be);
-	m0_ut_backend_init_with_reqh(&reqh, &ut_be, &ut_seg, 1ULL << 20);
-	//grp = m0_be_ut_backend_sm_group_lookup(&ut_be);
+	struct m0_sm_group     *grp;
+	int                     rc;
+
+        m0_be_ut_backend_init(&ut_be);
+        m0_be_ut_seg_init(&ut_seg, &ut_be, 1ULL << 24);
+        m0_be_ut_seg_allocator_init(&ut_seg, &ut_be);
+	grp = m0_be_ut_backend_sm_group_lookup(&ut_be);
         seg = &ut_seg.bus_seg;
-        //rc = m0_be_ut__seg_dict_create(seg, grp);
-        //M0_UT_ASSERT(rc == 0);
+        rc = m0_be_ut__seg_dict_create(seg, grp);
+        M0_UT_ASSERT(rc == 0);
 }
 
 static void conf_ut_db_fini()
@@ -193,10 +191,8 @@ static void conf_ut_db_fini()
 	 * XXX: Call m0_ut_backend_fini_with_reqh() after
 	 *      fixing m0_confdb_destroy().
 	 */
-	//m0_ut_backend_fini_with_reqh(&reqh, &ut_be, &ut_seg);
         m0_be_ut_seg_fini(&ut_seg);
         m0_be_ut_backend_fini(&ut_be);
-	m0_reqh_fini(&reqh);
 }
 
 static int conf_ut_be_tx_create(struct m0_be_tx *tx,
diff --git a/dtm/ut/transmit.c b/dtm/ut/transmit.c
index b71e69d..f8961fd 100644
--- a/dtm/ut/transmit.c
+++ b/dtm/ut/transmit.c
@@ -438,7 +438,12 @@ static void rpc_fop_fom_init(void)
 static void rpc_fop_fom_fini(void)
 {
 	//m0_reqh_shutdown_wait(&test_ctx.rmc_reqh);
+	m0_reqh_shutdown(&test_ctx.rmc_reqh);
+#ifndef __KERNEL__
 	m0_ut_be_fom_domain_idle_wait(&test_ctx.rmc_reqh);
+#else
+	m0_reqh_fom_domain_idle_wait(&test_ctx.rmc_reqh);
+#endif
 	m0_reqh_service_stop(test_svc);
 	m0_reqh_service_fini(test_svc);
 	m0_reqh_service_type_unregister(&test_stype);
@@ -714,8 +719,11 @@ static void redo_test(void)
 
 	ticked = 0;
 	m0_dtm_history_reset(&tgt.lre_rem.re_fol.rfo_ch.ch_history, 2);
-	//m0_reqh_fom_domain_idle_wait(&test_ctx.rmc_reqh);
+#ifndef __KERNEL__
 	m0_ut_be_fom_domain_idle_wait(&test_ctx.rmc_reqh);
+#else
+	m0_reqh_fom_domain_idle_wait(&test_ctx.rmc_reqh);
+#endif
 	M0_UT_ASSERT(ticked == OPER_NR);
 	tgt_fini();
 	src_fini();
diff --git a/ioservice/ut/bulkio_ut.c b/ioservice/ut/bulkio_ut.c
index 63c7de2..86402fc 100644
--- a/ioservice/ut/bulkio_ut.c
+++ b/ioservice/ut/bulkio_ut.c
@@ -26,6 +26,7 @@
 #include "lib/finject.h"
 #include "fol/lsn.h"
 #include "ut/ut.h"
+#include "ut/be.h"
 #include "bulkio_common.h"
 #include "net/lnet/lnet.h"
 #include "rpc/rpclib.h"
@@ -1761,6 +1762,7 @@ static void bulkio_fini(void)
 		m0_file_fini(&bp->bp_file[i]);
 	reqh = m0_cs_reqh_get(&bp->bp_sctx->rsx_mero_ctx, "ioservice");
 	//m0_reqh_fom_domain_idle_wait(reqh);
+	m0_ut_be_fom_domain_idle_wait(reqh);
 	bulkio_client_stop(bp->bp_cctx);
 	bulkio_server_stop(bp->bp_sctx);
 	m0_addb_mc_fini(&m0_addb_gmc);
diff --git a/ut/be.c b/ut/be.c
index e98462e..71efb28 100644
--- a/ut/be.c
+++ b/ut/be.c
@@ -101,44 +101,6 @@ M0_INTERNAL void m0_ut_be_free(void *ptr, m0_bcount_t size,
 	m0_ut_be_tx_end(&tx);
 }
 
-M0_INTERNAL void m0_ut_backend_init_with_reqh(struct m0_reqh *reqh,
-					      struct m0_be_ut_backend *be,
-					      struct m0_be_ut_seg *seg,
-					      m0_bcount_t seg_size)
-{
-	int rc;
-
-	rc = M0_REQH_INIT(reqh,
-			  .rhia_dtm       = NULL,
-			  .rhia_db        = NULL,
-			  .rhia_mdstore   = (void*)1,
-			  .rhia_fol       = NULL,
-			  .rhia_svc       = (void*)1);
-	M0_ASSERT(rc == 0);
-	be->but_dom_cfg.bc_engine.bec_group_fom_reqh = reqh;
-	m0_be_ut_backend_init(be);
-	m0_be_ut_seg_init(seg, be, seg_size);
-	m0_be_ut_seg_allocator_init(seg, be);
-	//m0_ut_backend_init(be, seg);
-	rc = m0_be_ut__seg_dict_create(&seg->bus_seg,
-				       m0_be_ut_backend_sm_group_lookup(be));
-	M0_ASSERT(rc == 0);
-}
-
-M0_INTERNAL void m0_ut_backend_fini_with_reqh(struct m0_reqh *reqh,
-					      struct m0_be_ut_backend *be,
-					      struct m0_be_ut_seg *seg)
-{
-	int rc;
-
-	rc = m0_be_ut__seg_dict_destroy(&seg->bus_seg,
-					m0_be_ut_backend_sm_group_lookup(be));
-	M0_ASSERT(rc == 0);
-	m0_be_ut_seg_allocator_fini(seg, be);
-	m0_ut_backend_fini(be, seg);
-	m0_reqh_fini(reqh);
-}
-
 static bool fom_domain_is_idle(const struct m0_fom_domain *dom)
 {
 	int  i;
@@ -155,7 +117,7 @@ static bool fom_domain_is_idle(const struct m0_fom_domain *dom)
 	return result;
 }
 
-void m0_ut_be_fom_domain_idle_wait(struct m0_reqh *reqh)
+M0_INTERNAL void m0_ut_be_fom_domain_idle_wait(struct m0_reqh *reqh)
 {
 	struct m0_clink clink;
 
diff --git a/ut/be.h b/ut/be.h
index a7d3a9d..6bead93 100644
--- a/ut/be.h
+++ b/ut/be.h
@@ -71,15 +71,6 @@ M0_INTERNAL void m0_ut_be_free(void *ptr, m0_bcount_t size,
 
 M0_INTERNAL void m0_ut_be_fom_domain_idle_wait(struct m0_reqh *reqh);
 
-M0_INTERNAL void m0_ut_backend_init_with_reqh(struct m0_reqh *reqh,
-					      struct m0_be_ut_backend *be,
-					      struct m0_be_ut_seg *seg,
-					      m0_bcount_t seg_size);
-
-M0_INTERNAL void m0_ut_backend_fini_with_reqh(struct m0_reqh *reqh,
-					      struct m0_be_ut_backend *be,
-					      struct m0_be_ut_seg *seg);
-
 /** @} end of ut group */
 #endif /* __MERO_UT_BE_H__ */
 
-- 
1.8.3.2


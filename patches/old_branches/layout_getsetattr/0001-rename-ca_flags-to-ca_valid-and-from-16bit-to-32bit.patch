From 10a47e840167030dcbebf8227708f969a19aed84 Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Fri, 25 Jan 2013 21:41:36 +0800
Subject: [PATCH 01/11] rename ca_flags to ca_valid, and from 16bit to 32bit
 add layout id to cob_body in fop. add layout fop.

---
 cob/cob.h                   | 15 ++++++----
 m0t1fs/linux_kernel/dir.c   | 34 ++++++++++++-----------
 m0t1fs/linux_kernel/inode.c |  1 +
 mdservice/md_foms.c         | 68 +++++++++++++++++++++++++++++++++++++++------
 mdservice/md_fops.c         | 41 ++++++++++++++++++++++++---
 mdservice/md_fops.h         | 14 ++++++++++
 mdstore/mdstore.c           | 33 ++++++++++++----------
 rpc/rpc_opcodes.h           |  2 ++
 8 files changed, 159 insertions(+), 49 deletions(-)

diff --git a/cob/cob.h b/cob/cob.h
index 9ef69cc..23b1c35 100644
--- a/cob/cob.h
+++ b/cob/cob.h
@@ -302,13 +302,14 @@ enum m0_cob_valid_flags {
         M0_COB_FLAGS   = 1 << 9,
         M0_COB_NLINK   = 1 << 10,
         M0_COB_RDEV    = 1 << 11,
-        M0_COB_BLKSIZE = 1 << 12
+        M0_COB_BLKSIZE = 1 << 12,
+        M0_COB_LID     = 1 << 13
 };
 
-#define M0_COB_ALL (M0_COB_ATIME | M0_COB_MTIME | M0_COB_CTIME |                \
-                    M0_COB_SIZE | M0_COB_MODE | M0_COB_UID | M0_COB_GID |       \
-                    M0_COB_BLOCKS | M0_COB_TYPE | M0_COB_FLAGS | M0_COB_NLINK | \
-                    M0_COB_RDEV | M0_COB_BLKSIZE)
+#define M0_COB_ALL (M0_COB_ATIME | M0_COB_MTIME | M0_COB_CTIME |               \
+                    M0_COB_SIZE | M0_COB_MODE | M0_COB_UID | M0_COB_GID |      \
+                    M0_COB_BLOCKS | M0_COB_TYPE | M0_COB_FLAGS | M0_COB_NLINK |\
+                    M0_COB_RDEV | M0_COB_BLKSIZE | M0_COB_LID)
 
 /**
  * Attributes describing object that needs to be created or modified.
@@ -319,7 +320,7 @@ enum m0_cob_valid_flags {
 struct m0_cob_attr {
         struct m0_fid       ca_pfid;    /**< parent fid */
         struct m0_fid       ca_tfid;    /**< object fid */
-        uint16_t            ca_flags;   /**< flags (enum m0_cob_valid_flags) */
+        uint32_t            ca_valid;   /**< valid bits (enum m0_cob_valid_flags) */
         uint32_t            ca_mode;    /**< protection. */
         uint32_t            ca_uid;     /**< user ID of owner. */
         uint32_t            ca_gid;     /**< group ID of owner. */
@@ -332,6 +333,7 @@ struct m0_cob_attr {
         uint64_t            ca_blksize; /**< blocksize for filesystem I/O. */
         uint64_t            ca_blocks;  /**< number of blocks allocated. */
         uint64_t            ca_version; /**< object version */
+        uint64_t            ca_lid;     /**< layout id */
         struct m0_buf       ca_name;    /**< object name */
         struct m0_buf       ca_link;    /**< symlink body */
 };
@@ -375,6 +377,7 @@ struct m0_cob_nsrec {
         uint64_t          cnr_atime;   /**< time of last access */
         uint64_t          cnr_mtime;   /**< time of last modification */
         uint64_t          cnr_ctime;   /**< time of last status change */
+        uint64_t          cnr_lid;     /**< layout id */
 };
 
 /** Object index table key. The oi table record is a struct m0_cob_nskey. */
diff --git a/m0t1fs/linux_kernel/dir.c b/m0t1fs/linux_kernel/dir.c
index 774a05e..2eae9c9 100644
--- a/m0t1fs/linux_kernel/dir.c
+++ b/m0t1fs/linux_kernel/dir.c
@@ -135,6 +135,8 @@ static void body_mem2wire(struct m0_fop_cob *body,
                 body->b_blocks = attr->ca_blocks;
         if (valid & M0_COB_NLINK)
                 body->b_nlink = attr->ca_nlink;
+        if (valid & M0_COB_LID)
+                body->b_lid = attr->ca_lid;
         body->b_valid = valid;
 }
 
@@ -216,7 +218,7 @@ static int m0t1fs_create(struct inode     *dir,
         mo.mo_attr.ca_pfid      = csb->csb_root_fid;
         mo.mo_attr.ca_tfid      = ci->ci_fid;
         mo.mo_attr.ca_nlink     = inode->i_nlink;
-        mo.mo_attr.ca_flags     = (M0_COB_UID | M0_COB_GID | M0_COB_ATIME |
+        mo.mo_attr.ca_valid     = (M0_COB_UID | M0_COB_GID | M0_COB_ATIME |
                                    M0_COB_CTIME | M0_COB_MTIME | M0_COB_MODE |
                                    M0_COB_BLOCKS | M0_COB_SIZE | M0_COB_NLINK);
         m0_buf_init(&mo.mo_attr.ca_name, (char *)dentry->d_name.name, dentry->d_name.len);
@@ -471,7 +473,7 @@ static int m0t1fs_link(struct dentry *old, struct inode *dir,
         mo.mo_attr.ca_tfid  = ci->ci_fid;
         mo.mo_attr.ca_nlink = inode->i_nlink + 1;
         mo.mo_attr.ca_ctime = now.tv_sec;
-        mo.mo_attr.ca_flags = (M0_COB_CTIME | M0_COB_NLINK);
+        mo.mo_attr.ca_valid = (M0_COB_CTIME | M0_COB_NLINK);
         m0_buf_init(&mo.mo_attr.ca_name, (char *)new->d_name.name, new->d_name.len);
 
         rc = m0t1fs_mds_cob_link(csb, &mo, &link_rep);
@@ -520,7 +522,7 @@ static int m0t1fs_unlink(struct inode *dir, struct dentry *dentry)
         mo.mo_attr.ca_tfid = ci->ci_fid;
         mo.mo_attr.ca_nlink = inode->i_nlink - 1;
         mo.mo_attr.ca_ctime = now.tv_sec;
-        mo.mo_attr.ca_flags = (M0_COB_NLINK | M0_COB_CTIME);
+        mo.mo_attr.ca_valid = (M0_COB_NLINK | M0_COB_CTIME);
         m0_buf_init(&mo.mo_attr.ca_name,
                     (char *)dentry->d_name.name, dentry->d_name.len);
 
@@ -547,7 +549,7 @@ static int m0t1fs_unlink(struct inode *dir, struct dentry *dentry)
         mo.mo_attr.ca_tfid  = csb->csb_root_fid;
         mo.mo_attr.ca_ctime = now.tv_sec;
         mo.mo_attr.ca_mtime = now.tv_sec;
-        mo.mo_attr.ca_flags = (M0_COB_CTIME | M0_COB_MTIME);
+        mo.mo_attr.ca_valid = (M0_COB_CTIME | M0_COB_MTIME);
 
         rc = m0t1fs_mds_cob_setattr(csb, &mo, &setattr_rep);
         if (rc != 0) {
@@ -641,7 +643,7 @@ M0_INTERNAL int m0t1fs_size_update(struct inode *inode, uint64_t newsize)
         M0_SET0(&mo);
         mo.mo_attr.ca_tfid  = ci->ci_fid;
         mo.mo_attr.ca_size = newsize;
-        mo.mo_attr.ca_flags |= M0_COB_SIZE;
+        mo.mo_attr.ca_valid |= M0_COB_SIZE;
 
         rc = m0t1fs_mds_cob_setattr(csb, &mo, &setattr_rep);
         if (rc != 0)
@@ -680,37 +682,37 @@ M0_INTERNAL int m0t1fs_setattr(struct dentry *dentry, struct iattr *attr)
 
         if (attr->ia_valid & ATTR_CTIME) {
                 mo.mo_attr.ca_ctime = attr->ia_ctime.tv_sec;
-                mo.mo_attr.ca_flags |= M0_COB_CTIME;
+                mo.mo_attr.ca_valid |= M0_COB_CTIME;
         }
 
         if (attr->ia_valid & ATTR_MTIME) {
                 mo.mo_attr.ca_mtime = attr->ia_mtime.tv_sec;
-                mo.mo_attr.ca_flags |= M0_COB_MTIME;
+                mo.mo_attr.ca_valid |= M0_COB_MTIME;
         }
 
         if (attr->ia_valid & ATTR_ATIME) {
                 mo.mo_attr.ca_atime = attr->ia_atime.tv_sec;
-                mo.mo_attr.ca_flags |= M0_COB_ATIME;
+                mo.mo_attr.ca_valid |= M0_COB_ATIME;
         }
 
         if (attr->ia_valid & ATTR_SIZE) {
                 mo.mo_attr.ca_size = attr->ia_size;
-                mo.mo_attr.ca_flags |= M0_COB_SIZE;
+                mo.mo_attr.ca_valid |= M0_COB_SIZE;
         }
 
         if (attr->ia_valid & ATTR_MODE) {
                 mo.mo_attr.ca_mode = attr->ia_mode;
-                mo.mo_attr.ca_flags |= M0_COB_MODE;
+                mo.mo_attr.ca_valid |= M0_COB_MODE;
         }
 
         if (attr->ia_valid & ATTR_UID) {
                 mo.mo_attr.ca_uid = attr->ia_uid;
-                mo.mo_attr.ca_flags |= M0_COB_UID;
+                mo.mo_attr.ca_valid |= M0_COB_UID;
         }
 
         if (attr->ia_valid & ATTR_GID) {
                 mo.mo_attr.ca_gid = attr->ia_gid;
-                mo.mo_attr.ca_flags |= M0_COB_GID;
+                mo.mo_attr.ca_valid |= M0_COB_GID;
         }
 
         rc = m0t1fs_mds_cob_setattr(csb, &mo, &setattr_rep);
@@ -830,7 +832,7 @@ static int m0t1fs_mds_cob_fop_populate(const struct m0t1fs_mdop *mo,
 
                 req->b_pfid = mo->mo_attr.ca_pfid;
                 req->b_tfid = mo->mo_attr.ca_tfid;
-                body_mem2wire(req, &mo->mo_attr, mo->mo_attr.ca_flags);
+                body_mem2wire(req, &mo->mo_attr, mo->mo_attr.ca_valid);
                 rc = name_mem2wire(&create->c_name, &mo->mo_attr.ca_name);
                 break;
         case M0_MDSERVICE_LINK_OPCODE:
@@ -839,7 +841,7 @@ static int m0t1fs_mds_cob_fop_populate(const struct m0t1fs_mdop *mo,
 
                 req->b_pfid = mo->mo_attr.ca_pfid;
                 req->b_tfid = mo->mo_attr.ca_tfid;
-                body_mem2wire(req, &mo->mo_attr, mo->mo_attr.ca_flags);
+                body_mem2wire(req, &mo->mo_attr, mo->mo_attr.ca_valid);
                 rc = name_mem2wire(&link->l_name, &mo->mo_attr.ca_name);
                 break;
         case M0_MDSERVICE_UNLINK_OPCODE:
@@ -848,7 +850,7 @@ static int m0t1fs_mds_cob_fop_populate(const struct m0t1fs_mdop *mo,
 
                 req->b_pfid = mo->mo_attr.ca_pfid;
                 req->b_tfid = mo->mo_attr.ca_tfid;
-                body_mem2wire(req, &mo->mo_attr, mo->mo_attr.ca_flags);
+                body_mem2wire(req, &mo->mo_attr, mo->mo_attr.ca_valid);
                 rc = name_mem2wire(&unlink->u_name, &mo->mo_attr.ca_name);
                 break;
         case M0_MDSERVICE_STATFS_OPCODE:
@@ -873,7 +875,7 @@ static int m0t1fs_mds_cob_fop_populate(const struct m0t1fs_mdop *mo,
                 req = &setattr->s_body;
 
                 req->b_tfid = mo->mo_attr.ca_tfid;
-                body_mem2wire(req, &mo->mo_attr, mo->mo_attr.ca_flags);
+                body_mem2wire(req, &mo->mo_attr, mo->mo_attr.ca_valid);
                 break;
         case M0_MDSERVICE_READDIR_OPCODE:
                 readdir = m0_fop_data(fop);
diff --git a/m0t1fs/linux_kernel/inode.c b/m0t1fs/linux_kernel/inode.c
index cc5f52f..691c137 100644
--- a/m0t1fs/linux_kernel/inode.c
+++ b/m0t1fs/linux_kernel/inode.c
@@ -295,6 +295,7 @@ static int m0t1fs_inode_read(struct inode *inode,
 	}
         if (!m0t1fs_inode_is_root(inode)) {
                 ci->ci_layout_id = (M0T1FS_SB(inode->i_sb))->csb_layout_id;
+                ci->ci_layout_id = body->b_lid;
                 rc = m0t1fs_inode_layout_init(ci);
         }
 out:
diff --git a/mdservice/md_foms.c b/mdservice/md_foms.c
index dc68642..0597a02 100644
--- a/mdservice/md_foms.c
+++ b/mdservice/md_foms.c
@@ -49,7 +49,7 @@ static void m0_md_cob_wire2mem(struct m0_cob_attr *attr,
         M0_SET0(attr);
         attr->ca_pfid = body->b_pfid;
         attr->ca_tfid = body->b_tfid;
-        attr->ca_flags = body->b_valid;
+        attr->ca_valid = body->b_valid;
         if (body->b_valid & M0_COB_MODE)
                 attr->ca_mode = body->b_mode;
         if (body->b_valid & M0_COB_UID)
@@ -72,6 +72,8 @@ static void m0_md_cob_wire2mem(struct m0_cob_attr *attr,
                 attr->ca_blksize = body->b_blksize;
         if (body->b_valid & M0_COB_BLOCKS)
                 attr->ca_blocks = body->b_blocks;
+        if (body->b_valid & M0_COB_LID)
+                attr->ca_lid = body->b_lid;
         attr->ca_version = body->b_version;
 }
 
@@ -80,7 +82,7 @@ static void m0_md_cob_mem2wire(struct m0_fop_cob *body,
 {
         body->b_pfid = attr->ca_pfid;
         body->b_tfid = attr->ca_tfid;
-        body->b_valid = attr->ca_flags;
+        body->b_valid = attr->ca_valid;
         if (body->b_valid & M0_COB_MODE)
                 body->b_mode = attr->ca_mode;
         if (body->b_valid & M0_COB_UID)
@@ -103,6 +105,8 @@ static void m0_md_cob_mem2wire(struct m0_fop_cob *body,
                 body->b_blksize = attr->ca_blksize;
         if (body->b_valid & M0_COB_BLOCKS)
                 body->b_blocks = attr->ca_blocks;
+        if (body->b_valid & M0_COB_LID)
+                body->b_lid = attr->ca_lid;
         body->b_version = attr->ca_version;
 }
 
@@ -520,12 +524,12 @@ static int m0_md_tick_open(struct m0_fom *fom)
                 rc = m0_mdstore_open(fom->fo_loc->fl_dom->fd_reqh->rh_mdstore,
                                      cob, body->b_flags, &fom->fo_tx.tx_dbtx);
                 if (rc == 0 &&
-                    (!(attr.ca_flags & M0_COB_NLINK) || attr.ca_nlink > 0)) {
+                    (!(attr.ca_valid & M0_COB_NLINK) || attr.ca_nlink > 0)) {
                         /*
                          * Mode contains open flags that we don't need
                          * to store to db.
                          */
-                        attr.ca_flags &= ~M0_COB_MODE;
+                        attr.ca_valid &= ~M0_COB_MODE;
                         rc = m0_mdstore_setattr(
                                 fom->fo_loc->fl_dom->fd_reqh->rh_mdstore,
                                 cob, &attr, &fom->fo_tx.tx_dbtx);
@@ -602,12 +606,12 @@ static int m0_md_tick_close(struct m0_fom *fom)
         rc = m0_mdstore_close(fom->fo_loc->fl_dom->fd_reqh->rh_mdstore, cob,
                                &fom->fo_tx.tx_dbtx);
         if (rc == 0 &&
-            (!(attr.ca_flags & M0_COB_NLINK) || attr.ca_nlink > 0)) {
+            (!(attr.ca_valid & M0_COB_NLINK) || attr.ca_nlink > 0)) {
                 /*
                  * Mode contains open flags that we don't need
                  * to store to db.
                  */
-                attr.ca_flags &= ~M0_COB_MODE;
+                attr.ca_valid &= ~M0_COB_MODE;
                 rc = m0_mdstore_setattr(fom->fo_loc->fl_dom->fd_reqh->rh_mdstore,
                                         cob, &attr, &fom->fo_tx.tx_dbtx);
         }
@@ -756,7 +760,7 @@ static int m0_md_tick_lookup(struct m0_fom *fom)
         m0_fom_block_leave(fom);
 
         if (rc == 0) {
-                attr.ca_flags = M0_COB_ALL;
+                attr.ca_valid = M0_COB_ALL;
                 m0_md_cob_mem2wire(&rep->l_body, &attr);
         } else {
                 M0_LOG(M0_DEBUG, "Getattr on object [%lx:%lx] failed with %d",
@@ -821,7 +825,7 @@ static int m0_md_tick_getattr(struct m0_fom *fom)
         m0_cob_put(cob);
         m0_fom_block_leave(fom);
         if (rc == 0) {
-                attr.ca_flags = M0_COB_ALL;
+                attr.ca_valid = M0_COB_ALL;
                 m0_md_cob_mem2wire(&rep->g_body, &attr);
         }
 out:
@@ -1003,6 +1007,42 @@ out:
         return M0_FSO_AGAIN;
 }
 
+static int m0_md_tick_layout(struct m0_fom *fom)
+{
+        struct m0_fop_layout          *req;
+        struct m0_fop_layout_rep      *rep;
+        struct m0_fop                 *fop;
+        struct m0_fop                 *fop_rep;
+        int                            rc;
+
+        rc = m0_md_tick_generic(fom);
+        if (rc != 0)
+                return rc;
+
+        fop = fom->fo_fop;
+        M0_ASSERT(fop != NULL);
+        req = m0_fop_data(fop);
+
+        fop_rep = fom->fo_rep_fop;
+        M0_ASSERT(fop_rep != NULL);
+        rep = m0_fop_data(fop_rep);
+
+        rc = m0_md_fop_init(fop, fom);
+        if (rc != 0)
+                goto out;
+
+        m0_fom_block_enter(fom);
+       // rc = layout_decode(...);
+        m0_fom_block_leave(fom);
+        if (rc == 0)
+                ;//md_statfs_mem2wire(rep, &statfs);
+out:
+        rep->lr_rc = rc;
+        m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
+        return M0_FSO_AGAIN;
+}
+
+
 static int m0_md_req_path_get(struct m0_mdstore *mdstore,
                               struct m0_fid *fid,
                               struct m0_fop_str *str)
@@ -1226,6 +1266,14 @@ static const struct m0_fom_ops m0_md_fom_readdir_ops = {
 	.fo_addb_init = m0_md_fom_addb_init
 };
 
+static const struct m0_fom_ops m0_md_fom_layout_ops = {
+        .fo_home_locality = m0_md_req_fom_locality_get,
+        .fo_tick   = m0_md_tick_layout,
+        .fo_fini   = m0_md_req_fom_fini,
+        .fo_addb_init = m0_md_fom_addb_init
+};
+
+
 M0_INTERNAL int m0_md_rep_fom_create(struct m0_fop *fop, struct m0_fom **m,
 				     struct m0_reqh *reqh)
 {
@@ -1293,6 +1341,10 @@ M0_INTERNAL int m0_md_req_fom_create(struct m0_fop *fop, struct m0_fom **m,
                 ops = &m0_md_fom_readdir_ops;
                 rep_fopt = &m0_fop_readdir_rep_fopt;
                 break;
+         case M0_LAYOUT_OPCODE:
+                ops = &m0_md_fom_layout_ops;
+                rep_fopt = &m0_fop_layout_rep_fopt;
+                break;
         default:
                 m0_free(fom_obj);
                 return -EOPNOTSUPP;
diff --git a/mdservice/md_fops.c b/mdservice/md_fops.c
index 0406156..3fb3095 100644
--- a/mdservice/md_fops.c
+++ b/mdservice/md_fops.c
@@ -74,6 +74,9 @@ static size_t m0_md_fol_pack_size(struct m0_fol_rec_desc *desc)
         case M0_MDSERVICE_READDIR_OPCODE:
                 len += ((struct m0_fop_readdir *)data)->r_path.s_len;
                 break;
+        case M0_LAYOUT_OPCODE:
+                len += ((struct m0_fop_layout *)data)->l_buf.b_count;
+                break;
         default:
                 break;
         }
@@ -141,6 +144,10 @@ static void m0_md_fol_pack(struct m0_fol_rec_desc *desc, void *buf)
         case M0_MDSERVICE_READDIR_OPCODE:
                 copy(&ptr, &((struct m0_fop_readdir *)data)->r_path);
                 break;
+        case M0_LAYOUT_OPCODE:
+                copy(&ptr, (struct m0_fop_str*)
+				&((struct m0_fop_layout *)data)->l_buf);
+                break;
         default:
                 break;
         }
@@ -213,6 +220,11 @@ static int m0_md_fol_open(const struct m0_fol_rec_type *type,
                 ptr = (char *)((struct m0_fop_readdir *)data + 1);
                 map(&ptr, &((struct m0_fop_readdir *)data)->r_path);
                 break;
+        case M0_LAYOUT_OPCODE:
+                ptr = (char *)((struct m0_fop_layout *)data + 1);
+                map(&ptr, (struct m0_fop_str *)
+				&((struct m0_fop_layout *)data)->l_buf);
+                break;
         default:
                 break;
         }
@@ -254,6 +266,7 @@ struct m0_fop_type m0_fop_getattr_fopt;
 struct m0_fop_type m0_fop_statfs_fopt;
 struct m0_fop_type m0_fop_rename_fopt;
 struct m0_fop_type m0_fop_readdir_fopt;
+struct m0_fop_type m0_fop_layout_fopt;
 
 struct m0_fop_type m0_fop_create_rep_fopt;
 struct m0_fop_type m0_fop_lookup_rep_fopt;
@@ -266,6 +279,7 @@ struct m0_fop_type m0_fop_getattr_rep_fopt;
 struct m0_fop_type m0_fop_statfs_rep_fopt;
 struct m0_fop_type m0_fop_rename_rep_fopt;
 struct m0_fop_type m0_fop_readdir_rep_fopt;
+struct m0_fop_type m0_fop_layout_rep_fopt;
 
 M0_INTERNAL int m0_mdservice_fop_init(void)
 {
@@ -402,6 +416,17 @@ M0_INTERNAL int m0_mdservice_fop_init(void)
                                  .svc_type  = &m0_mds_type,
 #endif
                                  .sm        = &m0_generic_conf) ?:
+                 M0_FOP_TYPE_INIT(&m0_fop_layout_fopt,
+                                 .name      = "Layout request",
+                                 .opcode    = M0_LAYOUT_OPCODE,
+                                 .xt        = m0_fop_layout_xc,
+                                 .rpc_flags = M0_RPC_ITEM_TYPE_REQUEST,
+                                 .fop_ops   = &m0_md_fop_ops,
+#ifndef __KERNEL__
+                                 .fom_ops   = &m0_md_fom_ops,
+                                 .svc_type  = &m0_mds_type,
+#endif
+                                 .sm        = &m0_generic_conf) ?:
                 M0_FOP_TYPE_INIT(&m0_fop_create_rep_fopt,
                                  .name      = "Create reply",
                                  .opcode    = M0_MDSERVICE_CREATE_REP_OPCODE,
@@ -456,6 +481,11 @@ M0_INTERNAL int m0_mdservice_fop_init(void)
                                  .name      = "Readdir reply",
                                  .opcode    = M0_MDSERVICE_READDIR_REP_OPCODE,
                                  .xt        = m0_fop_readdir_rep_xc,
+                                 .rpc_flags = M0_RPC_ITEM_TYPE_REPLY) ?:
+                M0_FOP_TYPE_INIT(&m0_fop_layout_rep_fopt,
+                                 .name      = "layout reply",
+                                 .opcode    = M0_LAYOUT_REP_OPCODE,
+                                 .xt        = m0_fop_layout_rep_xc,
                                  .rpc_flags = M0_RPC_ITEM_TYPE_REPLY);
 }
 M0_EXPORTED(m0_mdservice_fop_init);
@@ -466,24 +496,27 @@ M0_INTERNAL void m0_mdservice_fop_fini(void)
         m0_fop_type_fini(&m0_fop_lookup_fopt);
         m0_fop_type_fini(&m0_fop_link_fopt);
         m0_fop_type_fini(&m0_fop_unlink_fopt);
-        m0_fop_type_fini(&m0_fop_rename_fopt);
-        m0_fop_type_fini(&m0_fop_readdir_fopt);
         m0_fop_type_fini(&m0_fop_open_fopt);
         m0_fop_type_fini(&m0_fop_close_fopt);
         m0_fop_type_fini(&m0_fop_setattr_fopt);
         m0_fop_type_fini(&m0_fop_getattr_fopt);
         m0_fop_type_fini(&m0_fop_statfs_fopt);
+        m0_fop_type_fini(&m0_fop_rename_fopt);
+        m0_fop_type_fini(&m0_fop_readdir_fopt);
+        m0_fop_type_fini(&m0_fop_layout_fopt);
+
         m0_fop_type_fini(&m0_fop_create_rep_fopt);
         m0_fop_type_fini(&m0_fop_lookup_rep_fopt);
         m0_fop_type_fini(&m0_fop_link_rep_fopt);
         m0_fop_type_fini(&m0_fop_unlink_rep_fopt);
-        m0_fop_type_fini(&m0_fop_rename_rep_fopt);
-        m0_fop_type_fini(&m0_fop_readdir_rep_fopt);
         m0_fop_type_fini(&m0_fop_open_rep_fopt);
         m0_fop_type_fini(&m0_fop_close_rep_fopt);
         m0_fop_type_fini(&m0_fop_setattr_rep_fopt);
         m0_fop_type_fini(&m0_fop_getattr_rep_fopt);
         m0_fop_type_fini(&m0_fop_statfs_rep_fopt);
+        m0_fop_type_fini(&m0_fop_rename_rep_fopt);
+        m0_fop_type_fini(&m0_fop_readdir_rep_fopt);
+        m0_fop_type_fini(&m0_fop_layout_rep_fopt);
         m0_xc_md_fops_fini();
 }
 M0_EXPORTED(m0_mdservice_fop_fini);
diff --git a/mdservice/md_fops.h b/mdservice/md_fops.h
index 37c3a66..f1f98f1 100644
--- a/mdservice/md_fops.h
+++ b/mdservice/md_fops.h
@@ -39,6 +39,7 @@ extern struct m0_fop_type m0_fop_getattr_fopt;
 extern struct m0_fop_type m0_fop_statfs_fopt;
 extern struct m0_fop_type m0_fop_rename_fopt;
 extern struct m0_fop_type m0_fop_readdir_fopt;
+extern struct m0_fop_type m0_fop_layout_fopt;
 
 extern struct m0_fop_type m0_fop_create_rep_fopt;
 extern struct m0_fop_type m0_fop_lookup_rep_fopt;
@@ -51,6 +52,7 @@ extern struct m0_fop_type m0_fop_getattr_rep_fopt;
 extern struct m0_fop_type m0_fop_statfs_rep_fopt;
 extern struct m0_fop_type m0_fop_rename_rep_fopt;
 extern struct m0_fop_type m0_fop_readdir_rep_fopt;
+extern struct m0_fop_type m0_fop_layout_rep_fopt;
 
 struct m0_fop_str {
         uint32_t s_len;
@@ -76,6 +78,7 @@ struct m0_fop_cob {
         uint32_t      b_atime;
         uint32_t      b_mtime;
         uint32_t      b_ctime;
+        uint64_t      b_lid;
         struct m0_fid b_pfid;
         struct m0_fid b_tfid;
 } M0_XCA_RECORD;
@@ -205,6 +208,17 @@ struct m0_fop_statfs_rep {
         struct m0_fid f_root;
 } M0_XCA_RECORD;
 
+struct m0_fop_layout {
+        uint32_t          l_op;
+        uint64_t          l_lid;
+        struct m0_fop_buf l_buf;
+} M0_XCA_RECORD;
+
+struct m0_fop_layout_rep {
+        uint32_t          lr_rc;
+        struct m0_fop_buf lr_buf;
+} M0_XCA_RECORD;
+
 /**
    Init and fini of mdservice fops code.
  */
diff --git a/mdstore/mdstore.c b/mdstore/mdstore.c
index 5abfcdc..6c351e7 100644
--- a/mdstore/mdstore.c
+++ b/mdstore/mdstore.c
@@ -481,21 +481,23 @@ M0_INTERNAL int m0_mdstore_setattr(struct m0_mdstore    *md,
          */
         if (cob->co_flags & M0_CA_NSREC) {
                 nsrec = &cob->co_nsrec;
-                if (attr->ca_flags & M0_COB_ATIME)
+                if (attr->ca_valid & M0_COB_ATIME)
                         nsrec->cnr_atime = attr->ca_atime;
-                if (attr->ca_flags & M0_COB_MTIME)
+                if (attr->ca_valid & M0_COB_MTIME)
                         nsrec->cnr_mtime = attr->ca_mtime;
-                if (attr->ca_flags & M0_COB_CTIME)
+                if (attr->ca_valid & M0_COB_CTIME)
                         nsrec->cnr_ctime = attr->ca_ctime;
-                if (attr->ca_flags & M0_COB_SIZE)
+                if (attr->ca_valid & M0_COB_SIZE)
                         nsrec->cnr_size = attr->ca_size;
-                /*if (attr->ca_flags & M0_COB_RDEV)
+                /*if (attr->ca_valid & M0_COB_RDEV)
                         nsrec->cnr_rdev = attr->ca_rdev;*/
-                if (attr->ca_flags & M0_COB_BLOCKS)
+                if (attr->ca_valid & M0_COB_BLOCKS)
                         nsrec->cnr_blocks = attr->ca_blocks;
-                if (attr->ca_flags & M0_COB_BLKSIZE)
+                if (attr->ca_valid & M0_COB_BLKSIZE)
                         nsrec->cnr_blksize = attr->ca_blksize;
-                if (attr->ca_flags & M0_COB_NLINK) {
+                if (attr->ca_valid & M0_COB_LID)
+                        nsrec->cnr_lid = attr->ca_lid;
+                if (attr->ca_valid & M0_COB_NLINK) {
                         M0_ASSERT(attr->ca_nlink > 0);
                         nsrec->cnr_nlink = attr->ca_nlink;
                 }
@@ -507,11 +509,11 @@ M0_INTERNAL int m0_mdstore_setattr(struct m0_mdstore    *md,
          */
         if (cob->co_flags & M0_CA_OMGREC) {
                 omgrec = &cob->co_omgrec;
-                if (attr->ca_flags & M0_COB_UID)
+                if (attr->ca_valid & M0_COB_UID)
                         omgrec->cor_uid = attr->ca_uid;
-                if (attr->ca_flags & M0_COB_GID)
+                if (attr->ca_valid & M0_COB_GID)
                         omgrec->cor_gid = attr->ca_gid;
-                if (attr->ca_flags & M0_COB_MODE)
+                if (attr->ca_valid & M0_COB_MODE)
                         omgrec->cor_mode = attr->ca_mode;
         }
 
@@ -537,7 +539,7 @@ M0_INTERNAL int m0_mdstore_getattr(struct m0_mdstore       *md,
         M0_ASSERT(cob != NULL);
 
         M0_SET0(attr);
-        attr->ca_flags = 0;
+        attr->ca_valid = 0;
         attr->ca_tfid = cob->co_nsrec.cnr_fid;
         attr->ca_pfid = cob->co_nskey->cnk_pfid;
 
@@ -545,7 +547,7 @@ M0_INTERNAL int m0_mdstore_getattr(struct m0_mdstore       *md,
          * Copy permissions and owner info into rep.
          */
         if (cob->co_flags & M0_CA_OMGREC) {
-                attr->ca_flags |= M0_COB_UID | M0_COB_GID | M0_COB_MODE;
+                attr->ca_valid |= M0_COB_UID | M0_COB_GID | M0_COB_MODE;
                 attr->ca_uid = cob->co_omgrec.cor_uid;
                 attr->ca_gid = cob->co_omgrec.cor_gid;
                 attr->ca_mode = cob->co_omgrec.cor_mode;
@@ -555,9 +557,9 @@ M0_INTERNAL int m0_mdstore_getattr(struct m0_mdstore       *md,
          * Copy nsrec fields into response.
          */
         if (cob->co_flags & M0_CA_NSREC) {
-                attr->ca_flags |= M0_COB_ATIME | M0_COB_CTIME | M0_COB_MTIME |
+                attr->ca_valid |= M0_COB_ATIME | M0_COB_CTIME | M0_COB_MTIME |
                                   M0_COB_SIZE | M0_COB_BLKSIZE | M0_COB_BLOCKS/* |
-                                  M0_COB_RDEV*/;
+                                  M0_COB_RDEV*/ | M0_COB_LID;
                 attr->ca_atime = cob->co_nsrec.cnr_atime;
                 attr->ca_ctime = cob->co_nsrec.cnr_ctime;
                 attr->ca_mtime = cob->co_nsrec.cnr_mtime;
@@ -566,6 +568,7 @@ M0_INTERNAL int m0_mdstore_getattr(struct m0_mdstore       *md,
                 attr->ca_nlink = cob->co_nsrec.cnr_nlink;
                 //attr->ca_rdev = cob->co_nsrec.cnr_rdev;
                 attr->ca_size = cob->co_nsrec.cnr_size;
+                attr->ca_lid = cob->co_nsrec.cnr_lid;
                 //attr->ca_version = cob->co_nsrec.cnr_version;
         }
 
diff --git a/rpc/rpc_opcodes.h b/rpc/rpc_opcodes.h
index 1bf31ff..e5fe8be 100644
--- a/rpc/rpc_opcodes.h
+++ b/rpc/rpc_opcodes.h
@@ -153,6 +153,8 @@ enum M0_RPC_OPCODES {
 	M0_RM_FOP_REVOKE_REPLY              = 87,
 	M0_RM_FOP_CANCEL                    = 88,
 
+	M0_LAYOUT_OPCODE                    = 90,
+	M0_LAYOUT_REP_OPCODE                = 91,
 };
 /** @} endgroup rpc_layer_core */
 
-- 
1.8.3.2


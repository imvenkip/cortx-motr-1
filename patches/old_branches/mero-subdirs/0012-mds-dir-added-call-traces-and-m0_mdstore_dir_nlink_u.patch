From 91e9b88b6cd505d44011dd2f800d9d1d51c65f8d Mon Sep 17 00:00:00 2001
From: Alexander Gattin <alexander_gattin@xyratex.com>
Date: Sun, 10 Feb 2013 03:19:17 +0200
Subject: [PATCH 12/22] mds/dir: added call traces and
 m0_mdstore_dir_nlink_update() function

* added M0_ENTRY() and M0_LEAVE() traces
* added m0_mdstore_dir_nlink_update() function to update number of
  cnr_nlink's of a directory
* inserted calls to m0_mdstore_dir_nlink_update() into
  m0_mdstore_create(), m0_mdstore_link() and m0_mdstore_unlink()
* changed %*s format to %.*s for correctly printing file names in
  m0_md_tick_create()'s trace
* allow overriding M0_TRACE_LEVEL, M0_TRACE_IMMEDIATE_MASK and
  M0_TRACE_PRINT_CONTEXT in m0t1fs/linux_kernel/st/st
* initiaize M0_TRACE_LEVEL, M0_TRACE_IMMEDIATE_MASK and
  M0_TRACE_PRINT_CONTEXT from TRACE_LEVEL, TRACE_MASK and TRACE_CONTEXT
  by default
---
 m0t1fs/linux_kernel/dir.c |  1 +
 m0t1fs/linux_kernel/st/st | 16 +++++++-----
 mdservice/md_foms.c       |  2 +-
 mdstore/mdstore.c         | 66 +++++++++++++++++++++++++++++++++++++++++++++--
 4 files changed, 76 insertions(+), 9 deletions(-)

diff --git a/m0t1fs/linux_kernel/dir.c b/m0t1fs/linux_kernel/dir.c
index 99e4afc..aea2734 100644
--- a/m0t1fs/linux_kernel/dir.c
+++ b/m0t1fs/linux_kernel/dir.c
@@ -247,6 +247,7 @@ static int m0t1fs_create(struct inode     *dir,
 			goto out;
 	}
 
+	/* mark_inode_dirty(dir); */
 	m0t1fs_fs_unlock(csb);
 
 	d_instantiate(dentry, inode);
diff --git a/m0t1fs/linux_kernel/st/st b/m0t1fs/linux_kernel/st/st
index fa0f9d6..c5b98de 100755
--- a/m0t1fs/linux_kernel/st/st
+++ b/m0t1fs/linux_kernel/st/st
@@ -5,8 +5,15 @@ set -e
 SANDBOX_DIR=~devvm/_m0-sandbox
 
 # TRACE_MASK=all
-[ "z$TRACE_MASK" = "z" ] && TRACE_MASK='!rpc,formation,fop,memory'
-[ "z$TRACE_LEVEL" = "z" ] && TRACE_LEVEL='info+'
+[ -z "$TRACE_MASK" ] && TRACE_MASK='!rpc,formation,fop,memory'
+[ -z "$TRACE_LEVEL" ] && TRACE_LEVEL='info+'
+[ -z "$M0_TRACE_LEVEL" ] && M0_TRACE_LEVEL="$TRACE_LEVEL"
+export M0_TRACE_LEVEL
+[ -z "$M0_TRACE_IMMEDIATE_MASK" ] && M0_TRACE_IMMEDIATE_MASK="$TRACE_MASK"
+export M0_TRACE_IMMEDIATE_MASK
+[ -z "$M0_TRACE_PRINT_CONTEXT" ] && [ -n "$TRACE_CONTEXT" ] && \
+    M0_TRACE_PRINT_CONTEXT="$TRACE_CONTEXT"
+[ -n "$M0_TRACE_PRINT_CONTEXT" ] && export M0_TRACE_PRINT_CONTEXT
 # TRACE_CONTEXT=full
 set -u
 
@@ -137,10 +144,7 @@ EOF`"
 
     echo "--- `date` ---" >>$SANDBOX_DIR/m0d.log
     cd $SANDBOX_DIR
-    env ${TRACE_MASK:+M0_TRACE_IMMEDIATE_MASK=$TRACE_MASK} \
-	${TRACE_LEVEL:+M0_TRACE_LEVEL=$TRACE_LEVEL} \
-	${TRACE_CONTEXT:+M0_TRACE_PRINT_CONTEXT=$TRACE_CONTEXT} \
-	$M0_CORE_DIR/mero/m0d $OPTIONS >>$SANDBOX_DIR/m0d.log 2>&1 &
+    $M0_CORE_DIR/mero/m0d $OPTIONS >>$SANDBOX_DIR/m0d.log 2>&1 &
 
     sleep 1
     killall -q -0 lt-m0d || {
diff --git a/mdservice/md_foms.c b/mdservice/md_foms.c
index dc68642..8313979 100644
--- a/mdservice/md_foms.c
+++ b/mdservice/md_foms.c
@@ -193,7 +193,7 @@ static int m0_md_tick_create(struct m0_fom *fom)
 
         m0_buf_init(&attr.ca_name, req->c_name.s_buf, req->c_name.s_len);
 
-        M0_LOG(M0_DEBUG, "Create [%lx:%lx]/[%lx:%lx] %*s",
+        M0_LOG(M0_DEBUG, "Create [%lx:%lx]/[%lx:%lx] %.*s",
                body->b_pfid.f_container, body->b_pfid.f_key,
                body->b_tfid.f_container, body->b_tfid.f_key,
                (int)attr.ca_name.b_nob, (char *)attr.ca_name.b_addr);
diff --git a/mdstore/mdstore.c b/mdstore/mdstore.c
index 1b38474..f5c2fe6 100644
--- a/mdstore/mdstore.c
+++ b/mdstore/mdstore.c
@@ -149,6 +149,38 @@ M0_INTERNAL void m0_mdstore_fini(struct m0_mdstore *md)
         m0_cob_domain_fini(&md->md_dom);
 }
 
+M0_INTERNAL int m0_mdstore_dir_nlink_update(struct m0_mdstore   *md,
+					    struct m0_fid       *fid,
+					    int                  inc,
+					    struct m0_db_tx     *tx)
+{
+        struct m0_cob         *cob;
+        struct m0_cob_oikey    oikey;
+	int                    rc;
+
+	M0_ENTRY("%+d nlinks for dir[%llu:%llu]", inc,
+		 (long long unsigned)(fid->f_container),
+		 (long long unsigned)(fid->f_key));
+	/**
+	 * Directories cannot have hardlinks, so they can always
+	 * be found by oikey(fid, 0):
+	 */
+	m0_cob_oikey_make(&oikey, fid, 0);
+	rc = m0_cob_locate(&md->md_dom, &oikey, 0, &cob, tx);
+	if (rc != 0) {
+		M0_LOG(M0_DEBUG, "cannot locate stat data for dir[%llu:%llu]"
+		       " - %d", (long long unsigned)(fid->f_container),
+		       (long long unsigned)(fid->f_key), rc);
+		goto out;
+	}
+	cob->co_nsrec.cnr_linkno += inc;
+        rc = m0_cob_update(cob, &cob->co_nsrec, NULL, NULL, tx);
+	m0_cob_put(cob);
+out:
+	M0_LEAVE("rc: %d", rc);
+	return rc;
+}
+
 M0_INTERNAL int m0_mdstore_create(struct m0_mdstore     *md,
 				  struct m0_fid         *pfid,
 				  struct m0_cob_attr    *attr,
@@ -159,11 +191,11 @@ M0_INTERNAL int m0_mdstore_create(struct m0_mdstore     *md,
         struct m0_cob_nskey   *nskey;
         struct m0_cob_nsrec    nsrec;
         struct m0_cob_fabrec  *fabrec;
-        struct m0_cob_fabrec  *pfabrec;
         struct m0_cob_omgrec   omgrec;
         int                    linklen;
         int                    rc;
 
+	M0_ENTRY();
         M0_ASSERT(pfid != NULL);
 
         M0_SET0(&nsrec);
@@ -209,10 +241,13 @@ M0_INTERNAL int m0_mdstore_create(struct m0_mdstore     *md,
                 m0_free(fabrec);
         } else {
                 *out = cob;
+		/** Increment cnr_nlink of parent directory. */
+		rc = m0_mdstore_dir_nlink_update(md, pfid, +1, tx);
         }
 
 out:
 	MDSTORE_FUNC_FAIL(CREATE, rc);
+	M0_LEAVE("rc: %d", rc);
         return rc;
 }
 
@@ -227,6 +262,7 @@ M0_INTERNAL int m0_mdstore_link(struct m0_mdstore       *md,
         time_t                 now;
         int                    rc;
 
+	M0_ENTRY();
         M0_ASSERT(pfid != NULL);
         M0_ASSERT(cob != NULL);
 
@@ -257,8 +293,14 @@ M0_INTERNAL int m0_mdstore_link(struct m0_mdstore       *md,
         cob->co_nsrec.cnr_cntr++;
 
         rc = m0_cob_update(cob, &cob->co_nsrec, NULL, NULL, tx);
+        if (rc != 0)
+                goto out;
+
+	/** Increment cnr_nlink of parent directory. */
+	rc = m0_mdstore_dir_nlink_update(md, pfid, +1, tx);
 out:
 	MDSTORE_FUNC_FAIL(LINK, rc);
+	M0_LEAVE("rc: %d", rc);
         return rc;
 }
 
@@ -274,6 +316,7 @@ M0_INTERNAL int m0_mdstore_unlink(struct m0_mdstore     *md,
         time_t                 now;
         int                    rc;
 
+	M0_ENTRY();
         M0_ASSERT(pfid != NULL);
         M0_ASSERT(cob != NULL);
 
@@ -372,8 +415,12 @@ M0_INTERNAL int m0_mdstore_unlink(struct m0_mdstore     *md,
                 rc = m0_cob_delete(cob, tx);
         }
 
+	/** Decrement cnr_nlink of parent directory. */
+	rc = m0_mdstore_dir_nlink_update(md, pfid, -1, tx);
+
 out:
 	MDSTORE_FUNC_FAIL(UNLINK, rc);
+	M0_LEAVE("rc: %d", rc);
         return rc;
 }
 
@@ -428,6 +475,7 @@ M0_INTERNAL int m0_mdstore_rename(struct m0_mdstore     *md,
         time_t                now;
         int                   rc;
 
+	M0_ENTRY();
         M0_ASSERT(pfid_tgt != NULL);
         M0_ASSERT(pfid_src != NULL);
 
@@ -462,6 +510,7 @@ M0_INTERNAL int m0_mdstore_rename(struct m0_mdstore     *md,
         m0_free(tgtkey);
 out:
 	MDSTORE_FUNC_FAIL(RENAME, rc);
+	M0_LEAVE("rc: %d", rc);
         return rc;
 }
 
@@ -475,6 +524,7 @@ M0_INTERNAL int m0_mdstore_setattr(struct m0_mdstore    *md,
         struct m0_cob_omgrec  *omgrec = NULL;
         int                    rc;
 
+	M0_ENTRY();
         M0_ASSERT(cob != NULL);
 
         /*
@@ -525,6 +575,7 @@ M0_INTERNAL int m0_mdstore_setattr(struct m0_mdstore    *md,
         rc = m0_cob_update(cob, nsrec, fabrec, omgrec, tx);
 
 	MDSTORE_FUNC_FAIL(SETATTR, rc);
+	M0_LEAVE("rc: %d", rc);
         return rc;
 }
 
@@ -535,6 +586,7 @@ M0_INTERNAL int m0_mdstore_getattr(struct m0_mdstore       *md,
 {
         int                rc = 0;
 
+	M0_ENTRY();
         M0_ASSERT(cob != NULL);
 
         M0_SET0(attr);
@@ -574,6 +626,7 @@ M0_INTERNAL int m0_mdstore_getattr(struct m0_mdstore       *md,
          * @todo: Copy fab fields.
          */
 	MDSTORE_FUNC_FAIL(GETATTR, rc);
+	M0_LEAVE("rc: %d", rc);
         return rc;
 }
 
@@ -591,6 +644,7 @@ M0_INTERNAL int m0_mdstore_readdir(struct m0_mdstore       *md,
         int                            second;
         int                            rc;
 
+	M0_ENTRY();
         M0_ASSERT(cob != NULL);
 
         M0_LOG(M0_DEBUG,
@@ -694,6 +748,7 @@ out_end:
 out:
         M0_LOG(M0_DEBUG, "Readdir finished with %d", rc);
 	MDSTORE_FUNC_FAIL(READDIR, rc);
+	M0_LEAVE("rc: %d", rc);
         return rc;
 }
 
@@ -706,6 +761,7 @@ M0_INTERNAL int m0_mdstore_locate(struct m0_mdstore     *md,
         struct m0_cob_oikey oikey;
         int                 rc;
 
+	M0_ENTRY();
         m0_cob_oikey_make(&oikey, fid, 0);
 
         if (flags == M0_MD_LOCATE_STORED) {
@@ -718,6 +774,7 @@ M0_INTERNAL int m0_mdstore_locate(struct m0_mdstore     *md,
                 rc = -EOPNOTSUPP;
         }
 
+	M0_LEAVE("rc: %d", rc);
         return rc;
 }
 
@@ -731,6 +788,7 @@ M0_INTERNAL int m0_mdstore_lookup(struct m0_mdstore     *md,
         int flags;
         int rc;
 
+	M0_ENTRY();
         if (pfid == NULL)
                 pfid = (struct m0_fid *)&M0_COB_ROOT_FID;
 
@@ -738,7 +796,9 @@ M0_INTERNAL int m0_mdstore_lookup(struct m0_mdstore     *md,
         if (rc != 0)
                 return rc;
         flags = (M0_CA_NSKEY_FREE | M0_CA_FABREC | M0_CA_OMGREC);
-        return m0_cob_lookup(&md->md_dom, nskey, flags, cob, tx);
+        rc = m0_cob_lookup(&md->md_dom, nskey, flags, cob, tx);
+	M0_LEAVE("rc: %d", rc);
+	return rc;
 }
 
 #define MDSTORE_PATH_MAX 1024
@@ -753,6 +813,7 @@ M0_INTERNAL int m0_mdstore_path(struct m0_mdstore       *md,
         struct m0_db_tx  tx;
         int              rc;
 
+	M0_ENTRY();
         *path = m0_alloc(MDSTORE_PATH_MAX);
         if (*path == NULL)
                 return -ENOMEM;
@@ -799,6 +860,7 @@ out:
         } else {
                 m0_db_tx_commit(&tx);
         }
+	M0_LEAVE("rc: %d", rc);
         return rc;
 }
 #undef M0_TRACE_SUBSYSTEM
-- 
1.8.3.2


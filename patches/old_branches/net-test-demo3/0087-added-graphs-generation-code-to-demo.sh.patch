From 4647d780215b41b804384b1c0f58fefbf8e44890 Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Thu, 28 Feb 2013 17:23:50 +0200
Subject: [PATCH 87/99] added graphs generation code to demo.sh

---
 net/test/demo/demo-test-run.sh |   5 +
 net/test/demo/demo.sh          | 488 ++++++++++++++++++++++++++++++++++-------
 net/test/node_bulk.c           |   9 +-
 3 files changed, 418 insertions(+), 84 deletions(-)

diff --git a/net/test/demo/demo-test-run.sh b/net/test/demo/demo-test-run.sh
index 6fd50d9..68ef9f7 100755
--- a/net/test/demo/demo-test-run.sh
+++ b/net/test/demo/demo-test-run.sh
@@ -1,6 +1,9 @@
 #!/bin/bash
 set -eux
 
+# Set this to 1 to enable removing of m0.trace.* files
+TRACE_RM=0
+
 declare -A NODES
 NODES_NR=0
 
@@ -95,6 +98,7 @@ cmd_get()
 console_run()
 {
 	ssh_sudo "$CONSOLE_SSH" "$CONSOLE_CMD"
+	[ $TRACE_RM -eq 1 ] && ssh_sudo "$CONSOLE_SSH" "rm -rf m0.trace.*"
 }
 
 host_pre()
@@ -104,6 +108,7 @@ host_pre()
 	ssh_sudo "$ssh_credentials" lctl network up
 	ssh_sudo "$ssh_credentials" insmod "$MOD_GALOIS"
 	ssh_sudo "$ssh_credentials" insmod "$MOD_M0MERO" "$PARAMS_M0MERO"
+	[ $TRACE_RM -eq 1 ] && ssh_sudo "$ssh_credentials" "rm -rf m0.trace.*"
 }
 
 host_post()
diff --git a/net/test/demo/demo.sh b/net/test/demo/demo.sh
index e387ddf..0cea8cb 100755
--- a/net/test/demo/demo.sh
+++ b/net/test/demo/demo.sh
@@ -1,6 +1,48 @@
 #!/bin/bash
-# set -eux
-# export PS4='+ ${FUNCNAME[0]:+${FUNCNAME[0]}():}line ${LINENO}: '
+set -eux
+export PS4='+ ${FUNCNAME[0]:+${FUNCNAME[0]}():}line ${LINENO}: '
+
+# Note: only 1 client/1 server configuration supported in this script.
+# Update console_cmdline_complement() calculations for other configurations.
+
+# Note: m0.trace.* files will be created in user home directory on
+# each host in test. Large number of these files can lead to
+# "no free disk space" problem. Possible solution: remove these files
+# after every test run. See TRACE_RM variable in $SCRIPT_TEST_RUN
+
+# Directory structure
+DIR_SCRIPT="$(readlink -f ${0%/*})"
+#	directory with this script
+DIR_SETUP="$DIR_SCRIPT/setup"
+#	[clients|servers]-[user|kernel]
+#		command line and kernel module parameters for
+#		the test clients/servers
+#	[clients|servers|console]-NIDs-raw
+#		LNET NID list for each client/server
+#	concurrency
+#	msg_size
+#		list of possible values of concurrency and message sizes
+DIR_DATA="$DIR_SCRIPT/data"
+#	[bulk|ping]-[kernel|user]-[kernel|user]/{concurrency}-{msg_size}-raw
+#		console output for test with given concurrency (value) and
+#		message size (value). First [kernel|user] is for test clients,
+#		second is for test server.
+DIR_RESULT="$DIR_SCRIPT/result"
+#	tables and graphs are here
+DIR_TABLES="$DIR_RESULT/tables"
+#	contains tables with ticks for both axis
+#	0X - test message size
+#	0Y - test concurrency
+DIR_TABLES_UNIFORM="$DIR_RESULT/tables-uniform"
+#	contains tables without axis ticks
+DIR_TABLES_FLIPPED="$DIR_RESULT/tables-flipped"
+#	tables are flipped (0X and 0Y are swapped) and without axis ticks
+# DIR_TABLES_*/
+#	[bulk|ping]-[kernel|user]-[kernel|user]-\
+#		[Bandwidth|RTT|MPS]-[min|max|avg|stddev]
+#	Table with aggregated measurement results for corresponding tests.
+DIR_PLOT_SCRIPTS="$DIR_RESULT/gnuplot-scripts"
+#	gnuplot scripts to produce graphs
 
 # Parameters
 # Verbose mode
@@ -8,6 +50,7 @@ VERBOSE=0
 
 # Resume execution after ^C interrupt
 RESUME=0
+RESUME2=0
 
 # Hardcoded in script
 # Transfer machine ID in test will start from this number
@@ -32,6 +75,10 @@ NET_TYPE=o2ib
 # NET_TYPE=lo
 LNET_PID=12345
 LNET_PORTAL=42
+# Maximum network speed for IB switch. Used in graphs. Info from 'lspci':
+# 08:00.0 InfiniBand: Mellanox Technologies MT26428
+# [ConnectX VPI PCIe 2.0 5GT/s - IB QDR / 10GigE] (rev b0)
+NET_BANDWIDTH_MAX=$(expr 4 "*" 1024 "*" 1024 "*" 1024)
 
 # User-supplied list of ssh credentials for test nodes and test console
 declare -a CLIENTS
@@ -50,12 +97,12 @@ BD_BUF_NR_CLIENT=
 BD_BUF_NR_SERVER=
 
 # List of parameters to test
-MSG_SIZE_LIST="64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 \
-262144 524288 1048576"
-CONCURRENCY_CLIENT_LIST="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 20 22 24 \
-26 28 30 32 40 48 56 64 80 96 112 128 160 192 224 256"
-# MSG_SIZE_LIST="512 16384 131072 1048576"
-# CONCURRENCY_CLIENT_LIST="1 4 16 256"
+# MSG_SIZE_LIST="64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 \
+# 262144 524288 1048576"
+# CONCURRENCY_CLIENT_LIST="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 20 22 24 \
+# 26 28 30 32 40 48 56 64 80 96 112 128 160 192 224 256"
+MSG_SIZE_LIST="512 16384 131072 1048576"
+CONCURRENCY_CLIENT_LIST="1 4 16 256"
 MEASUREMENT_LIST="Bandwidth RTT MPS"
 M_TYPE_LIST="min max avg stddev"
 declare -a MSG_SIZE_ARR=(${MSG_SIZE_LIST// / })
@@ -66,11 +113,6 @@ declare -a DIR_NAME_ARR=
 declare -A MSG_SIZE_REVERSE
 
 # Used by script
-DIR_SCRIPT="$(readlink -f ${0%/*})"
-DIR_SETUP="$DIR_SCRIPT/setup"
-DIR_DATA="$DIR_SCRIPT/data"
-DIR_RESULT="$DIR_SCRIPT/result"
-DIR_PLOT_SCRIPTS="$DIR_RESULT/gnuplot-scripts"
 FILE_CONSOLE_NID="$DIR_SETUP/console-NIDs-raw"
 FILE_CLIENTS_NID="$DIR_SETUP/clients-NIDs-raw"
 FILE_SERVERS_NID="$DIR_SETUP/servers-NIDs-raw"
@@ -96,7 +138,7 @@ CONSOLE_CMDLINE=
 MKDIR="mkdir -p"
 ECHO="echo -e"
 ECHO_N="echo -n"
-RM="rm -rf"
+RM_RF="rm -rf"
 # Tested with v4.6.1
 # devvm has v4.2.6 - it will not work
 GNUPLOT="gnuplot"
@@ -110,12 +152,17 @@ main()
 		configuration_parse
 		dirs_create
 		configure
+	else
+		config_load
+		script_init
+		dirs_create
+	fi
+	if [ $RESUME2 -eq 0 ]; then
+		for_each_combination dirs_make
+		for_each_combination test_run
+		for_each_table table_set0
+		for_each_combination console_output_parse
 	fi
-	config_load
-	for_each_combination dirs_make
-	for_each_combination test_run
-	for_each_combination tables_set0
-	for_each_combination console_output_parse
 	draw_graphs
 }
 
@@ -129,13 +176,14 @@ cmdline_help()
 	$ECHO "-s\tComma-separated list of servers"
 	$ECHO "-e\tConsole address"
 	$ECHO "-r\tResume script execution after ^C"
+	$ECHO "-R\tResume script execution after ^C (draw graphs)"
 }
 
 cmdline_parse()
 {
 	OPTIND=1
 	local IFS_SAVE="$IFS"
-	while getopts "?hvdc:s:e:r" opt; do
+	while getopts "?hvdc:s:e:rR" opt; do
 		case "$opt" in
 		h|\?)	cmdline_help
 			exit 0 ;;
@@ -148,6 +196,7 @@ cmdline_parse()
 			read -a SERVERS <<< "$OPTARG" ;;
 		e)	CONSOLE="$OPTARG" ;;
 		r)	RESUME=1 ;;
+		R)	RESUME=1;RESUME2=1 ;;
 		esac
 	done
 	IFS="$IFS_SAVE"
@@ -165,6 +214,7 @@ script_init()
 		((index++)) || true
 		MSG_SIZE_REVERSE["$msg_size"]="$index"
 	done
+	DIR_NAME_ARR=
 	for test_type in "ping" "bulk"; do
 		for space_c in "user" "kernel"; do
 			for space_s in "user" "kernel"; do
@@ -315,15 +365,14 @@ console_configure2()
 
 dirs_create()
 {
-	$MKDIR $DIR_SETUP
-	$MKDIR $DIR_DATA
-	$MKDIR $DIR_RESULT
-	$MKDIR $DIR_PLOT_SCRIPTS
+	$MKDIR "$DIR_SETUP" "$DIR_DATA" "$DIR_RESULT" "$DIR_PLOT_SCRIPTS"
+	$MKDIR "$DIR_TABLES" "$DIR_TABLES_UNIFORM" "$DIR_TABLES_FLIPPED"
 }
 
 files_clean()
 {
-	$RM $DIR_SETUP $DIR_DATA $DIR_RESULT
+	$RM_RF "$DIR_TABLES" "$DIR_TABLES_UNIFORM" "$DIR_TABLES_FLIPPED"
+	$RM_RF "$DIR_SETUP" "$DIR_DATA" "$DIR_RESULT" "$DIR_PLOT_SCRIPTS"
 }
 
 # $1 - 'client', 'server', 'console'
@@ -423,7 +472,9 @@ configure()
 config_load()
 {
 	MSG_SIZE_LIST=$(cat $FILE_MSG_SIZE)
+	MSG_SIZE_ARR=(${MSG_SIZE_LIST// / })
 	CONCURRENCY_CLIENT_LIST=$(cat $FILE_CONCURRENCY)
+	CONCURRENCY_CLIENT_ARR=(${CONCURRENCY_CLIENT_LIST// / })
 	CONSOLE_CMDLINE=$(cat $FILE_CONSOLE_CMD)
 }
 
@@ -463,27 +514,44 @@ test_params_echo()
 	cat "$FILE_SERVERS_CMD-$space_servers"
 }
 
-test_file_dir()
+dir3()
 {
 	local test_type=$1
 	local space_client=$2
 	local space_server=$3
 
-	echo "$DIR_DATA/$test_type-$space_client-$space_server"
+	$ECHO_N "$test_type-$space_client-$space_server"
 }
 
-result_dir()
+test_file_dir()
 {
 	local test_type=$1
 	local space_client=$2
 	local space_server=$3
 
-	echo "$DIR_RESULT/$test_type-$space_client-$space_server"
+	$ECHO_N "$DIR_DATA/$(dir3 $@)"
 }
 
 test_table_prefix()
 {
-	echo "$(result_dir $@)/table"
+	local dir_name="$1"
+	local parent_dir="${2-$DIR_TABLES}"
+
+	$ECHO_N "$parent_dir/$dir_name"
+}
+
+test_table_prefix3()
+{
+	test_table_prefix $(dir3 $@)
+}
+
+table_filename()
+{
+	local measurement="$1"
+	local m_type="$2"
+	local table_prefix="$3"
+
+	echo "$table_prefix-$measurement-$m_type"
 }
 
 test_file_prefix()
@@ -494,13 +562,12 @@ test_file_prefix()
 	local concurrency=$4
 	local msg_size=$5
 
-	echo "$(test_file_dir $@)/$concurrency-$msg_size"
+	$ECHO_N "$(test_file_dir $@)/$concurrency-$msg_size"
 }
 
 dirs_make()
 {
 	$MKDIR "$(test_file_dir $@)"
-	$MKDIR "$(result_dir $@)"
 }
 
 test_run()
@@ -525,29 +592,15 @@ test_run()
 		$SCRIPT_TEST_RUN > $file_raw
 }
 
-table_filename()
-{
-	local measurement="$1"
-	local m_type="$2"
-	local table_prefix="$3"
-
-	echo "$table_prefix-$measurement-$m_type"
-}
-
 table_set0()
 {
-	local measurement="$1"
-	local m_type="$2"
-	shift 2
-	local table_prefix=$(test_table_prefix $@)
+	local dir_name="$1"
+	local measurement="$2"
+	local m_type="$3"
+	local table_prefix="$(test_table_prefix $dir_name)"
 	table_0 > "$(table_filename $measurement $m_type $table_prefix)"
 }
 
-tables_set0()
-{
-	for_each_measurement table_set0 $@
-}
-
 # $1 - function to call
 for_each_combination()
 {
@@ -638,17 +691,12 @@ console_measurement_parse()
 	case "$measurement" in
 	"Bandwidth"|"MPS")
 		# total bandwidth (in + out)
-		# (mps_sent_ + mps_received_) * msg_size
-		if [ "$measurement" == "Bandwidth" ]; then
-			value="$msg_size"
-		else
-			value=1
-		fi
-		local mps_sent=$(console_value_get "$file_raw" server \
-				 mps_sent_$m_type)
-		local mps_received=$(console_value_get "$file_raw" server \
+		# mps_received_ * msg_size * 2
+		value=1
+		[ "$measurement" == "Bandwidth" ] && value="$msg_size"
+		local mps_received=$(console_value_get "$file_raw" client \
 				     mps_received_$m_type)
-		value="$(expr \( $mps_sent + $mps_received \) \* $value)" ;;
+		value="$(expr $mps_received \* $value \* 2)" ;;
 	"RTT")
 		# TODO save and draw server RTT for bulk tests
 		value="$(console_value_get "$file_raw" client rtt_$m_type)" ;;
@@ -665,7 +713,7 @@ console_output_parse()
 	local concurrency=$4
 	local msg_size=$5
 	local file_raw="$(test_file_prefix $@)-raw"
-	local table_prefix="$(test_table_prefix $@)"
+	local table_prefix="$(test_table_prefix3 $@)"
 
 	for_each_measurement console_measurement_parse "$table_prefix" \
 		"$file_raw" "$test_type" "$msg_size" "$concurrency"
@@ -678,7 +726,7 @@ sample_get()
 	local dir_name="$3"
 	local measurement="$4"
 	local m_type="$5"
-	local table_prefix="$DIR_RESULT/$dir_name/table"
+	local table_prefix="$(test_table_prefix $dir_name)"
 	local table_file="$(table_filename $measurement $m_type $table_prefix)"
 	local AWK_SCRIPT="{if (\$1 == $concurrency)
 			   print \$${MSG_SIZE_REVERSE[$msg_size]}}";
@@ -786,18 +834,20 @@ plot_script_2d()
 	local title="$1"
 	local plot_file="$2"
 	local out_file="$3"
+	local ox="$4"
+	local oy="$5"
 	local NF=$(head -n 1 "$plot_file" | awk '{print NF}')
 
-	$ECHO "reset"
-	$ECHO "set terminal png"
-	$ECHO "set out \"$out_file\""
+	plot_header "$title" "$out_file"
 	$ECHO "set grid"
-	$ECHO "set title \"$title\""
-	$ECHO "set datafile missing \"-\""
+	# $ECHO "set datafile missing \"-\""
 	$ECHO "set xtics nomirror rotate by -45 font \",8\""
 	$ECHO "set key noenhanced"
 	$ECHO "set style data linespoints"
-	$ECHO "# set logscale y"
+	$ECHO "set logscale y"
+	plot_axis_label "x" "$ox"
+	plot_axis_label "y" "$oy"
+	plot_axis_format "y" "$oy"
 	$ECHO "plot '$plot_file' using 2:xtic(1) title columnheader(2),	\\"
 	$ECHO "for [i=3:$NF] '' using i title columnheader(i)"
 }
@@ -813,14 +863,16 @@ draw_graph_2d_prepare()
 	local dir_name="$3"
 	local measurement="$4"
 	local m_type="$5"
-	local root="$msg_size-$concurrency-$dir_name-$measurement-$m_type"
+	# local root="$msg_size-$concurrency-$dir_name-$measurement-$m_type"
+	local root="2d-$measurement-$m_type-$dir_name-$msg_size-$concurrency"
 	local script_prefix="$DIR_PLOT_SCRIPTS/$root"
 	local plot_file="$script_prefix.txt"
 	local script_file="$script_prefix.gnu"
 	local out_file="$DIR_RESULT/$root.png"
 
-	$func_iterate $func_sample_get $@ > "$plot_file"
-	plot_script_2d "$title" "$plot_file" "$out_file" > "$script_file"
+	iterate_ox_$func_iterate samples_get_$func_sample_get $@ > "$plot_file"
+	plot_script_2d "$title" "$plot_file" "$out_file" \
+		"$func_iterate" "$measurement" > "$script_file"
 }
 
 draw_graph_2d_measurement()
@@ -839,15 +891,14 @@ draw_graph_2d_measurement()
 	msg_size="0X"
 	for concurrency in ${CONCURRENCY_CLIENT_ARR[@]}; do
 		title="$title_prefix. Concurrency = $concurrency"
-		draw_graph_2d_prepare iterate_ox_msg_size samples_get_dir_name \
+		draw_graph_2d_prepare msg_size dir_name \
 			"$title" "$msg_size" "$concurrency" \
 			"$dir_name" "$measurement" "$m_type"
 	done
 	concurrency="0X"
 	for msg_size in ${MSG_SIZE_ARR[@]}; do
 		title="$title_prefix. Test message size = $msg_size bytes"
-		draw_graph_2d_prepare iterate_ox_concurrency \
-			samples_get_dir_name \
+		draw_graph_2d_prepare concurrency dir_name \
 			"$title" "$msg_size" "$concurrency" \
 			"$dir_name" "$measurement" "$m_type"
 	done
@@ -855,8 +906,7 @@ draw_graph_2d_measurement()
 	concurrency="SAMPLES"
 	for dir_name in ${DIR_NAME_ARR[@]}; do
 		title="$title_prefix. $dir_name"
-		draw_graph_2d_prepare iterate_ox_msg_size \
-			samples_get_concurrency \
+		draw_graph_2d_prepare msg_size concurrency \
 			"$title" "$msg_size" "$concurrency" \
 			"$dir_name" "$measurement" "$m_type"
 	done
@@ -864,8 +914,7 @@ draw_graph_2d_measurement()
 	concurrency="0X"
 	for dir_name in ${DIR_NAME_ARR[@]}; do
 		title="$title_prefix. $dir_name"
-		draw_graph_2d_prepare iterate_ox_concurrency \
-			samples_get_msg_size \
+		draw_graph_2d_prepare concurrency msg_size \
 			"$title" "$msg_size" "$concurrency" \
 			"$dir_name" "$measurement" "$m_type"
 	done
@@ -875,8 +924,7 @@ draw_graph_2d_measurement()
 		for dir_name in ${DIR_NAME_ARR[@]}; do
 			title="$title_prefix. Concurrency = $concurrency"
 			title="$title, $dir_name"
-			draw_graph_2d_prepare iterate_ox_msg_size \
-				samples_get_m_type \
+			draw_graph_2d_prepare msg_size m_type \
 				"$title" "$msg_size" "$concurrency" \
 				"$dir_name" "$measurement" "$m_type"
 		done
@@ -886,8 +934,7 @@ draw_graph_2d_measurement()
 		for dir_name in ${DIR_NAME_ARR[@]}; do
 			title="$title_prefix. Test message size = $msg_size"
 			title="$title, $dir_name"
-			draw_graph_2d_prepare iterate_ox_concurrency \
-				samples_get_m_type \
+			draw_graph_2d_prepare concurrency m_type \
 				"$title" "$msg_size" "$concurrency" \
 				"$dir_name" "$measurement" "$m_type"
 		done
@@ -907,12 +954,287 @@ draw_graphs_2d()
 	done
 }
 
+table_make_uniform()
+{
+	sed 1d | awk '{$1=""; print}' | sed -e 's/^[ \t]*//'
+}
+
 # TODO
-draw_graphs_3d()
+table_make_flipped()
+{
+	cat
+}
+
+# make gnuplot uniform tables (without axis ticks)
+table_additional_generate()
+{
+	local dir_name="$1"
+	local measurement="$2"
+	local m_type="$3"
+	local table="$(table_filename $measurement $m_type \
+		       $(test_table_prefix $dir_name))"
+	local table_uniform="$(table_filename $measurement $m_type \
+			$(test_table_prefix $dir_name $DIR_TABLES_UNIFORM))"
+	local table_flipped="$(table_filename $measurement $m_type \
+			$(test_table_prefix $dir_name $DIR_TABLES_FLIPPED))"
+
+	table_make_uniform < "$table" > "$table_uniform"
+	table_make_flipped < "$table_uniform" > "$table_flipped"
+}
+
+plot_header()
+{
+	local title="$1"
+	local img_file="$2"
+
+	$ECHO "reset"
+	$ECHO "set terminal png"
+	$ECHO "set out \"$img_file\""
+	$ECHO "set title \"$title\""
+	$ECHO "set timestamp"
+}
+
+plot_3d_header()
+{
+	local title="$1"
+	local img_file="$2"
+
+	plot_header "$@"
+	$ECHO "set logscale z"
+	$ECHO "set contour both"
+	$ECHO "set grid"
+}
+
+plot_3d_table()
+{
+	local dir_name="$1"
+	local measurement="$2"
+	local m_type="$3"
+	local table_file="$(table_filename $measurement $m_type \
+			    $(test_table_prefix $dir_name $DIR_TABLES_UNIFORM))"
+	$ECHO_N "splot \"$table_file\" matrix "
+	[ "$measurement" == "RTT" ] && $ECHO_N "using 1:2:(\$3/1E+9) "
+	$ECHO "with lines title \"$measurement-$m_type\""
+}
+
+plot_ticks_bcount_IEC()
+{
+	local size="$1"
+
+	if [ $size -lt 1024 ]; then
+		$ECHO_N "${size}B"
+	elif [ $size -lt $(expr 1024 "*" 1024) ]; then
+		$ECHO_N "$(expr $size / 1024)KiB"
+	else
+		$ECHO_N "$(expr $size / 1024 / 1024)MiB"
+	fi
+}
+
+# $1 - "x" or "y"
+# text only for even ticks (0, 2, ...)
+plot_ticks_msg_size()
+{
+	local ticks=""
+	local skip="$1"
+	local i=0
+	local msg_size
+
+	for msg_size in ${MSG_SIZE_ARR[@]}; do
+		[ $i -ne 0 ] && ticks="$ticks, "
+		if [ $(expr $i % $skip) -eq 0 ]; then
+			ticks="$ticks\"$(plot_ticks_bcount_IEC $msg_size)\" $i"
+		else
+			ticks="$ticks\"\" $i"
+		fi
+		((i++)) || true
+	done
+	$ECHO_N "$ticks"
+}
+
+plot_ticks_concurrency()
+{
+	local ticks=""
+	local skip="$1"
+	local i=0
+	local concurrency
+
+	for concurrency in ${CONCURRENCY_CLIENT_ARR[@]}; do
+		[ $i -ne 0 ] && ticks="$ticks, "
+		if [ $(expr $i % $skip) -eq 0 ]; then
+			ticks="$ticks\"$concurrency\" $i"
+		else
+			ticks="$ticks\"\" $i"
+		fi
+		((i++)) || true
+	done
+	$ECHO_N "$ticks"
+}
+
+plot_ticks()
+{
+	local axis="$1"
+	local param="$2"
+	local skip="$3"
+	$ECHO "set ${axis}tics font \",9\" ($(plot_ticks_${param} $skip))"
+}
+
+plot_axis_label()
+{
+	local axis="$1"
+	local measurement="$2"
+	declare -A measurement_axis_label
+
+	measurement_axis_label["msg_size"]="Test message size"
+	measurement_axis_label["concurrency"]="Concurrency"
+	measurement_axis_label["Bandwidth"]="Bandwidth"
+	measurement_axis_label["RTT"]="Round-trip time"
+	measurement_axis_label["MPS"]="Messages Per Second"
+	$ECHO "set ${axis}label \"${measurement_axis_label[$measurement]}\""
+}
+
+plot_cntrparam()
+{
+	local measurement="$1"
+	local bandwidth=""
+	local bandwidth1
+	local percent
+	declare -A measurement_param
+
+	for percent in 10 50 90 98; do
+		bandwidth1=$(echo "scale=3; \
+			     $percent / 100 * $NET_BANDWIDTH_MAX" | bc)
+		bandwidth="$bandwidth,$bandwidth1"
+	done
+	measurement_param["Bandwidth"]="$(echo $bandwidth | sed s/^.//)"
+	measurement_param["RTT"]="1E-4,3E-4,7E-4,1E-3,5E-3"
+	measurement_param["MPS"]="1E+3,3E+3,1E+4,3E+4,1E+5"
+	$ECHO "set cntrparam levels discrete ${measurement_param[$measurement]}"
+}
+
+declare -A measurement_format
+measurement_format["Bandwidth"]="%.2b %BB/s"
+measurement_format["msg_size"]="%.2b %BB"
+measurement_format["concurrency"]="%.0f"
+measurement_format["MPS"]="%.0f"
+measurement_format["RTT"]="%.0s %cs"
+
+plot_clabel()
+{
+	local measurement="$1"
+
+	$ECHO "set clabel \"${measurement_format[$measurement]}\""
+}
+
+plot_axis_format()
+{
+	local axis="$1"
+	local measurement="$2"
+	$ECHO "set format $axis \"${measurement_format[$measurement]}\""
+	if [ "$axis" == "z" ]; then
+		$ECHO "set ztics font \",8\""
+	fi
+}
+
+plot_axis()
+{
+	local axis="$1"
+	local measurement="$2"
+	local ticks_skip="$3"
+
+	plot_ticks "$axis" "$measurement" "$ticks_skip"
+	plot_axis_label "$axis" "$measurement"
+	plot_axis_format "$axis" "$measurement"
+}
+
+plot_pm3d()
+{
+	local measurement="$1"
+
+	$ECHO "set pm3d at bstbst map"
+	$ECHO "set palette"
+	$ECHO "set cbtics format " \
+	      "\"${measurement_format[$measurement]}\" font \",8\""
+}
+
+plot_3d_fence()
 {
 	true
 }
 
+draw_graph_3d_table()
+{
+	local dir_name="$1"
+	local measurement="$2"
+	local m_type="$3"
+	local draw_type="$4"
+	local file_root="$draw_type-$measurement-$dir_name-$m_type"
+	local plot_file="$DIR_PLOT_SCRIPTS/$file_root.gnu"
+	local img_file="$DIR_RESULT/$file_root.png"
+	local title="$file_root"
+
+	plot_3d_header "$title" "$img_file" > "$plot_file"
+	plot_axis "x" "msg_size" 2 >> "$plot_file"
+	plot_axis "y" "concurrency" 3 >> "$plot_file"
+	# plot_axis_label "z" "$measurement" >> "$plot_file"
+	plot_axis_format "z" "$measurement" >> "$plot_file"
+	plot_cntrparam "$measurement" >> "$plot_file"
+	plot_clabel "$measurement" >> "$plot_file"
+	[ "$draw_type" == "pm3d" ] && \
+		plot_pm3d "$measurement" >> "$plot_file"
+	plot_3d_table "$@" >> "$plot_file"
+}
+
+draw_graph_3d_measurement()
+{
+	local measurement="$1"
+	local title_prefix="$2"
+	local dir_name
+	local m_type
+	local plot_file
+	local title
+
+	for_each_table draw_graph_3d_table "3d"
+	for_each_table draw_graph_3d_table "pm3d"
+	# TODO fence graphs (if needed)
+	return
+	for dir_name in ${DIR_NAME_ARR[@]}; do
+		plot_file="$DIR_PLOT_SCRIPTS/3d-$measurement-$dir_name.gnu"
+		img_file="$DIR_RESULT/3d-$measurement-$dir_name.png"
+		title="$title_prefix. $dir_name"
+		for m_type in ${M_TYPE_ARR[@]}; do
+			plot_3d_table "$dir_name" "$measurement" \
+				"$m_type" >> "$plot_file"
+		done
+	done
+}
+
+for_each_table()
+{
+	local func="$1"
+	shift 1
+	for dir_name in ${DIR_NAME_ARR[@]}; do
+		for measurement in ${MEASUREMENT_ARR[@]}; do
+			for m_type in ${M_TYPE_ARR[@]}; do
+				$func "$dir_name" "$measurement" "$m_type" "$@"
+			done
+		done
+	done
+}
+
+draw_graphs_3d()
+{
+	declare -A title_start
+
+	for_each_table table_additional_generate
+	title_start["Bandwidth"]="Bandwidth"
+	title_start["RTT"]="Round-trip time"
+	title_start["MPS"]="Messages per Second"
+	for measurement in ${MEASUREMENT_ARR[@]}; do
+		draw_graph_3d_measurement "$measurement" \
+			"${title_start[$measurement]}"
+	done
+}
+
 gnuplot_run()
 {
 	find "$DIR_PLOT_SCRIPTS" -name "*.gnu" | xargs -L1 $GNUPLOT
diff --git a/net/test/node_bulk.c b/net/test/node_bulk.c
index de25f4a..bcf89e0 100644
--- a/net/test/node_bulk.c
+++ b/net/test/node_bulk.c
@@ -1280,7 +1280,14 @@ static void node_bulk_worker(struct node_bulk_ctx *ctx)
 		M0_ASSERT(ergo(pending, ctx->nbc_callback_executed));
 		/* state transitions from final states */
 		node_bulk_state_transition_auto_all(ctx);
-		/* update copy of statistics */
+		/*
+		 * Update copy of statistics.
+		 * @todo It is possible to have all work done in
+		 * single m0_net_buffer_event_deliver_all(),
+		 * especially if number of concurrent buffers is high.
+		 * STATUS command will give inconsistent results for
+		 * test clients and test servers in this case.
+		 */
 		m0_net_test_nh_sd_copy_locked(&ctx->nbc_nh);
 		/* wait for STOP command or buffer event */
 		if (!ctx->nbc_callback_executed)
-- 
1.8.3.2


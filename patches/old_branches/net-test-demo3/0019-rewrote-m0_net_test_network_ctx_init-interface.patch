From cbf5955defb5a4cef5294727dd184710e890966d Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Sat, 26 Jan 2013 02:01:43 +0200
Subject: [PATCH 19/99] rewrote m0_net_test_network_ctx_init() interface

---
 net/test/commands.c   |  33 +++++----
 net/test/network.c    | 191 +++++++++++++++++++++++---------------------------
 net/test/network.h    |  89 ++++++++++++-----------
 net/test/node_bulk.c  |  64 +++++++++--------
 net/test/node_ping.c  |  28 ++++----
 net/test/ut/network.c |  59 +++++++++-------
 6 files changed, 236 insertions(+), 228 deletions(-)

diff --git a/net/test/commands.c b/net/test/commands.c
index c9ee713..4091e6b 100644
--- a/net/test/commands.c
+++ b/net/test/commands.c
@@ -282,7 +282,7 @@ static void commands_cb_impossible(struct m0_net_test_network_ctx *ctx,
 	M0_IMPOSSIBLE("commands bulk buffer callback is impossible");
 }
 
-static const struct m0_net_tm_callbacks m0_net_test_commands_tm_cb = {
+static const struct m0_net_tm_callbacks net_test_commands_tm_cb = {
 	.ntc_event_cb = commands_tm_event_cb
 };
 
@@ -360,9 +360,9 @@ static int commands_initfini(struct m0_net_test_cmd_ctx *ctx,
 			     struct m0_net_test_slist *ep_list,
 			     bool init)
 {
-	struct m0_net_test_network_timeouts timeouts;
-	int				    i;
-	int				    rc = -EEXIST;
+	struct m0_net_test_network_cfg net_cfg;
+	int			       i;
+	int			       rc = -EEXIST;
 
 	M0_PRE(ctx != NULL);
 	if (!init)
@@ -374,9 +374,6 @@ static int commands_initfini(struct m0_net_test_cmd_ctx *ctx,
 	if (!m0_net_test_slist_unique(ep_list))
 		goto fail;
 
-	timeouts = m0_net_test_network_timeouts_never();
-	timeouts.ntnt_timeout[M0_NET_QT_MSG_SEND] = send_timeout;
-
 	ctx->ntcc_ep_nr   = ep_list->ntsl_nr;
 	ctx->ntcc_send_cb = send_cb;
 
@@ -396,14 +393,16 @@ static int commands_initfini(struct m0_net_test_cmd_ctx *ctx,
 	if (ctx->ntcc_buf_status == NULL)
 		goto free_rb;
 
-	rc = m0_net_test_network_ctx_init(&ctx->ntcc_net, cmd_ep,
-					  &m0_net_test_commands_tm_cb,
-					  &commands_buffer_cb,
-					  M0_NET_TEST_CMD_SIZE_MAX,
-					  3 * ctx->ntcc_ep_nr,
-					  0, 0,
-					  ep_list->ntsl_nr,
-					  &timeouts, false);
+	M0_SET0(&net_cfg);
+	net_cfg.ntncfg_tm_cb	     = net_test_commands_tm_cb;
+	net_cfg.ntncfg_buf_cb	     = commands_buffer_cb;
+	net_cfg.ntncfg_buf_size_ping = M0_NET_TEST_CMD_SIZE_MAX;
+	net_cfg.ntncfg_buf_ping_nr   = 3 * ctx->ntcc_ep_nr;
+	net_cfg.ntncfg_ep_max	     = ep_list->ntsl_nr;
+	net_cfg.ntncfg_timeouts	     = m0_net_test_network_timeouts_never();
+	net_cfg.ntncfg_timeouts.ntnt_timeout[M0_NET_QT_MSG_SEND] = send_timeout;
+
+	rc = m0_net_test_network_ctx_init(&ctx->ntcc_net, &net_cfg, cmd_ep);
 	if (rc != 0)
 		goto free_buf_status;
 
@@ -592,9 +591,9 @@ bool m0_net_test_commands_invariant(struct m0_net_test_cmd_ctx *ctx)
 		return false;
 	if (ctx->ntcc_ep_nr != ctx->ntcc_net.ntc_ep_nr)
 		return false;
-	if (ctx->ntcc_ep_nr * 3 != ctx->ntcc_net.ntc_buf_ping_nr)
+	if (ctx->ntcc_ep_nr * 3 != ctx->ntcc_net.ntc_cfg.ntncfg_buf_ping_nr)
 		return false;
-	if (ctx->ntcc_net.ntc_buf_bulk_nr != 0)
+	if (ctx->ntcc_net.ntc_cfg.ntncfg_buf_bulk_nr != 0)
 		return false;
 	return true;
 }
diff --git a/net/test/network.c b/net/test/network.c
index a09787f..ba96acb 100644
--- a/net/test/network.c
+++ b/net/test/network.c
@@ -81,7 +81,8 @@ static uint32_t cb_buf_index_extract(const struct m0_net_buffer_event *ev,
 	type_ping = q == M0_NET_QT_MSG_SEND || q == M0_NET_QT_MSG_RECV;
 	arr = type_ping ? ctx->ntc_buf_ping : ctx->ntc_buf_bulk;
 	index = ev->nbe_buffer - arr;
-	index_max = type_ping ? ctx->ntc_buf_ping_nr : ctx->ntc_buf_bulk_nr;
+	index_max = type_ping ? ctx->ntc_cfg.ntncfg_buf_ping_nr :
+				ctx->ntc_cfg.ntncfg_buf_bulk_nr;
 
 	M0_POST(index >= 0 && index < index_max);
 
@@ -115,7 +116,7 @@ static void cb_default(const struct m0_net_buffer_event *ev)
 		buf->nb_offset = 0;
 	}
 
-	ctx->ntc_buf_cb.ntnbc_cb[q](ctx, buf_index, q, ev);
+	ctx->ntc_cfg.ntncfg_buf_cb.ntnbc_cb[q](ctx, buf_index, q, ev);
 }
 
 static struct m0_net_buffer_callbacks net_test_network_buf_cb = {
@@ -256,67 +257,62 @@ bool m0_net_test_network_ctx_invariant(struct m0_net_test_network_ctx *ctx)
 {
 	M0_PRE(ctx != NULL);
 
-	return ctx->ntc_ep_nr <= ctx->ntc_ep_max;
+	return ctx->ntc_ep_nr <= ctx->ntc_cfg.ntncfg_ep_max;
 }
 
-int m0_net_test_network_ctx_init(struct m0_net_test_network_ctx *ctx,
-				 const char *tm_addr,
-				 const struct m0_net_tm_callbacks *tm_cb,
-				 const struct
-				 m0_net_test_network_buffer_callbacks *buf_cb,
-				 m0_bcount_t buf_size_ping,
-				 uint32_t buf_ping_nr,
-				 m0_bcount_t buf_size_bulk,
-				 uint32_t buf_bulk_nr,
-				 uint32_t ep_max,
-				 const struct m0_net_test_network_timeouts
-				 *timeouts,
-				 bool sync)
+static int net_test_network_ctx_initfini(struct m0_net_test_network_ctx *ctx,
+					 struct m0_net_test_network_cfg *cfg,
+					 const char *tm_addr)
 {
 	struct m0_clink tmwait;
 	int		rc;
+	int		i;
+
 
-	M0_PRE(ctx     != NULL);
-	M0_PRE(tm_addr != NULL);
-	M0_PRE(tm_cb   != NULL);
-	M0_PRE(buf_cb  != NULL);
+	M0_PRE(ctx != NULL);
+	M0_PRE(equi(cfg != NULL, tm_addr != NULL));
+
+	if (cfg == NULL)
+		goto fini;
 
 	M0_SET0(ctx);
+	ctx->ntc_cfg = *cfg;
 
+	rc = -ENOMEM;
+	/** @todo make ctx->ntc_dom embedded into ctx */
 	M0_ALLOC_PTR(ctx->ntc_dom);
 	if (ctx->ntc_dom == NULL)
-		return -ENOMEM;
+		goto fail;
+	M0_ALLOC_PTR(ctx->ntc_tm);
+	if (ctx->ntc_tm == NULL)
+		goto free_dom;
+	M0_ALLOC_ARR(ctx->ntc_buf_ping, ctx->ntc_cfg.ntncfg_buf_ping_nr);
+	if (ctx->ntc_buf_ping == NULL)
+		goto free_tm;
+	M0_ALLOC_ARR(ctx->ntc_buf_bulk, ctx->ntc_cfg.ntncfg_buf_bulk_nr);
+	if (ctx->ntc_buf_bulk == NULL)
+		goto free_buf_ping;
+	M0_ALLOC_ARR(ctx->ntc_ep, ctx->ntc_cfg.ntncfg_ep_max);
+	if (ctx->ntc_buf_bulk == NULL)
+		goto free_buf_bulk;
 
 	/** @todo replace proc ctx */
 	rc = m0_net_domain_init(ctx->ntc_dom, &m0_net_lnet_xprt,
 				&m0_addb_proc_ctx);
 	if (rc != 0)
-		goto free_dom;
-
-	ctx->ntc_tm_cb	     = *tm_cb;
-	ctx->ntc_buf_cb	     = *buf_cb;
-	ctx->ntc_buf_ping_nr = buf_ping_nr;
-	ctx->ntc_buf_bulk_nr = buf_bulk_nr;
-	ctx->ntc_ep_nr	     = 0;
-	ctx->ntc_ep_max	     = ep_max;
-	ctx->ntc_timeouts    = timeouts != NULL ? *timeouts :
-			       m0_net_test_network_timeouts_never();
+		goto free_ep;
 
 	/* init and start tm */
-	M0_ALLOC_PTR(ctx->ntc_tm);
-	if (ctx->ntc_tm == NULL)
-		goto fini_dom;
-
 	ctx->ntc_tm->ntm_state     = M0_NET_TM_UNDEFINED;
-	ctx->ntc_tm->ntm_callbacks = &ctx->ntc_tm_cb;
-
+	ctx->ntc_tm->ntm_callbacks = &ctx->ntc_cfg.ntncfg_tm_cb;
 	/** @todo replace gmc and ctx */
 	rc = m0_net_tm_init(ctx->ntc_tm, ctx->ntc_dom, &m0_addb_gmc,
 			    &m0_addb_proc_ctx);
 	if (rc != 0)
-		goto free_tm;
+		goto fini_dom;
 
-	rc = sync ? m0_net_buffer_event_deliver_synchronously(ctx->ntc_tm) : 0;
+	rc = ctx->ntc_cfg.ntncfg_sync ?
+	     m0_net_buffer_event_deliver_synchronously(ctx->ntc_tm) : 0;
 	if (rc != 0)
 		goto fini_tm;
 
@@ -328,78 +324,68 @@ int m0_net_test_network_ctx_init(struct m0_net_test_network_ctx *ctx,
 	m0_clink_fini(&tmwait);
 	if (rc != 0)
 		goto fini_tm;
-	rc = -ECONNREFUSED;
-	if (ctx->ntc_tm->ntm_state != M0_NET_TM_STARTED)
+	if (ctx->ntc_tm->ntm_state != M0_NET_TM_STARTED) {
+		rc = -ECONNREFUSED;
 		goto fini_tm;
+	}
 
-	rc = -ENOMEM;
-	/* alloc arrays */
-	M0_ALLOC_ARR(ctx->ntc_buf_ping, ctx->ntc_buf_ping_nr);
-	if (ctx->ntc_buf_ping == NULL)
-		goto stop_tm;
-	M0_ALLOC_ARR(ctx->ntc_buf_bulk, ctx->ntc_buf_bulk_nr);
-	if (ctx->ntc_buf_bulk == NULL)
-		goto free_buf_bulk;
-	M0_ALLOC_ARR(ctx->ntc_ep, ctx->ntc_ep_max);
-	if (ctx->ntc_buf_bulk == NULL)
-		goto free_buf_ping;
-
-	/* init buffers */
-	rc = net_test_bufs_init(ctx->ntc_buf_ping, ctx->ntc_buf_ping_nr,
-			buf_size_ping, ctx);
+	/* init and register buffers */
+	rc = net_test_bufs_init(ctx->ntc_buf_ping,
+				ctx->ntc_cfg.ntncfg_buf_ping_nr,
+				ctx->ntc_cfg.ntncfg_buf_size_ping, ctx);
 	if (rc != 0)
-		goto free_ep;
-	rc = net_test_bufs_init(ctx->ntc_buf_bulk, ctx->ntc_buf_bulk_nr,
-			buf_size_bulk, ctx);
+		goto stop_tm;
+	rc = net_test_bufs_init(ctx->ntc_buf_bulk,
+				ctx->ntc_cfg.ntncfg_buf_bulk_nr,
+				ctx->ntc_cfg.ntncfg_buf_size_bulk, ctx);
 	if (rc != 0)
-		goto free_bufs_ping;
+		goto fini_buf_ping;
 
 	M0_POST(m0_net_test_network_ctx_invariant(ctx));
 	goto success;
+fini:
+	M0_PRE(m0_net_test_network_ctx_invariant(ctx));
 
-    free_bufs_ping:
-	net_test_bufs_fini(ctx->ntc_buf_ping, ctx->ntc_buf_ping_nr,
+	rc = 0;
+	for (i = 0; i < ctx->ntc_ep_nr; ++i)
+		m0_net_end_point_put(ctx->ntc_ep[i]);
+	net_test_bufs_fini(ctx->ntc_buf_bulk, ctx->ntc_cfg.ntncfg_buf_bulk_nr,
 			   ctx->ntc_dom);
-    free_ep:
+fini_buf_ping:
+	net_test_bufs_fini(ctx->ntc_buf_ping, ctx->ntc_cfg.ntncfg_buf_ping_nr,
+			   ctx->ntc_dom);
+stop_tm:
+	net_test_tm_stop(ctx->ntc_tm);
+fini_tm:
+	m0_net_tm_fini(ctx->ntc_tm);
+fini_dom:
+	m0_net_domain_fini(ctx->ntc_dom);
+free_ep:
 	m0_free(ctx->ntc_ep);
-    free_buf_bulk:
+free_buf_bulk:
 	m0_free(ctx->ntc_buf_bulk);
-    free_buf_ping:
+free_buf_ping:
 	m0_free(ctx->ntc_buf_ping);
-    stop_tm:
-	net_test_tm_stop(ctx->ntc_tm);
-    fini_tm:
-	m0_net_tm_fini(ctx->ntc_tm);
-    free_tm:
+free_tm:
 	m0_free(ctx->ntc_tm);
-    fini_dom:
-	m0_net_domain_fini(ctx->ntc_dom);
-    free_dom:
+free_dom:
 	m0_free(ctx->ntc_dom);
-    success:
+fail:
+success:
 	return rc;
 }
 
-void m0_net_test_network_ctx_fini(struct m0_net_test_network_ctx *ctx)
+int m0_net_test_network_ctx_init(struct m0_net_test_network_ctx *ctx,
+				 struct m0_net_test_network_cfg *cfg,
+				 const char *tm_addr)
 {
-	int i;
-
-	M0_PRE(m0_net_test_network_ctx_invariant(ctx));
+	return net_test_network_ctx_initfini(ctx, cfg, tm_addr);
+}
 
-	for (i = 0; i < ctx->ntc_ep_nr; ++i)
-		m0_net_end_point_put(ctx->ntc_ep[i]);
-	net_test_bufs_fini(ctx->ntc_buf_bulk, ctx->ntc_buf_bulk_nr,
-			   ctx->ntc_dom);
-	net_test_bufs_fini(ctx->ntc_buf_ping, ctx->ntc_buf_ping_nr,
-			   ctx->ntc_dom);
-	m0_free(ctx->ntc_ep);
-	m0_free(ctx->ntc_buf_bulk);
-	m0_free(ctx->ntc_buf_ping);
-	net_test_tm_stop(ctx->ntc_tm);
-	m0_net_tm_fini(ctx->ntc_tm);
-	m0_free(ctx->ntc_tm);
-	m0_net_domain_fini(ctx->ntc_dom);
-	m0_free(ctx->ntc_dom);
+void m0_net_test_network_ctx_fini(struct m0_net_test_network_ctx *ctx)
+{
+	int rc = net_test_network_ctx_initfini(ctx, NULL, NULL);
+	M0_ASSERT(rc == 0);
 }
 
 int m0_net_test_network_ep_add(struct m0_net_test_network_ctx *ctx,
@@ -410,7 +396,7 @@ int m0_net_test_network_ep_add(struct m0_net_test_network_ctx *ctx,
 	M0_PRE(m0_net_test_network_ctx_invariant(ctx));
 	M0_PRE(ep_addr != NULL);
 
-	if (ctx->ntc_ep_nr != ctx->ntc_ep_max) {
+	if (ctx->ntc_ep_nr != ctx->ntc_cfg.ntncfg_ep_max) {
 		rc = m0_net_end_point_create(&ctx->ntc_ep[ctx->ntc_ep_nr],
 					     ctx->ntc_tm, ep_addr);
 		M0_ASSERT(rc <= 0);
@@ -450,7 +436,7 @@ static int net_test_buf_queue(struct m0_net_test_network_ctx *ctx,
 			      struct m0_net_buffer *nb,
 			      enum m0_net_queue_type q)
 {
-	m0_time_t timeout = ctx->ntc_timeouts.ntnt_timeout[q];
+	m0_time_t timeout = ctx->ntc_cfg.ntncfg_timeouts.ntnt_timeout[q];
 
 	M0_PRE((nb->nb_flags & M0_NET_BUF_QUEUED) == 0);
 	M0_PRE(ergo(q == M0_NET_QT_MSG_SEND, nb->nb_ep != NULL));
@@ -471,7 +457,7 @@ int m0_net_test_network_msg_send_ep(struct m0_net_test_network_ctx *ctx,
 	struct m0_net_buffer *nb;
 
 	M0_PRE(m0_net_test_network_ctx_invariant(ctx));
-	M0_PRE(buf_ping_index < ctx->ntc_buf_ping_nr);
+	M0_PRE(buf_ping_index < ctx->ntc_cfg.ntncfg_buf_ping_nr);
 
 	nb = &ctx->ntc_buf_ping[buf_ping_index];
 	nb->nb_ep = ep;
@@ -484,7 +470,7 @@ int m0_net_test_network_msg_send(struct m0_net_test_network_ctx *ctx,
 				 uint32_t ep_index)
 {
 	M0_PRE(m0_net_test_network_ctx_invariant(ctx));
-	M0_PRE(buf_ping_index < ctx->ntc_buf_ping_nr);
+	M0_PRE(buf_ping_index < ctx->ntc_cfg.ntncfg_buf_ping_nr);
 	M0_PRE(ep_index < ctx->ntc_ep_nr);
 
 	return m0_net_test_network_msg_send_ep(ctx, buf_ping_index,
@@ -495,7 +481,7 @@ int m0_net_test_network_msg_recv(struct m0_net_test_network_ctx *ctx,
 				 uint32_t buf_ping_index)
 {
 	M0_PRE(m0_net_test_network_ctx_invariant(ctx));
-	M0_PRE(buf_ping_index < ctx->ntc_buf_ping_nr);
+	M0_PRE(buf_ping_index < ctx->ntc_cfg.ntncfg_buf_ping_nr);
 
 	return net_test_buf_queue(ctx, &ctx->ntc_buf_ping[buf_ping_index],
 			M0_NET_QT_MSG_RECV);
@@ -509,7 +495,7 @@ int m0_net_test_network_bulk_enqueue(struct m0_net_test_network_ctx *ctx,
 	struct m0_net_buffer *buf;
 
 	M0_PRE(m0_net_test_network_ctx_invariant(ctx));
-	M0_PRE(buf_bulk_index < ctx->ntc_buf_bulk_nr);
+	M0_PRE(buf_bulk_index < ctx->ntc_cfg.ntncfg_buf_bulk_nr);
 
 	buf = &ctx->ntc_buf_bulk[buf_bulk_index];
 	if (q == M0_NET_QT_PASSIVE_BULK_SEND ||
@@ -657,7 +643,7 @@ static size_t network_bd_nr_add(struct m0_net_test_network_ctx *ctx,
 	size_t		  nr;
 
 	M0_PRE(ctx != NULL);
-	M0_PRE(buf_ping_index < ctx->ntc_buf_ping_nr);
+	M0_PRE(buf_ping_index < ctx->ntc_cfg.ntncfg_buf_ping_nr);
 	M0_PRE(M0_IN(value, (-1, 0, 1)));
 
 	bv = &m0_net_test_network_buf(ctx, M0_NET_TEST_BUF_PING,
@@ -691,8 +677,8 @@ m0_net_test_network_bd_serialize(enum m0_net_test_serialize_op op,
 
 	M0_PRE(op == M0_NET_TEST_SERIALIZE || op == M0_NET_TEST_DESERIALIZE);
 	M0_PRE(ctx != NULL);
-	M0_PRE(buf_bulk_index < ctx->ntc_buf_bulk_nr);
-	M0_PRE(buf_ping_index < ctx->ntc_buf_ping_nr);
+	M0_PRE(buf_bulk_index < ctx->ntc_cfg.ntncfg_buf_bulk_nr);
+	M0_PRE(buf_ping_index < ctx->ntc_cfg.ntncfg_buf_ping_nr);
 
 	/*
 	M0_LOG(M0_DEBUG, "%d %s", op, ctx->ntc_tm->ntm_ep->nep_addr);
@@ -755,7 +741,8 @@ m0_net_test_network_buf(struct m0_net_test_network_ctx *ctx,
 	M0_PRE(buf_type == M0_NET_TEST_BUF_PING ||
 	       buf_type == M0_NET_TEST_BUF_BULK);
 	M0_PRE(buf_index < (buf_type == M0_NET_TEST_BUF_PING ?
-	       ctx->ntc_buf_ping_nr : ctx->ntc_buf_bulk_nr));
+	       ctx->ntc_cfg.ntncfg_buf_ping_nr :
+	       ctx->ntc_cfg.ntncfg_buf_bulk_nr));
 
 	return buf_type == M0_NET_TEST_BUF_PING ?
 		&ctx->ntc_buf_ping[buf_index] : &ctx->ntc_buf_bulk[buf_index];
diff --git a/net/test/network.h b/net/test/network.h
index c8d4f42..e040af7 100644
--- a/net/test/network.h
+++ b/net/test/network.h
@@ -70,27 +70,50 @@ struct m0_net_test_network_timeouts {
 };
 
 /**
+ * Net-test network context configuration.
+ * This structure is embedded into m0_net_test_network_ctx.
+ * m0_net_test_network_ctx_init() will make copy of this structure, so
+ */
+struct m0_net_test_network_cfg {
+	/** transfer machine callbacks */
+	struct m0_net_tm_callbacks		    ntncfg_tm_cb;
+	/** buffer callbacks for every type of network queue */
+	struct m0_net_test_network_buffer_callbacks ntncfg_buf_cb;
+	/** size of ping buffers */
+	m0_bcount_t				    ntncfg_buf_size_ping;
+	/** number of ping buffers */
+	uint32_t				    ntncfg_buf_ping_nr;
+	/** size of bulk buffers */
+	m0_bcount_t				    ntncfg_buf_size_bulk;
+	/** number of bulk buffers */
+	uint32_t				    ntncfg_buf_bulk_nr;
+	/** maximim number of endpoints in context */
+	uint32_t				    ntncfg_ep_max;
+	/**
+	 * Timeouts for every type of network buffer.
+	 * @see m0_net_test_network_timeouts_never()
+	 */
+	struct m0_net_test_network_timeouts	    ntncfg_timeouts;
+	/** transfer machine should use synchronous event delivery */
+	bool					    ntncfg_sync;
+};
+
+/**
    Net-test network context structure.
    Contains transfer machine, tm and buffer callbacks, endpoints,
    ping and bulk message buffers.
  */
 struct m0_net_test_network_ctx {
+	/** Network context configuration. */
+	struct m0_net_test_network_cfg		    ntc_cfg;
 	/** Network domain. */
 	struct m0_net_domain			   *ntc_dom;
-	/** Transfer machine callbacks. */
-	struct m0_net_tm_callbacks		    ntc_tm_cb;
 	/** Transfer machine. */
 	struct m0_net_transfer_mc		   *ntc_tm;
-	/** Buffer callbacks. */
-	struct m0_net_test_network_buffer_callbacks ntc_buf_cb;
 	/** Array of message buffers. Used for message send/recv. */
 	struct m0_net_buffer			   *ntc_buf_ping;
-	/** Number of message buffers. */
-	uint32_t				    ntc_buf_ping_nr;
 	/** Array of buffers for bulk transfer. */
 	struct m0_net_buffer			   *ntc_buf_bulk;
-	/** Number of buffers for bulk transfer. */
-	uint32_t				    ntc_buf_bulk_nr;
 	/**
 	   Array of pointers to endpoints.
 	   Initially this array have no endpoints, but they can
@@ -99,19 +122,8 @@ struct m0_net_test_network_ctx {
 	   Endpoints are freed in m0_net_test_network_ctx_fini().
 	 */
 	struct m0_net_end_point			  **ntc_ep;
-	/**
-	   Current number of endpoints in ntc_ep array.
-	 */
+	/** Current number of endpoints in ntc_ep array. */
 	uint32_t				    ntc_ep_nr;
-	/**
-	   Maximum number of endponts in ntc_ep array.
-	 */
-	uint32_t				    ntc_ep_max;
-	/**
-	   Timeouts for every type of network buffer queue.
-	   Used when buffer is added to queue.
-	 */
-	struct m0_net_test_network_timeouts	    ntc_timeouts;
 };
 
 /**
@@ -127,19 +139,22 @@ int m0_net_test_network_init(void);
 void m0_net_test_network_fini(void);
 
 /**
-   Initialize m0_net_test_network_ctx structure.
+   Initialize net-test network context.
    Allocate ping and bulk buffers.
-   @note timeouts parameter can be NULL, in this case it is assumed
-   that all timeouts is M0_TIME_NEVER.
-   @note if sync parameter is set, then
+   @param ctx net-test network context structure.
+   @param cfg net-test network context configuration. Function will make
+	      make a copy of this structure in ctx, so there is no need to
+	      keep cfg valid until m0_net_test_network_ctx_fini().
+   @param tm_addr transfer machine address (example: "0@lo:12345:42:1024")
+   @note if cfg.ntncfg_sync parameter is set, then
    m0_net_buffer_event_deliver_synchronously() will be called for transfer
    machine and m0_net_buffer_event_deliver_all() should be used for buffer
    event delivery.
    @see m0_net_test_network_ctx
+   @see m0_net_test_network_cfg
    @pre ctx     != NULL
+   @pre cfg	!= NULL
    @pre tm_addr != NULL
-   @pre tm_cb   != NULL
-   @pre buf_cb  != NULL
    @post m0_net_test_network_ctx_invariant(ctx)
    @return 0 (success)
    @return -ECONNREFUSED m0_net_tm_start() failed.
@@ -147,19 +162,11 @@ void m0_net_test_network_fini(void);
    @todo create configuration structure instead a lot of parameters
  */
 int m0_net_test_network_ctx_init(struct m0_net_test_network_ctx *ctx,
-				 const char *tm_addr,
-				 const struct m0_net_tm_callbacks *tm_cb,
-				 const struct
-				 m0_net_test_network_buffer_callbacks *buf_cb,
-				 m0_bcount_t buf_size_ping,
-				 uint32_t buf_ping_nr,
-				 m0_bcount_t buf_size_bulk,
-				 uint32_t buf_bulk_nr,
-				 uint32_t ep_max,
-				 const struct m0_net_test_network_timeouts
-				 *timeouts,
-				 bool sync);
+				 struct m0_net_test_network_cfg *cfg,
+				 const char *tm_addr);
+/** Finalize net-test network context */
 void m0_net_test_network_ctx_fini(struct m0_net_test_network_ctx *ctx);
+/** Invariant for net-test network context */
 bool m0_net_test_network_ctx_invariant(struct m0_net_test_network_ctx *ctx);
 
 /**
@@ -258,8 +265,8 @@ void m0_net_test_network_buffer_dequeue(struct m0_net_test_network_ctx *ctx,
    @return length of serialized/deserialized buffer descriptor.
    @pre op == M0_NET_TEST_SERIALIZE || op == M0_NET_TEST_DESERIALIZE
    @pre ctx != NULL
-   @pre buf_bulk_index < ctx->ntc_buf_bulk_nr
-   @pre buf_ping_index < ctx->ntc_buf_ping_nr
+   @pre buf_bulk_index < ctx->ntc_cfg.ntncfg_buf_bulk_nr
+   @pre buf_ping_index < ctx->ntc_cfg.ntncfg_buf_ping_nr
    @todo possible security vulnerability because bounds are not checked
  */
 m0_bcount_t
@@ -274,7 +281,7 @@ m0_net_test_network_bd_serialize(enum m0_net_test_serialize_op op,
    @see @ref net-test-fspec-usecases-bd
    @see m0_net_test_network_bd_serialize()
    @pre ctx != NULL
-   @pre buf_ping_index < ctx->ntc_buf_ping_nr
+   @pre buf_ping_index < ctx->ntc_cfg.ntncfg_buf_ping_nr
  */
 size_t m0_net_test_network_bd_nr(struct m0_net_test_network_ctx *ctx,
 				 uint32_t buf_ping_index);
diff --git a/net/test/node_bulk.c b/net/test/node_bulk.c
index 810daf1..5733458 100644
--- a/net/test/node_bulk.c
+++ b/net/test/node_bulk.c
@@ -1235,12 +1235,14 @@ static bool node_bulk_bufs_is_in_use(struct node_bulk_ctx *ctx)
 	uint64_t			flags;
 	size_t				i;
 	size_t				buf_ping_nr;
+	size_t				buf_bulk_nr;
 
 	M0_PRE(ctx != NULL);
 
 	net_ctx = &ctx->nbc_net;
-	buf_ping_nr = net_ctx->ntc_buf_ping_nr;
-	for (i = 0; i < buf_ping_nr + net_ctx->ntc_buf_bulk_nr; ++i) {
+	buf_ping_nr = net_ctx->ntc_cfg.ntncfg_buf_ping_nr;
+	buf_bulk_nr = net_ctx->ntc_cfg.ntncfg_buf_bulk_nr;
+	for (i = 0; i < buf_ping_nr + buf_bulk_nr; ++i) {
 		buf = i < buf_ping_nr ?
 		      m0_net_test_network_buf(&ctx->nbc_net,
 					      M0_NET_TEST_BUF_PING, i) :
@@ -1321,16 +1323,17 @@ static void node_bulk_worker(struct node_bulk_ctx *ctx)
 static int node_bulk_test_init_fini(struct node_bulk_ctx *ctx,
 				    const struct m0_net_test_cmd *cmd)
 {
-	struct m0_net_test_network_timeouts timeouts;
-	const struct m0_net_test_cmd_init  *icmd;
-	struct server_status_bulk	   *ss;
-	struct buf_status_ping		   *msg_bs;
-	int				    rc;
-	size_t				    i;
-	bool				    role_client;
-	m0_time_t			    to_send;
-	m0_time_t			    to_bulk;
-	size_t				    nr;
+	struct m0_net_test_network_timeouts *timeouts;
+	struct m0_net_test_network_cfg	     net_cfg;
+	const struct m0_net_test_cmd_init   *icmd;
+	struct server_status_bulk	    *ss;
+	struct buf_status_ping		    *msg_bs;
+	int				     rc;
+	size_t				     i;
+	bool				     role_client;
+	m0_time_t			     to_send;
+	m0_time_t			     to_bulk;
+	size_t				     nr;
 
 	M0_PRE(ctx != NULL);
 
@@ -1389,25 +1392,28 @@ static int node_bulk_test_init_fini(struct node_bulk_ctx *ctx,
 	if (rc != 0)
 		goto free_rb_bulk_queued;
 
+	M0_SET0(&net_cfg);
+	net_cfg.ntncfg_tm_cb	     = node_bulk_tm_cb;
+	net_cfg.ntncfg_buf_cb	     = node_bulk_buf_cb;
+	net_cfg.ntncfg_buf_size_ping = ctx->nbc_buf_size_ping,
+	net_cfg.ntncfg_buf_ping_nr   = ctx->nbc_buf_ping_nr,
+	net_cfg.ntncfg_buf_size_bulk = ctx->nbc_buf_size_bulk,
+	net_cfg.ntncfg_buf_bulk_nr   = ctx->nbc_buf_bulk_nr,
+	net_cfg.ntncfg_ep_max	     = icmd->ntci_ep.ntsl_nr,
+	net_cfg.ntncfg_timeouts	     = m0_net_test_network_timeouts_never();
+	net_cfg.ntncfg_sync	     = true;
+	/** configure timeouts */
 	to_send  = icmd->ntci_buf_send_timeout;
 	to_bulk  = icmd->ntci_buf_bulk_timeout;
-	timeouts = m0_net_test_network_timeouts_never();
-	timeouts.ntnt_timeout[M0_NET_QT_MSG_SEND]	   = to_send;
-	timeouts.ntnt_timeout[M0_NET_QT_PASSIVE_BULK_RECV] = to_bulk;
-	timeouts.ntnt_timeout[M0_NET_QT_PASSIVE_BULK_SEND] = to_bulk;
-	timeouts.ntnt_timeout[M0_NET_QT_ACTIVE_BULK_RECV]  = to_bulk;
-	timeouts.ntnt_timeout[M0_NET_QT_ACTIVE_BULK_SEND]  = to_bulk;
-
-	rc = m0_net_test_network_ctx_init(&ctx->nbc_net,
-					  icmd->ntci_tm_ep,
-					  &node_bulk_tm_cb,
-					  &node_bulk_buf_cb,
-					  ctx->nbc_buf_size_ping,
-					  ctx->nbc_buf_ping_nr,
-					  ctx->nbc_buf_size_bulk,
-					  ctx->nbc_buf_bulk_nr,
-					  icmd->ntci_ep.ntsl_nr,
-					  &timeouts, true);
+	timeouts = &net_cfg.ntncfg_timeouts;
+	timeouts->ntnt_timeout[M0_NET_QT_MSG_SEND]	    = to_send;
+	timeouts->ntnt_timeout[M0_NET_QT_PASSIVE_BULK_RECV] = to_bulk;
+	timeouts->ntnt_timeout[M0_NET_QT_PASSIVE_BULK_SEND] = to_bulk;
+	timeouts->ntnt_timeout[M0_NET_QT_ACTIVE_BULK_RECV]  = to_bulk;
+	timeouts->ntnt_timeout[M0_NET_QT_ACTIVE_BULK_SEND]  = to_bulk;
+
+	rc = m0_net_test_network_ctx_init(&ctx->nbc_net, &net_cfg,
+					  icmd->ntci_tm_ep);
 	if (rc != 0)
 		goto free_rb_bulk_final;
 	rc = m0_net_test_network_ep_add_slist(&ctx->nbc_net, &icmd->ntci_ep);
diff --git a/net/test/node_ping.c b/net/test/node_ping.c
index 3312016..32babce 100644
--- a/net/test/node_ping.c
+++ b/net/test/node_ping.c
@@ -676,9 +676,9 @@ static void node_ping_rb_fill(struct node_ping_ctx *ctx)
 static int node_ping_test_init_fini(struct node_ping_ctx *ctx,
 				    const struct m0_net_test_cmd *cmd)
 {
-	struct m0_net_test_network_timeouts timeouts;
-	int				    rc;
-	int				    i;
+	struct m0_net_test_network_cfg net_cfg;
+	int			       rc;
+	int			       i;
 
 	if (cmd == NULL) {
 		rc = 0;
@@ -702,17 +702,17 @@ static int node_ping_test_init_fini(struct node_ping_ctx *ctx,
 		goto free_buf_rb;
 
 	/* initialize network context */
-	timeouts = m0_net_test_network_timeouts_never();
-	timeouts.ntnt_timeout[M0_NET_QT_MSG_SEND] = ctx->npc_buf_send_timeout;
-	rc = m0_net_test_network_ctx_init(&ctx->npc_net,
-					  cmd->ntc_init.ntci_tm_ep,
-					  &node_ping_tm_cb,
-					  &node_ping_buf_cb,
-					  ctx->npc_buf_size,
-					  ctx->npc_buf_nr,
-					  0, 0,
-					  cmd->ntc_init.ntci_ep.ntsl_nr,
-					  &timeouts, false);
+	M0_SET0(&net_cfg);
+	net_cfg.ntncfg_tm_cb	     = node_ping_tm_cb;
+	net_cfg.ntncfg_buf_cb	     = node_ping_buf_cb;
+	net_cfg.ntncfg_buf_size_ping = ctx->npc_buf_size;
+	net_cfg.ntncfg_buf_ping_nr   = ctx->npc_buf_nr;
+	net_cfg.ntncfg_ep_max	     = cmd->ntc_init.ntci_ep.ntsl_nr;
+	net_cfg.ntncfg_timeouts	     = m0_net_test_network_timeouts_never();
+	net_cfg.ntncfg_timeouts.ntnt_timeout[M0_NET_QT_MSG_SEND] =
+		ctx->npc_buf_send_timeout;
+	rc = m0_net_test_network_ctx_init(&ctx->npc_net, &net_cfg,
+					  cmd->ntc_init.ntci_tm_ep);
 	if (rc != 0)
 		goto free_buf_state;
 	/* add test node endpoints to the network context endpoint list */
diff --git a/net/test/ut/network.c b/net/test/ut/network.c
index ae68c06..d312794 100644
--- a/net/test/ut/network.c
+++ b/net/test/ut/network.c
@@ -173,6 +173,7 @@ static struct m0_net_test_network_buffer_callbacks ping_buf_cb = {
 
 void m0_net_test_network_ut_ping(void)
 {
+	static struct m0_net_test_network_cfg cfg;
 	static struct m0_net_test_network_ctx send;
 	static struct m0_net_test_network_ctx recv;
 	int				      rc;
@@ -180,18 +181,17 @@ void m0_net_test_network_ut_ping(void)
 	m0_bcount_t			      buf_size;
 
 	buf_size = NET_TEST_PING_BUF_SIZE;
-	rc = m0_net_test_network_ctx_init(&send, "0@lo:12345:42:4000",
-					  &ping_tm_cb, &ping_buf_cb,
-					  buf_size, 1,
-					  0, 0,
-					  1, NULL, false);
+	M0_SET0(&cfg);
+	cfg.ntncfg_tm_cb	 = ping_tm_cb;
+	cfg.ntncfg_buf_cb	 = ping_buf_cb;
+	cfg.ntncfg_buf_size_ping = buf_size;
+	cfg.ntncfg_buf_ping_nr	 = 1;
+	cfg.ntncfg_ep_max	 = 1;
+	cfg.ntncfg_timeouts	 = m0_net_test_network_timeouts_never();
+	rc = m0_net_test_network_ctx_init(&send, &cfg, "0@lo:12345:42:4000");
 	M0_UT_ASSERT(rc == 0);
 
-	rc = m0_net_test_network_ctx_init(&recv, "0@lo:12345:42:4001",
-					  &ping_tm_cb, &ping_buf_cb,
-					  buf_size, 1,
-					  0, 0,
-					  1, NULL, false);
+	rc = m0_net_test_network_ctx_init(&recv, &cfg, "0@lo:12345:42:4001");
 	M0_UT_ASSERT(rc == 0);
 
 	rc = m0_net_test_network_ep_add(&send, "0@lo:12345:42:4001");
@@ -276,6 +276,7 @@ static struct m0_net_test_network_buffer_callbacks bulk_buf_cb = {
 
 void m0_net_test_network_ut_bulk(void)
 {
+	static struct m0_net_test_network_cfg cfg;
 	static struct m0_net_test_network_ctx client;
 	static struct m0_net_test_network_ctx server;
 	m0_bcount_t			      offset;
@@ -285,17 +286,19 @@ void m0_net_test_network_ut_bulk(void)
 	int				      i;
 	bool				      rc_bool;
 
-	rc = m0_net_test_network_ctx_init(&client, "0@lo:12345:42:4000",
-					  &bulk_tm_cb, &bulk_buf_cb,
-					  NET_TEST_PING_BUF_SIZE, 1,
-					  NET_TEST_BULK_BUF_SIZE, 2,
-					  1, NULL, false);
+	M0_SET0(&cfg);
+	cfg.ntncfg_tm_cb	 = bulk_tm_cb;
+	cfg.ntncfg_buf_cb	 = bulk_buf_cb;
+	cfg.ntncfg_buf_size_ping = NET_TEST_PING_BUF_SIZE;
+	cfg.ntncfg_buf_ping_nr	 = 1;
+	cfg.ntncfg_buf_size_bulk = NET_TEST_PING_BUF_SIZE;
+	cfg.ntncfg_buf_bulk_nr	 = 2;
+	cfg.ntncfg_ep_max	 = 1;
+	cfg.ntncfg_timeouts	 = m0_net_test_network_timeouts_never();
+	rc = m0_net_test_network_ctx_init(&client, &cfg, "0@lo:12345:42:4000");
 	M0_UT_ASSERT(rc == 0);
-	rc = m0_net_test_network_ctx_init(&server, "0@lo:12345:42:4001",
-					  &bulk_tm_cb, &bulk_buf_cb,
-					  NET_TEST_PING_BUF_SIZE, 1,
-					  NET_TEST_BULK_BUF_SIZE, 1,
-					  1, NULL, false);
+	cfg.ntncfg_buf_bulk_nr = 1;
+	rc = m0_net_test_network_ctx_init(&server, &cfg, "0@lo:12345:42:4001");
 	M0_UT_ASSERT(rc == 0);
 
 	rc = m0_net_test_network_ep_add(&client, "0@lo:12345:42:4001");
@@ -482,16 +485,22 @@ static void multiple_buf_desc_encode_decode(struct m0_net_test_network_ctx *ctx,
 
 void m0_net_test_network_ut_buf_desc(void)
 {
+	static struct m0_net_test_network_cfg cfg;
 	static struct m0_net_test_network_ctx ctx;
 	static struct m0_clink		      tmwait;
 	int				      i;
 	int				      rc;
 
-	rc = m0_net_test_network_ctx_init(&ctx, "0@lo:12345:42:*",
-					  &tm_cb_empty, &buf_cb_empty,
-					  NET_TEST_PING_BUF_SIZE, 2,
-					  NET_TEST_BULK_BUF_SIZE, 4,
-					  1, NULL, false);
+	M0_SET0(&cfg);
+	cfg.ntncfg_tm_cb	 = tm_cb_empty;
+	cfg.ntncfg_buf_cb	 = buf_cb_empty;
+	cfg.ntncfg_buf_size_ping = NET_TEST_PING_BUF_SIZE;
+	cfg.ntncfg_buf_ping_nr	 = 2;
+	cfg.ntncfg_buf_size_bulk = NET_TEST_PING_BUF_SIZE;
+	cfg.ntncfg_buf_bulk_nr	 = 4;
+	cfg.ntncfg_ep_max	 = 1;
+	cfg.ntncfg_timeouts	 = m0_net_test_network_timeouts_never();
+	rc = m0_net_test_network_ctx_init(&ctx, &cfg, "0@lo:12345:42:*");
 	M0_UT_ASSERT(rc == 0);
 
 	/* add some ep - tranfer machine ep */
-- 
1.8.3.2


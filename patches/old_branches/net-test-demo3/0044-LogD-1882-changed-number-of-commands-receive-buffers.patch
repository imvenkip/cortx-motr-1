From e3ebfd2f7a73cba9538f822c2a8bb8c4b0e226a2 Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Sun, 3 Feb 2013 20:43:56 +0200
Subject: [PATCH 44/99] LogD 1882: changed number of commands receive buffers
 back to one-per-endpoint

---
 net/test/commands.c    | 18 +++++++++---------
 net/test/commands.h    |  2 +-
 net/test/ut/commands.c |  4 +---
 3 files changed, 11 insertions(+), 13 deletions(-)

diff --git a/net/test/commands.c b/net/test/commands.c
index edf3cbd..8da79dd 100644
--- a/net/test/commands.c
+++ b/net/test/commands.c
@@ -231,7 +231,7 @@ static void commands_cb_msg_recv(struct m0_net_test_network_ctx *net_ctx,
 	struct m0_net_test_cmd_ctx *ctx = cmd_ctx_extract(net_ctx);
 
 	M0_PRE(m0_net_test_commands_invariant(ctx));
-	M0_PRE(buf_index >= ctx->ntcc_ep_nr && buf_index < ctx->ntcc_ep_nr * 3);
+	M0_PRE(buf_index >= ctx->ntcc_ep_nr && buf_index < ctx->ntcc_ep_nr * 2);
 	M0_PRE(q == M0_NET_QT_MSG_RECV);
 	LOGD("M0_NET_QT_MSG_RECV commands callback from %s",
 	     ev->nbe_ep == NULL ? "NULL" : ev->nbe_ep->nep_addr);
@@ -299,7 +299,7 @@ static int commands_recv_enqueue(struct m0_net_test_cmd_ctx *ctx,
 {
 	int rc;
 
-	M0_PRE(buf_index >= ctx->ntcc_ep_nr && buf_index < ctx->ntcc_ep_nr * 3);
+	M0_PRE(buf_index >= ctx->ntcc_ep_nr && buf_index < ctx->ntcc_ep_nr * 2);
 
 	ctx->ntcc_buf_status[buf_index].ntcbs_in_recv_queue = true;
 	rc = m0_net_test_network_msg_recv(&ctx->ntcc_net, buf_index);
@@ -326,7 +326,7 @@ static void commands_recv_ep_put(struct m0_net_test_cmd_ctx *ctx,
 static bool is_buf_in_recv_q(struct m0_net_test_cmd_ctx *ctx,
 			     size_t buf_index)
 {
-	M0_PRE(buf_index >= ctx->ntcc_ep_nr && buf_index < ctx->ntcc_ep_nr * 3);
+	M0_PRE(buf_index >= ctx->ntcc_ep_nr && buf_index < ctx->ntcc_ep_nr * 2);
 
 	return ctx->ntcc_buf_status[buf_index].ntcbs_in_recv_queue;
 }
@@ -382,11 +382,11 @@ static int commands_initfini(struct m0_net_test_cmd_ctx *ctx,
 	if (rc != 0)
 		goto free_sem_send;
 
-	rc = m0_net_test_ringbuf_init(&ctx->ntcc_rb, ctx->ntcc_ep_nr * 3);
+	rc = m0_net_test_ringbuf_init(&ctx->ntcc_rb, ctx->ntcc_ep_nr * 2);
 	if (rc != 0)
 		goto free_sem_recv;
 
-	M0_ALLOC_ARR(ctx->ntcc_buf_status, ctx->ntcc_ep_nr * 3);
+	M0_ALLOC_ARR(ctx->ntcc_buf_status, ctx->ntcc_ep_nr * 2);
 	if (ctx->ntcc_buf_status == NULL)
 		goto free_rb;
 
@@ -394,7 +394,7 @@ static int commands_initfini(struct m0_net_test_cmd_ctx *ctx,
 	net_cfg.ntncfg_tm_cb	     = net_test_commands_tm_cb;
 	net_cfg.ntncfg_buf_cb	     = commands_buffer_cb;
 	net_cfg.ntncfg_buf_size_ping = M0_NET_TEST_CMD_SIZE_MAX;
-	net_cfg.ntncfg_buf_ping_nr   = 3 * ctx->ntcc_ep_nr;
+	net_cfg.ntncfg_buf_ping_nr   = 2 * ctx->ntcc_ep_nr;
 	net_cfg.ntncfg_ep_max	     = ep_list->ntsl_nr;
 	net_cfg.ntncfg_timeouts	     = m0_net_test_network_timeouts_never();
 	net_cfg.ntncfg_timeouts.ntnt_timeout[M0_NET_QT_MSG_SEND] = send_timeout;
@@ -406,7 +406,7 @@ static int commands_initfini(struct m0_net_test_cmd_ctx *ctx,
 	rc = m0_net_test_network_ep_add_slist(&ctx->ntcc_net, ep_list);
 	if (rc != 0)
 		goto free_net_ctx;
-	for (i = 0; i < ctx->ntcc_ep_nr * 2; ++i) {
+	for (i = 0; i < ctx->ntcc_ep_nr; ++i) {
 		rc = commands_recv_enqueue(ctx, ctx->ntcc_ep_nr + i);
 		if (rc != 0) {
 			commands_recv_dequeue_nr(ctx, i);
@@ -420,7 +420,7 @@ static int commands_initfini(struct m0_net_test_cmd_ctx *ctx,
     fini:
 	M0_PRE(m0_net_test_commands_invariant(ctx));
 	m0_net_test_commands_send_wait_all(ctx);
-	commands_recv_dequeue_nr(ctx, ctx->ntcc_ep_nr * 2);
+	commands_recv_dequeue_nr(ctx, ctx->ntcc_ep_nr);
     free_net_ctx:
 	m0_net_test_network_ctx_fini(&ctx->ntcc_net);
     free_buf_status:
@@ -588,7 +588,7 @@ bool m0_net_test_commands_invariant(struct m0_net_test_cmd_ctx *ctx)
 		return false;
 	if (ctx->ntcc_ep_nr != ctx->ntcc_net.ntc_ep_nr)
 		return false;
-	if (ctx->ntcc_ep_nr * 3 != ctx->ntcc_net.ntc_cfg.ntncfg_buf_ping_nr)
+	if (ctx->ntcc_ep_nr * 2 != ctx->ntcc_net.ntc_cfg.ntncfg_buf_ping_nr)
 		return false;
 	if (ctx->ntcc_net.ntc_cfg.ntncfg_buf_bulk_nr != 0)
 		return false;
diff --git a/net/test/commands.h b/net/test/commands.h
index a0114aa..bed3640 100644
--- a/net/test/commands.h
+++ b/net/test/commands.h
@@ -48,7 +48,7 @@ enum {
 	 * @note There can be a problem with large number of test nodes,
 	 * because M0_NET_TEST_CMD_INIT have list of node endpoints inside.
 	 */
-	M0_NET_TEST_CMD_SIZE_MAX     = 16384,
+	M0_NET_TEST_CMD_SIZE_MAX = 16384,
 };
 
 /**
diff --git a/net/test/ut/commands.c b/net/test/ut/commands.c
index e1fac44..21ae9a2 100644
--- a/net/test/ut/commands.c
+++ b/net/test/ut/commands.c
@@ -348,7 +348,6 @@ static void commands_node_thread(struct net_test_cmd_node *node)
 	}
 	commands_ut_send(node, ctx);			/* test #5 */
 	commands_ut_send(node, ctx);
-	commands_ut_send(node, ctx);
 	barrier_with_main(node);	/* barrier #5.0 */
 	/* main thread will start receiving here */
 	barrier_with_main(node);	/* barrier #5.1 */
@@ -524,13 +523,12 @@ static void net_test_command_ut(size_t nr)
 	M0_UT_ASSERT(is_flags_set_odd(nr));
 	barrier_with_nodes();				/* barrier #4.3 */
 	/*
-	   Test #5: every node sends three commands, and only after that console
+	   Test #5: every node sends two commands, and only after that console
 	   starts to receive.
 	 */
 	/* nodes will send two commands here */
 	barrier_with_nodes();				/* barrier #5.0 */
 	commands_ut_recv_all(nr, M0_TIME_NEVER);
-	commands_ut_recv_all(nr, M0_TIME_NEVER);
 	flags_reset(nr);
 	commands_ut_recv_all(nr, timeout_get_abs());
 	M0_UT_ASSERT(is_flags_set(nr, false));
-- 
1.8.3.2


From 2fd24b334483637f6c2af0b46b9112fea30c2614 Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Sun, 21 Apr 2013 09:27:28 +0800
Subject: [PATCH 01/14] Inital DLD for pool machine store and replica.

---
 mero/magic.h |   8 +++
 pool/pool.c  | 160 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 pool/pool.h  |  19 ++++---
 3 files changed, 180 insertions(+), 7 deletions(-)

diff --git a/mero/magic.h b/mero/magic.h
index 124d16c..6b9f7a9 100644
--- a/mero/magic.h
+++ b/mero/magic.h
@@ -531,6 +531,14 @@ enum m0_magic_satchel {
 	/* m0_net_test_timestamp::ntt_magic (allied cabiai) */
 	M0_NET_TEST_TIMESTAMP_MAGIC = 0x33a111edcab1a177,
 
+/* Pool Machine */
+	/* m0_pool_event_link::pel_magic (poolli)*/
+	M0_POOL_EVENTS_LIST_MAGIC = 0x33706f6f6c6c6977,
+
+	/* poolmach_tl::tl_head_magic (poolhe)*/
+	M0_POOL_EVENTS_HEAD_MAGIC = 0x33706f6f6c686577,
+
+
 /* Request handler */
 	/* m0_reqh_service::rs_magix (bacilli babel) */
 	M0_REQH_SVC_MAGIC = 0x33bac1111babe177,
diff --git a/pool/pool.c b/pool/pool.c
index 17c9531..93fd440 100644
--- a/pool/pool.c
+++ b/pool/pool.c
@@ -27,9 +27,167 @@
 #include "lib/misc.h"
 
 /**
+   @page pool_mach_store_replica DLD of Pool Machine store and replica
+
+   - @ref pool_mach_store_replica-ovw
+   - @ref pool_mach_store_replica-def
+   - @ref pool_mach_store_replica-req
+   - @ref pool_mach_store_replica-depends
+   - @ref pool_mach_store_replica-fspec
+   - @ref pool_mach_store_replica-lspec
+      - @ref pool_mach_store_replica-lspec-comps
+      - @ref pool_mach_store_replica-lspec-ds
+   - @ref pool_mach_store_replica-conformance
+   - @ref pool_mach_store_replica-ut
+   - @ref pool_mach_store_replica-st
+   - @ref pool_mach_store_replica-O
+   - @ref pool_mach_store_replica-ref
+
+   <hr>
+   @section pool_mach_store_replica-ovw Overview
+   Pool Machine state is stored on persistent storage. When system restarts,
+   it will load its data from persistent storage and back to service.
+
+   Pool Machine state is replicated on multiple nodes. Master node (the first
+   node in a pool) is the master node. All other nodes are replica nodes. They
+   keep a cache of this pool machine state. These caches get updated by FOPs.
+
+   <hr>
+   @section pool_mach_store_replica-def Definitions
+   @see poolmach for failure vectors, events, etc.
+
+   Master Pool Machine node. The fist node in a pool stores the pool machine
+   states on persistent storage.
+
+   Replica Pool Machine node. Other nodes in a pool cache pool machine states
+   from Master pool Machine node.
+
+   <hr>
+   @section pool_mach_store_replica-req Requirements
+   The following requirements should be meet:
+   - @b R.DLD.P All pool machine states should be stored on persistent storage.
+                When system restarts again, these states can be loaded from
+                persistent storage.
+   - @b R.DLD.T Updates to the persistent storage should survive system failure.
+
+   - @b R.DLD.R Pool machine states are replicated from master nodes to replica.
+
+   <hr>
+   @section pool_mach_store_replica-depends Dependencies
+   FOP.
+   DTM.
+   DB or RVM.
+   Pool.
+   Pool Machine.
+
+   <hr>
+   @section pool_mach_store_replica-fspec Functional Specification
+   Pool Machine states, including failure vectors, event lists, spare slots
+   usages, etc. will be stored in DB or RVM. Updates to these storage will be
+   protected by distributed transaction manager.
+
+   When any pool machine state is updated on master node, an unsolicated FOP
+   (a one-may message) will be delivered to each replica node. When replica
+   node gets this message, it should decode update event from the fop and
+   update its pool machine state accordingly.
+
+   <hr>
+   @section pool_mach_store_replica-lspec Logical Specification
+
+   - @ref pool_mach_store_replica-lspec-comps
+   - @ref pool_mach_store_replica-lspec-ds
+   - @ref pool_mach_store_replica-lspec-if
+
+   @subsection pool_mach_store_replica-lspec-comps Component Overview
+   A unsolicited notification fop is introduced. This fop will be sent from
+   master pool machine node to its replicas. This fop contains the event
+   which triggers a pool machine update.
+
+   When replicas initialise their pool machine states, they send pool machine
+   updates requests to master nodes. Master node replies with its latest pool
+   machine states. If master node is not ready at that moment, replicas will
+   get updates notification later.
+
+   @subsection pool_mach_store_replica-lspec-ds Data Structures
+   The data structures of failure vector, failure vector version number,
+   event, event list are in @ref poolmach module.
+   A new fop type (m0_poolmach_updates_fop) is introduced to contains the events
+    list.
+
+   @code
+	struct m0_fv_updates {
+	        uint32_t            fvu_count;
+	        struct m0_fv_event *fvu_events;
+	} M0_XCA_SEQUENCE;
+
+	struct m0_poolmach_updates_req {
+		// replica's cached version.
+	        struct m0_fv_version pu_fv_version;
+	} M0_XCA_RECORD;
+
+	struct m0_poolmach_updates_rep {
+		uint32_t            pu_rc;
+
+		// latest version number.
+	        struct m0_fv_version pu_fv_version;
+
+		// events list
+	        struct m0_fv_updates pu_fv_updates;
+	} M0_XCA_RECORD;
+   @endcode
+
+   @subsection pool_mach_store_replica-lspec-if Interfaces
+   The failure vector and version number operations are designed and listed
+   in @ref poolmach.
+   No new external interfaces are introduced by this feature. To implement
+   the data store on persistent storage, DB or RVM interfaces will be used.
+   To send and handle pool machine updates fop, rpc/reqh interfaces will be
+   used.
+
+   <hr>
+   @section pool_mach_store_replica-conformance Conformance
+   - @b I.DLD.P All pool machine states are stored on persistent storage, using
+                DB or RMV interfaces. These states data can be loaded when
+                system re-starts.
+   - @b I.DLD.T Updates to the persistent storage will be protected by
+                distributed transaction manager. This will insure the updates
+                can survive system failures.
+
+   - @b I.DLD.R Pool machine states are replicated from master nodes to replica.
+                Updates to master pool machine node will be sent to replicas
+                within fops. Replicas will updates their state according to
+                those fops.
+
+   <hr>
+   @section pool_mach_store_replica-ut Unit Tests
+   Unit test will cover the following case:
+   - init DB or RVM storage.
+   - updates to DB or RVM.
+   - load from DB or RVM.
+   - Sending updates to replicas.
+   - Replicas handles updates from master.
+
+   <hr>
+   @section pool_mach_store_replica-st System Tests
+   Pool machine and its replicas works well when new pool machine events happen.
+   Pool machine works well when system re-starts.
+
+   <hr>
+   @section pool_mach_store_replica-O Analysis
+   N/A
+
+   <hr>
+   @section pool_mach_store_replica-ref References
+   - @ref cm
+   - @ref agents
+   - @ref poolmach
+   - @ref DB
+   - @ref RVM
+ */
+
+/**
    @addtogroup pool
 
-   XXX Stub code for now.
    @{
  */
 
diff --git a/pool/pool.h b/pool/pool.h
index eb5fa2b..80de341 100644
--- a/pool/pool.h
+++ b/pool/pool.h
@@ -184,11 +184,6 @@ struct m0_pool_version_numbers {
 	uint64_t pvn_version[PVE_NR];
 };
 
-enum {
-	M0_POOL_EVENTS_LIST_MAGIC = 0x706f6f6c6c696e6bUL, /* poollink */
-	M0_POOL_EVENTS_HEAD_MAGIC = 0x706f6f6c68656164UL, /* poolhead */
-};
-
 /**
  * Pool Event, which is used to change the state of a node or device.
  */
@@ -321,13 +316,25 @@ M0_INTERNAL bool m0_poolmach_version_before(const struct m0_pool_version_numbers
 					    *v1,
 					    const struct m0_pool_version_numbers
 					    *v2);
-
+/**
+ * Initialises the pool machine.
+ *
+ * Pool machine will load its data from persistent storage. If this is the first
+ * call, it will initialise the persistent data. For a pool machine replica or
+ * a pool machine on client, it only caches data. So, it will not load data from
+ * persistent storage. It will update its data from master pool machine.
+ */
 M0_INTERNAL int m0_poolmach_init(struct m0_poolmach *pm,
+				 struct m0_dbenv *dbenv,
 				 struct m0_dtm *dtm,
 				 uint32_t nr_nodes,
 				 uint32_t nr_devices,
 				 uint32_t max_node_failures,
 				 uint32_t max_device_failures);
+
+/**
+ * Finalises the pool machine.
+ */
 M0_INTERNAL void m0_poolmach_fini(struct m0_poolmach *pm);
 
 /**
-- 
1.8.3.2


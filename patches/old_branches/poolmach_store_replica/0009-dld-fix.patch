From 068f1ab49740206da9241388c9da299d21d0fd3a Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Tue, 7 May 2013 14:59:44 +0800
Subject: [PATCH 09/14] dld fix

---
 pool/pool.c | 94 +++++++++++++------------------------------------------------
 1 file changed, 19 insertions(+), 75 deletions(-)

diff --git a/pool/pool.c b/pool/pool.c
index 375ea55..2f21ec6 100644
--- a/pool/pool.c
+++ b/pool/pool.c
@@ -45,14 +45,16 @@
 
    <hr>
    @section pool_mach_store_replica-ovw Overview
-   Pool Machine state is stored on persistent storage. When system restarts,
-   Ioservice loads pool machine state data from persistent storage.
+   Pool Machine state is stored on persistent storage. When system initializese
+   the first time, pool machine state is configured from confc & confd. When
+   system restarts, ioservice loads pool machine state data from persistent
+   storage.
 
    Every ioservice has its own pool machine state stored on persistent storage.
    They are independent. Pool machine state transitions are triggered by pool
    machine events. Pool machine events, e.g. device failure event, SNS
    completion event, are delivered to all ioservices. So, these pool machine
-   states are updated and the final pool machine state are identical on all
+   states are updated and the final pool machine states are identical on all
    nodes.
 
    Pool machine state is stored in DB (or RVM, when it is ready).
@@ -65,7 +67,7 @@
    @section pool_mach_store_replica-req Requirements
    The following requirements should be meet:
    - @b R.DLD.P All pool machine states should be stored on persistent storage.
-                When system restarts again, these states can be loaded from
+                When system restarts again, these states are loaded from
                 persistent storage.
    - @b R.DLD.T Updates to the persistent storage should survive system failure.
 
@@ -88,8 +90,7 @@
    according to these events. Finally the pool machine states on all ioservice
    nodes are persistent and identical.
 
-   HA component is responsible for delivering these events to all ioservice
-   nodes.
+   HA component broadcasts every event to all the pool machines in the cluster
 
    <hr>
    @section pool_mach_store_replica-lspec Logical Specification
@@ -103,11 +104,16 @@
    this pool, current read and write version numbers are stored on persistent
    storage.
 
-   State of each devices is an array, and it is stored on persistent storage as
-   a record. State of each nodes is an array, and it is also stored on
-   persistent storage as a record. Spare space usage is an array, and it is
-   stored on persistent storage as a record. Special version numbers are used
-   as keys for them.
+   Every pool machine contains an array of struct m0_pooldev. Every instance of
+   struct m0_pooldev represents a device in the pool and maintains the
+   corresponding device state. This device informatin represented by instance of
+   struct m0_pooldev is written to persistent store as a record. Similarly, the
+   node in the pool is represented by struct m0_poolnode. This is also written
+   to persistent store as a record. The spare space usage in the pool, accounted
+   by struct m0_pool_spare_usage, is recorded to persistent store. Every event
+   is stored as a separate record on the persistent storage and its
+   corresponding version numbers are used as the record keys to query or update
+   a particular record on the persistent store.
 
    All events are stored on persistent storage. Each event is stored as a
    separate record, and its version number is key.
@@ -117,70 +123,8 @@
    event, event list are in @ref poolmach module.
 
    The DB records for global pool state, state of node, state of device,
-   events are defined as the following:
-   @code
-	struct m0_poolmach_state_rec {
-		struct m0_pool_version_numbers psr_version;
-		uint32_t                       psr_nr_nodes;
-		uint32_t                       psr_nr_devices;
-		uint32_t                       psr_max_node_failures;
-		uint32_t                       psr_max_device_failures;
-	};
-
-	struct m0_poolnode_rec {
-		enum m0_pool_nd_state pn_state;
-		struct m0_uuid        pn_node_id;
-	};
-
-	struct m0_pooldev_rec {
-		enum m0_pool_nd_state pd_state;
-		struct m0_uuid        pd_dev_id;
-		struct m0_uuid        pd_node_id;
-	};
-
-	struct m0_pool_spare_usage_rec {
-		uint32_t              psu_device_index;
-		enum m0_pool_nd_state psu_device_state;
-	};
-
-	struct m0_pool_event_rec {
-		struct m0_pool_event           per_event;
-	};
-   @endcode
-   Struct m0_pool_version_numbers is used as keys for the above data structures.
-   Special keys are defined as the following:
-
-   @code
-   static struct m0_pool_version_numbers poolmach_state_key = {
-		.pvn_version = {
-			[PVE_READ]  = ~0ULL - 1,
-			[PVE_WRITE] = ~0ULL - 1
-		}
-	};
-
-
-	static struct m0_pool_version_numbers poolmach_device_state_key = {
-		.pvn_version = {
-			[PVE_READ]  = ~0ULL - 2,
-			[PVE_WRITE] = ~0ULL - 2
-		}
-	};
-
-	static struct m0_pool_version_numbers poolmach_node_state_key = {
-		.pvn_version = {
-			[PVE_READ]  = ~0ULL - 3,
-			[PVE_WRITE] = ~0ULL - 3
-		}
-	};
-
-	static struct m0_pool_version_numbers poolmach_spare_key = {
-		.pvn_version = {
-			[PVE_READ]  = ~0ULL - 4,
-			[PVE_WRITE] = ~0ULL - 4
-		}
-	};
-   @endcode
-
+   events are defined in code. Struct m0_pool_version_numbers is used as keys
+   for the above data structures.
 
    @subsection pool_mach_store_replica-lspec-if Interfaces
    The failure vector and version number operations are designed and listed
-- 
1.8.3.2


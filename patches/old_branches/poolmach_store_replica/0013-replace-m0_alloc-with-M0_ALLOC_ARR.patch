From 4e59dd2d69291ca73c1235d25d0c09e581487a1b Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Fri, 10 May 2013 21:13:54 +0800
Subject: [PATCH 13/14] replace m0_alloc with M0_ALLOC_ARR. check if pm_dbenv
 is NULL in m0_poolmach_fini().

---
 pool/pool.c       | 12 +++++++-----
 pool/pool_store.c | 14 ++++++--------
 2 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/pool/pool.c b/pool/pool.c
index e1d3dfd..ba2a657 100644
--- a/pool/pool.c
+++ b/pool/pool.c
@@ -266,7 +266,6 @@ M0_INTERNAL int m0_poolmach_init(struct m0_poolmach *pm,
 	M0_PRE(!pm->pm_is_initialised);
 
 	M0_SET0(pm);
-	pm->pm_dbenv = dbenv;
 	pm->pm_state.pst_version.pvn_version[PVE_READ]  = 0;
 	pm->pm_state.pst_version.pvn_version[PVE_WRITE] = 0;
 	pm->pm_state.pst_nr_nodes = nr_nodes;
@@ -316,9 +315,10 @@ M0_INTERNAL int m0_poolmach_init(struct m0_poolmach *pm,
 					    nr_devices, max_node_failures,
 					    max_device_failures);
 	}
-	if (rc == 0)
+	if (rc == 0) {
+		pm->pm_dbenv = dbenv;
 		pm->pm_is_initialised = true;
-	else
+	} else
 		m0_poolmach_fini(pm);
 	return rc;
 }
@@ -343,8 +343,10 @@ M0_INTERNAL void m0_poolmach_fini(struct m0_poolmach *pm)
 	m0_free(pm->pm_state.pst_nodes_array);
 	m0_rwlock_write_unlock(&pm->pm_lock);
 
-	m0_table_fini(&pm->pm_table);
-	m0_table_fini(&pm->pm_events_table);
+	if (pm->pm_dbenv != NULL) {
+		m0_table_fini(&pm->pm_table);
+		m0_table_fini(&pm->pm_events_table);
+	}
 	pm->pm_is_initialised = false;
 	m0_rwlock_fini(&pm->pm_lock);
 }
diff --git a/pool/pool_store.c b/pool/pool_store.c
index 722c149..8f89eae 100644
--- a/pool/pool_store.c
+++ b/pool/pool_store.c
@@ -228,10 +228,9 @@ M0_INTERNAL int m0_poolmach_store(struct m0_poolmach *pm,
 	max_node_failures   = pm->pm_state.pst_max_node_failures;
 	max_device_failures = pm->pm_state.pst_max_device_failures;
 
-	poolnode_rec         = m0_alloc(nr_nodes * sizeof (*poolnode_rec));
-	pooldev_rec          = m0_alloc(nr_devices * sizeof (*pooldev_rec));
-	pool_spare_usage_rec = m0_alloc(max_device_failures *
-					 sizeof (*pool_spare_usage_rec));
+	M0_ALLOC_ARR(poolnode_rec, nr_nodes);
+	M0_ALLOC_ARR(pooldev_rec, nr_devices);
+	M0_ALLOC_ARR(pool_spare_usage_rec, max_device_failures);
 	if (poolnode_rec == NULL ||
 	    pooldev_rec == NULL ||
 	    pool_spare_usage_rec == NULL) {
@@ -312,10 +311,9 @@ static int m0_poolmach_load(struct m0_poolmach *pm,
 	uint32_t                        i;
 	int                             rc;
 
-	poolnode_rec = m0_alloc(nr_nodes * sizeof (*poolnode_rec));
-	pooldev_rec  = m0_alloc((nr_devices + 1) * sizeof (*pooldev_rec));
-	pool_spare_usage_rec = m0_alloc(max_device_failures *
-					 sizeof (*pool_spare_usage_rec));
+	M0_ALLOC_ARR(poolnode_rec, nr_nodes);
+	M0_ALLOC_ARR(pooldev_rec, nr_devices + 1);
+	M0_ALLOC_ARR(pool_spare_usage_rec, max_device_failures);
 	if (poolnode_rec == NULL ||
 	    pooldev_rec == NULL ||
 	    pool_spare_usage_rec == NULL) {
-- 
1.8.3.2


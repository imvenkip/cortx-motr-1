From ddb662250a2c26c5ed82491ea1499ec254cf5711 Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Fri, 27 Sep 2013 17:23:02 +0800
Subject: [PATCH 1/8] DLD for cm persistence.

---
 cm/cm.c | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/cm/cm.c b/cm/cm.c
index 8322aa2..e4f2cc9 100644
--- a/cm/cm.c
+++ b/cm/cm.c
@@ -71,6 +71,7 @@
          - @ref CMDLD-lspec-cm-cp-pump
          - @ref CMDLD-lspec-cm-active
       - @ref CMDLD-lspec-cm-sliding-window
+      - @ref CMDLD-lspec-cm-sliding-window-persistance
       - @ref CMDLD-lspec-cm-stop
       - @ref CMDLD-lspec-cm-fini
       - @ref CMDLD-lspec-thread
@@ -137,6 +138,7 @@
       - @ref CMDLD-lspec-cm-cp-pump
       - @ref CMDLD-lspec-cm-active
    - @ref CMDLD-lspec-cm-sliding-window
+   - @ref CMDLD-lspec-cm-sliding-window-persistence
    - @ref CMDLD-lspec-cm-stop
    - @ref CMDLD-lspec-cm-fini
 
@@ -240,6 +242,34 @@
    @see m0_cm_proxy_sw_update_ast_post()
    @see m0_cm_proxy_remote_update()
 
+   @subsection CMDLD-lspec-cm-sliding-window-persistence Copy machine sliding \
+ window persistence
+   Copy machine sliding window is an in-memory data structure to keep track of
+   progress of some operations. When some failure happens, e.g. software or node
+   crash, this sliding windows information is lost. Copy machine has no clue
+   how to resume the operations at the point of failure. To solve this problem,
+   copy machine stores some information about the completed operations onto
+   persistent storage transactionally. So when node and/or copy machine restarts
+   after failure, it reads from persistent storage and resumes its operations.
+
+   The following informations is to be stored on persistent storage,
+   i)  copy machine id. It is struct m0_cm::cm_id.
+   ii) last completed aggregation group id.
+
+   The following interfaces are provided to manage this information,
+   - m0_cm_sw_store_init()            Init data on persistent storage.
+   - m0_cm_sw_store_load()            Load data from persistent storage.
+   - m0_cm_sw_store_update()          Update data to the last completed AG.
+   - m0_cm_sw_store_finish()          Mark the cm operation as done.
+
+   These interfaces will be used in various copy machine operations to manage
+   the persistent information. For example, m0_cm_sw_store_load() will be used
+   in copy machine start routine to check if a previous unfinished operation
+   is in-progress. m0_cm_sw_store_update() will be called when sliding window
+   advances. m0_cm_sw_store_finish() is called when a copy machine operation
+   completes. In this case, the last completed AG id has a special, {-1, -1},
+   to indicate that the operation has already completed successfully.
+
    @subsection CMDLD-lspec-cm-stop Copy machine stop
    Once operation completes successfully, copy machine performs required tasks,
    (e.g. updating layouts, etc.) by invoking m0_cm_stop(), this transitions copy
-- 
1.8.3.2


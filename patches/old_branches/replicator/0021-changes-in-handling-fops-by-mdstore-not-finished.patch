From b6ecffc913d599ddeb0528435c19a5b77d6e9af8 Mon Sep 17 00:00:00 2001
From: Yuriy Umanets <yuriy_umanets@xyratex.com>
Date: Mon, 7 Mar 2011 03:37:37 -0700
Subject: [PATCH 021/177] - changes in handling fops by mdstore (not finished).

---
 cob/cob.c         |  31 +++-------
 cob/cob.h         |  14 +++--
 configure.ac      |   2 +-
 mdstore/md.c      |  86 ++++++++++++++++++++++----
 mdstore/md.ff     |  42 ++++++-------
 mdstore/mdstore.c | 176 ++++++++++++++++++++++--------------------------------
 mdstore/mdstore.h |  59 ++++++++++++++----
 7 files changed, 234 insertions(+), 176 deletions(-)

diff --git a/cob/cob.c b/cob/cob.c
index 91c28e0..cca28c6 100644
--- a/cob/cob.c
+++ b/cob/cob.c
@@ -239,11 +239,8 @@ void c2_cob_put(struct c2_cob *cob)
 
 /**
    Allocate a new cob
-
-   @todo Optimization: we should have a pool of cobs to reuse.
-   We need a general memory pool handler: slab_init(size, count).
  */
-static int cob_alloc(struct c2_cob_domain *dom, struct c2_cob **out)
+int c2_cob_alloc(struct c2_cob_domain *dom, struct c2_cob **out)
 {
         struct c2_cob *cob;
 
@@ -455,7 +452,7 @@ int c2_cob_lookup(struct c2_cob_domain *dom, struct c2_cob_nskey *nskey,
                 return 0;
         }
 
-        rc = cob_alloc(dom, &cob);
+        rc = c2_cob_alloc(dom, &cob);
         if (rc)
                 return rc;
 
@@ -527,7 +524,7 @@ int c2_cob_locate(struct c2_cob_domain *dom, struct c2_cob_oikey *oikey,
                 return 0;
 
         /* Get cob memory. */
-        rc = cob_alloc(dom, &cob);
+        rc = c2_cob_alloc(dom, &cob);
         if (rc)
                 return rc;
 
@@ -571,20 +568,19 @@ static bool c2_cob_is_valid(struct c2_cob *cob)
 
    This takes a reference on the cob in-memory struct.
  */
-int c2_cob_create(struct c2_cob_domain *dom,
+int c2_cob_create(struct c2_cob        *cob,
                   struct c2_cob_nskey  *nskey,
                   struct c2_cob_nsrec  *nsrec,
                   struct c2_cob_fabrec *fabrec,
                   struct c2_cob_omgrec *omgrec,
                   uint64_t              need,
-                  struct c2_cob       **out,
                   struct c2_db_tx      *tx)
 {
-        struct c2_cob       *cob;
         struct c2_db_pair    pair;
         struct c2_cob_oikey  oikey;
 	int                  rc;
 
+        C2_PRE(cob != NULL);
         C2_PRE(nskey != NULL);
         C2_PRE(nsrec != NULL);
         C2_PRE(fabrec != NULL);
@@ -592,12 +588,6 @@ int c2_cob_create(struct c2_cob_domain *dom,
 	C2_PRE(c2_fid_is_set(&nsrec->cnr_fid));
         C2_PRE(c2_fid_is_set(&nskey->cnk_pfid));
 
-        rc = cob_alloc(dom, &cob);
-        if (rc) {
-                C2_ADDB_ADD(&dom->cd_addb, &cob_addb_loc, cob_enomem, rc);
-                return rc;
-        }
-
         cob->co_nskey = nskey;
         cob->co_valid |= CA_NSKEY;
 
@@ -618,7 +608,7 @@ int c2_cob_create(struct c2_cob_domain *dom,
          */
         rc = c2_cob_add_name(cob, nskey, tx);
         if (rc)
-                return rc;
+                goto out;
 
         /*
          * Prepare key for attribute tables.
@@ -643,7 +633,7 @@ int c2_cob_create(struct c2_cob_domain *dom,
         c2_db_pair_release(&pair);
 	c2_db_pair_fini(&pair);
 	if (rc)
-                goto out_free;
+                goto out;
 
         /* 
          * Now let's update omg attributes. Cache the omgrec. 
@@ -662,13 +652,10 @@ int c2_cob_create(struct c2_cob_domain *dom,
         c2_db_pair_release(&pair);
 	c2_db_pair_fini(&pair);
 	if (rc)
-                goto out_free;
+                goto out;
 
-        *out = cob;
 	return 0;
-
-out_free:
-        c2_cob_put(cob);
+out:
         C2_ADDB_ADD(&dom->cd_addb, &cob_addb_loc, cob_create, rc == 0);
         return rc;
 }
diff --git a/cob/cob.h b/cob/cob.h
index 3f7671b..062deda 100644
--- a/cob/cob.h
+++ b/cob/cob.h
@@ -253,18 +253,17 @@ int c2_cob_locate(struct c2_cob_domain    *dom,
                   struct c2_db_tx         *tx);
 
 /**
-   Create a new cob and add it to the namespace.
+   Add a cob to the namespace.
 
-   This doesn't create a new storage object; just creates metadata table
-   entries for it to enable namespace and oi lookup.
+   This doesn't create a new storage object; just creates
+   metadata table entries for it to enable namespace and oi lookup.
  */
-int c2_cob_create(struct c2_cob_domain *dom,
+int c2_cob_create(struct c2_cob_cob    *cob,
                   struct c2_cob_nskey  *nskey,
                   struct c2_cob_nsrec  *nsrec,
                   struct c2_cob_fabrec *fabrec,
                   struct c2_cob_omgrec *omgrec,
                   uint64_t              need,
-                  struct c2_cob       **out,
                   struct c2_db_tx      *tx);
 
 /**
@@ -328,6 +327,11 @@ int c2_cob_update_name(struct c2_cob        *cob,
                        struct c2_db_tx      *tx);
 
 /**
+   Allocate a new cob
+ */
+int c2_cob_alloc(struct c2_cob_domain *dom, struct c2_cob **out);
+
+/**
    Acquires an additional reference on the object.
 
    @see c2_cob_put()
diff --git a/configure.ac b/configure.ac
index dd52b5a..69710cc 100755
--- a/configure.ac
+++ b/configure.ac
@@ -203,11 +203,11 @@ _ACEOF
 # Checks for programs.
 AC_PROG_CC
 AC_PROG_CPP
+AM_PROG_CC_C_O
 AC_PROG_INSTALL
 AC_PROG_LN_S
 AC_PROG_AWK
 AC_PROG_LIBTOOL
-AM_PROG_CC_C_O
 
 AC_PATH_PROG([NM_B], [nm], [null])
 if test "x$NM_B" = "xnull"; then
diff --git a/mdstore/md.c b/mdstore/md.c
index 249fc9b..14ee776 100644
--- a/mdstore/md.c
+++ b/mdstore/md.c
@@ -23,12 +23,68 @@
 #define ADDB_CALL(name, rc) \
     do {} while (0)
 
-static int c2_md_store_fop_execute(struct c2_fop *fop, struct c2_fop_ctx *ctx);
-static void c2_md_store_fop_free(struct c2_fop *fop);
+static int md_store_create_execute(struct c2_fop *fop, struct c2_fop_ctx *ctx)
+{
+        struct c2_site           *site;
+        struct c2_md_store       *md;
+        struct c2_cob            *cob;
+        struct c2_fop_create     *req;
+        struct c2_fop_create_rep *rep = NULL;
+        int                       rc;
+
+        site = ctx->ft_site;
+        C2_ASSERT(site != NULL);
+
+        md = site->s_md;
+        C2_ASSERT(md != NULL);
+        
+        rc = c2_fop_fol_rec_add(fop, ctx->ft_fol, ctx->ft_tx);
+        ADDB_CALL("fol_create", rc);
+        if (rc == 0) {
+                rc = c2_cob_alloc(md->md_cob, &cob);
+                if (rc)
+                        return rc;
+                req = c2_fop_data(fop);
+
+                rc = c2_md_store_create(md, cob, req, NULL, ctx);
+                ADDB_CALL("md_store_create", rc);
+        }
+        return rc;
+}
+
+static struct c2_fop_type_ops md_create_ops = {
+        .fto_execute = md_store_create_execute,
+	.fto_free    = md_store_create_free
+};
+
+static struct c2_fop_type_ops md_open_ops = {
+        .fto_execute = md_store_open_execute,
+	.fto_free    = md_store_open_free
+};
+
+static struct c2_fop_type_ops md_close_ops = {
+        .fto_execute = md_store_close_execute,
+	.fto_free    = md_store_close_free
+};
+
+static struct c2_fop_type_ops md_link_ops = {
+        .fto_execute = md_store_link_execute,
+	.fto_free    = md_store_link_free
+};
+
+static struct c2_fop_type_ops md_unlink_ops = {
+        .fto_execute = md_store_unlink_execute,
+	.fto_free    = md_store_unlink_free
+};
+
+static struct c2_fop_type_ops md_rename_ops = {
+        .fto_execute = md_store_rename_execute,
+	.fto_free    = md_store_rename_free
+};
 
-static struct c2_fop_type_ops c2_md_store_ops = {
-        .fto_execute = c2_md_store_fop_execute,
-	.fto_free    = c2_md_store_fop_free
+static struct c2_fop_type_ops md_setattr_ops = {
+        .fto_execute = md_store_setattr_execute,
+	.fto_free    = md_store_setattr_free
 };
 
 static void c2_md_store_fop_free(struct c2_fop *fop)
@@ -65,6 +121,8 @@ static int c2_md_store_fop_execute(struct c2_fop *fop, struct c2_fop_ctx *ctx)
 {
         struct c2_site        *site;
         struct c2_md_store    *md;
+        struct c2_cob         *cob;
+        struct c2_cob_oikey    oikey;
         int                    rc = 0;
 
         site = ctx->ft_site;
@@ -110,6 +168,10 @@ static int c2_md_store_fop_execute(struct c2_fop *fop, struct c2_fop_ctx *ctx)
                 rc = c2_fop_fol_rec_add(fop, ctx->ft_fol, ctx->ft_tx);
                 ADDB_CALL("fol_link", rc);
                 if (rc == 0) {
+                        md_store_make_oikey(&oikey, &body->b_tfid, 0);
+                        rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
+                        if (rc)
+                                return rc;
                         rc = c2_md_store_link(md, fop, ctx);
                         ADDB_CALL("md_store_link", rc);
                 }
@@ -144,13 +206,13 @@ static int c2_md_store_fop_execute(struct c2_fop *fop, struct c2_fop_ctx *ctx)
    The rest of records/fops is not yet supported. Not clear if we need them 
    at all.
  */
-C2_FOP_TYPE_DECLARE(c2_fop_create,   "create",    C2_FOP_CREATE,  &c2_md_store_ops);
-C2_FOP_TYPE_DECLARE(c2_fop_link,     "hardlink",  C2_FOP_LINK,    &c2_md_store_ops);
-C2_FOP_TYPE_DECLARE(c2_fop_unlink,   "unlink",    C2_FOP_UNLINK,  &c2_md_store_ops);
-C2_FOP_TYPE_DECLARE(c2_fop_open,     "open",      C2_FOP_OPEN,    &c2_md_store_ops);
-C2_FOP_TYPE_DECLARE(c2_fop_close,    "close",     C2_FOP_CLOSE,   &c2_md_store_ops);
-C2_FOP_TYPE_DECLARE(c2_fop_setattr,  "setattr",   C2_FOP_SETATTR, &c2_md_store_ops);
-C2_FOP_TYPE_DECLARE(c2_fop_rename,   "rename",    C2_FOP_RENAME,  &c2_md_store_ops);
+C2_FOP_TYPE_DECLARE(c2_fop_create,   "create",    C2_FOP_CREATE,  &md_create_ops);
+C2_FOP_TYPE_DECLARE(c2_fop_link,     "hardlink",  C2_FOP_LINK,    &md_link_ops);
+C2_FOP_TYPE_DECLARE(c2_fop_unlink,   "unlink",    C2_FOP_UNLINK,  &md_unlink_ops);
+C2_FOP_TYPE_DECLARE(c2_fop_open,     "open",      C2_FOP_OPEN,    &md_open_ops);
+C2_FOP_TYPE_DECLARE(c2_fop_close,    "close",     C2_FOP_CLOSE,   &md_close_ops);
+C2_FOP_TYPE_DECLARE(c2_fop_setattr,  "setattr",   C2_FOP_SETATTR, &md_setattr_ops);
+C2_FOP_TYPE_DECLARE(c2_fop_rename,   "rename",    C2_FOP_RENAME,  &md_rename_ops);
 
 static struct c2_fop_type *c2_fop_fops[] = {
         &c2_fop_create_fopt,
diff --git a/mdstore/md.ff b/mdstore/md.ff
index 1a09e96..7aa90ec 100644
--- a/mdstore/md.ff
+++ b/mdstore/md.ff
@@ -5,7 +5,7 @@
    @{
  */
 
-/** @file fop_md.ff
+/** @file md.ff
  *
  * <b>Colibri metatadata fop formats</b>
  *
@@ -19,7 +19,7 @@ DEF(c2_fop_name, SEQUENCE,
     _(n_count, U32),
     _(n_name, BYTE));
 
-DEF(c2_fop_body, RECORD,
+DEF(c2_fop_cob, RECORD,
     _(b_index, U64),
     _(b_flags, U32),
     _(b_mode, U32),
@@ -34,64 +34,64 @@ DEF(c2_fop_body, RECORD,
     _(b_tfid, c2_fop_fid));
 
 DEF(c2_fop_create, RECORD,
-    _(c_body, c2_fop_body),
+    _(c_body, c2_fop_cob),
     _(c_name, c2_fop_name));
 
 DEF(c2_fop_create_rep, RECORD,
-    _(c_body, c2_fop_body));
+    _(c_body, c2_fop_cob));
 
 DEF(c2_fop_link, RECORD,
-    _(l_body, c2_fop_body),
+    _(l_body, c2_fop_cob),
     _(l_name, c2_fop_name));
 
 DEF(c2_fop_link_rep, RECORD,
-    _(l_body, c2_fop_body));
+    _(l_body, c2_fop_cob));
 
 DEF(c2_fop_unlink, RECORD,
-    _(u_body, c2_fop_body),
+    _(u_body, c2_fop_cob),
     _(u_name, c2_fop_name));
 
 DEF(c2_fop_unlink_rep, RECORD,
-    _(u_body, c2_fop_body));
+    _(u_body, c2_fop_cob));
 
 DEF(c2_fop_rename, RECORD,
-    _(r_sbody, c2_fop_body),
-    _(r_tbody, c2_fop_body),
+    _(r_sbody, c2_fop_cob),
+    _(r_tbody, c2_fop_cob),
     _(r_sname, c2_fop_name),
     _(r_tname, c2_fop_name));
 
 DEF(c2_fop_rename_rep, RECORD,
-    _(r_body, c2_fop_body));
+    _(r_body, c2_fop_cob));
 
 DEF(c2_fop_open, RECORD,
-    _(o_body, c2_fop_body));
+    _(o_body, c2_fop_cob));
 
 DEF(c2_fop_open_rep, RECORD,
-    _(o_body, c2_fop_body));
+    _(o_body, c2_fop_cob));
 
 DEF(c2_fop_close, RECORD,
-    _(c_body, c2_fop_body));
+    _(c_body, c2_fop_cob));
 
 DEF(c2_fop_close_rep, RECORD,
-    _(c_body, c2_fop_body));
+    _(c_body, c2_fop_cob));
 
 DEF(c2_fop_setattr, RECORD,
-    _(s_body, c2_fop_body));
+    _(s_body, c2_fop_cob));
 
 DEF(c2_fop_setattr_rep, RECORD,
-    _(s_body, c2_fop_body));
+    _(s_body, c2_fop_cob));
 
 DEF(c2_fop_getattr, RECORD,
-    _(g_body, c2_fop_body));
+    _(g_body, c2_fop_cob));
 
 DEF(c2_fop_getattr_rep, RECORD,
-    _(g_body, c2_fop_body));
+    _(g_body, c2_fop_cob));
 
 DEF(c2_fop_readdir, RECORD,
-    _(r_body, c2_fop_body));
+    _(r_body, c2_fop_cob));
 
 DEF(c2_fop_dirent, RECORD,
-    _(d_body, c2_fop_body),
+    _(d_body, c2_fop_cob),
     _(d_name, c2_fop_name));
 
 DEF(c2_fop_readdir_rep, RECORD,
diff --git a/mdstore/mdstore.c b/mdstore/mdstore.c
index 92d126a..eb58f01 100644
--- a/mdstore/mdstore.c
+++ b/mdstore/mdstore.c
@@ -25,15 +25,15 @@ static const struct c2_fid C2_MD_ROOTID = {
         .f_key       = 1ULL
 };
 
-static void md_store_make_fid(struct c2_fid *fid, struct c2_fop_fid *ffid)
+void md_store_make_fid(struct c2_fid *fid, struct c2_fop_fid *ffid)
 {
         fid->f_container = ffid->f_seq;
         fid->f_key = ffid->f_oid;
 }
 
-static void md_store_make_nskey(struct c2_cob_nskey **keyh, 
-                                struct c2_fop_fid *fid, 
-                                struct c2_fop_name *name)
+void md_store_make_nskey(struct c2_cob_nskey **keyh, 
+                         struct c2_fop_fid *fid, 
+                         struct c2_fop_name *name)
 {
         struct c2_cob_nskey *key;
 
@@ -45,9 +45,9 @@ static void md_store_make_nskey(struct c2_cob_nskey **keyh,
         *keyh = key;
 }
 
-static void md_store_make_oikey(struct c2_cob_oikey *oikey,
-                                struct c2_fop_fid *fid,
-                                int linkno)
+void md_store_make_oikey(struct c2_cob_oikey *oikey,
+                         struct c2_fop_fid *fid,
+                         int linkno)
 {
         md_store_make_fid(&oikey->cok_fid, fid);
         oikey->cok_linkno = 0;
@@ -71,33 +71,20 @@ void c2_md_store_fini(struct c2_md_store *md)
         c2_cob_domain_fini(&md->md_cob);
 }
 
-static int c2_md_store_check_perm(struct c2_md_store *md, struct c2_fop *fop, 
-                                  struct c2_fop_ctx *ctx)
-{
-        /* 
-         * @todo: this to check permissions for operation described by 
-         * fop and ctx.
-         */
-        return 0;
-}
-
-int c2_md_store_create(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_create(struct c2_md_store *md, 
+                       struct c2_cob *cob,
+                       struct c2_fop_create *req, 
+                       struct c2_fop_create_rep *rep, 
                        struct c2_fop_ctx *ctx)
 {
-        struct c2_fop_create  *create = c2_fop_data(fop);
-        struct c2_fop_body    *body = &create->c_body;
-        struct c2_cob         *cob;
-        struct c2_cob_nskey   *key;
+        struct c2_fop_cob     *body = &req->c_body;
+        struct c2_cob_nskey   *nskey;
         struct c2_cob_nsrec    nsrec;
         struct c2_cob_fabrec   fabrec;
         struct c2_cob_omgrec   omgrec;
         int                    rc;
         
-        rc = c2_md_store_check_perm(md, fop, ctx);
-        if (rc)
-                return rc;
-
-        md_store_make_nskey(&key, &body->b_pfid, &create->c_name);
+        md_store_make_nskey(&nskey, &body->b_pfid, &req->c_name);
         md_store_make_fid(&nsrec.cnr_fid, &body->b_tfid);
 
         /*
@@ -105,19 +92,13 @@ int c2_md_store_create(struct c2_md_store *md, struct c2_fop *fop,
          * where needed.
          */
         nsrec.cnr_nlink = 0;
-        nsrec.cnr_ino = 0;//c2_fid_flatten(&body->b_tfid);
         
-        /* 
-         * @todo: to be later handled in another way according to
-         * metadata scheme. Apparently omgid should be allocated
-         * here and set to ->cnr_omgid for reference.
+        /*
+         * @todo: In fact we need to put ino from body here. Inode
+         * number may be important on target fs while repliting source.
          */
-        nsrec.cnr_omgid = 0;
-
-        /*nsrec.cnr_uid = body->b_uid;
-        nsrec.cnr_gid = body->b_gid;
-        nsrec.cnr_mode = body->b_mode;*/
-
+        nsrec.cnr_ino = 0;
+        
         /* 
          * @todo: do we need rdev support for specil files in
          * replicator? 
@@ -129,7 +110,6 @@ int c2_md_store_create(struct c2_md_store *md, struct c2_fop *fop,
          * we don't need them.
          */
         nsrec.u.cnr_size = 0;
-
         nsrec.cnr_blksize = 0;
         nsrec.cnr_blocks = 0;
 
@@ -146,31 +126,34 @@ int c2_md_store_create(struct c2_md_store *md, struct c2_fop *fop,
         /* @todo: Fill fabrec */
         C2_SET0(&fabrec);
         
-        /* @todo: Fill omgrec */
+        /* 
+         * @todo: allocate omg or we can use F as key? Do we need
+         * this id at all?
+         */
+        nsrec.cnr_omgid = 0;
+
         C2_SET0(&omgrec);
+        omgrec.cor_uid = body->b_uid;
+        omgrec.cor_gid = body->b_gid;
+        omgrec.cor_mode = body->b_mode;
 
-        rc = c2_cob_create(&md->md_cob, key, &nsrec, &fabrec, &omgrec, 
-                           0, &cob, ctx->ft_tx);
-        c2_cob_put(cob);
+        rc = c2_cob_create(cob, nskey, &nsrec, &fabrec, &omgrec, 0,
+                           ctx->ft_tx);
         c2_free(key);
-
         return rc;
 }
 
-int c2_md_store_link(struct c2_md_store *md, struct c2_fop *fop, 
+int c2_md_store_link(struct c2_md_store *md, 
+                     struct c2_cob *cob, 
+                     struct c2_fop_link *req, 
+                     struct c2_fop_link_rep *rep, 
                      struct c2_fop_ctx *ctx)
 {
-        struct c2_fop_link    *link = c2_fop_data(fop);
-        struct c2_fop_body    *body = &link->l_body;
+        struct c2_fop_cob     *body = &req->l_body;
         struct c2_cob_oikey    oikey;
-        struct c2_cob         *cob;
         struct c2_cob_nskey   *nskey;
         int                    rc;
         
-        rc = c2_md_store_check_perm(md, fop, ctx);
-        if (rc)
-                return rc;
-
         /*
          * Let's find stat data cob first.
          */
@@ -197,21 +180,19 @@ out:
         return rc;
 }
 
-int c2_md_store_unlink(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_unlink(struct c2_md_store *md, 
+                       struct c2_cob *cob,
+                       struct c2_fop_unink *req, 
+                       struct c2_fop_unink_rep *rep, 
                        struct c2_fop_ctx *ctx)
 {
-        struct c2_fop_unlink  *unlink = c2_fop_data(fop);
-        struct c2_fop_body    *body = &unlink->u_body;
+        struct c2_fop_cob     *body = &req->u_body;
         struct c2_cob_nskey   *nskey;
         struct c2_cob_oikey    oikey;
         struct c2_cob         *cob;
         struct c2_cob_nsrec    nsrec;
         int                    rc;
     
-        rc = c2_md_store_check_perm(md, fop, ctx);
-        if (rc)
-                return rc;
-        
         md_store_make_nskey(&nskey, &body->b_pfid, &unlink->u_name);
         md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
@@ -280,19 +261,17 @@ out:
         return rc;
 }
 
-int c2_md_store_open(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_open(struct c2_md_store *md, 
+                     struct c2_cob *cob,
+                     struct c2_fop_open *req, 
+                     struct c2_fop_open_rep *rep, 
                      struct c2_fop_ctx *ctx)
 {
-        struct c2_fop_open   *open = c2_fop_data(fop);
-        struct c2_fop_body   *body = &open->o_body;
+        struct c2_fop_cob    *body = &req->o_body;
         struct c2_cob_oikey   oikey;
         struct c2_cob        *cob;
         int                   rc;
         
-        rc = c2_md_store_check_perm(md, fop, ctx);
-        if (rc)
-                return rc;
-        
         md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
@@ -308,19 +287,17 @@ int c2_md_store_open(struct c2_md_store *md, struct c2_fop *fop,
         return rc;
 }
 
-int c2_md_store_close(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_close(struct c2_md_store *md, 
+                      struct c2_cob *cob,
+                      struct c2_fop_close *req, 
+                      struct c2_fop_close_rep *rep, 
                       struct c2_fop_ctx *ctx)
 {
-        struct c2_fop_close  *close = c2_fop_data(fop);
-        struct c2_fop_body   *body = &close->c_body;
+        struct c2_fop_cob    *body = &req->c_body;
         struct c2_cob_oikey   oikey;
         struct c2_cob        *cob;
         int                   rc;
         
-        rc = c2_md_store_check_perm(md, fop, ctx);
-        if (rc)
-                return rc;
-        
         md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
@@ -388,12 +365,14 @@ static int c2_md_store_rename_sanity(struct c2_md_store *md,
         return rc;
 }
 
-int c2_md_store_rename(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_rename(struct c2_md_store *md, 
+                       struct c2_cob *cob,
+                       struct c2_fop_rename *req, 
+                       struct c2_fop_rename_rep *rep, 
                        struct c2_fop_ctx *ctx)
 {
-        struct c2_fop_rename *rename = c2_fop_data(fop);
-        struct c2_fop_body   *sbody = &rename->r_sbody;
-        struct c2_fop_body   *tbody = &rename->r_tbody;
+        struct c2_fop_cob    *sbody = &req->r_sbody;
+        struct c2_fop_cob    *tbody = &req->r_tbody;
         struct c2_cob_nskey  *srckey;
         struct c2_cob_nskey  *tgtkey;
         struct c2_cob_oikey   oikey;
@@ -401,13 +380,6 @@ int c2_md_store_rename(struct c2_md_store *md, struct c2_fop *fop,
         int                   rc;
 
         /*
-         * Check permissions for this operation.
-         */        
-        rc = c2_md_store_check_perm(md, fop, ctx);
-        if (rc)
-                return rc;
-
-        /*
          * Perform rename sanity checks (source should not be ancestor
          * of target dir, etc).
          */
@@ -438,11 +410,13 @@ int c2_md_store_rename(struct c2_md_store *md, struct c2_fop *fop,
         return rc;
 }
 
-int c2_md_store_setattr(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_setattr(struct c2_md_store *md, 
+                        struct c2_cob *cob,
+                        struct c2_fop_setattr *req, 
+                        struct c2_fop_setattr_rep *rep, 
                         struct c2_fop_ctx *ctx)
 {
-        struct c2_fop_setattr *setattr = c2_fop_data(fop);
-        struct c2_fop_body    *body = &setattr->s_body;
+        struct c2_fop_cob     *body = &req->s_body;
         struct c2_cob_nsrec    nsrec;
         struct c2_cob_fabrec   fabrec;
         struct c2_cob_omgrec   omgrec;
@@ -450,10 +424,6 @@ int c2_md_store_setattr(struct c2_md_store *md, struct c2_fop *fop,
         struct c2_cob         *cob;
         int                    rc;
         
-        rc = c2_md_store_check_perm(md, fop, ctx);
-        if (rc)
-                return rc;
-
         md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
@@ -486,19 +456,17 @@ int c2_md_store_setattr(struct c2_md_store *md, struct c2_fop *fop,
         return rc;
 }
 
-int c2_md_store_getattr(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_getattr(struct c2_md_store *md, 
+                        struct c2_cob *cob,
+                        struct c2_fop_getattr *req, 
+                        struct c2_fop_getattr_rep *rep, 
                         struct c2_fop_ctx *ctx)
 {
-        struct c2_fop_getattr *getattr = c2_fop_data(fop);
-        struct c2_fop_body    *body = &getattr->g_body;
+        struct c2_fop_cob     *body = &req->g_body;
         struct c2_cob_oikey    oikey;
         struct c2_cob         *cob;
         int                    rc;
         
-        rc = c2_md_store_check_perm(md, fop, ctx);
-        if (rc)
-                return rc;
-        
         md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
@@ -514,19 +482,17 @@ int c2_md_store_getattr(struct c2_md_store *md, struct c2_fop *fop,
         return rc;
 }
 
-int c2_md_store_readdir(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_readdir(struct c2_md_store *md, 
+                        struct c2_cob *cob,
+                        struct c2_fop_readdir *req, 
+                        struct c2_fop_readdir_rep *rep, 
                         struct c2_fop_ctx *ctx)
 {
-        struct c2_fop_readdir *readdir = c2_fop_data(fop);
-        struct c2_fop_body    *body = &readdir->r_body;
+        struct c2_fop_cob     *body = &req->r_body;
         struct c2_cob_oikey    oikey;
         struct c2_cob         *cob;
         int                    rc;
         
-        rc = c2_md_store_check_perm(md, fop, ctx);
-        if (rc)
-                return rc;
-        
         md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
diff --git a/mdstore/mdstore.h b/mdstore/mdstore.h
index f37727e..7ffbb21 100644
--- a/mdstore/mdstore.h
+++ b/mdstore/mdstore.h
@@ -16,36 +16,75 @@ struct c2_md_store {
         struct c2_fid         md_rootid;
 };
 
-int c2_md_store_init(struct c2_md_store *md, struct c2_cob_domain_id *id,
+void md_store_make_fid(struct c2_fid *fid, 
+                       struct c2_fop_fid *ffid);
+
+void md_store_make_nskey(struct c2_cob_nskey **keyh, 
+                         struct c2_fop_fid *fid, 
+                         struct c2_fop_name *name);
+
+void md_store_make_oikey(struct c2_cob_oikey *oikey,
+                         struct c2_fop_fid *fid,
+                         int linkno);
+
+int c2_md_store_init(struct c2_md_store *md, 
+                     struct c2_cob_domain_id *id,
                      struct c2_dbenv *db);
 
 void c2_md_store_fini(struct c2_md_store *md);
 
-int c2_md_store_link(struct c2_md_store *md, struct c2_fop *fop, 
+int c2_md_store_link(struct c2_md_store *md, 
+                     struct c2_cob *cob, 
+                     struct c2_fop_link *req, 
+                     struct c2_fop_link_rep *rep, 
                      struct c2_fop_ctx *ctx);
                      
-int c2_md_store_unlink(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_unlink(struct c2_md_store *md, 
+                       struct c2_cob *cob,
+                       struct c2_fop_unink *req, 
+                       struct c2_fop_unink_rep *rep, 
                        struct c2_fop_ctx *ctx);
                        
-int c2_md_store_rename(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_rename(struct c2_md_store *md, 
+                       struct c2_cob *cob,
+                       struct c2_fop_rename *req, 
+                       struct c2_fop_rename_rep *rep, 
                        struct c2_fop_ctx *ctx);
 
-int c2_md_store_create(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_create(struct c2_md_store *md, 
+                       struct c2_cob *cob,
+                       struct c2_fop_create *req, 
+                       struct c2_fop_create_rep *rep, 
                        struct c2_fop_ctx *ctx);
 
-int c2_md_store_open(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_open(struct c2_md_store *md, 
+                     struct c2_cob *cob,
+                     struct c2_fop_open *req, 
+                     struct c2_fop_open_rep *rep, 
                      struct c2_fop_ctx *ctx);
 
-int c2_md_store_close(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_close(struct c2_md_store *md, 
+                      struct c2_cob *cob,
+                      struct c2_fop_close *req, 
+                      struct c2_fop_close_rep *rep, 
                       struct c2_fop_ctx *ctx);
 
-int c2_md_store_setattr(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_setattr(struct c2_md_store *md, 
+                        struct c2_cob *cob,
+                        struct c2_fop_setattr *req, 
+                        struct c2_fop_setattr_rep *rep, 
                         struct c2_fop_ctx *ctx);
 
-int c2_md_store_getattr(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_getattr(struct c2_md_store *md, 
+                        struct c2_cob *cob,
+                        struct c2_fop_getattr *req, 
+                        struct c2_fop_getattr_rep *rep, 
                         struct c2_fop_ctx *ctx);
 
-int c2_md_store_readdir(struct c2_md_store *md, struct c2_fop *fop,
+int c2_md_store_readdir(struct c2_md_store *md, 
+                        struct c2_cob *cob,
+                        struct c2_fop_readdir *req, 
+                        struct c2_fop_readdir_rep *rep, 
                         struct c2_fop_ctx *ctx);
 
 void c2_md_store_fop_fini(void);
-- 
1.8.3.2


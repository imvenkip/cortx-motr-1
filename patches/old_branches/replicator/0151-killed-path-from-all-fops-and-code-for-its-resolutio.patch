From b5206422bfd3369be70538348cfe346e7ee75ece Mon Sep 17 00:00:00 2001
From: Yuriy Umanets <yuriy_umanets@xyratex.com>
Date: Thu, 23 Jun 2011 11:34:24 -0600
Subject: [PATCH 151/177] - killed path from all fops and code for its
 resolution. it is now done in pressure using fol.

---
 mdservice/md_foms.c  | 228 +--------------------------------------------------
 mdservice/md_fops.c  |  52 +-----------
 mdservice/md_fops.ff |  21 ++---
 mdstore/ut/lustre.c  |  12 ---
 4 files changed, 9 insertions(+), 304 deletions(-)

diff --git a/mdservice/md_foms.c b/mdservice/md_foms.c
index b013c92..d12ba23 100644
--- a/mdservice/md_foms.c
+++ b/mdservice/md_foms.c
@@ -398,6 +398,7 @@ static int c2_md_unlink_fom_state(struct c2_fom *fom)
                                                 tx);
                         if (rc == -ENOENT) {
                                 attr.ca_zombie = 1;
+                                attr.ca_nlink = 1;
                                 rc = c2_md_store_create(md, &pfid,
                                                         &attr, &scob, tx);
                         } else if (rc == 0) {
@@ -1193,75 +1194,12 @@ out:
 
 static void c2_md_req_fom_fini(struct c2_fom *fom)
 {
-        struct c2_fop_create    *create;
-        struct c2_fop_link      *link;
-        struct c2_fop_unlink    *unlink;
-        struct c2_fop_rename    *rename;
-        struct c2_fop_open      *open;
-        struct c2_fop_close     *close;
-        struct c2_fop_setattr   *setattr;
-        struct c2_fop_getattr   *getattr;
-        struct c2_fop_readdir   *readdir;
         struct c2_fom_md        *fom_obj;
         struct c2_fop           *fop;
         
         fom_obj = container_of(fom, struct c2_fom_md, fm_fom);
         C2_ASSERT(fom_obj->fm_fop != NULL);
         fop = fom_obj->fm_fop;
-
-        switch (fop->f_type->ft_code) {
-        case C2_FOP_CREATE:
-		create = c2_fop_data(fop);
-		if (create->c_path.s_len)
-		        c2_free(create->c_path.s_buf);
-	        break;
-        case C2_FOP_LINK:
-		link = c2_fop_data(fop);
-		if (link->l_spath.s_len)
-		        c2_free(link->l_spath.s_buf);
-		if (link->l_tpath.s_len)
-		        c2_free(link->l_tpath.s_buf);
-	        break;
-        case C2_FOP_UNLINK:
-		unlink = c2_fop_data(fop);
-		if (unlink->u_path.s_len)
-		        c2_free(unlink->u_path.s_buf);
-	        break;
-        case C2_FOP_RENAME:
-		rename = c2_fop_data(fop);
-		if (rename->r_spath.s_len)
-		        c2_free(rename->r_spath.s_buf);
-		if (rename->r_tpath.s_len)
-		        c2_free(rename->r_tpath.s_buf);
-	        break;
-        case C2_FOP_OPEN:
-		open = c2_fop_data(fop);
-		if (open->o_path.s_len)
-		        c2_free(open->o_path.s_buf);
-	        break;
-        case C2_FOP_CLOSE:
-		close = c2_fop_data(fop);
-		if (close->c_path.s_len)
-		        c2_free(close->c_path.s_buf);
-	        break;
-        case C2_FOP_SETATTR:
-		setattr = c2_fop_data(fop);
-		if (setattr->s_path.s_len)
-		        c2_free(setattr->s_path.s_buf);
-	        break;
-        case C2_FOP_GETATTR:
-		getattr = c2_fop_data(fop);
-		if (getattr->g_path.s_len)
-		        c2_free(getattr->g_path.s_buf);
-	        break;
-        case C2_FOP_READDIR:
-		readdir = c2_fop_data(fop);
-		if (readdir->r_path.s_len)
-		        c2_free(readdir->r_path.s_buf);
-	        break;
-        default:
-                break;
-        }
         c2_free(fom_obj);
 }
 
@@ -1319,38 +1257,6 @@ int c2_md_rep_fom_init(struct c2_fop *fop,
         return 0;
 }
 
-static int c2_md_make_path(struct c2_fop_str *p,
-                           struct c2_fop_fid *f,
-                           struct c2_md_store *md)
-{
-        struct c2_fid fid = {
-                .f_container = f->f_seq,
-                .f_key       = f->f_oid
-        };
-        char *path;
-        int rc;
-        
-        rc = c2_md_store_path(md, &fid, &path);
-        if (rc)
-                return rc;
-
-        p->s_len = strlen(path);
-        if (p->s_len == 0) {
-                c2_free(path);
-                return -EINVAL;
-        }
-
-        p->s_buf = c2_alloc(p->s_len + 1);
-        if (!p->s_buf) {
-                c2_free(path);
-                return -ENOMEM;
-        }
-
-        memcpy(p->s_buf, path, p->s_len);
-        c2_free(path);
-        return 0;
-}
-
 int c2_md_req_fom_init(struct c2_fop *fop, 
                        struct c2_fop_ctx *ctx, 
                        struct c2_fom **m)
@@ -1359,15 +1265,6 @@ int c2_md_req_fom_init(struct c2_fop *fop,
         struct c2_fom_md        *fom_obj;
         struct c2_fom_type      *fom_type;
         struct c2_fop_type      *fop_type;
-        struct c2_fop_create    *create;
-        struct c2_fop_link      *link;
-        struct c2_fop_unlink    *unlink;
-        struct c2_fop_rename    *rename;
-        struct c2_fop_open      *open;
-        struct c2_fop_close     *close;
-        struct c2_fop_setattr   *setattr;
-        struct c2_fop_getattr   *getattr;
-        struct c2_fop_readdir   *readdir;
         int                      rc;
 
         C2_PRE(fop != NULL);
@@ -1391,163 +1288,42 @@ int c2_md_req_fom_init(struct c2_fop *fop,
         case C2_FOP_CREATE:
 		fom->fo_ops = &c2_md_fom_create_ops;
 		fop_type = &c2_fop_create_rep_fopt;
-
-		/*
-		 * Generating full path to fop object. It should be done here
-		 * because all fops before it may change dirs structure and
-		 * need to be handled by this moment.
-		 *
-		 * Note we do it only for fops generated after scan. Doing it
-		 * while scan is not reliable. Tree is not consistent yet.
-		 */
-		create = c2_fop_data(fop);
-                if (!(create->c_body.b_bias & C2_MD_BIAS_SCAN_IN_PROGRESS)) {
-                        rc = c2_md_make_path(&create->c_path, 
-                                             &create->c_body.b_pfid,
-                                             ctx->fc_site->s_mdstore);
-                        if (rc) {
-                                c2_free(fom_obj);
-                                return -EINVAL;
-                        }
-                }
 	        break;
         case C2_FOP_LINK:
 		fom->fo_ops = &c2_md_fom_link_ops;
 		fop_type = &c2_fop_link_rep_fopt;
-
-		link = c2_fop_data(fop);
-                if (!(link->l_body.b_bias & C2_MD_BIAS_SCAN_IN_PROGRESS)) {
-                        rc = c2_md_make_path(&link->l_spath, 
-                                             &link->l_body.b_tfid,
-                                             ctx->fc_site->s_mdstore);
-                        if (rc) {
-                                c2_free(fom_obj);
-                                return -EINVAL;
-                        }
-                        rc = c2_md_make_path(&link->l_tpath, 
-                                             &link->l_body.b_pfid,
-                                             ctx->fc_site->s_mdstore);
-                        if (rc) {
-                                c2_free(link->l_spath.s_buf);
-                                c2_free(fom_obj);
-                                return -EINVAL;
-                        }
-                }
 	        break;
         case C2_FOP_UNLINK:
 		fom->fo_ops = &c2_md_fom_unlink_ops;
 		fop_type = &c2_fop_unlink_rep_fopt;
-		
-		unlink = c2_fop_data(fop);
-                if (!(unlink->u_body.b_bias & C2_MD_BIAS_SCAN_IN_PROGRESS)) {
-                        rc = c2_md_make_path(&unlink->u_path, 
-                                             &unlink->u_body.b_pfid,
-                                             ctx->fc_site->s_mdstore);
-                        if (rc) {
-                                c2_free(fom_obj);
-                                return -EINVAL;
-                        }
-                }
 	        break;
         case C2_FOP_RENAME:
 		fom->fo_ops = &c2_md_fom_rename_ops;
 		fop_type = &c2_fop_rename_rep_fopt;
-
-		rename = c2_fop_data(fop);
-                if (!(rename->r_sbody.b_bias & C2_MD_BIAS_SCAN_IN_PROGRESS)) {
-                        rc = c2_md_make_path(&rename->r_spath, 
-                                             &rename->r_sbody.b_pfid,
-                                             ctx->fc_site->s_mdstore);
-                        if (rc) {
-                                c2_free(fom_obj);
-                                return -EINVAL;
-                        }
-                        rc = c2_md_make_path(&rename->r_tpath, 
-                                             &rename->r_tbody.b_pfid,
-                                             ctx->fc_site->s_mdstore);
-                        if (rc) {
-                                c2_free(rename->r_spath.s_buf);
-                                c2_free(fom_obj);
-                                return -EINVAL;
-                        }
-                }
 	        break;
         case C2_FOP_OPEN:
 		fom->fo_ops = &c2_md_fom_open_ops;
 		fop_type = &c2_fop_open_rep_fopt;
-
-		open = c2_fop_data(fop);
-                if (!(open->o_body.b_bias & C2_MD_BIAS_SCAN_IN_PROGRESS)) {
-                        rc = c2_md_make_path(&open->o_path, 
-                                             &open->o_body.b_tfid,
-                                             ctx->fc_site->s_mdstore);
-                        if (rc) {
-                                c2_free(fom_obj);
-                                return -EINVAL;
-                        }
-                }
 	        break;
         case C2_FOP_CLOSE:
 		fom->fo_ops = &c2_md_fom_close_ops;
 		fop_type = &c2_fop_close_rep_fopt;
-
-		close = c2_fop_data(fop);
-                if (!(close->c_body.b_bias & C2_MD_BIAS_SCAN_IN_PROGRESS)) {
-                        rc = c2_md_make_path(&close->c_path, 
-                                             &close->c_body.b_tfid,
-                                             ctx->fc_site->s_mdstore);
-                        if (rc) {
-                                c2_free(fom_obj);
-                                return -EINVAL;
-                        }
-                }
 	        break;
         case C2_FOP_SETATTR:
 		fom->fo_ops = &c2_md_fom_setattr_ops;
 		fop_type = &c2_fop_setattr_rep_fopt;
-
-		setattr = c2_fop_data(fop);
-                if (!(setattr->s_body.b_bias & C2_MD_BIAS_SCAN_IN_PROGRESS)) {
-                        rc = c2_md_make_path(&setattr->s_path, 
-                                             &setattr->s_body.b_tfid,
-                                             ctx->fc_site->s_mdstore);
-                        if (rc) {
-                                c2_free(fom_obj);
-                                return -EINVAL;
-                        }
-                }
 	        break;
         case C2_FOP_GETATTR:
 		fom->fo_ops = &c2_md_fom_getattr_ops;
 		fop_type = &c2_fop_getattr_rep_fopt;
-
-		getattr = c2_fop_data(fop);
-                if (!(getattr->g_body.b_bias & C2_MD_BIAS_SCAN_IN_PROGRESS)) {
-                        rc = c2_md_make_path(&getattr->g_path, 
-                                             &getattr->g_body.b_tfid,
-                                             ctx->fc_site->s_mdstore);
-                        if (rc) {
-                                c2_free(fom_obj);
-                                return -EINVAL;
-                        }
-                }
 	        break;
         case C2_FOP_READDIR:
 		fom->fo_ops = &c2_md_fom_readdir_ops;
 		fop_type = &c2_fop_readdir_rep_fopt;
-
-		readdir = c2_fop_data(fop);
-                rc = c2_md_make_path(&readdir->r_path, 
-                                     &readdir->r_body.b_tfid,
-                                     ctx->fc_site->s_mdstore);
-                if (rc) {
-                        c2_free(fom_obj);
-                        return -EINVAL;
-                }
 	        break;
         default:
                 c2_free(fom_obj);
-                return -EINVAL;
+                return rc;
         }
 
         fom_obj->fm_fop_rep = c2_fop_alloc(fop_type, NULL);
diff --git a/mdservice/md_fops.c b/mdservice/md_fops.c
index daead0c..15eb232 100644
--- a/mdservice/md_fops.c
+++ b/mdservice/md_fops.c
@@ -39,38 +39,23 @@ static size_t c2_md_fol_pack_size(struct c2_fol_rec_desc *desc)
 	switch (fop->f_type->ft_code) {
 	case C2_FOP_CREATE:
 	        len += ((struct c2_fop_create *)data)->c_name.s_len;
-		len += ((struct c2_fop_create *)data)->c_path.s_len;
 		len += ((struct c2_fop_create *)data)->c_target.s_len;
 		break;
 	case C2_FOP_LINK:
 	        len += ((struct c2_fop_link *)data)->l_name.s_len;
-		len += ((struct c2_fop_link *)data)->l_spath.s_len;
-		len += ((struct c2_fop_link *)data)->l_tpath.s_len;
 		break;
 	case C2_FOP_UNLINK:
 	        len += ((struct c2_fop_unlink *)data)->u_name.s_len;
-		len += ((struct c2_fop_unlink *)data)->u_path.s_len;
 		break;
 	case C2_FOP_RENAME:
 	        len += ((struct c2_fop_rename *)data)->r_sname.s_len;
-		len += ((struct c2_fop_rename *)data)->r_spath.s_len;
 		len += ((struct c2_fop_rename *)data)->r_tname.s_len;
-		len += ((struct c2_fop_rename *)data)->r_tpath.s_len;
                 break;
 	case C2_FOP_SETATTR:
-	        len += ((struct c2_fop_setattr *)data)->s_path.s_len;
-	        break;
 	case C2_FOP_GETATTR:
-	        len += ((struct c2_fop_getattr *)data)->g_path.s_len;
-	        break;
 	case C2_FOP_OPEN:
-	        len += ((struct c2_fop_open *)data)->o_path.s_len;
-	        break;
 	case C2_FOP_CLOSE:
-	        len += ((struct c2_fop_close *)data)->c_path.s_len;
-	        break;
 	case C2_FOP_READDIR:
-	        len += ((struct c2_fop_readdir *)data)->r_path.s_len;
 	        break;
         default:
                 break;
@@ -99,38 +84,23 @@ static void c2_md_fol_pack(struct c2_fol_rec_desc *desc, void *buf)
 	switch (fop->f_type->ft_code) {
 	case C2_FOP_CREATE:
 	        copy(&ptr, &((struct c2_fop_create *)data)->c_name);
-	        copy(&ptr, &((struct c2_fop_create *)data)->c_path);
 	        copy(&ptr, &((struct c2_fop_create *)data)->c_target);
 		break;
 	case C2_FOP_LINK:
 	        copy(&ptr, &((struct c2_fop_link *)data)->l_name);
-		copy(&ptr, &((struct c2_fop_link *)data)->l_spath);
-		copy(&ptr, &((struct c2_fop_link *)data)->l_tpath);
 		break;
 	case C2_FOP_UNLINK:
 	        copy(&ptr, &((struct c2_fop_unlink *)data)->u_name);
-		copy(&ptr, &((struct c2_fop_unlink *)data)->u_path);
 	        break;
 	case C2_FOP_RENAME:
 	        copy(&ptr, &((struct c2_fop_rename *)data)->r_sname);
-		copy(&ptr, &((struct c2_fop_rename *)data)->r_spath);
 		copy(&ptr, &((struct c2_fop_rename *)data)->r_tname);
-		copy(&ptr, &((struct c2_fop_rename *)data)->r_tpath);
 		break;
 	case C2_FOP_SETATTR:
-	        copy(&ptr, &((struct c2_fop_setattr *)data)->s_path);
-	        break;
 	case C2_FOP_GETATTR:
-	        copy(&ptr, &((struct c2_fop_getattr *)data)->g_path);
-	        break;
 	case C2_FOP_OPEN:
-	        copy(&ptr, &((struct c2_fop_open *)data)->o_path);
-	        break;
 	case C2_FOP_CLOSE:
-	        copy(&ptr, &((struct c2_fop_close *)data)->c_path);
-	        break;
 	case C2_FOP_READDIR:
-	        copy(&ptr, &((struct c2_fop_readdir *)data)->r_path);
 	        break;
 	default:
 	        break;
@@ -156,47 +126,29 @@ static int c2_md_fol_open(const struct c2_fol_rec_type *type,
 	case C2_FOP_CREATE:
 	        ptr = (char *)((struct c2_fop_create *)data + 1);
 		map(&ptr, &((struct c2_fop_create *)data)->c_name);
-		map(&ptr, &((struct c2_fop_create *)data)->c_path);
 		map(&ptr, &((struct c2_fop_create *)data)->c_target);
 		break;
 	case C2_FOP_LINK:
 	        ptr = (char *)((struct c2_fop_link *)data + 1);
 		map(&ptr, &((struct c2_fop_link *)data)->l_name);
-		map(&ptr, &((struct c2_fop_link *)data)->l_spath);
-		map(&ptr, &((struct c2_fop_link *)data)->l_tpath);
 		break;
 	case C2_FOP_UNLINK:
 	        ptr = (char *)((struct c2_fop_unlink *)data + 1);
 		map(&ptr, &((struct c2_fop_unlink *)data)->u_name);
-		map(&ptr, &((struct c2_fop_unlink *)data)->u_path);
 		break;
 	case C2_FOP_RENAME:
 	        ptr = (char *)((struct c2_fop_rename *)data + 1);
 		map(&ptr, &((struct c2_fop_rename *)data)->r_sname);
-		map(&ptr, &((struct c2_fop_rename *)data)->r_spath);
 		map(&ptr, &((struct c2_fop_rename *)data)->r_tname);
-		map(&ptr, &((struct c2_fop_rename *)data)->r_tpath);
 		break;
 	case C2_FOP_SETATTR:
-	        ptr = (char *)((struct c2_fop_setattr *)data + 1);
-		map(&ptr, &((struct c2_fop_setattr *)data)->s_path);
-		break;
 	case C2_FOP_GETATTR:
-	        ptr = (char *)((struct c2_fop_getattr *)data + 1);
-		map(&ptr, &((struct c2_fop_getattr *)data)->g_path);
-		break;
 	case C2_FOP_OPEN:
-	        ptr = (char *)((struct c2_fop_open *)data + 1);
-		map(&ptr, &((struct c2_fop_open *)data)->o_path);
-		break;
 	case C2_FOP_CLOSE:
-	        ptr = (char *)((struct c2_fop_close *)data + 1);
-		map(&ptr, &((struct c2_fop_close *)data)->c_path);
-		break;
 	case C2_FOP_READDIR:
-	        ptr = (char *)((struct c2_fop_readdir *)data + 1);
-		map(&ptr, &((struct c2_fop_readdir *)data)->r_path);
 		break;
+        default:
+                break;
 	}
 
 	return 0;
diff --git a/mdservice/md_fops.ff b/mdservice/md_fops.ff
index 9ffc096..54a129c 100644
--- a/mdservice/md_fops.ff
+++ b/mdservice/md_fops.ff
@@ -62,7 +62,6 @@ DEF(c2_fop_cob, RECORD,
 
 DEF(c2_fop_create, RECORD,
     _(c_body,   c2_fop_cob),
-    _(c_path,   c2_fop_str),
     _(c_target, c2_fop_str), /**< target for symlink case */
     _(c_name,   c2_fop_str));
 
@@ -71,8 +70,6 @@ DEF(c2_fop_create_rep, RECORD,
 
 DEF(c2_fop_link, RECORD,
     _(l_body, c2_fop_cob),
-    _(l_spath, c2_fop_str),
-    _(l_tpath, c2_fop_str),
     _(l_name, c2_fop_str));
 
 DEF(c2_fop_link_rep, RECORD,
@@ -80,7 +77,6 @@ DEF(c2_fop_link_rep, RECORD,
 
 DEF(c2_fop_unlink, RECORD,
     _(u_body, c2_fop_cob),
-    _(u_path, c2_fop_str),
     _(u_name, c2_fop_str));
 
 DEF(c2_fop_unlink_rep, RECORD,
@@ -89,8 +85,6 @@ DEF(c2_fop_unlink_rep, RECORD,
 DEF(c2_fop_rename, RECORD,
     _(r_sbody, c2_fop_cob),
     _(r_tbody, c2_fop_cob),
-    _(r_spath, c2_fop_str),
-    _(r_tpath, c2_fop_str),
     _(r_sname, c2_fop_str),
     _(r_tname, c2_fop_str));
 
@@ -98,37 +92,32 @@ DEF(c2_fop_rename_rep, RECORD,
     _(r_body, c2_fop_cob));
 
 DEF(c2_fop_open, RECORD,
-    _(o_body, c2_fop_cob),
-    _(o_path, c2_fop_str));
+    _(o_body, c2_fop_cob));
 
 DEF(c2_fop_open_rep, RECORD,
     _(o_body, c2_fop_cob));
 
 DEF(c2_fop_close, RECORD,
-    _(c_body, c2_fop_cob),
-    _(c_path, c2_fop_str));
+    _(c_body, c2_fop_cob));
 
 DEF(c2_fop_close_rep, RECORD,
     _(c_body, c2_fop_cob));
 
 DEF(c2_fop_setattr, RECORD,
-    _(s_body, c2_fop_cob),
-    _(s_path, c2_fop_str));
+    _(s_body, c2_fop_cob));
 
 DEF(c2_fop_setattr_rep, RECORD,
     _(s_body, c2_fop_cob));
 
 DEF(c2_fop_getattr, RECORD,
-    _(g_body, c2_fop_cob),
-    _(g_path, c2_fop_str));
+    _(g_body, c2_fop_cob));
 
 DEF(c2_fop_getattr_rep, RECORD,
     _(g_body, c2_fop_cob));
 
 DEF(c2_fop_readdir, RECORD,
     _(r_body, c2_fop_cob),
-    _(r_pos,  c2_fop_str),
-    _(r_path, c2_fop_str));
+    _(r_pos,  c2_fop_str));
 
 DEF(c2_fop_buf, SEQUENCE,
     _(b_count, U32),
diff --git a/mdstore/ut/lustre.c b/mdstore/ut/lustre.c
index 9b27e13..e4c4e1b 100644
--- a/mdstore/ut/lustre.c
+++ b/mdstore/ut/lustre.c
@@ -292,8 +292,6 @@ void c2_md_lustre_fop_free(struct c2_fop *fop)
                 create = c2_fop_data(fop);
                 if (create->c_name.s_len != 0)
                         c2_free(create->c_name.s_buf);
-                if (create->c_path.s_len != 0)
-                        c2_free(create->c_path.s_buf);
                 if (create->c_target.s_len != 0)
                         c2_free(create->c_target.s_buf);
                 break;
@@ -301,28 +299,18 @@ void c2_md_lustre_fop_free(struct c2_fop *fop)
                 link = c2_fop_data(fop);
                 if (link->l_name.s_len != 0)
                         c2_free(link->l_name.s_buf);
-                if (link->l_spath.s_len != 0)
-                        c2_free(link->l_spath.s_buf);
-                if (link->l_tpath.s_len != 0)
-                        c2_free(link->l_tpath.s_buf);
                 break;
         case C2_FOP_UNLINK:
                 unlink = c2_fop_data(fop);
                 if (unlink->u_name.s_len != 0)
                         c2_free(unlink->u_name.s_buf);
-                if (unlink->u_path.s_len != 0)
-                        c2_free(unlink->u_path.s_buf);
                 break;
         case C2_FOP_RENAME:
                 rename = c2_fop_data(fop);
                 if (rename->r_sname.s_len != 0)
                         c2_free(rename->r_sname.s_buf);
-                if (rename->r_spath.s_len != 0)
-                        c2_free(rename->r_spath.s_buf);
                 if (rename->r_tname.s_len != 0)
                         c2_free(rename->r_tname.s_buf);
-                if (rename->r_tpath.s_len != 0)
-                        c2_free(rename->r_tpath.s_buf);
                 break;
         default:
                 break;
-- 
1.8.3.2


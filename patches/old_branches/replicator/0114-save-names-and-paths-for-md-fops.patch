From 3680b579c6497e23b02887b5464c77e7f5867766 Mon Sep 17 00:00:00 2001
From: Andrew Perepechko <anserper@ya.ru>
Date: Wed, 8 Jun 2011 16:16:15 +0400
Subject: [PATCH 114/177] save names and paths for md fops

---
 mdservice/md_fops.c | 107 +++++++++++++++++++++++++++++++---------------------
 1 file changed, 63 insertions(+), 44 deletions(-)

diff --git a/mdservice/md_fops.c b/mdservice/md_fops.c
index a0244a1..24060e8 100644
--- a/mdservice/md_fops.c
+++ b/mdservice/md_fops.c
@@ -11,85 +11,104 @@
 #include "mdservice/md_foms.h"
 #include "mdservice/md_fops.h"
 
-static size_t md_fol_pack_size(struct c2_fol_rec_desc *desc)
+static size_t c2_md_fol_pack_size(struct c2_fol_rec_desc *desc)
 {
 	struct c2_fop *fop = desc->rd_type_private;
 	size_t len = fop->f_type->ft_fmt->ftf_layout->fm_sizeof;
 	void *data = c2_fop_data(fop);
 
 	switch (fop->f_type->ft_code) {
-	case C2_FOP_CREATE:  len += ((struct c2_fop_create *)data)->c_name.n_len;
+	case C2_FOP_CREATE:  len += ((struct c2_fop_create *)data)->c_name.s_len;
+			     len += ((struct c2_fop_create *)data)->c_path.s_len;
 			     break;
-	case C2_FOP_LINK:    len += ((struct c2_fop_link *)data)->l_name.n_len;
+	case C2_FOP_LINK:    len += ((struct c2_fop_link *)data)->l_name.s_len;
+			     len += ((struct c2_fop_link *)data)->l_path.s_len;
 			     break;
-	case C2_FOP_UNLINK:  len += ((struct c2_fop_unlink *)data)->u_name.n_len;
+	case C2_FOP_UNLINK:  len += ((struct c2_fop_unlink *)data)->u_name.s_len;
+			     len += ((struct c2_fop_unlink *)data)->u_path.s_len;
 			     break;
-	case C2_FOP_RENAME:  len += ((struct c2_fop_rename *)data)->r_sname.n_len;
-			     len += ((struct c2_fop_rename *)data)->r_tname.n_len;
+	case C2_FOP_RENAME:  len += ((struct c2_fop_rename *)data)->r_sname.s_len;
+			     len += ((struct c2_fop_rename *)data)->r_spath.s_len;
+			     len += ((struct c2_fop_rename *)data)->r_tname.s_len;
+			     len += ((struct c2_fop_rename *)data)->r_tpath.s_len;
+			     break;
+	case C2_FOP_SETATTR: len += ((struct c2_fop_rename *)data)->r_spath.s_len;
 			     break;
-	case C2_FOP_SETATTR: break; /* we need a name for setattr for Replicator too */
 	}
 
 	return (len + 7) & ~7;
 }
 
-static void md_fol_pack(struct c2_fol_rec_desc *desc, void *buf)
+static void copy(char **buf, struct c2_fop_str *str)
+{
+	memcpy(*buf, str->s_buf, str->s_len);
+	*buf += str->s_len;
+}
+
+static void c2_md_fol_pack(struct c2_fol_rec_desc *desc, void *buf)
 {
 	struct c2_fop *fop = desc->rd_type_private;
-	char *data = c2_fop_data(fop), *name, *ptr;
+	char *data = c2_fop_data(fop), *ptr;
 	size_t size = fop->f_type->ft_fmt->ftf_layout->fm_sizeof;
 
 	memcpy(buf, data, size);
 	ptr = (char *)buf + size;
 
 	switch (fop->f_type->ft_code) {
-	case C2_FOP_CREATE:  size = ((struct c2_fop_create *)data)->c_name.n_len;
-			     name = ((struct c2_fop_create *)data)->c_name.n_name;
-			     memcpy(ptr, name, size);
+	case C2_FOP_CREATE:  copy(&ptr, &((struct c2_fop_create *)data)->c_name);
+			     copy(&ptr, &((struct c2_fop_create *)data)->c_path);
+			     break;
+	case C2_FOP_LINK:    copy(&ptr, &((struct c2_fop_link *)data)->l_name);
+			     copy(&ptr, &((struct c2_fop_link *)data)->l_path);
 			     break;
-	case C2_FOP_LINK:    size = ((struct c2_fop_link *)data)->l_name.n_len;
-			     name = ((struct c2_fop_link *)data)->l_name.n_name;
-			     memcpy(ptr, name, size);
+	case C2_FOP_UNLINK:  copy(&ptr, &((struct c2_fop_unlink *)data)->u_name);
+			     copy(&ptr, &((struct c2_fop_unlink *)data)->u_path);
 			     break;
-	case C2_FOP_UNLINK:  size = ((struct c2_fop_unlink *)data)->u_name.n_len;
-			     name = ((struct c2_fop_unlink *)data)->u_name.n_name;
-			     memcpy(ptr, name, size);
+	case C2_FOP_RENAME:  copy(&ptr, &((struct c2_fop_rename *)data)->r_sname);
+			     copy(&ptr, &((struct c2_fop_rename *)data)->r_spath);
+			     copy(&ptr, &((struct c2_fop_rename *)data)->r_tname);
+			     copy(&ptr, &((struct c2_fop_rename *)data)->r_tpath);
 			     break;
-	case C2_FOP_RENAME:  size = ((struct c2_fop_rename *)data)->r_sname.n_len;
-			     name = ((struct c2_fop_rename *)data)->r_sname.n_name;
-			     memcpy(ptr, name, size);
-			     ptr += size;
-			     size = ((struct c2_fop_rename *)data)->r_tname.n_len;
-			     name = ((struct c2_fop_rename *)data)->r_tname.n_name;
-			     memcpy(ptr, name, size);
+	case C2_FOP_SETATTR: copy(&ptr, &((struct c2_fop_setattr *)data)->s_path);
 			     break;
-	case C2_FOP_SETATTR: break; /* we need a name for setattr for Replicator too */
 	}
 }
 
-static int md_fol_open(const struct c2_fol_rec_type *type,
-                       struct c2_fol_rec_desc *desc)
+static void map(char **buf, struct c2_fop_str *str)
+{
+	str->s_buf = *buf;
+	*buf += str->s_len;
+}
+
+static int c2_md_fol_open(const struct c2_fol_rec_type *type,
+			  struct c2_fol_rec_desc *desc)
 {
 	void *data = desc->rd_data;
-	char **name;
+	char *ptr;
 
+	/* XXX: can we get sizeof() and init ptr using rt_opcode? */
 	switch (type->rt_opcode) {
-	case C2_FOP_CREATE:  name = &((struct c2_fop_create *)data)->c_name.n_name;
-			     *name = (char *)(((struct c2_fop_create *)data) + 1);
+	case C2_FOP_CREATE:  ptr = (char *)((struct c2_fop_create *)data + 1);
+			     map(&ptr, &((struct c2_fop_create *)data)->c_name);
+			     map(&ptr, &((struct c2_fop_create *)data)->c_path);
+			     break;
+	case C2_FOP_LINK:    ptr = (char *)((struct c2_fop_link *)data + 1);
+			     map(&ptr, &((struct c2_fop_link *)data)->l_name);
+			     map(&ptr, &((struct c2_fop_link *)data)->l_path);
 			     break;
-	case C2_FOP_LINK:    name = &((struct c2_fop_link *)data)->l_name.n_name;
-			     *name = (char *)(((struct c2_fop_link *)data) + 1);
+	case C2_FOP_UNLINK:  ptr = (char *)((struct c2_fop_unlink *)data + 1);
+			     map(&ptr, &((struct c2_fop_unlink *)data)->u_name);
+			     map(&ptr, &((struct c2_fop_unlink *)data)->u_path);
 			     break;
-	case C2_FOP_UNLINK:  name = &((struct c2_fop_unlink *)data)->u_name.n_name;
-			     *name = (char *)(((struct c2_fop_unlink *)data) + 1);
+	case C2_FOP_RENAME:  ptr = (char *)((struct c2_fop_rename *)data + 1);
+			     map(&ptr, &((struct c2_fop_rename *)data)->r_sname);
+			     map(&ptr, &((struct c2_fop_rename *)data)->r_spath);
+			     map(&ptr, &((struct c2_fop_rename *)data)->r_tname);
+			     map(&ptr, &((struct c2_fop_rename *)data)->r_tpath);
 			     break;
-	case C2_FOP_RENAME:  name = &((struct c2_fop_rename *)data)->r_sname.n_name;
-			     *name = (char *)(((struct c2_fop_rename *)data) + 1);
-			     name = &((struct c2_fop_rename *)data)->r_tname.n_name;
-			     *name = ((struct c2_fop_rename *)data)->r_sname.n_name +
-			             ((struct c2_fop_rename *)data)->r_sname.n_len;
+	case C2_FOP_SETATTR: ptr = (char *)((struct c2_fop_setattr *)data + 1);
+			     map(&ptr, &((struct c2_fop_setattr *)data)->s_path);
 			     break;
-	case C2_FOP_SETATTR: break; /* we need a name for setattr for Replicator too */
 	}
 
 	return 0;
@@ -100,10 +119,10 @@ static const struct c2_fol_rec_type_ops c2_md_fop_fol_ops = {
 	.rto_abort      = NULL,
 	.rto_persistent = NULL,
 	.rto_cull       = NULL,
-	.rto_open       = md_fol_open,
+	.rto_open       = c2_md_fol_open,
 	.rto_fini       = NULL,
-	.rto_pack_size  = md_fol_pack_size,
-	.rto_pack       = md_fol_pack
+	.rto_pack_size  = c2_md_fol_pack_size,
+	.rto_pack       = c2_md_fol_pack
 };
 
 static struct c2_fop_type_ops c2_md_req_ops = {
-- 
1.8.3.2


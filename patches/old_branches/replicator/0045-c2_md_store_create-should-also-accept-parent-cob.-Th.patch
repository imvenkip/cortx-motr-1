From 705e6174b7658417685cff2fa7abfcc0e0c1b5c5 Mon Sep 17 00:00:00 2001
From: Yuriy Umanets <yuriy_umanets@xyratex.com>
Date: Thu, 7 Apr 2011 07:53:54 -0600
Subject: [PATCH 045/177] - c2_md_store_create() should also accept parent cob.
 This makes caller to locate for parent before calling create and this ways
 enforces semantics rule that parent should exeist; - c2_md_store_alloc()
 allocates new cob and assignes a fid to it; - update parent mtime in create
 time.

---
 mdservice/md_foms.c  | 27 +++++++++++++++++----
 mdstore/mdstore.c    | 66 ++++++++++++++++++++++++++++------------------------
 mdstore/mdstore.h    |  3 +++
 utils/mkfs.colibri.c |  4 ++--
 4 files changed, 63 insertions(+), 37 deletions(-)

diff --git a/mdservice/md_foms.c b/mdservice/md_foms.c
index 4c0b9f3..e6b629e 100644
--- a/mdservice/md_foms.c
+++ b/mdservice/md_foms.c
@@ -64,14 +64,18 @@ static int c2_md_create_fom_perm(struct c2_fom *fom)
 
 static int c2_md_create_fom_state(struct c2_fom *fom)
 {
+        struct c2_fop_cob        *body;
         struct c2_site           *site;
         struct c2_cob            *cob;
+        struct c2_cob            *pcob;
         struct c2_fop_create     *req;
         struct c2_fop_create_rep *rep;
         struct c2_fom_md         *fom_obj;
         struct c2_fop            *fop;
         struct c2_fop            *fop_rep;
         struct c2_fop_ctx        *ctx;
+        struct c2_fid             pfid;
+        struct c2_fid             tfid;
         int                       rc;
 
         fom_obj = container_of(fom, struct c2_fom_md, fm_fom);
@@ -88,14 +92,27 @@ static int c2_md_create_fom_state(struct c2_fom *fom)
         site = ctx->fc_site;
         C2_ASSERT(site != NULL);
 
-        rc = c2_md_store_alloc(site->s_mdstore, &cob);
+        rep = c2_fop_data(fop_rep);
+        req = c2_fop_data(fop);
+        body = &req->c_body;
+
+        c2_md_make_fid(&pfid, &body->b_pfid);
+        rc = c2_md_store_locate(site->s_mdstore, &pfid, &pcob, 
+                                C2_MD_STORE_LOCATE_STORE,
+                                &ctx->fc_tx->tx_dbtx);
         if (rc)
                 goto out;
+                       
+        c2_md_make_fid(&tfid, &body->b_tfid);
+        rc = c2_md_store_alloc(site->s_mdstore, &tfid, &cob);
+        if (rc) {
+                c2_cob_put(pcob);
+                goto out;
+        }
 
-        req = c2_fop_data(fop);
-        rep = c2_fop_data(fop_rep);
-
-        rc = c2_md_store_create(site->s_mdstore, cob, req, rep, ctx);
+        rc = c2_md_store_create(site->s_mdstore, pcob, cob, req, 
+                                rep, ctx);
+        c2_cob_put(pcob);
         c2_cob_put(cob);
 out:
 	fom->fo_phase = rc ? FOPH_FAILED : FOPH_DONE;
diff --git a/mdstore/mdstore.c b/mdstore/mdstore.c
index 9a8a4a8..8a2d4f5 100644
--- a/mdstore/mdstore.c
+++ b/mdstore/mdstore.c
@@ -101,6 +101,7 @@ void c2_md_store_fini(struct c2_md_store *md)
 }
 
 int c2_md_store_create_attr(struct c2_md_store *md,
+                            struct c2_cob *pcob,
                             struct c2_cob *cob,
                             struct c2_cob_nskey *nskey,
                             struct c2_cob_nsrec *nsrec,
@@ -108,8 +109,7 @@ int c2_md_store_create_attr(struct c2_md_store *md,
                             struct c2_cob_omgrec *omgrec,
                             struct c2_db_tx *tx)
 {
-        struct c2_cob         *pcob;
-        int                    rc;
+        int    rc;
         
         rc = c2_cob_create(cob, nskey, nsrec, fabrec, omgrec, 0, tx);
         if (rc)
@@ -129,22 +129,20 @@ int c2_md_store_create_attr(struct c2_md_store *md,
                          * Add direntry ".." to empty dir. To do so we 
                          * need parent cob first.
                          */
-                        rc = c2_md_store_locate(md, &nskey->cnk_pfid, &pcob, 0, tx);
-                        if (rc)
-                                return rc;
-
                         rc = c2_md_store_add_name(pcob, &cob->co_fid, "..", 2, tx);
-                        if (rc) {
-                                c2_cob_put(pcob);
+                        if (rc)
                                 return rc;
-                        }
 
                         /*
+                         * Update mtime in parent.
+                         */
+                        pcob->co_nsrec.cnr_mtime = nsrec->cnr_mtime;
+                         
+                        /*
                          * Update on-store cob so that updated number of links
                          * is saved.
                          */
                         rc = c2_cob_update(pcob, &pcob->co_nsrec,  NULL, NULL, tx);
-                        c2_cob_put(pcob);
                 } else {
                         rc = c2_md_store_add_name(cob, &cob->co_fid, "..", 2, tx);
                         if (rc)
@@ -160,6 +158,7 @@ int c2_md_store_create_attr(struct c2_md_store *md,
 }
 
 int c2_md_store_create(struct c2_md_store *md,
+                       struct c2_cob *pcob,
                        struct c2_cob *cob,
                        struct c2_fop_create *req,
                        struct c2_fop_create_rep *rep,
@@ -173,9 +172,15 @@ int c2_md_store_create(struct c2_md_store *md,
         time_t                 now;
         int                    rc;
 
-        c2_md_make_nskey(&nskey, &body->b_pfid, &req->c_name);
+        c2_md_store_make_nskey(&nskey, &pcob->co_fid, 
+                               req->c_name.n_name, 
+                               req->c_name.n_count);
         c2_md_make_fid(&nsrec.cnr_fid, &body->b_tfid);
 
+        C2_SET0(&nsrec);
+        C2_SET0(&fabrec);
+        C2_SET0(&omgrec);
+
         /*
          * Create case, nlink == 0, will be bumped by c2_cob_create()
          * where needed.
@@ -199,31 +204,25 @@ int c2_md_store_create(struct c2_md_store *md,
          * @todo: these need to be fixed. Before data replication
          * we don't need them.
          */
-        nsrec.u.cnr_size = 0;
-        nsrec.cnr_blksize = 0;
-        nsrec.cnr_blocks = 0;
+        if (S_ISDIR(body->b_mode))
+                nsrec.u.cnr_size = 4096;
+        else
+                nsrec.u.cnr_size = 0;
 
-        time(&now);
-        nsrec.cnr_atime = now;
-        nsrec.cnr_mtime = now;
-        nsrec.cnr_ctime = now;
+        nsrec.cnr_blksize = 4096;
+        nsrec.cnr_blocks = 16;
 
-        /* 
-         * @todo: Fill fabrec. 
-         */
-        C2_SET0(&fabrec);
-        
-        /* 
-         * @todo: allocate omg.
+        /*
+         * Set time stamps to current moment. May be it is better to
+         * use c2_time instead.
          */
-        nsrec.cnr_omgid = 0;
+        nsrec.cnr_atime = nsrec.cnr_mtime = nsrec.cnr_ctime = time(&now);
 
-        C2_SET0(&omgrec);
         omgrec.cor_uid = body->b_uid;
         omgrec.cor_gid = body->b_gid;
         omgrec.cor_mode = body->b_mode;
 
-        rc = c2_md_store_create_attr(md, cob, nskey, &nsrec, &fabrec, 
+        rc = c2_md_store_create_attr(md, pcob, cob, nskey, &nsrec, &fabrec, 
                                      &omgrec, &ctx->fc_tx->tx_dbtx);
         C2_ADDB_ADD(&md->md_addb, &mdstore_addb_loc, 
                     c2_addb_func_fail, "md_create", rc);
@@ -606,7 +605,14 @@ int c2_md_store_lookup(struct c2_md_store *md, struct c2_cob *pcob,
 /**
    Allocate new cob on mdstore @md.
 */
-int c2_md_store_alloc(struct c2_md_store *md, struct c2_cob **cob)
+int c2_md_store_alloc(struct c2_md_store *md, 
+                      struct c2_fid *fid, 
+                      struct c2_cob **cob)
 {
-        return c2_cob_alloc(&md->md_dom, cob);
+        int  rc;
+        
+        rc = c2_cob_alloc(&md->md_dom, cob);
+        if (rc == 0)
+                (*cob)->co_nsrec.cnr_fid = *fid;
+        return rc;
 }
diff --git a/mdstore/mdstore.h b/mdstore/mdstore.h
index dbb5ccb..1da171d 100644
--- a/mdstore/mdstore.h
+++ b/mdstore/mdstore.h
@@ -92,6 +92,7 @@ int c2_md_store_rename(struct c2_md_store *md,
    Error code is returned in error case or zero otherwise.
 */
 int c2_md_store_create(struct c2_md_store *md, 
+                       struct c2_cob *pcob,
                        struct c2_cob *cob,
                        struct c2_fop_create *req, 
                        struct c2_fop_create_rep *rep, 
@@ -184,6 +185,7 @@ int c2_md_store_lookup(struct c2_md_store *md,
    Allocate new cob on mdstore @md.
 */
 int c2_md_store_alloc(struct c2_md_store *md, 
+                      struct c2_fid *fid,
                       struct c2_cob **cob);
 
 /**
@@ -199,6 +201,7 @@ int c2_md_store_add_name(struct c2_cob *cob,
    Create a cob using passed attributes and nskey.
 */
 int c2_md_store_create_attr(struct c2_md_store *md, 
+                            struct c2_cob *pcob, 
                             struct c2_cob *cob, 
                             struct c2_cob_nskey *nskey, 
                             struct c2_cob_nsrec *nsrec, 
diff --git a/utils/mkfs.colibri.c b/utils/mkfs.colibri.c
index 6cd2299..5d2323c 100644
--- a/utils/mkfs.colibri.c
+++ b/utils/mkfs.colibri.c
@@ -150,13 +150,13 @@ int main(int argc, char *argv[])
                           S_IRGRP | S_IXGRP |           /* r-x for group */
                           S_IROTH | S_IXOTH;            /* r-x for others */
 
-        rc = c2_md_store_alloc(&md, &cob);
+        rc = c2_md_store_alloc(&md, &C2_MD_ROOT_FID, &cob);
         if (rc)
                 goto out_free_md;
 
         c2_db_tx_init(&tx, &db, 0);
         
-        rc = c2_md_store_create_attr(&md, cob, nskey, &nsrec, 
+        rc = c2_md_store_create_attr(&md, cob, cob, nskey, &nsrec, 
                                      &fabrec, &omgrec, &tx);
 
         /*
-- 
1.8.3.2


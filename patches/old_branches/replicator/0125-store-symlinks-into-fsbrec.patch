From 840475095e348ccf7305bb2c5aa2ab90d2f601b8 Mon Sep 17 00:00:00 2001
From: Yuriy Umanets <yuriy_umanets@xyratex.com>
Date: Mon, 13 Jun 2011 06:17:00 -0600
Subject: [PATCH 125/177] - store symlinks into fsbrec; - fixed double free of
 nskey.

---
 cob/cob.c            | 80 +++++++++++++++++++++++++++++++++++++---------------
 cob/cob.h            | 16 +++++++++--
 cob/ut/cob.c         | 37 +++++++++++-------------
 mdservice/md_foms.c  | 10 +++++++
 mdservice/md_fops.c  | 19 +++++++++----
 mdservice/md_fops.ff |  7 +++--
 mdstore/mdstore.c    | 21 ++++++++------
 mdstore/ut/lustre.c  |  2 ++
 mdstore/ut/mdstore.c | 10 +++----
 utils/mkfs.colibri.c | 13 +++++----
 10 files changed, 141 insertions(+), 74 deletions(-)

diff --git a/cob/cob.c b/cob/cob.c
index c9a5c2b..6750463 100644
--- a/cob/cob.c
+++ b/cob/cob.c
@@ -91,6 +91,39 @@ int c2_cob_nskey_size(const struct c2_cob_nskey *cnk)
                 c2_bitstring_len_get(&cnk->cnk_name);
 }
 
+int c2_cob_fabrec_size(const struct c2_cob_fabrec *rec)
+{
+        return sizeof(*rec) + rec->cfb_linklen;
+}
+
+void c2_cob_make_fabrec(struct c2_cob_fabrec **rech, 
+                        const char *link, int linklen)
+{
+        struct c2_cob_fabrec *rec;
+        
+        rec = c2_alloc(sizeof(struct c2_cob_fabrec) + linklen);
+        C2_ASSERT(rec != NULL);
+        rec->cfb_linklen = linklen;
+        if (linklen > 0)
+                memcpy(rec->cfb_link, link, linklen);
+        *rech = rec;
+}
+
+int c2_cob_fabrec_size_max(void)
+{
+        return sizeof(struct c2_cob_fabrec) + NAME_MAX;
+}
+
+void c2_cob_make_fabrec_max(struct c2_cob_fabrec **rech)
+{
+        struct c2_cob_fabrec *rec;
+        
+        rec = c2_alloc(sizeof(struct c2_cob_fabrec) + NAME_MAX);
+        C2_ASSERT(rec != NULL);
+        rec->cfb_linklen = NAME_MAX;
+        *rech = rec;
+}
+
 /**
    Make nskey for iterator. Allocate space for max possible name
    but put real string len into the struct.
@@ -185,7 +218,7 @@ static const struct c2_table_ops cob_fab_ops = {
 			.max_size = sizeof(struct c2_cob_fabkey)
 		},
 		[TO_REC] = {
-                        .max_size = sizeof(struct c2_cob_fabrec)
+                        .max_size = ~0
 		}
 	},
 	.key_cmp = fb_cmp
@@ -302,7 +335,8 @@ static void cob_fini(struct c2_cob *cob)
                 c2_free(cob->co_nskey);
         else if (cob->co_valid & CA_NSKEY_DB)
                 c2_db_pair_fini(&cob->co_oipair);
-
+        if (cob->co_valid & CA_FABREC)
+                c2_free(cob->co_fabrec);
 	c2_addb_ctx_fini(&cob->co_addb);
 }
 
@@ -468,9 +502,10 @@ static int cob_fab_lookup(struct c2_cob *cob, struct c2_db_tx *tx)
                 return 0;
 
         fabkey.cfb_fid = *cob->co_fid;
+        c2_cob_make_fabrec_max(&cob->co_fabrec);
         c2_db_pair_setup(&pair, &cob->co_dom->cd_fileattr_basic,
-			 &fabkey, sizeof fabkey,
-			 &cob->co_fabrec, sizeof cob->co_fabrec);
+			 &fabkey, sizeof fabkey, cob->co_fabrec,
+			 c2_cob_fabrec_size_max());
         rc = c2_table_lookup(tx, &pair);
         c2_db_pair_release(&pair);
         c2_db_pair_fini(&pair);
@@ -728,14 +763,13 @@ int c2_cob_create(struct c2_cob        *cob,
                   struct c2_cob_nsrec  *nsrec,
                   struct c2_cob_fabrec *fabrec,
                   struct c2_cob_omgrec *omgrec,
-                  uint64_t              need,
                   struct c2_db_tx      *tx)
 {
         struct c2_db_pair     pair;
         struct c2_cob_omgkey  omgkey;
         struct c2_cob_fabkey  fabkey;
         struct c2_db_cursor   cursor;
-	int                   rc;
+        int                   rc;
 
         C2_PRE(cob != NULL);
         C2_PRE(nskey != NULL);
@@ -758,8 +792,8 @@ int c2_cob_create(struct c2_cob        *cob,
                 return rc;
 
         c2_db_pair_setup(&pair, &cob->co_dom->cd_fileattr_omg,
-			 &omgkey, sizeof omgkey,
-			 &cob->co_omgrec, sizeof cob->co_omgrec);
+			 &omgkey, sizeof omgkey, &cob->co_omgrec,
+			 sizeof cob->co_omgrec);
 
         rc = c2_db_cursor_get(&cursor, &pair);
         if (rc == 0)
@@ -784,12 +818,6 @@ int c2_cob_create(struct c2_cob        *cob,
         cob->co_nskey = nskey;
         cob->co_valid |= CA_NSKEY;
 
-        /* 
-         * Take over nskey memory management from caller. 
-         */
-        if (need & CA_NSKEY_FREE)
-                cob->co_valid |= CA_NSKEY_FREE;
-
         /*
          * This is what add_name will use to create new name.
          */
@@ -820,15 +848,14 @@ int c2_cob_create(struct c2_cob        *cob,
         /* 
          * Now let's update file attributes. Cache the fabrec. 
          */
-        cob->co_fabrec = *fabrec;
-        cob->co_valid |= CA_FABREC;
-        
+        cob->co_fabrec = fabrec;
+
         /* 
          * Add to fileattr-basic table. 
          */
         c2_db_pair_setup(&pair, &cob->co_dom->cd_fileattr_basic,
-			 &fabkey, sizeof fabkey,
-			 &cob->co_fabrec, sizeof cob->co_fabrec);
+			 &fabkey, sizeof fabkey, cob->co_fabrec, 
+			 c2_cob_fabrec_size(cob->co_fabrec));
 
         rc = c2_table_insert(tx, &pair);
         c2_db_pair_release(&pair);
@@ -857,6 +884,11 @@ int c2_cob_create(struct c2_cob        *cob,
         rc = c2_table_insert(tx, &pair);
         c2_db_pair_release(&pair);
 	c2_db_pair_fini(&pair);
+
+        if (rc == 0) {
+                cob->co_valid |= CA_NSKEY_FREE;
+                cob->co_valid |= CA_FABREC;
+        }
 out:
         C2_ADDB_ADD(&cob->co_dom->cd_addb, &cob_addb_loc, 
                     c2_addb_func_fail, "cob_create", rc);
@@ -956,12 +988,16 @@ int c2_cob_update(struct c2_cob         *cob,
         
         if (fabrec != NULL) {
                 fabkey.cfb_fid = *cob->co_fid;
-                cob->co_fabrec = *fabrec;
+                if (fabrec != cob->co_fabrec) {
+                        if (cob->co_valid & CA_FABREC)
+                                c2_free(cob->co_fabrec);
+                        cob->co_fabrec = fabrec;
+                }
                 cob->co_valid |= CA_FABREC;
         
                 c2_db_pair_setup(&pair, &cob->co_dom->cd_fileattr_basic,
-                                 &fabkey, sizeof fabkey,
-                                 &cob->co_fabrec, sizeof cob->co_fabrec);
+                                 &fabkey, sizeof fabkey, cob->co_fabrec, 
+                                 c2_cob_fabrec_size(cob->co_fabrec));
                 rc = c2_table_update(tx, &pair);
                 c2_db_pair_release(&pair);
                 c2_db_pair_fini(&pair);
diff --git a/cob/cob.h b/cob/cob.h
index 511da22..f1801e6 100644
--- a/cob/cob.h
+++ b/cob/cob.h
@@ -226,6 +226,8 @@ struct c2_cob_attr {
         int               ca_zombie;  /**< object is zombie. */
         char             *ca_name;    /**< object name */
         int32_t           ca_namelen; /**< name length */
+        char             *ca_link;    /**< symlink */
+        uint16_t          ca_linklen; /**< symlink length */
 };
 
 /** 
@@ -294,6 +296,8 @@ struct c2_cob_fabkey {
 struct c2_cob_fabrec {
         struct c2_verno   cfb_version;  /**< version from last fop */
         uint64_t          cfb_layoutid; /**< reference to layout. */
+        uint16_t          cfb_linklen;  /**< symlink len if any */
+        char              cfb_link[0];  /**< symlink body */
         /* add ACL, any other md not needed for stat(2) */
 };
 
@@ -379,7 +383,7 @@ struct c2_cob {
         struct c2_cob_nskey   *co_nskey;    /**< cob statdata nskey */
         struct c2_cob_oikey    co_oikey;    /**< object fid, linkno */
         struct c2_cob_nsrec    co_nsrec;    /**< object fid, basic stat data */
-        struct c2_cob_fabrec   co_fabrec;   /**< fileattr_basic data (acl, etc) */
+        struct c2_cob_fabrec  *co_fabrec;   /**< fileattr_basic data (acl, etc) */
         struct c2_cob_omgrec   co_omgrec;   /**< permission data */
         struct c2_db_pair      co_oipair;   /**< used for oi accesss */
 	struct c2_addb_ctx     co_addb;     /**< cob private addb ctx. */
@@ -450,7 +454,6 @@ int c2_cob_create(struct c2_cob        *cob,
                   struct c2_cob_nsrec  *nsrec,
                   struct c2_cob_fabrec *fabrec,
                   struct c2_cob_omgrec *omgrec,
-                  uint64_t              need,
                   struct c2_db_tx      *tx);
 
 /**
@@ -586,6 +589,15 @@ void c2_cob_make_nskey_max(struct c2_cob_nskey **keyh,
  */
 int c2_cob_nskey_size_max(const struct c2_cob_nskey *cnk);
 
+int c2_cob_fabrec_size(const struct c2_cob_fabrec *rec);
+
+void c2_cob_make_fabrec(struct c2_cob_fabrec **rech,
+                        const char *link, int linklen);
+
+int c2_cob_fabrec_size_max(void);
+
+void c2_cob_make_fabrec_max(struct c2_cob_fabrec **rech);
+
 /** @} end group cob */
 
 /* __COLIBRI_COB_COB_H__ */
diff --git a/cob/ut/cob.c b/cob/ut/cob.c
index 4af2192..6efed06 100644
--- a/cob/ut/cob.c
+++ b/cob/ut/cob.c
@@ -63,14 +63,13 @@ static void test_fini(void)
 
 static void test_create(void)
 {
-        struct c2_cob_nskey *key;
-        struct c2_cob_nsrec  nsrec;
-        struct c2_cob_fabrec fabrec;
-        struct c2_cob_omgrec omgrec;
-        struct c2_fid        pfid;
-        struct c2_db_tx      tx;
+        struct c2_cob_nskey    *key;
+        struct c2_cob_nsrec    nsrec;
+        struct c2_cob_fabrec  *fabrec;
+        struct c2_cob_omgrec   omgrec;
+        struct c2_fid          pfid;
+        struct c2_db_tx        tx;
 
-	C2_SET0(&fabrec); /* zero fill to keep valgrind happy. */
 	C2_SET0(&nsrec);
 	C2_SET0(&omgrec);
 
@@ -87,17 +86,15 @@ static void test_create(void)
         c2_db_tx_init(&tx, dom.cd_dbenv, 0);
         rc = c2_cob_alloc(&dom, &cob);
         C2_UT_ASSERT(rc == 0);
-	rc = c2_cob_create(cob, key, &nsrec, &fabrec, &omgrec, 
-	                   0 /* we'll free below */, &tx);
+        c2_cob_make_fabrec(&fabrec, NULL, 0);
+	rc = c2_cob_create(cob, key, &nsrec, fabrec, &omgrec, 
+	                   &tx);
 	C2_UT_ASSERT(rc == 0);
 
         nsrec.cnr_nlink++;
         rc = c2_cob_update(cob, &nsrec, NULL, NULL, &tx);
 	C2_UT_ASSERT(rc == 0);
         c2_cob_put(cob);
-        
-        c2_free(key);
-
         c2_db_tx_commit(&tx);
 }
 
@@ -328,13 +325,12 @@ static void newtx(int i) {
 
 static void ub_create(int i)
 {
-        struct c2_cob_nskey *key;
-        struct c2_cob_nsrec  nsrec;
-        struct c2_cob_fabrec fabrec;
-        struct c2_cob_omgrec omgrec;
-        struct c2_fid        fid;
+        struct c2_cob_nskey   *key;
+        struct c2_cob_nsrec    nsrec;
+        struct c2_cob_fabrec  *fabrec;
+        struct c2_cob_omgrec   omgrec;
+        struct c2_fid          fid;
 
-	C2_SET0(&fabrec); /* zero fill to keep valgrind happy. */
 	C2_SET0(&nsrec);
 	C2_SET0(&omgrec);
 
@@ -353,8 +349,9 @@ static void ub_create(int i)
         rc = c2_cob_alloc(&dom, &cob);
         C2_UT_ASSERT(rc == 0);
 
-	rc = c2_cob_create(cob, key, &nsrec, &fabrec, &omgrec, 
-	                   CA_NSKEY_FREE, &cob_ub_tx);
+        c2_cob_make_fabrec(&fabrec, NULL, 0);
+	rc = c2_cob_create(cob, key, &nsrec, fabrec, &omgrec, 
+	                   &cob_ub_tx);
 	C2_UB_ASSERT(rc == 0);
 
         c2_cob_put(cob);
diff --git a/mdservice/md_foms.c b/mdservice/md_foms.c
index a6357db..d5c33c6 100644
--- a/mdservice/md_foms.c
+++ b/mdservice/md_foms.c
@@ -80,6 +80,7 @@ void c2_md_make_oikey(struct c2_cob_oikey *oikey,
 static void c2_md_fop_cob2attr(struct c2_cob_attr *attr, 
                                struct c2_fop_cob *body)
 {
+        C2_SET0(attr);
         c2_md_make_fid(&attr->ca_pfid, &body->b_pfid);
         c2_md_make_fid(&attr->ca_tfid, &body->b_tfid);
         attr->ca_flags = body->b_valid;
@@ -246,8 +247,17 @@ static int c2_md_create_fom_state(struct c2_fom *fom)
 
         body = &req->c_body;
         c2_md_fop_cob2attr(&attr, body);
+
         attr.ca_name = req->c_name.s_buf;
         attr.ca_namelen = req->c_name.s_len;
+        
+        if (S_ISLNK(body->b_mode)) {
+                attr.ca_link = req->c_target.s_buf;
+                attr.ca_linklen = req->c_target.s_len;
+        } else {
+                attr.ca_link = NULL;
+                attr.ca_linklen = 0;
+        }
 
         c2_md_make_fid(&pfid, &body->b_pfid);
         c2_md_make_fid(&tfid, &body->b_tfid);
diff --git a/mdservice/md_fops.c b/mdservice/md_fops.c
index 19ebf82..daead0c 100644
--- a/mdservice/md_fops.c
+++ b/mdservice/md_fops.c
@@ -40,6 +40,7 @@ static size_t c2_md_fol_pack_size(struct c2_fol_rec_desc *desc)
 	case C2_FOP_CREATE:
 	        len += ((struct c2_fop_create *)data)->c_name.s_len;
 		len += ((struct c2_fop_create *)data)->c_path.s_len;
+		len += ((struct c2_fop_create *)data)->c_target.s_len;
 		break;
 	case C2_FOP_LINK:
 	        len += ((struct c2_fop_link *)data)->l_name.s_len;
@@ -80,8 +81,10 @@ static size_t c2_md_fol_pack_size(struct c2_fol_rec_desc *desc)
 
 static void copy(char **buf, struct c2_fop_str *str)
 {
-	memcpy(*buf, str->s_buf, str->s_len);
-	*buf += str->s_len;
+        if (str->s_len > 0) {
+	        memcpy(*buf, str->s_buf, str->s_len);
+	        *buf += str->s_len;
+	}
 }
 
 static void c2_md_fol_pack(struct c2_fol_rec_desc *desc, void *buf)
@@ -97,6 +100,7 @@ static void c2_md_fol_pack(struct c2_fol_rec_desc *desc, void *buf)
 	case C2_FOP_CREATE:
 	        copy(&ptr, &((struct c2_fop_create *)data)->c_name);
 	        copy(&ptr, &((struct c2_fop_create *)data)->c_path);
+	        copy(&ptr, &((struct c2_fop_create *)data)->c_target);
 		break;
 	case C2_FOP_LINK:
 	        copy(&ptr, &((struct c2_fop_link *)data)->l_name);
@@ -135,8 +139,10 @@ static void c2_md_fol_pack(struct c2_fol_rec_desc *desc, void *buf)
 
 static void map(char **buf, struct c2_fop_str *str)
 {
-	str->s_buf = *buf;
-	*buf += str->s_len;
+        if (str->s_len > 0) {
+	        str->s_buf = *buf;
+	        *buf += str->s_len;
+	}
 }
 
 static int c2_md_fol_open(const struct c2_fol_rec_type *type,
@@ -151,6 +157,7 @@ static int c2_md_fol_open(const struct c2_fol_rec_type *type,
 	        ptr = (char *)((struct c2_fop_create *)data + 1);
 		map(&ptr, &((struct c2_fop_create *)data)->c_name);
 		map(&ptr, &((struct c2_fop_create *)data)->c_path);
+		map(&ptr, &((struct c2_fop_create *)data)->c_target);
 		break;
 	case C2_FOP_LINK:
 	        ptr = (char *)((struct c2_fop_link *)data + 1);
@@ -207,8 +214,8 @@ static const struct c2_fol_rec_type_ops c2_md_fop_fol_ops = {
 };
 
 static struct c2_fop_type_ops c2_md_req_ops = {
-        .fto_fom_init = c2_md_req_fom_init,
-        .fto_rec_ops = &c2_md_fop_fol_ops
+        .fto_fom_init   = c2_md_req_fom_init,
+        .fto_rec_ops    = &c2_md_fop_fol_ops
 };
 
 static struct c2_fop_type_ops c2_md_rep_ops = {
diff --git a/mdservice/md_fops.ff b/mdservice/md_fops.ff
index d6eb8b6..9ffc096 100644
--- a/mdservice/md_fops.ff
+++ b/mdservice/md_fops.ff
@@ -61,9 +61,10 @@ DEF(c2_fop_cob, RECORD,
     _(b_tfid, c2_fop_fid));
 
 DEF(c2_fop_create, RECORD,
-    _(c_body, c2_fop_cob),
-    _(c_path, c2_fop_str),
-    _(c_name, c2_fop_str));
+    _(c_body,   c2_fop_cob),
+    _(c_path,   c2_fop_str),
+    _(c_target, c2_fop_str), /**< target for symlink case */
+    _(c_name,   c2_fop_str));
 
 DEF(c2_fop_create_rep, RECORD,
     _(c_body, c2_fop_cob));
diff --git a/mdstore/mdstore.c b/mdstore/mdstore.c
index da8f116..6176487 100644
--- a/mdstore/mdstore.c
+++ b/mdstore/mdstore.c
@@ -124,7 +124,7 @@ int c2_md_store_create(struct c2_md_store       *md,
 {
         struct c2_cob_nskey   *nskey;
         struct c2_cob_nsrec    nsrec;
-        struct c2_cob_fabrec   fabrec;
+        struct c2_cob_fabrec  *fabrec;
         struct c2_cob_omgrec   omgrec;
         int                    rc;
 
@@ -132,7 +132,6 @@ int c2_md_store_create(struct c2_md_store       *md,
         C2_ASSERT(cob != NULL);
         
         C2_SET0(&nsrec);
-        C2_SET0(&fabrec);
         C2_SET0(&omgrec);
 
         c2_cob_make_nskey(&nskey, pfid, attr->ca_name, 
@@ -153,10 +152,15 @@ int c2_md_store_create(struct c2_md_store       *md,
         omgrec.cor_uid = attr->ca_uid;
         omgrec.cor_gid = attr->ca_gid;
         omgrec.cor_mode = attr->ca_mode;
-        
-        rc = c2_cob_create(cob, nskey, &nsrec, &fabrec, 
-                           &omgrec, 0, tx);
-        c2_free(nskey);
+
+        c2_cob_make_fabrec(&fabrec, attr->ca_link, 
+                           attr->ca_linklen);        
+        rc = c2_cob_create(cob, nskey, &nsrec, fabrec, 
+                           &omgrec, tx);
+        if (rc) {
+                c2_free(nskey);
+                c2_free(fabrec);
+        }
 
         C2_ADDB_ADD(&md->md_addb, &mdstore_addb_loc, 
                     c2_addb_func_fail, "md_create", rc);
@@ -608,9 +612,8 @@ int c2_md_store_setattr(struct c2_md_store      *md,
         /*
          * @todo: update fabrec.
          */
-        if (cob->co_valid & CA_FABREC) {
-                fabrec = &cob->co_fabrec;
-        }
+        if (cob->co_valid & CA_FABREC)
+                fabrec = cob->co_fabrec;
 
         rc = c2_cob_update(cob, nsrec, fabrec, omgrec, tx);
         
diff --git a/mdstore/ut/lustre.c b/mdstore/ut/lustre.c
index c100b04..9b27e13 100644
--- a/mdstore/ut/lustre.c
+++ b/mdstore/ut/lustre.c
@@ -294,6 +294,8 @@ void c2_md_lustre_fop_free(struct c2_fop *fop)
                         c2_free(create->c_name.s_buf);
                 if (create->c_path.s_len != 0)
                         c2_free(create->c_path.s_buf);
+                if (create->c_target.s_len != 0)
+                        c2_free(create->c_target.s_buf);
                 break;
         case C2_FOP_LINK:
                 link = c2_fop_data(fop);
diff --git a/mdstore/ut/mdstore.c b/mdstore/ut/mdstore.c
index bfa5f9e..e0b1893 100644
--- a/mdstore/ut/mdstore.c
+++ b/mdstore/ut/mdstore.c
@@ -76,7 +76,7 @@ static void test_mkfs(void)
         struct c2_cob_nsrec   nsrec;
         struct c2_cob_omgkey  omgkey;
         struct c2_cob_omgrec  omgrec;
-        struct c2_cob_fabrec  fabrec;
+        struct c2_cob_fabrec *fabrec;
         struct c2_db_pair     pair;
         struct c2_db_tx       tx;
         struct c2_cob        *cob;
@@ -122,8 +122,6 @@ static void test_mkfs(void)
         time(&now);
         nsrec.cnr_atime = nsrec.cnr_mtime = nsrec.cnr_ctime = now;
 
-        C2_SET0(&fabrec);
-
         /*
          * Root is owner of root dir and has corresponding permissions.
          */
@@ -143,11 +141,11 @@ static void test_mkfs(void)
         rc = c2_md_store_alloc(&md, &nsrec.cnr_fid, &cob);
 	C2_UT_ASSERT(rc == 0);
 
-        rc = c2_cob_create(cob, nskey, &nsrec, &fabrec, 
-                           &omgrec, 0, &tx);
+        c2_cob_make_fabrec(&fabrec, NULL, 0);
+        rc = c2_cob_create(cob, nskey, &nsrec, fabrec, 
+                           &omgrec, &tx);
 	C2_UT_ASSERT(rc == 0);
         c2_cob_put(cob);
-        c2_free(nskey);
 
         /*
          * Create terminator omgid record with id == ~0.
diff --git a/utils/mkfs.colibri.c b/utils/mkfs.colibri.c
index b761095..8c6260d 100644
--- a/utils/mkfs.colibri.c
+++ b/utils/mkfs.colibri.c
@@ -88,7 +88,7 @@ int main(int argc, char *argv[])
 
         struct c2_cob_nskey   *nskey;
         struct c2_cob_nsrec    nsrec;
-        struct c2_cob_fabrec   fabrec;
+        struct c2_cob_fabrec  *fabrec;
         struct c2_cob_omgkey   omgkey;
         struct c2_cob_omgrec   omgrec;
         struct c2_db_pair      pair;
@@ -154,8 +154,6 @@ int main(int argc, char *argv[])
         time(&now);
         nsrec.cnr_atime = nsrec.cnr_mtime = nsrec.cnr_ctime = now;
 
-        C2_SET0(&fabrec);
-
         /*
          * Root is owner of root dir and has corresponding permissions.
          */
@@ -175,10 +173,14 @@ int main(int argc, char *argv[])
         if (rc)
                 goto out;
 
-        rc = c2_cob_create(cob, nskey, &nsrec, &fabrec, &omgrec, 0, &tx);
+        c2_cob_make_fabrec(&fabrec, NULL, 0);
+        rc = c2_cob_create(cob, nskey, &nsrec, fabrec, &omgrec, &tx);
         c2_cob_put(cob);
-        if (rc)
+        if (rc) {
+                c2_free(nskey);
+                c2_free(fabrec);
                 goto out;
+        }
         
         /*
          * Create terminator omgid record with id == ~0.
@@ -206,7 +208,6 @@ out:
                 c2_db_tx_abort(&tx);
         else
                 c2_db_tx_commit(&tx);
-        c2_free(nskey);
         c2_md_store_fini(&md);
 out_free_db:
         c2_dbenv_fini(&db);
-- 
1.8.3.2


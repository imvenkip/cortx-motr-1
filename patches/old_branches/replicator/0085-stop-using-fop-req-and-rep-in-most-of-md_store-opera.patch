From 4a110a96136b5bfce5b0751f44a8475c96bdc1d9 Mon Sep 17 00:00:00 2001
From: Yuriy Umanets <yuriy_umanets@xyratex.com>
Date: Fri, 13 May 2011 14:26:39 -0600
Subject: [PATCH 085/177] - stop using fop req and rep in most of md_store
 operations. Now most of them use c2_cob_attr as a carrier of op information;
 - kill cnr_ino and add cnr_version. It is better to use it so far instead of
 dtm version; - mdservice to check version of fops and apply only those that
 have newver version than those in db; - fixes in readdir to show . and ..
 correctly for empty dirs.

---
 cob/cob.h            |  10 ++-
 mdservice/md_foms.c  | 151 ++++++++++++++++++++++++++++++++------
 mdstore/mdstore.c    | 204 ++++++++++++++++++++++-----------------------------
 mdstore/mdstore.h    |  36 ++++-----
 mdstore/ut/mdstore.c |   1 -
 utils/mkfs.colibri.c |   1 -
 6 files changed, 243 insertions(+), 160 deletions(-)

diff --git a/cob/cob.h b/cob/cob.h
index 5a63c8d..dad1f93 100644
--- a/cob/cob.h
+++ b/cob/cob.h
@@ -190,7 +190,8 @@ void c2_cob_domain_fini(struct c2_cob_domain *dom);
    should not be dealing with fop req or rep.
 */
 struct c2_cob_attr {
-        struct c2_fid     ca_fid;     /**< object fid */
+        struct c2_fid     ca_pfid;    /**< parent fid */
+        struct c2_fid     ca_tfid;    /**< object fid */
         int               ca_flags;   /**< marks valid fiedls. */
         uint32_t          ca_mode;    /**< protection. */
         uint32_t          ca_uid;     /**< user ID of owner. */
@@ -203,7 +204,9 @@ struct c2_cob_attr {
         uint64_t          ca_size;    /**< total size, in bytes. */
         uint64_t          ca_blksize; /**< blocksize for filesystem I/O. */
         uint64_t          ca_blocks;  /**< number of blocks allocated. */
-        
+        uint64_t          ca_version; /**< object version */
+        char             *ca_name;    /**< object name */
+        int32_t           ca_namelen; /**< name length */
 };
 
 /** 
@@ -230,8 +233,8 @@ struct c2_cob_nsrec {
         uint32_t          cnr_nlink;   /**< number of hard links. */
         uint32_t          cnr_cntr;    /**< linkno allocation counter. */
         uint32_t          cnr_padding0;
-        uint64_t          cnr_ino;     /**< inode number. */
         uint64_t          cnr_omgid;   /**< uid/gid/mode slot reference */
+        uint64_t          cnr_version; /**< attributes version, used for repl. */
 
         union {
                 uint32_t  cnr_rdev;    /**< device ID (if special file). */
@@ -353,7 +356,6 @@ struct c2_cob {
         struct c2_stob        *co_stob;     /**< underlying storage object */
         struct c2_ref          co_ref;      /**< refcounter for caching cobs */
         uint64_t               co_valid;    /**< @see enum ca_valid */
-        struct c2_verno        co_version;  /**< current object version */
         struct c2_fid         *co_fid;      /**< object fid, refers to nsrec fid */
         struct c2_cob_nskey   *co_nskey;    /**< parent fid, filename */
         struct c2_cob_oikey    co_oikey;    /**< object fid, linkno */
diff --git a/mdservice/md_foms.c b/mdservice/md_foms.c
index 0007567..3e1779b 100644
--- a/mdservice/md_foms.c
+++ b/mdservice/md_foms.c
@@ -75,12 +75,73 @@ static int c2_md_create_fom_sanity(struct c2_fom *fom)
         return 0;
 }
 
+static void c2_md_fop_cob2attr(struct c2_cob_attr *attr, 
+                               struct c2_fop_cob *body)
+{
+        c2_md_make_fid(&attr->ca_pfid, &body->b_pfid);
+        c2_md_make_fid(&attr->ca_tfid, &body->b_tfid);
+        attr->ca_flags = body->b_flags;
+        if (body->b_flags & C2_MD_MODE)
+                attr->ca_mode = body->b_mode;
+        if (body->b_flags & C2_MD_UID)
+                attr->ca_uid = body->b_uid;
+        if (body->b_flags & C2_MD_GID)
+                attr->ca_gid = body->b_gid;
+        if (body->b_flags & C2_MD_ATIME)
+                attr->ca_atime = body->b_atime;
+        if (body->b_flags & C2_MD_MTIME)
+                attr->ca_mtime = body->b_mtime;
+        if (body->b_flags & C2_MD_CTIME)
+                attr->ca_ctime = body->b_ctime;
+        if (body->b_flags & C2_MD_NLINK)
+                attr->ca_nlink = body->b_nlink;
+        if (body->b_flags & C2_MD_RDEV)
+                attr->ca_rdev = body->b_rdev;
+        if (body->b_flags & C2_MD_SIZE)
+                attr->ca_size = body->b_size;
+        if (body->b_flags & C2_MD_BLKSIZE)
+                attr->ca_blksize = body->b_blksize;
+        if (body->b_flags & C2_MD_BLOCKS)
+                attr->ca_blocks = body->b_blocks;
+        attr->ca_version = body->b_version;
+}
+
+static void c2_md_fop_attr2cob(struct c2_fop_cob *body, 
+                               struct c2_cob_attr *attr)
+{
+        body->b_flags = attr->ca_flags;
+        if (body->b_flags & C2_MD_UID)
+                body->b_mode = attr->ca_mode;
+        if (body->b_flags & C2_MD_UID)
+                body->b_uid = attr->ca_uid;
+        if (body->b_flags & C2_MD_UID)
+                body->b_gid = attr->ca_gid;
+        if (body->b_flags & C2_MD_ATIME)
+                body->b_atime = attr->ca_atime;
+        if (body->b_flags & C2_MD_MTIME)
+                body->b_mtime = attr->ca_mtime;
+        if (body->b_flags & C2_MD_CTIME)
+                body->b_ctime = attr->ca_ctime;
+        if (body->b_flags & C2_MD_NLINK)
+                body->b_nlink = attr->ca_nlink;
+        if (body->b_flags & C2_MD_RDEV)
+                body->b_rdev = attr->ca_rdev;
+        if (body->b_flags & C2_MD_SIZE)
+                body->b_size = attr->ca_size;
+        if (body->b_flags & C2_MD_BLKSIZE)
+                body->b_blksize = attr->ca_blksize;
+        if (body->b_flags & C2_MD_BLOCKS)
+                body->b_blocks = attr->ca_blocks;
+        body->b_version = attr->ca_version;
+}
+
 static int c2_md_create_fom_state(struct c2_fom *fom)
 {
+        struct c2_cob_nskey      *nskey;
+        struct c2_cob_attr        attr;
         struct c2_fop_cob        *body;
         struct c2_site           *site;
         struct c2_cob            *cob;
-        struct c2_cob            *pcob;
         struct c2_fop_create     *req;
         struct c2_fop_create_rep *rep;
         struct c2_fom_md         *fom_obj;
@@ -111,22 +172,46 @@ static int c2_md_create_fom_state(struct c2_fom *fom)
         body = &req->c_body;
 
         c2_md_make_fid(&pfid, &body->b_pfid);
-        rc = c2_md_store_locate(site->s_mdstore, &pfid, &pcob, 
-                                C2_MD_STORE_LOCATE_STORED,
-                                &ctx->fc_tx->tx_dbtx);
-        if (rc)
-                goto out;
-                       
         c2_md_make_fid(&tfid, &body->b_tfid);
-        rc = c2_md_store_alloc(site->s_mdstore, &tfid, &cob);
-        if (rc) {
-                c2_cob_put(pcob);
-                goto out;
-        }
 
-        rc = c2_md_store_create(site->s_mdstore, pcob, cob, req, 
-                                rep, ctx);
-        c2_cob_put(pcob);
+        rc = c2_md_store_locate(site->s_mdstore, &tfid, 
+                                &cob, C2_MD_STORE_LOCATE_STORED,
+                                &ctx->fc_tx->tx_dbtx);
+
+        c2_md_fop_cob2attr(&attr, body);
+        attr.ca_name = req->c_name.n_name;
+        attr.ca_namelen = req->c_name.n_count;
+        
+        if (rc == -ENOENT) {
+                rc = c2_md_store_alloc(site->s_mdstore, &tfid, &cob);
+                if (rc)
+                        goto out;
+
+                rc = c2_md_store_create_raw(site->s_mdstore, &pfid,
+                                            cob, &attr, ctx);
+        } else if (rc == 0) {
+                /* 
+                 * Already have this object, let's check its version
+                 * and update attributes if needed. Older version is
+                 * ignored.
+                 */
+                if (attr.ca_version > cob->co_nsrec.cnr_version) {
+                        rc = c2_md_store_setattr(site->s_mdstore, cob,
+                                                 &attr, ctx);
+                        /*
+                         * This must be hardlink case from initial scan,
+                         * let's create name as well.
+                         */
+                        if (rc == 0) {
+                                c2_cob_make_nskey(&nskey, &pfid, 
+                                                  attr.ca_name, 
+                                                  attr.ca_namelen);
+                                rc = c2_cob_add_name(cob, nskey, 
+                                                &ctx->fc_tx->tx_dbtx);
+                                c2_free(nskey);
+                        }
+                }
+        }
         c2_cob_put(cob);
         if (rc == 0) {
                 svc = fom->fo_fop_ctx->fc_service;
@@ -183,6 +268,7 @@ static int c2_md_link_fom_sanity(struct c2_fom *fom)
 
 static int c2_md_link_fom_state(struct c2_fom *fom)
 {
+        struct c2_cob_attr        attr;
         struct c2_fop_cob        *body;
         struct c2_site           *site;
         struct c2_cob            *cob;
@@ -232,8 +318,13 @@ static int c2_md_link_fom_state(struct c2_fom *fom)
         }
 
         rep = c2_fop_data(fop_rep);
+        attr.ca_name = req->l_name.n_name;
+        attr.ca_namelen = req->l_name.n_count;
 
-        rc = c2_md_store_link(site->s_mdstore, pcob, cob, req, rep, ctx);
+        if (req->l_body.b_version > cob->co_nsrec.cnr_version) {
+                rc = c2_md_store_link(site->s_mdstore, pcob,
+                                      cob, &attr, ctx);
+        }
         c2_cob_put(cob);
         c2_cob_put(pcob);
         if (rc == 0) {
@@ -264,6 +355,7 @@ static int c2_md_unlink_fom_sanity(struct c2_fom *fom)
 
 static int c2_md_unlink_fom_state(struct c2_fom *fom)
 {
+        struct c2_cob_attr        attr;
         struct c2_fop_cob        *body;
         struct c2_site           *site;
         struct c2_cob            *cob;
@@ -304,6 +396,7 @@ static int c2_md_unlink_fom_state(struct c2_fom *fom)
                 goto out;
 
         c2_md_make_fid(&tfid, &body->b_tfid);
+
         rc = c2_md_store_locate(site->s_mdstore, &tfid, &cob, 
                                 C2_MD_STORE_LOCATE_STORED,
                                 &ctx->fc_tx->tx_dbtx);
@@ -313,8 +406,13 @@ static int c2_md_unlink_fom_state(struct c2_fom *fom)
         }
 
         rep = c2_fop_data(fop_rep);
+        attr.ca_name = req->u_name.n_name;
+        attr.ca_namelen = req->u_name.n_count;
 
-        rc = c2_md_store_unlink(site->s_mdstore, pcob, cob, req, rep, ctx);
+        if (req->u_body.b_version > cob->co_nsrec.cnr_version) {
+                rc = c2_md_store_unlink(site->s_mdstore, pcob,
+                                        cob, &attr, ctx);
+        }
         c2_cob_put(cob);
         c2_cob_put(pcob);
         if (rc == 0) {
@@ -513,7 +611,10 @@ static int c2_md_open_fom_state(struct c2_fom *fom)
 
         rep = c2_fop_data(fop_rep);
 
-        rc = c2_md_store_open(site->s_mdstore, cob, req, rep, ctx);
+        /*
+         * @todo: pass correct flags to open.
+         */
+        rc = c2_md_store_open(site->s_mdstore, cob, 0, ctx);
         c2_cob_put(cob);
         if (rc == 0) {
                 svc = fom->fo_fop_ctx->fc_service;
@@ -574,7 +675,7 @@ static int c2_md_close_fom_state(struct c2_fom *fom)
                 goto out;
         rep = c2_fop_data(fop_rep);
 
-        rc = c2_md_store_close(site->s_mdstore, cob, req, rep, ctx);
+        rc = c2_md_store_close(site->s_mdstore, cob, ctx);
         c2_cob_put(cob);
         if (rc == 0) {
                 svc = fom->fo_fop_ctx->fc_service;
@@ -590,6 +691,7 @@ out:
 
 static int c2_md_setattr_fom_state(struct c2_fom *fom)
 {
+        struct c2_cob_attr             attr;
         struct c2_fop_cob             *body;
         struct c2_site                *site;
         struct c2_cob                 *cob;
@@ -629,8 +731,13 @@ static int c2_md_setattr_fom_state(struct c2_fom *fom)
                 goto out;
 
         rep = c2_fop_data(fop_rep);
+        c2_md_fop_cob2attr(&attr, body);
 
-        rc = c2_md_store_setattr(site->s_mdstore, cob, req, rep, ctx);
+        /*
+         * Apply only new versions.
+         */
+        if (attr.ca_version > cob->co_nsrec.cnr_version)
+                rc = c2_md_store_setattr(site->s_mdstore, cob, &attr, ctx);
         c2_cob_put(cob);
         if (rc == 0) {
                 svc = fom->fo_fop_ctx->fc_service;
@@ -646,6 +753,7 @@ out:
 
 static int c2_md_getattr_fom_state(struct c2_fom *fom)
 {
+        struct c2_cob_attr             attr;
         struct c2_fop_cob             *body;
         struct c2_site                *site;
         struct c2_cob                 *cob;
@@ -686,9 +794,10 @@ static int c2_md_getattr_fom_state(struct c2_fom *fom)
 
         rep = c2_fop_data(fop_rep);
 
-        rc = c2_md_store_getattr(site->s_mdstore, cob, req, rep, ctx);
+        rc = c2_md_store_getattr(site->s_mdstore, cob, &attr, ctx);
         c2_cob_put(cob);
         if (rc == 0) {
+                c2_md_fop_attr2cob(&req->g_body, &attr);
                 svc = fom->fo_fop_ctx->fc_service;
 	        svc->s_ops->so_reply_post(svc, fop_rep, ctx->fc_cookie);
 	}
diff --git a/mdstore/mdstore.c b/mdstore/mdstore.c
index f590020..262f692 100644
--- a/mdstore/mdstore.c
+++ b/mdstore/mdstore.c
@@ -88,75 +88,44 @@ void c2_md_store_fini(struct c2_md_store *md)
 	c2_addb_ctx_fini(&md->md_addb);
 }
 
-int c2_md_store_create(struct c2_md_store       *md,
-                       struct c2_cob            *pcob,
-                       struct c2_cob            *cob,
-                       struct c2_fop_create     *req,
-                       struct c2_fop_create_rep *rep,
-                       struct c2_fop_ctx        *ctx)
+int c2_md_store_create_raw(struct c2_md_store       *md,
+                           struct c2_fid            *pfid,
+                           struct c2_cob            *cob,
+                           struct c2_cob_attr       *attr,
+                           struct c2_fop_ctx        *ctx)
 {
-        struct c2_fop_cob     *body = &req->c_body;
         struct c2_cob_nskey   *nskey;
         struct c2_cob_nsrec    nsrec;
         struct c2_cob_fabrec   fabrec;
         struct c2_cob_omgrec   omgrec;
-        time_t                 now;
         int                    rc;
 
-        C2_ASSERT(pcob != NULL);
+        C2_ASSERT(pfid != NULL);
         C2_ASSERT(cob != NULL);
         
         C2_SET0(&nsrec);
         C2_SET0(&fabrec);
         C2_SET0(&omgrec);
 
-        c2_cob_make_nskey(&nskey, pcob->co_fid, 
-                          req->c_name.n_name, 
-                          req->c_name.n_count);
-        c2_md_make_fid(&nsrec.cnr_fid, &body->b_tfid);
-
-        nsrec.cnr_nlink = 1;
-        
-        /*
-         * @todo: In fact we need to get ino from @body here. Inode
-         * number may be important on target fs while replicating 
-         * source.
-         */
-        nsrec.cnr_ino = 0;
-        
-        /* 
-         * @todo: do we need rdev support for special files in
-         * replicator?
-         */
-        nsrec.u.cnr_rdev = 0;
-        
-        /*
-         * @todo: these need to be fixed. Before data replication
-         * we don't need them.
-         */
-        if (S_ISDIR(body->b_mode))
-                nsrec.u.cnr_size = 4096;
-        else
-                nsrec.u.cnr_size = 0;
-
-        nsrec.cnr_blksize = 4096;
-        nsrec.cnr_blocks = 16;
-
-        /*
-         * Set time stamps to current moment. May be it is better to
-         * use c2_time instead.
-         */
-        nsrec.cnr_atime = nsrec.cnr_mtime = nsrec.cnr_ctime = time(&now);
-
-        omgrec.cor_uid = body->b_uid;
-        omgrec.cor_gid = body->b_gid;
-        omgrec.cor_mode = body->b_mode;
+        c2_cob_make_nskey(&nskey, pfid, attr->ca_name, 
+                          attr->ca_namelen);
+
+        nsrec.cnr_fid = attr->ca_tfid;
+        nsrec.cnr_nlink = attr->ca_nlink;
+        nsrec.u.cnr_rdev = attr->ca_rdev;
+        nsrec.u.cnr_size = attr->ca_size;
+        nsrec.cnr_blksize = attr->ca_blksize;
+        nsrec.cnr_blocks = attr->ca_blocks;
+        nsrec.cnr_version = attr->ca_version;
+        nsrec.cnr_atime = attr->ca_atime;
+        nsrec.cnr_mtime = attr->ca_mtime;
+        nsrec.cnr_ctime = attr->ca_ctime;
+        omgrec.cor_uid = attr->ca_uid;
+        omgrec.cor_gid = attr->ca_gid;
+        omgrec.cor_mode = attr->ca_mode;
         
-        /* @todo: fol ref component should also be initialized. */
-        fabrec.cfb_version.vn_vc = body->b_version;
-
-        rc = c2_cob_create(cob, nskey, &nsrec, &fabrec, &omgrec, 0, 
-                           &ctx->fc_tx->tx_dbtx);
+        rc = c2_cob_create(cob, nskey, &nsrec, &fabrec, &omgrec, 
+                           0, &ctx->fc_tx->tx_dbtx);
         c2_free(nskey);
 
         C2_ADDB_ADD(&md->md_addb, &mdstore_addb_loc, 
@@ -164,11 +133,20 @@ int c2_md_store_create(struct c2_md_store       *md,
         return rc;
 }
 
+int c2_md_store_create(struct c2_md_store       *md,
+                       struct c2_cob            *pcob,
+                       struct c2_cob            *cob,
+                       struct c2_cob_attr       *attr,
+                       struct c2_fop_ctx        *ctx)
+{
+        return c2_md_store_create_raw(md, pcob->co_fid, cob, 
+                                      attr, ctx);
+}
+
 int c2_md_store_link(struct c2_md_store         *md, 
                      struct c2_cob              *pcob,
-                     struct c2_cob              *cob, 
-                     struct c2_fop_link         *req, 
-                     struct c2_fop_link_rep     *rep, 
+                     struct c2_cob              *cob,
+                     struct c2_cob_attr         *attr,
                      struct c2_fop_ctx          *ctx)
 {
         struct c2_cob_nskey   *nskey;
@@ -181,9 +159,8 @@ int c2_md_store_link(struct c2_md_store         *md,
         /*
          * Link @nskey to a file described with @cob
          */        
-        c2_cob_make_nskey(&nskey, pcob->co_fid, 
-                          req->l_name.n_name,
-                          req->l_name.n_count);
+        c2_cob_make_nskey(&nskey, pcob->co_fid, attr->ca_name, 
+                          attr->ca_namelen);
         rc = c2_cob_add_name(cob, nskey, &ctx->fc_tx->tx_dbtx);
         c2_free(nskey);
         if (rc)
@@ -218,8 +195,7 @@ out:
 int c2_md_store_unlink(struct c2_md_store       *md,
                        struct c2_cob            *pcob,
                        struct c2_cob            *cob,
-                       struct c2_fop_unlink     *req, 
-                       struct c2_fop_unlink_rep *rep, 
+                       struct c2_cob_attr       *attr,
                        struct c2_fop_ctx        *ctx)
 {
         struct c2_cob         *ncob;
@@ -238,8 +214,7 @@ int c2_md_store_unlink(struct c2_md_store       *md,
          */
         if (!S_ISDIR(cob->co_omgrec.cor_mode)) {
                 c2_cob_make_nskey(&nskey, pcob->co_fid, 
-                                  req->u_name.n_name,
-                                  req->u_name.n_count);
+                                  attr->ca_name, attr->ca_namelen);
 
                 /*
                  * Check if we're trying to kill stata data entry. We need to
@@ -319,8 +294,7 @@ out:
 
 int c2_md_store_open(struct c2_md_store         *md, 
                      struct c2_cob              *cob,
-                     struct c2_fop_open         *req, 
-                     struct c2_fop_open_rep     *rep, 
+                     int                         flags,
                      struct c2_fop_ctx          *ctx)
 {
         int rc = 0;
@@ -338,8 +312,6 @@ int c2_md_store_open(struct c2_md_store         *md,
 
 int c2_md_store_close(struct c2_md_store *md, 
                       struct c2_cob *cob,
-                      struct c2_fop_close *req, 
-                      struct c2_fop_close_rep *rep, 
                       struct c2_fop_ctx *ctx)
 {
         int rc = 0;
@@ -524,11 +496,9 @@ out:
 
 int c2_md_store_setattr(struct c2_md_store      *md,
                         struct c2_cob           *cob,
-                        struct c2_fop_setattr   *req, 
-                        struct c2_fop_setattr_rep *rep, 
+                        struct c2_cob_attr      *attr,
                         struct c2_fop_ctx       *ctx)
 {
-        struct c2_fop_cob     *body = &req->s_body;
         struct c2_cob_nsrec   *nsrec;
         struct c2_cob_fabrec  *fabrec;
         struct c2_cob_omgrec  *omgrec;
@@ -540,33 +510,36 @@ int c2_md_store_setattr(struct c2_md_store      *md,
          * Handle basic stat fields update.
          */
         nsrec = &cob->co_nsrec;
-        if (body->b_flags & C2_MD_ATIME)
-                nsrec->cnr_atime = body->b_atime;
-        if (body->b_flags & C2_MD_MTIME)
-                nsrec->cnr_mtime = body->b_mtime;
-        if (body->b_flags & C2_MD_CTIME)
-                nsrec->cnr_ctime = body->b_ctime;
-        if (body->b_flags & C2_MD_SIZE)
-                nsrec->u.cnr_size = body->b_size;
-        if (body->b_flags & C2_MD_RDEV)
-                nsrec->u.cnr_rdev = body->b_rdev;
-        if (body->b_flags & C2_MD_BLOCKS)
-                nsrec->cnr_blocks = body->b_blocks;
-        if (body->b_flags & C2_MD_BLKSIZE)
-                nsrec->cnr_blksize = body->b_blksize;
+        if (attr->ca_flags & C2_MD_ATIME)
+                nsrec->cnr_atime = attr->ca_atime;
+        if (attr->ca_flags & C2_MD_MTIME)
+                nsrec->cnr_mtime = attr->ca_mtime;
+        if (attr->ca_flags & C2_MD_CTIME)
+                nsrec->cnr_ctime = attr->ca_ctime;
+        if (attr->ca_flags & C2_MD_SIZE)
+                nsrec->u.cnr_size = attr->ca_size;
+        if (attr->ca_flags & C2_MD_RDEV)
+                nsrec->u.cnr_rdev = attr->ca_rdev;
+        if (attr->ca_flags & C2_MD_BLOCKS)
+                nsrec->cnr_blocks = attr->ca_blocks;
+        if (attr->ca_flags & C2_MD_BLKSIZE)
+                nsrec->cnr_blksize = attr->ca_blksize;
+        if (attr->ca_flags & C2_MD_NLINK)
+                nsrec->cnr_nlink = attr->ca_nlink;
+        nsrec->cnr_version = attr->ca_version;
 
         /*
          * Handle uid/gid/mode update.
          */
         omgrec = &cob->co_omgrec;
-        if (body->b_flags & C2_MD_UID)
-                omgrec->cor_uid = body->b_uid;
-        if (body->b_flags & C2_MD_GID)
-                omgrec->cor_gid = body->b_gid;
-        if (body->b_flags & C2_MD_MODE)
-                omgrec->cor_mode = body->b_mode;
+        if (attr->ca_flags & C2_MD_UID)
+                omgrec->cor_uid = attr->ca_uid;
+        if (attr->ca_flags & C2_MD_GID)
+                omgrec->cor_gid = attr->ca_gid;
+        if (attr->ca_flags & C2_MD_MODE)
+                omgrec->cor_mode = attr->ca_mode;
 
-        /* 
+        /*
          * @todo: update fabrec.
          */
         fabrec = &cob->co_fabrec;
@@ -581,42 +554,41 @@ int c2_md_store_setattr(struct c2_md_store      *md,
 
 int c2_md_store_getattr(struct c2_md_store      *md, 
                         struct c2_cob           *cob,
-                        struct c2_fop_getattr   *req, 
-                        struct c2_fop_getattr_rep *rep, 
+                        struct c2_cob_attr      *attr,
                         struct c2_fop_ctx       *ctx)
 {
-        struct c2_fop_cob *body = &rep->g_body;
         int                rc = 0;
 
         C2_ASSERT(cob != NULL);
 
-        body->b_flags = C2_MD_UID | C2_MD_GID | C2_MD_MODE |
-                        C2_MD_ATIME | C2_MD_CTIME | C2_MD_MTIME |
-                        C2_MD_BLKSIZE | C2_MD_BLOCKS;
+        attr->ca_flags = C2_MD_UID | C2_MD_GID | C2_MD_MODE |
+                         C2_MD_ATIME | C2_MD_CTIME | C2_MD_MTIME |
+                         C2_MD_BLKSIZE | C2_MD_BLOCKS;
         
         /*
          * Copy permissions and owner info into rep.
          */
-        body->b_uid = cob->co_omgrec.cor_uid;
-        body->b_gid = cob->co_omgrec.cor_gid;
-        body->b_mode = cob->co_omgrec.cor_mode;
+        attr->ca_uid = cob->co_omgrec.cor_uid;
+        attr->ca_gid = cob->co_omgrec.cor_gid;
+        attr->ca_mode = cob->co_omgrec.cor_mode;
 
         /*
          * Copy nsrec fields into response.
          */
-        body->b_atime = cob->co_nsrec.cnr_atime;
-        body->b_ctime = cob->co_nsrec.cnr_ctime;
-        body->b_mtime = cob->co_nsrec.cnr_mtime;
-        body->b_blksize = cob->co_nsrec.cnr_blksize;
-        body->b_blocks = cob->co_nsrec.cnr_blocks;
-        body->b_nlink = cob->co_nsrec.cnr_nlink;
-
-        if (S_ISCHR(body->b_mode) || S_ISBLK(body->b_mode)) {
-                body->b_rdev = cob->co_nsrec.u.cnr_rdev;
-                body->b_flags |= C2_MD_RDEV;
+        attr->ca_atime = cob->co_nsrec.cnr_atime;
+        attr->ca_ctime = cob->co_nsrec.cnr_ctime;
+        attr->ca_mtime = cob->co_nsrec.cnr_mtime;
+        attr->ca_blksize = cob->co_nsrec.cnr_blksize;
+        attr->ca_blocks = cob->co_nsrec.cnr_blocks;
+        attr->ca_nlink = cob->co_nsrec.cnr_nlink;
+        attr->ca_version = cob->co_nsrec.cnr_version;
+
+        if (S_ISCHR(attr->ca_mode) || S_ISBLK(attr->ca_mode)) {
+                attr->ca_rdev = cob->co_nsrec.u.cnr_rdev;
+                attr->ca_flags |= C2_MD_RDEV;
         } else {
-                body->b_size = cob->co_nsrec.u.cnr_size;
-                body->b_flags |= C2_MD_SIZE;
+                attr->ca_size = cob->co_nsrec.u.cnr_size;
+                attr->ca_flags |= C2_MD_SIZE;
         }
         
         /*
@@ -667,13 +639,13 @@ int c2_md_store_readdir(struct c2_md_store      *md,
         if (rc == 0) {
                 /* 
                  * No exact position found and we are on least key, 
-                 * let's do one step forward. 
+                 * let's do one step forward.
                  */
                 rc = c2_cob_iterator_next(&it);
         } else if (rc > 0)
                 rc = 0;
                 
-        while (rc == 0) {
+        while (rc == 0 || first || second) {
                 int next_step = 0;
                 nskey = it.ci_key;
                 nsrec = &it.ci_rec;
diff --git a/mdstore/mdstore.h b/mdstore/mdstore.h
index 8495602..6d771f4 100644
--- a/mdstore/mdstore.h
+++ b/mdstore/mdstore.h
@@ -183,8 +183,7 @@ void c2_md_store_fini(struct c2_md_store *md);
 int c2_md_store_link(struct c2_md_store *md, 
                      struct c2_cob *pcob, 
                      struct c2_cob *cob, 
-                     struct c2_fop_link *req, 
-                     struct c2_fop_link_rep *rep, 
+                     struct c2_cob_attr *attr,
                      struct c2_fop_ctx *ctx);
                      
 /**
@@ -197,8 +196,7 @@ int c2_md_store_link(struct c2_md_store *md,
 int c2_md_store_unlink(struct c2_md_store *md, 
                        struct c2_cob *pcob, 
                        struct c2_cob *cob,
-                       struct c2_fop_unlink *req, 
-                       struct c2_fop_unlink_rep *rep, 
+                       struct c2_cob_attr *attr,
                        struct c2_fop_ctx *ctx);
                        
 /**
@@ -215,8 +213,18 @@ int c2_md_store_rename(struct c2_md_store *md,
                        struct c2_fop_rename_rep *rep, 
                        struct c2_fop_ctx *ctx);
 
+/*
+ * Create a cob in case that no pcob is availabe, only its fid
+ * can be used.
+ */
+int c2_md_store_create_raw(struct c2_md_store *md,
+                           struct c2_fid *pfid,
+                           struct c2_cob *cob,
+                           struct c2_cob_attr *attr,
+                           struct c2_fop_ctx *ctx);
+
 /**
-   Handle create operation described by @req on @cob. Input @cob
+   Handle create operation described by @attr on @cob. Input @cob
    is returned by c2_cob_alloc(). Save result to @rep.
    
    Error code is returned in error case or zero otherwise.
@@ -224,8 +232,7 @@ int c2_md_store_rename(struct c2_md_store *md,
 int c2_md_store_create(struct c2_md_store *md, 
                        struct c2_cob *pcob,
                        struct c2_cob *cob,
-                       struct c2_fop_create *req, 
-                       struct c2_fop_create_rep *rep, 
+                       struct c2_cob_attr *attr,
                        struct c2_fop_ctx *ctx);
 
 /**
@@ -237,8 +244,7 @@ int c2_md_store_create(struct c2_md_store *md,
 */
 int c2_md_store_open(struct c2_md_store *md, 
                      struct c2_cob *cob,
-                     struct c2_fop_open *req, 
-                     struct c2_fop_open_rep *rep, 
+                     int flags,
                      struct c2_fop_ctx *ctx);
 
 /**
@@ -250,12 +256,10 @@ int c2_md_store_open(struct c2_md_store *md,
 */
 int c2_md_store_close(struct c2_md_store *md, 
                       struct c2_cob *cob,
-                      struct c2_fop_close *req, 
-                      struct c2_fop_close_rep *rep, 
                       struct c2_fop_ctx *ctx);
 
 /**
-   Handle setattr operation described by @req on @cob. Input @cob
+   Handle setattr operation described by @attr on @cob. Input @cob
    is so called statdata cob and returned by c2_cob_locate(). 
    Save result to @rep.
    
@@ -263,12 +267,11 @@ int c2_md_store_close(struct c2_md_store *md,
 */
 int c2_md_store_setattr(struct c2_md_store *md, 
                         struct c2_cob *cob,
-                        struct c2_fop_setattr *req, 
-                        struct c2_fop_setattr_rep *rep, 
+                        struct c2_cob_attr *attr,
                         struct c2_fop_ctx *ctx);
 
 /**
-   Handle getattr operation described by @req on @cob. Input @cob
+   Get attributes of @cob into passed @attr. Input @cob
    is so called statdata cob and returned by c2_cob_locate(). 
    Save result to @rep.
    
@@ -276,8 +279,7 @@ int c2_md_store_setattr(struct c2_md_store *md,
 */
 int c2_md_store_getattr(struct c2_md_store *md, 
                         struct c2_cob *cob,
-                        struct c2_fop_getattr *req, 
-                        struct c2_fop_getattr_rep *rep, 
+                        struct c2_cob_attr *attr,
                         struct c2_fop_ctx *ctx);
 
 /**
diff --git a/mdstore/ut/mdstore.c b/mdstore/ut/mdstore.c
index 4e51ce3..6efccca 100644
--- a/mdstore/ut/mdstore.c
+++ b/mdstore/ut/mdstore.c
@@ -97,7 +97,6 @@ static void test_mkfs(void)
         nsrec.cnr_fid.f_key = root.f_oid;
 
         nsrec.cnr_nlink = 1;
-        nsrec.cnr_ino = 1;
         nsrec.u.cnr_rdev = 0;
         nsrec.u.cnr_size = 4096;
         nsrec.cnr_blksize = 4096;
diff --git a/utils/mkfs.colibri.c b/utils/mkfs.colibri.c
index 52aea64..e6797db 100644
--- a/utils/mkfs.colibri.c
+++ b/utils/mkfs.colibri.c
@@ -128,7 +128,6 @@ int main(int argc, char *argv[])
         nsrec.cnr_fid = C2_MD_ROOT_FID;
 
         nsrec.cnr_nlink = 1;
-        nsrec.cnr_ino = 1;
         nsrec.u.cnr_rdev = 0;
         nsrec.u.cnr_size = 4096;
         nsrec.cnr_blksize = 4096;
-- 
1.8.3.2


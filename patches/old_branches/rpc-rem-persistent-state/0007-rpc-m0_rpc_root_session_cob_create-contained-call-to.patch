From e26eac6857d17794a6cbf731007939c143214ba7 Mon Sep 17 00:00:00 2001
From: Amit Jambure <Amit_Jambure@xyratex.com>
Date: Thu, 23 May 2013 16:32:43 +0530
Subject: [PATCH 7/9] rpc: m0_rpc_root_session_cob_create() contained call to
 m0_cob_domain_mkfs(); YUCK!!!      Previously we removed all calls to
 m0_rpc_root_session_cob_create().      Restore the calls with
 m0_cob_domain_mkfs().

---
 cob/cob.c             | 32 +++++++++++++++++++++++---------
 mero/setup.c          | 24 ++++++++++++++++++++++++
 reqh/ut/reqh_fom_ut.c | 12 ++++++++++++
 ut/ut_rpc_machine.c   | 12 +++++++++++-
 4 files changed, 70 insertions(+), 10 deletions(-)

diff --git a/cob/cob.c b/cob/cob.c
index 3309a1b..0a32683 100644
--- a/cob/cob.c
+++ b/cob/cob.c
@@ -503,15 +503,10 @@ M0_EXPORTED(m0_cob_domain_fini);
 #define MKFS_ROOT_BLKSIZE       4096
 #define MKFS_ROOT_BLOCKS        16
 
-/**
- * Create initial files system structures, such as: entire storage root, root
- * cob for sessions and root cob for hierarchy. Latter is only one of them
- * visible to user on client.
- */
-M0_INTERNAL int m0_cob_domain_mkfs(struct m0_cob_domain *dom,
-				   const struct m0_fid *rootfid,
-				   const struct m0_fid *sessfid,
-				   struct m0_db_tx *tx)
+static int _mkfs(struct m0_cob_domain *dom,
+		 const struct m0_fid *rootfid,
+		 const struct m0_fid *sessfid,
+		 struct m0_db_tx *tx)
 {
 	struct m0_cob_nskey  *nskey;
 	struct m0_cob_nsrec   nsrec;
@@ -641,6 +636,25 @@ M0_INTERNAL int m0_cob_domain_mkfs(struct m0_cob_domain *dom,
 	}
 	return 0;
 }
+
+/**
+ * Create initial files system structures, such as: entire storage root, root
+ * cob for sessions and root cob for hierarchy. Latter is only one of them
+ * visible to user on client.
+ */
+M0_INTERNAL int m0_cob_domain_mkfs(struct m0_cob_domain *dom,
+				   const struct m0_fid *rootfid,
+				   const struct m0_fid *sessfid,
+				   struct m0_db_tx *tx)
+{
+	int rc;
+
+	rc = _mkfs(dom, rootfid, sessfid, tx);
+	if (rc == -EEXIST)
+		rc = 0;
+	return rc;
+}
+
 #endif
 
 static void cob_free_cb(struct m0_ref *ref);
diff --git a/mero/setup.c b/mero/setup.c
index 607646d..e2acc21 100644
--- a/mero/setup.c
+++ b/mero/setup.c
@@ -1212,6 +1212,25 @@ static void cs_net_domains_fini(struct m0_mero *cctx)
 		m0_net_xprt_fini(xprts[idx]);
 }
 
+static int cs_storage_prepare(struct m0_reqh_context *rctx)
+{
+	struct m0_db_tx tx;
+	int rc;
+
+	rc = m0_db_tx_init(&tx, &rctx->rc_db, 0);
+	if (rc != 0)
+		return rc;
+
+	rc = m0_cob_domain_mkfs(&rctx->rc_mdstore.md_dom, &M0_COB_SLASH_FID,
+				&M0_COB_SESSIONS_FID, &tx);
+	if (rc == 0)
+		m0_db_tx_commit(&tx);
+	else
+		m0_db_tx_abort(&tx);
+
+	return rc;
+}
+
 /**
    Initializes storage for ADDB depending on the type of specified
    while running m0d. It also creates a hard-coded stob on
@@ -1330,6 +1349,11 @@ static int cs_request_handler_start(struct m0_reqh_context *rctx)
 			M0_LOG(M0_ERROR, "m0_mdstore_init");
 			goto cleanup_addb_stob;
 		}
+		rc = cs_storage_prepare(rctx);
+		if (rc != 0) {
+			M0_LOG(M0_ERROR, "cs_storage_prepare");
+			goto cleanup_mdstore;
+		}
 		m0_mdstore_fini(&rctx->rc_mdstore);
 	}
 
diff --git a/reqh/ut/reqh_fom_ut.c b/reqh/ut/reqh_fom_ut.c
index 1a57b12..a26a33d 100644
--- a/reqh/ut/reqh_fom_ut.c
+++ b/reqh/ut/reqh_fom_ut.c
@@ -169,6 +169,7 @@ static int server_init(const char             *stob_path,
 {
         int                          rc;
 	struct m0_rpc_machine       *rpc_machine = &srv_rpc_mach;
+	struct m0_db_tx              tx;
 	uint32_t		     bufs_nr;
 	uint32_t		     tms_nr;
 	struct m0_reqh_service_type *stype;
@@ -224,6 +225,17 @@ static int server_init(const char             *stob_path,
         M0_UT_ASSERT(rc == 0);
         m0_mdstore_fini(&srv_mdstore);
 
+	rc = m0_db_tx_init(&tx, &srv_db, 0);
+	M0_UT_ASSERT(rc == 0);
+
+	/* Create root session cob and other structures */
+	rc = m0_cob_domain_mkfs(&srv_mdstore.md_dom, &M0_COB_SLASH_FID,
+				&M0_COB_SESSIONS_FID, &tx);
+	M0_UT_ASSERT(rc == 0);
+
+	/* Comit and finalize old mdstore. */
+	m0_db_tx_commit(&tx);
+
         /* Init new mdstore with open root flag. */
         rc = m0_mdstore_init(&srv_mdstore, &srv_cob_dom_id, &srv_db, 1);
         M0_UT_ASSERT(rc == 0);
diff --git a/ut/ut_rpc_machine.c b/ut/ut_rpc_machine.c
index 367cba6..a698eb0 100644
--- a/ut/ut_rpc_machine.c
+++ b/ut/ut_rpc_machine.c
@@ -41,7 +41,8 @@ static void buf_dummy(struct m0_net_buffer_pool *bp)
 
 M0_INTERNAL void m0_ut_rpc_mach_init_and_add(struct m0_ut_rpc_mach_ctx *ctx)
 {
-	int rc;
+	struct m0_db_tx tx;
+	int             rc;
 
 	ctx->rmc_xprt = &m0_net_lnet_xprt;
 	rc = m0_net_xprt_init(ctx->rmc_xprt);
@@ -70,6 +71,15 @@ M0_INTERNAL void m0_ut_rpc_mach_init_and_add(struct m0_ut_rpc_mach_ctx *ctx)
 			     &ctx->rmc_dbenv, 0);
 	M0_ASSERT(rc == 0);
 
+	rc = m0_db_tx_init(&tx, &ctx->rmc_dbenv, 0);
+	M0_ASSERT(rc == 0);
+
+	rc = m0_cob_domain_mkfs(&ctx->rmc_mdstore.md_dom, &M0_COB_SLASH_FID,
+				&M0_COB_SESSIONS_FID, &tx);
+	M0_ASSERT(rc == 0);
+
+	m0_db_tx_commit(&tx);
+
 	/*
 	 * Instead of using m0d and dealing with network, database and
 	 * other subsystems, request handler is initialised in a 'special way'.
-- 
1.8.3.2


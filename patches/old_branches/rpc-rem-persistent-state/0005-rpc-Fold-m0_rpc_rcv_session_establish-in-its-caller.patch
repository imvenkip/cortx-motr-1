From fa7b6d4496f6c6f4538bb10e80f415965b14cbe9 Mon Sep 17 00:00:00 2001
From: Amit Jambure <Amit_Jambure@xyratex.com>
Date: Thu, 23 May 2013 15:33:55 +0530
Subject: [PATCH 5/9] rpc: Fold m0_rpc_rcv_session_establish() in its caller.

---
 rpc/session.c          | 39 +--------------------------------------
 rpc/session_foms.c     | 18 ++++++++----------
 rpc/session_internal.h | 10 ----------
 3 files changed, 9 insertions(+), 58 deletions(-)

diff --git a/rpc/session.c b/rpc/session.c
index 7eafa93..48deb6f 100644
--- a/rpc/session.c
+++ b/rpc/session.c
@@ -119,6 +119,7 @@ static struct m0_sm_state_descr session_states[] = {
 		.sd_flags     = M0_SDF_INITIAL,
 		.sd_name      = "Initialised",
 		.sd_allowed   = M0_BITS(M0_RPC_SESSION_ESTABLISHING,
+					M0_RPC_SESSION_IDLE, /* only on rcvr */
 					M0_RPC_SESSION_FINALISED,
 					M0_RPC_SESSION_FAILED)
 	},
@@ -921,24 +922,6 @@ static void session_idle_x_busy(struct m0_rpc_session *session)
 					       M0_RPC_SESSION_BUSY)));
 }
 
-/**
-   Allocates and returns new session_id
- */
-M0_INTERNAL uint64_t session_id_allocate(void)
-{
-	uint64_t session_id;
-
-	M0_ENTRY();
-
-	do {
-		session_id = m0_rpc_id_generate();
-	} while (session_id <= SESSION_ID_MIN &&
-		 session_id >= SESSION_ID_MAX);
-
-	M0_LEAVE("session_id: %llu", (unsigned long long)session_id);
-	return session_id;
-}
-
 static void snd_slot_idle(struct m0_rpc_slot *slot)
 {
 	struct m0_rpc_frm *frm;
@@ -1042,26 +1025,6 @@ static void rcv_reply_consume(struct m0_rpc_item *req,
 	}
 }
 
-M0_INTERNAL int m0_rpc_rcv_session_establish(struct m0_rpc_session *session)
-{
-	struct m0_rpc_machine *machine;
-
-	M0_ENTRY("session: %p", session);
-	M0_PRE(session != NULL);
-
-	machine = session_machine(session);
-	M0_PRE(m0_rpc_machine_is_locked(machine));
-	M0_ASSERT(m0_rpc_session_invariant(session));
-	M0_ASSERT(session_state(session) == M0_RPC_SESSION_INITIALISED);
-
-	session_state_set(session, M0_RPC_SESSION_ESTABLISHING);
-	session->s_session_id = session_id_allocate();
-	session_state_set(session, M0_RPC_SESSION_IDLE);
-
-	M0_ASSERT(m0_rpc_session_invariant(session));
-	M0_RETURN(0);
-}
-
 M0_INTERNAL int m0_rpc_rcv_session_terminate(struct m0_rpc_session *session)
 {
 	struct m0_rpc_machine *machine;
diff --git a/rpc/session_foms.c b/rpc/session_foms.c
index 6d722bf..3240f19 100644
--- a/rpc/session_foms.c
+++ b/rpc/session_foms.c
@@ -383,23 +383,21 @@ M0_INTERNAL int m0_rpc_fom_session_establish_tick(struct m0_fom *fom)
 		rc = -ENOMEM;
 		goto out;
 	}
-
 	m0_rpc_machine_lock(machine);
-
 	rc = m0_rpc_session_init_locked(session, conn, slot_cnt);
 	if (rc == 0) {
-		rc = m0_rpc_rcv_session_establish(session);
-		if (rc == 0)
-			reply->rser_session_id = session->s_session_id;
-		else
-			m0_rpc_session_fini_locked(session);
+		do {
+			session->s_session_id = m0_rpc_id_generate();
+		} while (session->s_session_id <= SESSION_ID_MIN ||
+			 session->s_session_id >  SESSION_ID_MAX);
+		session_state_set(session, M0_RPC_SESSION_IDLE);
 	}
-
 	m0_rpc_machine_unlock(machine);
 
 out:
-	reply->rser_sender_id = request->rse_sender_id;
-	reply->rser_rc        = rc;
+	reply->rser_sender_id  = request->rse_sender_id;
+	reply->rser_session_id = session->s_session_id;
+	reply->rser_rc         = rc;
 
 	if (rc != 0) {
 		reply->rser_session_id = SESSION_ID_INVALID;
diff --git a/rpc/session_internal.h b/rpc/session_internal.h
index d1703b8..37aa6c3 100644
--- a/rpc/session_internal.h
+++ b/rpc/session_internal.h
@@ -101,16 +101,6 @@ M0_INTERNAL int m0_rpc_session_cob_create(struct m0_cob *conn_cob,
 					  struct m0_db_tx *tx);
 
 /**
-   Creates receiver end of session object.
-
-   @pre session->s_state == M0_RPC_SESSION_INITIALISED &&
-	session->s_conn != NULL
-   @post ergo(result == 0, session->s_state == M0_RPC_SESSION_IDLE)
-   @post ergo(result != 0, session->s_state == M0_RPC_SESSION_FAILED)
- */
-M0_INTERNAL int m0_rpc_rcv_session_establish(struct m0_rpc_session *session);
-
-/**
    Terminates receiver end of session.
 
    @pre session->s_state == M0_RPC_SESSION_IDLE
-- 
1.8.3.2


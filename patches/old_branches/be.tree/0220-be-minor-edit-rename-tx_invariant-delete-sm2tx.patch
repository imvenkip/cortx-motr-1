From aabd08e7af8c55de6f5f2b419087b8405faa6d76 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Tue, 25 Jun 2013 16:28:43 +0300
Subject: [PATCH 220/290] be: [minor edit] rename tx_invariant(), delete
 sm2tx()

Rename tx_invariant() to tx_state_invariant(). Original name was
undistinguishable from m0_be__tx_invariant().

sm2tx() is not needed.

+ Move M0_BTS_FAILED to the top of tx_states[], because M0_BTS_FAILED == 0.
---
 be/tx.c | 53 +++++++++++++++++++++++------------------------------
 1 file changed, 23 insertions(+), 30 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index c7cc7a0..3f58d68 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -40,8 +40,6 @@
  * @{
  */
 
-static bool tx_invariant(const struct m0_sm *mach);
-
 M0_TL_DESCR_DEFINE(tx, "transactions", M0_INTERNAL, struct m0_be_tx,
 		   t_linkage, t_magic,
 		   M0_TRACE_TX_MAGIC,
@@ -49,13 +47,27 @@ M0_TL_DESCR_DEFINE(tx, "transactions", M0_INTERNAL, struct m0_be_tx,
 
 M0_TL_DEFINE(tx, M0_INTERNAL, struct m0_be_tx);
 
+static bool tx_state_invariant(const struct m0_sm *sm)
+{
+	return m0_be__tx_invariant(
+		container_of(sm, const struct m0_be_tx, t_sm));
+}
+
 static struct m0_sm_state_descr tx_states[M0_BTS_NR] = {
+	[M0_BTS_FAILED] = {
+		.sd_flags     = M0_SDF_FAILURE,
+		.sd_name      = "M0_BTS_FAILURE",
+		.sd_in        = NULL,
+		.sd_ex        = NULL,
+		.sd_invariant = tx_state_invariant,
+		.sd_allowed   = 0
+	},
 	[M0_BTS_PREPARE] = {
 		.sd_flags     = M0_SDF_INITIAL,
 		.sd_name      = "M0_BTS_PREPARE",
 		.sd_in        = NULL,
 		.sd_ex        = NULL,
-		.sd_invariant = tx_invariant,
+		.sd_invariant = tx_state_invariant,
 		.sd_allowed   = M0_BITS(M0_BTS_PREPARE, M0_BTS_ACTIVE,
 					M0_BTS_FAILED),
 	},
@@ -64,7 +76,7 @@ static struct m0_sm_state_descr tx_states[M0_BTS_NR] = {
 		.sd_name      = "M0_BTS_ACTIVE",
 		.sd_in        = NULL,
 		.sd_ex        = NULL,
-		.sd_invariant = tx_invariant,
+		.sd_invariant = tx_state_invariant,
 		.sd_allowed   = M0_BITS(M0_BTS_ACTIVE, M0_BTS_CLOSED),
 	},
 	[M0_BTS_CLOSED] = {
@@ -72,7 +84,7 @@ static struct m0_sm_state_descr tx_states[M0_BTS_NR] = {
 		.sd_name      = "M0_BTS_CLOSED",
 		.sd_in        = NULL,
 		.sd_ex        = NULL,
-		.sd_invariant = tx_invariant,
+		.sd_invariant = tx_state_invariant,
 		.sd_allowed   = M0_BITS(M0_BTS_GROUPED),
 	},
 	[M0_BTS_GROUPED] = {
@@ -80,7 +92,7 @@ static struct m0_sm_state_descr tx_states[M0_BTS_NR] = {
 		.sd_name      = "M0_BTS_GROUPED",
 		.sd_in        = NULL,
 		.sd_ex        = NULL,
-		.sd_invariant = tx_invariant,
+		.sd_invariant = tx_state_invariant,
 		.sd_allowed   = M0_BITS(M0_BTS_SUBMITTED),
 	},
 	[M0_BTS_SUBMITTED] = {
@@ -88,7 +100,7 @@ static struct m0_sm_state_descr tx_states[M0_BTS_NR] = {
 		.sd_name      = "M0_BTS_SUBMITTED",
 		.sd_in        = NULL,
 		.sd_ex        = NULL,
-		.sd_invariant = tx_invariant,
+		.sd_invariant = tx_state_invariant,
 		.sd_allowed   = M0_BITS(M0_BTS_LOGGED),
 	},
 	[M0_BTS_LOGGED] = {
@@ -96,7 +108,7 @@ static struct m0_sm_state_descr tx_states[M0_BTS_NR] = {
 		.sd_name      = "M0_BTS_LOGGED",
 		.sd_in        = NULL,
 		.sd_ex        = NULL,
-		.sd_invariant = tx_invariant,
+		.sd_invariant = tx_state_invariant,
 		.sd_allowed   = M0_BITS(M0_BTS_PLACED),
 	},
 	[M0_BTS_PLACED] = {
@@ -104,7 +116,7 @@ static struct m0_sm_state_descr tx_states[M0_BTS_NR] = {
 		.sd_name      = "M0_BTS_PLACED",
 		.sd_in        = NULL,
 		.sd_ex        = NULL,
-		.sd_invariant = tx_invariant,
+		.sd_invariant = tx_state_invariant,
 		.sd_allowed   = M0_BITS(M0_BTS_STABLE),
 	},
 	[M0_BTS_STABLE] = {
@@ -112,15 +124,7 @@ static struct m0_sm_state_descr tx_states[M0_BTS_NR] = {
 		.sd_name      = "M0_BTS_STABLE",
 		.sd_in        = NULL,
 		.sd_ex        = NULL,
-		.sd_invariant = tx_invariant,
-		.sd_allowed   = 0
-	},
-	[M0_BTS_FAILED] = {
-		.sd_flags     = M0_SDF_FAILURE,
-		.sd_name      = "M0_BTS_FAILURE",
-		.sd_in        = NULL,
-		.sd_ex        = NULL,
-		.sd_invariant = tx_invariant,
+		.sd_invariant = tx_state_invariant,
 		.sd_allowed   = 0
 	}
 };
@@ -460,8 +464,7 @@ static void tx_engine_got_closed(struct m0_be_tx_engine *eng,
 		else
 			tx_group_add(eng, gr, tx);
 	}
-#else
-	/* XXX: close group after every tx close, for now */
+#else /* XXX: close group after every tx close, for now */
 	tx_group_init(gr);
 	tx_group_add(eng, gr, tx);
 	tx_group_close(eng, gr);
@@ -572,16 +575,6 @@ static void tx_engine_unlock(struct m0_be_tx_engine *eng)
 	m0_rwlock_write_unlock(&eng->te_lock);
 }
 
-static const struct m0_be_tx *sm2tx(const struct m0_sm *sm)
-{
-	return container_of(sm, const struct m0_be_tx, t_sm);
-}
-
-static bool tx_invariant(const struct m0_sm *sm)
-{
-	return m0_be__tx_invariant(sm2tx(sm));
-}
-
 M0_INTERNAL int m0_be_tx_timedwait(struct m0_be_tx *tx, int state,
 				   m0_time_t timeout)
 {
-- 
1.8.3.2


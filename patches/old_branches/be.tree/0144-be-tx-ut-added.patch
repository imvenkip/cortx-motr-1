From 57111e4cf982f9dc33f55ad991c7d84947213df7 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Wed, 12 Jun 2013 12:26:17 +0300
Subject: [PATCH 144/290] be: tx: ut added.

---
 be/ut/Makefile.sub |   3 +-
 be/ut/btree.c      |   8 ++--
 be/ut/tx.c         | 128 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 134 insertions(+), 5 deletions(-)
 create mode 100644 be/ut/tx.c

diff --git a/be/ut/Makefile.sub b/be/ut/Makefile.sub
index 79932eb..1f9eff3 100644
--- a/be/ut/Makefile.sub
+++ b/be/ut/Makefile.sub
@@ -4,5 +4,6 @@ ut_libmero_ut_la_SOURCES += be/ut/alloc.c  \
                             be/ut/list.c   \
                             be/ut/main.c   \
                             be/ut/seg.c    \
-			    be/ut/btree.c
+			    be/ut/btree.c  \
+			    be/ut/tx.c
 # be/ut/extmap.c
diff --git a/be/ut/btree.c b/be/ut/btree.c
index b89188e..d640cb6 100644
--- a/be/ut/btree.c
+++ b/be/ut/btree.c
@@ -52,19 +52,19 @@ static void discarded(const struct m0_be_tx *tx)
 {
 }
 
-void be_op_init(struct m0_be_op *op)
+static void be_op_init(struct m0_be_op *op)
 {/* XXX */
 }
 
-void be_init(struct m0_be *be)
+static void be_init(struct m0_be *be)
 {/* XXX */
 }
 
-void be_op_fini(struct m0_be_op *op)
+static void be_op_fini(struct m0_be_op *op)
 {/* XXX */
 }
 
-void be_fini(struct m0_be *be)
+static void be_fini(struct m0_be *be)
 {/* XXX */
 }
 
diff --git a/be/ut/tx.c b/be/ut/tx.c
new file mode 100644
index 0000000..ad62ea0
--- /dev/null
+++ b/be/ut/tx.c
@@ -0,0 +1,128 @@
+/*
+ * COPYRIGHT 2013 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Anatoliy Bilenko <Anatoliy_Bilenko@xyratex.com>
+ * Original creation date: 12-Jun-2013
+ */
+
+#include "ut/ut.h"
+#include "be/be.h"
+#include "be/tx.h"
+#include "be/seg.h"
+#include "be/alloc.h"
+#include "lib/misc.h"
+#include "be/ut/helper.h"
+
+static struct m0_be_ut_seg_helper be_ut_btree_seg_helper;
+static struct m0_sm_group         grp;
+static struct m0_be_seg		  be_ut_btree_seg;
+static struct m0_be		  be;
+static uint64_t			  tid = 1ULL;
+
+static void seg_create(void)
+{
+	m0_be_ut_seg_create_open(&be_ut_btree_seg_helper, &be_ut_btree_seg);
+	m0_sm_group_init(&grp);
+}
+
+static void seg_destroy(void)
+{
+	m0_be_ut_seg_close_destroy(&be_ut_btree_seg_helper, &be_ut_btree_seg);
+	m0_sm_group_fini(&grp);
+}
+
+static void persistent(const struct m0_be_tx *tx)
+{
+}
+static void discarded(const struct m0_be_tx *tx)
+{
+}
+
+static void be_op_init(struct m0_be_op *op)
+{/* XXX */
+}
+
+static void be_init(struct m0_be *be)
+{/* XXX */
+}
+
+static void be_op_fini(struct m0_be_op *op)
+{/* XXX */
+}
+
+static void be_fini(struct m0_be *be)
+{/* XXX */
+}
+
+void test_tx(void)
+{
+	struct m0_be_op         op;
+	struct m0_be_tx         tx;
+	struct m0_be_tx_credit  cred;
+	struct m0_be_seg       *seg   = &be_ut_btree_seg;
+	struct m0_be_allocator *alloc = &seg->bs_allocator;
+	struct m0_uint128      *p;
+
+	/*
+	 * Init BE, BE IO, credits
+	 */
+	be_init(&be);
+	be_op_init(&op);
+	m0_be_tx_credit_init(&cred);
+
+	/*
+	 * Init transaction and its credits
+	 */
+	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL);
+	m0_be_allocator_credit(alloc, M0_BAO_ALLOC, sizeof *p, 0, &cred);
+	m0_be_tx_prep(&tx, &cred);
+
+	/*
+	 * Open tx, allocate, dirty and capture region
+	 */
+	m0_be_tx_open(&tx);
+	M0_UT_ASSERT(M0_IN(m0_be_op_state(&op), (M0_BOS_SUCCESS, M0_BOS_FAILURE)));
+
+	p = m0_be_alloc(&seg->bs_allocator, &tx, &op, sizeof *p, 0);
+	M0_UT_ASSERT(p != NULL);
+
+	p->u_hi = 0xDEADD00D8BADF00D;
+	p->u_lo = 0x5CA1AB1E7E1ECA57;
+	M0_BE_TX_CAPTURE_PTR(seg, &tx, p);
+
+	/*
+	 * Make things persistent
+	 */
+	m0_be_tx_close(&tx);
+	M0_UT_ASSERT(m0_be_tx_timedwait(&tx, M0_TIME_NEVER) == 0);
+
+	/*
+	 * Cleanup
+	 */
+	be_op_fini(&op);
+	be_fini(&be);
+}
+
+const struct m0_test_suite be_tx_ut = {
+	.ts_name = "be-tx-ut",
+	.ts_tests = {
+		{ "tx: segment create", seg_create },
+
+		{ "tx: run", test_tx  },
+
+		{ "tx: segment destroy", seg_destroy },
+		{ NULL, NULL }
+	}
+};
-- 
1.8.3.2


From 7ab82828c53c83e2fb25bae89c0f6f77fbe1f254 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Tue, 2 Jul 2013 20:40:16 +0300
Subject: [PATCH 261/290] be: implement m0_be_tx_stable()

(To the best of my understanding.)
---
 be/tx.c       | 15 +++++++++++++++
 be/tx.h       | 12 ++++++++----
 be/tx_group.c |  3 ---
 3 files changed, 23 insertions(+), 7 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index 6aebd05..828d29b 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -460,6 +460,21 @@ m0_be_tx_timedwait(struct m0_be_tx *tx, int state, m0_time_t timeout)
 	return tx->t_sm.sm_rc;
 }
 
+M0_INTERNAL void m0_be_tx_stable(struct m0_be_tx *tx)
+{
+	M0_ENTRY();
+	M0_PRE(m0_be__tx_invariant(tx));
+	M0_PRE(m0_be__tx_state(tx) == M0_BTS_PLACED);
+	M0_PRE(tx_is_locked(tx));
+
+	tx_state_set(tx, M0_BTS_STABLE);
+	if (tx->t_discarded != NULL)
+		tx->t_discarded(tx);
+	m0_fom_wakeup(tx_engine(tx)->te_fom);
+
+	M0_LEAVE();
+}
+
 static m0_bcount_t tx_engine_free_space(const struct m0_be_tx_engine *te)
 {
 	M0_PRE(m0_be__tx_engine_invariant(te));
diff --git a/be/tx.h b/be/tx.h
index 36bbe00..d0a8c64 100644
--- a/be/tx.h
+++ b/be/tx.h
@@ -95,9 +95,9 @@ struct m0_be_reg;
  *       non-existing) segment page daemon;
  *
  *     - transaction close call (m0_be_tx_close()) does not guarantee
- *       transaction persistence. Transaction become persistent later. The user
- *       can set a call-back m0_be_tx::t_persistent() that is called when the
- *       transaction becomes persistent;
+ *       transaction persistence. Transaction will become persistent later.
+ *       The user can set a call-back m0_be_tx::t_persistent() that is called
+ *       when the transaction becomes persistent;
  *
  *     - transactions become persistent in the same order as they close.
  *
@@ -440,7 +440,11 @@ M0_INTERNAL void m0_be_tx_force(struct m0_be_tx *tx);
 M0_INTERNAL int m0_be_tx_timedwait(struct m0_be_tx *tx, int state,
 				   m0_time_t timeout);
 
-/** Notifies backend that the transaction is no longer needed for recovery. */
+/**
+ * Notifies backend that the transaction is no longer needed for recovery.
+ *
+ * Calls tx->t_discarded() call-back, if it is set.
+ */
 M0_INTERNAL void m0_be_tx_stable(struct m0_be_tx *tx);
 
 M0_INTERNAL void tx_state_set(struct m0_be_tx *tx, enum m0_be_tx_state state);
diff --git a/be/tx_group.c b/be/tx_group.c
index af3b542..983b786 100644
--- a/be/tx_group.c
+++ b/be/tx_group.c
@@ -124,9 +124,6 @@ tx_group_close(struct m0_be_tx_engine *eng, struct m0_be_tx_group *gr)
 	/* XXX TODO ... */
 
 	gr->tg_opened = false;
-
-	M0_LOG(M0_DEBUG, "Posting \"wake up\" AST to engine->te_fom's"
-	       " sm_group");
 	m0_fom_wakeup(eng->te_fom);
 }
 
-- 
1.8.3.2


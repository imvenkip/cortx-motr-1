From 72f137be7921b41a565df8812146131d905ad295 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Thu, 20 Jun 2013 16:21:49 +0300
Subject: [PATCH 184/290] tx_fom: added m0_fom_wait_on() example for stages
 waiting on IO.

---
 be/tx_fom.c | 31 +++++++++++++++++++++++++++++++
 1 file changed, 31 insertions(+)

diff --git a/be/tx_fom.c b/be/tx_fom.c
index b8b125d..0f98705 100644
--- a/be/tx_fom.c
+++ b/be/tx_fom.c
@@ -32,6 +32,22 @@
 #include "be/tx_service.h"
 #include "be/tx.h"
 
+#if 1 /* XXX */
+#include "lib/thread.h"
+static struct m0_thread g_thread;
+static struct m0_chan   g_chan;
+static struct m0_mutex  g_mutex;
+static void g_handler(int xxx)
+{
+	M0_LOG(M0_DEBUG, "io emulation started");
+	sleep(10);
+	m0_mutex_lock(&g_mutex);
+	m0_chan_signal(&g_chan);
+	m0_mutex_unlock(&g_mutex);
+	M0_LOG(M0_DEBUG, "io emulation ended");
+}
+#endif /* XXX */
+
 /**
  * @addtogroup be
  * @{
@@ -135,7 +151,22 @@ static int tx_fom_tick(struct m0_fom *fom)
 		break;
 
 	case FS_SUBMITTED_TO_SEG:
+#if 1  /* XXX */
+		m0_mutex_init(&g_mutex);
+		m0_chan_init(&g_chan, &g_mutex);
+
+		M0_THREAD_INIT(&g_thread, int, NULL, &g_handler, 0, "XXX");
+
+		m0_mutex_lock(&g_mutex);
+		m0_fom_wait_on(fom, &g_chan, &fom->fo_cb);
+		m0_mutex_unlock(&g_mutex);
+
+		m0_fom_phase_set(fom, FS_PLACED);
+		return M0_FSO_WAIT;
+
+#else  /* XXX */
 		break;
+#endif  /* XXX */
 
 	case FS_PLACED:
 		tx_state_set(tx, M0_BTS_PLACED);
-- 
1.8.3.2


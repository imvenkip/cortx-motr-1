From d29edb9af878199e450e1d233f59d4e41fc22880 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Wed, 3 Jul 2013 01:03:15 +0300
Subject: [PATCH 266/290] be: minor documentation cleanup

+ Remove the declaration of tx_state(). This function has been renamed already.
---
 be/tx.c |  2 --
 be/tx.h | 22 ++++++++++------------
 2 files changed, 10 insertions(+), 14 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index ab5b278..6b71d5f 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -84,9 +84,7 @@ static const struct m0_sm_conf tx_sm_conf = {
 	.scf_state     = tx_states
 };
 
-static enum m0_be_tx_state tx_state    (const struct m0_be_tx *tx);
 static struct m0_be_tx_engine *tx_engine(const struct m0_be_tx *tx);
-
 static void        tx_open_tail        (struct m0_be_tx *tx);
 static void        tx_fail             (struct m0_be_tx *tx, int err);
 static m0_bcount_t tx_engine_free_space(const struct m0_be_tx_engine *eng);
diff --git a/be/tx.h b/be/tx.h
index 321f0b4..93356fb 100644
--- a/be/tx.h
+++ b/be/tx.h
@@ -80,18 +80,18 @@ struct m0_be_reg;
  *
  * Notes:
  *
- *     - transaction engine implements redo-only WAL (write-ahead
- *       logging). There is no way to abort a transaction;
+ *     - transaction engine implements redo-only WAL (write-ahead logging).
+ *       There is no way to abort a transaction;
  *
- *     - serializibility and concurrency concerns are delegated to a
- *       user. Specifically, the user must call m0_be_tx_capture() while the
- *       lock, protecting the memory being captured is held. In the current
- *       implementation this lock must be held at least until the transaction is
- *       closed, in the future this requirement will be weakened;
+ *     - serializibility and concurrency concerns are delegated to a user.
+ *       Specifically, the user must call m0_be_tx_capture() while the lock,
+ *       protecting the memory being captured is held. In the current
+ *       implementation this lock must be held at least until the transaction
+ *       is closed, in the future this requirement will be weakened;
  *
- *     - currently, the transaction engine writes modified memory in place, as
- *       described in the "Overview of operation" section. In the future, the
- *       transaction engine would leave this task to the (currently
+ *     - currently, the transaction engine writes modified memory in place,
+ *       as described in the "Overview of operation" section. In the future,
+ *       the transaction engine would leave this task to the (currently
  *       non-existing) segment page daemon;
  *
  *     - transaction close call (m0_be_tx_close()) does not guarantee
@@ -109,8 +109,6 @@ struct m0_be_reg;
  *
  * @verbatim
  *
- *                      INIT
- *                        |
  *                        | m0_be_tx_init()
  *                        |
  *                        V
-- 
1.8.3.2


From 6d9c0c50656a1955d5089d8c949879ab7e5963c3 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Tue, 2 Jul 2013 20:49:05 +0300
Subject: [PATCH 262/290] be: rename tx_state_set() to m0_be__tx_state_set()

Since the function is exported, it needs a proper prefix.
Double underscore signifies its "internal" nature.
---
 be/tx.c       | 14 ++++++++------
 be/tx.h       |  3 ++-
 be/tx_group.c |  2 +-
 3 files changed, 11 insertions(+), 8 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index 828d29b..284d17c 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -239,7 +239,7 @@ M0_INTERNAL void m0_be_tx_open(struct m0_be_tx *tx)
 			if (tx_log_free_space(eng) >= log_size)
 				tx_open_tail(tx);
 			else
-				tx_state_set(tx, M0_BTS_OPENING);
+				m0_be__tx_state_set(tx, M0_BTS_OPENING);
 			tx_engine_unlock(eng);
 		} else {
 			tx_fail(tx, rc);
@@ -425,6 +425,7 @@ M0_INTERNAL void m0_be_tx_close(struct m0_be_tx *tx)
 	m0_bcount_t             used;
 	m0_bcount_t             prepared;
 
+	M0_PRE(m0_be__tx_invariant(tx));
 	M0_PRE(m0_be__tx_state(tx) == M0_BTS_ACTIVE);
 	M0_PRE(tx_is_locked(tx));
 
@@ -432,7 +433,7 @@ M0_INTERNAL void m0_be_tx_close(struct m0_be_tx *tx)
 	M0_PRE(m0_be__tx_engine_invariant(eng));
 
 	eng->te_inmem = tx;
-	tx_state_set(tx, M0_BTS_CLOSED);
+	m0_be__tx_state_set(tx, M0_BTS_CLOSED);
 
 	tx_engine_got_closed(eng, tx);
 
@@ -467,7 +468,7 @@ M0_INTERNAL void m0_be_tx_stable(struct m0_be_tx *tx)
 	M0_PRE(m0_be__tx_state(tx) == M0_BTS_PLACED);
 	M0_PRE(tx_is_locked(tx));
 
-	tx_state_set(tx, M0_BTS_STABLE);
+	m0_be__tx_state_set(tx, M0_BTS_STABLE);
 	if (tx->t_discarded != NULL)
 		tx->t_discarded(tx);
 	m0_fom_wakeup(tx_engine(tx)->te_fom);
@@ -534,7 +535,7 @@ static void tx_open_tail(struct m0_be_tx *tx)
 	M0_PRE(tx_engine_free_space(tx_engine(tx)) >= log_size);
 
 	tx_engine(tx)->te_reserved += log_size;
-	tx_state_set(tx, M0_BTS_ACTIVE);
+	m0_be__tx_state_set(tx, M0_BTS_ACTIVE);
 }
 
 M0_INTERNAL enum m0_be_tx_state m0_be__tx_state(const struct m0_be_tx *tx)
@@ -542,7 +543,8 @@ M0_INTERNAL enum m0_be_tx_state m0_be__tx_state(const struct m0_be_tx *tx)
 	return tx->t_sm.sm_state;
 }
 
-M0_INTERNAL void tx_state_set(struct m0_be_tx *tx, enum m0_be_tx_state state)
+M0_INTERNAL void
+m0_be__tx_state_set(struct m0_be_tx *tx, enum m0_be_tx_state state)
 {
 	M0_PRE(m0_be__tx_invariant(tx));
 	M0_PRE(tx_is_locked(tx));
@@ -568,7 +570,7 @@ _tx_state_set(struct m0_sm_group *grp M0_UNUSED, struct m0_sm_ast *ast)
 	M0_PRE(IS_IN_ARRAY(state, tx_states));
 
 	/* XXX TODO: bob_of() */
-	tx_state_set(container_of(ast, struct m0_be_tx, t_ast), state);
+	m0_be__tx_state_set(container_of(ast, struct m0_be_tx, t_ast), state);
 	M0_LEAVE();
 }
 
diff --git a/be/tx.h b/be/tx.h
index d0a8c64..6fdd715 100644
--- a/be/tx.h
+++ b/be/tx.h
@@ -447,7 +447,8 @@ M0_INTERNAL int m0_be_tx_timedwait(struct m0_be_tx *tx, int state,
  */
 M0_INTERNAL void m0_be_tx_stable(struct m0_be_tx *tx);
 
-M0_INTERNAL void tx_state_set(struct m0_be_tx *tx, enum m0_be_tx_state state);
+M0_INTERNAL void m0_be__tx_state_set(struct m0_be_tx *tx,
+				     enum m0_be_tx_state state);
 M0_INTERNAL enum m0_be_tx_state m0_be__tx_state(const struct m0_be_tx *tx);
 
 /**
diff --git a/be/tx_group.c b/be/tx_group.c
index 983b786..5593cac 100644
--- a/be/tx_group.c
+++ b/be/tx_group.c
@@ -56,7 +56,7 @@ M0_INTERNAL void tx_group_add(struct m0_be_tx_engine *eng,
 
 	tx->t_group  = gr;
 	tx->t_leader = gr_tlist_is_empty(&gr->tg_txs);
-	tx_state_set(tx, M0_BTS_GROUPED);
+	m0_be__tx_state_set(tx, M0_BTS_GROUPED);
 	gr_tlist_add(&gr->tg_txs, tx);
 	/* gr->tg_used.     XXX: what's here? */
 }
-- 
1.8.3.2


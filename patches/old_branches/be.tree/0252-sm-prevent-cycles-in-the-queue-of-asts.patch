From 135c350d89689763cf67d9d1bbbb086be5925d7d Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 28 Jun 2013 13:48:03 +0300
Subject: [PATCH 252/290] sm: prevent cycles in the queue of asts

m0_sm_ast_post(): Add a precondition, ensuring that posted but not executed
ast is not re-used.

Reviewed-on: http://reviewboard.clusterstor.com/r/1468/
Reviewed-by: Nikita Danilov
---
 sm/sm.c | 2 ++
 sm/sm.h | 9 +++++----
 2 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/sm/sm.c b/sm/sm.c
index 24f0e4a..06b0baa 100644
--- a/sm/sm.c
+++ b/sm/sm.c
@@ -84,6 +84,7 @@ static bool grp_is_locked(const struct m0_sm_group *grp)
 M0_INTERNAL void m0_sm_ast_post(struct m0_sm_group *grp, struct m0_sm_ast *ast)
 {
 	M0_PRE(ast->sa_cb != NULL);
+	M0_PRE(ast->sa_next == NULL);
 
 	do
 		ast->sa_next = grp->s_forkq;
@@ -105,6 +106,7 @@ M0_INTERNAL void m0_sm_asts_run(struct m0_sm_group *grp)
 
 		if (ast == &eoq)
 			break;
+		M0_ASSERT(ast->sa_next != NULL);
 
 		ast->sa_next = NULL;
 		ast->sa_cb(grp, ast);
diff --git a/sm/sm.h b/sm/sm.h
index 4c30081..91c79e9 100644
--- a/sm/sm.h
+++ b/sm/sm.h
@@ -688,7 +688,10 @@ M0_INTERNAL void m0_sm_timeout_fini(struct m0_sm_timeout *to);
 M0_INTERNAL bool m0_sm_timeout_is_armed(const struct m0_sm_timeout *to);
 
 /**
-   Posts an AST to a group.
+ * Posts an AST to a group.
+ *
+ * An AST must not be re-posted until its previous (already posted) execution
+ * completes.
  */
 M0_INTERNAL void m0_sm_ast_post(struct m0_sm_group *grp, struct m0_sm_ast *ast);
 
@@ -798,9 +801,7 @@ M0_INTERNAL void m0_sm_stats_post(struct m0_sm *mach,
 				  struct m0_addb_ctx **cv);
 
 /** @} end of sm group */
-
-/* __MERO_SM_SM_H__ */
-#endif
+#endif /* __MERO_SM_SM_H__ */
 
 /*
  *  Local variables:
-- 
1.8.3.2


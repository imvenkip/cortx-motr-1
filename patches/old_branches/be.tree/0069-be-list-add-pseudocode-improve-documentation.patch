From 862648ed468c0f02de51be964dc84068ced54567 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Thu, 30 May 2013 18:22:42 +0300
Subject: [PATCH 069/290] be (list): add pseudocode; improve documentation

---
 be/list.c    | 28 ++++++++++++++++++++++++++++
 be/list.h    | 49 +++++++++++++++++++++++++++++++++++--------------
 be/ut/list.c | 17 ++++++++++++++++-
 3 files changed, 79 insertions(+), 15 deletions(-)

diff --git a/be/list.c b/be/list.c
index 8538198..4fb6b5f 100644
--- a/be/list.c
+++ b/be/list.c
@@ -24,6 +24,34 @@
  * @{
  */
 
+M0_INTERNAL void
+m0_be_list_create(struct m0_be_list *list, struct m0_be_tx *tx)
+{
+	/* m0_tlist_init(); */
+	/* m0_be_tx_capture(); */
+}
+
+M0_INTERNAL void
+m0_be_list_destroy(struct m0_be_list *list, struct m0_be_tx *tx)
+{
+	/* tlist_fini(); */
+	/* mangle tlist head; */
+	/* m0_be_tx_capture(); */
+}
+
+/*
+ * Neither m0_be_list_init() nor m0_be_list_fini() will ever do anything.
+ * We keep the interfaces for consistency.
+ *
+ * NOTE: The "bigger" structure may contain fields (e.g., mutexes) that get
+ * filled with garbage when the structure is loaded from disk storage.
+ * Initialiser of this "bigger" structure should do proper initialisation
+ * of such fields.
+ */
+M0_INTERNAL void m0_be_list_init(struct m0_be_list *list,
+				 struct m0_be_seg *seg) {}
+M0_INTERNAL void m0_be_list_fini(struct m0_be_list *list) {}
+
 /** @} end of be group */
 
 /*
diff --git a/be/list.h b/be/list.h
index a032557..aa9ac66 100644
--- a/be/list.h
+++ b/be/list.h
@@ -33,14 +33,21 @@ struct m0_be_list {
 	struct m0_be_seg *bl_seg;
 };
 
-M0_INTERNAL void m0_be_list_init(struct m0_be_list *list,
-				 struct m0_be_seg *seg);
-
-M0_INTERNAL void m0_be_list_fini(struct m0_be_list *list);
+/**
+ * Creates and captures a new list in pre-allocated segment space.
+ *
+ * @pre m0_be_pinned(&M0_BE_REG(list->bl_seg, sizeof *list, list))
+ */
+M0_INTERNAL void m0_be_list_create(struct m0_be_list *list,
+				   struct m0_be_tx *tx);
 
-M0_INTERNAL void m0_be_list_create(struct m0_be_list *list);
-M0_INTERNAL void m0_be_list_destroy(struct m0_be_list *list);
+M0_INTERNAL void m0_be_list_destroy(struct m0_be_list *list,
+				    struct m0_be_tx *tx);
 
+/**
+ * Pins the head and first `nelems' of the list, loading them from disk
+ * storage if necessary.
+ */
 M0_INTERNAL void m0_be_list_get(const struct m0_be_list *list,
 				m0_bcount_t nelems,
 				struct m0_be_op *op);
@@ -48,26 +55,40 @@ M0_INTERNAL void m0_be_list_get(const struct m0_be_list *list,
 M0_INTERNAL void m0_be_list_put(const struct m0_be_list *list,
 				m0_bcount_t nelems);
 
-/**
- * Captures (origin - left)-th .. (origin + right)-th elements of the list.
- */
-M0_INTERNAL void m0_be_list_capture(const struct m0_be_list *list,
-				    struct m0_be_tx *tx,
-				    const struct m0_tlink *origin,
-				    m0_bcount_t left,
-				    m0_bcount_t right);
+M0_INTERNAL void m0_be_list_init(struct m0_be_list *list,
+				 struct m0_be_seg *seg);
 
+M0_INTERNAL void m0_be_list_fini(struct m0_be_list *list);
+
+/** List operations that modify memory. */
 enum m0_be_list_op {
 	M0_BLO_INSERT,
 	M0_BLO_DELETE,
 	M0_BLO_MOVE
 };
 
+/**
+ * Calculates the credit needed to perform `nr' list operations of type
+ * `optype' and adds this credit to `accum'.
+ *
+ * @see m0_be_tx_prep()
+ */
 M0_INTERNAL void m0_be_list_credit(const struct m0_be_list *list,
 				   enum m0_be_list_op optype,
 				   m0_bcount_t nr,
 				   struct m0_be_tx_credit *accum);
 
+/**
+ * Captures (origin - left)-th .. (origin + right)-th elements of the list.
+ *
+ * @see m0_be_tx_capture()
+ */
+M0_INTERNAL void m0_be_list_capture(const struct m0_be_list *list,
+				    struct m0_be_tx *tx,
+				    const struct m0_tlink *origin,
+				    m0_bcount_t left,
+				    m0_bcount_t right);
+
 /** @} end of be group */
 #endif /* __MERO_BE_LIST_H__ */
 
diff --git a/be/ut/list.c b/be/ut/list.c
index 0979b1f..91f9197 100644
--- a/be/ut/list.c
+++ b/be/ut/list.c
@@ -21,12 +21,27 @@
 
 static void test_XXX(void)
 {
+#if 0 /*XXX*/
+	struct m0_be_list *list;
+
+	list = m0_be_alloc(sizeof *list);
+	M0_UT_ASSERT(list != NULL);
+
+	list_create(list);
+
+	list_get(list);
+
+	list_init();
+	list_init(); /* we explicitly allow sequential init()s */
+
+	...
+#endif /*XXX*/
 }
 
 const struct m0_test_suite be_list_ut = {
 	.ts_name = "be-list-ut",
 	.ts_tests = {
-		{ "XXX",   test_XXX },
+		{ "XXX", test_XXX },
 		{ NULL, NULL }
 	}
 };
-- 
1.8.3.2


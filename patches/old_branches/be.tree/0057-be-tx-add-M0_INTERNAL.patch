From db95b4e1027d1efd56bde8c5618b26b33eb7765d Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Wed, 29 May 2013 18:57:03 +0300
Subject: [PATCH 057/290] be (tx): add M0_INTERNAL

---
 be/tx.c | 41 ++++++++++++++++++++++++-----------------
 be/tx.h | 49 ++++++++++++++++++++++++++++---------------------
 2 files changed, 52 insertions(+), 38 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index 2382e33..b4286b7 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -67,7 +67,7 @@ static m0_bcount_t tx_group_header_size(m0_bcount_t tx_nr);
 static m0_bcount_t tx_engine_free_space(const struct m0_be_tx_engine *eng);
 static void        tx_engine_got_space (struct m0_be_tx_engine *eng);
 
-void m0_be_tx_engine_init(struct m0_be_tx_engine *engine)
+M0_INTERNAL void m0_be_tx_engine_init(struct m0_be_tx_engine *engine)
 {
 	m0_forall(i, ARRAY_SIZE(engine->te_txs),
 		  tx_tlist_init(&engine->te_txs[i]));
@@ -75,7 +75,7 @@ void m0_be_tx_engine_init(struct m0_be_tx_engine *engine)
 	M0_POST(m0_be_tx_engine_invariant(engine));
 }
 
-void m0_be_tx_engine_fini(struct m0_be_tx_engine *engine)
+M0_INTERNAL void m0_be_tx_engine_fini(struct m0_be_tx_engine *engine)
 {
 	M0_PRE(m0_be_tx_engine_invariant(engine));
 	m0_rwlock_fini(&engine->te_lock);
@@ -83,9 +83,11 @@ void m0_be_tx_engine_fini(struct m0_be_tx_engine *engine)
 		  tx_tlist_fini(&engine->te_txs[i]));
 }
 
-void m0_be_tx_init(struct m0_be_tx *tx, uint64_t tid, struct m0_be *be,
-		   m0_be_tx_cb_t persistent,
-		   m0_be_tx_cb_t discarded)
+M0_INTERNAL void m0_be_tx_init(struct m0_be_tx *tx,
+			       uint64_t tid,
+			       struct m0_be *be,
+			       m0_be_tx_cb_t persistent,
+			       m0_be_tx_cb_t discarded)
 {
 	m0_sm_init(&tx->t_sm, &tx_sm_conf, M0_BTS_INIT, tx_grp);
 	tx->t_id = tx->t_key = tid;
@@ -96,14 +98,15 @@ void m0_be_tx_init(struct m0_be_tx *tx, uint64_t tid, struct m0_be *be,
 	M0_POST(m0_be_tx_invariant(tx));
 }
 
-void m0_be_tx_fini(struct m0_be_tx *tx)
+M0_INTERNAL void m0_be_tx_fini(struct m0_be_tx *tx)
 {
 	M0_PRE(m0_be_tx_invariant(tx));
 	tx_tlink_del_fini(tx);
 	m0_sm_fini(&tx->t_sm);
 }
 
-void m0_be_tx_prep(struct m0_be_tx *tx, const struct m0_be_tx_credit *credit)
+M0_INTERNAL void
+m0_be_tx_prep(struct m0_be_tx *tx, const struct m0_be_tx_credit *credit)
 {
 	M0_PRE(m0_be_tx_invariant(tx));
 	M0_PRE(tx_state(tx) == M0_BTS_INIT);
@@ -111,7 +114,7 @@ void m0_be_tx_prep(struct m0_be_tx *tx, const struct m0_be_tx_credit *credit)
 	M0_POST(m0_be_tx_invariant(tx));
 }
 
-void m0_be_tx_open(struct m0_be_tx *tx)
+M0_INTERNAL void m0_be_tx_open(struct m0_be_tx *tx)
 {
 	struct m0_be_tx_engine *eng      = tx_engine(tx);
 	struct m0_be_tx_credit *prepared = &tx->t_prepared;
@@ -136,7 +139,8 @@ void m0_be_tx_open(struct m0_be_tx *tx)
 	M0_POST(m0_be_tx_invariant(tx));
 }
 
-void m0_be_tx_capture(struct m0_be_tx *tx, const struct m0_be_reg *reg)
+M0_INTERNAL void
+m0_be_tx_capture(struct m0_be_tx *tx, const struct m0_be_reg *reg)
 {
 	struct m0_be_tx_credit *used = &tx->t_used;
 	struct m0_be_reg_d *rd       = &tx->t_reg_d_area[used->tc_reg_nr];
@@ -157,9 +161,11 @@ void m0_be_tx_capture(struct m0_be_tx *tx, const struct m0_be_reg *reg)
 	M0_POST(m0_be_tx_invariant(tx));
 }
 
-void m0_be_tx_close(struct m0_be_tx *tx,
-		    void (*filler)(struct m0_be_tx *tx, void *payload,
-				   void *datum), void *datum)
+M0_INTERNAL void m0_be_tx_close(struct m0_be_tx *tx,
+				void (*filler)(struct m0_be_tx *tx,
+					       void *payload,
+					       void *datum),
+				void *datum)
 {
 	struct m0_be_tx_engine *eng = tx_engine(tx);
 	bool        new_group = tx == gr_tlist_head(&tx->t_group->tg_tx);
@@ -179,19 +185,19 @@ void m0_be_tx_close(struct m0_be_tx *tx,
 	tx_engine_unlock(eng);
 }
 
-void m0_be_tx_credit_init(struct m0_be_tx_credit *credit)
+M0_INTERNAL void m0_be_tx_credit_init(struct m0_be_tx_credit *credit)
 {
 	M0_SET0(credit);
 }
 
-void m0_be_tx_credit_add(struct m0_be_tx_credit *c0,
+M0_INTERNAL void m0_be_tx_credit_add(struct m0_be_tx_credit *c0,
 			 const struct m0_be_tx_credit *c1)
 {
 	c0->tc_reg_nr   += c1->tc_reg_nr;
 	c0->tc_reg_size += c1->tc_reg_size;
 }
 
-void m0_be_tx_credit_mul(struct m0_be_tx_credit *c, m0_bcount_t k)
+M0_INTERNAL void m0_be_tx_credit_mul(struct m0_be_tx_credit *c, m0_bcount_t k)
 {
 	c->tc_reg_nr   *= k
 	c->tc_reg_size *= k;
@@ -286,7 +292,7 @@ static m0_be_tx_engine *tx_engine(const struct m0_be_tx *tx)
 	return &tx->t_be.b_tx;
 }
 
-bool m0_be_tx_engine_invariant(const struct m0_be_tx_engine *engine)
+M0_INTERNAL bool m0_be_tx_engine_invariant(const struct m0_be_tx_engine *engine)
 {
 	struct m0_be_log *log  = &engine->te_log;
 	struct m0_be_tx  *prev = NULL;
@@ -313,7 +319,7 @@ bool m0_be_tx_engine_invariant(const struct m0_be_tx_engine *engine)
 		tx_engine_free_space(te) <= te->te_log.lg_size;
 }
 
-bool m0_be_tx_invariant(const struct m0_be_tx *tx)
+M0_INTERNAL bool m0_be_tx_invariant(const struct m0_be_tx *tx)
 {
 	enum m0_be_tx_state state = tx_state_get(tx);
 	return
@@ -327,6 +333,7 @@ bool m0_be_tx_invariant(const struct m0_be_tx *tx)
 }
 
 /** @} end of be group */
+
 /*
  *  Local variables:
  *  c-indentation-style: "K&R"
diff --git a/be/tx.h b/be/tx.h
index ac42b45..7fd5b95 100644
--- a/be/tx.h
+++ b/be/tx.h
@@ -118,10 +118,11 @@ struct m0_be_tx_engine {
 	m0_bcount_t      te_reserved;
 };
 
-bool m0_be_tx_engine_invariant(const struct m0_be_tx_engine *engine);
+M0_INTERNAL bool
+m0_be_tx_engine_invariant(const struct m0_be_tx_engine *engine);
 
-void m0_be_tx_engine_init(struct m0_be_tx_engine *engine);
-void m0_be_tx_engine_fini(struct m0_be_tx_engine *engine);
+M0_INTERNAL void m0_be_tx_engine_init(struct m0_be_tx_engine *engine);
+M0_INTERNAL void m0_be_tx_engine_fini(struct m0_be_tx_engine *engine);
 
 typedef void (*m0_be_tx_cb_t)(const struct m0_be_tx *tx);
 
@@ -152,47 +153,53 @@ struct m0_be_tx {
 	m0_be_tx_cb_t          t_persistent;
 	m0_be_tx_cb_t          t_discarded;
 };
-bool m0_be_tx_invariant(const struct m0_be_tx *tx);
+M0_INTERNAL bool m0_be_tx_invariant(const struct m0_be_tx *tx);
 
 struct m0_be_txgroup {
 	struct m0_tl tg_tx;
 };
 
-void m0_be_tx_init(struct m0_be_tx *tx, uint64_t tid, struct m0_be *be,
-		   m0_be_tx_cb_t persistent,
-		   m0_be_tx_cb_t discarded);
+M0_INTERNAL void m0_be_tx_init(struct m0_be_tx *tx,
+			       uint64_t tid,
+			       struct m0_be *be,
+			       m0_be_tx_cb_t persistent,
+			       m0_be_tx_cb_t discarded);
 
-void m0_be_tx_fini(struct m0_be_tx *tx);
+M0_INTERNAL void m0_be_tx_fini(struct m0_be_tx *tx);
 
-void m0_be_tx_prep(struct m0_be_tx *tx, const struct m0_be_tx_credit *credit);
+M0_INTERNAL void m0_be_tx_prep(struct m0_be_tx *tx,
+			       const struct m0_be_tx_credit *credit);
 
-void m0_be_tx_open(struct m0_be_tx *tx);
+M0_INTERNAL void m0_be_tx_open(struct m0_be_tx *tx);
 
-void m0_be_tx_capture(struct m0_be_tx *tx, const struct m0_be_reg *reg);
+M0_INTERNAL void m0_be_tx_capture(struct m0_be_tx *tx,
+				  const struct m0_be_reg *reg);
 
 /** XXX */
-void m0_be_tx_close(struct m0_be_tx *tx,
-		    void (*filler)(struct m0_be_tx *tx, void *payload,
-				   void *datum), void *datum);
+M0_INTERNAL void m0_be_tx_close(struct m0_be_tx *tx,
+				void (*filler)(struct m0_be_tx *tx,
+					       void *payload,
+					       void *datum),
+				void *datum);
 
-int m0_be_tx_timedwait(struct m0_be_tx *tx, m0_time_t timeout);
+M0_INTERNAL int m0_be_tx_timedwait(struct m0_be_tx *tx, m0_time_t timeout);
 
 /** Forces the transaction to storage. */
-void m0_be_tx_force(struct m0_be_tx *tx);
+M0_INTERNAL void m0_be_tx_force(struct m0_be_tx *tx);
 
 /**
  * Notifies backend that the transaction is no longer needed for recovery.
  */
-void m0_be_tx_stable(struct m0_be_tx *tx);
+M0_INTERNAL void m0_be_tx_stable(struct m0_be_tx *tx);
 
-void m0_be_tx_credit_init(struct m0_be_tx_credit *credit);
+M0_INTERNAL void m0_be_tx_credit_init(struct m0_be_tx_credit *credit);
 
 /** c0 += c1 */
-void m0_be_tx_credit_add(struct m0_be_tx_credit *c0,
-			 const struct m0_be_tx_credit *c1);
+M0_INTERNAL void m0_be_tx_credit_add(struct m0_be_tx_credit *c0,
+				     const struct m0_be_tx_credit *c1);
 
 /** c *= k */
-void m0_be_tx_credit_mul(struct m0_be_tx_credit *c, m0_bcount_t k);
+M0_INTERNAL void m0_be_tx_credit_mul(struct m0_be_tx_credit *c, m0_bcount_t k);
 
 /** @} end of be group */
 #endif /* __MERO_BE_TX_H__ */
-- 
1.8.3.2


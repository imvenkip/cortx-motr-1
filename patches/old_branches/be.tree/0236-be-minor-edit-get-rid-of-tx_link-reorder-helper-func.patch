From 45946587c41d78157315b922db7d3d063516937e Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Wed, 26 Jun 2013 16:53:25 +0300
Subject: [PATCH 236/290] be: [minor edit] get rid of tx_link(); reorder helper
 functions

---
 be/tx.c | 81 ++++++++++++++++++++++++++++-------------------------------------
 1 file changed, 35 insertions(+), 46 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index 4bdf818..16a2208 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -140,7 +140,6 @@ static struct m0_be_tx_engine *tx_engine(const struct m0_be_tx *tx);
 
 static void        tx_open_tail        (struct m0_be_tx *tx);
 static void        tx_fail             (struct m0_be_tx *tx, int err);
-static void        tx_link             (struct m0_be_tx *tx);
 static m0_bcount_t tx_engine_free_space(const struct m0_be_tx_engine *eng);
 static void        tx_engine_got_space (struct m0_be_tx_engine *eng);
 static void        tx_engine_got_closed(struct m0_be_tx_engine *eng,
@@ -441,12 +440,7 @@ M0_INTERNAL void m0_be_tx_close(struct m0_be_tx *tx)
 
 	m0_be_reg_area_used(&tx->t_reg_area, &t_used);
 	prepared = tx_prepared_log_size(tx);
-	/*
-	 * [1] XXX TODO: Ask Maxim on t_used usage: why don't we use
-	 * tx->t_used value as we used to use. (Ask myself to stop abusing
-	 * word "use".)  --vvv
-	 */
-	used = tx_log_size(tx, &t_used, tx->t_leader);
+	used     = tx_log_size(tx, &t_used, tx->t_leader);
 
 	M0_ASSERT(used <= prepared);
 	M0_ASSERT(eng->te_reserved + used >= prepared);
@@ -465,6 +459,15 @@ M0_INTERNAL void m0_be_tx_close(struct m0_be_tx *tx)
 	tx_engine_unlock(eng);
 }
 
+M0_INTERNAL int
+m0_be_tx_timedwait(struct m0_be_tx *tx, int state, m0_time_t timeout)
+{
+	M0_PRE(tx_is_locked(tx));
+
+	m0_sm_timedwait(&tx->t_sm, state, timeout);
+	return tx->t_sm.sm_rc;
+}
+
 static m0_bcount_t tx_engine_free_space(const struct m0_be_tx_engine *te)
 {
 	M0_PRE(m0_be__tx_engine_invariant(te));
@@ -488,8 +491,8 @@ static void tx_engine_got_space(struct m0_be_tx_engine *eng)
 	M0_POST(m0_be__tx_engine_invariant(eng));
 }
 
-static void tx_engine_got_closed(struct m0_be_tx_engine *eng,
-				 struct m0_be_tx *tx)
+static void
+tx_engine_got_closed(struct m0_be_tx_engine *eng, struct m0_be_tx *tx)
 {
 	struct m0_be_tx_group *gr = &eng->te_group;
 #if 0 /* Nikita's code */
@@ -511,17 +514,6 @@ static void tx_engine_got_closed(struct m0_be_tx_engine *eng,
 #endif
 }
 
-M0_INTERNAL void tx_state_set(struct m0_be_tx *tx, enum m0_be_tx_state state)
-{
-	M0_PRE(m0_be__tx_invariant(tx));
-	M0_PRE(tx_is_locked(tx));
-
-	m0_sm_state_set(&tx->t_sm, state);
-
-	tx_link(tx);
-	M0_POST(m0_be__tx_invariant(tx));
-}
-
 static void tx_open_tail(struct m0_be_tx *tx)
 {
 	m0_bcount_t log_size = tx_prepared_log_size(tx);
@@ -533,6 +525,19 @@ static void tx_open_tail(struct m0_be_tx *tx)
 	tx_state_set(tx, M0_BTS_ACTIVE);
 }
 
+M0_INTERNAL void tx_state_set(struct m0_be_tx *tx, enum m0_be_tx_state state)
+{
+	M0_PRE(m0_be__tx_invariant(tx));
+	M0_PRE(tx_is_locked(tx));
+
+	m0_sm_state_set(&tx->t_sm, state);
+
+	/* Link the transaction. */
+	tx_tlist_move(&tx_engine(tx)->te_txs[state], tx);
+
+	M0_POST(m0_be__tx_invariant(tx));
+}
+
 static void tx_fail(struct m0_be_tx *tx, int err)
 {
 	M0_PRE(m0_be__tx_invariant(tx));
@@ -548,16 +553,19 @@ static enum m0_be_tx_state tx_state(const struct m0_be_tx *tx)
 	return tx->t_sm.sm_state;
 }
 
-static void tx_link(struct m0_be_tx *tx)
+static struct m0_be_tx_engine *tx_engine(const struct m0_be_tx *tx)
 {
-	M0_PRE(m0_be__tx_invariant(tx));
-	tx_tlist_move(&tx_engine(tx)->te_txs[tx->t_sm.sm_state], tx);
-	M0_POST(m0_be__tx_invariant(tx));
+	return &tx->t_be->b_tx;
 }
 
-static struct m0_be_tx_engine *tx_engine(const struct m0_be_tx *tx)
+static void tx_engine_lock(struct m0_be_tx_engine *eng)
 {
-	return &tx->t_be->b_tx;
+	m0_rwlock_write_lock(&eng->te_lock);
+}
+
+static void tx_engine_unlock(struct m0_be_tx_engine *eng)
+{
+	m0_rwlock_write_unlock(&eng->te_lock);
 }
 
 M0_INTERNAL bool
@@ -600,18 +608,8 @@ M0_INTERNAL bool m0_be__tx_invariant(const struct m0_be_tx *tx)
 		);
 }
 
-static void tx_engine_lock(struct m0_be_tx_engine *eng)
-{
-	m0_rwlock_write_lock(&eng->te_lock);
-}
-
-static void tx_engine_unlock(struct m0_be_tx_engine *eng)
-{
-	m0_rwlock_write_unlock(&eng->te_lock);
-}
-
 /**
- * Returns true iff the locality, given transaction is associated with,
+ * Returns true iff the locality, which given transaction is associated with,
  * is locked.
  */
 static bool tx_is_locked(const struct m0_be_tx *tx)
@@ -619,15 +617,6 @@ static bool tx_is_locked(const struct m0_be_tx *tx)
 	return m0_mutex_is_locked(&tx->t_sm.sm_grp->s_lock);
 }
 
-M0_INTERNAL int
-m0_be_tx_timedwait(struct m0_be_tx *tx, int state, m0_time_t timeout)
-{
-        m0_sm_group_lock(tx->t_sm.sm_grp);
-        m0_sm_timedwait(&tx->t_sm, state, timeout);
-        m0_sm_group_unlock(tx->t_sm.sm_grp);
-        return tx->t_sm.sm_rc;
-}
-
 /** @} struct of be group */
 #undef M0_TRACE_SUBSYSTEM
 
-- 
1.8.3.2


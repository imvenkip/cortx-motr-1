From 7eeabc4b59409c6cc2d995f62470d60268e0aaa1 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Fri, 31 May 2013 18:43:46 +0300
Subject: [PATCH 083/290] be: Commented btree-cursor interfaces. Introduced
 m0_be_btree_cursor_kv_get().

---
 be/btree.h | 48 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 48 insertions(+)

diff --git a/be/btree.h b/be/btree.h
index e1604f1..8dba1b5 100644
--- a/be/btree.h
+++ b/be/btree.h
@@ -192,18 +192,66 @@ struct m0_be_btree_cursor {
 	struct m0_be_op     bc_op;
 };
 
+/**
+ * Initialises cursor and its internal structures.
+ *
+ * Note: interface is synchronous.
+ */
 M0_INTERNAL void m0_be_btree_cursor_init(struct m0_be_btree_cursor *cursor,
 					 struct m0_be_btree *tree);
 
+/**
+ * Finalizes cursor.
+ *
+ * Note: interface is synchronous.
+ */
 M0_INTERNAL void m0_be_btree_cursor_fini(struct m0_be_btree_cursor *cursor);
 
+/**
+ * Fills cursor internal buffers with current key and value obtained from the
+ * tree. Operation may cause IO dependigly on cursor::bc_op state
+ *
+ * Note: interface is asynchronous and waits on cursor::bc_op::bo_sm to become
+ * to transit into M0_BOS_SUCCESS.
+ */
 M0_INTERNAL void m0_be_btree_cursor_get(struct m0_be_btree_cursor *cursor,
 					const struct m0_buf *key);
+
+/**
+ * Fills cursor internal buffers with next key and value obtained from the
+ * tree. Operation may cause IO dependigly on cursor::bc_op state
+ *
+ * Note: interface is asynchronous and waits on cursor::bc_op::bo_sm to become
+ * to transit into M0_BOS_SUCCESS.
+ */
 M0_INTERNAL void m0_be_btree_cursor_next(struct m0_be_btree_cursor *cursor);
+
+/**
+ * Fills cursor internal buffers with prev key and value obtained from the
+ * tree. Operation may cause IO dependigly on cursor::bc_op state
+ *
+ * Note: interface is asynchronous and waits on cursor::bc_op::bo_sm to become
+ * to transit into M0_BOS_SUCCESS.
+ */
 M0_INTERNAL void m0_be_btree_cursor_prev(struct m0_be_btree_cursor *cursor);
 
+/**
+ * Unpins pages associated with cursor, releases cursor values.
+ *
+ * Note: interface is synchronous.
+ */
 M0_INTERNAL void m0_be_btree_cursor_put(struct m0_be_btree_cursor *cursor);
 
+/**
+ * Sets key and value buffers to point on internal structures of cursor
+ * representing current key and value cursor is placed on.
+ *
+ * Note: interface is synchronous.
+ */
+M0_INTERNAL void m0_be_btree_cursor_kv_get(struct m0_be_btree_cursor *cursor,
+					   struct m0_buf *key,
+					   struct m0_buf *value);
+
 /** @} end of be group */
 #endif /* __MERO_BE_BTREE_H__ */
 
-- 
1.8.3.2


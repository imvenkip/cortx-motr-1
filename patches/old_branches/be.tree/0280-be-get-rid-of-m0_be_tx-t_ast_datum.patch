From a9b2abfc38b8632a5e60a121525dce403d8af38f Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Thu, 4 Jul 2013 23:54:57 +0300
Subject: [PATCH 280/290] be: get rid of m0_be_tx::t_ast_datum

+ Do not M0_SET0(&tx->t_ast) in m0_be_tx_init(). m0_alloc() guarantees
  that an AST will be zeroed.  Zero local m0_be_tx variable in tx_test()
  though.

Reported-by: Nikita Danilov
---
 be/tx.c    | 22 ++++++++++------------
 be/tx.h    |  1 -
 be/ut/tx.c |  2 +-
 3 files changed, 11 insertions(+), 14 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index 66dc84e..d7204b9 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -42,6 +42,7 @@
 
 static int placed_st_in(struct m0_sm *mach);
 static int   done_st_in(struct m0_sm *mach);
+static void _tx_state_set(struct m0_sm_group *grp, struct m0_sm_ast *ast);
 
 M0_TL_DESCR_DEFINE(tx, "transactions", M0_INTERNAL, struct m0_be_tx,
 		   t_linkage, t_magic,
@@ -138,10 +139,10 @@ M0_INTERNAL void m0_be_tx_init(struct m0_be_tx    *tx,
 			       void               *datum)
 {
 	m0_sm_init(&tx->t_sm, &tx_sm_conf, M0_BTS_PREPARE, sm_group);
-	M0_SET0(&tx->t_ast); /* XXX Is this really needed? */
+	tx->t_ast.sa_cb = _tx_state_set;
+
 	tx->t_id = tid;
 	tx->t_be = be;
-
 	tx_tlink_init_at(tx, &tx_engine(tx)->te_txs[M0_BTS_PREPARE]);
 	gr_tlink_init(tx);
 
@@ -538,7 +539,8 @@ static void tx_fail(struct m0_be_tx *tx, int err)
 	M0_POST(m0_be__tx_invariant(tx));
 }
 
-static void _txs_set_ready(struct m0_be_tx *tx)
+/* XXX RENAMEME */
+static void _txs_set_ready(const struct m0_be_tx *tx)
 {
 	struct m0_be_tx_group *gr = tx->t_group;
 
@@ -554,8 +556,8 @@ static void _txs_set_ready(struct m0_be_tx *tx)
 static void
 _tx_state_set(struct m0_sm_group *grp M0_UNUSED, struct m0_sm_ast *ast)
 {
-	enum m0_be_tx_state  state = *(enum m0_be_tx_state *)ast->sa_datum;
-	struct m0_be_tx     *tx = container_of(ast, struct m0_be_tx, t_ast);
+	struct m0_be_tx    *tx = container_of(ast, struct m0_be_tx, t_ast);
+	enum m0_be_tx_state state = (enum m0_be_tx_state)ast->sa_datum;
 
 	M0_ENTRY("state=%u", state);
 	M0_PRE(IS_IN_ARRAY(state, tx_states));
@@ -590,16 +592,12 @@ m0_be__tx_state_post(struct m0_be_tx *tx, enum m0_be_tx_state next_state)
 	 * implementation should post an AST to tx's sm_group.
 	 */
 	M0_ENTRY("next_state=%u", next_state);
-#if 0 /*XXX*/
-	M0_PRE(M0_IN(next_state, (M0_BTS_CLOSED, M0_BTS_PLACED, M0_BTS_DONE)));
-#else
 	M0_PRE(next_state == M0_BTS_GROUPED);
-#endif
+	M0_PRE(tx->t_ast.sa_cb == _tx_state_set);
 
-	tx->t_ast.sa_cb    = _tx_state_set;
-	tx->t_ast.sa_datum = &tx->t_ast_datum;
-	tx->t_ast_datum    = next_state;
+	tx->t_ast.sa_datum = (void *)next_state;
 	m0_sm_ast_post(tx->t_sm.sm_grp, &tx->t_ast);
+
 	M0_LEAVE();
 }
 
diff --git a/be/tx.h b/be/tx.h
index 963e85c..022b229 100644
--- a/be/tx.h
+++ b/be/tx.h
@@ -326,7 +326,6 @@ struct m0_be_tx {
 	uint64_t               t_magic;
 	struct m0_sm           t_sm;
 	struct m0_sm_ast       t_ast;
-	int                    t_ast_datum; /* XXX DELETEME */
 
 	/** Transaction identifier, assigned by the user. */
 	uint64_t               t_id;
diff --git a/be/ut/tx.c b/be/ut/tx.c
index d0670fe..9dcbd46 100644
--- a/be/ut/tx.c
+++ b/be/ut/tx.c
@@ -33,7 +33,7 @@ static uint64_t           g_tid = 1;
 static void tx_test(struct m0_be *be)
 {
 	struct m0_be_op         op;
-	struct m0_be_tx         tx;
+	struct m0_be_tx         tx = {};
 	struct m0_be_tx_credit  cred;
 	struct m0_be_allocator *alloc = be_ut_tx_h.buh_a;
 	struct m0_uint128      *p;
-- 
1.8.3.2


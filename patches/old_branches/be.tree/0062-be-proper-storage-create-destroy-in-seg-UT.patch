From c5562f3c0b72cc980ba4f8d77d86ffb58e5e911b Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Thu, 30 May 2013 01:22:23 +0300
Subject: [PATCH 062/290] be: proper storage create/destroy in seg UT

---
 be/seg.c    |  9 ++++++--
 be/ut/seg.c | 72 +++++++++++++++++++++++++++++++++++++++++++++++++------------
 2 files changed, 65 insertions(+), 16 deletions(-)

diff --git a/be/seg.c b/be/seg.c
index 5ce258f..168f017 100644
--- a/be/seg.c
+++ b/be/seg.c
@@ -98,12 +98,17 @@ static int seg_header_write(struct m0_be_seg *seg, m0_bcount_t size)
 
 M0_INTERNAL int m0_be_seg_create(struct m0_be_seg *seg, m0_bcount_t size)
 {
+	int rc;
+
 	M0_PRE(seg->bs_state == M0_BSS_INIT);
 	M0_PRE(seg->bs_stob->so_domain != NULL);
 	M0_PRE(seg->bs_stob->so_state != CSS_EXISTS);
 
-	return m0_stob_create(seg->bs_stob, NULL) ?:
-		seg_header_write(seg, size);
+	rc = m0_stob_find(seg->bs_stob->so_domain,
+			  &seg->bs_stob->so_id, &seg->bs_stob) ?:
+	     m0_stob_create(seg->bs_stob, NULL) ?: seg_header_write(seg, size);
+
+	return rc;
 }
 
 M0_INTERNAL int m0_be_seg_destroy(struct m0_be_seg *seg)
diff --git a/be/ut/seg.c b/be/ut/seg.c
index 118bfc7..79c37dd 100644
--- a/be/ut/seg.c
+++ b/be/ut/seg.c
@@ -24,28 +24,67 @@
 #include "stob/linux.h"
 #include "ut/ut.h"
 
+#include <stdlib.h>	/* system */
+#include <sys/stat.h>	/* mkdir */
+#include <sys/types.h>	/* mkdir */
+
 enum {
 	BE_SEG_UT_DOM_ID   = 42,
 	BE_SEG_UT_STOB_ID  = 42,
 	BE_SEG_UT_SEG_SIZE = 0x10000
 };
 
-static struct m0_be          be;
-static struct m0_dtx         dtx;
-static struct m0_stob_domain dom;
-static struct m0_stob       *stob;
-static struct m0_stob_id     id = {
-	.si_bits = M0_UINT128(0, BE_SEG_UT_STOB_ID)
+const char *seg_ut_storage_dir = "./__seg_ut_stob";
+
+static struct m0_stob_domain *dom;
+static struct m0_stob_id id = {
+	.si_bits = M0_UINT128(0, BE_SEG_UT_STOB_ID),
+};
+
+static struct m0_dtx dtx;
+static struct m0_stob *stob;
+static struct m0_stob stob_;
+static struct m0_be be;
+char buf[0x1000];
+
+char *printf_dir(const char *str) {
+	sprintf(buf, str, seg_ut_storage_dir);
+	return buf;
 };
 
-static void seg_init_helper(struct m0_be_seg *seg)
+static void seg_storage_fini(void)
 {
 	int rc;
 
-	m0_stob_domain_init(&dom, &m0_linux_stob_type, BE_SEG_UT_DOM_ID);
-	m0_dtx_init(&dtx);
-	rc = m0_stob_create_helper(&dom, &dtx, &id, &stob);
+	rc = system(printf_dir("rm -rf %s"));
 	M0_UT_ASSERT(rc == 0);
+}
+
+static void seg_storage_init(void)
+{
+	int rc;
+
+	seg_storage_fini();
+	rc = mkdir(seg_ut_storage_dir, 0700);
+	M0_UT_ASSERT(rc == 0);
+	rc = mkdir(printf_dir("%s/o"), 0700);
+	M0_UT_ASSERT(rc == 0);
+}
+
+static void seg_init_helper(struct m0_be_seg *seg, bool create_stob)
+{
+	int rc;
+
+	rc = m0_linux_stob_domain_locate(seg_ut_storage_dir, &dom);
+	M0_UT_ASSERT(rc == 0);
+	m0_dtx_init(&dtx);
+	if (!create_stob) {
+		m0_stob_init(&stob_, &id, dom);
+		stob = &stob_;
+	} else {
+		rc = m0_stob_create_helper(dom, &dtx, &id, &stob);
+		M0_UT_ASSERT(rc == 0);
+	}
 	m0_be_seg_init(seg, stob, &be);
 }
 
@@ -54,15 +93,16 @@ static void seg_fini_helper(struct m0_be_seg *seg)
 	m0_be_seg_fini(seg);
 	m0_stob_put(stob);
 	m0_dtx_fini(&dtx);
-	m0_stob_domain_fini(&dom);
 }
 
 static void test_init_fini(void)
 {
 	struct m0_be_seg seg;
 
-	seg_init_helper(&seg);
+	seg_storage_init();
+	seg_init_helper(&seg, true);
 	seg_fini_helper(&seg);
+	seg_storage_fini();
 }
 
 static void test_create_destroy(void)
@@ -70,12 +110,14 @@ static void test_create_destroy(void)
 	struct m0_be_seg seg;
 	int              rc;
 
-	seg_init_helper(&seg);
+	seg_storage_init();
+	seg_init_helper(&seg, false);
 	rc = m0_be_seg_create(&seg, BE_SEG_UT_SEG_SIZE);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_be_seg_destroy(&seg);
 	M0_UT_ASSERT(rc == 0);
 	seg_fini_helper(&seg);
+	seg_storage_fini();
 }
 
 static void test_open_close(void)
@@ -83,7 +125,8 @@ static void test_open_close(void)
 	struct m0_be_seg seg;
 	int              rc;
 
-	seg_init_helper(&seg);
+	seg_storage_init();
+	seg_init_helper(&seg, false);
 	rc = m0_be_seg_create(&seg, BE_SEG_UT_SEG_SIZE);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_be_seg_open(&seg);
@@ -92,6 +135,7 @@ static void test_open_close(void)
 	rc = m0_be_seg_destroy(&seg);
 	M0_UT_ASSERT(rc == 0);
 	seg_fini_helper(&seg);
+	seg_storage_fini();
 }
 
 const struct m0_test_suite be_seg_ut = {
-- 
1.8.3.2


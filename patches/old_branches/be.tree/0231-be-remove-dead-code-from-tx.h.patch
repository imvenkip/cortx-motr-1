From 748b950153c66d4cca7323f91a688e53b98e9472 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Wed, 26 Jun 2013 12:23:05 +0300
Subject: [PATCH 231/290] be: remove dead code from tx.h

The definitions were `#if 0'-ed by Maxim. They are nothing but noise now.
Remove.  (Maxim was going to re-use documentation from those ifzeroed lines.
Still, there is no point in keeping dead definitions, because reusable lines
can be restored with git commands.)

+ Add predicates to m0_be_tx_capture(), m0_be_tx_uncapture().
---
 be/tx.c | 74 ++++++++++++++++++++++++++++++++++++-----------------------------
 be/tx.h | 68 -----------------------------------------------------------
 2 files changed, 41 insertions(+), 101 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index 3977af6..3501c2f 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -253,37 +253,7 @@ M0_INTERNAL void m0_be_tx_open(struct m0_be_tx *tx)
 	M0_POST(m0_be__tx_invariant(tx));
 }
 
-M0_INTERNAL void m0_be_tx_capture(struct m0_be_tx *tx,
-				  const struct m0_be_reg *reg)
-{
-	struct m0_be_reg_d new = {
-		.rd_tx	= tx,
-		.rd_buf = NULL,
-		.rd_reg = *reg,
-	};
-
-	M0_LOG(M0_DEBUG, "capture [%p, %p)", new.rd_reg.br_addr,
-	       (char *) new.rd_reg.br_addr + new.rd_reg.br_size);
-
-	m0_be_reg_area_capture(&tx->t_reg_area, &new);
-}
-
-M0_INTERNAL void m0_be_tx_uncapture(struct m0_be_tx *tx,
-				    const struct m0_be_reg *reg)
-{
-	struct m0_be_reg_d rd = {
-		.rd_tx	= tx,
-		.rd_buf = NULL,
-		.rd_reg = *reg,
-	};
-
-	M0_LOG(M0_DEBUG, "uncapture [%p, %p)", rd.rd_reg.br_addr,
-	       (char *) rd.rd_reg.br_addr + rd.rd_reg.br_size);
-
-	m0_be_reg_area_uncapture(&tx->t_reg_area, &rd);
-}
-
-#if 0
+#if 0 /* XXX Nikita's code */
 M0_INTERNAL void
 m0_be_tx_capture(struct m0_be_tx *tx, const struct m0_be_reg *reg)
 {
@@ -411,7 +381,45 @@ m0_be_tx_capture(struct m0_be_tx *tx, const struct m0_be_reg *reg)
 	}
 	M0_POST(m0_be__tx_invariant(tx));
 }
-#endif
+#else
+M0_INTERNAL void
+m0_be_tx_capture(struct m0_be_tx *tx, const struct m0_be_reg *reg)
+{
+	M0_PRE(m0_be__tx_invariant(tx));
+	M0_PRE(tx_state(tx) == M0_BTS_ACTIVE);
+	M0_PRE(tx_is_locked(tx));
+
+	struct m0_be_reg_d new = {
+		.rd_tx	= tx,
+		.rd_buf = NULL,
+		.rd_reg = *reg,
+	};
+
+	M0_LOG(M0_DEBUG, "capture [%p, %p)", new.rd_reg.br_addr,
+	       (char *) new.rd_reg.br_addr + new.rd_reg.br_size);
+
+	m0_be_reg_area_capture(&tx->t_reg_area, &new);
+}
+
+M0_INTERNAL void
+m0_be_tx_uncapture(struct m0_be_tx *tx, const struct m0_be_reg *reg)
+{
+	M0_PRE(m0_be__tx_invariant(tx));
+	M0_PRE(tx_state(tx) == M0_BTS_ACTIVE);
+	M0_PRE(tx_is_locked(tx));
+
+	struct m0_be_reg_d rd = {
+		.rd_tx	= tx,
+		.rd_buf = NULL,
+		.rd_reg = *reg,
+	};
+
+	M0_LOG(M0_DEBUG, "uncapture [%p, %p)", rd.rd_reg.br_addr,
+	       (char *) rd.rd_reg.br_addr + rd.rd_reg.br_size);
+
+	m0_be_reg_area_uncapture(&tx->t_reg_area, &rd);
+}
+#endif /* XXX */
 
 M0_INTERNAL void m0_be_tx_close(struct m0_be_tx *tx)
 {
@@ -583,7 +591,7 @@ M0_INTERNAL bool m0_be__tx_invariant(const struct m0_be_tx *tx)
 		state < M0_BTS_NR &&
 		tx_tlist_contains(&tx_engine(tx)->te_txs[state], tx) &&
 		(tx->t_lsn == 0) == (state < M0_BTS_GROUPED) &&
-		/* m0_be_reg_area_invariant(&tx->t_reg_area) && */
+		m0_be_reg_area__invariant(&tx->t_reg_area) &&
 		(tx->t_group != NULL) == (state >= M0_BTS_GROUPED) &&
 		(tx->t_leader == (tx->t_group != NULL &&
 				  tx == gr_tlist_head(&tx->t_group->tg_tx))) &&
diff --git a/be/tx.h b/be/tx.h
index 7f724b5..88a3284 100644
--- a/be/tx.h
+++ b/be/tx.h
@@ -362,54 +362,6 @@ struct m0_be_tx {
 	 */
 	struct m0_be_tx_credit t_prepared;
 	struct m0_be_reg_area  t_reg_area;
-#if 0
-	/**
-	 * Updates actually captured.
-	 */
-	struct m0_be_tx_credit t_captured;
-	/**
-	 * Updates actually stored in the transaction buffers
-	 * (m0_be_tx::t_reg_d_area and m0_be_tx::t_reg_area).
-	 *
-	 * This can be less that t_captured, when newly captured region overlaps
-	 * with previously captured one. In this case, old region is discarded
-	 * or partially overwritten.
-	 */
-	struct m0_be_tx_credit t_used;
-	/**
-	 * This records the positions in transaction buffers, that should be
-	 * used for the next captured region.
-	 *
-	 * ->t_pos.tc_reg_nr is the index of the first free element in
-	 * ->t_reg_d_area[]
-	 *
-	 * ->t_pos.tc_reg_size is the index of the first free element in
-	 * ->t_reg_area[].
-	 *
-	 * t_pos can be greater than t_used when a previously captured region is
-	 * completely overwritten by a new one. In this case old region is
-	 * discarded, but the space it uses in the internal buffers cannot be
-	 * re-used because it can be in the middle.
-	 */
-	struct m0_be_tx_credit t_pos;
-	/**
-	 * Regions map, allocated in m0_be_tx_open(). It has
-	 * ->t_prepared.tc_reg_nr elements and is filled with information about
-	 * the regions captured by the transaction.
-	 */
-	struct m0_be_regmap    t_reg_map;
-	/**
-	 * Internal buffer, allocated in m0_be_tx_open(). It has
-	 * ->t_prepared.tc_reg_size elements and is filled with contents of the
-	 * regions captured by the transaction.
-	 */
-	void                  *t_reg_area;
-	m0_bcount_t	       t_reg_area_used;
-	/**
-	 * t_reg_map and t_reg_are are allocated.
-	 */
-	bool		       t_reg_allocated;
-#endif
 	/**
 	 * The group the transaction is part of. This is non-NULL iff the
 	 * transaction is in GROUPED or later state.
@@ -454,26 +406,6 @@ struct m0_be_tx {
 	 * additional information to the call-backs.
 	 */
 	void                  *t_datum;
-#if 0
-/** XXX CAPTURE_REMOVE */
-	/**
-	 * Tree of disjoint captured extents.
-	 *
-	 * This tree contains region descriptors (m0_be_reg_d), of regions
-	 * captured by the transaction, ordered by the starting address.
-	 *
-	 * The tree is used to detect when captured regions overlap and to store
-	 * only the newest data.
-	 *
-	 * This is used as an optimisation to reduce the amount of memory
-	 * consumed in the common case of capturing the same memory again and
-	 * also to simplify in-place IO (stob-io doesn't support writing
-	 * overlapping extents in the same IO operation).
-	 *
-	 * The tree is maintained by glibc tree functions from <search.h>.
-	 */
-	void                  *t_root;
-#endif
 };
 
 #define M0_BE_TX_CAPTURE_PTR(seg, tx, ptr)				\
-- 
1.8.3.2


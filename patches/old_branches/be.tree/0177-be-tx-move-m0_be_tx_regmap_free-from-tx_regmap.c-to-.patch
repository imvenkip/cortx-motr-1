From ed523743b50cb2dc85e37b14d8655f07202a6744 Mon Sep 17 00:00:00 2001
From: Alexander Gattin <alexander_gattin@xyratex.com>
Date: Wed, 19 Jun 2013 18:41:34 +0300
Subject: [PATCH 177/290] be/tx: move m0_be_tx_regmap_free() from tx_regmap.c
 to tx.c

---
 be/tx.c        | 20 ++++++++++++++++++++
 be/tx.h        |  1 +
 be/tx_fom.c    |  3 +--
 be/tx_regmap.c | 21 ---------------------
 be/tx_regmap.h |  1 -
 5 files changed, 22 insertions(+), 24 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index 9537d9c..72eec7d 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -255,6 +255,26 @@ M0_INTERNAL void m0_be_tx_open(struct m0_be_tx *tx)
 	M0_POST(m0_be__tx_invariant(tx));
 }
 
+/* Do nothing in tx_reg_free, free whole reg_area and reg_d_area in
+ * m0_be_tx_free() after t_root tree is detroyed. */
+static void tx_reg_free(void *nodep)
+{
+}
+
+/* Free reg_area, reg_d_area and regions' tree (t_root). */
+M0_INTERNAL void m0_be_tx_free(struct m0_be_tx *tx)
+{
+	M0_PRE(m0_be__tx_invariant(tx));
+	M0_PRE(tx_state(tx) >= M0_BTS_PLACED);
+
+	tdestroy(tx->t_root, &tx_reg_free);
+	tx->t_root = NULL;
+	m0_free(tx->t_reg_area);
+	tx->t_reg_area = NULL;
+	m0_free(tx->t_reg_d_area);
+	tx->t_reg_d_area = NULL;
+}
+
 M0_INTERNAL void
 m0_be_tx_capture(struct m0_be_tx *tx, const struct m0_be_reg *reg)
 {
diff --git a/be/tx.h b/be/tx.h
index 2beba2e..5005668 100644
--- a/be/tx.h
+++ b/be/tx.h
@@ -491,6 +491,7 @@ M0_INTERNAL void m0_be_tx_prep(struct m0_be_tx *tx,
 			       const struct m0_be_tx_credit *credit);
 
 M0_INTERNAL void m0_be_tx_open(struct m0_be_tx *tx);
+M0_INTERNAL void m0_be_tx_free(struct m0_be_tx *tx);
 
 M0_INTERNAL void m0_be_tx_capture(struct m0_be_tx *tx,
 				  const struct m0_be_reg *reg);
diff --git a/be/tx_fom.c b/be/tx_fom.c
index cacacb4..9bbf857 100644
--- a/be/tx_fom.c
+++ b/be/tx_fom.c
@@ -29,7 +29,6 @@
 #include "fop/fom.h"
 #include "reqh/reqh.h"
 #include "fop/fom_generic.h"
-#include "be/tx_regmap.h"     /* m0_be_tx_regmap_free */
 #include "be/tx_service.h"
 #include "be/tx.h"
 
@@ -123,7 +122,7 @@ static int tx_fom_tick(struct m0_fom *fom)
 
 	case FS_PLACED:
 		tx_state_set(tx, M0_BTS_PLACED);
-		m0_be_tx_regmap_free(tx);
+		m0_be_tx_free(tx);  /* free region buffers */
 		m0_fom_phase_set(fom, FS_STABLE);
 		gr_tlist_del(tx);
 		tx_tlist_del(tx);
diff --git a/be/tx_regmap.c b/be/tx_regmap.c
index 3903a48..ad45966 100644
--- a/be/tx_regmap.c
+++ b/be/tx_regmap.c
@@ -22,7 +22,6 @@
 #include "be/tx.h"
 #include "lib/ext.h"    /* m0_ext */
 #include "lib/errno.h"  /* EFAULT */
-#include <search.h>     /* tdestroy */
 
 /**
  * @addtogroup be
@@ -44,20 +43,6 @@ M0_INTERNAL void m0_be_regmap_fini(struct m0_be_regmap *rm)
 {
 }
 
-/* Free reg_area, reg_d_area and regions' tree (t_root). */
-M0_INTERNAL void m0_be_tx_regmap_free(struct m0_be_tx *tx)
-{
-	M0_PRE(m0_be__tx_invariant(tx));
-	M0_PRE(tx_state(tx) >= M0_BTS_PLACED);
-
-	tdestroy(tx->t_root, &tx_reg_free);
-	tx->t_root = NULL;
-	m0_free(tx->t_reg_area);
-	tx->t_reg_area = NULL;
-	m0_free(tx->t_reg_d_area);
-	tx->t_reg_d_area = NULL;
-}
-
 M0_INTERNAL void m0_be_regmap_add(struct m0_be_regmap *rm, struct m0_be_reg_d r)
 {
 }
@@ -111,12 +96,6 @@ M0_INTERNAL void tx_reg_ext(const struct m0_be_reg_d *rd, struct m0_ext *out)
 	out->e_end   = out->e_start + reg->br_size - 1;
 }
 
-/* Do nothing in tx_reg_free, free whole reg_area and reg_d_area in
- * m0_be_tx_regmap_free() after t_root tree is detroyed. */
-static void tx_reg_free(void *nodep)
-{
-}
-
 /** @} end of be group */
 
 /*
diff --git a/be/tx_regmap.h b/be/tx_regmap.h
index 4a05632..8f2505d 100644
--- a/be/tx_regmap.h
+++ b/be/tx_regmap.h
@@ -51,7 +51,6 @@ struct m0_be_regmap {
 
 M0_INTERNAL int m0_be_regmap_init(struct m0_be_regmap *rm, size_t size_max);
 M0_INTERNAL void m0_be_regmap_fini(struct m0_be_regmap *rm);
-M0_INTERNAL void m0_be_tx_regmap_free(struct m0_be_tx *tx);
 
 M0_INTERNAL void m0_be_regmap_add(struct m0_be_regmap *rm,
 				  struct m0_be_reg_d r);
-- 
1.8.3.2


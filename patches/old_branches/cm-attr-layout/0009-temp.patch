From 06f4288c9c188fe59fa9ed2bdb97d2d5d0618be2 Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Wed, 3 Apr 2013 15:57:02 +0800
Subject: [PATCH 09/18] temp.

---
 ioservice/cob_foms.c                        | 18 +++++++++-----
 ioservice/io_device.c                       |  1 +
 ioservice/io_foms.c                         | 12 +++++----
 m0t1fs/linux_kernel/file.c                  | 10 +++++---
 m0t1fs/linux_kernel/st/m0t1fs_client_inc.sh | 19 +++++++--------
 pool/pool.c                                 | 38 ++++++++++++++++++++---------
 pool/pool.h                                 |  3 ++-
 pool/ut/test_pm.c                           |  2 +-
 scripts/m0                                  | 14 +++++------
 9 files changed, 72 insertions(+), 45 deletions(-)

diff --git a/ioservice/cob_foms.c b/ioservice/cob_foms.c
index 12da71e..0738832 100644
--- a/ioservice/cob_foms.c
+++ b/ioservice/cob_foms.c
@@ -229,12 +229,15 @@ static int cc_fom_tick(struct m0_fom *fom)
 	m0_poolmach_current_version_get(poolmach, &curr);
 	verp = (struct m0_pool_version_numbers*)&fop->cc_common.c_version;
 
-	m0_poolmach_version_dump(verp);
-	m0_poolmach_version_dump(&curr);
+//	m0_poolmach_version_dump(verp);
+//	m0_poolmach_version_dump(&curr);
 	/* Check the client version and server version before any processing */
 	if (!m0_poolmach_version_equal(verp, &curr)) {
 		rc = M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH;
-		M0_LOG(M0_DEBUG, "VERSION MISMATCH!");
+		M0_LOG(M0_FATAL, "VERSION MISMATCH!");
+		
+		m0_poolmach_event_list_dump(poolmach);
+		m0_poolmach_device_state_dump(poolmach);
 		goto out;
 	}
 
@@ -443,12 +446,15 @@ static int cd_fom_tick(struct m0_fom *fom)
 	m0_poolmach_current_version_get(poolmach, &curr);
 	verp = (struct m0_pool_version_numbers*)&fop->cd_common.c_version;
 
-	m0_poolmach_version_dump(verp);
-	m0_poolmach_version_dump(&curr);
+//	m0_poolmach_version_dump(verp);
+//	m0_poolmach_version_dump(&curr);
 	/* Check the client version and server version before any processing */
 	if (!m0_poolmach_version_equal(verp, &curr)) {
 		rc = M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH;
-		M0_LOG(M0_DEBUG, "VERSION MISMATCH!");
+		M0_LOG(M0_FATAL, "VERSION MISMATCH!");
+		
+		m0_poolmach_event_list_dump(poolmach);
+		m0_poolmach_device_state_dump(poolmach);
 		goto out;
 	}
 
diff --git a/ioservice/io_device.c b/ioservice/io_device.c
index 0a8e41f..3639428 100644
--- a/ioservice/io_device.c
+++ b/ioservice/io_device.c
@@ -295,6 +295,7 @@ M0_INTERNAL struct m0_poolmach *m0_ios_poolmach_get(struct m0_reqh *reqh)
 	M0_PRE(!m0_reqh_lockers_is_empty(reqh, poolmach_key));
 
 	pm = m0_reqh_lockers_get(reqh, poolmach_key);
+	M0_LOG(M0_FATAL, "pool mach get for reqh=%p, key=%d, res=%p", reqh, poolmach_key, pm);
 	M0_POST(pm != NULL);
 	return pm;
 }
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index d2daa1b..05d5b22 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -1589,8 +1589,8 @@ static int io_finish(struct m0_fom *fom)
 
         m0_stob_put(fom_obj->fcrw_stob);
 
-        M0_ASSERT(ergo(rc == 0,
-		       fom_obj->fcrw_req_count == fom_obj->fcrw_count));
+//        M0_ASSERT(ergo(rc == 0,
+//		       fom_obj->fcrw_req_count == fom_obj->fcrw_count));
 
 	rc = fom_obj->fcrw_rc ?: rc;
         if (rc != 0) {
@@ -1641,15 +1641,17 @@ static int m0_io_fom_cob_rw_tick(struct m0_fom *fom)
 	rwfop = io_rw_get(fom->fo_fop);
 	verp = (struct m0_pool_version_numbers*)(&rwfop->crw_version);
 
-	m0_poolmach_version_dump(verp);
-	m0_poolmach_version_dump(&curr);
 	/* Check the client version and server version before any processing */
 	if (!m0_poolmach_version_equal(verp, &curr)) {
 		rc = M0_FSO_AGAIN;
 		m0_fom_phase_move(fom,
 				  M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH,
 				  M0_FOPH_FAILURE);
-		M0_LOG(M0_DEBUG, "VERSION MISMATCH!");
+		M0_LOG(M0_FATAL, "VERSION MISMATCH! poolmach = %p", poolmach);
+		m0_poolmach_version_dump(verp);
+		m0_poolmach_version_dump(&curr);
+		m0_poolmach_event_list_dump(poolmach);
+		m0_poolmach_device_state_dump(poolmach);
 	} else {
 
 		st = m0_is_read_fop(fom->fo_fop) ?
diff --git a/m0t1fs/linux_kernel/file.c b/m0t1fs/linux_kernel/file.c
index bfd182d..46a5a35 100644
--- a/m0t1fs/linux_kernel/file.c
+++ b/m0t1fs/linux_kernel/file.c
@@ -2890,9 +2890,12 @@ static int ioreq_dgmode_read(struct io_request *req, bool rmw)
 	 * Ergo, returning -EAGAIN from here which will create new
 	 * io_request and will try to do IO once again.
 	 */
-	if (st_cnt == 0)
+	if (st_cnt == 0) {
+		m0_poolmach_event_list_dump(csb->csb_pool.po_mach);
+		m0_poolmach_device_state_dump(csb->csb_pool.po_mach);
 		M0_RETERR(-EAGAIN, "Failed to trigger degraded mode since"
-			  "no target device is in required state.");
+			  " no target device is in required state.");
+	}
 
 	m0_tl_for (tioreqs, &req->ir_nwxfer.nxr_tioreqs, ti) {
 		rc = m0_poolmach_device_state(csb->csb_pool.po_mach,
@@ -4104,9 +4107,10 @@ static void failure_vector_mismatch(struct io_req_fop *irfop)
 	reply_updates = &rw_reply->rwr_fv_updates;
 	srv = (struct m0_pool_version_numbers *)reply_version;
 	cli = &csb->csb_pool.po_mach->pm_state.pst_version;
+	M0_LOG(M0_FATAL, ">>>VERSION MISMATCH!");
 	m0_poolmach_version_dump(cli);
 	m0_poolmach_version_dump(srv);
-	M0_LOG(M0_DEBUG, "VERSION MISMATCH!");
+	M0_LOG(M0_FATAL, "<<<VERSION MISMATCH!");
 	for (j = 0; j < reply_updates->fvu_count; ++j)
 		M0_LOG(M0_INFO, "reply_updates:%u:type = %u, index = %u,"
 		       "state = %u\n", j,
diff --git a/m0t1fs/linux_kernel/st/m0t1fs_client_inc.sh b/m0t1fs/linux_kernel/st/m0t1fs_client_inc.sh
index db0ee8f..54b1bf4 100644
--- a/m0t1fs/linux_kernel/st/m0t1fs_client_inc.sh
+++ b/m0t1fs/linux_kernel/st/m0t1fs_client_inc.sh
@@ -471,19 +471,19 @@ sns_repair_test()
 		unmount_and_clean &>> $MERO_TEST_LOGFILE
 		return 1
 	}
-	md5sum $MERO_M0T1FS_MOUNT_DIR/file1_to_repair
 	dd if=/dev/zero bs=20k count=500 of=$MERO_M0T1FS_MOUNT_DIR/file2_to_repair >> $MERO_TEST_LOGFILE || {
 		echo "Failed: dd failed.."
 		unmount_and_clean &>> $MERO_TEST_LOGFILE
 		return 1
 	}
-	md5sum $MERO_M0T1FS_MOUNT_DIR/file2_to_repair
 	dd if=/dev/zero bs=20k count=500 of=$MERO_M0T1FS_MOUNT_DIR/file3_to_repair >> $MERO_TEST_LOGFILE || {
 		echo "Failed: dd failed.."
 		unmount_and_clean &>> $MERO_TEST_LOGFILE
 		return 1
 	}
-	md5sum $MERO_M0T1FS_MOUNT_DIR/file3_to_repair
+	md5sum $MERO_M0T1FS_MOUNT_DIR/file1_to_repair >  $MERO_M0T1FS_TEST_DIR/md5
+	md5sum $MERO_M0T1FS_MOUNT_DIR/file2_to_repair >> $MERO_M0T1FS_TEST_DIR/md5
+	md5sum $MERO_M0T1FS_MOUNT_DIR/file3_to_repair >> $MERO_M0T1FS_TEST_DIR/md5
 	trigger="$MERO_CORE_ROOT/sns/cm/st/m0repair -O 2 -U $unit_size -F $fail_device -n 3
 			-s 10240000 -s 10240000 -s 10240000 -N $NR_DATA -K $NR_PARITY -P $POOL_WIDTH
                          -S ${lnet_nid}:${EP[0]}
@@ -495,9 +495,7 @@ sns_repair_test()
 		rc=1
 	else
 		echo "SNS Repair done."
-		md5sum $MERO_M0T1FS_MOUNT_DIR/file1_to_repair
-		md5sum $MERO_M0T1FS_MOUNT_DIR/file2_to_repair
-		md5sum $MERO_M0T1FS_MOUNT_DIR/file3_to_repair
+		md5sum -c < $MERO_M0T1FS_TEST_DIR/md5
 		rc=0
 	fi
 
@@ -509,6 +507,11 @@ sns_repair_test()
 
 m0t1fs_system_tests()
 {
+	sns_repair_test || {
+		echo "Failed: SNS repair failed.."
+		return 1
+	}
+	return
 	file_creation_test $MAX_NR_FILES || {
                 echo "Failed: File creation test failed."
 		return 1
@@ -524,10 +527,6 @@ m0t1fs_system_tests()
 		return 1
 	}
 
-	sns_repair_test || {
-		echo "Failed: SNS repair failed.."
-		return 1
-	}
 
 	m0loop_st || return 1
 
diff --git a/pool/pool.c b/pool/pool.c
index 7157c08..f8220fb 100644
--- a/pool/pool.c
+++ b/pool/pool.c
@@ -562,38 +562,52 @@ M0_INTERNAL void m0_poolmach_state_free(struct m0_poolmach *pm,
 static int lno = 0;
 
 /* Change this value to make it more verbose, e.g. to M0_ERROR */
-#define dump_level M0_DEBUG
+#define dump_level M0_FATAL
 
 M0_INTERNAL void m0_poolmach_version_dump(struct m0_pool_version_numbers *v)
 {
-	M0_LOG(dump_level, "%4d:readv = %llx writev = %llx\n", lno++,
+	M0_LOG(dump_level, "%4d:readv = %llx writev = %llx", lno,
 		(unsigned long long)v->pvn_version[PVE_READ],
 		(unsigned long long)v->pvn_version[PVE_WRITE]);
+	lno++;
 }
 
 M0_INTERNAL void m0_poolmach_event_dump(struct m0_pool_event *e)
 {
-	M0_LOG(dump_level, "%4d:pe_type  = %10s pe_index = %2x pe_state=%10s\n",
-		lno++,
+	M0_LOG(dump_level, "%4d:pe_type = %6s, pe_index = %x, pe_state=%10d",
+		lno,
 		e->pe_type == M0_POOL_DEVICE ? "device":"node",
-		e->pe_index,
-		e->pe_state == M0_PNDS_ONLINE? "ONLINE" :
-		    e->pe_state == M0_PNDS_FAILED? "FAILED" :
-			e->pe_state == M0_PNDS_OFFLINE? "OFFLINE" :
-				"RECOVERING"
-	);
+		e->pe_index, e->pe_state);
+	lno++;
 }
 
-M0_INTERNAL void m0_poolmach_event_list_dump(struct m0_tl *head)
+M0_INTERNAL void m0_poolmach_event_list_dump(struct m0_poolmach *pm)
 {
+	struct m0_tl *head = &pm->pm_state.pst_events_list;
 	struct m0_pool_event_link *scan;
 
+	M0_LOG(dump_level, ">>>>>");
+	m0_rwlock_read_lock(&pm->pm_lock);
 	m0_tl_for(poolmach_events, head, scan) {
 		m0_poolmach_event_dump(&scan->pel_event);
 		m0_poolmach_version_dump(&scan->pel_new_version);
 	} m0_tl_endfor;
-	M0_LOG(dump_level, "=====\n");
+	m0_rwlock_read_unlock(&pm->pm_lock);
+	M0_LOG(dump_level, "=====");
 }
+
+M0_INTERNAL void m0_poolmach_device_state_dump(struct m0_poolmach *pm)
+{
+	int i;
+	M0_LOG(dump_level, ">>>>>");
+	for (i = 1; i < pm->pm_state.pst_nr_devices; i++) {
+		M0_LOG(dump_level, "%04d:device[%d] state: %d",
+			lno, i, pm->pm_state.pst_devices_array[i].pd_state);
+		lno++;
+	}
+	M0_LOG(dump_level, "=====");
+}
+
 #undef dump_level
 
 #undef M0_TRACE_SUBSYSTEM
diff --git a/pool/pool.h b/pool/pool.h
index 2140bc1..3d8c06b 100644
--- a/pool/pool.h
+++ b/pool/pool.h
@@ -469,7 +469,8 @@ M0_INTERNAL int m0_poolserver_device_leave(struct m0_poolserver *srv,
 
 M0_INTERNAL void m0_poolmach_version_dump(struct m0_pool_version_numbers *v);
 M0_INTERNAL void m0_poolmach_event_dump(struct m0_pool_event *e);
-M0_INTERNAL void m0_poolmach_event_list_dump(struct m0_tl *head);
+M0_INTERNAL void m0_poolmach_event_list_dump(struct m0_poolmach *pm);
+M0_INTERNAL void m0_poolmach_device_state_dump(struct m0_poolmach *pm);
 
 /** @} end of servermachine group */
 
diff --git a/pool/ut/test_pm.c b/pool/ut/test_pm.c
index 53dff5b..9a53cc0 100644
--- a/pool/ut/test_pm.c
+++ b/pool/ut/test_pm.c
@@ -116,7 +116,7 @@ static void pm_test_transit(void)
 	M0_UT_ASSERT(!equal);
 	equal = m0_poolmach_version_equal(&v1, &v2);
 	M0_UT_ASSERT(!equal);
-	m0_poolmach_event_list_dump(&pm.pm_state.pst_events_list);
+	m0_poolmach_event_list_dump(&pm);
 	m0_poolmach_version_dump(&v0);
 	m0_poolmach_version_dump(&v1);
 	m0_poolmach_version_dump(&v2);
diff --git a/scripts/m0 b/scripts/m0
index c17c880..33e7857 100755
--- a/scripts/m0
+++ b/scripts/m0
@@ -57,17 +57,17 @@ run_kut() {
 run_st() {
     _reset
 
-    $SUDO "$SRC/net/test/st/st.sh"
+#    $SUDO "$SRC/net/test/st/st.sh"
 
     ## rpc ping
-    $SUDO "$SRC/m0t1fs/linux_kernel/st/st" insmod
-    local rc=0
-    "$SRC/rpc/it/st" || rc=$?
-    $SUDO "$SRC/m0t1fs/linux_kernel/st/st" rmmod
-    [ $rc -eq 0 ] || exit $rc
+#    $SUDO "$SRC/m0t1fs/linux_kernel/st/st" insmod
+#    local rc=0
+#    "$SRC/rpc/it/st" || rc=$?
+#    $SUDO "$SRC/m0t1fs/linux_kernel/st/st" rmmod
+#    [ $rc -eq 0 ] || exit $rc
 
     ## conf ST
-    $SUDO SANDBOX_DIR=${RUNDIR}/_m0-sandbox "$SRC/m0t1fs/linux_kernel/st/st"
+#    $SUDO SANDBOX_DIR=${RUNDIR}/_m0-sandbox "$SRC/m0t1fs/linux_kernel/st/st"
 
     ## other ST
     $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_test.sh"
-- 
1.8.3.2


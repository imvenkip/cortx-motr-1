From 80836cfa8cf025dbf664e6e183d3a37009c284ca Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Thu, 28 Mar 2013 00:40:04 +0800
Subject: [PATCH 05/18] Each request handler has a layout domain embedded in
 struct m0_reqh. There may be multiple request handlers in an address space,
 and multiple layout domains. Layout domain pointer is removed from
 m0_layout_type and m0_layout_enum_type.

---
 cm/ut/cm.c                      | 10 ++++--
 cm/ut/cp.c                      | 10 ++++--
 fop/ub/ub.c                     |  6 +++-
 fop/ut/long_lock/long_lock_ut.c |  6 +++-
 ioservice/io_service.c          | 16 ----------
 layout/layout.c                 | 67 ++++++++++++++++++++---------------------
 layout/layout.h                 |  9 ++----
 layout/linear_enum.c            |  1 -
 layout/list_enum.c              |  1 -
 layout/pdclust.c                |  1 -
 layout/ut/layout.c              |  2 --
 mdservice/md_foms.c             | 11 +++----
 mdservice/md_service.c          | 19 +-----------
 mdservice/md_service.h          |  3 --
 reqh/reqh.c                     | 30 ++++++++++++++++--
 reqh/reqh.h                     |  6 ++++
 reqh/ut/reqh_service.c          |  6 +++-
 rm/ut/rm_foms.c                 |  6 +++-
 sns/cm/iter.c                   | 39 +-----------------------
 sns/cm/iter.h                   | 13 --------
 20 files changed, 110 insertions(+), 152 deletions(-)

diff --git a/cm/ut/cm.c b/cm/ut/cm.c
index 78dd818..49495af 100644
--- a/cm/ut/cm.c
+++ b/cm/ut/cm.c
@@ -34,12 +34,15 @@
 #include "addb/addb.h"
 #include "cm/ut/common_service.h"
 
+static struct m0_dbenv           dbenv;
 static int cm_ut_init(void)
 {
 	int	rc;
+	rc = m0_dbenv_init(&dbenv, "something", 0);
+	M0_ASSERT(rc == 0);
 	M0_REQH_INIT(&cm_ut_reqh,
 		     .rhia_dtm       = NULL,
-		     .rhia_db        = (void *)1,
+		     .rhia_db        = &dbenv,
 		     .rhia_mdstore   = (void *)1,
 		     .rhia_fol       = (void *)1,
 		     .rhia_svc       = (void *)1,
@@ -53,8 +56,9 @@ static int cm_ut_init(void)
 static int cm_ut_fini(void)
 {
 	m0_cm_type_deregister(&cm_ut_cmt);
-        m0_reqh_fini(&cm_ut_reqh);
-        return 0;
+	m0_reqh_fini(&cm_ut_reqh);
+	m0_dbenv_fini(&dbenv);
+	return 0;
 }
 
 static void cm_setup_ut(void)
diff --git a/cm/ut/cp.c b/cm/ut/cp.c
index 0ca16c5..85e2e98 100644
--- a/cm/ut/cp.c
+++ b/cm/ut/cp.c
@@ -37,6 +37,7 @@ static struct m0_sns_cm_cp       s_sns_cp;
 struct m0_net_buffer             s_nb;
 static struct m0_net_buffer_pool nbp;
 static struct m0_cm_aggr_group   s_ag;
+static struct m0_dbenv           dbenv;
 
 enum {
 	THREADS_NR = 17,
@@ -269,10 +270,12 @@ static void test_cp_multi_thread(void)
 static int cm_cp_init(void)
 {
 	int rc;
+	rc = m0_dbenv_init(&dbenv, "something", 0);
+	M0_ASSERT(rc == 0);
 
 	rc = M0_REQH_INIT(&cm_ut_reqh,
 			  .rhia_dtm       = NULL,
-			  .rhia_db        = (void *)1,
+			  .rhia_db        = &dbenv,
 			  .rhia_mdstore   = (void *)1,
 			  .rhia_fol       = (void *)1,
 			  .rhia_svc       = (void *)1,
@@ -295,9 +298,10 @@ static int cm_cp_fini(void)
 	m0_ios_poolmach_fini(cm_ut_service);
 	cm_ut_service_cleanup();
 	m0_cm_type_deregister(&cm_ut_cmt);
-        m0_reqh_fini(&cm_ut_reqh);
+	m0_reqh_fini(&cm_ut_reqh);
 	M0_SET0(&cm_ut_reqh);
-        return 0;
+	m0_dbenv_fini(&dbenv);
+	return 0;
 }
 
 const struct m0_test_suite cm_cp_ut = {
diff --git a/fop/ub/ub.c b/fop/ub/ub.c
index fb1b039..641dbf8 100644
--- a/fop/ub/ub.c
+++ b/fop/ub/ub.c
@@ -415,10 +415,13 @@ _UB_ROUND_DEFINE(ub_fom_block,         SC_BLOCK);
 
 /* ---------------------------------------------------------------- */
 
+static struct m0_dbenv dbenv;
 static int _init(const char *opts M0_UNUSED)
 {
 	size_t i;
 	int    rc;
+	rc = m0_dbenv_init(&dbenv, "something", 0);
+	M0_UB_ASSERT(rc == 0);
 
 	rc = m0_reqh_service_type_register(&ub_fom_stype);
 	M0_UB_ASSERT(rc == 0);
@@ -431,7 +434,7 @@ static int _init(const char *opts M0_UNUSED)
 	 * is justified. */
 	rc = M0_REQH_INIT(&g_reqh,
 			  .rhia_dtm       = (void *)1,
-			  .rhia_db        = (void *)1,
+			  .rhia_db        = &dbenv,
 			  .rhia_mdstore   = (void *)1,
 			  .rhia_fol       = (void *)1,
 			  .rhia_svc       = NULL,
@@ -472,6 +475,7 @@ static void _fini(void)
 	m0_reqh_service_fini(g_svc);
 	m0_reqh_fini(&g_reqh);
 	m0_reqh_service_type_unregister(&ub_fom_stype);
+	m0_dbenv_fini(&dbenv);
 }
 
 struct m0_ub_set m0_fom_ub = {
diff --git a/fop/ut/long_lock/long_lock_ut.c b/fop/ut/long_lock/long_lock_ut.c
index 6d23fe8..b88e025 100644
--- a/fop/ut/long_lock/long_lock_ut.c
+++ b/fop/ut/long_lock/long_lock_ut.c
@@ -101,11 +101,14 @@ M0_REQH_SERVICE_TYPE_DEFINE(ut_long_lock_service_type,
 			    &ut_long_lock_service_type_ops,
 			    "ut-long-lock-service",
                             &m0_addb_ct_ut_service);
+static struct m0_dbenv dbenv;
 
 static int test_long_lock_init(void)
 {
 	int rc;
 	int i;
+	rc = m0_dbenv_init(&dbenv, "something", 0);
+	M0_ASSERT(rc == 0);
 
 	rc = m0_reqh_service_type_register(&ut_long_lock_service_type);
 	M0_ASSERT(rc == 0);
@@ -121,7 +124,7 @@ static int test_long_lock_init(void)
 	for (i = 0; i < REQH_IN_UT_MAX; ++i) {
 		rc = M0_REQH_INIT(&reqh[i],
 				  .rhia_dtm       = (void *)1,
-				  .rhia_db        = (void *)1,
+				  .rhia_db        = &dbenv,
 				  .rhia_mdstore   = (void *)1,
 				  .rhia_fol       = (void *)1,
 				  .rhia_svc       = NULL,
@@ -149,6 +152,7 @@ static int test_long_lock_fini(void)
 		m0_reqh_fini(&reqh[i]);
 	}
 	m0_reqh_service_type_unregister(&ut_long_lock_service_type);
+	m0_dbenv_fini(&dbenv);
 
 	return 0;
 }
diff --git a/ioservice/io_service.c b/ioservice/io_service.c
index f6ee6cd..ddfc93e 100644
--- a/ioservice/io_service.c
+++ b/ioservice/io_service.c
@@ -769,7 +769,6 @@ M0_INTERNAL int m0_ios_mds_getattr(struct m0_reqh *reqh,
         struct m0_cob_attr attr = { {0} };
 	struct m0_layout_domain dom;
 	struct m0_layout_domain *ldom = &dom;
-	int new;
 	struct m0_pdclust_layout *pdl = NULL;
 	struct m0_layout *layout = NULL;
 
@@ -779,17 +778,6 @@ M0_INTERNAL int m0_ios_mds_getattr(struct m0_reqh *reqh,
 	M0_ASSERT(rc == 0);
 	M0_ASSERT(attr.ca_valid | M0_COB_LID);
 
-	if (m0_pdclust_layout_type.lt_domain == NULL) {
-		rc = m0_layout_domain_init(ldom, fom->fo_service->rs_reqh->rh_dbenv);
-		M0_ASSERT(rc == 0);
-		rc = m0_layout_standard_types_register(ldom);
-		M0_ASSERT(rc == 0);
-		new  = 1;
-	} else {
-		ldom = m0_pdclust_layout_type.lt_domain;
-		new = 0;
-	}
-
 	M0_LOG(M0_FATAL, "getlayout new = %d", new);
 	rc = m0_ios_mds_layout_get(fom->fo_service->rs_reqh, ldom, attr.ca_lid, &layout);
 	M0_LOG(M0_FATAL, "getlayout rc = %d", rc);
@@ -804,10 +792,6 @@ M0_INTERNAL int m0_ios_mds_getattr(struct m0_reqh *reqh,
 		m0_layout_put(layout);
 	}
 
-	if (new) {
-		m0_layout_standard_types_unregister(ldom);
-		m0_layout_domain_fini(ldom);
-	}
  @endcode
 */
 M0_INTERNAL int m0_ios_mds_layout_get(struct m0_reqh *reqh,
diff --git a/layout/layout.c b/layout/layout.c
index a3ef729..f4af173 100644
--- a/layout/layout.c
+++ b/layout/layout.c
@@ -211,47 +211,55 @@ M0_INTERNAL bool m0_layout__instance_invariant(const struct m0_layout_instance
 }
 
 /** Adds a reference to the layout type. */
-static void layout_type_get(struct m0_layout_type *lt)
+static void layout_type_get(struct m0_layout_domain *ldom,
+			    struct m0_layout_type *lt)
 {
+	M0_PRE(ldom != NULL);
 	M0_PRE(lt != NULL);
 
-	m0_mutex_lock(&lt->lt_domain->ld_lock);
-	M0_PRE(lt == lt->lt_domain->ld_type[lt->lt_id]);
+	m0_mutex_lock(&ldom->ld_lock);
+	M0_PRE(lt == ldom->ld_type[lt->lt_id]);
 	M0_CNT_INC(lt->lt_ref_count);
-	m0_mutex_unlock(&lt->lt_domain->ld_lock);
+	m0_mutex_unlock(&ldom->ld_lock);
 }
 
 /** Releases a reference on the layout type. */
-static void layout_type_put(struct m0_layout_type *lt)
+static void layout_type_put(struct m0_layout_domain *ldom,
+			    struct m0_layout_type *lt)
 {
+	M0_PRE(ldom != NULL);
 	M0_PRE(lt != NULL);
 
-	m0_mutex_lock(&lt->lt_domain->ld_lock);
-	M0_PRE(lt == lt->lt_domain->ld_type[lt->lt_id]);
+	m0_mutex_lock(&ldom->ld_lock);
+	M0_PRE(lt == ldom->ld_type[lt->lt_id]);
 	M0_CNT_DEC(lt->lt_ref_count);
-	m0_mutex_unlock(&lt->lt_domain->ld_lock);
+	m0_mutex_unlock(&ldom->ld_lock);
 }
 
 /** Adds a reference on the enum type. */
-static void enum_type_get(struct m0_layout_enum_type *let)
+static void enum_type_get(struct m0_layout_domain *ldom,
+			  struct m0_layout_enum_type *let)
 {
+	M0_PRE(ldom != NULL);
 	M0_PRE(let != NULL);
 
-	m0_mutex_lock(&let->let_domain->ld_lock);
-	M0_PRE(let == let->let_domain->ld_enum[let->let_id]);
+	m0_mutex_lock(&ldom->ld_lock);
+	M0_PRE(let == ldom->ld_enum[let->let_id]);
 	M0_CNT_INC(let->let_ref_count);
-	m0_mutex_unlock(&let->let_domain->ld_lock);
+	m0_mutex_unlock(&ldom->ld_lock);
 }
 
 /** Releases a reference on the enum type. */
-static void enum_type_put(struct m0_layout_enum_type *let)
+static void enum_type_put(struct m0_layout_domain *ldom,
+			  struct m0_layout_enum_type *let)
 {
+	M0_PRE(ldom != NULL);
 	M0_PRE(let != NULL);
 
-	m0_mutex_lock(&let->let_domain->ld_lock);
-	M0_PRE(let == let->let_domain->ld_enum[let->let_id]);
+	m0_mutex_lock(&ldom->ld_lock);
+	M0_PRE(let == ldom->ld_enum[let->let_id]);
 	M0_CNT_DEC(let->let_ref_count);
-	m0_mutex_unlock(&let->let_domain->ld_lock);
+	m0_mutex_unlock(&ldom->ld_lock);
 }
 
 /**
@@ -331,7 +339,6 @@ M0_INTERNAL void m0_layout__init(struct m0_layout *l,
 	M0_PRE(m0_layout__domain_invariant(dom));
 	M0_PRE(lid > 0);
 	M0_PRE(lt != NULL);
-	M0_PRE(lt->lt_domain == dom);
 	M0_PRE(lt == dom->ld_type[lt->lt_id]);
 	M0_PRE(ops != NULL);
 
@@ -345,7 +352,7 @@ M0_INTERNAL void m0_layout__init(struct m0_layout *l,
 	l->l_type       = lt;
 
 	m0_ref_init(&l->l_ref, 1, l->l_ops->lo_fini);
-	layout_type_get(lt);
+	layout_type_get(dom, lt);
 	m0_mutex_init(&l->l_lock);
 	M0_ADDB_CTX_INIT(&m0_addb_gmc, &l->l_addb_ctx, &m0_addb_ct_layout_obj,
 			 &m0_addb_proc_ctx, lid, lt->lt_id);
@@ -375,7 +382,7 @@ M0_INTERNAL void m0_layout__fini_internal(struct m0_layout *l)
 	M0_PRE(m0_mutex_is_not_locked(&l->l_lock));
 	m0_addb_ctx_fini(&l->l_addb_ctx);
 	m0_mutex_fini(&l->l_lock);
-	layout_type_put(l->l_type);
+	layout_type_put(l->l_dom, l->l_type);
 	l->l_type = NULL;
 	m0_layout_bob_fini(l);
 }
@@ -493,7 +500,6 @@ M0_INTERNAL void m0_layout__enum_init(struct m0_layout_domain *dom,
 	M0_PRE(m0_layout__domain_invariant(dom));
 	M0_PRE(le != NULL);
 	M0_PRE(let != NULL);
-	M0_PRE(let->let_domain == dom);
 	M0_PRE(let == dom->ld_enum[let->let_id]);
 	M0_PRE(ops != NULL);
 
@@ -502,7 +508,8 @@ M0_INTERNAL void m0_layout__enum_init(struct m0_layout_domain *dom,
 	le->le_sl_is_set = false;
 	le->le_sl = NULL;
 	le->le_ops = ops;
-	enum_type_get(let);
+	le->le_dom = dom;
+	enum_type_get(dom, let);
 	le->le_type = let;
 	m0_layout_enum_bob_init(le);
 	M0_LEAVE("Enum-type-id %lu", (unsigned long)let->let_id);
@@ -517,7 +524,7 @@ M0_INTERNAL void m0_layout__enum_fini(struct m0_layout_enum *le)
 	M0_PRE(m0_layout__enum_invariant(le));
 
 	M0_ENTRY("Enum-type-id %lu", (unsigned long)le->le_type->let_id);
-	enum_type_put(le->le_type);
+	enum_type_put(le->le_dom, le->le_type);
 	le->le_type = NULL;
 	m0_layout_enum_bob_fini(le);
 	M0_LEAVE();
@@ -765,7 +772,6 @@ M0_INTERNAL int m0_layout_type_register(struct m0_layout_domain *dom,
 	M0_PRE(m0_layout__domain_invariant(dom));
 	M0_PRE(lt != NULL);
 	M0_PRE(IS_IN_ARRAY(lt->lt_id, dom->ld_type));
-	M0_PRE(lt->lt_domain == NULL);
 	M0_PRE(lt->lt_ref_count == 0);
 	M0_PRE(lt->lt_ops != NULL);
 
@@ -782,7 +788,6 @@ M0_INTERNAL int m0_layout_type_register(struct m0_layout_domain *dom,
 err1_injected:
 	if (rc == 0) {
 		max_recsize_update(dom);
-		lt->lt_domain = dom;
 	} else {
 		m0_layout__log("m0_layout_type_register",
 			       "lto_register() failed",
@@ -801,17 +806,15 @@ M0_INTERNAL void m0_layout_type_unregister(struct m0_layout_domain *dom,
 	M0_PRE(m0_layout__domain_invariant(dom));
 	M0_PRE(lt != NULL);
 	M0_PRE(dom->ld_type[lt->lt_id] == lt); /* Registered layout type */
-	M0_PRE(lt->lt_domain == dom);
 	M0_PRE(lt->lt_ops != NULL);
 
-	M0_ENTRY("Layout-type-id %lu, lt_domain %p",
-		 (unsigned long)lt->lt_id, lt->lt_domain);
+	M0_ENTRY("Layout-type-id %lu, domain %p",
+		 (unsigned long)lt->lt_id, dom);
 	m0_mutex_lock(&dom->ld_lock);
 	M0_PRE(lt->lt_ref_count == 0);
 	lt->lt_ops->lto_unregister(dom, lt);
 	dom->ld_type[lt->lt_id] = NULL;
 	max_recsize_update(dom);
-	lt->lt_domain = NULL;
 	m0_mutex_unlock(&dom->ld_lock);
 	M0_LEAVE("Layout-type-id %lu", (unsigned long)lt->lt_id);
 }
@@ -824,7 +827,6 @@ M0_INTERNAL int m0_layout_enum_type_register(struct m0_layout_domain *dom,
 	M0_PRE(m0_layout__domain_invariant(dom));
 	M0_PRE(let != NULL);
 	M0_PRE(IS_IN_ARRAY(let->let_id, dom->ld_enum));
-	M0_PRE(let->let_domain == NULL);
 	M0_PRE(let->let_ref_count == 0);
 	M0_PRE(let->let_ops != NULL);
 
@@ -841,7 +843,6 @@ M0_INTERNAL int m0_layout_enum_type_register(struct m0_layout_domain *dom,
 err1_injected:
 	if (rc == 0) {
 		max_recsize_update(dom);
-		let->let_domain = dom;
 	} else {
 		m0_layout__log("m0_layout_enum_type_register",
 			       "leto_register() failed",
@@ -860,16 +861,14 @@ M0_INTERNAL void m0_layout_enum_type_unregister(struct m0_layout_domain *dom,
 	M0_PRE(m0_layout__domain_invariant(dom));
 	M0_PRE(let != NULL);
 	M0_PRE(dom->ld_enum[let->let_id] == let); /* Registered enum type */
-	M0_PRE(let->let_domain != NULL);
 
-	M0_ENTRY("Enum_type_id %lu, let_domain %p",
-		 (unsigned long)let->let_id, let->let_domain);
+	M0_ENTRY("Enum_type_id %lu, domain %p",
+		 (unsigned long)let->let_id, dom);
 	m0_mutex_lock(&dom->ld_lock);
 	M0_PRE(let->let_ref_count == 0);
 	let->let_ops->leto_unregister(dom, let);
 	dom->ld_enum[let->let_id] = NULL;
 	max_recsize_update(dom);
-	let->let_domain = NULL;
 	m0_mutex_unlock(&dom->ld_lock);
 	M0_LEAVE("Enum_type_id %lu", (unsigned long)let->let_id);
 }
diff --git a/layout/layout.h b/layout/layout.h
index d064dc6..d5ea65c 100644
--- a/layout/layout.h
+++ b/layout/layout.h
@@ -162,7 +162,6 @@ enum {
  * related parameters. ld_type_data[] and ld_enum_data[] store pointers to
  * the auxiliary tables applicable, if any, for the various layout types and
  * enum types.
- * There is one instance of layout domain object per address space.
  */
 struct m0_layout_domain {
 	/** Layout types array. */
@@ -353,9 +352,6 @@ struct m0_layout_type {
 	/** Layout type id. */
 	uint32_t                         lt_id;
 
-	/** Layout domain with which the layout type is registered. */
-	struct m0_layout_domain         *lt_domain;
-
 	/**
 	 * Layout type reference count, indicating 'how many in-memory layout
 	 * objects using this layout type' exist in 'the domain the layout type
@@ -405,6 +401,8 @@ struct m0_layout_enum {
 	/** Layout enumeration type. */
 	struct m0_layout_enum_type      *le_type;
 
+	/** Layout domain */
+	struct m0_layout_domain         *le_dom;
 	/**
 	 * Flag indicating if this enum object is associated with any striped
 	 * layout object. This flag is used in invariants only.
@@ -524,9 +522,6 @@ struct m0_layout_enum_type {
 	/** Layout enumeration type id. */
 	uint32_t                              let_id;
 
-	/** Layout domain with which the enum type is registered. */
-	struct m0_layout_domain              *let_domain;
-
 	/**
 	 * Enum type reference count, indicating 'how many in-memory enum
 	 * objects using this enum type' exist in 'the domain the enum type is
diff --git a/layout/linear_enum.c b/layout/linear_enum.c
index 3bb01d7..2919d01 100644
--- a/layout/linear_enum.c
+++ b/layout/linear_enum.c
@@ -339,7 +339,6 @@ struct m0_layout_enum_type m0_linear_enum_type = {
 	.let_name      = "linear",
 	.let_id        = 1,
 	.let_ref_count = 0,
-	.let_domain    = NULL,
 	.let_ops       = &linear_type_ops
 };
 
diff --git a/layout/list_enum.c b/layout/list_enum.c
index d48a99c..19f2d1b 100644
--- a/layout/list_enum.c
+++ b/layout/list_enum.c
@@ -724,7 +724,6 @@ struct m0_layout_enum_type m0_list_enum_type = {
 	.let_name      = "list",
 	.let_id        = 0,
 	.let_ref_count = 0,
-	.let_domain    = NULL,
 	.let_ops       = &list_type_ops
 };
 
diff --git a/layout/pdclust.c b/layout/pdclust.c
index 8befb92..0f8fd02 100644
--- a/layout/pdclust.c
+++ b/layout/pdclust.c
@@ -900,7 +900,6 @@ struct m0_layout_type m0_pdclust_layout_type = {
 	.lt_name      = "pdclust",
 	.lt_id        = 0,
 	.lt_ref_count = 0,
-	.lt_domain    = NULL,
 	.lt_ops       = &pdclust_type_ops
 };
 
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index 9594db0..c9d24c9 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -200,7 +200,6 @@ static const struct m0_layout_type_ops test_layout_type_ops = {
 struct m0_layout_type test_layout_type = {
 	.lt_name     = "test",
 	.lt_id       = 2,
-	.lt_domain   = NULL,
 	.lt_ops      = &test_layout_type_ops
 };
 
@@ -2955,7 +2954,6 @@ static void test_lookup_failure(void)
 	struct m0_layout_type test_layout_type = {
 		.lt_name     = "test",
 		.lt_id       = 1,
-		.lt_domain   = NULL,
 		.lt_ops      = NULL
 	};
 	lid = 15005;
diff --git a/mdservice/md_foms.c b/mdservice/md_foms.c
index 9caf984..c31e207 100644
--- a/mdservice/md_foms.c
+++ b/mdservice/md_foms.c
@@ -1265,8 +1265,8 @@ static int m0_md_tick_layout(struct m0_fom *fom)
 	struct m0_bufvec_cursor        cur;
 	struct m0_layout              *l;
 	struct m0_layout_type         *lt;
-	struct m0_reqh_md_service     *serv_obj;
 	struct m0_db_pair              pair;
+	struct m0_reqh                *reqh;
 
 	rc = m0_md_tick_generic(fom);
 	if (rc != 0)
@@ -1287,8 +1287,7 @@ static int m0_md_tick_layout(struct m0_fom *fom)
 	M0_LOG(M0_DEBUG, "This is a layout fop op = %u, lid = %llu",
 		req->l_op, (unsigned long long)req->l_lid);
 
-	serv_obj = container_of(fom->fo_service, struct m0_reqh_md_service,
-				rmds_gen);
+	reqh = fom->fo_service->rs_reqh;
 
 	m0_fom_block_enter(fom);
 	switch (req->l_op) {
@@ -1300,7 +1299,7 @@ static int m0_md_tick_layout(struct m0_fom *fom)
 		m0_bufvec_cursor_init(&cur, &bv);
 		lt = &m0_pdclust_layout_type;
 
-		rc = lt->lt_ops->lto_allocate(&serv_obj->rmds_layout_dom,
+		rc = lt->lt_ops->lto_allocate(&reqh->rh_ldom,
 					      req->l_lid, &l);
 		if (rc != 0)
 			break;
@@ -1327,7 +1326,7 @@ static int m0_md_tick_layout(struct m0_fom *fom)
 		M0_LOG(M0_DEBUG, "Lookup Start");
 
 		rep->lr_buf.b_count = m0_layout_max_recsize(
-					&serv_obj->rmds_layout_dom);
+					&reqh->rh_ldom);
 		rep->lr_buf.b_addr = m0_alloc(rep->lr_buf.b_count);
 		if (rep->lr_buf.b_addr == NULL) {
 			rc = -ENOMEM;
@@ -1338,7 +1337,7 @@ static int m0_md_tick_layout(struct m0_fom *fom)
 				rep->lr_buf.b_addr,
 				rep->lr_buf.b_count);
 		/* lookup from db and encode into pair */
-		rc = m0_layout_lookup(&serv_obj->rmds_layout_dom, req->l_lid,
+		rc = m0_layout_lookup(&reqh->rh_ldom, req->l_lid,
 				      &m0_pdclust_layout_type,
 				      &fom->fo_tx.tx_dbtx, &pair, &l);
 		if (rc == 0)
diff --git a/mdservice/md_service.c b/mdservice/md_service.c
index 59b93fb..49e911b 100644
--- a/mdservice/md_service.c
+++ b/mdservice/md_service.c
@@ -131,21 +131,9 @@ static void mds_fini(struct m0_reqh_service *service)
  */
 static int mds_start(struct m0_reqh_service *service)
 {
-        struct m0_reqh_md_service *serv_obj;
-        int rc;
         M0_PRE(service != NULL);
 
-        serv_obj = container_of(service, struct m0_reqh_md_service, rmds_gen);
-        rc = m0_layout_domain_init(&serv_obj->rmds_layout_dom,
-				   service->rs_reqh->rh_dbenv);
-        if (rc == 0) {
-                rc = m0_layout_standard_types_register(
-					&serv_obj->rmds_layout_dom);
-		if (rc != 0)
-			m0_layout_domain_fini(&serv_obj->rmds_layout_dom);
-	}
-
-       return rc;
+        return 0;
 }
 
 /**
@@ -156,12 +144,7 @@ static int mds_start(struct m0_reqh_service *service)
  */
 static void mds_stop(struct m0_reqh_service *service)
 {
-        struct m0_reqh_md_service *serv_obj;
         M0_PRE(service != NULL);
-
-        serv_obj = container_of(service, struct m0_reqh_md_service, rmds_gen);
-        m0_layout_standard_types_unregister(&serv_obj->rmds_layout_dom);
-        m0_layout_domain_fini(&serv_obj->rmds_layout_dom);
 }
 
 /** @} endgroup mdservice */
diff --git a/mdservice/md_service.h b/mdservice/md_service.h
index d45318c..2e43352 100644
--- a/mdservice/md_service.h
+++ b/mdservice/md_service.h
@@ -47,9 +47,6 @@ struct m0_reqh_md_service {
         struct m0_reqh_service       rmds_gen;
         /** Magic to check io service object */
         uint64_t                     rmds_magic;
-
-        /** layout domain for this mdservice */
-        struct m0_layout_domain      rmds_layout_dom;
 };
 
 M0_INTERNAL void m0_mds_unregister(void);
diff --git a/reqh/reqh.c b/reqh/reqh.c
index f808091..6a017af 100644
--- a/reqh/reqh.c
+++ b/reqh/reqh.c
@@ -39,7 +39,7 @@
 #include "rpc/rpc.h"
 #include "reqh/reqh_service.h"
 #include "reqh/reqh.h"
-
+#include "layout/pdclust.h"
 
 /**
    @addtogroup reqh
@@ -83,6 +83,29 @@ M0_INTERNAL int m0_reqh_init(struct m0_reqh *reqh,
 
 	M0_PRE(reqh != NULL);
 
+	result = m0_fom_domain_init(&reqh->rh_fom_dom);
+	if (result != 0)
+		return result;
+	reqh->rh_dtm             = reqh_args->rhia_dtm;
+	reqh->rh_dbenv           = reqh_args->rhia_db;
+	reqh->rh_svc             = reqh_args->rhia_svc;
+	reqh->rh_mdstore         = reqh_args->rhia_mdstore;
+	reqh->rh_fol             = reqh_args->rhia_fol;
+	reqh->rh_shutdown        = false;
+	reqh->rh_fom_dom.fd_reqh = reqh;
+
+	result = m0_layout_domain_init(&reqh->rh_ldom, reqh->rh_dbenv);
+	if (result != 0) {
+		m0_fom_domain_fini(&reqh->rh_fom_dom);
+		return result;
+	}
+	result = m0_layout_standard_types_register(&reqh->rh_ldom);
+	if (result != 0) {
+		m0_layout_domain_fini(&reqh->rh_ldom);
+		m0_fom_domain_fini(&reqh->rh_fom_dom);
+		return result;
+	}
+
 	m0_addb_mc_init(&reqh->rh_addb_mc);
 
 	/** @todo Currently passing dbenv to this api, the duty of the
@@ -147,7 +170,10 @@ M0_INTERNAL int m0_reqh_init(struct m0_reqh *reqh,
 
 M0_INTERNAL void m0_reqh_fini(struct m0_reqh *reqh)
 {
-        M0_PRE(reqh != NULL);
+	M0_PRE(reqh != NULL);
+	m0_layout_standard_types_unregister(&reqh->rh_ldom);
+	m0_layout_domain_fini(&reqh->rh_ldom);
+
 	m0_addb_ctx_fini(&reqh->rh_addb_ctx);
 	m0_addb_mc_fini(&reqh->rh_addb_mc);
         m0_fom_domain_fini(&reqh->rh_fom_dom);
diff --git a/reqh/reqh.h b/reqh/reqh.h
index 0f13da9..ab4d482 100644
--- a/reqh/reqh.h
+++ b/reqh/reqh.h
@@ -30,6 +30,7 @@
 
 #include "sm/sm.h"
 #include "fop/fom.h"
+#include "layout/layout.h"
 
 /**
    @defgroup reqh Request handler
@@ -143,6 +144,11 @@ struct m0_reqh {
 	    refer <http://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html>
 	 */
 	struct m0_reqh_lockers   rh_lockers;
+
+	/**
+	 * Layout domain for this request handler.
+	 */
+	struct m0_layout_domain  rh_ldom;
 };
 
 /**
diff --git a/reqh/ut/reqh_service.c b/reqh/ut/reqh_service.c
index 32074c1..7c39954 100644
--- a/reqh/ut/reqh_service.c
+++ b/reqh/ut/reqh_service.c
@@ -140,6 +140,9 @@ static void test_service(void)
 	struct m0_reqh_service_type  *svct;
 	struct m0_reqh_service       *reqh_svc;
 	struct m0_fop                *fop;
+	static struct m0_dbenv        dbenv;
+	rc = m0_dbenv_init(&dbenv, "something", 0);
+	M0_UT_ASSERT(rc == 0);
 
 	M0_SET0(&reqh);
 
@@ -147,7 +150,7 @@ static void test_service(void)
 	M0_UT_ASSERT(rc == 0);
 
 	rc = M0_REQH_INIT(&reqh,
-			  .rhia_db        = (void *)1,
+			  .rhia_db        = &dbenv,
 			  .rhia_mdstore   = (void *)1,
 			  .rhia_fol       = (void *)1);
 	M0_UT_ASSERT(rc == 0);
@@ -176,6 +179,7 @@ static void test_service(void)
 	m0_reqh_service_stop(reqh_svc);
 	m0_reqh_service_fini(reqh_svc);
 	m0_reqh_fini(&reqh);
+	m0_dbenv_fini(&dbenv);
 
 	m0_reqhut_fop_fini();
 }
diff --git a/rm/ut/rm_foms.c b/rm/ut/rm_foms.c
index 315df21..9ca5be8 100644
--- a/rm/ut/rm_foms.c
+++ b/rm/ut/rm_foms.c
@@ -42,6 +42,7 @@ enum test_type {
 static struct m0_fom_locality  dummy_loc;
 static struct m0_rm_loan      *test_loan;
 struct m0_reqh		       reqh;
+static struct m0_dbenv         dbenv;
 
 extern void remotes_tlist_add(struct m0_tl *tl, struct m0_rm_remote *rem);
 extern void remotes_tlist_del(struct m0_rm_remote *rem);
@@ -55,11 +56,13 @@ extern const struct m0_tl_descr remotes_tl;
 static void rmfoms_utinit(void)
 {
 	int rc;
+	rc = m0_dbenv_init(&dbenv, "something", 0);
+	M0_UT_ASSERT(rc == 0);
 
 	m0_rm_fop_init();
 	rc = M0_REQH_INIT(&reqh,
 			.rhia_dtm       = (void*)1,
-			.rhia_db        = (void*)1,
+			.rhia_db        = &dbenv,
 			.rhia_mdstore   = (void*)1,
 			.rhia_fol       = (void*)1,
 			.rhia_svc       = (void*)1,
@@ -74,6 +77,7 @@ static void rmfoms_utfini(void)
         m0_sm_group_fini(&dummy_loc.fl_group);
 	m0_reqh_fini(&reqh);
 	m0_rm_fop_fini();
+	m0_dbenv_fini(&dbenv);
 }
 
 /*
diff --git a/sns/cm/iter.c b/sns/cm/iter.c
index 0ea27c6..4155724 100644
--- a/sns/cm/iter.c
+++ b/sns/cm/iter.c
@@ -297,7 +297,7 @@ static int cm_layout_fetch(struct m0_sns_cm_iter *it)
 
 	M0_PRE(it != NULL);
 	gfid = it->si_pl.sfc_gob_fid;
-	ldom = it->si_ldom;
+	ldom = &it->si_cp->sc_base.c_fom.fo_service->rs_reqh->rh_ldom;
 
 	M0_LOG(M0_DEBUG, "getattr for %llu:%llu",
 			 (unsigned long long)gfid.f_container,
@@ -936,38 +936,6 @@ static const struct m0_sm_conf cm_iter_sm_conf = {
  */
 static int layout_setup(struct m0_sns_cm_iter *it)
 {
-
-	struct m0_dbenv                 *dbenv;
-	int                              rc;
-	struct m0_layout_domain         *ldom;
-
-	dbenv = it->si_dbenv;
-	if (m0_pdclust_layout_type.lt_domain == NULL) {
-		/* pdclust layout has not been registered. This means
-		 * layout domain and standard layouts have not been initialised
-		 * in other places. We need to allocate a new one */
-		M0_ALLOC_PTR(ldom);
-		if (ldom == NULL)
-			return -ENOMEM;
-
-		rc = m0_layout_domain_init(ldom, dbenv);
-		if (rc != 0) {
-			m0_free(ldom);
-			return rc;
-		}
-		rc = m0_layout_standard_types_register(ldom);
-		if (rc != 0) {
-			m0_layout_domain_fini(ldom);
-			m0_free(ldom);
-			return rc;
-		}
-		it->si_ldom_need_fini = 1;
-		it->si_ldom = ldom;
-	} else {
-		it->si_ldom = ldom = m0_pdclust_layout_type.lt_domain;
-		it->si_ldom_need_fini = 0;
-	}
-
 	return 0;
 }
 
@@ -986,11 +954,6 @@ static void layout_fini(struct m0_sns_cm_iter *it)
 		m0_layout_put(m0_pdl_to_layout(sfc->sfc_pdlayout));
 		sfc->sfc_pdlayout = NULL;
 	}
-	if (it->si_ldom_need_fini == 1) {
-		m0_layout_standard_types_unregister(it->si_ldom);
-		m0_layout_domain_fini(it->si_ldom);
-		m0_free(it->si_ldom);
-	}
 }
 
 M0_INTERNAL int m0_sns_cm_iter_init(struct m0_sns_cm_iter *it)
diff --git a/sns/cm/iter.h b/sns/cm/iter.h
index c15135e..58ebc25 100644
--- a/sns/cm/iter.h
+++ b/sns/cm/iter.h
@@ -113,19 +113,6 @@ struct m0_sns_cm_iter {
 
 	struct m0_cob_domain            *si_cob_dom;
 
-        /**
-         * layout domain. If layout domain is already initialised in other
-         * service, this will be a pointer to that domain. Otherwise a new
-         * layout domain will be allocated.
-         */
-	struct m0_layout_domain         *si_ldom;
-	/**
-	 * layout domain need to fini or not.
-	 * If layout domain is shared with other service, then no need to
-	 * init and fini the above layout domain.
-	 */
-	int                              si_ldom_need_fini;
-
 	/** Layout details of a file. */
 	struct m0_sns_cm_file_context    si_pl;
 
-- 
1.8.3.2


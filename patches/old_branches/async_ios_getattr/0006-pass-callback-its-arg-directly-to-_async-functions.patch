From d89bfb4d822dbcfc85a0111b91c3c3799040c745 Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Wed, 7 Aug 2013 22:12:31 +0800
Subject: [PATCH 6/7] pass callback & its arg directly to *_async functions.
 add fop_release function to free mds_op.

---
 ioservice/io_service.c | 48 ++++++++++++++++++++++++++++++------------------
 ioservice/io_service.h | 16 ++++------------
 sns/cm/cm_utils.c      | 19 +++----------------
 3 files changed, 37 insertions(+), 46 deletions(-)

diff --git a/ioservice/io_service.c b/ioservice/io_service.c
index 5980fa5..bd8997f 100644
--- a/ioservice/io_service.c
+++ b/ioservice/io_service.c
@@ -888,17 +888,29 @@ static int _rpc_post(struct m0_fop                *fop,
 }
 
 struct mds_op {
-	struct m0_fop               mo_fop;
-	struct m0_cm_callback_info *mo_cb_info;
+	struct m0_fop mo_fop;
 
+	void        (*mo_cb)(void *arg, int rc);
+	void         *mo_arg;
 	/** saved out pointer. returned data will be copied here */
-	void *mo_out;
+	void         *mo_out;
 
 	/* These arguments are saved in async call and used in callback */
-	void *mo_p1;   /* saved param1 */
-	void *mo_p2;   /* saved param2 */
+	void         *mo_p1;   /* saved param1 */
+	void         *mo_p2;   /* saved param2 */
 };
 
+static void mds_op_release(struct m0_ref *ref)
+{
+	struct mds_op *mds_op;
+	struct m0_fop *fop;
+
+	fop = container_of(ref, struct m0_fop, f_ref);
+	mds_op = container_of(fop, struct mds_op, mo_fop);
+	m0_fop_fini(fop);
+	m0_free(mds_op);
+}
+
 static void getattr_rpc_item_reply_cb(struct m0_rpc_item *item)
 {
 	struct mds_op               *mdsop;
@@ -907,13 +919,11 @@ static void getattr_rpc_item_reply_cb(struct m0_rpc_item *item)
 	struct m0_fop_getattr_rep   *getattr_rep;
 	struct m0_fop_cob           *rep_fop_cob;
 	struct m0_cob_attr          *attr;
-	struct m0_cm_callback_info  *cb_info;
 	int                          rc;
 
 	M0_PRE(item != NULL);
 	req = m0_rpc_item_to_fop(item);
 	mdsop = container_of(req, struct mds_op, mo_fop);
-	cb_info = mdsop->mo_cb_info;
 	attr = mdsop->mo_out;
 
 	rc = item->ri_error;
@@ -929,7 +939,7 @@ static void getattr_rpc_item_reply_cb(struct m0_rpc_item *item)
 			rc = rep_fop_cob->b_rc;
 	}
 
-	cb_info->ci_cb(cb_info->ci_arg, rc);
+	mdsop->mo_cb(mdsop->mo_arg, rc);
 }
 
 const struct m0_rpc_item_ops getattr_fop_rpc_item_ops = {
@@ -942,7 +952,8 @@ const struct m0_rpc_item_ops getattr_fop_rpc_item_ops = {
 M0_INTERNAL int m0_ios_mds_getattr_async(struct m0_reqh *reqh,
 				         const struct m0_fid *gfid,
 					 struct m0_cob_attr  *attr,
-					 struct m0_cm_callback_info *cb_info)
+					 void (*cb)(void *arg, int rc),
+					 void *arg)
 {
 	struct m0_ios_mds_conn    *imc;
 	struct mds_op             *mdsop;
@@ -963,7 +974,7 @@ M0_INTERNAL int m0_ios_mds_getattr_async(struct m0_reqh *reqh,
 		return -ENOMEM;
 
 	req = &mdsop->mo_fop;
-	m0_fop_init(req, &m0_fop_getattr_fopt, NULL, NULL);
+	m0_fop_init(req, &m0_fop_getattr_fopt, NULL, &mds_op_release);
 	rc = m0_fop_data_alloc(req);
 	if (rc == 0) {
 		req->f_item.ri_ops = &getattr_fop_rpc_item_ops;
@@ -972,8 +983,9 @@ M0_INTERNAL int m0_ios_mds_getattr_async(struct m0_reqh *reqh,
 		return rc;
 	}
 
-	mdsop->mo_cb_info = cb_info;
-	mdsop->mo_out     = attr;
+	mdsop->mo_cb  = cb;
+	mdsop->mo_arg = arg;
+	mdsop->mo_out = attr;
 
 	getattr = m0_fop_data(req);
 	req_fop_cob = &getattr->g_body;
@@ -1000,13 +1012,11 @@ static void getlayout_rpc_item_reply_cb(struct m0_rpc_item *item)
 	uint64_t                    lid;
 	struct m0_layout           *l;
 	struct m0_layout          **l_out;
-	struct m0_cm_callback_info *cb_info;
 	int                         rc;
 
 	M0_PRE(item != NULL);
 	req = m0_rpc_item_to_fop(item);
 	mdsop = container_of(req, struct mds_op, mo_fop);
-	cb_info = mdsop->mo_cb_info;
 	l_out = mdsop->mo_out;
 
 	ldom = mdsop->mo_p1;
@@ -1042,7 +1052,7 @@ static void getlayout_rpc_item_reply_cb(struct m0_rpc_item *item)
 		}
 	}
 
-	cb_info->ci_cb(cb_info, rc);
+	mdsop->mo_cb(mdsop->mo_arg, rc);
 }
 
 const struct m0_rpc_item_ops getlayout_fop_rpc_item_ops = {
@@ -1054,7 +1064,8 @@ M0_INTERNAL int m0_ios_mds_layout_get_async(struct m0_reqh *reqh,
 					    struct m0_layout_domain *ldom,
 					    uint64_t lid,
 					    struct m0_layout **l_out,
-					    struct m0_cm_callback_info *cb_info)
+					    void (*cb)(void *arg, int rc),
+					    void *arg)
 {
 	struct m0_ios_mds_conn *imc;
 	struct mds_op          *mdsop;
@@ -1074,7 +1085,7 @@ M0_INTERNAL int m0_ios_mds_layout_get_async(struct m0_reqh *reqh,
 		return -ENOMEM;
 
 	req = &mdsop->mo_fop;
-	m0_fop_init(req, &m0_fop_getattr_fopt, NULL, NULL);
+	m0_fop_init(req, &m0_fop_getattr_fopt, NULL, &mds_op_release);
 	rc = m0_fop_data_alloc(req);
 	if (rc == 0) {
 		req->f_item.ri_ops = &getlayout_fop_rpc_item_ops;
@@ -1083,7 +1094,8 @@ M0_INTERNAL int m0_ios_mds_layout_get_async(struct m0_reqh *reqh,
 		return rc;
 	}
 
-	mdsop->mo_cb_info = cb_info;
+	mdsop->mo_cb  = cb;
+	mdsop->mo_arg = arg;
 	mdsop->mo_out = l_out;
 	mdsop->mo_p1 = ldom;
 	mdsop->mo_p2 = (void *)lid;
diff --git a/ioservice/io_service.h b/ioservice/io_service.h
index 04ae98a..10d66dc 100644
--- a/ioservice/io_service.h
+++ b/ioservice/io_service.h
@@ -132,25 +132,17 @@ M0_INTERNAL int m0_ios_mds_layout_get(struct m0_reqh *reqh,
 				      uint64_t lid,
 				      struct m0_layout **l_out);
 
-/** callback information for async getattr & getlayout request to mdservice */
-struct m0_cm_callback_info {
-	/** @param arg caller provided, pass it back to caller.
-	 *  @param rc return value on this async call.
-	 */
-	void (*ci_cb)(void *arg, int rc);
-	/** caller provided argument */
-	void *ci_arg;
-};
-
 M0_INTERNAL int m0_ios_mds_getattr_async(struct m0_reqh *reqh,
 				         const struct m0_fid *gfid,
 					 struct m0_cob_attr  *attr,
-					 struct m0_cm_callback_info *cb_info);
+					 void (*cb)(void *arg, int rc),
+					 void *arg);
 M0_INTERNAL int m0_ios_mds_layout_get_async(struct m0_reqh *reqh,
 					    struct m0_layout_domain *ldom,
 					    uint64_t lid,
 					    struct m0_layout **l_out,
-					    struct m0_cm_callback_info *cbinfo);
+					    void (*cb)(void *arg, int rc),
+					    void *arg);
 /** @} end of io_service */
 
 #endif /* __MERO_IOSERVICE_IO_SERVICE_H__ */
diff --git a/sns/cm/cm_utils.c b/sns/cm/cm_utils.c
index e95f5cc..2779177 100644
--- a/sns/cm/cm_utils.c
+++ b/sns/cm/cm_utils.c
@@ -377,10 +377,6 @@ static void getattr_callback(void *arg, int rc)
 	(void)cm;
 }
 
-struct m0_cm_callback_info getattr_cb_info = {
-	.ci_cb = &getattr_callback,
-};
-
 /**
  * getattr sync
  *
@@ -405,10 +401,7 @@ m0_sns_cm_file_attr_fetch_async(struct m0_cm *cm,
 	M0_PRE(gfid != NULL);
 	M0_PRE(m0_cm_is_locked(cm));
 
-	/* Caller can save anything here. It will passed to callback. */
-	getattr_cb_info.ci_arg = cm;
-
-	rc = m0_ios_mds_getattr_async(reqh, gfid, attr, &getattr_cb_info);
+	rc = m0_ios_mds_getattr_async(reqh, gfid, attr, &getattr_callback, cm);
 	return rc;
 }
 
@@ -425,10 +418,6 @@ static void layout_callback(void *arg, int rc)
 	(void)cm;
 }
 
-struct m0_cm_callback_info layout_cb_info = {
-	.ci_cb = &layout_callback,
-};
-
 /**
  * getlayout async.
  */
@@ -446,10 +435,8 @@ m0_sns_cm_file_layout_fetch_async(struct m0_cm *cm,
 
 	ldom = &reqh->rh_ldom;
 
-	/* Caller can save anything here. It will passed to callback. */
-	layout_cb_info.ci_arg = cm;
-
-	rc = m0_ios_mds_layout_get_async(reqh, ldom, lid, l_out, &layout_cb_info);
+	rc = m0_ios_mds_layout_get_async(reqh, ldom, lid, l_out,
+					 &layout_callback, cm);
 	return rc;
 }
 
-- 
1.8.3.2


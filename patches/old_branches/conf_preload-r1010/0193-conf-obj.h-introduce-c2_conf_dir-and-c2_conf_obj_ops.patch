From cb68ab91c30694a13457c957ab01140363c0a744 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 25 May 2012 23:40:30 +0300
Subject: [PATCH 193/311] conf/obj.h: introduce c2_conf_dir and c2_conf_obj_ops

- Introduce directory configuration object (c2_conf_dir, C2_CO_DIR).
- Introduce operation vector (c2_conf_obj_ops).
- Add c2_conf_obj::co_parent pointer.
- Concrete objects: label "configuration data" (public) sections
  instead of "private" sections.
- Get rid of fixed length arrays.
- Add missing c2_tlink members to c2_conf_{nic,sdev,partition}.

This commit begins implementation of the "VFS-like solution"
proposed by Nikita.
---
 conf/obj.h | 156 ++++++++++++++++++++++++++++++++++++++-----------------------
 1 file changed, 98 insertions(+), 58 deletions(-)

diff --git a/conf/obj.h b/conf/obj.h
index 3707b3e..c18488a 100644
--- a/conf/obj.h
+++ b/conf/obj.h
@@ -27,7 +27,7 @@
 #endif
 
 /* XXX @todo Move definitions from cfg/cfg.h to conf/schema.ff */
-#include "cfg/cfg.h"
+#include "cfg/cfg.h"   /* c2_cfg_service_type */
 
 #include "lib/chan.h"  /* c2_chan */
 #include "fid/fid.h"   /* c2_fid */
@@ -147,6 +147,7 @@ enum c2_conf_status {
 
 /** Type of configuration object. */
 enum c2_conf_objtype {
+	C2_CO_DIR,
 	C2_CO_PROFILE,
 	C2_CO_FILESYSTEM,
 	C2_CO_SERVICE,
@@ -157,113 +158,152 @@ enum c2_conf_objtype {
 	C2_CO_NR
 };
 
+struct c2_conf_obj_ops;
+
 /**
  * Generic configuration object.
  *
- * This structure consists of fields that are common to all
- * configuration objects. It is embedded as a first member into each
- * concrete configuration object.
+ * The fields of c2_conf_obj structure are common to all configuration
+ * objects.  This structure is embedded (as the first member) into
+ * each concrete configuration object.
  */
 struct c2_conf_obj {
-	struct c2_conf_buf   co_key;
-/* private: internal use only */
-	enum c2_conf_objtype co_type; /* XXX try to get rid of this field */
-	enum c2_conf_status  co_status;
+	struct c2_conf_obj     *co_parent;
+	struct c2_conf_obj_ops *co_ops;
+	enum c2_conf_objtype    co_type;
+	struct c2_conf_buf      co_key;
+	enum c2_conf_status     co_status;
 	/**
 	 * Reference counter.
-	 *
 	 * The object is "pinned" if this value is non-zero.
 	 */
-	uint64_t             co_nrefs;
+	uint64_t                co_nrefs;
 	/**
 	 * Channel on which "object loading completed" and "object
 	 * unpinned" events are announced.
 	 */
-	struct c2_chan       co_chan;
-	/** This field is reserved for confc and confd. */
-	const void          *co_private;
+	struct c2_chan          co_chan;
+	/** This field is reserved for confc and confd implementations. */
+	const void             *co_private;
+};
+
+struct c2_conf_dircur;
+
+/** Object's operation vector. */
+struct c2_conf_obj_ops {
+	/** Finds a child of given object. */
+	int (*coo_lookup)(struct c2_conf_obj *parent,
+			  const struct c2_conf_buf *key);
+	/** Gets next directory entry (C2_CO_DIR only). */
+	int (*coo_readdir)(struct c2_conf_obj *dir,
+			   struct c2_conf_dircur *cursor,
+			   struct c2_conf_obj **dest);
+};
+
+/** Directory object --- a container for configuration objects. */
+struct c2_conf_dir {
+	struct c2_conf_obj cd_obj;
+	struct c2_tl       cd_items;
 };
 
 struct c2_conf_filesystem;
 
 struct c2_conf_profile {
 	struct c2_conf_obj         cp_obj;
-/* private: internal use only */
 	struct c2_conf_filesystem *cp_filesystem;
 };
 
 struct c2_conf_filesystem {
-	struct c2_conf_obj cf_obj;
-	struct c2_fid      cf_rootfid;
-	uint64_t           cf_params[C2_CFG_PARAM_LEN];
-/* private: internal use only */
+	struct c2_conf_obj  cf_obj;
+	struct c2_conf_dir *cf_services;
+/* configuration data (for the application) */
+	struct c2_fid       cf_rootfid;
 	/**
-	 * Services of this filesystem.
-	 *
-	 * List of c2_conf_service objects, linked through
-	 * cs_filesystem_linkage member.
+	 * Filesystem parameters. NULL terminated array of C strings.
+	 * XXX @todo Make it an array of name-value pairs (attributes).
 	 */
-	struct c2_tl       cf_services;
+	const char         *cf_params;
 };
 
 struct c2_conf_node;
 
 struct c2_conf_service {
 	struct c2_conf_obj       cs_obj;
-	enum c2_cfg_service_type cs_type;
-	char cs_endpoints[C2_CFG_SERVICE_MAX_END_POINTS][C2_CFG_NAME_LEN];
-/* private: internal use only */
+	/** The node this service is hosted at. */
 	struct c2_conf_node     *cs_node;
-	/** Linkage to c2_conf_filesystem::cf_services. */
+	/**
+	 * Linkage to ->cd_items of the c2_conf_dir hanging from
+	 * c2_conf_filesystem::cf_services.
+	 */
 	struct c2_tlink          cs_filesystem_linkage;
 	/** Magic for a list of services. */
 	uint64_t                 cs_magic;
+/* configuration data (for the application) */
+	enum c2_cfg_service_type cs_type;
+	/** Service end points. NULL terminated array of C strings. */
+	const char              *cs_endpoints;
 };
 
 /** Descriptor for a tlist of filesystem's services. */
 C2_TL_DESCR_DECLARE(c2_conf_filesystem_services, extern);
 
 struct c2_conf_node {
-	struct c2_conf_obj cn_obj;
-	struct c2_tl       cn_services;
-	uint32_t           cn_memsize;
-	uint32_t           cn_nr_processors;
-	uint64_t           cn_last_state;
-	uint64_t           cn_flags;
-	uint64_t           cn_pool_id;
-/* private: internal use only */
-	struct c2_tl       cn_nics;
-	struct c2_tl       cn_sdevs;
+	struct c2_conf_obj  cn_obj;
+	struct c2_conf_dir *cn_nics;
+	struct c2_conf_dir *cn_sdevs;
+/* configuration data (for the application) */
+	uint32_t            cn_memsize;
+	uint32_t            cn_nr_processors;
+	uint64_t            cn_last_state;
+	uint64_t            cn_flags;
+	uint64_t            cn_pool_id;
 };
 
 struct c2_conf_nic {
-	struct c2_conf_obj   ni_obj;
-	uint32_t             ni_iface_type;
-	uint32_t             ni_mtu;
-	uint64_t             ni_speed;
-	char                 ni_filename[C2_CFG_NAME_LEN];
-	uint64_t             ni_last_state;
+	struct c2_conf_obj ni_obj;
+	/**
+	 * Linkage to ->cd_items of the c2_conf_dir hanging from
+	 * c2_conf_node::cn_nics.
+	 */
+	struct c2_tlink    ni_linkage;
+/* configuration data (for the application) */
+	uint32_t           ni_iface_type;
+	uint32_t           ni_mtu;
+	uint64_t           ni_speed;
+	const char        *ni_filename;
+	uint64_t           ni_last_state;
 };
 
 struct c2_conf_sdev {
-	struct c2_conf_obj   sd_obj;
-	uint32_t             sd_type;
-	uint32_t             sd_media;
-	uint64_t             sd_size;
-	uint64_t             sd_last_state;
-	uint64_t             sd_flags;
-	char                 sd_filename[C2_CFG_NAME_LEN];
-/* private: internal use only */
-	struct c2_tl         sd_partitions;
+	struct c2_conf_obj  sd_obj;
+	struct c2_conf_dir *sd_partitions;
+	/**
+	 * Linkage to ->cd_items of the c2_conf_dir hanging from
+	 * c2_conf_node::cn_sdevs.
+	 */
+	struct c2_tlink     sd_linkage;
+/* configuration data (for the application) */
+	uint32_t            sd_type;
+	uint32_t            sd_media;
+	uint64_t            sd_size;
+	uint64_t            sd_last_state;
+	uint64_t            sd_flags;
+	const char         *sd_filename;
 };
 
 struct c2_conf_partition {
-	struct c2_conf_obj   pa_obj;
-	uint64_t             pa_start;
-	uint64_t             pa_size;
-	uint32_t             pa_index;
-	uint32_t             pa_type;
-	char                 pa_filename[C2_CFG_NAME_LEN];
+	struct c2_conf_obj pa_obj;
+	/**
+	 * Linkage to ->cd_items of the c2_conf_dir hanging from
+	 * c2_conf_sdev::sd_partitions.
+	 */
+	struct c2_tlink    pa_linkage;
+/* configuration data (for the application) */
+	uint64_t           pa_start;
+	uint64_t           pa_size;
+	uint32_t           pa_index;
+	uint32_t           pa_type;
+	const char        *pa_filename;
 };
 
 /** @} conf_dfspec_obj */
-- 
1.8.3.2


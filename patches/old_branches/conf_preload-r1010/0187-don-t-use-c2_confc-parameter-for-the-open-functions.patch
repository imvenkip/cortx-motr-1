From a4ca9c4217953869e95afa3384c0a24b0768c2ec Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Thu, 17 May 2012 01:55:19 +0300
Subject: [PATCH 187/311] don't use c2_confc parameter for the "open" functions

Take the c2_confc pointer from the origin object or from
c2_confc_ctx.

LogD: #1331
RB: r/714
---
 conf/confc.c |  7 +++++--
 conf/confc.h | 32 ++++++++++++++++++++++----------
 2 files changed, 27 insertions(+), 12 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 2563f2a..8647d80 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -697,14 +697,17 @@ int c2__confc_open(struct c2_confc_ctx *ctx, struct c2_conf_obj *origin,
 	return _open(ctx, origin, path, false);
 }
 
-int c2__confc_open_sync(void **obj, struct c2_confc *client,
-			struct c2_conf_obj *origin,
+int c2__confc_open_sync(void **obj, struct c2_conf_obj *origin,
 			const struct c2_conf_pathcomp *path)
 {
 	struct c2_confc_ctx ctx;
 	struct c2_clink     clink;
 	int                 rc;
+	struct c2_confc    *client;
 
+	C2_PRE(origin != NULL);
+	client = origin->co_private;
+	C2_PRE(XXX_bob_check(client));
 	C2_PRE(confc_is_initialized(client));
 
 	c2_confc_ctx_init(&ctx, client);
diff --git a/conf/confc.h b/conf/confc.h
index ae516b2..00bbd3d 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -152,6 +152,10 @@
  * A caller of c2_confc_open_sync() or c2_confc_diropen_sync() will be
  * blocked while confc is processing the request.
  *
+ * @note  `origin' argument of c2_confc_open_sync() and
+ *        c2_confc_diropen_sync() is not allowed be NULL.  The same
+ *        argument of their asynchronous counterparts can be NULL.
+ *
  * All opened configuration objects and directories must be closed
  * before c2_confc_fini() is called.  c2_confc_close() and
  * c2_confc_dirclose() are used for this purpose.
@@ -194,7 +198,7 @@
  *
  * static int filesystem_open_sync(struct c2_conf_filesystem **fs)
  * {
- *     return c2_confc_open_sync(fs, confc, NULL,
+ *     return c2_confc_open_sync(fs, confc->cc_root,
  *                               C2_CONF_REL(C2_CO_FILESYSTEM));
  * }
  * @endcode
@@ -206,13 +210,16 @@
  * #include "conf/confc.h"
  * #include "conf/obj.h" // c2_conf_service
  *
+ * struct c2_confc *confc = ...;
+ *
  * static int service_by_type(enum c2_cfg_service_type tos)
  * {
  *     struct c2_confc_dir    *d;
  *     struct c2_conf_service *svc;
  *     int rc;
  *
- *     rc = c2_confc_diropen_sync(&d, NULL, C2_CONF_REL(C2_CO_FILESYSTEM),
+ *     rc = c2_confc_diropen_sync(&d, confc->cc_root,
+ *                                C2_CONF_REL(C2_CO_FILESYSTEM),
  *                                C2_CONF_REL(C2_CO_SERVICE));
  *     if (rc != 0)
  *         return rc;
@@ -250,7 +257,7 @@
  *     struct c2_conf_sdev    *sdev;
  *     int ret;
  *
- *     ret = c2_confc_diropen_sync(&services, NULL,  // /fs/services
+ *     ret = c2_confc_diropen_sync(&services, confc->cc_root,  // /fs/services
  *                                 C2_CONF_REL(C2_CO_FILESYSTEM),
  *                                 C2_CONF_REL(C2_CO_SERVICE));
  *     if (ret != 0)
@@ -261,7 +268,7 @@
  *             continue;
  *
  *         // svc/node
- *         ret = c2_confc_open_sync(&node, confc, svc, C2_CONF_REL(C2_CO_NODE));
+ *         ret = c2_confc_open_sync(&node, svc, C2_CONF_REL(C2_CO_NODE));
  *         if (ret != 0)
  *             break;
  *
@@ -459,23 +466,25 @@ int c2__confc_open(struct c2_confc_ctx *ctx, struct c2_conf_obj *origin,
  * If the function succeeds, *obj will point to the requested
  * configuration object.
  *
+ * @pre origin != NULL
+ *
  * Example:
  * @code
  * struct c2_conf_filesystem *fs;
  * int rc;
  *
  * // open `/filesystem'
- * rc = c2_confc_open_sync(&fs, confc, NULL, C2_CONF_REL(C2_CONF_FILESYSTEM));
+ * rc = c2_confc_open_sync(&fs, confc->cc_root,
+ *                         C2_CONF_REL(C2_CONF_FILESYSTEM));
  * @endcode
  *
  * @see c2_confc_open()
  */
-#define c2_confc_open_sync(obj, client, origin, ...)            \
-	c2__confc_open_sync((obj), (client), (origin),          \
+#define c2_confc_open_sync(obj, origin, ...)                    \
+	c2__confc_open_sync((obj), (origin),                    \
 			    (const struct c2_conf_pathcomp []){ \
 				    __VA_ARGS__, C2_CONF_EOP })
-int c2__confc_open_sync(void **obj, struct c2_confc *client,
-			struct c2_conf_obj *origin,
+int c2__confc_open_sync(void **obj, struct c2_conf_obj *origin,
 			const struct c2_conf_pathcomp *path);
 
 /* XXX[future]
@@ -517,13 +526,16 @@ int c2__confc_diropen(struct c2_confc_ctx *ctx, struct c2_conf_obj *origin,
  * If the function succeeds, *dir will point to the requested
  * collection (aka directory).
  *
+ * @pre origin != NULL
+ *
  * Example:
  * @code
  * struct c2_confc_dir *dir;
  * int rc;
  *
  * // open `/filesystem/services'
- * rc = c2_confc_diropen_sync(&dir, NULL, C2_CONF_REL(C2_CONF_FILESYSTEM),
+ * rc = c2_confc_diropen_sync(&dir, confc->cc_root,
+ *                            C2_CONF_REL(C2_CONF_FILESYSTEM),
  *                            C2_CONF_REL(C2_CONF_SERVICE));
  * @endcode
  *
-- 
1.8.3.2


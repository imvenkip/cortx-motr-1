From 7a904895f8815890f5830064e6b7bd1c81e81ab4 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Mon, 30 Apr 2012 10:58:26 +0300
Subject: [PATCH 152/311] Updated DLD of configuration server confd updated,
 accordig to Review Request #765, r2.

---
 conf/confd.c | 288 ++++++++++++++++++++++++++++++++++++++---------------------
 conf/confd.h | 182 ++++++++++++++++++++++---------------
 2 files changed, 292 insertions(+), 178 deletions(-)

diff --git a/conf/confd.c b/conf/confd.c
index 46ffd61..4326a06 100644
--- a/conf/confd.c
+++ b/conf/confd.c
@@ -18,7 +18,11 @@
  * Original creation date: 19-Mar-2012
  */
 
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
 #include "conf/confd.h"
+
 /**
  * @page confd-dld Configuration server (confd) DLD
  *
@@ -29,10 +33,10 @@
  * - @ref confd-dld-highlights
  * - @subpage confd-dld-fspec "Functional Specification"
  * - @ref confd-dld-lspec
-      - @ref confd-dld-lspec-comps
-      - @ref confd-dld-lspec-state
-      - @ref confd-dld-lspec-thread
-      - @ref confd-dld-lspec-numa
+ *    - @ref confd-dld-lspec-comps
+ *    - @ref confd-dld-lspec-state
+ *    - @ref confd-dld-lspec-thread
+ *    - @ref confd-dld-lspec-numa
  * - @ref confd-dld-conformance
  * - @ref confd-dld-ut
  * - @ref confd-dld-st
@@ -66,9 +70,6 @@
  *   outlined in section 4.1 of the HLD. The same data structures
  *   should be used for confc and confd caches, if possible.
  *   Configuration structures must be kept in memory.
- * - @b r.conf.cache.pinning
- *   Pinning of an object protects existence of this object in the cache.
- *   Pinned object can be moved from a stub condition to "ready".
  * - @b r.conf.cache.unique-objects
  *   Configuration cache must not contain multiple objects with the
  *   same identity (identity of a configuration object is a tuple of
@@ -76,86 +77,147 @@
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-depends Dependencies
- * Confd depends on the following subsystems,
- * most reasonable functions are listed above:
+ * Confd depends on the following subsystems:
+ * - @ref rpc_service <!-- rpc/service.h -->
+ * - @ref db  <!-- db/db.h -->
+ * - @ref fom <!-- fop/fom.h -->
+ * - @ref fop <!-- fop/fop.h -->
+ * - @ref reqh <!-- reqh/reqh.h -->
+ * - @ref colibri_setup <!-- colibri/colibri_setup.h -->
+ *
+ * Most reasonable functions, confd depends on, are listed above:
  * - RPC layer:
- *   - c2_rpc_server_start() used to start rpc server.
- *   - c2_rpc_server_stop() used to stop rpc server.
- *   - c2_cs_rpcmach_get() used to retrieve rpcmach to examine rpc statistics.
  *   - c2_rpc_reply_post() used to send FOP-based reply to Confc.
  *   - C2_RPC_SERVER_CTX_DECLARE() used to create rpc server context;
  * - DB layer:
- *   - c2_dbenv_init();
- *   - c2_dbenv_fini();
- *   - c2_db_pair_setup();
- *   - c2_table_lookup().
+ * - c2_dbenv_init() used to initialize environment to access
+ *     configuration db;
+ * - c2_dbenv_fini() used to deinitialize db environment;
+ * - c2_db_pair_setup() and c2_table_lookup() used to access
+ *     configuration values stored in db.
  * - FOP, FOM, REQH:
  *   - c2_fom_block_at();
  *   - c2_fom_block_leave();
  *   - c2_fom_block_enter().
- * - fop2c, onwire.ff:
- *   - struct c2_fom_type used to define a handler called by a thread
- *     of request hander on different stages of FOP processing.
+ * - Colibri setup:
+ *   - c2_cs_setup_env() configures Colibri to use confd's environment.
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-highlights Design Highlights
  *
  * - User-space implementation.
- * - Provides a "FOP-based" interface for accessing configuration
+ * - Provides a "FOP-based" interface for confc to access configuration
  *   information.
  * - Relies on request handler threading model and is animated by
  *   reqh. Request processing is based on FOM execution.
  * - Supports the reception of multiple requests from configuration
  *   consumers.
- * - Works as a stand-alone application or as a part of an aggregating
- *   service.
- * - Stores configuration information in its own configuration cache,
- *   which consists of confgiuration objects storage and configuration
- *   objects graph, representing relations in between them.
+ * - Maintains its own configuration cache, implementation of which is
+     common to confd and confc.
  * - Several confd state machines (FOMs) can work with configuration
- *   cache, read from it and add new objects to it concurrently.
+ *   cache concurrently.
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-lspec Logical Specification
+ *
+ * Initialization, termination and update of configuration db of
+ * confd, performed in c2_confd_start() and c2_confd_terminate() and
+ * c2_confd_update(), is trivial. The most of work, such as state
+ * transition, accessing to db and cache, request receiving, request
+ * replying, is done in reqh_confd_req_fom_state() handler called by
+ * request handler while processing c2_conf_fetch FOP FOM.
+ *
+ * reqh_confd_req_fom_state() - called by reqh to handle incoming
+ * confc requests. Implementation of this function processes all
+ * FOP-FOM specific and C2_CONFD_STATUS_* states:
+ * @code
+ * static int reqh_confd_req_fom_state(struct c2_fom *fom)
+ *  {
+ *       checks if FOM should transition into a generic/standard
+ *       phase or FOP specific phase.
+ *
+ *       if (fom->fo_phase < FOPH_NR) {
+ *               result = c2_fom_state_generic(fom);
+ *       } else {
+ *		... process C2_CONFD_STATUS_* states transitions ...
+ *	 }
+ *  }
+ * @endcode
+ *
+ * Typical state handler of c2_conf_fetch FOP FOM is presented below:
+ * @code
+ * if (fom->fo_phase == C2_CONFD_STATUS_...) {
+ *
+ *  ... Do some work according to the state:
+ *
+ *  1) in C2_CONFD_STATUS_INITIAL state check incoming path embedded in
+ *  c2_conf_fetch FOP, which is done by check_request() call.
+ *  2) in C2_CONFD_STATUS_SERIALIZE state prepare outgoing configuration
+ *  objects for sending with obj_serialize() call.
+ *  3) in C2_CONFD_STATUS_LOAD state load requested configuration objects to
+ *  cache if they are missing. obj_load() call does it.
+ *  4) in C2_CONFD_STATUS_WAIT state FOM may transit while loading multiple
+ *  configuration values. obj_wait() call prepares FOM for unblocking waiting.
+ *  5) in C2_CONFD_STATUS_FAILURE state failure_handle() is called to
+ *  prepare c2_conf_fetch_resp to be sent with appropriate error information.
+ *
+ * ... Check internal data structures of confd and make a decision with
+ *  state is next to be transited. This is done by next_state() function.
+ *
+ * ... Select set next state of FOM processing and define, whether
+ * current state has already processed, or reqh should pass into it again:
+ *
+ *  fom->fo_phase = next_state();
+ *
+ * ... Return FSO_WAIT to transit into the next state or FSO_AGAIN to
+ * remain in the same.
+ *
+ * }
+ * @endcode
+ *
+ * The implementation of reqh_confd_req_fom_state() need the following
+ * fuctions to be defined:
+ *
+ * - check_request() - checks incoming request and validates requested
+ *     path of configuration objects.
+ *
  * - next_state() - transits confd states depending on the current
- *   state and on the state of configuration objects, represented by
- *   the confd::c_root
+ *   state and on the state of configuration objects.
  *
- * - obj_load() - loads confd::c_root from cache or configuration db,
- *   acquires c2_fom_block_{enter,leave}() to inform reqh about
- *   potential I/O.
+ * - obj_load() - loads requested configuration objects from cache or
+ *   configuration db, acquires c2_fom_block_{enter,leave}() to inform
+ *   reqh about potential I/O.
  *
  * - obj_serialize() - serializes given object to FOP.
  *
  * - obj_wait() - handles wait state of configuration request
- *   processing.  acquires c2_fom_block_at() to inform reqh to create
- *   an extra thread.
+ *   processing, acquires c2_fom_block_at().
  *
- * - reqh_confd_req_fom_state() - called by reqh to handle incoming
- *   confc requests.
- *
- * - handle_failure() - handles occurred errors.
+ * - failure_handle() - handles occurred errors.
  *
  * @subsection confd-dld-lspec-comps Component Overview
  *
- * Confd provides FOP-based interface to access configuration values,
- * stored in configuration db. Confd maintains a cache of
- * configuration objects organized as a directed acyclic graph (DAG).
- * When Confc requests a configuration object, cache is filled with
- * corresponding values fetched from configuration DB. If cache has
- * already a requested object then configuration DB is not accessed.
- * After c2_confd_init() DAG and cache are empty.
- *
- * c2_confd::c2_confd_conf_accessor::ca_cache data
- * structures represent configuration cache of confd. ca_cache is a
- * storage of configuration objects and relations between objects are being done by setting 
- * corresponding pointers of the object to point the next level of a DAG.
- * Confd shares the same implementation of configuration
- * cache with confc, description of which can be found in @ref
- * confc-dld-lspec and @ref confc-dld-lspec.
- * 
+ * Confd is a Colibri service with a FOP-based interface to access
+ * configuration values stored in configuration db. Confd maintains a
+ * cache of configuration objects organized as a directed acyclic
+ * graph (DAG).  When confc requests a configuration object, cache is
+ * filled with corresponding values fetched from configuration db. If
+ * cache has already a requested object then configuration db is not
+ * accessed.  After c2_confd_init() call cache is empty.
+ *
+ * An access to configuration db is being performed by synchronous
+ * colibri db API @ref db. In future, to avoid synchronous I/O
+ * accessing to db may become asynchronous.
+ *
+ * Confd shares the same implementation of configuration cache with
+ * confc, description of which can be found in @ref confc-dld-lspec.
  *
  * @subsection confd-dld-lspec-state State Specification
+ *
+ * Confd state machine is implemented on basis of FOM of c2_conf_fetch
+ * FOP.  After corresponding FOM went through a list of FOM specific
+ * states it transited into C2_CONFD_STATUS_INITIAL state.
+ *
  * Confd state transition diagram:
  * @dot
  * digraph confd_states {
@@ -168,63 +230,73 @@
  *	C2_CONFD_STATUS_TERMINATE [style=filled, fillcolor=lightgrey];
  *	C2_CONFD_STATUS_FAILURE [style=filled, fillcolor=lightgrey];
  *
- *	C2_CONFD_STATUS_INITIAL -> C2_CONFD_STATUS_SERIALIZE [label="configuration FOP arrived, next_state() == C2_CONFD_STATUS_SERIALIZE"];
- *	C2_CONFD_STATUS_SERIALIZE -> C2_CONFD_STATUS_LOAD [label="c2_conf_obj::co_status == C2_CS_MISSING, next_state() == C2_CONFD_STATUS_LOAD"];
- *	C2_CONFD_STATUS_SERIALIZE -> C2_CONFD_STATUS_WAIT [label="c2_conf_obj::co_status == C2_CS_LOADING, next_state() == C2_CONFD_STATUS_WAIT"];
+ *	C2_CONFD_STATUS_INITIAL -> C2_CONFD_STATUS_SERIALIZE [label="configuration FOP arrived \n, next_state() == C2_CONFD_STATUS_SERIALIZE"];
+ *	C2_CONFD_STATUS_SERIALIZE -> C2_CONFD_STATUS_LOAD [label="c2_conf_obj::co_status == C2_CS_MISSING \n, next_state() == C2_CONFD_STATUS_LOAD"];
+ *	C2_CONFD_STATUS_SERIALIZE -> C2_CONFD_STATUS_WAIT [label="c2_conf_obj::co_status == C2_CS_LOADING \n, next_state() == C2_CONFD_STATUS_WAIT"];
  *	C2_CONFD_STATUS_SERIALIZE -> C2_CONFD_STATUS_TERMINATE [label="serialisation is done"];
- *	C2_CONFD_STATUS_SERIALIZE -> C2_CONFD_STATUS_FAILURE [label="failed to load object or (next_state() < 0)"];
- *	C2_CONFD_STATUS_LOAD -> C2_CONFD_STATUS_FAILURE [label="db does not contain requested object or (next_state() < 0)"];
- *	C2_CONFD_STATUS_LOAD -> C2_CONFD_STATUS_SERIALIZE [label="configuration object loaded, next_state()==C2_CONFD_STATUS_SERIALIZE}"];
- *	C2_CONFD_STATUS_WAIT -> C2_CONFD_STATUS_SERIALIZE [label="c2_conf_obj::co_chan signalled, next_state()==C2_CONFD_STATUS_SERIALIZE"];
+ *	C2_CONFD_STATUS_SERIALIZE -> C2_CONFD_STATUS_FAILURE [label="failed to load object \n or (next_state() < 0)"];
+ *	C2_CONFD_STATUS_LOAD -> C2_CONFD_STATUS_FAILURE [label="db does not contain requested \n object or (next_state() < 0)"];
+ *	C2_CONFD_STATUS_LOAD -> C2_CONFD_STATUS_SERIALIZE [label="configuration object loaded, \n next_state()==C2_CONFD_STATUS_SERIALIZE}"];
+ *	C2_CONFD_STATUS_WAIT -> C2_CONFD_STATUS_SERIALIZE [label="c2_conf_obj::co_chan signalled, \n next_state()==C2_CONFD_STATUS_SERIALIZE"];
  * }
  * @enddot
  *
  * Incoming request state (FOM of c2_conf_fetch FOP) is processed in
  * reqh_confd_req_fom_state().
  *
- * - After c2_confd_init() Confd transits into C2_CONFD_STATUS_INITIAL state.
+ * - After c2_confd_init() confd state machine (FOM) transits into
+ *   C2_CONFD_STATUS_INITIAL state.
  *
  * - C2_CONFD_STATUS_INITIAL:
- *   When reqh_confd_req_fom_state() is called and FOP has valid configuration request data,
- *   confd::c_root is being filled with a DAG sent with a FOP. Then next_state() is called.
- *   next_state() checks if confd::c_root is valid and transits into C2_CONFD_STATUS_SERIALIZE.
+ *   When reqh_confd_req_fom_state() is called and FOP has valid
+ *   configuration request data, confd::c_root is being filled with a
+ *   DAG sent with a FOP. Then next_state() is called.  next_state()
+ *   checks if confd::c_root is valid and transits into
+ *   C2_CONFD_STATUS_SERIALIZE.
  *
  * - C2_CONFD_STATUS_SERIALIZE:
- *   In this state confd::c_root is being examined. If DAG consists of objects with
- *   co_status == C2_CS_READY then obj_serialize() is called. This produces a FOP to
- *   send back to Confc. Here c2_rpc_reply_post() is called to send a FOP. next_state()
- *   is called and state transits to C2_CONFD_STATUS_INITIAL.
- *   If DAG consists of objects with co_status != C2_CS_READY and
- *   confd::c_state != C2_CONFD_STATUS_LOAD then next_state() call transits confd into
- *   C2_CONFD_STATUS_LOAD, otherwise into C2_CONFD_STATUS_WAIT.
- *   If obj_serialize() < 0 then transit into C2_CONFD_STATUS_FAILURE.
+ *   In this state confd::c_root is being examined. If DAG consists of
+ *   objects with co_status == C2_CS_READY then obj_serialize() is
+ *   called. This produces a FOP to send back to Confc. Here
+ *   c2_rpc_reply_post() is called to send a FOP. next_state() is
+ *   called and state transits to C2_CONFD_STATUS_INITIAL.  If DAG
+ *   consists of objects with co_status != C2_CS_READY and
+ *   confd::c_state != C2_CONFD_STATUS_LOAD then next_state() call
+ *   transits confd into C2_CONFD_STATUS_LOAD, otherwise into
+ *   C2_CONFD_STATUS_WAIT.  If obj_serialize() < 0 then transit into
+ *   C2_CONFD_STATUS_FAILURE.
  *
  * - C2_CONFD_STATUS_LOAD:
- *   In this state objects in DAG and Confd cache are being filled from configuration db.
- *   State in all objects in DAG is set to co_status == C2_CS_LOADING. Untill all objects
- *   in DAG aren't loaded, Confd stays in this state.
- *   As far as loading may take a long time, before entering the state c2_fom_block_enter()
- *   is called. When loading stage finished, reqh has to be informed with c2_fom_block_leave().
- *   next_state() call transits confd into C2_CONFD_STATUS_SERIALIZE state.
- *   c2_chan_broadcast() is called on c2_conf_obj::co_chan to notify waiting threads.
- *   If db does not contain requested object then transit into C2_CONFD_STATUS_FAILURE.
+ *   In this state objects in DAG and Confd cache are being filled
+ *   from configuration db.  State in all objects in DAG is set to
+ *   co_status == C2_CS_LOADING. Untill all objects in DAG aren't
+ *   loaded, Confd stays in this state.  As far as loading may take a
+ *   long time, before entering the state c2_fom_block_enter() is
+ *   called. When loading stage finished, reqh has to be informed with
+ *   c2_fom_block_leave().  next_state() call transits confd into
+ *   C2_CONFD_STATUS_SERIALIZE state.  c2_chan_broadcast() is called
+ *   on c2_conf_obj::co_chan to notify waiting threads.  If db does
+ *   not contain requested object then transit into
+ *   C2_CONFD_STATUS_FAILURE.
  *
  * - C2_CONFD_STATUS_WAIT:
- *   In this state Confd creates a link on c2_conf_obj::co_chan and waits on it
- *   with c2_chan_wait() until it's signalled. next_state() call transits confd
- *   into C2_CONFD_STATUS_SERIALIZE state. c2_fom_block_at() should be called
- *   before c2_chan_wait() call. This may create an extra processing thread in reqh.
- *   next_state() call transits confd into C2_CONFD_STATUS_SERIALIZE state.
- *   If timeout occured then transits into C2_CONFD_STATUS_FAILURE.
+ *   In this state Confd creates a link on c2_conf_obj::co_chan and
+ *   waits on it with c2_chan_wait() until it's
+ *   signalled. next_state() call transits confd into
+ *   C2_CONFD_STATUS_SERIALIZE state. c2_fom_block_at() should be
+ *   called before c2_chan_wait() call. This may create an extra
+ *   processing thread in reqh.  next_state() call transits confd into
+ *   C2_CONFD_STATUS_SERIALIZE state.  If timeout occured then
+ *   transits into C2_CONFD_STATUS_FAILURE.
  *
  * - C2_CONFD_STATUS_TERMINATE:
  *   Transits in this state when c2_confd_terminate() is called.
  *
  * - C2_CONFD_STATUS_FAILURE:
- *   In this state confd handles errors occured while processing of incoming FOP
- *   request and calls next_state(). This transfers Confd into intial state.
- *   On any error an c2_conf_fetch_resp will contain an error code and
- *   an empty sequence of descriptors.
+ *   In this state confd handles errors occured while processing of
+ *   incoming FOP request and calls next_state(). This transfers Confd
+ *   into intial state.  On any error an c2_conf_fetch_resp FOP will
+ *   contain an error code and an empty sequence of descriptors.
  *
  * @subsection confd-dld-lspec-thread Threading and Concurrency Model
  *
@@ -244,10 +316,12 @@
  * handler may be implemented using c2_chan_wait(). c2_fom_block_at()
  * should be called prior to c2_chan_wait().
  *
- * @b Future:
- * Currently, synchronization of c2_confd::c2_confd_conf_accessor::ca_cache
- * is being performed my locking on c2_confd::c2_confd_conf_accessor::ca_lock
- * mutex. It possible to avoid this locking in case, when loading a disjoint paths.
+ * Multiple concurrently executing FOMs share the same configuration
+ * cache and db environment of confd, so access to them should be
+ * synchronized. Assuming that access to db and cache, while adding
+ * configuration values to cache, is done at the same time and
+ * workload of confd is predominantly read-only, so simplistic
+ * synchronization is enough (c2_confd::c_accr::ca_lock).
  *
  * @subsection confd-dld-lspec-numa NUMA Optimizations
  *
@@ -255,8 +329,8 @@
  * for different networks, several confd instances should be created
  * --- one per each request handler.
  *
- * However, for optimizations reasons, several confds may share the
- * same configuration cache.
+ * However, for optimizations reasons, the same configuration cache is
+ * shared between confd instances running in different localities.
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-conformance Conformance
@@ -276,7 +350,7 @@
  *
  * @test obj_serialize() will be tested.
  * @test next_state() will be tested.
- * 
+ *
  * @test Load predefined configuration object from configuration db.
  * Check its predefined value.
  *
@@ -309,7 +383,7 @@
  *
  * The operating value of configuration cache size can be selected
  * according either to empirical considerations or to the requests
- * intencity of confc and distribution of c2_conf_fetch processing
+ * intencity of confc and distribution of c2_conf_fetch FOP processing
  * time in confd. Queuing theory can be used in the second case.
  *
  * <hr> <!------------------------------------------------------------->
@@ -411,14 +485,13 @@ static int reqh_confd_req_fom_state(struct c2_fom *fom)
 /**
  * Serialises given DAG into FOP-package.
  *
+ * @param confd	configuration server instance.
  * @param path path to the object/directory requested by confc.
- * @param out, FOP, prepared to be sent as a reply with c2_rpc_reply_post().
+ * @param fout FOP, prepared to be sent as a reply with c2_rpc_reply_post().
  *
  * @pre for_each(obj in path) obj.co_status == C2_CS_READY.
  * @pre out is not initialized.
  */
-
-
 static int obj_serialize(struct c2_confd *confd,
 			 struct c2_conf_pathcomp *path,
 			 struct c2_fop *fout)
@@ -427,8 +500,8 @@ static int obj_serialize(struct c2_confd *confd,
 
 /**
  * Transits confd into the next state.
- * This function checks confd::c_accr::ca_map for the state of 
- * configruation objects loaded into it and returns the next state
+ * This function checks confd::c_accr::ca_cache for the state of
+ * configuration objects loaded into it and returns the next state
  * in which FOM should be transited to. It takes into account current
  * state of FOM processing and the following states of configuration objects:
  * - when C2_CS_MISSING - may transit FOM into C2_CONFD_STATUS_FAILURE.
@@ -436,6 +509,7 @@ static int obj_serialize(struct c2_confd *confd,
  *   depending on current st.
  * - when C2_CS_READY - may transit FOM into the rest of `C2_CONFD_STATUS_'-states
  *
+ * @param confd	configuration server instance.
  * @param st current state of incoming FOP-request processing.
  */
 static int next_state(struct c2_confd *confd, enum c2_confd_status st)
@@ -445,6 +519,8 @@ static int next_state(struct c2_confd *confd, enum c2_confd_status st)
 /**
  * Loads confd::c_root of the DAG of configuration objects
  * from configuration db, or confd::c_accr::ca_map cache if mapping exists.
+ *
+ * @param confd	configuration server instance.
  */
 static int obj_load(struct c2_confd *confd)
 {
@@ -453,6 +529,8 @@ static int obj_load(struct c2_confd *confd)
 /**
  * Waits for every object, loaded into cache, c2_conf_obj::co_chan to
  * be signalled.
+ *
+ * @param confd	configuration server instance.
  */
 static int obj_wait(struct c2_confd *confd)
 {
@@ -460,8 +538,10 @@ static int obj_wait(struct c2_confd *confd)
 
 /**
  * Called when confd transits to C2_CONFD_STATUS_FAILURE
+ *
+ * @param confd	configuration server instance.
  */
-static void handle_failure(struct c2_confd *confd)
+static void failure_handle(struct c2_confd *confd)
 {
 }
 
diff --git a/conf/confd.h b/conf/confd.h
index 9a73cdf..33f95c0 100644
--- a/conf/confd.h
+++ b/conf/confd.h
@@ -31,11 +31,11 @@
  * Configuration server library (confd) is designed to work as a part
  * of user-space configuration server and provides a "FOP-based"
  * interface for accessing Colibri configuration information, stored
- * in configuration DB. Confd may work as a stand-alone application or
- * as a part of an aggregating service.
+ * in configuration db. Confd run within the context of a request
+ * handler launched by the colibri_setup program.
  *
  * Confd caches recently used configuration values fetched from
- * configuration DB in memory based data caches to speed up confc
+ * configuration db in memory based data caches to speed up confc
  * requests.
  *
  * - @ref confd-dld-fspec-data
@@ -51,29 +51,35 @@
  * @section confd-dld-fspec-data  Data Structures
  *
  * - c2_confd --- represents configuration server instance, stores
- *   structures to perform caching, accessing to configuration DB,
+ *   structures to perform caching, accessing to configuration db,
  *   request handling
  *
  * - c2_confd_conf_accessor --- represents data structures related to
  *   efficient configuration data access.
- *   - @c ca_db is a database environment to access configuration DB.
+ *   Members:
+ *   - @c ca_db is a database environment to access configuration db.
  *   - @c ca_cache is a @ref conf_cache, filled by values, retrieved
- *     configuration DB or recently used values
+ *     configuration db or recently used values
  *
  * - c2_confd_rpc_server --- represents data structures used for FOP
  *   transmittion.
  *
- * - c2_conf_fetch --- configuration client request, processed by confd.
+ * Confd receives multiple configuration requests from confcs
+ * containing a "path" of a requested configuration value retrieved
+ * from configuration db. Defining FOPs for configuration requests and
+ * replies allows using RPC layer as a transport:
  *
- * - c2_conf_fetch_resp --- configuration server response on confc request.
+ * - c2_conf_fetch FOP --- configuration request, originating from confc.
+ *
+ * - c2_conf_fetch_resp FOP --- confd's reply to c2_conf_fetch FOP.
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-fspec-sub  Subroutines
  *
- * - c2_confd_init() starts confd-server.
- * - c2_confd_fini() terminates started confd-server.
+ * - c2_confd_start() starts confd-server.
+ * - c2_confd_terminate() terminates started confd.
  *
  * - c2_confd_update() opens given configuration database,
- *   cleans confd caches.
+ *   cleans confd cache.
  *
  * - c2_confd_dump_cache() dumps configuration cache entries into a
  *   file in plain odd format.
@@ -81,25 +87,53 @@
  * <!------------------------------------------------------------------>
  * @subsection confd-dld-fspec-sub-setup Initialization and termination
  *
- * To run configuration server, the application which is to embed it
- * have to call c2_confd_start() to initialize internal data structures
- * of an instance of confd and to start it.
+ * Before confd is started, @ref colibri_setup calls c2_cs_setup_env()
+ * function to initialize corresponding request handler, network
+ * transport, stob file for request handler context and to specifiy an
+ * endpoint to which clients connect.
+ *
+ * To parametrize colibri_setup the following options are provided:
+ *  - Prefered network transport structure and the name of
+ *    RPC server used by confd;
+ *  - Request handler context;
+ *  - Type of reqh storage;
+ *  - Database file used by reqh;
+ *  - STOB file for reqh context;
+ *  - Network layer endpoint to which clients connect.
+ *
+ * To parametrize confd, user should provide the following arguments:
+ *  - path to configuration db, where configuration values are stored;
+ * Confd is initiated and put into operation by c2_confd_start() call.
  *
- * To configure confd, user should provide a path to configuration DB,
- * where configuration values are sored, a path to DB used for FOP
- * processing.  Prefered network transport structure and the name of
- * RPC server used by confd are also used to configure confd.
+ * User is able to run confd by selecting `-c' and `-C' options in
+ * colibri_setup().  For this c2_cs_setup_env() has to run
+ * c2_confd_start() and pass corresponding arguments.
  *
  * Initial configuration database is created with @ref yaml2db ---
- * YAML to Database Parser utility. Confd expects the following:
- *  - Configuration db to be created before confd started;
+ * YAML to database parser utility. Confd assumes that:
+ *  - Configuration db is created before confd started;
  *  - Confd uses configuration caching schema, described in @see https://docs.google.com/a/xyratex.com/document/d/1JmsVBV8B4R-FrrYyJC_kX2ibzC1F-yTHEdrm3-FLQYk/view
  *  - Format of configuration db, represented in yaml can be found in @ref yaml2db.
  *
+ * The following errors may occur while using of configuration db:
+ * @li Db is empty or is in unrecognized format.
+ * @li Db layout is different from metioned in @see https://docs.google.com/a/xyratex.com/document/d/1JmsVBV8B4R-FrrYyJC_kX2ibzC1F-yTHEdrm3-FLQYk/view
+ * @li Db has not a looked up key.
+ *
+ * In the first case, error occurs after db-API opens db generated by
+ * @ref yaml2db. This may happen while initialization process in
+ * c2_confd_start(). The corresponding error code is returned by
+ * c2_confd_start().  The second and the third case may occur while
+ * requesting (key, value) pairs from db. In such a case, internal
+ * state machine is transited into error processing state and
+ * c2_conf_fetch_resp FOP with data, treated as an error value is
+ * sent.
+ *
  * Initialized confd may be eventually terminated by c2_confd_terminate().
  *
- * After a confd instance is started it starts to manage configuration
- * database, its own internal cache structures and incomming FOP-requests.
+ * After a confd instance is started it manages configuration
+ * database, its own internal cache structures and incoming
+ * FOP-requests.
  *
  * @code
  * #include "conf/confd.h"
@@ -107,38 +141,37 @@
  * struct c2_confd confd;
  *
  * startup(...) {
+ *
+ *      struct c2_colibri colibri_ctx;
  *	struct c2_confd *confd;
- *	/ * Path to configuration DB * /
- *	const char *conf_db = "confd.db";
- *      / * Path to FOP processing engine DB * /
+ *	const char *conf_db  = "confd.db";
  *	const char *rpc_db   = "confd_rpc.db";
- *      / * Path to FOP processing engine log file * /
  *	const char *rpc_log  = "confd_rpc.log";
- *      / * Path to FOP processing engine stob * /
  *	const char *rpc_stob = "confd_rpc.stob";
- *	/ * confd RPC server name * /
- *	const char *srvname = "confd-001";
- *	int rc = c2_confd_start(&confd, conf_db, rpc_db, rpc_stob,
- *			rpc_stob, srvname, &c2_net_bulk_sunrpc_xprt);
+ *	const char *srvname  = "confd-001";
+ *      const char *rpc_endpoint = "192.168.1.199:1234";
+ *
+ *	char *confd_av[] = {
+ *		"colibri", "-r", "-T", "AD", "-D", rpc_db,
+ *		"-S", rpc_stob, "-e", rpc_endpoint
+ *	};
+ *
+ *      int rc = c2_cs_setup_env(&colibri_ctx, ARRAY_SIZE(confd_av), confd_av);
+ *	rc = c2_confd_start(&confd, srvname, conf_db, &c2_net_bulk_sunrpc_xprt);
  *	...
  * }
  *
  * ... Process incoming FOPs ...
- * ... Access configuration DB ...
+ * ... Access configuration db ...
  * ... Manage configuration cache ...
  *
  * shutdown(...) {
  *     c2_confd_terminate(confd);
  * }
- *
  * @endcode
- * <!------------------------------------------------------------------>
- * @subsection confd-dld-fspec-sub-use
  *
- * Confc accesses to values stored in configuration database of confd by
- * sending c2_conf_fetch FOPs using @ref rpc_layer_core. When confd is
- * able to fetch requested value it replies with a c2_conf_fetch_resp FOP.
- * @see @ref confd-dld-fspec-recipes for detailed example.
+ * <!------------------------------------------------------------------>
+ * @subsection confd-dld-fspec-sub-use Updating configuration values
  *
  * c2_confd_update() function is used to update configuration database
  * while confd is running. Function flushes all caches populated by
@@ -148,25 +181,30 @@
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-fspec-cli Command Usage
- * Not Applicable.
- * <hr> <!------------------------------------------------------------->
- * @section confd-dld-fspec-recipes  Recipes
  *
- * @subsection ex1  Typical Confc <-> Confd interaction
- * Client sends a c2_conf_fetch FOP:
+ * To configure confd from console, standard options described in
+ * @ref colibri_setup in cs_help() function are used. To extend
+ * standard options, the following new options are added:
+ * - `-c confd_name'  specifies confd name.
+ * - `-C confd_db_name' specifies configuration db path.
  *
+ * For example to run two confds with typical network and request
+ * handler options the following command is used:
  * @code
- *	fop = c2_fop_alloc(&c2_conf_fetch_fopt, NULL);
- *	C2_ASSERT(fop != NULL);
- *	/ * prepares fop-requst sent to confd,
- *          allocates requested path values. * /
- *	conf_fetch_prepare(fop);
- *	rc = c2_rpc_client_call(fop, session,
- *		&c2_fop_default_item_ops, CONNECT_TIMEOUT);
+ * ./colibri -r -T AD -D rpc.db -S rpc.stob -e "192.168.1.1:9191"
+ *    -c "confd-001" -C "conf-001.db"
+ *    -c "confd-002" -C "conf-002.db"
  * @endcode
  *
- * Configuration server processes Confc requests in state function of
- * c2_conf_fetch request:
+ * <hr> <!------------------------------------------------------------->
+ * @section confd-dld-fspec-recipes  Recipes
+ *
+ * @subsection ex1  Typical interaction between confc and confd
+ *
+ * Client sends a c2_conf_fetch FOP request to confd;
+ *
+ * Configuration server processes confc requests in
+ * `c2_fom_ops::fo_state()' state function of c2_conf_fetch FOP request:
  *
  * @code
  * int reqh_confd_req_fom_state(struct c2_fom *fom)
@@ -180,6 +218,7 @@
  *      C2_ASSERT(fop != NULL);
  *
  *	item = c2_fop_to_rpc_item(fop);
+ *	/ * send configuration request immediately avoiding rpc-formation  * /
  *	item->ri_group = NULL;
  *
  *	/ * processes incoming request and prepares reply * /
@@ -187,7 +226,6 @@
  *
  *      c2_rpc_reply_post(&fom_obj->fp_fop->f_item, item);
  *}
- *
  * @endcode
  *
  * @see confd_dfspec
@@ -203,8 +241,8 @@
 
 /**
  * Configuration data accessor.
- * Used to access to configuration data from DB or from cache
- * if it's populated with corresponding data.
+ * This object is used for reading configuration information from the
+ * cache or, in case of cache miss, from the configuration database.
  */
 struct c2_confd_conf_accessor {
 	/** Database path */
@@ -213,7 +251,7 @@ struct c2_confd_conf_accessor {
 	struct c2_dbenv		ca_db;
 	/** Registry of cached configuration objects */
 	struct c2_conf_map	ca_cache;
-	/** Protects embedding structure from concurrent access */
+	/** Protects this structure from concurrent access */
 	struct c2_mutex		ca_lock;
 };
 
@@ -233,63 +271,59 @@ struct c2_confd_rpc_server {
 
 /* Configuration server. */
 struct c2_confd {
-	/** ADDB context for the context */
 	struct c2_addb_ctx		c_addb;
-	/** Configuration data accessor */
 	struct c2_confd_conf_accessor	c_accr;
-	/** Configuration rpc server */
 	struct c2_confd_rpc_server      c_srv;
 };
 
+
 /**
  * Starts configuration server.
+ *
  * @param confd		Configuration server instance.
- * @param cdbpath	Path to DB with configuration values.
- * @param rdbpath       Path to RPC server DB
- * @param rstob		Path to RPC server STOB
- * @param rlog		Path to RPC server log
+ * @param cdbpath	Path to db with configuration values.
  * @param srvname	RPC server name
  * @param xprt		RPC server transport
  *
- * @pre c2_confd::c_cache is not initialised and c2_confd::c_db is not opened.
- * @return 0 on success initialization, <0 on error.
+ * @pre c2_confd::c_accr::ca_cache is not initialized and
+ * c2_confd::c_db is not opened.
  */
-int  c2_confd_start(struct c2_confd *confd, char *cdbpath,
-		    char *rdbpath, char *rstob, char *rlog,
+int  c2_confd_start(struct c2_confd *confd, const char *cdbpath,
 		    char *srvname, struct c2_net_xprt *xprt);
 
 /**
  * Terminates configuration server.
  * Destroys and deallocates all data structures.
+ *
  * @param confd		Configuration server instance.
  *
  * @pre c2_confd_start() was called and retured success.
- * @post c2_confd::c_cache is finalized and c2_confd::c_db is closed.
+ * @post c2_confd::c_accr::ca_cache is finalized and c2_confd::c_db is
+ * closed.
  */
 void c2_confd_terminate(struct c2_confd *confd);
 
 
 /**
  * Updates configuration from given configuration database,
- * removes all items in c2_confd::ca_cache.
+ * removes all items in c2_confd::c_accr::ca_cache.
  * @param confd		Configuration server instance.
  * @param cdbpath	Path to configuration database.
  *
- * @pre c2_confd_start() was called and retured success.
- * @return 0 on success initialization, <0 on error.
+ * @pre c2_confd_start() was called and returned success.
  */
 int c2_confd_update(struct c2_confd *confd, char *cdbpath);
 
 
 /**
  * Dumps configuration cache entries into a file in plain odd format.
+ *
  * @param confd		Configuration server instance.
  * @param out		Path path of a text file to dump into.
  *
  * @pre c2_confd_start() was called and retured success.
- * @return 0 on success initialization, <0 on error.
  */
-int c2_confd_dump_cache(struct c2_confd *confd, char *out);
+int c2_confd_cache_dump(struct c2_confd *confd, char *out);
 
 
 /** @} end group confd */
-- 
1.8.3.2


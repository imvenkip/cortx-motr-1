From 2438bcd4063296bde50c9f85e1e35c77187bbb20 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Thu, 26 Jul 2012 00:16:28 +0300
Subject: [PATCH 267/311] add c2_confc::cc_rpc field and use it for confd
 connection

Make use of struct c2_rpc_client_ctx (c2_confc::cc_rpc) in
c2_confc_{init,fini,invariant}().

+ confd_connect(), confd_disconnect(): new functions.

LogD #538
RB: r/849/diff/1/?file=22430#file22430line368
---
 conf/confc.c | 44 +++++++++++++++++++++++++++++++++++++++-----
 conf/confc.h | 14 ++++++++------
 2 files changed, 47 insertions(+), 11 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 4db830a..735f893 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -301,10 +301,9 @@ int c2_confc_init(struct c2_confc *confc, const char *conf_source,
 	 * confc->cc_group = sm_group;
 	 * c2_mutex_init(&confc->cc_lock);
 	 *
-	 * if (conf_source starts with "local-conf:")
-	 *     rc = cache_preload(confc, conf_source + strlen("local-conf:"));
-	 * else
-	 *     XXX @todo setup confd connection;
+	 * rc = (conf_source starts with "local-conf:")
+	 *     ? cache_preload(confc, conf_source + strlen("local-conf:"))
+	 *     : confd_connect(&confc->cc_rpc, conf_source);
 	 *
 	 * C2_POST((rc == 0) == confc_invariant(confc));
 	 * return rc;
@@ -318,6 +317,9 @@ void c2_confc_fini(struct c2_confc *confc)
 	 * C2_PRE(confc_invariant(confc));
 	 * C2_PRE(confc->cc_nr_ctx == 0);
 	 *
+	 * if (confc->cc_rpc.rcx_remote_addr != NULL)
+	 *     confd_disconnect(&confc->cc_rpc);
+	 *
 	 * for (obj in confc->cc_registry) {
 	 *     C2_ASSERT(obj->co_nrefs == 0 && obj->co_status != C2_CS_LOADING);
 	 *     c2_free(obj);
@@ -338,8 +340,13 @@ C2_BOB_DEFINE(static, &c2_confc_bob, c2_confc);
 
 static bool confc_invariant(const struct c2_confc *confc)
 {
+	struct c2_rpc_client_ctx *rpc = &confc->cc_rpc;
+
 	return c2_confc_bob_check(confc) && confc->cc_root != NULL &&
-		confc->cc_group != NULL;
+		confc->cc_group != NULL &&
+		ergo(rpc->rcx_remote_addr != NULL,
+		     c2_rpc_session_invariant(&rpc->rcx_session) &&
+		     c2_rpc_conn_invariant(&rpc->rcx_connection));
 }
 
 /* ------------------------------------------------------------------
@@ -654,6 +661,7 @@ static int wait_reply_st_in(struct c2_sm *mach)
 
 	C2_PRE(request_is_valid(ctx->fc_req));
 
+	/* XXX Consider using c2_rpc_client_call() instead of c2_rpc_post(). */
 	rc = c2_rpc_post(&ctx->fc_fop.f_item);
 	if (rc == 0)
 		return -1;
@@ -1044,6 +1052,32 @@ cache_grow(struct c2_conf_map *reg, const struct c2_conf_fetch_resp *resp)
  * misc
  * ------------------------------------------------------------------ */
 
+static int confd_connect(struct c2_rpc_client_ctx *rpc, const char *confd_addr)
+{
+	int rc;
+
+	rpc->rcx_remote_addr = confd_addr;
+	XXX; /* set other fields of `rpc' */
+
+	rc = c2_rpc_client_init(rpc);
+	if (rc != 0) {
+		(void) c2_rpc_client_fini(rpc);
+		rpc->rcx_remote_addr = NULL;
+	}
+	return rc;
+}
+
+static void confd_disconnect(struct c2_rpc_client_ctx *rpc)
+{
+	int rc;
+
+	C2_PRE(rpc->rcx_remote_addr != NULL);
+
+	rc = c2_rpc_client_fini(rpc);
+	if (rc != 0)
+		C2_ADDB(report error);
+}
+
 static bool request_is_valid(const struct c2_conf_fetch *req)
 {
 	return  req->f_origin.oi_type < C2_CO_NR &&
diff --git a/conf/confc.h b/conf/confc.h
index 1405051..504f5a9 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -463,7 +463,7 @@ struct c2_mutex;
 /** Configuration client. */
 struct c2_confc {
 	/** Registry of cached configuration objects. */
-	struct c2_conf_map  cc_registry;
+	struct c2_conf_map       cc_registry;
 	/**
 	 * Root of the DAG of configuration objects.
 	 *
@@ -471,7 +471,7 @@ struct c2_confc {
 	 * application to open it.  See the note in @ref
 	 * confc-fspec-sub-use.
 	 */
-	struct c2_conf_obj *cc_root;
+	struct c2_conf_obj      *cc_root;
 	/**
 	 * Serialises configuration retrieval state machines
 	 * (c2_confc_ctx::fc_mach).
@@ -483,7 +483,7 @@ struct c2_confc {
 	 * would deadlock, as the group lock is held when the FOM
 	 * state function is invoked.
 	 */
-	struct c2_sm_group *cc_group;
+	struct c2_sm_group      *cc_group;
 	/**
 	 * Confc lock (aka cache lock).
 	 *
@@ -500,7 +500,9 @@ struct c2_confc {
 	 *
 	 * @see confc-lspec-thread
 	 */
-	struct c2_mutex     cc_lock;
+	struct c2_mutex          cc_lock;
+	/** RPC client context that represents connection to confd. */
+	struct c2_rpc_client_ctx cc_rpc;
 	/**
 	 * The number of configuration retrieval contexts associated
 	 * with this c2_confc.
@@ -510,9 +512,9 @@ struct c2_confc {
 	 *
 	 * @see c2_confc_ctx
 	 */
-	uint32_t            cc_nr_ctx;
+	uint32_t                 cc_nr_ctx;
 	/** Magic number. */
-	uint64_t            cc_magix;
+	uint64_t                 cc_magix;
 };
 
 /**
-- 
1.8.3.2


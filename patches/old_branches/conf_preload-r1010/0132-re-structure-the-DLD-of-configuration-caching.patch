From c846ddca82633ef6a8bef2d657f49b48f25b614e Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Mon, 16 Apr 2012 16:15:39 +0300
Subject: [PATCH 132/311] re-structure the DLD of configuration caching

Unite designs of confc, confd, and the infrastructure (the common stuff)
into a single DLD.

`conf/obj.c' is now the "main" file of the DLD (`conf/confc.c' used
to be one).
---
 conf/confc.c         | 395 ++++++---------------------------------------------
 conf/confc.h         |  51 +++----
 conf/confc_offline.h |  36 +++--
 conf/confd.c         |  64 +++++++++
 conf/confd.h         |  60 ++++++++
 conf/map.c           |  10 ++
 conf/map.h           |  22 ++-
 conf/obj.c           | 332 +++++++++++++++++++++++++++++++++++++++++++
 conf/obj.h           |  32 ++++-
 conf/obj_ops.c       |  10 ++
 conf/obj_ops.h       |  18 +++
 conf/path.c          |  10 ++
 conf/path.h          |  58 +++++---
 13 files changed, 677 insertions(+), 421 deletions(-)
 create mode 100644 conf/confd.c
 create mode 100644 conf/confd.h

diff --git a/conf/confc.c b/conf/confc.c
index a5624f7..3960543 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -27,187 +27,22 @@
 #include "lib/arith.h"   /* C2_CNT_INC, C2_CNT_DEC */
 
 /**
- * @page confc-dld Configuration client (confc) DLD
- *
- * - @ref confc-dld-ovw
- * - @ref confc-dld-def
- * - @ref confc-dld-req
- * - @ref confc-dld-depends
- * - @ref confc-dld-highlights
- * - @subpage confc-dld-fspec "Functional Specification"
- * - @ref confc-dld-lspec
- *   - @ref confc-dld-lspec-comps
- *   - @ref confc-dld-lspec-state
- *   - @ref confc-dld-lspec-thread
- * - @ref confc-dld-conformance
- * - @ref confc-dld-ut
- *   - @ref confc-dld-ut-infra
- *   - @ref confc-dld-ut-confc
- * - @ref confc-dld-st
- * - @ref confc-dld-O
- * - @ref confc-dld-scalability
- * - @ref confc-dld-ref
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-ovw Overview
- *
- * Configuration is part of Colibri cluster meta-data. Configuration
- * client library (confc) provides API for accessing configuration
- * data.  Confcs obtain configuration from the configuration server
- * (confd) and cache this data in local memory.
- *
- * Confc library is implemented in user space and in the kernel.
- * Applications access configuration data by linking with confc
- * library and using its API.
- *
- * This DLD covers confc library and also data structures and
- * functions that are common to confc and confd.
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-def Definitions
- *
- * Previously defined terms:
- *
- * - @b Confc (configuration client library, configuration client):
- *   a library that provides configuration consumers with API to query
- *   C2 configuration.
- *
- * - @b Confd (configuration server): a management service that
- *   provides configuration clients with information obtained from
- *   configuration database.
- *
- * - Configuration @b consumer: any software that uses confc
- *   interfaces to access C2 configuration.  Alternative name: @b
- *   application.
- *
- * - Configuration @b cache: configuration data stored in nodeâ€™s
- *   memory. Confc library maintains such a cache and provides
- *   configuration consumers with access to its data. Confd also uses
- *   configuration cache for faster retrieval of information requested
- *   by configuration clients.
- *
- * - Configuration @b object: a data structure that contains
- *   configuration information. There are several types of
- *   configuration objects: profile, service, node, etc.
- *
- * - Configuration object is a @b stub if its status is not equal to
- *   C2_CS_READY. Stubs contain no meaningful configuration data apart
- *   from object's type and key.
- *
- * - @b Relation: a pointer from one configuration object to another
- *   configuration object or to a collection of those.  In former case
- *   it is @b one-to-one relation, in the latter case it is @b
- *   one-to-many relation.
- *
- * - @b Downlink: a relation whose destination is located further from
- *   "profile" object than the origin.
- *
- * New terms:
- *
- * - @b Directory: a list of configuration objects. This term is
- *   usually used in context of path.  Alternative name: @b collection
- *   of configuration objects.
- *
- * - @b Path: a pair `{x, R}', where `x' is a configuration object and
- *   `R' is such a sequence of downlinks and object keys that:
- *     - the first element (if any) is a downlink;
- *     - a one-to-many downlink is either followed by a key or is the
- *       last element;
- *     - a key is preceded by a one-to-many downlink.
- *
- *   `x' is path @b origin, elements of `R' are path @b components.
- *
- * - <b>Path target</b>: the object or directory that a path leads to.
- *   Path target is @b reachable if all of the intermediate objects of
- *   the path (if any) are ready (C2_CS_READY) and target is either an
- *   object that is ready or a directory of ready objects.
- *
- * - A configuration object is said to be @b pinned if its reference
- *   counter is nonzero, otherwise it is @b unpinned.  Confc never
- *   invalidates pinned objects.
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-req Requirements
- *
- * - @b r.conf.confc.kernel
- *   Confc library must be implemented for the kernel.
- * - @b r.conf.confc.user
- *   Confc library must be implemented for user space.
- * - @b r.conf.cache.data-model
- *   The implementation should organize configuration information as
- *   outlined in section 4.1 of the HLD. The same data structures
- *   should be used for confc and confd caches, if possible.
- *   Configuration structures must be kept in memory.
- * - @b r.conf.cache.pinning
- *   Pinning of an object protects existence of this object in the cache.
- *   Pinned object can be moved from a stub condition to "ready".
- * - @b r.conf.cache.unique-objects
- *   Configuration cache must not contain multiple objects with the
- *   same identity (identity of a configuration object is a tuple of
- *   type and key).
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-depends Dependencies
- *
- * - c2_rpc_item_get() and c2_rpc_item_put() should be implemented.
- *
- *   Confc implementation schedules a state transition in
- *   ->rio_replied().  The data of ->ri_reply will be consumed only
- *   when the new state is being entered to.  The rpc item pointed to
- *   by ->ri_reply must not be freed (by rpc layer) until confc has
- *   consumed the data.  Thus the need for c2_rpc_item_get().
- *
- * - XXX
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-highlights Design Highlights
- *
- * - Configuration consumers should not use relations of a
- *   configuration object to access its neighbors: relations may point
- *   to unpinned objects that can be invalidated by confc.
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-lspec Logical Specification
- *
- * - @ref confc-dld-lspec-comps
- * - @ref confc-dld-lspec-state
- *   - @ref confc-dld-lspec-state-initial
- *   - @ref confc-dld-lspec-state-check
- *   - @ref confc-dld-lspec-state-wait-reply
- *   - @ref confc-dld-lspec-state-wait-status
- *   - @ref confc-dld-lspec-state-grow-cache
- *   - @ref confc-dld-lspec-state-term
- * - @ref confc-dld-lspec-walk
- * - @ref confc-dld-lspec-grow
- * - @ref confc-dld-lspec-thread
- *
- * @subsection confc-dld-lspec-comps Component Overview
- *
- * Confc library maintains a @b cache of configuration information,
- * organized as a directed acyclic graph (DAG) of configuration
- * objects.  If the cache does not have enough data to fulfill a
- * request of a configuration consumer, confc obtains the necessary
- * data from the configuration server (confd), and adds new
- * configuration data to the cache.
- *
- * @note  Currently confd is not implemented. Confc cache is pre-loaded
- *        from an ASCII string. See @subpage confc-offline.
- *
- * Initially, i.e., right after c2_confc_init(), confc cache contains
- * only one object --- a stub of the root configuration object
- * (c2_conf_profile).  Cached configuration objects are allocated
- * dynamically.  Configuration cache is destroyed by c2_confc_fini().
- *
- * Besides the DAG of configuration objects, confc keeps a @b registry
- * of cached objects --- an in-memory database that maps object
- * @e identities (identity of an object is its key and type) to memory
- * addresses of these objects.  When new configuration data arrives
- * from the confd, confc consults the registry prior to adding new
- * objects to the cache. This ensures that no duplicates are added to
- * the confc cache.
- *
- * <!------------------------------------------------------------------>
- * @subsection confc-dld-lspec-state State Specification
+ * @page confc-lspec confc Internals
+ *
+ * - @ref confc-lspec-state
+ *   - @ref confc-lspec-state-initial
+ *   - @ref confc-lspec-state-check
+ *   - @ref confc-lspec-state-wait-reply
+ *   - @ref confc-lspec-state-wait-status
+ *   - @ref confc-lspec-state-grow-cache
+ *   - @ref confc-lspec-state-term
+ * - @ref confc-lspec-walk
+ * - @ref confc-lspec-grow
+ * - @ref confc-lspec-thread
+ * - @ref confc_dlspec "Detailed Logical Specification"
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section confc-lspec-state State Specification
  *
  * A confc state machine is embedded into c2_confc_ctx structure as
  * its @ref c2_confc_ctx::fc_mach "fc_mach" member.
@@ -226,6 +61,7 @@
  *
  *     S_CHECK [label="{ check_st_in() }\nS_CHECK"];
  *     S_WAIT_REPLY [label="{ wait_reply_st_in() }\nS_WAIT_REPLY"];
+ *     S_WAIT_STATUS;
  *     S_GROW_CACHE [label="{ grow_cache_st_in() }\nS_GROW_CACHE"];
  *
  *     S_INITIAL -> S_CHECK;
@@ -243,7 +79,8 @@
  * }
  * @enddot
  *
- * @subsubsection confc-dld-lspec-state-initial S_INITIAL
+ * <!---------------------------------------------------------------->
+ * @subsection confc-lspec-state-initial S_INITIAL
  *
  * c2_confc_open() and c2_confc_diropen() check validity of `path'
  * argument, copy it to c2_confc_ctx::fc_path, and post an AST to
@@ -256,7 +93,8 @@
  * When the AST, posted by c2_confc_open(), is run, it moves a state
  * machine (c2_confc_ctx::fc_mach) to S_CHECK state.
  *
- * @subsubsection confc-dld-lspec-state-check S_CHECK
+ * <!---------------------------------------------------------------->
+ * @subsection confc-lspec-state-check S_CHECK
  *
  * When S_CHECK state is entered, check_st_in() callback is invoked.
  * It calls path_walk() and, depending on the value returned by this
@@ -274,9 +112,10 @@
 @endverbatim
  *
  * The algorithm of path_walk() is described below (see @ref
- * confc-dld-lspec-walk).
+ * confc-lspec-walk).
  *
- * @subsubsection confc-dld-lspec-state-wait-reply S_WAIT_REPLY
+ * <!---------------------------------------------------------------->
+ * @subsection confc-lspec-state-wait-reply S_WAIT_REPLY
  *
  * When a state machine is about to enter S_WAIT_REPLY state,
  * wait_reply_st_in() callback is executed. This callback sends
@@ -291,7 +130,8 @@
  * counter (c2_rpc_item_get()) and posts an AST, scheduling transition
  * to S_GROW_CACHE state.
  *
- * @subsubsection confc-dld-lspec-state-wait-status S_WAIT_STATUS
+ * <!---------------------------------------------------------------->
+ * @subsection confc-lspec-state-wait-status S_WAIT_STATUS
  *
  * A state machine in S_WAIT_STATUS state remains idle until any of
  * the channels (c2_conf_obj::co_chan) that clinks of c2_confc_ctx are
@@ -312,25 +152,27 @@
  *           the object is closed and its number of references becomes
  *           zero.  This case is not applicable to S_WAIT_STATUS state.
  *
- * @subsubsection confc-dld-lspec-state-grow-cache S_GROW_CACHE
+ * <!---------------------------------------------------------------->
+ * @subsection confc-lspec-state-grow-cache S_GROW_CACHE
  *
  * When a state machine is entering S_GROW_CACHE state,
  * grow_cache_st_in() callback is invoked.  If the error code
  * contained in confd's response (c2_conf_fetch_resp::fr_rc) is zero,
  * the callback calls cache_grow() function (see @ref
- * confc-dld-lspec-grow below).  The callback "releases" rpc item by
+ * confc-lspec-grow below).  The callback "releases" rpc item by
  * calling c2_rpc_item_put().  If ->fr_rc == 0 and cache_grow()
  * succeeds, grow_cache_st_in() moves the state machine to S_CHECK
  * state, otherwise --- to S_FAILURE state.
  *
- * @subsubsection confc-dld-lspec-state-term S_TERMINAL, S_FAILURE
+ * <!---------------------------------------------------------------->
+ * @subsection confc-lspec-state-term S_TERMINAL, S_FAILURE
  *
  * When a state machine enters S_TERMINAL or S_FAILURE state, it
  * invokes completion_announce() callback.  This function broadcasts
  * c2_confc_ctx::fc_complete channel.
  *
- * <!------------------------------------------------------------------>
- * @subsection confc-dld-lspec-walk Walking the DAG
+ * <hr> <!------------------------------------------------------------>
+ * @section confc-lspec-walk Walking the DAG
  *
  * path_walk() begins with locking the cache (c2_confc::cc_lock) and
  * unlocks the cache before returning.  The function does two things
@@ -348,11 +190,11 @@
  *      c2_confc_ctx, path position reached by walk(), and status
  *      value returned by walk().
  *
- * @note According to @ref confc-offline workaround, the situations
- *       when configuration data requested by an application is
- *       missing from the confc cache are treated as failures.
- *       path_walk() C2_ASSERT()s that the value of status returned by
- *       walk() is C2_CS_READY.
+ * @note According to "confc offline" workaround (see @ref
+ *       conf-fspec-preload), the situations when configuration data
+ *       requested by an application is missing from the confc cache
+ *       are treated as failures.  path_walk() C2_ASSERT()s that the
+ *       value of status returned by walk() is C2_CS_READY.
  *
  * - walk()
  *
@@ -417,8 +259,8 @@
  *
  *     If N = 0, then only ->fc_clink is registered (c2_clink_add()).
  *
- * <!------------------------------------------------------------------>
- * @subsection confc-dld-lspec-grow Growing the cache
+ * <hr> <!------------------------------------------------------------>
+ * @section confc-lspec-grow Growing the cache
  *
  * cache_grow() locks the cache (c2_confc::cc_lock) and unlocks before
  * returning.  The function performs the following operations for
@@ -456,8 +298,8 @@
  *     C2_CS_MISSING, depending on whether filling was successful;
  *   - signals object's channel.
  *
- * <!------------------------------------------------------------------>
- * @subsection confc-dld-lspec-thread Threading and Concurrency Model
+ * <hr> <!------------------------------------------------------------>
+ * @section confc-lspec-thread Threading and Concurrency Model
  *
  * There are as many state machines in operation as there are
  * unfinished c2_confc_*open*() requests.
@@ -477,157 +319,12 @@
  * responsible for making sure c2_sm_asts_run() is called when
  * c2_sm_group::s_clink is signaled.  See @ref sm (search for `"ast"
  * thread'.)
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-conformance Conformance
- *
- * - @b i.conf.confc.kernel
- *   The implementation of confc library uses "portable subset" of C2
- *   API, for which the differences between the kernel and user space
- *   are abstracted away.
- * - @b i.conf.confc.user
- *   Confc library is implemented for user space.
- * - @b i.conf.cache.data-model
- *   Configuration information is organized as outlined in section 4.1
- *   of the HLD. The same data structures are used for confc and
- *   confd.  Configuration structures are kept in memory.
- * - @b i.conf.cache.pinning
- *   Confc "pins" configuration object by incrementing its reference
- *   counter.  c2_confc_fini() asserts (with C2_PRE()) that no objects
- *   are pinned when the cache is being destroyed.
- * - @b i.conf.cache.unique-objects
- *   A registry of cached objects (c2_conf_cache::cc_registry) is used
- *   to achieve uniqueness of configuration object identities.
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-ut Unit Tests
- *
- * Fault Injection mechanism (lib/finject.h) will be used to test
- * handling of "rare" errors (e.g., allocation errors) and to disable
- * some of external modules' functionality (e.g., to make
- * c2_rpc_post() a noop).
- *
- * @subsection confc-dld-ut-infra Infrastructure Test Suite
- *
- *     @test c2_conf_map operations will be tested.
- *
- *     @test Path operations will be tested. This includes checking
- *           validity of various paths, testing success and failure of
- *           c2_conf_downlink().
- *
- *     @test Object operations will be tested. This includes
- *           allocation, comparison with on-wire representation, stub
- *           enrichment.
- *
- *     @test c2_conf__parse() will be tested.
- *
- *     @test c2_conf_buf operations will be tested.
- *
- * @subsection confc-dld-ut-confc Confc Test Suite
- *
- *     Test suite's init routine will create an "ast" thread (search
- *     for `ast_thread' in sm/ut/sm.c).  This thread will process ASTs
- *     as they are posted by confc functions.
- *
- *     @test path_walk() will be tested.
- *
- *     @test c2_confc_*open*() and c2_confc_*close() will be tested.
- *
- *     @test Cache operations will be tested. This includes
- *           cache_add(), object_enrich(), cache_grow(), and
- *           cache__preload().
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-st System Tests
- *
- * System testing procedure consists of three steps:
- *
- *   -# Generate configuration.
- *   -# Run @ref confc-dld-fspec-recipes "use cases".
- *   -# Compare actual results with expected.
- *
- * A special user space utility -- @b confg, configuration generator --
- * performs `Generate' step.  It generates random configuration data,
- * queries to be executed upon this data, and results that are
- * expected to be obtained by running these queries.
- *
- * `Run' step is performed by a confc application that takes generated
- * configuration and queries as input parameters and executes the
- * queries, producing output.
- *
- * Actual output is compared with expected at `Compare' step.
- *
- * @subsection confc-dld-st-conf Configuration data
- *
- * confg generates "configuration string" --- an ASCII string
- * introduced in @ref confc-offline.
- *
- * As soon as confd is able to read configuration database and handle
- * confc's requests, confg will need to be changed to generate
- * configuration database.
- *
- * @subsection confc-dld-st-queries Queries
- *
- * System tests cover three use cases (see @ref
- * confc-dld-fspec-recipes):
- *
- *   -# Getting [configuration] data on a filesystem.
- *   -# Getting data on a service given its type.
- *   -# Getting list of devices used by specific service on specific node.
- *
- * Case 1 takes no input parameters (apart from profile name which
- * does not count).  Case 2 takes service type as an input parameter.
- * Case 3 takes service type and node identifier.
- *
- * A query is number of use case and values of input parameters.
- *
- * @subsection confc-dld-st-output Output
- *
- * When the confc application from `Run' step (see above) runs a
- * [configuration] query, it produces a string with textual
- * representation of results of this query.  Sequences in such
- * representations (e.g., a list of filesystem parameters, a list of
- * partitions) should be sorted, otherwise two semantically equivalent
- * sequences may have differing representations ("[a,b]" != "[b,a]").
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-O Analysis
- *
- * XXX
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-scalability Scalability
- *
- * Current design imposes no restrictions on the size of configuration
- * cache.  If a configuration database is huge and an application is
- * keen to know every aspect of cluster configuration, confc cache
- * will eventually consume all memory available.  confc will be unable
- * to allocate new objects, its state machines will end in S_FAILURE
- * state, and c2_confc_error() will return -ENOMEM.  The application
- * can get rid of configuration cache by issuing c2_confc_fini().
- *
- * @todo Implement cache eviction.
- *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-ref References
- *
- * - HLD of configuration caching
- *   [https://docs.google.com/a/xyratex.com/document/d/1t8osSyFOsdTGYGbnMC3ynB1niVqtm6bCJSzJwh1IUw8/view]
- * - HLD of configuration.schema
- *   [https://docs.google.com/a/xyratex.com/document/d/1JmsVBV8B4R-FrrYyJC_kX2ibzC1F-yTHEdrm3-FLQYk/view]
- * - Configuration one-pager
- *   [https://docs.google.com/a/xyratex.com/document/d/1hnWm6x3UhWIB_9qiR69ScGF57Vcy0D38BBTdpFhe4Bo/view]
- *
- * (@b Hint: To open a document in read/write mode replace 'view' with
- * 'edit' in its URL.)
- *
- * @see confc_dlspec
  */
 
 /**
- * @defgroup confc_dlspec  Confc Internals
+ * @defgroup confc_dlspec confc Internals
  *
- * @see @ref confc-dld, @ref confc-dld-lspec
+ * @see @ref conf, @ref confc-lspec "Logical Specification of confc"
  *
  * @{
  */
@@ -841,7 +538,7 @@ static int act(struct c2_confc_ctx *cx, const struct walk_ctx *wx,
  *
  * @retval -ENOMEM        Insufficient memory.
  *
- * @see @ref confc-dld-lspec-state
+ * @see @ref confc-lspec-state
  */
 static int path_walk(struct c2_confc_ctx *ctx)
 {
@@ -1386,7 +1083,7 @@ static int cache__preload(struct c2_conf_map *cache, const char *conf_str)
 	 * int rc;
 	 * int i;
 	 *
-	 * rc = c2_conf__parse(conf_str, objs, ARRAY_SIZE(objs));
+	 * rc = c2_conf_parse(conf_str, objs, ARRAY_SIZE(objs));
 	 * for (i = rc - 1; i >= 0; --i) {
 	 *     rc = cache_add(cache, objs + i);
 	 *     if (rc != 0)
diff --git a/conf/confc.h b/conf/confc.h
index 42622e3..74c9be5 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -30,7 +30,7 @@
 #include "lib/chan.h"        /* c2_clink */
 
 /**
- * @page confc-dld-fspec  confc: Functional Specification
+ * @page confc-fspec Configuration Client (confc)
  *
  * Configuration client library (confc) provides user-space and kernel
  * interfaces for accessing Colibri configuration information.
@@ -38,18 +38,18 @@
  * Confc obtains configuration data from network-accessible
  * configuration server (confd) and caches this data in memory.
  *
- * - @ref confc-dld-fspec-data
- * - @ref confc-dld-fspec-sub
- *   - @ref confc-dld-fspec-sub-setup
- *   - @ref confc-dld-fspec-sub-use
- * - @ref confc-dld-fspec-recipes
+ * - @ref confc-fspec-data
+ * - @ref confc-fspec-sub
+ *   - @ref confc-fspec-sub-setup
+ *   - @ref confc-fspec-sub-use
+ * - @ref confc-fspec-recipes
  *   - @ref ex1
  *   - @ref ex2
  *   - @ref ex3
  * - @ref confc_dfspec "Detailed Functional Specification"
  *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-fspec-data  Data Structures
+ * <hr> <!------------------------------------------------------------>
+ * @section confc-fspec-data Data Structures
  *
  * - c2_confc --- an instance of configuration client.
  *   This structure contains configuration cache and a lock protecting
@@ -66,8 +66,8 @@
  *   - @c fc_result will contain the result of retrieval operation ---
  *     pointer to the requested configuration object or directory.
  *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-fspec-sub  Subroutines
+ * <hr> <!------------------------------------------------------------>
+ * @section confc-fspec-sub Subroutines
  *
  * - c2_confc_init() initialises configuration client.
  * - c2_confc_fini() finalises confc, destroys configuration cache.
@@ -91,8 +91,8 @@
  * - c2_confc_error() returns the error status for the asynchronous
  *   configuration request.
  *
- * <!------------------------------------------------------------------>
- * @subsection confc-dld-fspec-sub-setup Initialization and termination
+ * <!---------------------------------------------------------------->
+ * @subsection confc-fspec-sub-setup Initialization and termination
  *
  * Prior to accessing configuration, the application (aka
  * configuration consumer) should initialize configuration client by
@@ -123,8 +123,8 @@
  * }
  * @endcode
  *
- * <!------------------------------------------------------------------>
- * @subsection confc-dld-fspec-sub-use Accessing configuration objects
+ * <!---------------------------------------------------------------->
+ * @subsection confc-fspec-sub-use Accessing configuration objects
  *
  * The application gets access to configuration data by opening
  * configuration objects.
@@ -149,10 +149,10 @@
  * before c2_confc_fini() is called.  c2_confc_close() and
  * c2_confc_dirclose() are used for this purpose.
  *
- * <hr> <!------------------------------------------------------------->
- * @section confc-dld-fspec-recipes  Recipes
+ * <hr> <!------------------------------------------------------------>
+ * @section confc-fspec-recipes Recipes
  *
- * @subsection ex1  Getting data on the filesystem
+ * @subsection ex1 Getting data on the filesystem
  *
  * @code
  * #include "conf/confc.h"
@@ -192,8 +192,8 @@
  * }
  * @endcode
  *
- * <!------------------------------------------------------------------>
- * @subsection ex2  Getting configuration of a service of specific type
+ * <!---------------------------------------------------------------->
+ * @subsection ex2 Getting configuration of a service of specific type
  *
  * @code
  * #include "conf/confc.h"
@@ -224,8 +224,8 @@
  * }
  * @endcode
  *
- * <!------------------------------------------------------------------>
- * @subsection ex3  List devices used by specific service on specific node
+ * <!---------------------------------------------------------------->
+ * @subsection ex3 List devices used by specific service on specific node
  *
  * @code
  * #include "conf/confc.h"
@@ -295,13 +295,14 @@
  * }
  * @endcode
  *
- * @see confc_dfspec
+ * @see @ref confc_dfspec "Detailed Functional Specification"
  */
 
 /**
- * @defgroup confc_dfspec  Configuration Client (confc)
+ * @defgroup confc_dfspec Configuration Client (confc)
+ * @brief Detailed Functional Specification.
  *
- * @see @ref confc-dld, @ref confc-dld-fspec
+ * @see @ref conf, @ref confc-fspec "Functional Specification"
  *
  * @{
  */
@@ -336,7 +337,7 @@ struct c2_confc {
  *                    configuration cache.
  *
  * @note  Until confd service is implemented, `confd_addr' is a string
- *        with configuration data (see @ref confc-offline). This
+ *        with configuration data (see @ref conf-fspec-preload). This
  *        string is used to pre-load confc cache.
  *
  * @pre   confc cache is not initiated
diff --git a/conf/confc_offline.h b/conf/confc_offline.h
index 4ef87dd..061c22b 100644
--- a/conf/confc_offline.h
+++ b/conf/confc_offline.h
@@ -21,7 +21,12 @@
 #define __COLIBRI_CONF__CONFC_OFFLINE_H__
 
 /**
- * @page confc-offline  confc offline
+ * @page conf-fspec-preload Pre-Loading of Configuration Cache
+ *
+ * - @ref conf-fspec-preload-string
+ *   - @ref conf-fspec-preload-string-grammar
+ *   - @ref conf-fspec-preload-string-examples
+ * - @ref conf_dfspec_preload "Detailed Functional Specification"
  *
  * Until confd is ready, confc cannot obtain configuration by sending
  * fops.  In order for confc to be operational, its cache needs to be
@@ -36,10 +41,11 @@
  * is specified as a module parameter. User space application obtains
  * this string from command line.
  *
- * @section confc-offline-string  Configuration string
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-fspec-preload-string  Configuration string
  *
  * Configuration string describes a sequence of configuration objects.
- * c2_conf__parse() translates this string into an array of
+ * c2_conf_parse() translates this string into an array of
  * confx_objects.
  *
  * An object is represented by a sequence of attributes.  The first
@@ -78,7 +84,8 @@
  * };
  * @endcode
  *
- * @subsection confc-offline-string-grammar  Grammar
+ * <!---------------------------------------------------------------->
+ * @subsection conf-fspec-preload-string-grammar Grammar
  *
 @verbatim
 object-sequence:
@@ -120,15 +127,16 @@ integer-sequence:
  * STR resembles C string; escape characters are not supported.
  *
  * @code
- * "Hello, world!"     -- valid STR
- * "one\ttwo\03\0\xf"  -- not a STR
+ * "Hello, world!"    -- valid STR
+ * "one\ttwo\03\0\xf" -- not a STR
  * @endcode
  *
  * Tokens can be separated by white space; this consists of comments
  * and white-space characters.  Comments are surrounded by curly
  * brackets.
  *
- * @subsection confc-offline-string-examples  Examples
+ * <!---------------------------------------------------------------->
+ * @subsection conf-fspec-preload-string-examples Examples
  *
 @verbatim
                 {filesystem}
@@ -157,13 +165,14 @@ integer-sequence:
 (part:"part0", "sdev0", 0,      596000000000, 0,    7,     "sda1")
 @endverbatim
  *
- * @see @ref confc_offline
+ * @see @ref conf_dfspec_preload "Detailed Functional Specification"
  */
 
 /**
- * @defgroup confc_offline  confc offline: logical specification
+ * @defgroup conf_dfspec_preload Pre-Loading of Configuration Cache
+ * @brief Detailed Functional Specification.
  *
- * @see @ref confc-dld, @ref confc-offline
+ * @see @ref conf, @ref conf-fspec-preload "Functional Specification"
  *
  * @{
  */
@@ -174,7 +183,7 @@ struct confx_object;
  * Fills the array of confx_objects with configuration data, obtained
  * from string.
  *
- * @param[in]  src   Configuration string (see @ref confc-offline-string).
+ * @param[in]  src   Configuration string (see @ref conf-fspec-preload-string).
  * @param[out] dest  Receiver of configuration.
  * @param      n     Number of elements in `dest'.
  *
@@ -183,8 +192,7 @@ struct confx_object;
  *
  * @post  retval <= n
  */
-static int c2_conf__parse(const char *src, struct confx_object dest[],
-			  size_t n);
+static int c2_conf_parse(const char *src, struct confx_object dest[], size_t n);
 
-/** @} confc_offline */
+/** @} conf_dfspec_preload */
 #endif /* __COLIBRI_CONF__CONFC_OFFLINE_H__ */
diff --git a/conf/confd.c b/conf/confd.c
new file mode 100644
index 0000000..5a8a34b
--- /dev/null
+++ b/conf/confd.c
@@ -0,0 +1,64 @@
+/* -*- c -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
+ * Original creation date: 19-Mar-2012
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+#include "conf/confd.h"
+
+/**
+ * @page confd-lspec confd Internals
+ *
+ * - @ref confd-lspec-comps
+ * - @ref confd-lspec-state
+ * - @ref confd-lspec-thread
+ * - XXX
+ * - @ref confd_dlspec "Detailed Logical Specification"
+ *
+ * XXX @todo To be filled by Anatoliy.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section confd-lspec-comps Components Overview
+ *
+ * XXX
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section confd-lspec-state State Specification
+ *
+ * XXX
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section confd-lspec-thread Threading and Concurrency Model
+ *
+ * XXX
+ *
+ */
+
+/**
+ * @defgroup confd_dlspec confd Internals
+ *
+ * @see @ref conf, @ref confd-lspec "Logical Specification of confd"
+ *
+ * @{
+ */
+
+XXX;
+
+/** @} confd_dlspec */
diff --git a/conf/confd.h b/conf/confd.h
new file mode 100644
index 0000000..ffc1739
--- /dev/null
+++ b/conf/confd.h
@@ -0,0 +1,60 @@
+/* -*- c -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
+ * Original creation date: 19-Mar-2012
+ */
+#ifndef __COLIBRI_CONF_CONFD_H__
+#define __COLIBRI_CONF_CONFD_H__
+
+/**
+ * @page confd-fspec Configuration Server (confd)
+ *
+ * XXX @todo To be filled by Anatoliy.
+ *
+ * - @ref confd-fspec-data
+ * - @ref confd-fspec-sub
+ * - XXX
+ * - @ref confd_dfspec "Detailed Functional Specification"
+ *
+ * XXX
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section confd-fspec-data Data Structures
+ *
+ * XXX
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section confd-fspec-sub Subroutines
+ *
+ * XXX
+ *
+ * @see @ref confd_dfspec "Detailed Functional Specification"
+ */
+
+/**
+ * @defgroup confd_dfspec Configuration Server (confd)
+ * @brief Detailed Functional Specification.
+ *
+ * @see @ref conf, @ref confd-fspec "Functional Specification"
+ *
+ * @{
+ */
+
+XXX;
+
+/** @} confd_dfspec */
+#endif /* __COLIBRI_CONF_CONFD_H__ */
diff --git a/conf/map.c b/conf/map.c
index eb8ae99..98e2f90 100644
--- a/conf/map.c
+++ b/conf/map.c
@@ -23,6 +23,14 @@
 #endif
 #include "conf/map.h"
 
+/**
+ * @defgroup conf_dlspec_map Registry of Cached Configuration Objects
+ *
+ * @see @ref conf, @ref conf-lspec
+ *
+ * @{
+ */
+
 int c2_conf_map_init(struct c2_conf_map *map)
 {
 	/*
@@ -42,3 +50,5 @@ int c2_conf_map_init(struct c2_conf_map *map)
 	 */
 	XXX;
 }
+
+/** @} conf_dlspec_map */
diff --git a/conf/map.h b/conf/map.h
index 56059d5..c689594 100644
--- a/conf/map.h
+++ b/conf/map.h
@@ -23,7 +23,9 @@
 #include <db.h> /* DB */
 
 /**
- * @addtogroup conf_cache
+ * @page conf-fspec-map Registry of Cached Configuration Objects
+ *
+ * XXX @todo Explain what is this registry (AKA objid-to-address mapping) for.
  *
  * The implementation of c2_conf_map is based on in-memory Berkeley DB.
  * Since it is not possible to create a "memory-only" Berkeley
@@ -31,13 +33,22 @@
  * ("db/db.h"), this implementation invokes Berkeley DB API (<db.h>)
  * directly.
  *
- * DB environments (DB_ENV *) are not used. Since only one thread can
- * work with a registry of cached objects, there is no use for
- * multi-threaded features provided by a DB environment.
+ * DB environments (DB_ENV *) are not used: a registry of cached
+ * objects is never accessed by several threads, so there is no use
+ * for multi-threaded features provided by a DB environment.
  *
  * @see Writing In-Memory Berkeley DB Applications
  * [http://docs.oracle.com/cd/E17076_02/html/articles/inmemory/C/index.html]
  *
+ * @see conf_dfspec_map "Detailed Functional Specification"
+ */
+
+/**
+ * @defgroup conf_dfspec_map Registry of Cached Configuration Objects
+ * @brief Detailed Functional Specification.
+ *
+ * @see @ref conf, @ref conf-fspec-map "Functional Specification"
+ *
  * @{
  */
 
@@ -104,6 +115,5 @@ void c2_conf_map_cursor_fini(struct c2_conf_map_cursor *cur);
  */
 struct c2_conf_obj * c2_conf_map_next(struct c2_conf_map_cursor *cur);
 
-/** @} conf_cache */
-
+/** @} conf_dfspec_map */
 #endif /* __COLIBRI_CONF_MAP_H__ */
diff --git a/conf/obj.c b/conf/obj.c
index 03fe40c..6022067 100644
--- a/conf/obj.c
+++ b/conf/obj.c
@@ -23,6 +23,336 @@
 #endif
 #include "conf/obj.h"
 
+/**
+ * @page conf DLD of configuration caching
+ *
+ * - @ref conf-ovw
+ * - @ref conf-def
+ * - @ref conf-req
+ * - @ref conf-depends
+ * - @ref conf-highlights
+ * - @ref conf-fspec
+ * - @ref conf-lspec
+ * - @ref conf-conformance
+ * - @ref conf-ut
+ * - @ref conf-st
+ * - @ref conf-O
+ * - @ref conf-scalability
+ * - @ref conf-ref
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-ovw Overview
+ *
+ * Configuration is part of Colibri cluster meta-data. Configuration
+ * client library (confc) provides API for accessing configuration
+ * data.  Confc obtains configuration from the configuration server
+ * (confd) and caches this data in local memory.
+ *
+ * Confd tries to obtain requested configuration data from its own
+ * cache. In case of cache miss, confd loads data from the
+ * configuration database and updates the cache.
+ *
+ * Confd is a user space service.  Confc library is implemented in
+ * user space and in the kernel.  Applications access configuration
+ * data by linking with confc library and using its API.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-def Definitions
+ *
+ * - @b Confc (configuration client library, configuration client):
+ *   a library that provides configuration consumers with API to query
+ *   C2 configuration.
+ *
+ * - @b Confd (configuration server): a management service that
+ *   provides configuration clients with information obtained from
+ *   configuration database.
+ *
+ * - Configuration @b consumer: any software that uses confc
+ *   interfaces to access C2 configuration.  Alternative name: @b
+ *   application.
+ *
+ * - Configuration @b cache: configuration data stored in nodeâ€™s
+ *   memory. Confc library maintains such a cache and provides
+ *   configuration consumers with access to its data. Confd also uses
+ *   configuration cache for faster retrieval of information requested
+ *   by configuration clients.
+ *
+ * - Configuration @b object: a data structure that contains
+ *   configuration information. There are several types of
+ *   configuration objects: profile, service, node, etc.
+ *
+ * - @b Identity of a configuration object is a tuple of its type and
+ *   key.
+ *
+ * - Configuration object is a @b stub if its status is not equal to
+ *   C2_CS_READY. Stubs contain no meaningful configuration data apart
+ *   from object's type and key.
+ *
+ * - @b Relation: a pointer from one configuration object to another
+ *   configuration object or to a collection of those.  In former case
+ *   it is @b one-to-one relation, in the latter case it is @b
+ *   one-to-many relation.
+ *
+ * - @b Downlink: a relation whose destination is located further from
+ *   "profile" object than the origin.
+ *
+ * - @b Directory: a list of configuration objects. This term is
+ *   usually used in context of path.  Alternative name: @b collection
+ *   of configuration objects.
+ *
+ * - @b Path: a pair `{x, R}', where `x' is a configuration object and
+ *   `R' is such a sequence of downlinks and object keys that:
+ *     - the first element (if any) is a downlink;
+ *     - a one-to-many downlink is either followed by a key or is the
+ *       last element;
+ *     - a key is preceded by a one-to-many downlink.
+ *
+ *   `x' is path @b origin, elements of `R' are path @b components.
+ *
+ * - <b>Path target</b>: the object or directory that a path leads to.
+ *   Path target is @b reachable if all of the intermediate objects of
+ *   the path (if any) are ready (C2_CS_READY) and target is either an
+ *   object that is ready or a directory of ready objects.
+ *
+ * - A configuration object is said to be @b pinned if its reference
+ *   counter is nonzero, otherwise it is @b unpinned.  Confc never
+ *   invalidates pinned objects.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-req Requirements
+ *
+ * - @b r.conf.confc.kernel
+ *   Confc library must be implemented for the kernel.
+ * - @b r.conf.confc.user
+ *   Confc library must be implemented for user space.
+ * - @b r.conf.cache.data-model
+ *   The implementation should organize configuration information as
+ *   outlined in section 4.1 of the HLD. The same data structures
+ *   should be used for confc and confd caches, if possible.
+ *   Configuration structures must be kept in memory.
+ * - @b r.conf.cache.pinning
+ *   Pinning of an object protects existence of this object in the cache.
+ *   Pinned object can be moved from a stub condition to "ready".
+ * - @b r.conf.cache.unique-objects
+ *   Configuration cache must not contain multiple objects with the
+ *   same identity.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-depends Dependencies
+ *
+ * - c2_rpc_item_get() and c2_rpc_item_put() should be implemented.
+ *
+ *   Confc implementation schedules a state transition in
+ *   ->rio_replied().  The data of ->ri_reply will be consumed only
+ *   when the new state is being entered to.  The rpc item pointed to
+ *   by ->ri_reply must not be freed (by rpc layer) until confc has
+ *   consumed the data.  Thus the need for c2_rpc_item_get().
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-highlights Design Highlights
+ *
+ * - Configuration consumers should not use relations of a
+ *   configuration object to access its neighbors: relations may point
+ *   to unpinned objects that can be invalidated by confc.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-fspec Functional Specification
+ *
+ * - @subpage conf-fspec-obj
+ * - @subpage conf-fspec-path
+ * - @subpage confc-fspec
+ * - @subpage conf-fspec-preload
+ * - @subpage conf-fspec-objops
+ * - @subpage conf-fspec-map
+ * - @subpage confd-fspec
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-lspec Logical Specification
+ *
+ * - @ref conf-lspec-comps
+ * - @ref conf_dlspec_obj
+ * - @ref conf_dlspec_path
+ * - @subpage confc-lspec
+ * - @ref conf_dlspec_objops
+ * - @ref conf_dlspec_map
+ * - @subpage confd-lspec
+ *
+ * <!---------------------------------------------------------------->
+ * @subsection conf-lspec-comps Components Overview
+ *
+ * Every instance of confc library and confd service maintains a cache
+ * of configuration information.  A cache is represented by a set of
+ * dynamically allocated configuration objects, "connected" by
+ * relations into a directed acyclic graph (DAG), and a registry ---
+ * an in-memory database that maps object identities to memory
+ * addresses of these objects.
+ *
+ * A cache can be pre-loaded from an ASCII string. See @ref
+ * conf-fspec-preload.
+ *
+ * If a confc cache doesn't have enough data to fulfill a request of
+ * configuration consumer, confc obtains the necessary data from the
+ * confd and adds new configuration data to the cache.
+ *
+ * If a confd cache doesn't have enough data to fulfill a request of
+ * confc, confd loads the necessary data from the configuration
+ * database and updates the cache.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-conformance Conformance
+ *
+ * - @b i.conf.confc.kernel
+ *   The implementation of confc library uses "portable subset" of C2
+ *   API, for which the differences between the kernel and user space
+ *   are abstracted away.
+ * - @b i.conf.confc.user
+ *   Confc library is implemented for user space.
+ * - @b i.conf.cache.data-model
+ *   Configuration information is organized as outlined in section 4.1
+ *   of the HLD. The same data structures are used for confc and
+ *   confd.  Configuration structures are kept in memory.
+ * - @b i.conf.cache.pinning
+ *   Confc "pins" configuration object by incrementing its reference
+ *   counter.  c2_confc_fini() asserts (with C2_PRE()) that no objects
+ *   are pinned when the cache is being destroyed.
+ * - @b i.conf.cache.unique-objects
+ *   A registry of cached objects (c2_conf_cache::cc_registry) is used
+ *   to achieve uniqueness of configuration object identities.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-ut Unit Tests
+ *
+ * Fault Injection mechanism (lib/finject.h) will be used to test
+ * handling of "rare" errors (e.g., allocation errors) and to disable
+ * some of external modules' functionality (e.g., to make
+ * c2_rpc_post() a noop).
+ *
+ * @subsection conf-ut-common Infrastructure Test Suite
+ *
+ *     @test c2_conf_map operations will be tested.
+ *
+ *     @test Path operations will be tested. This includes checking
+ *           validity of various paths, testing success and failure of
+ *           c2_conf_downlink().
+ *
+ *     @test Object operations will be tested. This includes
+ *           allocation, comparison with on-wire representation, stub
+ *           enrichment.
+ *
+ *     @test c2_conf_parse() will be tested.
+ *
+ *     @test c2_conf_buf operations will be tested.
+ *
+ * @subsection conf-ut-confc confc Test Suite
+ *
+ *     Test suite's init routine will create an "ast" thread (search
+ *     for `ast_thread' in sm/ut/sm.c).  This thread will process ASTs
+ *     as they are posted by confc functions.
+ *
+ *     @test path_walk() will be tested.
+ *
+ *     @test c2_confc_*open*() and c2_confc_*close() will be tested.
+ *
+ *     @test Cache operations will be tested. This includes
+ *           cache_add(), object_enrich(), cache_grow(), and
+ *           cache__preload().
+ *
+ * @subsection confd-ut confd Test Suite
+ *
+ * XXX @todo To be added by Anatoliy.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-st System Tests
+ *
+ * System testing procedure consists of three steps:
+ *
+ *   -# Generate configuration.
+ *   -# Run @ref confc-fspec-recipes "use cases".
+ *   -# Compare actual results with expected.
+ *
+ * A special user space utility -- @b confg, configuration generator --
+ * performs `Generate' step.  It generates random configuration data,
+ * queries to be executed upon this data, and results that are
+ * expected to be obtained by running these queries.
+ *
+ * `Run' step is performed by a confc application that takes generated
+ * configuration and queries as input parameters and executes the
+ * queries, producing output.
+ *
+ * Actual output is compared with expected at `Compare' step.
+ *
+ * @subsection conf-st-conf Configuration data
+ *
+ * confg generates "configuration string" --- an ASCII string
+ * introduced in @ref conf-fspec-preload.
+ *
+ * As soon as confd is able to read configuration database and handle
+ * confc's requests, confg will need to be changed to generate
+ * configuration database.
+ *
+ * @subsection conf-st-queries Queries
+ *
+ * System tests cover three use cases (see @ref confc-fspec-recipes):
+ *
+ *   -# Getting [configuration] data on a filesystem.
+ *   -# Getting data on a service given its type.
+ *   -# Getting list of devices used by specific service on specific node.
+ *
+ * Case 1 takes no input parameters (apart from profile name which
+ * does not count).  Case 2 takes service type as an input parameter.
+ * Case 3 takes service type and node identifier.
+ *
+ * A query is number of use case and values of input parameters.
+ *
+ * @subsection conf-st-output Output
+ *
+ * When the confc application from `Run' step (see above) runs a
+ * [configuration] query, it produces a string with textual
+ * representation of results of this query.  Sequences in such
+ * representations (e.g., a list of filesystem parameters, a list of
+ * partitions) should be sorted, otherwise two semantically equivalent
+ * sequences may have differing representations ("[a,b]" != "[b,a]").
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-O Analysis
+ *
+ * XXX
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-scalability Scalability
+ *
+ * Current design imposes no restrictions on the size of configuration
+ * cache.  If a configuration database is huge and an application is
+ * keen to know every aspect of cluster configuration, confc cache
+ * will eventually consume all memory available.  confc will be unable
+ * to allocate new objects, its state machines will end in S_FAILURE
+ * state, and c2_confc_error() will return -ENOMEM.  The application
+ * can get rid of configuration cache by issuing c2_confc_fini().
+ *
+ * @todo Implement cache eviction.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-ref References
+ *
+ * - HLD of configuration caching
+ *   [https://docs.google.com/a/xyratex.com/document/d/1t8osSyFOsdTGYGbnMC3ynB1niVqtm6bCJSzJwh1IUw8/view]
+ * - HLD of configuration.schema
+ *   [https://docs.google.com/a/xyratex.com/document/d/1JmsVBV8B4R-FrrYyJC_kX2ibzC1F-yTHEdrm3-FLQYk/view]
+ * - Configuration one-pager
+ *   [https://docs.google.com/a/xyratex.com/document/d/1hnWm6x3UhWIB_9qiR69ScGF57Vcy0D38BBTdpFhe4Bo/view]
+ *
+ * (@b Hint: To open a document in read/write mode replace 'view' with
+ * 'edit' in its URL.)
+ */
+
+/**
+ * @defgroup conf_dlspec_obj Configuration Objects
+ *
+ * @see @ref conf, @ref conf-lspec
+ *
+ * @{
+ */
+
 enum {
 	CONF_FSSVC_HEAD_MAGIC   = 0x66732f7376632020, /* "fs/svc  " */
 	CONF_NDSVC_HEAD_MAGIC   = 0x6e6f64652f737663, /* "node/svc" */
@@ -33,3 +363,5 @@ C2_TL_DESCR_DEFINE(c2_conf_filesystem_services,
 		   "c2_conf_filesystem::cf_services", ,
 		   struct c2_conf_service, cs_filesystem_linkage, cs_magic,
 		   CONF_SERVICE_LINK_MAGIC, CONF_FSSVC_HEAD_MAGIC);
+
+/** @} conf_dlspec_obj */
diff --git a/conf/obj.h b/conf/obj.h
index f5d11ac..b366b23 100644
--- a/conf/obj.h
+++ b/conf/obj.h
@@ -26,6 +26,23 @@
 #  include "conf/onwire_u.h" /* c2_conf_buf */
 #endif
 
+/**
+ * @page conf-fspec-obj Configuration Objects
+ *
+ * XXX
+ *
+ * @see @ref conf_dfspec_obj "Detailed Functional Specification"
+ */
+
+/**
+ * @defgroup conf_dfspec_obj Configuration Objects
+ * @brief Detailed Functional Specification.
+ *
+ * @see @ref conf, @ref conf-fspec-obj "Functional Specification"
+ *
+ * @{
+ */
+
 /* XXX @todo Move definitions from cfg/cfg.h to conf/schema.ff */
 #include "cfg/cfg.h"
 
@@ -34,6 +51,13 @@
 #include "lib/tlist.h" /* c2_tl, c2_tlink */
 #include "lib/types.h"
 
+/** Status of configuration object. */
+enum c2_conf_status {
+	C2_CS_MISSING, /*< Configuration is absent; no retrieval in progress. */
+	C2_CS_LOADING, /*< Retrieval of configuration is in progress. */
+	C2_CS_READY    /*< Configuration is available. */
+};
+
 /** Type of configuration object. */
 enum c2_conf_objtype {
 	C2_CO_PROFILE,
@@ -46,13 +70,6 @@ enum c2_conf_objtype {
 	C2_CO_NR
 };
 
-/** Status of configuration object. */
-enum c2_conf_status {
-	C2_CS_MISSING, /*< Configuration is absent; no retrieval in progress. */
-	C2_CS_LOADING, /*< Retrieval of configuration is in progress. */
-	C2_CS_READY    /*< Configuration is available. */
-};
-
 /**
  * Generic configuration object.
  *
@@ -162,4 +179,5 @@ struct c2_conf_partition {
 	char                 pa_filename[C2_CFG_NAME_LEN];
 };
 
+/** @} conf_dfspec_obj */
 #endif /* __COLIBRI_CONF_OBJ_H__ */
diff --git a/conf/obj_ops.c b/conf/obj_ops.c
index 4d85e61..854494d 100644
--- a/conf/obj_ops.c
+++ b/conf/obj_ops.c
@@ -25,6 +25,14 @@
 #include "lib/assert.h" /* C2_IMPOSSIBLE */
 #include "lib/cdefs.h"  /* IS_IN_ARRAY */
 
+/**
+ * @defgroup conf_dlspec_objops Configuration Object Operations
+ *
+ * @see @ref conf, @ref conf-lspec
+ *
+ * @{
+ */
+
 static const struct {
 	/**
 	 * Tests equality of the cached configuration object and its
@@ -116,3 +124,5 @@ int c2_conf_obj_fill(struct c2_conf_obj *dest, const struct confx_object *src,
 	 */
 	XXX;
 }
+
+/** @} conf_dlspec_objops */
diff --git a/conf/obj_ops.h b/conf/obj_ops.h
index e6f4c6e..851b2ef 100644
--- a/conf/obj_ops.h
+++ b/conf/obj_ops.h
@@ -22,6 +22,23 @@
 
 #include "conf/obj.h" /* c2_conf_objtype */
 
+/**
+ * @page conf-fspec-objops Configuration Object Operations
+ *
+ * XXX @todo Describe the context in which these functions are used.
+ *
+ * @see @ref conf_dfspec_objops "Detailed Functional Specification"
+ */
+
+/**
+ * @defgroup conf_dfspec_objops Configuration Object Operations
+ * @brief Detailed Functional Specification.
+ *
+ * @see @ref conf, @ref conf-fspec-objops "Functional Specification"
+ *
+ * @{
+ */
+
 /** Allocates and initiates configuration object of given type. */
 struct c2_conf_obj * c2_conf_obj_new(enum c2_conf_objtype type,
 				     const struct c2_conf_buf *key);
@@ -52,4 +69,5 @@ bool c2_conf_obj_mismatch(const struct c2_conf_obj *cached,
 int c2_conf_obj_fill(struct c2_conf_obj *dest, const struct confx_object *src,
 		     struct c2_conf_map *cache);
 
+/** @} conf_dfspec_objops */
 #endif /* __COLIBRI_CONF_OBJOPS_H__ */
diff --git a/conf/path.c b/conf/path.c
index c75d535..f453767 100644
--- a/conf/path.c
+++ b/conf/path.c
@@ -27,6 +27,14 @@
 #include "lib/memory.h" /* C2_ALLOC_ARR */
 #include "lib/misc.h"   /* memcpy */
 
+/**
+ * @defgroup conf_dlspec_path Path to Configuration Object/Directory
+ *
+ * @see @ref conf, @ref conf-lspec
+ *
+ * @{
+ */
+
 const struct c2_conf_relation dl_profile[] = {
 	{
 		.r_type   = C2_CO_FILESYSTEM,
@@ -141,3 +149,5 @@ c2_conf_pathcomp_dup(const struct c2_conf_pathcomp *src)
 
 	return memcpy(ret, src, nr * sizeof(*ret));
 }
+
+/** @} conf_dlspec_path */
diff --git a/conf/path.h b/conf/path.h
index c5d56d3..53292b8 100644
--- a/conf/path.h
+++ b/conf/path.h
@@ -21,13 +21,22 @@
 #define __COLIBRI_CONF_PATH_H__
 
 /**
- * @page confb-fspec-path Path to Configuration Data
+ * @page conf-fspec-path Path to Configuration Object/Directory
  *
- * @section confb-fspec-path-pathcomp Interpretation of Path Components
+ * - @ref conf-fspec-path-comp
+ * - @ref conf-fspec-path-data
+ * - @ref conf-fspec-path-sub
+ * - @ref conf-fspec-path-macros
+ * - @ref conf_dfspec_path "Detailed Functional Specification"
  *
- * Recall from @ref confc-dld-def that path is `{x, R}' tuple, where
- * `x' (path origin) is a configuration object and `R' is a sequence
- * of path components.
+ * XXX @todo Tell that path is used by application, passed over network, etc.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-fspec-path-comp Interpretation of Path Components
+ *
+ * Recall from @ref conf-def that path is `{x, R}' tuple, where `x'
+ * (path origin) is a configuration object and `R' is a sequence of
+ * path components.
  *
  * Path components explain how to "move" from the origin of a path to
  * its target. Path components can be thought of as "navigational
@@ -68,34 +77,43 @@
  * ... which happens to be the path target as there are no more
  * components to follow.
  *
- * <hr> <!------------------------------------------------------------->
- * @section confb-fspec-path-data Data Structures
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-fspec-path-data Data Structures
  *
- * c2_conf_pathcomp (defined in "conf/onwire.ff") is a representation
- * of path component. It is a tagged union which can be either a
- * relation (c2_conf_objtype), or a key (c2_conf_buf), or a
- * end-of-path marker.
+ * Path component is represented by c2_conf_pathcomp structure,
+ * defined in "conf/onwire.ff".  This structure is a "tagged union",
+ * which can be either a relation (c2_conf_objtype), or a key
+ * (c2_conf_buf), or a end-of-path marker.
  *
- * <hr> <!------------------------------------------------------------->
- * @section confb-fspec-path-sub Subroutines and Macros
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-fspec-path-sub Subroutines
  *
  * - c2_conf_path_is_valid()
- * - C2_CONF_REL()
- * - C2_CONF_KEY()
- * - C2_CONF_EOP()
  * - c2_conf_eop()
  * - c2_conf_downlink()
  * - c2_conf_pathcomp_is_last()
  * - c2_conf_path_len()
  * - c2_conf_pathcomp_dup()
  *
- * @todo XXX describe those
+ * XXX @todo describe
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-fspec-path-macros Convenience Macros
  *
- * @see confb_dfspec
+ * - C2_CONF_REL()
+ * - C2_CONF_KEY()
+ * - C2_CONF_EOP
+ *
+ * XXX @todo describe
+ *
+ * @see @ref conf_dfspec_path "Detailed Functional Specification"
  */
 
 /**
- * @addtogroup confb_dfspec
+ * @defgroup conf_dfspec_path Path to Configuration Object/Directory
+ * @brief Detailed Functional Specification.
+ *
+ * @see @ref conf, @ref conf-fspec-path "Functional Specification"
  *
  * @{
  */
@@ -207,5 +225,5 @@ size_t c2_conf_path_len(const struct c2_conf_pathcomp *path);
 struct c2_conf_pathcomp *
 c2_conf_pathcomp_dup(const struct c2_conf_pathcomp *src);
 
-/** @} confb_dfspec */
+/** @} conf_dfspec_path */
 #endif /* __COLIBRI_CONF_PATH_H__ */
-- 
1.8.3.2


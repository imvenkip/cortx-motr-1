From 450363d7d08b8c71f216468125af3db992295414 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Thu, 10 May 2012 16:03:46 +0300
Subject: [PATCH 161/311] Added colibri setup description. Added first variant
 of state machines for c2_conf_fetch and c2_conf_fetch_resp FOPs processing.

---
 conf/confd.c | 316 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 conf/confd.h | 136 +++++++++----------------
 2 files changed, 360 insertions(+), 92 deletions(-)

diff --git a/conf/confd.c b/conf/confd.c
index 471abb4..e74697a 100644
--- a/conf/confd.c
+++ b/conf/confd.c
@@ -46,6 +46,7 @@
  * - @ref fop <!-- fop/fop.h -->
  * - @ref reqh <!-- reqh/reqh.h -->
  * - @ref colibri_setup <!-- colibri/colibri_setup.h -->
+ * - @ref c2_reqh_service_type_{register/unregister} <!-- reqh/reqh_service.h -->
  *
  * Most reasonable functions, confd depends on, are listed above:
  * - RPC layer:
@@ -72,8 +73,8 @@
  *   information.
  * - Relies on request handler threading model and is animated by
  *   reqh. Request processing is based on FOM execution.
- * - Supports the reception of multiple requests from configuration
- *   consumers.
+ * - Supports the processing of multiple, concurrent requests from
+ *   configuration consumers.
  * - Maintains its own configuration cache, implementation of which is
      common to confd and confc.
  * - Several confd state machines (FOMs) can work with configuration
@@ -82,6 +83,102 @@
  * <hr> <!------------------------------------------------------------>
  * @section confd-lspec Logical Specification
  *
+ * Confd service initialization performed by request handler.  To
+ * allocate Confd service and its internal structures in memory @ref
+ * c2_confd_service_locate() is used.
+ *
+ * Confd service defines operation vector:
+ * - Confd service operation @ref c2_confd_service_start() to
+ *   initiate c2_confd and register Confd FOPs with service
+ * - Confd service operation @ref c2_confd_service_stop() to
+ *   free internal structures of c2_confd and unregister FOPs
+ * - Confd service operation @ref c2_confd_service_fini() to
+ *   free Confd service instance.
+ * 
+ * Confd service is registered in `subsystem' data structure of 
+ * "colibri/init.c", the following lines have to be added:
+ * @code
+ * struct init_fini_call subsystem[] = {
+ *      ...
+ *	{ &c2_confd_service_register, &c2_confd_service_unregister, "confd_service" },
+ *      ...
+ * };
+ * @endcode
+ *
+ * Configuration cache pre-loading procedure traverses all tables of
+ * configuration db. Since relations between neighbour levels are only
+ * possible, tables of higher "levels of DAG" are processed first.
+ * The following code example presents pre-loading in details:
+ *
+ * @code
+ * conf_cache_preload (...)
+ * {
+ *   struct c2_dbenv db;
+ *   struct c2_table t_prof, t_serv, t_fs, t_nic, t_part, t_dev, t_node;
+ *   struct c2_db_cursor c_prof, c_serv, c_fs, c_nic, c_part, c_dev, c_node;
+ *   struct c2_db_pair p_prof, p_serv, p_fs, p_nic, p_part, p_dev, p_node;
+ *   int result;
+ *  
+ *   result = c2_dbenv_init(db, "configuration.db", 0);
+ *   C2_UT_ASSERT(result == 0);
+ *  
+ *   result = c2_db_tx_init(tx, db, 0);
+ *   C2_UT_ASSERT(result == 0);
+ *   
+ *   result = 
+ *     c2_table_init(t_prof, db, "profiles", 0, &test_table_ops) ?:
+ *     c2_table_init(t_serv, db, "services", 0, &test_table_ops) ?:
+ *     c2_table_init(t_fs, db, "file_systems", 0, &test_table_ops) ?:
+ *     c2_table_init(t_nic, db, "nics", 0, &test_table_ops) ?:
+ *     c2_table_init(t_part, db, "storage_device_partitions", 0, &test_table_ops) ?:
+ *     c2_table_init(t_dev, db, "storage_devices", 0, &test_table_ops) ?:
+ *     c2_table_init(t_node, db, "nodes", 0, &test_table_ops);
+ *  
+ *   C2_ASSERT(result == 0);
+ *   
+ *   result =
+ *   c2_db_cursor_init(&c_prof, &t_prof, &tx, 0) ?:
+ *   c2_db_cursor_init(&c_serv, &t_serv, &tx, 0) ?:
+ *   c2_db_cursor_init(&c_fs, &t_fs, &tx, 0) ?:
+ *   c2_db_cursor_init(&c_nic, &t_nic, &tx, 0) ?:
+ *   c2_db_cursor_init(&c_part, &t_part, &tx, 0) ?:
+ *   c2_db_cursor_init(&c_dev, &t_dev, &tx, 0) ?:
+ *   c2_db_cursor_init(&c_node, &t_node, &tx, 0);
+ * 
+ *   C2_ASSERT(result == 0);
+ *
+ *  /* load values from "profiles" table * /
+ *  while(c2_db_cursor_next(&c_prof, &p_prof) != -ENOENT) {
+ *     ... allocate and fill struct c2_conf_profile from p_prof
+ *  }
+ *  /* load values from "file_systems" table * /
+ *  while(c2_db_cursor_next(&c_fs, &p_fs) != -ENOENT) {
+ *     ... allocate and fill struct c2_conf_filesystem from p_fs
+ *     ... create DAG struct c2_conf_relation to profile conf-objects ...
+ *  }
+ *  /* load values from "services" table * /
+ *  while(c2_db_cursor_next(&c_serv, &p_serv) != -ENOENT) {
+ *     ... allocate and fill struct c2_conf_service from p_fs
+ *     ... create DAG struct c2_conf_relation to file system conf-objects ...
+ *  }
+ *  /* load values from "nodes" table * /
+ *  while(c2_db_cursor_next(&c_node, &p_node) != -ENOENT) {
+ *     ... allocate and fill struct c2_conf_node from p_node
+ *     ... create DAG struct c2_conf_relation to services conf-objects ...
+ *  }
+ *  /* load values from "nics" table * /
+ *  while(c2_db_cursor_next(&c_nics, &p_nic) != -ENOENT) {
+ *     ... allocate and fill struct c2_conf_nic from p_nic
+ *     ... create DAG struct c2_conf_relation to node conf-objects ...
+ *  }
+ *  /* load values from "storage_devices" table * /  
+ *  while(c2_db_cursor_next(&c_dev, &p_dev) != -ENOENT) {
+ *     ... allocate and fill struct c2_conf_sdev from p_dev
+ *     ... create DAG struct c2_conf_relation to node conf-objects ...
+ *  }
+ * }
+ * @endcode
+ *
  * Initialization, termination and update of configuration db of
  * confd, performed in c2_confd_start() and c2_confd_terminate() and
  * c2_confd_update(), is trivial. The most of work, such as state
@@ -178,6 +275,59 @@
  * <hr> <!------------------------------------------------------------>
  * @section confd-lspec-state State Specification
  *
+ *   digraph confd_serialize_states {
+ * 	node [fontsize=9];
+ * 	edge [fontsize=9];
+ * 	STATUS_INITIAL [style=filled, fillcolor=lightgrey];
+ * 	STATUS_SERIALIZE;
+ * 	STATUS_WAIT;
+ * 	STATUS_TERMINATE [style=filled, fillcolor=lightgrey];
+ * 	STATUS_FAILURE [style=filled, fillcolor=lightgrey];
+ * 
+ * 	STATUS_INITIAL -> STATUS_SERIALIZE [label="c2_conf_fetch-FOP is arrived \n, next_state() == STATUS_SERIALIZE"];
+ * 	STATUS_SERIALIZE -> STATUS_WAIT [label="tryrdlock(c2_confd::c_accr::ca_rwlock) != 0 || \n c2_confd::c_accr::ca_writers > 0, \n next_state() == STATUS_WAIT"];
+ * 	STATUS_SERIALIZE -> STATUS_TERMINATE [label="serialisation is done"];
+ * 	STATUS_SERIALIZE -> STATUS_FAILURE [label="failed to lookup object \n in cache or (next_state() < 0)"];
+ *  	STATUS_WAIT -> STATUS_SERIALIZE [label="tryrdlock(c2_confd::c_accr::ca_rwlock) == 0 && \n c2_confd::c_accr::ca_writers == 0, \n next_state()==STATUS_SERIALIZE"];
+ *  }
+ *
+ * - C2_CONFD_STATUS_INITIAL:
+ *
+ * - C2_CONFD_STATUS_SERIALIZE:
+ *
+ * - C2_CONFD_STATUS_WAIT:
+ *
+ * - C2_CONFD_STATUS_TERMINATE:
+ *
+ * - C2_CONFD_STATUS_FAILURE:
+ *
+ *  digraph confd_udpate_states {
+ * 	node [fontsize=9];
+ * 	edge [fontsize=9];
+ * 	STATUS_INITIAL [style=filled, fillcolor=lightgrey];
+ * 	STATUS_UPDATE;
+ * 	STATUS_WAIT;
+ * 	STATUS_TERMINATE [style=filled, fillcolor=lightgrey];
+ * 	STATUS_FAILURE [style=filled, fillcolor=lightgrey];
+ * 
+ * 	STATUS_INITIAL -> STATUS_UPDATE [label="c2_conf_update-FOP is arrived \n, next_state() == STATUS_UPDATE"];
+ * 	STATUS_UPDATE -> STATUS_WAIT [label="trywrlock(c2_confd::c_accr::ca_rwlock) != 0, \n next_state() == STATUS_WAIT, \n c2_atomic64_inc(c2_confd::c_accr::ca_writers)"];
+ * 	STATUS_UPDATE -> STATUS_TERMINATE [label="update is done"];
+ * 	STATUS_UPDATE -> STATUS_FAILURE [label="failed to update object \n in cache or (next_state() < 0)"];
+ *  	STATUS_WAIT -> STATUS_UPDATE [label="trywrlock(c2_confd::c_accr::ca_rwlock) == 0, \n next_state()==STATUS_UPDATE, \n c2_atomic64_dec(c2_confd::c_accr::ca_writers)"];
+ *  }
+ *
+ * - C2_CONFD_STATUS_INITIAL:
+ *
+ * - C2_CONFD_STATUS_UPDATE:
+ *
+ * - C2_CONFD_STATUS_WAIT:
+ *
+ * - C2_CONFD_STATUS_TERMINATE:
+ *
+ * - C2_CONFD_STATUS_FAILURE:
+ *
+ * ###################### OLD VISION ########################################
  * Confd state machine is implemented on basis of FOM of c2_conf_fetch
  * FOP.  After corresponding FOM went through a list of FOM specific
  * states it transited into C2_CONFD_STATUS_INITIAL state.
@@ -262,6 +412,7 @@
  *   into intial state.  On any error an c2_conf_fetch_resp FOP will
  *   contain an error code and an empty sequence of descriptors.
  *
+ * ######################/OLD VISION ########################################
  * <hr> <!------------------------------------------------------------>
  * @section confd-lspec-thread Threading and Concurrency Model
  *
@@ -371,13 +522,27 @@ enum c2_confd_status {
 	C2_CONFD_STATUS_FAILURE
 };
 
-/** Generic ops object for ping */
+/** Generic ops object for  */
 struct c2_fom_ops c2_fom_confd_ops = {
 	.fo_fini = c2_fop_confd_fom_fini,
 	.fo_state = reqh_confd_req_fom_state,
 	.fo_home_locality = c2_fom_confd_home_locality
 };
 
+static int ping_fop_fom_create(struct c2_fop *fop, struct c2_fom **m)
+{
+}
+
+/** FOM type specific functions for ping FOP. */
+static const struct c2_fom_type_ops c2_fom_ping_type_ops = {
+	.fto_create = ping_fop_fom_create
+};
+
+/** Ping specific FOM type operations vector. */
+struct c2_fom_type c2_fom_ping_mopt = {
+        .ft_ops = &c2_fom_ping_type_ops,
+};
+
 void c2_fop_confd_fom_fini(struct c2_fom *fom)
 {
 }
@@ -387,6 +552,113 @@ size_t c2_fom_confd_home_locality(const struct c2_fom *fom)
 }
 
 /**
+ * Confd service type operations.
+ */
+static const struct c2_reqh_service_type_ops c2_confd_service_type_ops = {
+        .rsto_service_locate = c2_confd_service_locate
+};
+
+/**
+ * Confd service operations.
+ */
+static const struct c2_reqh_service_ops c2_confd_service_ops = {
+        .rso_start = c2_confd_service_start,
+        .rso_stop  = c2_confd_service_stop,
+        .rso_fini  = c2_confd_service_fini
+};
+
+/**
+ * Allocate and initiate Confd service instance.
+ *
+ * @param stype service type
+ * @param service pointer to service instance.
+ *
+ * @pre stype != NULL && service != NULL
+ */
+static int c2_confd_service_locate(struct c2_reqh_service_type *stype,
+				   struct c2_reqh_service **service)
+{
+	return 0;
+}
+
+/**
+ * Finalise Confd service instance.
+ *
+ * @param service pointer to service instance.
+ *
+ * @pre service != NULL
+ */
+static void c2_confd_service_fini(struct c2_reqh_service *service)
+{
+}
+
+/**
+ * Start Confd Service:
+ * - Register Confd FOPs with service;
+ * - Initiates configuration cache;
+ * - Pre-loads configuration cache from configuration db.
+ *
+ * @param service pointer to service instance.
+ *
+ * @pre service != NULL
+ */
+static int c2_confd_service_start(struct c2_reqh_service *service)
+{
+        return 0;
+}
+
+/**
+ * Stop Confd service.
+ * - Free internal structures of c2_confd;
+ * - Un-register Confd FOPs with service
+ *
+ * @param service pointer to service instance.
+ *
+ * @pre service != NULL
+ */
+static void c2_confd_service_stop(struct c2_reqh_service *service)
+{
+}
+
+C2_REQH_SERVICE_TYPE_DECLARE(c2_confd_service_type, &c2_confd_service_type_ops,
+                             "confd_service");
+
+static void c2_confd_service_fop_fini(void)
+{
+}
+
+/**
+ * Initialize the following FOP types:
+ *  - c2_conf_fetch;
+ *  - c2_conf_fetch_resp;
+ *  - c2_conf_update.
+ */
+static int c2_confd_service_fop_init(void)
+{
+	return 0;
+}
+
+/**
+ * Registers Confd service with colibri node.
+ * Colibri setup calls this function.
+ */
+int c2_confd_service_register(void)
+{
+        c2_reqh_service_type_register(&c2_confd_service_type);
+        return c2_confd_service_fop_init();
+}
+
+/**
+ * Unregisters Confd service from colibri node.
+ */
+void c2_confd_service_unregister(void)
+{
+        c2_reqh_service_type_unregister(&c2_confd_service_type);
+	c2_confd_service_fop_fini();
+}
+
+
+/**
  * Handles incoming requests, called by reqh.
  */
 static int reqh_confd_req_fom_state(struct c2_fom *fom)
@@ -442,6 +714,44 @@ static int reqh_confd_req_fom_state(struct c2_fom *fom)
 }
 
 /**
+ * Starts configuration server.
+ *
+ * @param confd		Configuration server instance.
+ * @param cdbpath	Path to db with configuration values.
+ *
+ * @pre c2_confd::c_accr::ca_cache is not initialized and
+ * c2_confd::c_db is not opened.
+ */
+static int  c2_confd_start(struct c2_confd *confd, const char *cdbpath)
+{
+}
+
+/**
+ * Terminates configuration server.
+ * Destroys and deallocates all data structures.
+ *
+ * @param confd		Configuration server instance.
+ *
+ * @pre c2_confd_start() was called and retured success.
+ * @post c2_confd::c_accr::ca_cache is finalized and c2_confd::c_db is
+ * closed.
+ */
+static void c2_confd_terminate(struct c2_confd *confd);
+
+
+/**
+ * Dumps configuration cache entries into a file in format described in
+ * @ref conf-fspec-preload-string-grammar.
+ *
+ * @param confd		Configuration server instance.
+ * @param out		Path path of a text file to dump into.
+ *
+ * @pre c2_confd_start() was called and retured success.
+ */
+static int c2_confd_cache_dump(struct c2_confd *confd, char *out);
+
+
+/**
  * Serialises given DAG into FOP-package.
  *
  * @param confd	configuration server instance.
diff --git a/conf/confd.h b/conf/confd.h
index 22d0745..60f14ee 100644
--- a/conf/confd.h
+++ b/conf/confd.h
@@ -23,15 +23,18 @@
 
 #include "conf/onwire_u.h" /* c2_conf_fetch, c2_conf_fetch_resp */
 #include "conf/map.h"
+#include "reqh/reqh_service.h"
 #include "db/db.h"
+#inclide "lib/atomic.h"
+#inclide "lib/rwlock.h"
 
 /**
  * @page confd-fspec Configuration Server (confd)
  *
  * Configuration server library (confd) is designed to work as a part
  * of user-space configuration server and provides a "FOP-based"
- * interface for accessing Colibri configuration information, stored
- * in configuration db. Confd run within the context of a request
+ * interface for accessing Colibri configuration information stored
+ * in configuration db. Confd is run within the context of a request
  * handler launched by the colibri_setup program.
  *
  * Confd caches recently used configuration values fetched from
@@ -49,8 +52,10 @@
  *
  * <hr> <!------------------------------------------------------------>
  * @section confd-fspec-data Data Structures
+ * - c2_confd_service --- represents configuration service instace
+ *   registered in request handler
  *
- * - c2_confd --- represents configuration server instance, stores
+ * - c2_confd --- represents configuration server data, stores
  *   structures to perform caching, accessing to configuration db,
  *   request handling
  *
@@ -61,13 +66,11 @@
  *   - @c ca_cache is a @ref conf_cache, filled by values, retrieved
  *     configuration db or recently used values
  *
- * - c2_confd_rpc_server --- represents data structures used for FOP
- *   transmittion.
- *
- * Confd receives multiple configuration requests from confcs
- * containing a "path" of a requested configuration value retrieved
- * from configuration db. Defining FOPs for configuration requests and
- * replies allows using RPC layer as a transport:
+ * Confd receives multiple configuration requests from confcs, each
+ * containing a "path" of a requested configuration value to be
+ * retrieved from the configuration db. Defining FOPs for
+ * configuration requests and replies requires the use of the RPC
+ * layer as a transport:
  *
  * - c2_conf_fetch FOP --- configuration request, originating from confc.
  *
@@ -110,16 +113,16 @@
  * colibri_setup().  For this c2_cs_setup_env() has to run
  * c2_confd_start() and pass corresponding arguments.
  *
- * Initial configuration database is created with @ref yaml2db ---
- * YAML to database parser utility. Confd assumes that:
+ * Initial configuration database is created with @ref yaml2db
+ * utility. Confd assumes that:
  *  - Configuration db is created before confd started;
- *  - Confd uses configuration caching schema, described in @see https://docs.google.com/a/xyratex.com/document/d/1JmsVBV8B4R-FrrYyJC_kX2ibzC1F-yTHEdrm3-FLQYk/view
+ *  - Confd uses configuration caching schema, described in <a href=https://docs.google.com/a/xyratex.com/document/d/1JmsVBV8B4R-FrrYyJC_kX2ibzC1F-yTHEdrm3-FLQYk/view>"High level design of Colibri’s configuration database schema"</a> document.
  *  - Format of configuration db, represented in yaml can be found in @ref yaml2db.
  *
- * The following errors may occur while using of configuration db:
+ * The following errors may occur while using the configuration db:
  * @li Db is empty or is in unrecognized format.
- * @li Db layout is different from metioned in @see https://docs.google.com/a/xyratex.com/document/d/1JmsVBV8B4R-FrrYyJC_kX2ibzC1F-yTHEdrm3-FLQYk/view
- * @li Db has not a looked up key.
+ * @li Db layout is different from that mentioned in <a href=https://docs.google.com/a/xyratex.com/document/d/1JmsVBV8B4R-FrrYyJC_kX2ibzC1F-yTHEdrm3-FLQYk/view>"High level design of Colibri’s configuration database schema"</a>
+ * @li Key is not found.
  *
  * In the first case, error occurs after db-API opens db generated by
  * @ref yaml2db. This may happen while initialization process in
@@ -184,18 +187,11 @@
  * @section confd-fspec-cli Command Usage
  *
  * To configure confd from console, standard options described in
- * @ref colibri_setup in cs_help() function are used. To extend
- * standard options, the following new options are added:
- * - `-c confd_name'  specifies confd name.
- * - `-C confd_db_name' specifies configuration db path.
+ * @ref colibri_setup in cs_help() function are used.
  *
- * For example to run two confds with typical network and request
- * handler options the following command is used:
- * @code
- * ./colibri -r -T AD -D rpc.db -S rpc.stob -e "192.168.1.1:9191"
- *    -c "confd-001" -C "conf-001.db"
- *    -c "confd-002" -C "conf-002.db"
- * @endcode
+ * To extend standard options, environment variables are used:
+ * - `C2_CONFD_NAME[0-9]{1,3}'    specifies confd name.
+ * - `C2_CONFD_DB_NAME[0-9]{1,3}' specifies configuration db path.
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-fspec-recipes  Recipes
@@ -223,7 +219,7 @@
  *	item->ri_group = NULL;
  *
  *	/ * processes incoming request and prepares reply * /
- *	incomming_fop_process(fom->fo_fop, item);
+ *	incoming_fop_process(fom->fo_fop, item);
  *
  *      c2_rpc_reply_post(&fom_obj->fp_fop->f_item, item);
  *}
@@ -253,79 +249,41 @@ struct c2_confd_conf_accessor {
 	struct c2_dbenv		ca_db;
 	/** Registry of cached configuration objects */
 	struct c2_conf_map	ca_cache;
+	/** Keeps track of c2_confd_conf_accessor usage */
+	struct c2_ref		ca_ref;
+	/** Tracks number of threads which are going to update ca_cache */
+	struct c2_atomic64      ca_writers;
+	/** Protects this structure while processing of c2_conf_fetch
+	 * and c2_conf_update FOPs */
+	struct c2_rwlock	ca_rwlock;
 	/** Protects this structure from concurrent access */
 	struct c2_mutex		ca_lock;
 };
 
-/** Configuration rpc server.
- *  Used to process incoming FOP-based requests of configuration data.
- */
-struct c2_confd_rpc_server {
-	struct c2_rpc_server_ctx ctx;
-
-/* private: */
-	const char	       **server_argv;
-	struct c2_net_xprt	*xprt;
-	const char		*rs_srvname;
-	const char		*rs_dbname;
-	const char		*rs_endpoint;
-};
-
-/* Configuration server. */
+/** Configuration server. */
 struct c2_confd {
 	struct c2_addb_ctx		c_addb;
-	struct c2_confd_conf_accessor	c_accr;
-	struct c2_confd_rpc_server      c_srv;
+	struct c2_confd_conf_accessor  *c_accr;
 };
 
+int c2_confd_service_register(void);
+void c2_confd_service_unregister(void);
 
-/**
- * Starts configuration server.
- *
- * @param confd		Configuration server instance.
- * @param cdbpath	Path to db with configuration values.
- * @param srvname	RPC server name
- * @param xprt		RPC server transport
- *
- * @pre c2_confd::c_accr::ca_cache is not initialized and
- * c2_confd::c_db is not opened.
- */
-int  c2_confd_start(struct c2_confd *confd, const char *cdbpath,
-		    char *srvname, struct c2_net_xprt *xprt);
-
-/**
- * Terminates configuration server.
- * Destroys and deallocates all data structures.
- *
- * @param confd		Configuration server instance.
- *
- * @pre c2_confd_start() was called and retured success.
- * @post c2_confd::c_accr::ca_cache is finalized and c2_confd::c_db is
- * closed.
- */
-void c2_confd_terminate(struct c2_confd *confd);
-
-
-/**
- * Updates configuration from given configuration database,
- * removes all items in c2_confd::c_accr::ca_cache.
- * @param confd		Configuration server instance.
- * @param cdbpath	Path to configuration database.
- *
- * @pre c2_confd_start() was called and returned success.
- */
-int c2_confd_update(struct c2_confd *confd, char *cdbpath);
-
+enum {
+        C2_REQH_CONFD_SERVICE_MAGIC = 0x8379008470737f
+};
 
 /**
- * Dumps configuration cache entries into a file in plain odd format.
- *
- * @param confd		Configuration server instance.
- * @param out		Path path of a text file to dump into.
- *
- * @pre c2_confd_start() was called and retured success.
+ * Confd service, registered in request handler
  */
-int c2_confd_cache_dump(struct c2_confd *confd, char *out);
+struct c2_reqh_confd_service {
+        /** Generic reqh service object */
+        struct c2_reqh_service	rcs_gen;
+	/** Confd service data, belongs to each confd service */
+	struct c2_confd		rcs_confd;
+        /** magic to check confd service object */
+        uint64_t		rcs_magic;
+};
 
 /** @} confd_dfspec */
 
-- 
1.8.3.2


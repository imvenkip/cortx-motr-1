From 66174a2e10013523081d5606ed051bee6ae1c0d4 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Mon, 16 Apr 2012 15:54:31 +0300
Subject: [PATCH 131/311] DLD of configuration server confd updated, accordig
 to Review Request #765.

---
 conf/confd.c | 360 ++++++++++++++++++++++++++++++++++++++++++++---------------
 conf/confd.h | 269 ++++++++++++++++++++++++++++++++------------
 2 files changed, 464 insertions(+), 165 deletions(-)

diff --git a/conf/confd.c b/conf/confd.c
index bcb388b..46ffd61 100644
--- a/conf/confd.c
+++ b/conf/confd.c
@@ -27,8 +27,12 @@
  * - @ref confd-dld-req
  * - @ref confd-dld-depends
  * - @ref confd-dld-highlights
- * - @ref confd-dld-fspec "Functional Specification"
+ * - @subpage confd-dld-fspec "Functional Specification"
  * - @ref confd-dld-lspec
+      - @ref confd-dld-lspec-comps
+      - @ref confd-dld-lspec-state
+      - @ref confd-dld-lspec-thread
+      - @ref confd-dld-lspec-numa
  * - @ref confd-dld-conformance
  * - @ref confd-dld-ut
  * - @ref confd-dld-st
@@ -47,7 +51,11 @@
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-def Definitions
- * XXX
+ *
+ * Since confd and confc are working together, sharing several data
+ * structures, like cache of configuration objects, paths, etc., they
+ * have the same definitions, described in @ref confc-dld-def.
+ *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-req Requirements
  *
@@ -71,67 +79,109 @@
  * Confd depends on the following subsystems,
  * most reasonable functions are listed above:
  * - RPC layer:
- *   - c2_rpc_server_start() used to start rpc server
- *   - c2_rpc_server_stop() used to stop rpc server
- *   - c2_cs_rpcmach_get() used to retrieve rpcmach to examine rpc statistics
- *   - c2_rpc_reply_post() used to send FOP-based reply to Confc
- *   - C2_RPC_SERVER_CTX_DECLARE() used to create rpc server context
+ *   - c2_rpc_server_start() used to start rpc server.
+ *   - c2_rpc_server_stop() used to stop rpc server.
+ *   - c2_cs_rpcmach_get() used to retrieve rpcmach to examine rpc statistics.
+ *   - c2_rpc_reply_post() used to send FOP-based reply to Confc.
+ *   - C2_RPC_SERVER_CTX_DECLARE() used to create rpc server context;
  * - DB layer:
- *   - c2_dbenv_init()
- *   - c2_dbenv_fini()
- *   - c2_db_pair_setup()
- *   - c2_table_lookup()
- * - FOP/FOM/REQH/fop2c/onwire.ff:
- *   - struct c2_fom_type - used to define a handler called 
- *     by a thread of request hander on different stages of FOP processing.
+ *   - c2_dbenv_init();
+ *   - c2_dbenv_fini();
+ *   - c2_db_pair_setup();
+ *   - c2_table_lookup().
+ * - FOP, FOM, REQH:
+ *   - c2_fom_block_at();
+ *   - c2_fom_block_leave();
+ *   - c2_fom_block_enter().
+ * - fop2c, onwire.ff:
+ *   - struct c2_fom_type used to define a handler called by a thread
+ *     of request hander on different stages of FOP processing.
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-highlights Design Highlights
  *
- * - Configuration server relies on rehq component threading model and
- *   should not aquire any locks or to be in any waiting states. Request
- *   processing should be performed in an asyncronous-like manner.
- *   The only syncronous calls to configuration DB is allowed.
- *
- * <hr> <!------------------------------------------------------------->
- * @section confd-dld-fspec "Functional Specification"
- * next_state()    - transits confd states relying in the current state
- * and on the state of configuration objects, represented by the confd::c_root
- * obj_load()      - loads confd::c_root from cache or configuration db.
- * aquires c2_fom_block_{enter,leave}() to inform reqh about potential I/O.
- * obj_serialize() - serializes given object to FOP.
- * obj_wait()      - handles wait state of configuration request processing.
- * aquires c2_fom_block_at() to inform reqh to create an extra thread.
- * handle_failure()
- * reqh_confd_req_fom_state() - called by reqh to handle incoming confc requests.
+ * - User-space implementation.
+ * - Provides a "FOP-based" interface for accessing configuration
+ *   information.
+ * - Relies on request handler threading model and is animated by
+ *   reqh. Request processing is based on FOM execution.
+ * - Supports the reception of multiple requests from configuration
+ *   consumers.
+ * - Works as a stand-alone application or as a part of an aggregating
+ *   service.
+ * - Stores configuration information in its own configuration cache,
+ *   which consists of confgiuration objects storage and configuration
+ *   objects graph, representing relations in between them.
+ * - Several confd state machines (FOMs) can work with configuration
+ *   cache, read from it and add new objects to it concurrently.
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-lspec Logical Specification
+ * - next_state() - transits confd states depending on the current
+ *   state and on the state of configuration objects, represented by
+ *   the confd::c_root
+ *
+ * - obj_load() - loads confd::c_root from cache or configuration db,
+ *   acquires c2_fom_block_{enter,leave}() to inform reqh about
+ *   potential I/O.
+ *
+ * - obj_serialize() - serializes given object to FOP.
+ *
+ * - obj_wait() - handles wait state of configuration request
+ *   processing.  acquires c2_fom_block_at() to inform reqh to create
+ *   an extra thread.
+ *
+ * - reqh_confd_req_fom_state() - called by reqh to handle incoming
+ *   confc requests.
+ *
+ * - handle_failure() - handles occurred errors.
  *
  * @subsection confd-dld-lspec-comps Component Overview
  *
  * Confd provides FOP-based interface to access configuration values,
  * stored in configuration db. Confd maintains a cache of
  * configuration objects organized as a directed acyclic graph (DAG).
- * When Confc requests a configuration object cache is filled with
+ * When Confc requests a configuration object, cache is filled with
  * corresponding values fetched from configuration DB. If cache has
  * already a requested object then configuration DB is not accessed.
  * After c2_confd_init() DAG and cache are empty.
  *
- * @subsection confd-dld-lspec-state State Specification
- *
- *	C2_CONFD_STATUS_INITIAL
- *	C2_CONFD_STATUS_SERIALIZE
- *	C2_CONFD_STATUS_LOAD
- *	C2_CONFD_STATUS_WAIT
- *	C2_CONFD_STATUS_TERMINATE
- *	C2_CONFD_STATUS_FAILURE
+ * c2_confd::c2_confd_conf_accessor::ca_cache data
+ * structures represent configuration cache of confd. ca_cache is a
+ * storage of configuration objects and relations between objects are being done by setting 
+ * corresponding pointers of the object to point the next level of a DAG.
+ * Confd shares the same implementation of configuration
+ * cache with confc, description of which can be found in @ref
+ * confc-dld-lspec and @ref confc-dld-lspec.
  * 
- * Confd state transition diagram can be seen in `HLD of configuration
- * caching' document in fig. 4.
  *
- * All confd states are processed in reqh_confd_req_fom_state().
- * 
+ * @subsection confd-dld-lspec-state State Specification
+ * Confd state transition diagram:
+ * @dot
+ * digraph confd_states {
+ *	node [fontsize=9];
+ *	edge [fontsize=9];
+ *	C2_CONFD_STATUS_INITIAL [style=filled, fillcolor=lightgrey];
+ *	C2_CONFD_STATUS_SERIALIZE;
+ *	C2_CONFD_STATUS_LOAD;
+ *	C2_CONFD_STATUS_WAIT;
+ *	C2_CONFD_STATUS_TERMINATE [style=filled, fillcolor=lightgrey];
+ *	C2_CONFD_STATUS_FAILURE [style=filled, fillcolor=lightgrey];
+ *
+ *	C2_CONFD_STATUS_INITIAL -> C2_CONFD_STATUS_SERIALIZE [label="configuration FOP arrived, next_state() == C2_CONFD_STATUS_SERIALIZE"];
+ *	C2_CONFD_STATUS_SERIALIZE -> C2_CONFD_STATUS_LOAD [label="c2_conf_obj::co_status == C2_CS_MISSING, next_state() == C2_CONFD_STATUS_LOAD"];
+ *	C2_CONFD_STATUS_SERIALIZE -> C2_CONFD_STATUS_WAIT [label="c2_conf_obj::co_status == C2_CS_LOADING, next_state() == C2_CONFD_STATUS_WAIT"];
+ *	C2_CONFD_STATUS_SERIALIZE -> C2_CONFD_STATUS_TERMINATE [label="serialisation is done"];
+ *	C2_CONFD_STATUS_SERIALIZE -> C2_CONFD_STATUS_FAILURE [label="failed to load object or (next_state() < 0)"];
+ *	C2_CONFD_STATUS_LOAD -> C2_CONFD_STATUS_FAILURE [label="db does not contain requested object or (next_state() < 0)"];
+ *	C2_CONFD_STATUS_LOAD -> C2_CONFD_STATUS_SERIALIZE [label="configuration object loaded, next_state()==C2_CONFD_STATUS_SERIALIZE}"];
+ *	C2_CONFD_STATUS_WAIT -> C2_CONFD_STATUS_SERIALIZE [label="c2_conf_obj::co_chan signalled, next_state()==C2_CONFD_STATUS_SERIALIZE"];
+ * }
+ * @enddot
+ *
+ * Incoming request state (FOM of c2_conf_fetch FOP) is processed in
+ * reqh_confd_req_fom_state().
+ *
  * - After c2_confd_init() Confd transits into C2_CONFD_STATUS_INITIAL state.
  *
  * - C2_CONFD_STATUS_INITIAL:
@@ -141,24 +191,24 @@
  *
  * - C2_CONFD_STATUS_SERIALIZE:
  *   In this state confd::c_root is being examined. If DAG consists of objects with
- *   co_status == C2_CS_READY then obj_serialize() is called. This produces a FOP to 
+ *   co_status == C2_CS_READY then obj_serialize() is called. This produces a FOP to
  *   send back to Confc. Here c2_rpc_reply_post() is called to send a FOP. next_state()
- *   is called and state transists to C2_CONFD_STATUS_INITIAL.
+ *   is called and state transits to C2_CONFD_STATUS_INITIAL.
  *   If DAG consists of objects with co_status != C2_CS_READY and
- *   confd::c_state != C2_CONFD_STATUS_LOAD then next_state() call transists confd into
- *   C2_CONFD_STATUS_LOAD, otherwize into C2_CONFD_STATUS_WAIT.
+ *   confd::c_state != C2_CONFD_STATUS_LOAD then next_state() call transits confd into
+ *   C2_CONFD_STATUS_LOAD, otherwise into C2_CONFD_STATUS_WAIT.
  *   If obj_serialize() < 0 then transit into C2_CONFD_STATUS_FAILURE.
  *
  * - C2_CONFD_STATUS_LOAD:
  *   In this state objects in DAG and Confd cache are being filled from configuration db.
- *   State in all objects in DAG is set to co_status != C2_CS_LOADING. Untill all objects
+ *   State in all objects in DAG is set to co_status == C2_CS_LOADING. Untill all objects
  *   in DAG aren't loaded, Confd stays in this state.
  *   As far as loading may take a long time, before entering the state c2_fom_block_enter()
  *   is called. When loading stage finished, reqh has to be informed with c2_fom_block_leave().
  *   next_state() call transits confd into C2_CONFD_STATUS_SERIALIZE state.
  *   c2_chan_broadcast() is called on c2_conf_obj::co_chan to notify waiting threads.
  *   If db does not contain requested object then transit into C2_CONFD_STATUS_FAILURE.
- * 
+ *
  * - C2_CONFD_STATUS_WAIT:
  *   In this state Confd creates a link on c2_conf_obj::co_chan and waits on it
  *   with c2_chan_wait() until it's signalled. next_state() call transits confd
@@ -168,109 +218,241 @@
  *   If timeout occured then transits into C2_CONFD_STATUS_FAILURE.
  *
  * - C2_CONFD_STATUS_TERMINATE:
- *   Transists in this state when c2_confd_terminate() is called.
+ *   Transits in this state when c2_confd_terminate() is called.
  *
  * - C2_CONFD_STATUS_FAILURE:
  *   In this state confd handles errors occured while processing of incoming FOP
- *   request and call next_state(). This transfers Confd into intial state.
- *   On any error an empty FOP is being sent on a Confc request. 
+ *   request and calls next_state(). This transfers Confd into intial state.
+ *   On any error an c2_conf_fetch_resp will contain an error code and
+ *   an empty sequence of descriptors.
  *
  * @subsection confd-dld-lspec-thread Threading and Concurrency Model
- * 
- * Confd has not a separate thread. All threading and concurrency is being
- * performed on the Request Handler side, registered in the system.
- * Incoming FOPs handling, state transitions, outgoing FOPs serialization,
+ *
+ * Confd creates no threads of its own but instead is animated by the
+ * request handler. All threading and concurrency is being performed
+ * on the Request Handler side, registered in the system.  Incoming
+ * FOPs handling, state transitions, outgoing FOPs serialization,
  * error handling is done in callbacks called by reqh-component.
- * 
+ *
+ * Configuration server relies on rehq component threading model and
+ * should not acquire any locks or be in any waiting states, except
+ * listed below. Request processing should be performed in an
+ * asynchronous-like manner. Only synchronous calls to configuration
+ * DB are allowed which should be bracketed with c2_fom_block_{enter,leave}().
+ *
+ * According to `HLD of configuration caching', C2_CONFD_STATUS_WAIT state
+ * handler may be implemented using c2_chan_wait(). c2_fom_block_at()
+ * should be called prior to c2_chan_wait().
+ *
+ * @b Future:
+ * Currently, synchronization of c2_confd::c2_confd_conf_accessor::ca_cache
+ * is being performed my locking on c2_confd::c2_confd_conf_accessor::ca_lock
+ * mutex. It possible to avoid this locking in case, when loading a disjoint paths.
  *
  * @subsection confd-dld-lspec-numa NUMA Optimizations
  *
- * Not applicable.
+ * In cases, when there are multiple request handlers, for example,
+ * for different networks, several confd instances should be created
+ * --- one per each request handler.
+ *
+ * However, for optimizations reasons, several confds may share the
+ * same configuration cache.
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-conformance Conformance
  *
  * - @b i.conf.confd.user
- *   Confd is implemented for user space.
+ *   Confd is implemented in user space.
  * - @b i.conf.cache.data-model
  *   Configuration information is organized as outlined in section 4.1
  *   of the HLD. The same data structures are used for confc and
  *   confd.  Configuration structures are kept in memory.
- * - @b i.conf.cache.pinning
- *   Confc "pins" configuration object by incrementing its reference
- *   counter.  c2_confc_fini() asserts (with C2_PRE()) that no objects
- *   are pinned when the cache is being destroyed.
  * - @b i.conf.cache.unique-objects
  *   A registry of cached objects (c2_conf_cache::cc_registry) is used
  *   to achieve uniqueness of configuration object identities.
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-ut Unit Tests
- *  
- * XXX
+ *
+ * @test obj_serialize() will be tested.
+ * @test next_state() will be tested.
+ * 
+ * @test Load predefined configuration object from configuration db.
+ * Check its predefined value.
+ *
+ * @test Load predefined configuration directory from db. Check theirs
+ * predefined values.
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-st System Tests
  *
- * XXX
+ * System test will create a configuration db from yaml-file with
+ * predefined configuration values, and then read them by several
+ * confc clients.  Loaded configuration data in every confc should
+ * match with predefined configuration values.
+ *
+ * @test
+ * 1. Prepare configuration DB with yaml2db and given yaml file.
+ * 2. Run confd, configure it to use newly generated DB.
+ * 3. Run multiple confcs in parallel, requesting the same configuration object.
+ * 4. Every confc should dump configuration object to file with name=("%d.dump", PID).
+ * 5. Compare dumped objects with dumped predefined values.
+ * 6. If values match, test considered to be succeeded, otherwise --- failed.
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-O Analysis
  *
- * XXX
+ * Minimum size of configuration cache, can be evaluated according to
+ * a number of configuration objects of an average size and to the
+ * length of the longest path of configuration objects, passed to
+ * confd with a configuration request FOP, c2_conf_fetch.
+ *
+ * The operating value of configuration cache size can be selected
+ * according either to empirical considerations or to the requests
+ * intencity of confc and distribution of c2_conf_fetch processing
+ * time in confd. Queuing theory can be used in the second case.
  *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-ref References
  *
- * - HLD of configuration caching
+ * - HLD of configuration caching:
  *   [https://docs.google.com/a/xyratex.com/document/d/1t8osSyFOsdTGYGbnMC3ynB1niVqtm6bCJSzJwh1IUw8/view]
- * - HLD of configuration.schema
+ * - HLD of configuration.schema:
  *   [https://docs.google.com/a/xyratex.com/document/d/1JmsVBV8B4R-FrrYyJC_kX2ibzC1F-yTHEdrm3-FLQYk/view]
- * - Configuration one-pager
+ * - Configuration one-pager:
  *   [https://docs.google.com/a/xyratex.com/document/d/1hnWm6x3UhWIB_9qiR69ScGF57Vcy0D38BBTdpFhe4Bo/view]
  *
  * @see confd_dlspec
  */
 
 /**
+ * Configuration server states.
+ * @see https://docs.google.com/a/xyratex.com/document/d/1t8osSyFOsdTGYGbnMC3ynB1niVqtm6bCJSzJwh1IUw8/edit#heading=h.88f45b5e3c0a
+ */
+enum c2_confd_status {
+	C2_CONFD_STATUS_INITIAL = FOPH_NR + 1,
+	C2_CONFD_STATUS_SERIALIZE,
+	C2_CONFD_STATUS_LOAD,
+	C2_CONFD_STATUS_WAIT,
+	C2_CONFD_STATUS_TERMINATE,
+	C2_CONFD_STATUS_FAILURE
+};
+
+/** Generic ops object for ping */
+struct c2_fom_ops c2_fom_confd_ops = {
+	.fo_fini = c2_fop_confd_fom_fini,
+	.fo_state = reqh_confd_req_fom_state,
+	.fo_home_locality = c2_fom_confd_home_locality
+};
+
+void c2_fop_confd_fom_fini(struct c2_fom *fom)
+{
+}
+
+size_t c2_fom_confd_home_locality(const struct c2_fom *fom)
+{
+}
+
+/**
+ * Handles incoming requests, called by reqh.
+ */
+static int reqh_confd_req_fom_state(struct c2_fom *fom)
+{
+	/* fom state function would look something similar to this: */
+        /* /\*  */
+        /*    checks if FOM should transition into a generic/standard */
+        /*    phase or FOP specific phase. */
+        /* *\/ */
+        /* if (fom->fo_phase < FOPH_NR) { */
+        /*         result = c2_fom_state_generic(fom); */
+        /* } else { */
+	/* 	if (fom->fo_phase == C2_CONFD_STATUS_WAIT) { */
+	/* 		... */
+        /*               /\* For asynchronous FOM operation *\/ */
+        /*                 c2_fom_block_at(fom, */
+        /*                            &fom_obj->rh_ut_stio.si_wait); */
+        /*                 result = next_state(confd, C2_CONFD_STATUS_WAIT); */
+        /*              ... */
+	/* 		if (result < 0 || result != C2_CONFD_STATUS_WAIT) { /\* current state *\/ */
+        /*                     fom->fo_rc = result; */
+        /*                     fom->fo_phase = C2_CONFD_STATUS_FAILURE */
+        /*                 } else { */
+        /*                     fom->fo_phase = */
+	/* 			    result; /\*next state *\/ */
+        /*                     return FSO_WAIT; */
+        /*                 } */
+
+	/* 	} else if (fom->fo_phase == C2_CONFD_STATUS_LOAD) { */
+        /*               /\* For synchronous FOM operation *\/ */
+        /*                 c2_fom_block_enter(fom); */
+	/* 		//...  */
+	/* 		//load objects from db */
+	/* 		obj_load(...); */
+        /*                 c2_fom_block_leave(fom); */
+
+	/* 		//... */
+	/* 		result = next_state(confd, C2_CONFD_STATUS_LOAD); */
+	/* 		if (result < 0 || result != C2_CONFD_STATUS_WAIT) { /\* current state *\/ */
+        /*                     fom->fo_rc = result; */
+        /*                     fom->fo_phase = C2_CONFD_STATUS_FAILURE */
+        /*                 } else { */
+        /*                     fom->fo_phase = */
+	/* 			    result; /\*next state *\/ */
+        /*                     return FSO_WAIT; */
+        /*                 } */
+	/* 	} else if (...) /\*process other states *\/ */
+	/* 	else */
+	/* 	{ */
+	/* 	} */
+
+	/* 	return 0; */
+}
+
+/**
  * Serialises given DAG into FOP-package.
  *
- * @param root, of the DAG of configuration objects.
+ * @param path path to the object/directory requested by confc.
  * @param out, FOP, prepared to be sent as a reply with c2_rpc_reply_post().
- * 
- * @pre for_each(obj in root) obj.co_status == C2_CS_READY.
+ *
+ * @pre for_each(obj in path) obj.co_status == C2_CS_READY.
  * @pre out is not initialized.
- * @return 0 on success initialization, <0 on error. 
  */
-static int obj_serialize(struct c2_conf_obj *root, struct c2_fop *out)
+
+
+static int obj_serialize(struct c2_confd *confd,
+			 struct c2_conf_pathcomp *path,
+			 struct c2_fop *fout)
 {
 }
 
 /**
- * Transitions confd into the next state.
- *
- * @param confd, configuration server structure
- * @return 0 on success, <0 if confd is left in the same state
+ * Transits confd into the next state.
+ * This function checks confd::c_accr::ca_map for the state of 
+ * configruation objects loaded into it and returns the next state
+ * in which FOM should be transited to. It takes into account current
+ * state of FOM processing and the following states of configuration objects:
+ * - when C2_CS_MISSING - may transit FOM into C2_CONFD_STATUS_FAILURE.
+ * - when C2_CS_LOADING - may transit FOM into C2_CONFD_STATUS_{LOAD or WAIT}
+ *   depending on current st.
+ * - when C2_CS_READY - may transit FOM into the rest of `C2_CONFD_STATUS_'-states
+ *
+ * @param st current state of incoming FOP-request processing.
  */
-static int next_state(struct c2_confd *confd)
+static int next_state(struct c2_confd *confd, enum c2_confd_status st)
 {
 }
 
 /**
  * Loads confd::c_root of the DAG of configuration objects
  * from configuration db, or confd::c_accr::ca_map cache if mapping exists.
- *
- * @param confd, configuration server structure
- * @return 0 on success, <0 if unable to load object, or path does not exists
  */
 static int obj_load(struct c2_confd *confd)
 {
 }
 
 /**
- * Waits for confd::c_root::co_chan to be signalled.
- * @param confd, configuration server structure
- * @return 0 on success, <0 if timeout occured.
+ * Waits for every object, loaded into cache, c2_conf_obj::co_chan to
+ * be signalled.
  */
 static int obj_wait(struct c2_confd *confd)
 {
@@ -283,9 +465,3 @@ static void handle_failure(struct c2_confd *confd)
 {
 }
 
-/**
- * Handles incoming requests, called by reqh.
- */
-static int reqh_confd_req_fom_state(struct c2_fom *fom)
-{
-}
diff --git a/conf/confd.h b/conf/confd.h
index e2c4303..9a73cdf 100644
--- a/conf/confd.h
+++ b/conf/confd.h
@@ -21,83 +21,189 @@
 #ifndef __COLIBRI_CONF_CONFD_H__
 #define __COLIBRI_CONF_CONFD_H__
 
-
+#include "conf/onwire_u.h" /* c2_conf_fetch, c2_conf_fetch_resp */
+#include "conf/map.h"
+#include "db/db.h"
 
 /**
- *  @addtogroup confd
- *  @{
- * 
  * @page confd-dld-fspec  confd: Functional Specification
  *
- * Configuration server library (confd) is designed to work as a
- * part of user-space configuration server and provides a "FOP-based"
- * interface for accessing Colibri configuration information, stored in 
- * configuration DB.
+ * Configuration server library (confd) is designed to work as a part
+ * of user-space configuration server and provides a "FOP-based"
+ * interface for accessing Colibri configuration information, stored
+ * in configuration DB. Confd may work as a stand-alone application or
+ * as a part of an aggregating service.
  *
- * Confd caches recently used configuration values fetched from configuration DB
- * in memory based data caches to speed up confc requests.
+ * Confd caches recently used configuration values fetched from
+ * configuration DB in memory based data caches to speed up confc
+ * requests.
  *
  * - @ref confd-dld-fspec-data
  * - @ref confd-dld-fspec-sub
+ *   - @ref confd-dld-fspec-sub-setup
+ *   - @ref confd-dld-fspec-sub-use
+ * - @ref confd-dld-fspec-cli
  * - @ref confd-dld-fspec-recipes
+ *   - @ref ex1
+ * - @ref confd_dfspec "Detailed Functional Specification"
+ *
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-fspec-data  Data Structures
- * c2_confd --- represents configuration server, stores structures to 
- * perform caching, accessing to configuration DB, request handling
- * c2_confd_conf_accessor --- represents data structures related to
- * efficient configuration data access.
- * c2_confd_rpc_server --- represents data structures used for FOP
- * transmittion.
- * 
- * Shares with confc:
- * - c2_fop_type_format structures, defined in onwire.ff;
- * - c2_conf_map structure, representing cache of configuration objects.
+ *
+ * - c2_confd --- represents configuration server instance, stores
+ *   structures to perform caching, accessing to configuration DB,
+ *   request handling
+ *
+ * - c2_confd_conf_accessor --- represents data structures related to
+ *   efficient configuration data access.
+ *   - @c ca_db is a database environment to access configuration DB.
+ *   - @c ca_cache is a @ref conf_cache, filled by values, retrieved
+ *     configuration DB or recently used values
+ *
+ * - c2_confd_rpc_server --- represents data structures used for FOP
+ *   transmittion.
+ *
+ * - c2_conf_fetch --- configuration client request, processed by confd.
+ *
+ * - c2_conf_fetch_resp --- configuration server response on confc request.
  * <hr> <!------------------------------------------------------------->
  * @section confd-dld-fspec-sub  Subroutines
- * c2_confd_init() - starts confd-server.
- * c2_confd_fini() - terminates started confd-server.
+ *
+ * - c2_confd_init() starts confd-server.
+ * - c2_confd_fini() terminates started confd-server.
+ *
+ * - c2_confd_update() opens given configuration database,
+ *   cleans confd caches.
+ *
+ * - c2_confd_dump_cache() dumps configuration cache entries into a
+ *   file in plain odd format.
+ *
+ * <!------------------------------------------------------------------>
+ * @subsection confd-dld-fspec-sub-setup Initialization and termination
+ *
+ * To run configuration server, the application which is to embed it
+ * have to call c2_confd_start() to initialize internal data structures
+ * of an instance of confd and to start it.
+ *
+ * To configure confd, user should provide a path to configuration DB,
+ * where configuration values are sored, a path to DB used for FOP
+ * processing.  Prefered network transport structure and the name of
+ * RPC server used by confd are also used to configure confd.
+ *
+ * Initial configuration database is created with @ref yaml2db ---
+ * YAML to Database Parser utility. Confd expects the following:
+ *  - Configuration db to be created before confd started;
+ *  - Confd uses configuration caching schema, described in @see https://docs.google.com/a/xyratex.com/document/d/1JmsVBV8B4R-FrrYyJC_kX2ibzC1F-yTHEdrm3-FLQYk/view
+ *  - Format of configuration db, represented in yaml can be found in @ref yaml2db.
+ *
+ * Initialized confd may be eventually terminated by c2_confd_terminate().
+ *
+ * After a confd instance is started it starts to manage configuration
+ * database, its own internal cache structures and incomming FOP-requests.
+ *
+ * @code
+ * #include "conf/confd.h"
+ *
+ * struct c2_confd confd;
+ *
+ * startup(...) {
+ *	struct c2_confd *confd;
+ *	/ * Path to configuration DB * /
+ *	const char *conf_db = "confd.db";
+ *      / * Path to FOP processing engine DB * /
+ *	const char *rpc_db   = "confd_rpc.db";
+ *      / * Path to FOP processing engine log file * /
+ *	const char *rpc_log  = "confd_rpc.log";
+ *      / * Path to FOP processing engine stob * /
+ *	const char *rpc_stob = "confd_rpc.stob";
+ *	/ * confd RPC server name * /
+ *	const char *srvname = "confd-001";
+ *	int rc = c2_confd_start(&confd, conf_db, rpc_db, rpc_stob,
+ *			rpc_stob, srvname, &c2_net_bulk_sunrpc_xprt);
+ *	...
+ * }
+ *
+ * ... Process incoming FOPs ...
+ * ... Access configuration DB ...
+ * ... Manage configuration cache ...
+ *
+ * shutdown(...) {
+ *     c2_confd_terminate(confd);
+ * }
+ *
+ * @endcode
+ * <!------------------------------------------------------------------>
+ * @subsection confd-dld-fspec-sub-use
+ *
+ * Confc accesses to values stored in configuration database of confd by
+ * sending c2_conf_fetch FOPs using @ref rpc_layer_core. When confd is
+ * able to fetch requested value it replies with a c2_conf_fetch_resp FOP.
+ * @see @ref confd-dld-fspec-recipes for detailed example.
+ *
+ * c2_confd_update() function is used to update configuration database
+ * while confd is running. Function flushes all caches populated by
+ * confd.
+ *
+ * c2_confd_dump_cache() function is used for debug purposes.
+ *
+ * <hr> <!------------------------------------------------------------->
+ * @section confd-dld-fspec-cli Command Usage
+ * Not Applicable.
+ * <hr> <!------------------------------------------------------------->
  * @section confd-dld-fspec-recipes  Recipes
- * Confd API provides "as simple as possible" interface to start 
- * and to terminate configuration server:
- * A typical usage scenario of confd is the following:
  *
- * Start the server, c2_confd_start() returns after server is
- * started and doesn't wait it finishes.
+ * @subsection ex1  Typical Confc <-> Confd interaction
+ * Client sends a c2_conf_fetch FOP:
+ *
  * @code
- * struct c2_confd *confd;
- * const char *conf_db = "/path/to/conf/db";
- * const char *rpc_db  = "/path/to/rpc/db";
- * const char *srvname = "confd-001";
- * int rc = c2_confd_start(&confd, conf_db, rpc_db, srvname, &c2_net_bulk_sunrpc_xprt);
- * assert(rc == 0);
+ *	fop = c2_fop_alloc(&c2_conf_fetch_fopt, NULL);
+ *	C2_ASSERT(fop != NULL);
+ *	/ * prepares fop-requst sent to confd,
+ *          allocates requested path values. * /
+ *	conf_fetch_prepare(fop);
+ *	rc = c2_rpc_client_call(fop, session,
+ *		&c2_fop_default_item_ops, CONNECT_TIMEOUT);
  * @endcode
- * 
- * Confd server interacts with Confc-s using FOP-based interface.
- * After Confc sends a FOP with configuration data request,
- * server processes it and send a FOP-reply. Details can be found in @ref confd-dld-lspec.
  *
- * Terminate Conf-d server:
+ * Configuration server processes Confc requests in state function of
+ * c2_conf_fetch request:
+ *
  * @code
- * c2_confd_terminate(&confd);
+ * int reqh_confd_req_fom_state(struct c2_fom *fom)
+ *  {
+ *	struct c2_fop			*fop;
+ *      struct c2_rpc_item              *item;
+ *      struct c2_fom_ping		*fom_obj;
+ *
+ *	fom_obj = container_of(fom, struct c2_conf_fetch, fp_gen);
+ *      fop = c2_fop_alloc(&c2_conf_fetch_rep_fopt, NULL);
+ *      C2_ASSERT(fop != NULL);
+ *
+ *	item = c2_fop_to_rpc_item(fop);
+ *	item->ri_group = NULL;
+ *
+ *	/ * processes incoming request and prepares reply * /
+ *	incomming_fop_process(fom->fo_fop, item);
+ *
+ *      c2_rpc_reply_post(&fom_obj->fp_fop->f_item, item);
+ *}
+ *
  * @endcode
+ *
+ * @see confd_dfspec
  */
 
 /**
- * Configuration server states.
- * @see Fig 4 in https://docs.google.com/a/xyratex.com/document/d/1t8osSyFOsdTGYGbnMC3ynB1niVqtm6bCJSzJwh1IUw8/view
+ * @defgroup confd_dfspec  Configuration Server (confd)
+ *
+ * @see @ref confd-dld, @ref confd-dld-fspec
+ *
+ * @{
  */
-enum c2_confd_status {
-	C2_CONFD_STATUS_INITIAL = FOPH_NR + 1,
-	C2_CONFD_STATUS_SERIALIZE,
-	C2_CONFD_STATUS_LOAD,
-	C2_CONFD_STATUS_WAIT,
-	C2_CONFD_STATUS_TERMINATE,
-	C2_CONFD_STATUS_FAILURE
-};
 
 /**
  * Configuration data accessor.
- * Used to access to configuration data from DB or from cache 
+ * Used to access to configuration data from DB or from cache
  * if it's populated with corresponding data.
  */
 struct c2_confd_conf_accessor {
@@ -107,15 +213,17 @@ struct c2_confd_conf_accessor {
 	struct c2_dbenv		ca_db;
 	/** Registry of cached configuration objects */
 	struct c2_conf_map	ca_cache;
+	/** Protects embedding structure from concurrent access */
+	struct c2_mutex		ca_lock;
 };
 
 /** Configuration rpc server.
  *  Used to process incoming FOP-based requests of configuration data.
  */
-struct c2_confd_rpc_server {	
+struct c2_confd_rpc_server {
 	struct c2_rpc_server_ctx ctx;
 
-/* private: */	
+/* private: */
 	const char	       **server_argv;
 	struct c2_net_xprt	*xprt;
 	const char		*rs_srvname;
@@ -131,44 +239,59 @@ struct c2_confd {
 	struct c2_confd_conf_accessor	c_accr;
 	/** Configuration rpc server */
 	struct c2_confd_rpc_server      c_srv;
-
-/* private: */	
-	/** lock, to protect confd from concurrent access */
-	struct c2_mutex			c_lock;
-	/** current state of confd */
-	struct c2_confd_status          c_st;
-	/** represents currently requested DAG of configuration objects */
-	struct c2_conf_obj	       *c_root;
 };
 
 /**
  * Starts configuration server.
  * @param confd		Configuration server instance.
  * @param cdbpath	Path to DB with configuration values.
- * @param rdbpath       Path to RPC-server DB
- * @param srvname	RPC-server name
- * @param xprt		RPC-server transport
+ * @param rdbpath       Path to RPC server DB
+ * @param rstob		Path to RPC server STOB
+ * @param rlog		Path to RPC server log
+ * @param srvname	RPC server name
+ * @param xprt		RPC server transport
  *
- * @pre c2_mutex_is_not_locked(c2_confd::c_lock)
- * @post c2_mutex_is_not_locked(c2_confd::c_lock) && c_st == C2_CONFD_STATUS_INITIAL
- * @return 0 on success initialization, <0 on error. 
+ * @pre c2_confd::c_cache is not initialised and c2_confd::c_db is not opened.
+ * @return 0 on success initialization, <0 on error.
  */
-int  c2_confd_start(struct c2_confd *confd, char *cdbpath, char *rdbpath,
+int  c2_confd_start(struct c2_confd *confd, char *cdbpath,
+		    char *rdbpath, char *rstob, char *rlog,
 		    char *srvname, struct c2_net_xprt *xprt);
 
-
 /**
- * Terminates configuration server structures.
- * 
+ * Terminates configuration server.
  * Destroys and deallocates all data structures.
- * @pre c_st == C2_CONFD_STATUS_INITIAL
- * @pre c2_mutex_is_not_locked(c2_confd::c_lock)
- * @post c_st == C2_CONFD_STATUS_TERMINATE
+ * @param confd		Configuration server instance.
+ *
+ * @pre c2_confd_start() was called and retured success.
  * @post c2_confd::c_cache is finalized and c2_confd::c_db is closed.
  */
 void c2_confd_terminate(struct c2_confd *confd);
 
 
+/**
+ * Updates configuration from given configuration database,
+ * removes all items in c2_confd::ca_cache.
+ * @param confd		Configuration server instance.
+ * @param cdbpath	Path to configuration database.
+ *
+ * @pre c2_confd_start() was called and retured success.
+ * @return 0 on success initialization, <0 on error.
+ */
+int c2_confd_update(struct c2_confd *confd, char *cdbpath);
+
+
+/**
+ * Dumps configuration cache entries into a file in plain odd format.
+ * @param confd		Configuration server instance.
+ * @param out		Path path of a text file to dump into.
+ *
+ * @pre c2_confd_start() was called and retured success.
+ * @return 0 on success initialization, <0 on error.
+ */
+int c2_confd_dump_cache(struct c2_confd *confd, char *out);
+
+
 /** @} end group confd */
 
 #endif /* __COLIBRI_CONF_CONFD_H__ */
-- 
1.8.3.2


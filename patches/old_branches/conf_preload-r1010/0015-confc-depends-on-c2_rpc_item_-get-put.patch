From cedfd99c1bcc27033de53f109050a706f88dc3b6 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Thu, 23 Feb 2012 16:45:54 +0200
Subject: [PATCH 015/311] confc depends on c2_rpc_item_{get,put}()

---
 conf/confc.c |  8 ++++++--
 conf/obj.c   | 14 ++++++++++++++
 rpc/rpc2.c   | 14 ++++++++++++++
 rpc/rpc2.h   |  7 +++++--
 4 files changed, 39 insertions(+), 4 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index e20111c..5493e63 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -461,6 +461,8 @@ static void grow_cache_st_in(struct c2_sm *mach)
 
 		XXX;
 	}
+
+	c2_rpc_item_put(item->ri_reply);
 }
 
 static void completion_announce(struct c2_sm *mach)
@@ -491,10 +493,12 @@ static void on_replied(struct c2_rpc_item *item)
 	ctx = container_of(c2_rpc_item_to_fop(item), struct c2_confc_ctx,
 			   fc_fop);
 
-	if (item->ri_error == 0)
+	if (item->ri_error == 0) {
+		c2_rpc_item_get(item->ri_reply);
 		ast_state_set(&ctx->fc_ast, S_GROW_CACHE);
-	else
+	} else {
 		ast_fail(&ctx->fc_ast, item->ri_error);
+	}
 }
 
 /** Handles "object unpinned" event. */
diff --git a/conf/obj.c b/conf/obj.c
index 69b1151..5d5a8e4 100644
--- a/conf/obj.c
+++ b/conf/obj.c
@@ -24,6 +24,7 @@
  * - @ref conf-dld-ovw
  * - @ref conf-dld-def
  * - @ref conf-dld-req
+ * - @ref conf-dld-depends
  * - XXX
  *
  * <hr>
@@ -89,6 +90,19 @@
  *   Configuration cache must not contain multiple objects with the
  *   same identity (identity of a configuration object is a tuple of
  *   type and key).
+ *
+ * <hr>
+ * @section conf-dld-depends Dependencies
+ *
+ * - c2_rpc_item_get() and c2_rpc_item_put() should be implemented.
+ *
+ *   Confc implementation schedules a state transition in
+ *   ->rio_replied().  The data of ->ri_reply will be consumed only
+ *   when the new state is being entered to.  The rpc item pointed to
+ *   by ->ri_reply must not be freed (by rpc layer) until confc has
+ *   consumed the data.  Thus the need for c2_rpc_item_get().
+ *
+ * - XXX
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/rpc/rpc2.c b/rpc/rpc2.c
index 3a1c63c..1895ce5 100644
--- a/rpc/rpc2.c
+++ b/rpc/rpc2.c
@@ -156,6 +156,7 @@ void c2_rpc_item_init(struct c2_rpc_item *item)
         c2_list_link_init(&item->ri_group_linkage);
 	item->ri_state = RPC_ITEM_UNINITIALIZED;
 }
+C2_EXPORTED(c2_rpc_item_init);
 
 void c2_rpc_item_fini(struct c2_rpc_item *item)
 {
@@ -178,6 +179,19 @@ void c2_rpc_item_fini(struct c2_rpc_item *item)
         c2_list_link_fini(&item->ri_group_linkage);
 	item->ri_state = RPC_ITEM_FINALIZED;
 }
+C2_EXPORTED(c2_rpc_item_fini);
+
+void c2_rpc_item_get(struct c2_rpc_item *item)
+{
+	/* XXX */
+}
+C2_EXPORTED(c2_rpc_item_get);
+
+void c2_rpc_item_put(struct c2_rpc_item *item)
+{
+	/* XXX */
+}
+C2_EXPORTED(c2_rpc_item_put);
 
 int c2_rpc_post(struct c2_rpc_item *item)
 {
diff --git a/rpc/rpc2.h b/rpc/rpc2.h
index a11d126..3addc48 100644
--- a/rpc/rpc2.h
+++ b/rpc/rpc2.h
@@ -416,10 +416,13 @@ struct c2_rpc_stats {
 void c2_rpc_item_type_attach(struct c2_fop_type *fopt);
 
 void c2_rpc_item_init(struct c2_rpc_item *item);
-
 void c2_rpc_item_fini(struct c2_rpc_item *item);
 
-void c2_rpc_item_fini(struct c2_rpc_item *item);
+/** Increments item's reference counter. */
+void c2_rpc_item_get(struct c2_rpc_item *item);
+
+/** Decrements item's reference counter. */
+void c2_rpc_item_put(struct c2_rpc_item *item);
 
 /**
    Returns true if item modifies file system state, false otherwise
-- 
1.8.3.2


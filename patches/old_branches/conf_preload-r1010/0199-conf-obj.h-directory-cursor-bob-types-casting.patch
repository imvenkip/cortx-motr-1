From ce3b23e13bf9a26e3947f29c0c537476a7e67885 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 15 Jun 2012 22:24:27 +0300
Subject: [PATCH 199/311] conf/obj.h: directory cursor, bob types, casting

- C2_CONF_CAST(): casts c2_conf_obj pointer to a concrete
  configuration object.
- struct c2_conf_dircur: new definition.
- Declare c2_bob_types for configuration objects.
- Add "asynchronous confc interfaces" requirement.
- Create a stub for Implementation Plan section.
---
 conf/obj.c |  26 ++++++++++-
 conf/obj.h | 146 ++++++++++++++++++++++++++++++++++++++++++++-----------------
 2 files changed, 130 insertions(+), 42 deletions(-)

diff --git a/conf/obj.c b/conf/obj.c
index 75febf9..8e94dd3 100644
--- a/conf/obj.c
+++ b/conf/obj.c
@@ -39,6 +39,7 @@
  * - @ref conf-O
  * - @ref conf-scalability
  * - @ref conf-ref
+ * - @ref conf-impl-plan
  *
  * <hr> <!------------------------------------------------------------>
  * @section conf-ovw Overview
@@ -104,6 +105,9 @@
  *   Confc library must be implemented for the kernel.
  * - @b r.conf.confc.user
  *   Confc library must be implemented for user space.
+ * - @b r.conf.confc.async
+ *   Confc library provides asynchronous interfaces for accessing
+ *   configuration data.
  * - @b r.conf.cache.data-model
  *   The implementation should organize configuration information as
  *   outlined in section 4.1 of the HLD. The same data structures
@@ -213,6 +217,8 @@
  *   user-space code.
  * - @b i.conf.confc.user
  *   Confc library is implemented for user space.
+ * - @b i.conf.confc.async
+ *   c2_confc_open() and c2_confc_readdir() are asynchronous calls.
  * - @b i.conf.cache.data-model
  *   Configuration information is organized as outlined in section 4.1
  *   of the HLD. One-to-many relationships are represented by
@@ -350,6 +356,17 @@
  *
  * (@b Hint: To open a document in read/write mode replace 'view' with
  * 'edit' in its URL.)
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-impl-plan Implementation Plan
+ *
+ * (@todo Delete this section from the DLD when the feature is landed
+ * into master.)
+ *
+ * [vvv] Carl, what was the 4th example you wanted me to add to @ref
+ *       confc-fspec-recipes?
+ *
+ * XXX
  */
 
 /**
@@ -360,6 +377,13 @@
  * @{
  */
 
-XXX;
+struct c2_bob_type c2_conf_dir_bob;
+struct c2_bob_type c2_conf_profile_bob;
+struct c2_bob_type c2_conf_filesystem_bob;
+struct c2_bob_type c2_conf_service_bob;
+struct c2_bob_type c2_conf_node_bob;
+struct c2_bob_type c2_conf_nic_bob;
+struct c2_bob_type c2_conf_sdev_bob;
+struct c2_bob_type c2_conf_partition_bob;
 
 /** @} conf_dlspec_obj */
diff --git a/conf/obj.h b/conf/obj.h
index 4adf4ff..a9be60c 100644
--- a/conf/obj.h
+++ b/conf/obj.h
@@ -33,6 +33,7 @@
 #include "fid/fid.h"   /* c2_fid */
 #include "lib/tlist.h" /* c2_tl, c2_tlink */
 #include "lib/types.h"
+#include "lib/bob.h"   /* c2_bob_type */
 
 /**
  * @page conf-fspec-obj Configuration Objects
@@ -50,25 +51,24 @@
  * filesystems, services, nodes, storage devices, etc.  Configuration
  * data is contained in configuration objects of which there are 8
  * types:
- * - c2_conf_dir (a container of configuration objects),
+ * - c2_conf_dir (a container for configuration objects),
  * - c2_conf_profile,
  * - c2_conf_filesystem,
  * - c2_conf_service,
  * - c2_conf_node,
  * - c2_conf_nic,
- * - c2_conf_sdev, and
+ * - c2_conf_sdev,
  * - c2_conf_partition.
  *
- * Different types of configuration objects have non-overlapping sets
- * of fields (e.g., type of service is an attribute of c2_conf_service
- * object), but some fields are common to all types of objects (e.g.,
- * object's identifier or status).  Common fields are grouped into
- * c2_conf_obj structure, which is embedded into every configuration
- * object.
+ * Some attributes are applicable to any type of configuration object.
+ * Such common attributes are put together into c2_conf_obj structure,
+ * which is embedded into concrete configuration objects.
  *
- * c2_conf_obj is referred to as @em generic configuration object,
- * while c2_conf_dir, c2_conf_profile, ..., c2_conf_partition are
- * @em concrete configuration objects.
+ * Other data structures:
+ * - c2_conf_obj_ops --- object operations vector.
+ * - c2_conf_dircur --- directory cursor, used by
+ *   c2_conf_obj_ops::coo_readdir() to track position within a
+ *   directory.
  *
  * <hr> <!------------------------------------------------------------>
  * @section conf-fspec-obj-enum Enumerations
@@ -136,7 +136,6 @@
 
 /**
  * Status of configuration object.
- *
  * Configuration object is a stub unless its status is C2_CS_READY.
  */
 enum c2_conf_status {
@@ -169,10 +168,24 @@ enum {
 	C2_CONF_PARTITION_MAGIX  = XXX
 };
 
+#define _DECLARE(type) \
+struct type;           \
+extern struct c2_bob_type type ## _bob
+_DECLARE(c2_conf_dir);
+_DECLARE(c2_conf_profile);
+_DECLARE(c2_conf_filesystem);
+_DECLARE(c2_conf_service);
+_DECLARE(c2_conf_node);
+_DECLARE(c2_conf_nic);
+_DECLARE(c2_conf_sdev);
+_DECLARE(c2_conf_partition);
+#undef _DECLARE
+
 struct c2_conf_obj_ops;
+struct c2_confc; /* defined in "conf/confc.h" */
 
 /**
- * Generic configuration object.
+ * Base configuration object.
  *
  * The fields of struct c2_conf_obj are common to all configuration
  * objects.  c2_conf_obj is embedded into each concrete configuration
@@ -204,43 +217,40 @@ struct c2_conf_obj {
 	 * "object unpinned" events are announced.
 	 */
 	struct c2_chan          co_chan;
-	/** This field is reserved for confc and confd implementations. */
-	const void             *co_private;
-};
-
-struct c2_conf_dir;
-struct c2_confc_dircur; /* XXX defined in conf/confc.h */
-
-/** Configuration object operations. */
-struct c2_conf_obj_ops {
-	/** Finds a child of given object. */
-	int (*coo_lookup)(struct c2_conf_obj *parent,
-			  const struct c2_conf_buf *id);
 	/**
-	 * Returns a pointer to the next directory entry.
-	 *
-	 * @retval 1    *result now points at the next directory entry.
-	 * @retval 0    End of the directory is reached.
-	 * @retval < 0  Error.
+	 * Private data of confc implementation.
 	 *
-	 * @pre  dir->co_type == C2_CO_DIR
-	 *
-	 * This function is used by confc implementation.
+	 * If confd implementation ever needs to store its private
+	 * data within c2_conf_obj, this member should be changed to
+	 * union {
+	 *         struct c2_confc *confc;
+	 *         some_type       *confd;
+	 * } co_private;
 	 */
-	int (*coo_readdir)(struct c2_conf_dir *dir,
-			   struct c2_confc_dircur *cursor,
-			   struct c2_conf_obj **result);
+	struct c2_confc        *co_confc;
 };
 
-/** Directory object --- a container of configuration objects. */
+/**
+ * Casts c2_conf_obj to the ambient concrete configuration object.
+ *
+ * @param ptr    Pointer to c2_conf_obj member.
+ * @param type   Type of concrete configuration object (without `struct').
+ * @param field  Name of c2_conf_obj member within the struct.
+ */
+#define C2_CONF_CAST(ptr, type, field) \
+	bob_of(ptr, struct type, field, &type ## _bob)
+
+/* ------------------------------------------------------------------
+ * Concrete configuration objects
+ * ------------------------------------------------------------------ */
+
+/** Directory object --- container for configuration objects. */
 struct c2_conf_dir {
 	struct c2_conf_obj cd_obj;
 	uint64_t           cd_magix;
 	struct c2_tl       cd_items;
 };
 
-struct c2_conf_filesystem;
-
 struct c2_conf_profile {
 	struct c2_conf_obj         cp_obj;
 	uint64_t                   cp_magix;
@@ -261,8 +271,6 @@ struct c2_conf_filesystem {
 	const char         *cf_params;
 };
 
-struct c2_conf_node;
-
 struct c2_conf_service {
 	struct c2_conf_obj       cs_obj;
 	uint64_t                 cs_magix;
@@ -352,5 +360,61 @@ struct c2_conf_partition {
 	const char        *pa_filename;
 };
 
+/* ------------------------------------------------------------------
+ * Object operations vector
+ * ------------------------------------------------------------------ */
+
+struct c2_conf_dircur;
+
+/** Configuration object operations. */
+struct c2_conf_obj_ops {
+	/** Finds a child of given object. */
+	int (*coo_lookup)(struct c2_conf_obj *parent,
+			  const struct c2_conf_buf *name);
+	/**
+	 * Returns the next directory entry.
+	 *
+	 * @retval 1    *result now points to the next directory entry.
+	 * @retval 0    End of the directory is reached.
+	 * @retval < 0  Error.
+	 *
+	 * @pre  cur->dc_dir->cd_obj.co_status == C2_CS_READY
+	 */
+	int (*coo_readdir)(struct c2_conf_obj **result,
+			   struct c2_conf_dircur *cur);
+};
+
+/* ------------------------------------------------------------------
+ * Directory cursor
+ * ------------------------------------------------------------------ */
+
+/**
+ * Directory cursor.
+ *
+ * c2_conf_dircur is used to track position within a directory.
+ */
+struct c2_conf_dircur {
+	/** Directory this cursor works with. */
+	struct c2_conf_dir *dc_dir;
+	/**
+	 * Configuration object that has been returned (and pinned)
+	 * by previous "readdir" call.
+	 */
+	struct c2_conf_obj *dc_pin;
+};
+
+/**
+ * Initializes directory cursor. Increments dir's reference counter.
+ *
+ * @pre  dir->cd_obj.co_status == C2_CS_READY
+ */
+void c2_conf_dircur_init(struct c2_conf_dircur *cur, struct c2_conf_dir *dir);
+
+/**
+ * Finalizes directory cursor.
+ * Decrements reference counters of cur->dc_pin and cur->dc_dir.
+ */
+void c2_conf_dircur_fini(struct c2_conf_dircur *cur);
+
 /** @} conf_dfspec_obj */
 #endif /* __COLIBRI_CONF_OBJ_H__ */
-- 
1.8.3.2


From 5da10d712fdd42b7b995ce6f6c0766fb7b61c714 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Tue, 7 Aug 2012 12:46:00 +0300
Subject: [PATCH 277/311] introduce c2_conf__obj_invariant() and
 ->coo_invariant()

+ c2_conf__obj{get,put}(): add a precondition, asserting that confc
  lock is being held.

LogD #679
RB: r/939/diff/3/?file=26040#file26040line445 ,
    r/939/diff/3/?file=26040#file26040line453
---
 conf/obj.c     | 47 ++++++++++++++++++++++++++++++++++++-----------
 conf/obj.h     | 45 +++++++++++++++++++++++++++++++++++++++++++++
 conf/obj_ops.c | 19 ++++++++++++++++---
 3 files changed, 97 insertions(+), 14 deletions(-)

diff --git a/conf/obj.c b/conf/obj.c
index 4f530ec..b181c98 100644
--- a/conf/obj.c
+++ b/conf/obj.c
@@ -22,6 +22,7 @@
 #  include <config.h>
 #endif
 #include "conf/obj.h"
+#include "conf/confc.h" /* c2_confc */
 #include "lib/arith.h"  /* C2_CNT_INC, C2_CNT_DEC */
 #include "lib/cdefs.h"  /* ergo */
 #include "lib/misc.h"   /* C2_IN */
@@ -435,44 +436,68 @@ struct c2_bob_type c2_conf_nic_bob = XXX;
 struct c2_bob_type c2_conf_sdev_bob = XXX;
 struct c2_bob_type c2_conf_partition_bob = XXX;
 
+static bool confc_is_locked(const struct c2_confc *confc);
+static bool belongs(const struct c2_conf_obj *entry,
+		    const struct c2_conf_obj *dir);
+
+bool c2_conf__obj_invariant(const struct c2_conf_obj *obj)
+{
+	return XXX_generic_invariant(obj) &&
+		(obj->co_ops->coo_invariant == NULL ? true :
+		 obj->co_ops->coo_invariant(obj));
+}
+
 void c2_conf__obj_get(struct c2_conf_obj *obj)
 {
+	C2_PRE(c2_conf__obj_invariant(obj));
 	C2_PRE(obj->co_status == C2_CS_READY);
+	C2_PRE(ergo(obj->co_confc != NULL, confc_is_locked(&obj->co_confc)));
+
 	C2_CNT_INC(obj->co_nrefs);
 }
 
 void c2_conf__obj_put(struct c2_conf_obj *obj)
 {
+	C2_PRE(c2_conf__obj_invariant(obj));
 	C2_PRE(obj->co_status == C2_CS_READY);
+	C2_PRE(ergo(obj->co_confc != NULL, confc_is_locked(&obj->co_confc)));
+
 	C2_CNT_DEC(obj->co_nrefs);
 	if (obj->co_nrefs == 0)
 		c2_chan_broadcast(&obj->co_chan);
 }
 
-static bool
-belongs(const struct c2_conf_obj *entry, const struct c2_conf_obj *dir)
-{
-	const struct c2_conf_dir *d = bob_of(dir, const struct c2_conf_dir,
-					     c2_conf_dir_cast_field,
-					     &c2_conf_dir_bob);
-	return d->cd_items_t == entry->co_type && entry->co_parent == dir;
-}
-
 bool c2_conf__readdir_pre(const struct c2_conf_obj *dir,
 			  const struct c2_conf_obj *entry)
 {
-	return dir->co_type == C2_CO_DIR && dir->co_nrefs > 0 &&
+	return c2_conf__obj_invariant(dir) && c2_conf__obj_invariant(entry) &&
+		dir->co_type == C2_CO_DIR && dir->co_nrefs > 0 &&
 		ergo(entry != NULL, belongs(entry, dir) && entry->co_nrefs > 0);
 }
 
 bool c2_conf__readdir_post(int retval, const struct c2_conf_obj *dir,
 			   const struct c2_conf_obj *entry)
 {
-	return C2_IN(retval,
+	return c2_conf__obj_invariant(dir) && c2_conf__obj_invariant(entry) &&
+		C2_IN(retval,
 		     (C2_CONF_DIREND, C2_CONF_DIRNEXT, C2_CONF_DIRMISS)) &&
 		(retval == C2_CONF_DIRNEXT ?
 		 (entry != NULL && belongs(entry, dir) && entry->co_nrefs > 0) :
 		 entry == NULL);
 }
 
+static bool
+belongs(const struct c2_conf_obj *entry, const struct c2_conf_obj *dir)
+{
+	const struct c2_conf_dir *d = bob_of(dir, const struct c2_conf_dir,
+					     c2_conf_dir_cast_field,
+					     &c2_conf_dir_bob);
+	return d->cd_items_t == entry->co_type && entry->co_parent == dir;
+}
+
+static bool confc_is_locked(const struct c2_confc *confc)
+{
+	return c2_mutex_is_locked(&confc->cc_lock);
+}
+
 /** @} conf_dlspec_obj */
diff --git a/conf/obj.h b/conf/obj.h
index 72a49ed..0528f7b 100644
--- a/conf/obj.h
+++ b/conf/obj.h
@@ -104,6 +104,8 @@
  * <hr> <!------------------------------------------------------------>
  * @section conf-fspec-obj-sub Subroutines
  *
+ * c2_conf__obj_invariant() checks validity of a configuration object.
+ *
  * c2_conf__obj_get() and c2_conf__obj_put() are used by confc and
  * confd implementations to manipulate reference counter of a
  * configuration object.
@@ -111,6 +113,9 @@
  * c2_conf__readdir_pre() and c2_conf__readdir_post() are pre- and
  * postconditions for c2_conf_obj_ops::coo_readdir().
  *
+ * The c2_conf__*() functions mentioned above are not supposed to be
+ * used by the application (aka configuration consumer).
+ *
  * <hr> <!------------------------------------------------------------>
  * @section conf-fspec-obj-pinned Pinned Objects
  *
@@ -215,10 +220,25 @@ struct c2_conf_obj {
 };
 
 /**
+ * Checks validity of given configuration object.
+ *
+ * @note  c2_conf__obj_invariant() is used by confc and confd
+ *        implementations and is not supposed to be used by the
+ *        application (aka configuration consumer).
+ *
+ * @see  c2_conf_obj_ops::coo_invariant()
+ */
+bool c2_conf__obj_invariant(const struct c2_conf_obj *obj);
+
+/**
  * Increments reference counter of given configuration object.
  *
  * @pre   obj->co_status == C2_CS_READY
  * @post  obj->co_nrefs > 0
+ *
+ * @note  c2_conf__obj_get() is used by confc and confd
+ *        implementations and is not supposed to be used by the
+ *        application (aka configuration consumer).
  */
 void c2_conf__obj_get(struct c2_conf_obj *obj);
 
@@ -229,6 +249,10 @@ void c2_conf__obj_get(struct c2_conf_obj *obj);
  * the decremented counter reaches 0).
  *
  * @pre  obj->co_nrefs > 0 && obj->co_status == C2_CS_READY
+ *
+ * @note  c2_conf__obj_put() is used by confc and confd
+ *        implementations and is not supposed to be used by the
+ *        application (aka configuration consumer).
  */
 void c2_conf__obj_put(struct c2_conf_obj *obj);
 
@@ -452,6 +476,19 @@ struct c2_conf_obj_ops {
 	 * @post  c2_conf__readdir_post(retval, dir, *pptr)
 	 */
 	int (*coo_readdir)(struct c2_conf_obj *dir, struct c2_conf_obj **pptr);
+	/**
+	 * Checks validity of given concrete object.
+	 *
+	 * ->coo_invariant() should only validate concrete fields of
+	 * an object. Generic ones (i.e., the fields of c2_conf_obj)
+	 * are validated by c2_conf__obj_invariant().
+	 *
+	 * ->coo_invariant() can be NULL; in this case only generic
+	 * fields will be validated by c2_conf__obj_invariant().
+	 *
+	 * @see c2_conf__obj_invariant()
+	 */
+	bool (*coo_invariant)(const struct c2_conf_obj *obj);
 };
 
 /**
@@ -461,6 +498,10 @@ struct c2_conf_obj_ops {
  * @param entry   The 2nd argument of ->coo_readdir(), dereferenced
  *                before the function is called (*pptr).
  *
+ * @note  c2_conf__readdir_pre() is used by confc and confd
+ *        implementations and is not supposed to be used by the
+ *        application (aka configuration consumer).
+ *
  * @see c2_conf_obj_ops::coo_readdir()
  */
 bool c2_conf__readdir_pre(const struct c2_conf_obj *dir,
@@ -474,6 +515,10 @@ bool c2_conf__readdir_pre(const struct c2_conf_obj *dir,
  * @param entry   The 2nd argument of ->coo_readdir(), dereferenced
  *                after the function is called (*pptr).
  *
+ * @note  c2_conf__readdir_pre() is used by confc and confd
+ *        implementations and is not supposed to be used by the
+ *        application (aka configuration consumer).
+ *
  * @see c2_conf_obj_ops::coo_readdir()
  */
 bool c2_conf__readdir_post(int retval, const struct c2_conf_obj *dir,
diff --git a/conf/obj_ops.c b/conf/obj_ops.c
index 2a53a8d..2e34e04 100644
--- a/conf/obj_ops.c
+++ b/conf/obj_ops.c
@@ -118,7 +118,8 @@ int c2_conf_obj_fill(struct c2_conf_obj *dest, const struct confx_object *src,
 }
 
 /* ------------------------------------------------------------------
- * Implementations of ->coo_{lookup,readdir}() for concrete object types
+ * Implementations of ->coo_{lookup,readdir,invariant}() for concrete
+ * object types
  * ------------------------------------------------------------------ */
 
 static int dir_lookup(struct c2_conf_obj *parent,
@@ -175,6 +176,13 @@ static int dir_readdir(struct c2_conf_obj *dir, struct c2_conf_obj **pptr)
 	XXX;
 }
 
+static bool dir_invariant(const struct c2_conf_obj *obj)
+{
+	struct c2_conf_dir *dir = C2_CONF_CAST(obj, c2_conf_dir);
+
+	XXX;
+}
+
 static int
 profile_lookup(struct c2_conf_obj *parent, const struct c2_conf_buf *name,
 	       struct c2_conf_obj **out)
@@ -209,8 +217,13 @@ profile_lookup(struct c2_conf_obj *parent, const struct c2_conf_buf *name,
 
 /* XXX
  *
- * There are no {profile..partition}_readdir().  ->coo_readdir of any
- * object except of c2_conf_dir is NULL.
+ * There are no {profile..partition}_readdir().
+ * ->coo_readdir of any object except of c2_conf_dir is NULL.
+ */
+
+/* XXX
+ *
+ * {profile..partition}_invariant()
  */
 
 /** @} conf_dlspec_objops */
-- 
1.8.3.2


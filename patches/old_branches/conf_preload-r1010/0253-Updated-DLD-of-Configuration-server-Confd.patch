From 4534279c10c303ca1ea973d09feaf9f4c8b0fdcc Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Tue, 17 Jul 2012 19:42:18 +0300
Subject: [PATCH 253/311] Updated DLD of `Configuration server Confd':

  - Fixed grammar defects;
  - Minor fixes.
---
 conf/conf_fom.c |  29 ---------
 conf/conf_fom.h |   7 --
 conf/conf_fop.c |  27 --------
 conf/conf_fop.h |  15 -----
 conf/confd.c    | 196 ++++++++++++++++++++++++++------------------------------
 conf/confd.h    | 102 +++++++++++------------------
 6 files changed, 128 insertions(+), 248 deletions(-)

diff --git a/conf/conf_fom.c b/conf/conf_fom.c
index c5642cb..a6790d9 100644
--- a/conf/conf_fom.c
+++ b/conf/conf_fom.c
@@ -48,35 +48,6 @@ size_t fom_locality(const struct c2_fom *fom)
 	return fom->fo_fop->f_type->ft_rpc_item_type.rit_opcode;
 }
 
-
-/* -------------------------------------------------------------------
- * c2_conf_stat_resp FOM
- */
-
-/**
- * State function for c2_conf_stat_resp request
- */
-int c2_fom_stat_state(struct c2_fom *fom)
-{
-}
-
-/** Generic ops object for c2_conf_stat_resp */
-struct c2_fom_ops c2_fom_stat_ops = {
-	.fo_fini = fop_fom_fini,
-	.fo_state = c2_fom_stat_state,
-	.fo_home_locality = fom_locality
-};
-
-/** FOM type specific functions for c2_conf_stat_resp FOP. */
-static const struct c2_fom_type_ops c2_fom_stat_type_ops = {
-	.fto_create = fop_fom_create
-};
-
-/** c2_conf_stat specific FOM type operations vector. */
-struct c2_fom_type c2_fom_stat_mopt = {
-        .ft_ops = &c2_fom_stat_type_ops,
-};
-
 /* -------------------------------------------------------------------
  * c2_conf_fetch_resp FOM
  */
diff --git a/conf/conf_fom.h b/conf/conf_fom.h
index 832f0a6..7893a5f 100644
--- a/conf/conf_fom.h
+++ b/conf/conf_fom.h
@@ -37,13 +37,6 @@ int c2_fom_update_state(struct c2_fom *fom);
 size_t c2_fom_update_home_locality(const struct c2_fom *fom);
 void c2_fop_update_fom_fini(struct c2_fom *fom);
 
-/**
- * State transition function for "c2_conf_stat" FOP.
- */
-int c2_fom_stat_state(struct c2_fom *fom);
-size_t c2_fom_stat_home_locality(const struct c2_fom *fom);
-void c2_fop_stat_fom_fini(struct c2_fom *fom);
-
 /* __COLIBRI_CONF_FOM_H__ */
 #endif
 
diff --git a/conf/conf_fop.c b/conf/conf_fop.c
index e0698ee..0c93ac3 100644
--- a/conf/conf_fop.c
+++ b/conf/conf_fop.c
@@ -64,20 +64,6 @@ const struct c2_fop_type_ops c2_conf_update_resp_ops = {
         .fto_io_coalesce = NULL,
 };
 
-/* Ops vector for statistics request. */
-const struct c2_fop_type_ops c2_conf_stat_ops = {
-	.fto_fop_replied = NULL,
-	.fto_size_get = c2_xcode_fop_size_get,
-	.fto_io_coalesce = NULL,
-};
-
-/* Ops vector for statistics reply. */
-const struct c2_fop_type_ops c2_conf_stat_resp_ops = {
-        .fto_fop_replied = NULL,
-        .fto_size_get = c2_xcode_fop_size_get,
-        .fto_io_coalesce = NULL,
-};
-
 /* Declaration of fetch FOPs */
 C2_FOP_TYPE_DECLARE(c2_conf_fetch, "fetch fop", &c2_conf_fetch_ops,
 		    C2_RPC_FETCH_OPCODE,
@@ -94,15 +80,6 @@ C2_FOP_TYPE_DECLARE(c2_conf_update, "update fop", &c2_conf_update_ops,
 C2_FOP_TYPE_DECLARE(c2_conf_update_resp, "update fop reply", &c2_conf_update_resp_ops,
 		    C2_RPC_UPDATE_REPLY_OPCODE, C2_RPC_ITEM_TYPE_REPLY);
 
-/* Declaration of statistics FOPs */
-C2_FOP_TYPE_DECLARE(c2_conf_stat, "statistics fop", &c2_conf_stat_ops,
-		    C2_RPC_STAT_OPCODE,
-		    C2_RPC_ITEM_TYPE_REQUEST | C2_RPC_ITEM_TYPE_MUTABO);
-
-C2_FOP_TYPE_DECLARE(c2_conf_stat_resp, "statistics fop reply", &c2_conf_stat_resp_ops,
-		    C2_RPC_STAT_REPLY_OPCODE, C2_RPC_ITEM_TYPE_REPLY);
-
-
 static struct c2_fop_type_format *fmts[] = {
 	&c2_conf_buf_tfmt,
 	&arr_u64_tfmt,
@@ -119,8 +96,6 @@ static struct c2_fop_type *fops[] = {
         &c2_conf_fetch_resp_fopt,
         &c2_conf_update_fopt,
         &c2_conf_update_resp_fopt,
-        &c2_conf_stat_fopt,
-        &c2_conf_stat_resp_fopt
 };
 
 void c2_conf_fop_fini(void)
@@ -130,7 +105,6 @@ void c2_conf_fop_fini(void)
 
 extern struct c2_fom_type c2_fom_fetch_mopt;
 extern struct c2_fom_type c2_fom_update_mopt;
-extern struct c2_fom_type c2_fom_stat_mopt;
 
 
 int c2_conf_fop_init(void)
@@ -141,7 +115,6 @@ int c2_conf_fop_init(void)
 
 	c2_conf_fetch_fopt.ft_fom_type = c2_fom_fetch_mopt;
 	c2_conf_update_fopt.ft_fom_type = c2_fom_update_mopt;
-	c2_conf_stat_fopt.ft_fom_type = c2_fom_stat_mopt;
 
         return result;
 }
diff --git a/conf/conf_fop.h b/conf/conf_fop.h
index 3d5d7fb..319a494 100644
--- a/conf/conf_fop.h
+++ b/conf/conf_fop.h
@@ -62,21 +62,6 @@ extern const struct c2_fop_type_ops c2_conf_update_resp_ops;
 extern const struct c2_rpc_item_type c2_rpc_item_type_update;
 extern const struct c2_rpc_item_type c2_rpc_item_type_update_resp;
 
-/*
- * Confd statistics reply and request FOP definitions.
- */
-extern struct c2_fop_type_format c2_conf_stat_tfmt;
-extern struct c2_fop_type_format c2_conf_stat_resp_tfmt;
-
-extern struct c2_fop_type c2_conf_stat_fopt;
-extern struct c2_fop_type c2_conf_stat_resp_fopt;
-
-extern const struct c2_fop_type_ops c2_conf_stat_ops;
-extern const struct c2_fop_type_ops c2_conf_stat_resp_ops;
-
-extern const struct c2_rpc_item_type c2_rpc_item_type_stat;
-extern const struct c2_rpc_item_type c2_rpc_item_type_stat_resp;
-
 /** @} confd_fop_dfspec */
 
 /* __COLIBRI_CONF_FOP_H__ */
diff --git a/conf/confd.c b/conf/confd.c
index 8e33146..2ff228a 100644
--- a/conf/confd.c
+++ b/conf/confd.c
@@ -22,6 +22,7 @@
 #  include <config.h>
 #endif
 #include "conf/confd.h"
+#include "fop/fom_long_lock.h"
 
 /**
  * @page confd-lspec-page confd Internals
@@ -45,25 +46,25 @@
  * - @ref fop <!-- fop/fop.h -->
  * - @ref reqh <!-- reqh/reqh.h -->
  * - @ref colibri_setup <!-- colibri/colibri_setup.h -->
- * - c2_reqh_service_type_{register/unregister}()  <!--reqh/reqh_service.h -->
- * - c2_addb_ctx_{init,fini}() <!-- addb/addb.h -->
- * - c2_long_{read,write}_{un,}lock() <!-- @todo -->
- * - c2_long_is_{read,write}_locked() <!-- @todo -->
+ * - c2_reqh_service_type_register()  <!--reqh/reqh_service.h -->
+ * - c2_reqh_service_type_unregister() <!--reqh/reqh_service.h -->
+ * - c2_addb_ctx_init() <!-- addb/addb.h -->
+ * - c2_addb_ctx_fini() <!-- addb/addb.h -->
+ * - @ref c2_long_lock_API <!-- fop/fom_long_lock.h -->
  *
- * Most reasonable functions, confd depends on, are listed above:
+ * Most important functions, confd depends on, are listed above:
  * - RPC layer:
  *   - c2_rpc_reply_post() used to send FOP-based reply to Confc.
  *   - C2_RPC_SERVER_CTX_DECLARE() used to create rpc server context;
  * - DB layer:
- * - c2_dbenv_init() used to initialize environment to access
- *     configuration db;
- * - c2_dbenv_fini() used to deinitialize db environment;
- * - c2_db_pair_setup() and c2_table_lookup() used to access
+ *   - c2_db_pair_setup() and c2_table_lookup() used to access
  *     configuration values stored in db.
  * - FOP, FOM, REQH:
  *   - c2_fom_block_at();
  *   - c2_fom_block_leave();
- *   - c2_fom_block_enter().
+ *   - c2_fom_block_enter();
+ *   - c2_long_read_lock();
+ *   - c2_long_write_lock().
  * - Colibri setup:
  *   - c2_cs_setup_env() configures Colibri to use confd's environment.
  *
@@ -73,30 +74,21 @@
  * - User-space implementation.
  * - Provides a "FOP-based" interface for confc to access configuration
  *   information.
- * - Relies on request handler threading model and is animated by
+ * - Relies on request handler threading model and is driven by
  *   reqh. Request processing is based on FOM execution.
- * - Supports the processing of multiple, concurrent requests from
- *   configuration consumers.
  * - Maintains its own configuration cache, implementation of which is
-     common to confd and confc.
- * - Several confd state machines (FOMs) can work with configuration
- *   cache concurrently.
+ *   common to confd and confc.
+ * - Several confd state machines (FOMs) processing requests from
+ *   configuration consumers can work with configuration cache
+ *   concurrently.
  *
  * <hr> <!------------------------------------------------------------>
  * @section confd-lspec Logical Specification
  *
- * Confd service initialization performed by request handler.  To
+ * Confd service initialization is performed by request handler. To
  * allocate Confd service and its internal structures in memory @ref
  * c2_confd_service_locate() is used.
  *
- * Confd service defines operation vector:
- * - Confd service operation c2_confd_service_start() to
- *   initiate c2_confd and register Confd FOPs with service
- * - Confd service operation c2_confd_service_stop() to
- *   free internal structures of c2_confd and unregister FOPs
- * - Confd service operation c2_confd_service_fini() to
- *   free Confd service instance.
- *
  * Confd service is registered in `subsystem' data structure of
  * "colibri/init.c", the following lines have to be added:
  * @code
@@ -109,7 +101,7 @@
  * @endcode
  *
  * Configuration cache pre-loading procedure traverses all tables of
- * configuration db. Since relations between neighbour levels are only
+ * configuration db. Since relations between neighbour levels only are
  * possible, tables of higher "levels of DAG" are processed first.
  * The following code example presents pre-loading in details:
  *
@@ -131,9 +123,22 @@
  * }
  * @endcode
  *
+ * FOP format, FOP operation vector, FOP type, and RPC item type have
+ * to be defined for each FOP.  The following structures are defined
+ * for c2_conf_fetch FOP:
+ * - struct c2_fop_type_format c2_conf_fetch_tfmt --- defines format
+ *   registered in *.ff used in confd;
+ * - struct c2_fop_type c2_conf_fetch_fopt --- defines FOP type;
+ * - struct c2_fop_type_ops c2_conf_fetch_ops --- defines FOP
+ *   operation vector;
+ * - struct c2_rpc_item_type c2_rpc_item_type_fetch --- defines RPC
+ *   item type.
+ *
+ * FOPs used in configuration service are defined in @ref confd_fop_dfspec.
+ *
  * c2_fom_fetch_state() - called by reqh to handle incoming
  * confc requests. Implementation of this function processes all
- * FOP-FOM specific and c2_conf_fetch_resp states:
+ * FOP-FOM specific and c2_conf_fetch_resp phases:
  * @code
  * static int c2_fom_fetch_state(struct c2_fom *fom)
  *  {
@@ -143,7 +148,7 @@
  *       if (fom->fo_phase < FOPH_NR) {
  *               result = c2_fom_state_generic(fom);
  *       } else {
- *		... process c2_conf_fetch_resp states transitions ...
+ *		... process c2_conf_fetch_resp phase transitions ...
  *	 }
  *  }
  * @endcode
@@ -153,7 +158,6 @@
  * for each FOP treated as a request:
  *   - c2_conf_fetch;
  *   - c2_conf_update;
- *   - c2_conf_stat.
  *
  * To do so, the appropriate structures and functions have to be
  * defined. For example the following used by c2_conf_fetch FOP:
@@ -178,34 +182,36 @@
  * The implementation of c2_fom_fetch_state() needs the following
  * functions to be defined:
  *
- * - {fetch,update}_check_request() - checks incoming request and
- *     validates requested path of configuration objects.
+ * - fetch_check_request(), update_check_request() - check incoming
+ *     request and validates requested path of configuration objects.
  *
- * - {fetch,update}_next_state() - transits FOM states depending on the current
- *   state and on the state of configuration objects.
+ * - fetch_next_state(), update_next_state() - transit FOM phases
+ *   depending on the current phase and on the state of configuration
+ *   objects.
  *
  * - obj_serialize() - serializes given object to FOP.
  *
- * - {fetch,update}_failure_handle() - handles occurred errors.
+ * - fetch_failure_handle(), update_failure_handle() - handle occurred
+ *   errors.
  *
  * <hr> <!------------------------------------------------------------>
  * @section confd-lspec-state State Specification
  *
- * Confd has not a state machine, state processing is implemented on
- * basis of FOM of c2_conf_fetch, c2_conf_update, c2_conf_stat FOPs.
- * After corresponding FOM went through a list of FOM specific states
- * it transited into F_INITIAL state.
+ * Confd has not a state machine, phase processing is implemented on
+ * basis of FOM of c2_conf_fetch, c2_conf_update FOPs.  After
+ * corresponding FOM went through a list of FOM specific phases it
+ * transited into F_INITIAL phase.
  *
  * The number of state machine instances correspond to the number of
  * FOPs being processed in confd.
  *
  * c2_conf_fetch FOM state transition diagram:
  * @dot
- *  digraph confd_serialize_states {
+ *  digraph conf_fetch_phase {
  *      node [fontsize=9];
  *      edge [fontsize=9];
  *      F_INITIAL [style=filled, fillcolor=lightgrey];
- *      F_SERIALIZE;
+ *      F_SERIALISE;
  *      F_WAIT_RDLK;
  *      F_TERMINATE [style=filled, fillcolor=lightgrey];
  *      F_FAILURE [style=filled, fillcolor=lightgrey];
@@ -216,29 +222,29 @@
  *      F_WAIT_RDLK -> F_WAIT_RDLK [label=
  *      "!c2_long_read_lock(c2_confd::c_cache::ca_rwlock)"];
  *
- *      F_WAIT_RDLK -> F_SERIALIZE [label=
+ *      F_WAIT_RDLK -> F_SERIALISE [label=
  *      "c2_long_read_lock(c2_confd::c_cache::ca_rwlock)"];
  *
- *      F_SERIALIZE -> F_TERMINATE [label = "success"];
- *      F_SERIALIZE -> F_FAILURE [label = "failure"];
+ *      F_SERIALISE -> F_TERMINATE [label = "success"];
+ *      F_SERIALISE -> F_FAILURE [label = "failure"];
  *  }
  * @enddot
  *
  * - F_INITIAL
- *   In this state, incoming FOM/FOP-related structures are being
+ *   In this phase, incoming FOM/FOP-related structures are being
  *   initialized and FOP-processing preconditions are being
  *   checked. Then fetch_next_state() is called and FOM is transited
  *   into F_WAIT_RDLK.
  *
  * - F_WAIT_RDLK:
- *   In this state, an attempt is made to obtain a read lock
- *   c2_confd::c_cache::ca_rwlock. If it's obtained than
- *   fetch_next_state() transits FOM back into F_SERIALIZE.  Otherwise
- *   FOM remains in the same state until lock is obtained.
+ *   In this phase, an attempt is made to obtain a read lock
+ *   c2_confd::c_cache::ca_rwlock. If it's obtained then
+ *   fetch_next_state() transits FOM back into F_SERIALISE.  Otherwise
+ *   FOM remains in the same phase until lock is obtained.
  *
- * - F_SERIALIZE:
+ * - F_SERIALISE:
  *   Current design assumes that data is pre-loaded into configuration
- *   cache. In current state, c2_confd::c_cache::ca_rwlock lock has
+ *   cache. In F_SERIALISE phase, c2_confd::c_cache::ca_rwlock lock has
  *   been already obtained as a read lock.
  *   c2_conf_fetch_resp FOP is being prepared for sending by looking
  *   up requested path in configuration cache and unlocking
@@ -246,15 +252,15 @@
  *   is sent with c2_rpc_reply_post().  fetch_next_state() transits FOM into
  *   F_TERMINATE. If incoming request consists of a path which is not
  *   in configuration cache, then the c2_conf_fetch FOM is
- *   transitioned to the F_FAILURE state.
+ *   transitioned to the F_FAILURE phase.
  *
  * - F_TERMINATE:
- *   In this state, statistics values are being updated in
+ *   In this phase, statistics values are being updated in
  *   c2_confd::c_stat. c2_confd::c_cache::ca_rwlock has to be
  *   unlocked.
  *
  * - F_FAILURE:
- *   In this state, statistics values are being updated in
+ *   In this phase, statistics values are being updated in
  *   c2_confd::c_stat, ADDB records are being added.
  *   c2_conf_fetch_resp FOP with an empty configuration objects
  *   sequence and negative error code is sent with c2_rpc_reply_post().
@@ -265,7 +271,7 @@
  *
  *  c2_conf_update FOM state transition diagram:
  * @dot
- *  digraph confd_serialize_states {
+ *  digraph conf_update_phase {
  *      node [fontsize=9];
  *      edge [fontsize=9];
  *      U_INITIAL [style=filled, fillcolor=lightgrey];
@@ -289,35 +295,35 @@
  * @enddot
  *
  * - U_INITIAL
- *   In this state, incoming FOM/FOP-related structures are being
+ *   In this phase, incoming FOM/FOP-related structures are being
  *   initialized and FOP-processing preconditions are being
  *   checked. Then fetch_next_state() is called and FOM is transited
  *   into F_WAIT_WRLK.
  *
  * - U_WAIT_WRLK:
- *   In current state, an attempt is made to obtain a write lock
+ *   In current phase, an attempt is made to obtain a write lock
  *   c2_confd::c_cache::ca_rwlock. In this case, update_next_state()
- *   is called and FOM is transited into U_WAIT_WRLK state.  Otherwise
+ *   is called and FOM is transited into U_WAIT_WRLK phase.  Otherwise
  *   configuration c2_confd::c_cache::ca_rwlock is being locked as a
  *   write lock and transited into U_UPDATE.
  *
  * - U_UPDATE:
- *   In current state, c2_confd::c_cache::ca_rwlock lock has been
+ *   In current phase, c2_confd::c_cache::ca_rwlock lock has been
  *   already obtained as a write lock. Then, configuration cache has
  *   to be updated and c2_confd::c_cache::ca_rwlock lock should be
  *   unlocked.  After that, c2_conf_update_resp FOP is sent with
  *   c2_rpc_reply_post(). update_next_state() transits FOM into
  *   U_TERMINATE.  If incoming request consists of a path which is not
  *   in configuration cache than the c2_conf_fetch FOM is transitioned
- *   to the U_FAILURE state
+ *   to the U_FAILURE phase
  *
  * - U_TERMINATE:
- *   In this state, statistics values are being updated in
+ *   In this phase, statistics values are being updated in
  *   c2_confd::c_stat. c2_confd::c_cache::ca_rwlock has to be
  *   unlocked.
  *
  * - U_FAILURE:
- *   In this state, statistics values are being updated in
+ *   In this phase, statistics values are being updated in
  *   c2_confd::c_stat, ADDB records are being added.
  *   c2_conf_update_resp FOP with an empty configuration objects
  *   sequence and negative error code is sent with c2_rpc_reply_post().
@@ -347,23 +353,23 @@
  * obtained.
  *
  * The following code example shows how to perform a transition from
- * F_WAIT_RDLK to F_SERIALIZE and obtain a lock:
+ * F_WAIT_RDLK to F_SERIALISE and obtain a lock:
  * @code
  * static int fom_fetch_state(struct c2_fom *fom)
  * {
  *	//...
  *	if (fom->fo_phase == F_WAIT_RDLK) {
  *		// try to obtain a lock, when it's obtained FOM is
- *		// transitted into F_SERIALIZE
+ *		// transitted into F_SERIALISE
  *
- *		if (!c2_long_{read,write}_lock(lock, fom, F_SERIALIZE))
+ *		if (!c2_long_{read,write}_lock(lock, fom, F_SERIALISE))
  *			return C2_FSO_WAIT;
  *
  *		// ...
  *
  *              C2_ASSERT(c2_long_is_{read,write}_locked());
  *
- *		fom->fo_phase = F_SERIALIZE;
+ *		fom->fo_phase = F_SERIALISE;
  *		return C2_FSO_AGAIN;
  *	}
  *	//...
@@ -374,10 +380,10 @@
  * <hr> <!------------------------------------------------------------>
  * @section confd-lspec-thread Threading and Concurrency Model
  *
- * Confd creates no threads of its own but instead is animated by the
+ * Confd creates no threads of its own but instead is driven by the
  * request handler. All threading and concurrency is being performed
  * on the Request Handler side, registered in the system.  Incoming
- * FOPs handling, state transitions, outgoing FOPs serialization,
+ * FOPs handling, phase transitions, outgoing FOPs serialization,
  * error handling is done in callbacks called by reqh-component.
  *
  * Configuration service relies on rehq component threading model and
@@ -419,6 +425,8 @@
  * @test Load predefined configuration directory from db. Check theirs
  * predefined values.
  *
+ * @test Fetch non-existent configuration object from configuration db.
+ *
  * <hr> <!------------------------------------------------------------->
  * @section confd-O Analysis
  *
@@ -457,18 +465,18 @@
  */
 
 /**
- * c2_conf_fetch FOM states.
+ * c2_conf_fetch FOM phases.
  */
 enum c2_confd_fetch_status {
 	F_INITIAL = FOPH_NR + 1,
-	F_SERIALIZE,
+	F_SERIALISE,
 	F_WAIT_RDLK,
 	F_TERMINATE,
 	F_FAILURE
 };
 
 /**
- * c2_conf_update FOM states.
+ * c2_conf_update FOM pahses.
  */
 enum c2_confd_update_status {
 	U_INITIAL = FOPH_NR + 1,
@@ -480,19 +488,6 @@ enum c2_confd_update_status {
 };
 
 /**
- * c2_conf_stat FOM states.
- */
-enum c2_confd_stat_status {
-	S_INITIAL = FOPH_NR + 1,
-	S_UPDATE,
-	S_WAIT_WRLK,
-	S_WORK,
-	S_TERMINATE,
-	S_FAILURE
-};
-
-
-/**
  * Confd service addb context.
  */
 static const struct c2_addb_ctx_type addb_confd = {
@@ -515,10 +510,7 @@ C2_ADDB_EV_DEFINE(addb_confd, "addb-confd-err", C2_ADDB_EVENT_CONFD_ERR,
 		  C2_ADDB_INVAL);
 
 /**
- * Allocate and initiate Confd service instance.
- *
- * @param stype service type
- * @param service pointer to service instance.
+ * Allocates and initiates Confd service instance.
  *
  * @pre stype != NULL && service != NULL
  */
@@ -529,9 +521,7 @@ static int confd_service_locate(struct c2_reqh_service_type *stype,
 }
 
 /**
- * Finalise Confd service instance.
- *
- * @param service pointer to service instance.
+ * Finalises Confd service instance.
  *
  * @pre service != NULL
  */
@@ -540,15 +530,13 @@ static void confd_service_fini(struct c2_reqh_service *service)
 }
 
 /**
- * Start Confd Service:
- * - Register Confd FOPs with service;
+ * Starts Confd Service:
+ * - Registers Confd FOPs with service;
  * - Initiates configuration cache if necessary. The first service
-     start would create the cache; subsequent service starts should
-     not;
+ *   start would create the cache; subsequent service starts should
+ *   not;
  * - Pre-loads configuration cache from configuration db.
  *
- * @param service pointer to service instance.
- *
  * @pre service != NULL
  */
 static int confd_service_start(struct c2_reqh_service *service)
@@ -557,11 +545,9 @@ static int confd_service_start(struct c2_reqh_service *service)
 }
 
 /**
- * Stop Confd service.
- * - Free internal structures of c2_confd;
- * - Un-register Confd FOPs with service
- *
- * @param service pointer to service instance.
+ * Stops Confd service.
+ * - Frees internal structures of c2_confd;
+ * - Unregisters Confd FOPs from service.
  *
  * @pre service != NULL
  */
@@ -577,7 +563,7 @@ static void confd_service_fop_fini(void)
 }
 
 /**
- * Initialize the following FOP types:
+ * Initializes the following FOP types:
  *  - c2_conf_fetch;
  *  - c2_conf_fetch_resp;
  *  - c2_conf_update.
@@ -639,10 +625,10 @@ static int obj_serialize(struct c2_confd *confd,
 }
 
 /**
- * Transits fetch FOM into the next state.
+ * Transits fetch FOM into the next phase.
  *
  * @param confd	configuration service instance.
- * @param st current state of incoming FOP-request processing.
+ * @param st current pahse of incoming FOP-request processing.
  */
 static int fetch_next_state(struct c2_confd *confd, int st)
 {
@@ -652,7 +638,7 @@ static int fetch_next_state(struct c2_confd *confd, int st)
  * Transits update FOM into the next state.
  *
  * @param confd	configuration service instance.
- * @param st current state of incoming FOP-request processing.
+ * @param st current phase of incoming FOP-request processing.
  */
 static int update_next_state(struct c2_confd *confd, int st)
 {
diff --git a/conf/confd.h b/conf/confd.h
index 0d9a4e6..1148ea0 100644
--- a/conf/confd.h
+++ b/conf/confd.h
@@ -32,12 +32,11 @@
 /**
  * @page confd-fspec Configuration Service (confd)
  *
- * Configuration service library (confd) is designed to work as a part
- * of user-space configuration service, animated by request handler
- * and provides a "FOP-based" interface for accessing Colibri
+ * Configuration service (confd) is designed to work as a part of
+ * user-space configuration service, driven by request handler and
+ * provides a "FOP-based" interface for accessing Colibri
  * configuration information stored in configuration db. Confd is run
- * within the context of a request handler launched by the
- * colibri_setup program.
+ * within the context of a request handler.
  *
  * Confd pre-loads configuration values fetched from configuration db
  * in memory-based data cache to speed up confc requests.
@@ -53,47 +52,30 @@
  * <hr> <!------------------------------------------------------------>
  * @section confd-fspec-data Data Structures
  *
- * - c2_reqh_confd_service --- represents configuration service instance
- *   registered in request handler.
- *
- * - c2_confd --- represents configuration service data, stores
- *   structures to perform caching, accesses to configuration db
- *   and handles configuration data requests.
+ * - c2_confd --- epresents configuration service instance registered
+ *   in request handler, stores structures to perform caching,
+ *   accesses to configuration db and handles configuration data
+ *   requests.
  *
  * - c2_confd_cache -- represents an efficient, high concurrency,
  *   in-memory cache over the underlying database.
  *
  *   Members:
- *   - @c ca_db is a database environment to access configuration db.
- *   - @c ca_cache is a registry of cached configuration objects.
+ * - c2_confd_cache::ca_db is a database environment to access
+ *   configuration db.
+ * - c2_confd_cache::ca_cache is a registry of cached configuration
+ *   objects.
  *
- * Confd receives multiple configuration requests from confcs, each
- * containing a "path" of a requested configuration value to be
- * retrieved from the configuration db. Defining FOPs for
- * configuration requests and replies requires the use of the RPC
- * layer as a transport. Services have to register c2_fop_types for
- * each FOP they support.
+ * Confd receives multiple configuration requests from confcs. Each
+ * request is a FOP containing a "path" of a requested configuration
+ * value to be retrieved from the configuration db. Confcs and confds
+ * use RPC layer as a transport to send FOPs.
  *
  * The following FOPs are defined for confd (see conf/onwire.ff):
  * - c2_conf_fetch --- configuration request;
  * - c2_conf_fetch_resp --- Confd's response to c2_conf_fetch;
  * - c2_conf_update --- Update request;
  * - c2_conf_update_resp --- Confd's response to c2_conf_update;
- * - c2_conf_stat --- Statistics request;
- * - c2_conf_stat_resp --- Confd's response to c2_conf_stat.
- *
- * FOP format, FOP operation vector, FOP type, and RPC item type have
- * to be defined for each FOP.  The following structures are defined
- * for c2_conf_fetch FOP:
- * - struct c2_fop_type_format c2_conf_fetch_tfmt --- defines format
- *   registered in *.ff used in confd;
- * - struct c2_fop_type c2_conf_fetch_fopt --- defines FOP type;
- * - struct c2_fop_type_ops c2_conf_fetch_ops --- defines FOP
- *   operation vector;
- * - struct c2_rpc_item_type c2_rpc_item_type_fetch --- defines RPC
- *   item type.
- *
- * FOPs used in configuration service are defined in @ref confd_fop_dfspec.
  *
  * <hr> <!------------------------------------------------------------>
  * @section confd-fspec-sub Subroutines
@@ -104,20 +86,19 @@
  * <!------------------------------------------------------------------>
  * @subsection confd-fspec-sub-setup Initialization and termination
  *
- * To parametrize confd, user should provide arguments through
+ * To parametrise confd, user should provide arguments through
  * environment variables.  See @ref confd-fspec-cli.
  *
  * Confd is initiated and put into operation by request handler logic,
  * after colibri is started. Confd service should be registered in
  * request handler with c2_confd_service_register() call, where it has
- * to initialize own data structures and FOPs used for communication.
+ * to initialise own data structures and FOPs used for communication.
  *
- * Initial configuration database is manually created prior to startup
- * with @ref yaml2db utility. Confd assumes that:
- *  - configuration db is created before confd started;
- *  - the schema of configuration database conforms to
- *    <a href="https://docs.google.com/a/xyratex.com/document/d/1JmsVBV8B4R-FrrYyJC_kX2ibzC1F-yTHEdrm3-FLQYk/view">
- *    HLD of Colibri’s configuration database schema"</a>.
+ * Initial configuration database is manually created prior to startup.
+ * Confd assumes that:
+ * - configuration db is created before confd started;
+ * - the schema of configuration database conforms to the expected
+ *   schema.
  *
  * The following errors may occur while using the configuration db:
  * - db is empty or is in an unrecognized format;
@@ -126,14 +107,13 @@
  *   HLD of Colibri’s configuration database schema</a>;
  * - key is not found.
  *
- * While initialization process, confd has open configuration db and
- * fill internal cache of configuration objects with their
- * configuration values. Such process is called pre-loading. It load
+ * While initialization process, confd has to preload internal cache
+ * of configuration objects with their configuration values. It loads
  * entire configuration db into memory-based structures. Pre-loading
  * details can be found in @ref confd-lspec.
  *
- * Initialized confd may be eventually terminated by c2_confd_service_unregister()
- * in which confd has to deinitialize own data structures and FOPs.
+ * Initialised confd may be eventually terminated by c2_confd_service_unregister()
+ * in which confd has to finalise own data structures and FOPs.
  *
  * After a confd instance is started it manages configuration
  * database, its own internal cache structures and incoming
@@ -145,10 +125,6 @@
  * To configure confd from console, standard options described in
  * @ref colibri_setup in cs_help() function are used.
  *
- * To extend standard options, environment variables are used:
- * - `C2_CONFD_DB_NAME' specifies configuration db path, currently,
- *    only one configuration db is supported.
- *
  * <hr> <!------------------------------------------------------------->
  * @section confd-fspec-recipes  Recipes
  *
@@ -174,10 +150,11 @@
 
 /** Configuration data accessor. */
 struct c2_confd_cache {
-	/** Database path */
-	const char	       *ca_dbpath;
-	/** Database environment */
-	struct c2_dbenv		ca_db;
+	/**
+	 * Database environment pointer on c2_reqh::rh_dbenv of the
+	 * request handler in which c2_confd is registered.
+	 */
+	struct c2_dbenv	       *ca_db;
 	/** Registry of cached configuration objects */
 	struct c2_conf_map	ca_cache;
 	/** Tracks a number of confds using c2_confd_cache */
@@ -204,13 +181,6 @@ struct c2_confd_stat {
 	struct c2_mutex	cs_lock;
 };
 
-/** Configuration service data. */
-struct c2_confd {
-	struct c2_addb_ctx		c_addb;
-	struct c2_confd_cache	       *c_cache;
-	struct c2_confd_stat		c_stat;
-};
-
 int c2_confd_service_register(void);
 void c2_confd_service_unregister(void);
 
@@ -222,13 +192,15 @@ enum {
 /**
  * Confd service, registered in request handler
  */
-struct c2_reqh_confd_service {
+struct c2_confd {
         /** Generic reqh service object */
         struct c2_reqh_service	rcs_gen;
-	/** Confd service data, belongs to each confd service */
-	struct c2_confd		rcs_confd;
         /** magic to check confd service object */
         uint64_t		rcs_magic;
+
+	struct c2_addb_ctx	c_addb;
+	struct c2_confd_cache  *c_cache;
+	struct c2_confd_stat	c_stat;
 };
 
 /** @} confd_dfspec */
-- 
1.8.3.2


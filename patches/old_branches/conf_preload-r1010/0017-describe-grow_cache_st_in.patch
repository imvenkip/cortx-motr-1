From 1bb4ac7b3ee6794ca8a629d2780c35e6f28d2237 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Sat, 25 Feb 2012 14:22:09 +0200
Subject: [PATCH 017/311] describe grow_cache_st_in()

---
 conf/confc.c | 75 ++++++++++++++++++++++++++++--------------------------------
 conf/obj.c   |  8 +++----
 2 files changed, 39 insertions(+), 44 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 5493e63..dba6d85 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -420,49 +420,44 @@ static void wait_reply_st_in(struct c2_sm *mach)
 	C2_ASSERT(rc == 0); /* c2_rpc_post() always returns 0, but hey */
 }
 
-/* static void * */
-/* xcx_alloc(struct c2_xcode_ctx *ctx __attribute__((unused)), size_t n) */
-/* { */
-/* 	return c2_alloc(n); */
-/* } */
-
 /** Actions to perform on entering GROW_CACHE state. */
 static void grow_cache_st_in(struct c2_sm *mach)
 {
-	struct c2_fop      *fop;
-	struct c2_rpc_item *item = &to_ctx(mach)->fc_fop.f_item;
-
-	C2_PRE(item->ri_error == 0 && item->ri_reply != NULL);
-	fop = c2_rpc_item_to_fop(item->ri_reply);
-
-	/* XXX decode c2_fop_data(fop) */
-	{
-		struct c2_xcode_ctx xc_ctx;
-		struct c2_xcode_obj xc_obj = {
-			.xo_type = c2_confop_fetch_resp_xc,
-			.xo_ptr  = NULL
-		};
-		/* XXX This buffer must contain serialized configuration. */
-		char             ebuf[100]; /*XXX*/
-		c2_bcount_t      count = ARRAY_SIZE(ebuf);
-		void            *vec   = ebuf;
-		struct c2_bufvec bvec  = C2_BUFVEC_INIT_BUF(&vec, &count);
-		int rc;
-
-		c2_xcode_ctx_init(&xc_ctx, &xc_obj);
-		xc_ctx.xcx_alloc = xcx_alloc;
-		c2_bufvec_cursor_init(&xc_ctx.xcx_buf, &bvec);
-
-		rc = c2_xcode_decode(&xc_ctx);
-		if (rc != 0) {
-			c2_sm_fail(mach, S_FAILURE, rc);
-			return;
-		}
-
-		XXX;
-	}
-
-	c2_rpc_item_put(item->ri_reply);
+	/*
+	 * struct c2_confc_ctx         *ctx  = to_ctx(mach);
+	 * struct c2_rpc_item          *item = c2_fop_to_rpc_item(&ctx->fc_fop);
+	 * struct c2_confop_fetch_resp *resp;
+	 * struct c2_confop_obj        *fetched;
+	 * struct c2_conf_obj          *cached;
+	 * int                          rc = 0;
+	 *
+	 * C2_PRE(item->ri_error == 0 && item->ri_reply != NULL);
+	 *
+	 * resp = c2_fop_data(c2_rpc_item_to_fop(item->ri_reply));
+	 * C2_ASSERT(`resp' bob_check()s);
+	 *
+	 * for (fetched in resp->ffr_data) {
+	 *     C2_ASSERT(fetched->fo_key is not empty &&
+	 *               fetched->fo_val.v_type < C2_CO_NR);
+	 *     cached = htable_lookup(fetched->fo_key, fetched->fo_val.v_type);
+	 *     if (cached == NULL)
+	 *         rc = cache_add(fetched);
+	 *     else
+	 *         rc = object_enrich(cached, fetched);
+	 *
+	 *     if (rc != 0)
+	 *         break;
+	 * }
+	 *
+	 * // Let rpc layer free the memory allocated for response.
+	 * c2_rpc_item_put(item->ri_reply);
+	 *
+	 * if (rc == 0)
+	 *         c2_sm_state_set(mach, S_CHECK);
+	 * else
+	 *         c2_sm_fail(mach, S_FAILURE, rc);
+	 */
+	XXX;
 }
 
 static void completion_announce(struct c2_sm *mach)
diff --git a/conf/obj.c b/conf/obj.c
index 5d5a8e4..2ee38e6 100644
--- a/conf/obj.c
+++ b/conf/obj.c
@@ -38,15 +38,15 @@
  * Previously defined terms:
  *
  * - @b Confc (configuration client library, configuration client):
- *   a library that provides configuration consumers with interfaces
- *   to query C2 configuration.
+ *   a library that provides configuration consumers with API to query
+ *   C2 configuration.
  *
  * - @b Confd (configuration server): a management service that
  *   provides configuration clients with information obtained from
  *   configuration database.
  *
- * - Configuration @b consumer: any software that uses confc API to
- *   access C2 configuration.
+ * - Configuration @b consumer: any software that uses confc
+ *   interfaces to access C2 configuration.
  *
  * - Configuration @b cache: configuration data stored in nodeâ€™s
  *   memory. Confc library maintains such a cache and provides
-- 
1.8.3.2


From 9f71595c513ed6efc079f41804c547158b614093 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Sat, 25 Feb 2012 20:24:23 +0200
Subject: [PATCH 018/311] describe object_enrich()

+ Keep a record of symbols to be defined.
---
 conf/confc.c | 46 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 46 insertions(+)

diff --git a/conf/confc.c b/conf/confc.c
index dba6d85..9c138f8 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -574,6 +574,35 @@ static struct c2_sm_conf confc_states_conf = {
 };
 
 /* ------------------------------------------------------------------
+ * Confc cache management.
+ * ------------------------------------------------------------------ */
+static int
+object_enrich(struct c2_conf_obj *dest, const struct c2_confop_obj *src)
+{
+	/*
+	 * int ret = 0;
+	 * C2_PRE(c2_mutex_is_locked(group_lock()));
+	 * c2_mutex_lock(cache_lock());
+	 * C2_PRE(dest->co_type == src->fo_val.v_type);
+	 *
+	 * if (!confc_object_ops[dest->co_type].oo_match(dest, src)) {
+	 *     c2_addb(report inconsistency);
+	 *     ret = -EMISMATCH; // XXX Can we use non-standard errno?
+	 * } else if (dest->co_status != C2_CS_READY) {
+	 *     ret = confc_object_ops[dest->co_type].oo_enrich(dest, src);
+	 * }
+	 *
+	 * obj->co_status = rc == 0 ? C2_CS_READY : C2_CS_MISSING;
+	 * c2_chan_broadcast(&dest->co_chan);
+	 *
+	 * c2_mutex_unlock(cache_lock());
+	 * C2_POST(c2_mutex_is_locked(group_lock()));
+	 * return ret;
+	 */
+	XXX;
+}
+
+/* ------------------------------------------------------------------
  * misc
  * ------------------------------------------------------------------ */
 
@@ -586,3 +615,20 @@ static bool ctx_invariant(struct c2_confc_ctx *ctx)
 		item->ri_ops->rio_replied == on_replied &&
 		c2_fop_data(ctx->fc_fop) == &ctx->fc_req;
 }
+
+/* ------------------------------------------------------------------
+ * XXX Symbols to define.
+ * ------------------------------------------------------------------ */
+static struct c2_confop_obj * htable_lookup(const struct c2_conf_buf *key,
+					    uint8_t type);
+
+static int cache_add(const struct c2_confop_obj *obj);
+
+struct object_ops {
+	bool (*oo_match)(const struct c2_conf_obj *a,
+			 const struct c2_confop_obj *b);
+	int  (*oo_enrich)(struct c2_conf_obj *dest,
+			  const struct c2_confop_obj *src);
+};
+
+struct object_ops confc_object_ops[C2_CO_NR];
-- 
1.8.3.2


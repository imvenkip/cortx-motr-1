From f9758f4f1f275fd232bef32197e6e1e33d0def9d Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Wed, 4 Jul 2012 14:33:50 +0300
Subject: [PATCH 213/311] mv conf/confc_offline.h conf/preload.h

Both confc and confd can pre-load the cache. Rename the file
for uniformity.
---
 conf/confc.c         |   6 +--
 conf/confc_offline.h | 149 ---------------------------------------------------
 conf/preload.h       | 149 +++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 152 insertions(+), 152 deletions(-)
 delete mode 100644 conf/confc_offline.h
 create mode 100644 conf/preload.h

diff --git a/conf/confc.c b/conf/confc.c
index c9ffecb..e29d18e 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -22,9 +22,9 @@
 #  include <config.h>
 #endif
 #include "conf/confc.h"
-#include "conf/confc_offline.h"  /* c2_conf_parse */
-#include "lib/cdefs.h"           /* C2_HAS_TYPE, equi */
-#include "lib/arith.h"           /* C2_CNT_INC, C2_CNT_DEC */
+#include "conf/preload.h"  /* c2_conf_parse */
+#include "lib/cdefs.h"     /* C2_HAS_TYPE, equi */
+#include "lib/arith.h"     /* C2_CNT_INC, C2_CNT_DEC */
 
 /**
  * @page confc-lspec confc Internals
diff --git a/conf/confc_offline.h b/conf/confc_offline.h
deleted file mode 100644
index 6f4a81d..0000000
--- a/conf/confc_offline.h
+++ /dev/null
@@ -1,149 +0,0 @@
-/* -*- c -*- */
-/*
- * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
- *
- * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
- * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
- * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
- * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
- * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
- * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
- * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
- *
- * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
- * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
- * http://www.xyratex.com/contact
- *
- * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
- * Original creation date: 16-Mar-2012
- */
-#ifndef __COLIBRI_CONF_CONFC_OFFLINE_H__
-#define __COLIBRI_CONF_CONFC_OFFLINE_H__
-
-/**
- * @page conf-fspec-preload Pre-Loading of Configuration Cache
- *
- * - @ref conf-fspec-preload-string
- *   - @ref conf-fspec-preload-string-format
- *   - @ref conf-fspec-preload-string-examples
- * - @ref conf_dfspec_preload "Detailed Functional Specification"
- *
- * When configuration cache is created, it can be pre-loaded with
- * configuration data.  Cache pre-loading can be useful for testing,
- * boot-strapping, and manual control. One of use cases is a situation
- * when confc cannot or should not communicate with confd.
- *
- * <hr> <!------------------------------------------------------------>
- * @section conf-fspec-preload-string Configuration string
- *
- * The application pre-loads confc cache by passing textual
- * description of configuration objects -- so called configuration
- * string -- to c2_confc_init() via `conf_source' parameter. Note
- * that the value of this parameter should start with "local-conf:",
- * otherwise it will be treated as an end point address of confd.
- *
- * When confc API is used by a kernel module, configuration string is
- * provided as mount(8) option.
- *
- * <!---------------------------------------------------------------->
- * @subsection conf-fspec-preload-string-format Format
- *
- * Configuration string represents a set (array) of configuration
- * objects encoded using JSON [http://www.json.org/] format.
- *
- * First two members of a configuration object encoding are "type" and
- * "id". The set of remaining members depends on the type of object.
- *
- * Object relations are expressed via object ids. Directory objects
- * (c2_conf_dir) are not encoded.
- *
- * c2_conf_parse() translates configuration string into an array of
- * confx_objects.
- *
- * E.g., configuration string
- *
-@verbatim
-[ {"type":"profile", "id":"test", "filesystem":"c2t1fs"},
-  {"type":"filesystem", "id":"c2t1fs", "rootfid":[11,22], "params":[50,60,70],
-   "services":[]} ]
-@endverbatim
- *
- * describes two confx_objects:
- *
- * @code
- * struct confx_object a = {
- *     .o_id = C2_CONF_BUF_INIT(4, "test"),
- *     .o_conf = {
- *         .u_type = C2_CO_PROFILE,
- *         .u.u_profile = {
- *             .xp_filesystem = C2_CONF_BUF_INIT(6, "c2t1fs")
- *         }
- *     }
- * };
- * struct confx_object b = {
- *     .o_id = C2_CONF_BUF_INIT(6, "c2t1fs"),
- *     .o_conf = {
- *         .u_type = C2_CO_FILESYSTEM,
- *         .u.u_filesystem = {
- *             .xp_rootfid = { .f_container = 11, .f_key = 22 },
- *             .xp_params = { .an_count = 3, .an_elems = { 50, 60, 70 } },
- *             .xp_services = { .ab_count = 0, .ab_elems = NULL }
- *         }
- *     }
- * };
- * @endcode
- *
- * <!---------------------------------------------------------------->
- * @subsection conf-fspec-preload-string-examples Examples
- *
-@verbatim
-[ { "type":"profile", "id":"test-2", "filesystem":"c2t1fs" }
-, { "type":fs, "id":"c2t1fs", "rootfid":[11, 22], "params":[50,60,70],
-    "services":["mds", "io"] }
-, { "type":"service", "id":"mds", "filesystem":"c2t1fs", "type":1,
-    "endpoints":["addr0"], "node":"N" }
-, { "type":"service", "id":"io", "filesystem":"c2t1fs", "type":2,
-    "endpoints":["addr1","addr2","addr3"], "node":"N" }
-, { "type":"node", "id":"N", "services":["mds", "io"], "memsize":8000,
-    "nr_cpu":2, "last_state":3, "flags":2, "pool_id":0, "nics":["nic0"],
-    "sdevs":["sdev0"] }
-, { "type":"nic", "id":"nic0", "iface_type":5, "mtu":8192, "speed":10000,
-    "filename":"ib0", "last_state":3 }
-, { "type":"sdev", "id":"sdev0", "iface":4, "media":1, "size":596000000000,
-    "last_state":3, "flags":4, "partitions":["part0"] }
-, { "type":"partition", "id":"part0", "start":0, "size":596000000000, "index":0,
-    "type":7, "filename":"sda1" } ]
-@endverbatim
- *
- * @see @ref conf_dfspec_preload "Detailed Functional Specification"
- */
-
-/**
- * @defgroup conf_dfspec_preload Pre-Loading of Configuration Cache
- * @brief Detailed Functional Specification.
- *
- * @see @ref conf, @ref conf-fspec-preload "Functional Specification"
- *
- * @{
- */
-
-struct confx_object;
-
-/**
- * Fills the array of confx_objects with configuration data, obtained
- * from string.
- *
- * @param[in]  src   Configuration string (see @ref conf-fspec-preload-string).
- * @param[out] dest  Receiver of configuration.
- * @param      n     Number of elements in `dest'.
- *
- * @returns >= 0  The number of confx_objects found.
- * @returns  < 0  Error code.
- *
- * @pre   src does not start with "local-conf:"
- * @post  retval <= n
- */
-static int c2_conf_parse(const char *src, struct confx_object dest[], size_t n);
-
-/** @} conf_dfspec_preload */
-#endif /* __COLIBRI_CONF_CONFC_OFFLINE_H__ */
diff --git a/conf/preload.h b/conf/preload.h
new file mode 100644
index 0000000..42571fc
--- /dev/null
+++ b/conf/preload.h
@@ -0,0 +1,149 @@
+/* -*- c -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
+ * Original creation date: 16-Mar-2012
+ */
+#ifndef __COLIBRI_CONF_PRELOAD_H__
+#define __COLIBRI_CONF_PRELOAD_H__
+
+/**
+ * @page conf-fspec-preload Pre-Loading of Configuration Cache
+ *
+ * - @ref conf-fspec-preload-string
+ *   - @ref conf-fspec-preload-string-format
+ *   - @ref conf-fspec-preload-string-examples
+ * - @ref conf_dfspec_preload "Detailed Functional Specification"
+ *
+ * When configuration cache is created, it can be pre-loaded with
+ * configuration data.  Cache pre-loading can be useful for testing,
+ * boot-strapping, and manual control. One of use cases is a situation
+ * when confc cannot or should not communicate with confd.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-fspec-preload-string Configuration string
+ *
+ * The application pre-loads confc cache by passing textual
+ * description of configuration objects -- so called configuration
+ * string -- to c2_confc_init() via `conf_source' parameter. Note
+ * that the value of this parameter should start with "local-conf:",
+ * otherwise it will be treated as an end point address of confd.
+ *
+ * When confc API is used by a kernel module, configuration string is
+ * provided as mount(8) option.
+ *
+ * <!---------------------------------------------------------------->
+ * @subsection conf-fspec-preload-string-format Format
+ *
+ * Configuration string represents a set (array) of configuration
+ * objects encoded using JSON [http://www.json.org/] format.
+ *
+ * First two members of a configuration object encoding are "type" and
+ * "id". The set of remaining members depends on the type of object.
+ *
+ * Object relations are expressed via object ids. Directory objects
+ * (c2_conf_dir) are not encoded.
+ *
+ * c2_conf_parse() translates configuration string into an array of
+ * confx_objects.
+ *
+ * E.g., configuration string
+ *
+@verbatim
+[ {"type":"profile", "id":"test", "filesystem":"c2t1fs"},
+  {"type":"filesystem", "id":"c2t1fs", "rootfid":[11,22], "params":[50,60,70],
+   "services":[]} ]
+@endverbatim
+ *
+ * describes two confx_objects:
+ *
+ * @code
+ * struct confx_object a = {
+ *     .o_id = C2_CONF_BUF_INIT(4, "test"),
+ *     .o_conf = {
+ *         .u_type = C2_CO_PROFILE,
+ *         .u.u_profile = {
+ *             .xp_filesystem = C2_CONF_BUF_INIT(6, "c2t1fs")
+ *         }
+ *     }
+ * };
+ * struct confx_object b = {
+ *     .o_id = C2_CONF_BUF_INIT(6, "c2t1fs"),
+ *     .o_conf = {
+ *         .u_type = C2_CO_FILESYSTEM,
+ *         .u.u_filesystem = {
+ *             .xp_rootfid = { .f_container = 11, .f_key = 22 },
+ *             .xp_params = { .an_count = 3, .an_elems = { 50, 60, 70 } },
+ *             .xp_services = { .ab_count = 0, .ab_elems = NULL }
+ *         }
+ *     }
+ * };
+ * @endcode
+ *
+ * <!---------------------------------------------------------------->
+ * @subsection conf-fspec-preload-string-examples Examples
+ *
+@verbatim
+[ { "type":"profile", "id":"test-2", "filesystem":"c2t1fs" }
+, { "type":fs, "id":"c2t1fs", "rootfid":[11, 22], "params":[50,60,70],
+    "services":["mds", "io"] }
+, { "type":"service", "id":"mds", "filesystem":"c2t1fs", "type":1,
+    "endpoints":["addr0"], "node":"N" }
+, { "type":"service", "id":"io", "filesystem":"c2t1fs", "type":2,
+    "endpoints":["addr1","addr2","addr3"], "node":"N" }
+, { "type":"node", "id":"N", "services":["mds", "io"], "memsize":8000,
+    "nr_cpu":2, "last_state":3, "flags":2, "pool_id":0, "nics":["nic0"],
+    "sdevs":["sdev0"] }
+, { "type":"nic", "id":"nic0", "iface_type":5, "mtu":8192, "speed":10000,
+    "filename":"ib0", "last_state":3 }
+, { "type":"sdev", "id":"sdev0", "iface":4, "media":1, "size":596000000000,
+    "last_state":3, "flags":4, "partitions":["part0"] }
+, { "type":"partition", "id":"part0", "start":0, "size":596000000000, "index":0,
+    "type":7, "filename":"sda1" } ]
+@endverbatim
+ *
+ * @see @ref conf_dfspec_preload "Detailed Functional Specification"
+ */
+
+/**
+ * @defgroup conf_dfspec_preload Pre-Loading of Configuration Cache
+ * @brief Detailed Functional Specification.
+ *
+ * @see @ref conf, @ref conf-fspec-preload "Functional Specification"
+ *
+ * @{
+ */
+
+struct confx_object;
+
+/**
+ * Fills the array of confx_objects with configuration data, obtained
+ * from string.
+ *
+ * @param[in]  src   Configuration string (see @ref conf-fspec-preload-string).
+ * @param[out] dest  Receiver of configuration.
+ * @param      n     Number of elements in `dest'.
+ *
+ * @returns >= 0  The number of confx_objects found.
+ * @returns  < 0  Error code.
+ *
+ * @pre   src does not start with "local-conf:"
+ * @post  retval <= n
+ */
+static int c2_conf_parse(const char *src, struct confx_object dest[], size_t n);
+
+/** @} conf_dfspec_preload */
+#endif /* __COLIBRI_CONF_PRELOAD_H__ */
-- 
1.8.3.2


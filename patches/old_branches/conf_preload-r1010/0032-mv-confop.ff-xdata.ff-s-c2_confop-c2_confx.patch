From 741f5a4417f33e527030b44e071c605c0181106b Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Sun, 4 Mar 2012 11:39:46 +0200
Subject: [PATCH 032/311] mv confop.ff xdata.ff; s/c2_confop/c2_confx/

I came with an idea on how to re-organize the code. This is the first
of the steps that need to be taken.

`xdata' stands for ``xcoded data'' (and `xcoded', in turn, means
``encoded & decoded'').  xdata.{h,c} files will be generated by
`xcode/ff2c/ff2c' tool, and xcode API will be used to process
the generated data structures.
---
 conf/confc.c   |  23 ++++----
 conf/confc.h   |   6 +--
 conf/confop.ff | 164 ---------------------------------------------------------
 conf/obj.h     |   4 +-
 conf/xdata.ff  | 164 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 180 insertions(+), 181 deletions(-)
 delete mode 100644 conf/confop.ff
 create mode 100644 conf/xdata.ff

diff --git a/conf/confc.c b/conf/confc.c
index 3b86690..e9955d4 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -652,7 +652,7 @@ static void grow_cache_st_in(struct c2_sm *mach)
 	 * struct c2_confc_ctx       *ctx  = to_ctx(mach);
 	 * struct c2_rpc_item        *item = c2_fop_to_rpc_item(&ctx->fc_fop);
 	 * struct c2_conf_fetch_resp *resp;
-	 * struct c2_confop_obj      *fetched;
+	 * struct c2_confx_obj       *fetched;
 	 * struct c2_conf_obj        *cached;
 	 * int                        rc = 0;
 	 *
@@ -802,7 +802,7 @@ static struct c2_sm_conf confc_states_conf = {
  * Confc cache management.
  * ------------------------------------------------------------------ */
 static int
-object_enrich(struct c2_conf_obj *dest, const struct c2_confop_obj *src)
+object_enrich(struct c2_conf_obj *dest, const struct c2_confx_obj *src)
 {
 	/*
 	 * int ret = 0;
@@ -854,31 +854,30 @@ map_fini();
  */
 static int map_add(struct XXX_map *registry, const struct c2_conf_obj *obj);
 
-static struct c2_confop_obj * map_lookup(const struct c2_conf_buf *key,
-					 uint8_t type);
+static struct c2_conf_obj * map_lookup(const struct c2_conf_buf *key,
+				       uint8_t type);
 
 /**
  * Allocates new configuration object and sets its fields from on-wire data.
  *
  * @param registry  Key-to-address mapping.
- * @param onwire    On-wire configuration object.
+ * @param src       Configuration object as received from confd.
  */
-static int cache_add(struct XXX_map *registry,
-		     const struct c2_confop_obj *onwire)
+static int cache_add(struct XXX_map *registry, const struct c2_confx_obj *src)
 {
 	/*
 	 * struct c2_conf_obj *obj;
 	 * struct _object_ops *ops;
 	 * int rc;
 	 *
-	 * C2_ASSERT(IS_IN_ARRAY(onwire->fo_val.v_type, object_ops));
-	 * ops = object_ops + onwire->fo_val.v_type;
+	 * C2_ASSERT(IS_IN_ARRAY(src->fo_val.v_type, object_ops));
+	 * ops = object_ops + src->fo_val.v_type;
 	 *
 	 * obj = c2_alloc(ops->oo_size());
 	 * if (obj == NULL)
 	 * 	return -ENOMEM;
 	 *
-	 * rc = ops->oo_enrich(obj, onwire);
+	 * rc = ops->oo_enrich(obj, src);
 	 * rc = ?: map_add(registry, obj);
 	 *
 	 * if (rc != 0)
@@ -892,9 +891,9 @@ struct _object_ops {
 	/** Returns the size of object in bytes. */
 	size_t (*oo_size)(const struct c2_conf_obj *a);
 	bool   (*oo_match)(const struct c2_conf_obj *a,
-			   const struct c2_confop_obj *b);
+			   const struct c2_confx_obj *b);
 	int    (*oo_enrich)(struct c2_conf_obj *dest,
-			    const struct c2_confop_obj *src);
+			    const struct c2_confx_obj *src);
 };
 
 struct _object_ops object_ops[C2_CO_NR];
diff --git a/conf/confc.h b/conf/confc.h
index 4400c26..b0214dd 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -21,9 +21,9 @@
 #define __COLIBRI_CONF_CONFC_H__
 
 #include "conf/path.h"
-#include "conf/confop.h" /* c2_conf_fetch */
-#include "sm/sm.h"       /* c2_sm, c2_sm_ast */
-#include "lib/chan.h"    /* c2_clink */
+#include "conf/xdata.h" /* c2_conf_fetch */
+#include "sm/sm.h"      /* c2_sm, c2_sm_ast */
+#include "lib/chan.h"   /* c2_clink */
 
 /**
  * @page confc-dld-fspec  confc: Functional Specification
diff --git a/conf/confop.ff b/conf/confop.ff
deleted file mode 100644
index 066d5c9..0000000
--- a/conf/confop.ff
+++ /dev/null
@@ -1,164 +0,0 @@
-/* -*- c -*- */
-/*
- * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
- *
- * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
- * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
- * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
- * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
- * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
- * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
- * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
- *
- * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
- * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
- * http://www.xyratex.com/contact
- *
- * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
- * Original creation date: 30-Jan-2012
- */
-
-/* XXX TODO Move definitions from cfg/cfg.h to conf/db.ff */
-require "cfg/cfg"; /* C2_CFG_PARAM_LEN, C2_CFG_SERVICE_MAX_END_POINTS */
-
-/*
- * Sequence of bytes.
- *
- * See also C2_CONF_BUF_INIT() and c2_conf_buf_eq().
- */
-sequence {
-	u32 cb_size;
-	u8  cb_data
-} c2_conf_buf;
-
-union {
-	u8          pc_iskey;
-	u32         pc_relation :0;
-	c2_conf_buf pc_key      :1
-} c2_confop_pathcomp;
-
-/* Configuration request. */
-record {
-	record {
-		u32         o_objtype; /* see c2_conf_objtype for values */
-		c2_conf_buf o_objkey
-	} ff_origin; /* Configuration object the path originates from. */
-	sequence {
-		u32                c_nr;
-		c2_confop_pathcomp c_data
-	} ff_comps   /* Path components. */
-} c2_conf_fetch;
-
-/* Configuration of a profile. */
-record {
-	c2_conf_buf fp_filesystem /* Name of profile's filesystem. */
-} c2_confop_profile;
-
-/* Configuration of a filesystem. */
-record {
-	record {
-		u64 f_container;
-		u64 f_key
-	} ff_rootfid; /* Root fid. */
-	sequence {
-		void p_none :C2_CFG_PARAM_LEN;
-		u64  p_data
-	} ff_params   /* Filesystem parameters. */
-} c2_confop_filesystem;
-
-/* Configuration of a service. */
-record {
-	/* Parent filesystem. */
-	c2_conf_buf fs_filesystem;
-
-	/* Service type. See c2_cfg_service_type for values. */
-	u32         fs_type;
-
-	/* End-points from which this service is reachable. */
-	sequence {
-		void        e_none :C2_CFG_SERVICE_MAX_END_POINTS;
-		c2_conf_buf e_data
-	} fs_endpoints;
-
-	/* Hosting node. */
-	c2_conf_buf fs_node
-} c2_confop_service;
-
-record {
-	sequence {
-		u32         s_nr;
-		c2_conf_buf s_data
-	} fn_services;
-	u32 fn_memsize;
-	u32 fn_nr_processors;
-	u64 fn_last_state;
-	u64 fn_flags;
-	u64 fn_pool_id;
-	sequence {
-		u32         n_nr;
-		c2_conf_buf n_data
-	} fn_nics;
-	sequence {
-		u32         d_nr;
-		c2_conf_buf d_data
-	} fn_sdevs
-} c2_confop_node;
-
-record {
-	c2_conf_buf fn_node;
-	u32         fn_iface_type;
-	u32         fn_mtu;
-	u64         fn_speed;
-	c2_conf_buf fn_filename;
-	u64         fn_last_state
-} c2_confop_nic;
-
-record {
-	c2_conf_buf fd_node;
-	u32         fd_type;
-	u32         fd_media;
-	u64         fd_size;
-	u64         fd_last_state;
-	u64         fd_flags;
-	c2_conf_buf fd_filename;
-	sequence {
-		u32         p_nr;
-		c2_conf_buf p_data
-	} fd_partitions
-} c2_confop_sdev;
-
-record {
-	c2_conf_buf fp_sdev;
-	u64         fp_start;
-	u64         fp_size;
-	u32         fp_index;
-	u32         fp_type;
-	c2_conf_buf fp_filename
-} c2_confop_partition;
-
-/* Encoding of a configuration object. */
-record {
-	c2_conf_buf fo_key;
-	union {
-		u8                   v_type;
-		c2_confop_profile    v_profile;
-		c2_confop_filesystem v_filesystem;
-		c2_confop_service    v_service;
-		c2_confop_node       v_node;
-		c2_confop_nic        v_nic;
-		c2_confop_sdev       v_sdev;
-		c2_confop_partition  v_partition
-	} fo_val
-} c2_confop_obj;
-
-/* Confd's reponse to c2_conf_fetch. */
-record {
-	/* Result of configuration retrieval (-Exxx = failure, 0 = success). */
-	u32 ffr_rc;
-
-	/* A sequence of encoded configuration objects. */
-	sequence {
-		u32           d_nr;
-		c2_confop_obj d_objs
-	} ffr_data
-} c2_conf_fetch_resp
diff --git a/conf/obj.h b/conf/obj.h
index 21e0915..f59a2f4 100644
--- a/conf/obj.h
+++ b/conf/obj.h
@@ -20,7 +20,7 @@
 #ifndef __COLIBRI_CONF_OBJ_H__
 #define __COLIBRI_CONF_OBJ_H__
 
-#include "conf/confop.h" /* c2_conf_buf */
+#include "conf/xdata.h" /* c2_conf_buf */
 
 /* XXX @todo Move definitions from cfg/cfg.h to conf/schema.h */
 #include "cfg/cfg.h"
@@ -52,7 +52,7 @@ enum c2_conf_status {
 /**
  * C2_CONF_BUF_INIT: initializer for struct c2_conf_buf.
  *
- * c2_conf_buf is defined in confop.ff (it has to be xcoded), but
+ * c2_conf_buf is defined in xdata.ff (it has to be xcoded), but
  * C2_CONF_BUF_INIT() cannot be defined there (xcode/ff2c would reject
  * such a definition).
  */
diff --git a/conf/xdata.ff b/conf/xdata.ff
new file mode 100644
index 0000000..ade35a1
--- /dev/null
+++ b/conf/xdata.ff
@@ -0,0 +1,164 @@
+/* -*- c -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
+ * Original creation date: 30-Jan-2012
+ */
+
+/* XXX TODO Move definitions from cfg/cfg.h to conf/db.ff */
+require "cfg/cfg"; /* C2_CFG_PARAM_LEN, C2_CFG_SERVICE_MAX_END_POINTS */
+
+/*
+ * Sequence of bytes.
+ *
+ * See also C2_CONF_BUF_INIT() and c2_conf_buf_eq().
+ */
+sequence {
+	u32 cb_size;
+	u8  cb_data
+} c2_conf_buf;
+
+union {
+	u8          pc_iskey;
+	u32         pc_relation :0;
+	c2_conf_buf pc_key      :1
+} c2_confx_pathcomp;
+
+/* Configuration request. */
+record {
+	record {
+		u32         o_objtype; /* see c2_conf_objtype for values */
+		c2_conf_buf o_objkey
+	} ff_origin; /* Configuration object the path originates from. */
+	sequence {
+		u32               c_nr;
+		c2_confx_pathcomp c_data
+	} ff_comps   /* Path components. */
+} c2_conf_fetch;
+
+/* Configuration of a profile. */
+record {
+	c2_conf_buf fp_filesystem /* Name of profile's filesystem. */
+} c2_confx_profile;
+
+/* Configuration of a filesystem. */
+record {
+	record {
+		u64 f_container;
+		u64 f_key
+	} ff_rootfid; /* Root fid. */
+	sequence {
+		void p_none :C2_CFG_PARAM_LEN;
+		u64  p_data
+	} ff_params   /* Filesystem parameters. */
+} c2_confx_filesystem;
+
+/* Configuration of a service. */
+record {
+	/* Parent filesystem. */
+	c2_conf_buf fs_filesystem;
+
+	/* Service type. See c2_cfg_service_type for values. */
+	u32         fs_type;
+
+	/* End-points from which this service is reachable. */
+	sequence {
+		void        e_none :C2_CFG_SERVICE_MAX_END_POINTS;
+		c2_conf_buf e_data
+	} fs_endpoints;
+
+	/* Hosting node. */
+	c2_conf_buf fs_node
+} c2_confx_service;
+
+record {
+	sequence {
+		u32         s_nr;
+		c2_conf_buf s_data
+	} fn_services;
+	u32 fn_memsize;
+	u32 fn_nr_processors;
+	u64 fn_last_state;
+	u64 fn_flags;
+	u64 fn_pool_id;
+	sequence {
+		u32         n_nr;
+		c2_conf_buf n_data
+	} fn_nics;
+	sequence {
+		u32         d_nr;
+		c2_conf_buf d_data
+	} fn_sdevs
+} c2_confx_node;
+
+record {
+	c2_conf_buf fn_node;
+	u32         fn_iface_type;
+	u32         fn_mtu;
+	u64         fn_speed;
+	c2_conf_buf fn_filename;
+	u64         fn_last_state
+} c2_confx_nic;
+
+record {
+	c2_conf_buf fd_node;
+	u32         fd_type;
+	u32         fd_media;
+	u64         fd_size;
+	u64         fd_last_state;
+	u64         fd_flags;
+	c2_conf_buf fd_filename;
+	sequence {
+		u32         p_nr;
+		c2_conf_buf p_data
+	} fd_partitions
+} c2_confx_sdev;
+
+record {
+	c2_conf_buf fp_sdev;
+	u64         fp_start;
+	u64         fp_size;
+	u32         fp_index;
+	u32         fp_type;
+	c2_conf_buf fp_filename
+} c2_confx_partition;
+
+/* Encoding of a configuration object. */
+record {
+	c2_conf_buf fo_key;
+	union {
+		u8                  v_type;
+		c2_confx_profile    v_profile;
+		c2_confx_filesystem v_filesystem;
+		c2_confx_service    v_service;
+		c2_confx_node       v_node;
+		c2_confx_nic        v_nic;
+		c2_confx_sdev       v_sdev;
+		c2_confx_partition  v_partition
+	} fo_val
+} c2_confx_obj;
+
+/* Confd's reponse to c2_conf_fetch. */
+record {
+	/* Result of configuration retrieval (-Exxx = failure, 0 = success). */
+	u32 ffr_rc;
+
+	/* A sequence of encoded configuration objects. */
+	sequence {
+		u32          d_nr;
+		c2_confx_obj d_objs
+	} ffr_data
+} c2_conf_fetch_resp
-- 
1.8.3.2


From b1229863bc3e302cb400f4432fdb9aee9f2a3d3f Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Wed, 7 Mar 2012 15:27:40 +0200
Subject: [PATCH 042/311] onwire.ff: fop format descriptions for `fop/fop2c'

---
 conf/onwire.ff | 187 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 187 insertions(+)
 create mode 100644 conf/onwire.ff

diff --git a/conf/onwire.ff b/conf/onwire.ff
new file mode 100644
index 0000000..779a57c
--- /dev/null
+++ b/conf/onwire.ff
@@ -0,0 +1,187 @@
+/* -*- c -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
+ * Original creation date: 06-Mar-2012
+ */
+
+/* export */
+struct c2_conf_buf;
+struct c2_conf_pathcomp;
+struct c2_conf_fetch;
+struct c2_conf_fetch_resp;
+
+/**
+ * Sequence of bytes.
+ * See also C2_CONF_BUF_INIT() and c2_conf_buf_eq().
+ */
+DEF(c2_conf_buf, SEQUENCE,
+    _(cb_size, U32),
+    _(cb_data, BYTE));
+
+/** Path component. */
+DEF(c2_conf_pathcomp, UNION,
+    _(pc_iskey, U32),           /* boolean value: 0 (no), 1 (yes) */
+    _case(0, pc_relation, U32), /* see c2_conf_objtype for values */
+    _case(1, pc_key,      c2_conf_buf));
+
+/* ---------------------------------------------------------------------
+ * Auxiliary definitions.
+ */
+
+DEF(arr_u64, SEQUENCE,
+    _(af_count, U32),
+    _(af_data,  U64));
+
+DEF(arr_buf, SEQUENCE,
+    _(ab_count, U32),
+    _(ab_data,  c2_conf_buf));
+
+DEF(arr_pathcomp, SEQUENCE,
+    _(c_nr,   U32),
+    _(c_data, c2_conf_pathcomp));
+
+DEF(objid, RECORD,
+    _(oi_objtype, U32), /* see c2_conf_objtype for values */
+    _(oi_objkey,  c2_conf_buf));
+
+DEF(fid, RECORD,
+    _(f_container, U64),
+    _(f_key,       U64));
+
+/* ---------------------------------------------------------------------
+ * Configuration objects.
+ */
+
+DEF(confx_profile, RECORD,
+    /* Name of profile's filesystem. */
+    _(xp_filesystem, c2_conf_buf));
+
+DEF(confx_filesystem, RECORD,
+    /* Rood fid. */
+    _(xf_rootfid, fid),
+    /* Filesystem parameters. */
+    _(xf_params,  arr_u64));
+
+DEF(confx_service, RECORD,
+    /* Parent filesystem. */
+    _(xs_filesystem, c2_conf_buf),
+    /* Service type.  See c2_cfg_service_type. */
+    _(xs_type,       U32),
+    /* End-points from which this service is reachable. */
+    _(xs_endpoints,  arr_buf),
+    /* Hosting node. */
+    _(xs_node,       c2_conf_buf));
+
+DEF(confx_node, RECORD,
+    /* Services being hosted by this node. */
+    _(xn_services, arr_buf),
+    /* Memory size in MB. */
+    _(xn_memsize,  U32),
+    /* Number of processors. */
+    _(xn_nr_cpu,   U32),
+    /* Last known state.  See c2_cfg_state_bit. */
+    _(xn_state,    U64),
+    /* Node property flag.  See c2_cfg_flag_bit. */
+    _(xn_flags,    U64),
+    /* Pool id. */
+    _(xn_pool_id,  U64),
+    /* Network interfaces. */
+    _(xn_nics,     arr_buf),
+    /* Storage devices. */
+    _(xn_sdevs,    arr_buf));
+
+DEF(confx_nic, RECORD,
+    /* Parent node. */
+    _(xi_node,     c2_conf_buf),
+    /* Type of network interface.  See c2_cfg_nic_type. */
+    _(xi_type,     U32),
+    /* Maximum transmission unit. */
+    _(xi_mtu,      U32),
+    /* Speed in Mb/sec. */
+    _(xi_speed,    U64),
+    /* Filename in host OS. */
+    _(xi_filename, c2_conf_buf),
+    /* Last known state.  See c2_cfg_state_bit. */
+    _(xi_state,    U64));
+
+DEF(confx_sdev, RECORD,
+    /* Parent node. */
+    _(xd_node,       c2_conf_buf),
+    /* Interface type.  See c2_cfg_storage_device_interface_type. */
+    _(xd_iface,      U32),
+    /* Media type.  See c2_cfg_storage_device_media_type. */
+    _(xd_media,      U32),
+    /* Size in bytes. */
+    _(xd_size,       U64),
+    /* Last known state.  See c2_cfg_state_bit. */
+    _(xd_state,      U64),
+    /* Property flags.  See c2_cfg_flag_bit. */
+    _(xd_flags,      U64),
+    /* Filename in host OS. */
+    _(xd_filename,   c2_conf_buf),
+    /* Partitions of this storage device. */
+    _(xd_partitions, arr_buf));
+
+DEF(confx_partition, RECORD,
+    /* Parent storage device. */
+    _(xa_sdev,  c2_conf_buf),
+    /* Start offset in bytes. */
+    _(xa_start, U64),
+    /* Size in bytes. */
+    _(xa_size,  U64),
+    /* Partition index. */
+    _(xa_index, U32),
+    /* Partition type.  See c2_cfg_storage_device_partition_type. */
+    _(xa_type,  U32),
+    /* Filename in host OS. */
+    _(xa_file,  c2_conf_buf));
+
+DEF(objval, UNION,
+    _(co_type, U32), /* see c2_conf_objtype for values */
+    _case(0, co_profile,    confx_profile),
+    _case(1, co_filesystem, confx_filesystem),
+    _case(2, co_service,    confx_service),
+    _case(3, co_node,       confx_node),
+    _case(4, co_nic,        confx_nic),
+    _case(5, co_sdev,       confx_sdev),
+    _case(6, co_partition,  confx_partition));
+
+DEF(confx_object, RECORD,
+    _(o_key, c2_conf_buf),
+    _(o_val, objval));
+
+DEF(enconf, SEQUENCE,
+    _(ec_nr,   U32),
+    _(ec_objs, confx_object));
+
+/* ---------------------------------------------------------------------
+ * Configuration fops.
+ */
+
+/** Configuration request. */
+DEF(c2_conf_fetch, RECORD,
+    /** Configuration object the path originates from. */
+    _(f_origin, objid),
+    /** Path components. */
+    _(f_comps,  arr_pathcomp));
+
+/** Confd's response to c2_conf_fetch. */
+DEF(c2_conf_fetch_resp, RECORD,
+    /** Result of configuration retrieval (-Exxx = failure, 0 = success). */
+    _(fr_rc,   U32),
+    /** A sequence of encoded configuration objects. */
+    _(fr_data, enconf));
-- 
1.8.3.2


From f1368ebd3b5e45086aa784261c904d1c4725c7ea Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Mon, 2 Apr 2012 21:29:05 +0300
Subject: [PATCH 114/311] on_object_updated(): fix error, add predicate

on_object_updated():
  - ensure that cache is locked;
  - fix pointer usage.

Slightly improve documentation.
---
 conf/confc.c | 15 ++++++++++-----
 conf/confc.h |  7 ++++++-
 2 files changed, 16 insertions(+), 6 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 719a8bf..7734336 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -241,10 +241,10 @@
  * state machine to S_CHECK state.
  *
  * @note  Object's channel (c2_conf_obj::co_chan) is signaled
- *        (c2_chan_broadcast()) 1) when object_enrich() completes
+ *        (c2_chan_broadcast())  1) when object_enrich() completes
  *        loading of configuration data into this object and changes
  *        status of this object to C2_CS_READY (loading succeeded) or
- *        C2_CS_MISSING (loading failed); 2) when the object is closed
+ *        C2_CS_MISSING (loading failed);  2) when the object is closed
  *        and its number of references becomes zero.  Of these cases
  *        only the first one is applicable to S_WAIT_STATUS state.
  *
@@ -707,12 +707,15 @@ static int act(struct c2_confc_ctx *cx, const struct walk_ctx *wx,
  * @retval C2_CS_LOADING  Neither path target nor missing objects can
  *                        be reached because of C2_CS_LOADING
  *                        object(s) blocking the path.  path_walk()
- *                        registers ctx->fc_clink with the channel(s)
- *                        of loading object(s).
+ *                        registers ctx->fc_clink and, optionally,
+ *                        ctx->fc_extra clinks with the channel(s) of
+ *                        loading object(s).
  *
  * @retval -ENOENT        ctx->fc_path contains a key, but the corresponding
  *                        object does not exist.
  *
+ * @retval -ENOMEM        Insufficient memory.
+ *
  * @see @ref confc-dld-lspec-state
  */
 static int path_walk(struct c2_confc_ctx *ctx)
@@ -1066,9 +1069,11 @@ static bool on_object_updated(struct c2_clink *link)
 	struct c2_confc_ctx *ctx =
 		container_of(link->cl_group, struct c2_confc_ctx, fc_clink);
 
+	C2_PRE(c2_mutex_is_locked(cache_lock(ctx)));
+
 	for (i = 0; i < ctx->fc_nr_extra; ++i)
 		c2_clink_del(ctx->fc_extra + i);
-	c2_clink_del(ctx->fc_clink); /* group head is de-registered last */
+	c2_clink_del(&ctx->fc_clink); /* group head is de-registered last */
 
 	ast_state_set(&ctx->fc_ast, S_CHECK);
 	return true; /* event is consumed */
diff --git a/conf/confc.h b/conf/confc.h
index 5bbc9de..630fa28 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -312,7 +312,12 @@ struct c2_confc {
 	struct c2_conf_obj *cc_root;
 	/** Serializes confc state machines. */
 	struct c2_sm_group *cc_group;
-	/** Protects this structure and the DAG from concurrent writes. */
+	/**
+	 * Cache lock.
+	 *
+	 * Protects this structure and the DAG of cached configuration
+	 * objects from concurrent writes.
+	 */
 	struct c2_mutex     cc_lock;
 };
 
-- 
1.8.3.2


From 0fa8f56abb41fb616f07d8dc831315dc6f244731 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Sun, 18 Mar 2012 21:35:40 +0200
Subject: [PATCH 072/311] c2_confc_init(): pre-load configuration cache

---
 conf/_confc_offline.h | 16 ++++++++--------
 conf/confc.c          | 35 ++++++++++++++++++++++++++++++++---
 conf/confc.h          | 13 +++++++++----
 3 files changed, 49 insertions(+), 15 deletions(-)

diff --git a/conf/_confc_offline.h b/conf/_confc_offline.h
index 7138949..b0301c7 100644
--- a/conf/_confc_offline.h
+++ b/conf/_confc_offline.h
@@ -21,7 +21,7 @@
 #define __COLIBRI_CONF__CONFC_OFFLINE_H__
 
 /**
- * @page confc-offline  confc offline (temporary workaround)
+ * @page confc-offline  confc offline (workaround)
  *
  * Until confd is ready, confc cannot obtain configuration by sending
  * fops.  In order for confc to be operational, its cache needs to be
@@ -172,16 +172,16 @@ struct confx_object;
 
 /**
  * Fills the array of confx_objects with configuration data, obtained
- * from a string.
+ * from string.
  *
- * @param src        Configuration string (see @ref confc-offline-string).
- * @param[out] dest  Receiver of parsed data.
- * @param n          Number of elements in `dest'.
+ * @param[in]  src   Configuration string (see @ref confc-offline-string).
+ * @param[out] dest  Receiver of configuration.
+ * @param      n     Number of elements in `dest'.
  *
- * @post  retval <= n
+ * @returns >= 0  The number of confx_objects found.
+ * @returns  < 0  Error code.
  *
- * @returns  The number of confx_objects written to `dest'.
- * @returns  Negative value in case of error (-Exxx).
+ * @post  retval <= n
  */
 static int c2_conf__parse(const char *src, struct confx_object dest[],
 			  size_t n);
diff --git a/conf/confc.c b/conf/confc.c
index 5d411fe..d2534cf 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -161,6 +161,9 @@
  * data from the configuration server (confd), and adds new
  * configuration data to the cache.
  *
+ * @note  Currently confd is not implemented. Confc cache is pre-loaded
+ *        from an ASCII string. See @subpage confc-offline.
+ *
  * Initially, i.e., right after c2_confc_init(), confc cache contains
  * only one object --- a stub of the root configuration object
  * (c2_conf_profile).  Cached configuration objects are allocated
@@ -453,6 +456,12 @@ static int path_walk(struct c2_confc_ctx *ctx, enum c2_conf_status *status)
 		*status = obj->co_status;
 	}
 
+	/*
+	 * XXX "confc offline": all the needed configuration data is
+	 * supposed to be pre-loaded.
+	 */
+	C2_ASSERT(*status == C2_CS_READY);
+
 	if (*status == C2_CS_READY) {
 		C2_CNT_INC(obj->co_nrefs);
 		if (target_is_directory) {
@@ -524,11 +533,30 @@ static bool confc_is_initialised(void)
 	return g_confc.root != NULL;
 }
 
+static int cache_preload(const char *conf_str)
+{
+	/*
+	 * // 4096 bytes (kernel module option) / 64 = 64 bytes (per object)
+	 * struct confx_object objs[64];
+	 * int rc;
+	 * int i;
+	 *
+	 * rc = c2_conf__parse(conf_str, objs, ARRAY_SIZE(objs));
+	 * for (i = rc - 1; i >= 0; --i) {
+	 *     rc = cache_add(objs + i);
+	 *     if (rc != 0)
+	 *         break;
+	 * }
+	 * return rc;
+	 */
+	XXX;
+}
+
 int c2_confc_init(const char *profile, const char *confd_addr,
 		  struct c2_sm_group *sm_group)
 {
 	/*
-	 * int                 ret;
+	 * int                 rc;
 	 * struct c2_conf_obj *root;
 	 *
 	 * C2_PRE(!confc_is_initialised());
@@ -545,10 +573,11 @@ int c2_confc_init(const char *profile, const char *confd_addr,
 	 * c2_conf_map_add(cache_registry(), root);
 	 * g_confc.root = root;
 	 *
-	 * C2_POST(equi(ret == 0, confc_is_initiated()));
+	 * cache_preload(confd_addr);
+	 *
+	 * C2_POST(equi(rc == 0, confc_is_initiated()));
 	 */
 	XXX;
-	/* XXX TODO: Consume `confd_addr'. */
 }
 C2_EXPORTED(c2_confc_init);
 
diff --git a/conf/confc.h b/conf/confc.h
index 2f6ec8e..212abc2 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -305,10 +305,15 @@ struct c2_confc_dir;
  * Initiates configuration client.
  *
  * @param profile     Name of profile used by this confc.
- * @param confd_addr  Configuration server's end point address.
+ * @param confd_addr  See the note below. @todo Configuration server's
+ *                    end point address.
  * @param sm_group    State machine group to be associated with confc
  *                    configuration cache.
  *
+ * @note  Until confd service is implemented, `confd_addr' is a string
+ *        with configuration data (see @ref confc-offline). This
+ *        string is used to pre-load confc cache.
+ *
  * @pre   confc cache is not initiated
  * @pre   sm_group != NULL
  * @post  equi(retval == 0, confc cache is initiated)
@@ -327,9 +332,9 @@ int c2_confc_init(const char *profile, const char *confd_addr,
  *       c2_confc_ctx has been passed to c2_confc_{,dir}open() and its
  *       ->fc_complete channel has not been signaled yet.
  *
- * @pre  confc cache is initiated
- * @pre  There are no opened (pinned) configuration objects.
- * @pre  confc cache is not initiated
+ * @pre   confc cache is initiated
+ * @pre   There are no opened (pinned) configuration objects.
+ * @post  confc cache is not initiated
  */
 void c2_confc_fini(void);
 
-- 
1.8.3.2


From dae3c8a12e86c5cbd340edd6f5b6375f961dc96f Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Sat, 31 Mar 2012 17:53:44 +0300
Subject: [PATCH 111/311] describe S_GROW_CACHE

+ add `Growing the cache' section
---
 conf/confc.c | 81 +++++++++++++++++++++++++++++++++++++++---------------------
 1 file changed, 53 insertions(+), 28 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 99318d1..877727a 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -155,6 +155,7 @@
  * - @ref confc-dld-lspec-open
  * - @ref confc-dld-lspec-walk
  * - @ref confc-dld-lspec-state
+ * - @ref confc-dld-lspec-grow
  * - @ref confc-dld-lspec-thread
  *
  * @subsection confc-dld-lspec-comps Component Overview
@@ -339,7 +340,20 @@
  *
  * - S_GROW_CACHE
  *
- * XXX
+ * When a state machine is entering S_GROW_CACHE state,
+ * grow_cache_st_in() callback is invoked.  If the error code
+ * contained in confd's response (c2_conf_fetch_resp::fr_rc) is zero,
+ * the callback calls cache_grow() function (see `Growing the cache'
+ * below).  The callback "releases" rpc item by calling
+ * c2_rpc_item_but().  If ->fr_rc == 0 and cache_grow() succeeds,
+ * grow_cache_st_in() moves the state machine to S_CHECK state,
+ * otherwise --- to S_FAILURE state.
+ *
+ * - S_TERMINAL, S_FAILURE
+ *
+ * When a state machine enters S_TERMINAL or S_FAILURE state, it
+ * invokes completion_announce() callback.  This function broadcasts
+ * c2_confc_ctx::fc_complete channel.
  *
  * @dot
  * digraph confd_states {
@@ -370,35 +384,46 @@
  * }
  * @enddot
  *
- * - When S_CHECK state is entered, check_st_in() is invoked.  This
- *   function calls path_walk() and, depending on the result of this
- *   call, moves the state machine to S_TERMINAL, S_WAIT_REPLY,
- *   S_WAIT_STATUS, or S_FAILURE state.
- *
- * - When S_WAIT_REPLY is entered, wait_reply_st_in() is invoked.
- *   All this function does is c2_rpc_post()ing c2_confc_ctx::fc_fop.
- *
- * - A state machine in S_WAIT_STATUS state waits for
- *   c2_confc_ctx::fc_clink to be signaled.  on_object_updated()
- *   callback, associated with the clink, posts an AST that will move
- *   the state machine to S_CHECK state.
- *
- * - A state machine in S_WAIT_REPLY state waits for a response from
- *   confd to arrive.  Upon receiving a response, on_replied() is
- *   called. This function moves the state machine to S_GROW_CACHE
- *   state if c2_rpc_item::ri_error is zero, or to S_FAILURE if the
- *   value is non-zero.
- *
- * - When S_GROW_CACHE is entered, grow_cache_st_in() is invoked.
- *   This function updates the configuration cache using received
- *   configuration data, which is contained in c2_conf_fetch_resp.
- *   grow_cache_st_in() moves the state machine to S_CHECK state upon
- *   success and to S_FAILURE in case of error.
+ * <!------------------------------------------------------------------>
+ * @subsection confc-dld-lspec-grow Growing the cache
  *
- * - When S_TERMINAL or S_FAILURE state is entered,
- *   completion_announce() is invoked.  This function broadcasts
- *   c2_confc_ctx::fc_complete channel.
+ * cache_grow() locks the cache (c2_confc::cc_lock) and unlocks before
+ * returning.  The function performs the following operations for
+ * every object descriptor (confx_object, defined in conf/onwire.ff):
+ *   -#
+ *      Tries to find an object with the same identity (type and key)
+ *      in the registry of cached objects (c2_confc::cc_registry),
+ *      using c2_conf_map_lookup().
+ *   -#
+ *      If cached object is found, it is "enriched" (see
+ *      object_enrich() below).  Otherwise new object is added to the
+ *      cache with cache_add().
+ *
+ * cache_add() performs the following operations:
+ *   -# c2_conf_obj_new() --- allocates configuration object and
+ *      initialises its fields;
+ *   -# c2_conf_obj_fill() --- fills new object with configuration data
+ *      contained in on-wire object descriptor (confx_object);
+ *   -# c2_conf_map_add() --- adds new entry to the cached objects
+ *      registry.
+ *
+ * object_enrich() compares cached object with the descriptor received
+ * from the confd.  If a discrepancy is found (c2_conf_obj_mismatch()),
+ * the function
+ *   - reports the discrepancy (C2_ADDB_ADD());
+ *   - sets status of the cached object to C2_CS_MISSING;
+ *   - signals object's channel (c2_chan_broadcast());
+ *   - returns negative value.
+ *
+ * If there is no discrepancy, and the cached object is a stub,
+ * object_enrich()
+ *   - fills the cached object with configuration data
+ *     (c2_conf_obj_fill());
+ *   - changes status of the cached object to C2_CS_READY or
+ *     C2_CS_MISSING, depending on whether filling was successful;
+ *   - signals object's channel.
  *
+ * <!------------------------------------------------------------------>
  * @subsection confc-dld-lspec-thread Threading and Concurrency Model
  *
  * When a confc instance is started (c2_confc_init()), it gets
-- 
1.8.3.2


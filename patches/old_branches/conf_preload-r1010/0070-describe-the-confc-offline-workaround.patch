From 1c5fda6dbf79db6ed9a7d3b52106842d3a28f44c Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Sat, 17 Mar 2012 00:50:26 +0200
Subject: [PATCH 070/311] describe the "confc offline" workaround

_confc_offline.h: The leading underscore in the filename is supposed
to put emphasis on the transitory nature of this solution.
---
 conf/_confc_offline.h | 190 ++++++++++++++++++++++++++++++++++++++++++++++++++
 conf/onwire.ff        |   2 +-
 2 files changed, 191 insertions(+), 1 deletion(-)
 create mode 100644 conf/_confc_offline.h

diff --git a/conf/_confc_offline.h b/conf/_confc_offline.h
new file mode 100644
index 0000000..165d8a5
--- /dev/null
+++ b/conf/_confc_offline.h
@@ -0,0 +1,190 @@
+/* -*- c -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
+ * Original creation date: 16-Mar-2012
+ */
+#ifndef __COLIBRI_CONF__CONFC_OFFLINE_H__
+#define __COLIBRI_CONF__CONFC_OFFLINE_H__
+
+/**
+ * @page confc-offline  confc offline (temporary workaround)
+ *
+ * Until confd is ready, confc cannot obtain configuration by sending
+ * fops.  In order for confc to be operational, its cache needs to be
+ * pre-loaded.
+ *
+ * Configuration data, represented as an ASCII string, is conveyed to
+ * confc through `confd_addr' parameter of c2_confc_init() function
+ * (`confd_addr' is not used anyway, because there is no confd to
+ * communicate with).
+ *
+ * When confc API is used by a kernel module, the configuration string
+ * is specified as a module parameter. User space application obtains
+ * this string from command line.
+ *
+ * @section confc-offline-string  Configuration string
+ *
+ * Configuration string describes a sequence of configuration objects.
+ * c2_conf__parse() translates this string into an array of
+ * confx_objects.
+ *
+ * An object is represented by a sequence of attributes.  The first
+ * attribute is object's identity.  Set of remaining attributes
+ * depends on object's type.  Attributes are ordered in accordance
+ * with fields of confx_* structure that corresponds to object's type.
+ *
+ * For example, this configuration string
+ *
+@verbatim
+(prof:"test","c2t1fs") (fs:"c2t1fs",[11,22][50,60,70],[])
+@endverbatim
+ *
+ * describes two confx_objects:
+ *
+ * @code
+ * struct confx_object o1 = {
+ *     .o_key = C2_CONF_BUF_INIT(4, "test"),
+ *     .o_val = {
+ *         .ov_type = C2_CO_PROFILE,
+ *         .u.ov_profile = {
+ *             .xp_filesystem = C2_CONF_BUF_INIT(6, "c2t1fs")
+ *         }
+ *     }
+ * };
+ * struct confx_object o2 = {
+ *     .o_key = C2_CONF_BUF_INIT(6, "c2t1fs"),
+ *     .o_val = {
+ *         .ov_type = C2_CO_FILESYSTEM,
+ *         .u.ov_filesystem = {
+ *             .xp_rootfid = { .f_container = 11, .f_key = 22 },
+ *             .xp_params = { .an_count = 3, .an_elems = { 50, 60, 70 } },
+ *             .xp_services = { .ab_count = 0, .ab_elems = NULL }
+ *         }
+ *     }
+ * };
+ * @endcode
+ *
+ * @subsection confc-offline-string-grammar  Grammar
+ *
+@verbatim
+object-sequence:
+        object
+        object-sequence object
+
+object:
+        '(' type ':' STR ',' field-sequence ')'
+
+type:
+        'prof'
+        'fs'
+        'svc'
+        'node'
+        'sdev'
+        'part'
+
+field-sequence:
+        field
+        field-sequence ',' field
+
+field:
+        STR
+        UINT
+        '[' string-sequence* ']'
+        '[' integer-sequence* ']'
+
+string-sequence:
+        STR
+        string-sequence ',' STR
+
+integer-sequence:
+        UINT
+        integer-sequence ',' UINT
+@endverbatim
+ *
+ * UINT is an unsigned decimal integer.
+ *
+ * STR resembles C string; escape characters are not supported.
+ *
+ * @code
+ * "Hello, world!"     -- valid STR
+ * "one\ttwo\03\0\xf"  -- not a STR
+ * @endcode
+ *
+ * Tokens can be separated by white space; this consists of comments
+ * and white-space characters.  Comments are surrounded by curly
+ * brackets.
+ *
+ * @subsection confc-offline-string-examples  Examples
+ *
+@verbatim
+                {filesystem}
+(prof:"test-2", "c2t1fs")
+
+              {rootfid} {params}    {services}
+(fs:"c2t1fs", [11, 22]  [50,60,70], ["mds", "io"])
+
+              {filesystem} {type} {end points} {node}
+(svc:"mds", "c2t1fs",      1,     ["addr0"],   "N")
+
+(svc:"io","c2t1fs",2,{inline comment}["addr1","addr2","addr3"],"N")
+
+           {services}     {RAM} {#CPU} {state} {flags} {pool} {nics}
+(node:"N", ["mds", "io"], 8000, 2,     3,      2,      0,     ["nic0"],
+           {sdevs}
+           ["sdev0"])
+
+             {node} {type} {MTU} {speed} {filename} {state}
+(nic:"nic0", "N",   5,     8192, 10000,  "ib0",     3)
+
+               {node} {iface} {media} {size}        {state} {flags} {parts}
+(sdev:"sdev0", "N",   4,      1,      596000000000, 3,      4,      ["part0"])
+
+               {sdev}   {start} {size}        {idx} {type} {filename}
+(part:"part0", "sdev0", 0,      596000000000, 0,    7,     "sda1")
+@endverbatim
+ *
+ * @see @ref confc_offline
+ */
+
+/**
+ * @defgroup confc_offline  confc offline: logical specification
+ *
+ * @see @ref confc-dld, @ref confc-offline
+ *
+ * @{
+ */
+
+struct confx_object;
+
+/**
+ * Fills the array of confx_objects with configuration data, obtained
+ * from a string.
+ *
+ * @param src        Configuration string (see @ref confc-offline-string).
+ * @param[out] dest  Receiver of parsed data.
+ * @param n          Number of elements in `dest'.
+ *
+ * @post  retval <= n
+ *
+ * @returns  The number of confx_objects written to `dest'.
+ * @returns  Negative value in case of error (-Exxx).
+ */
+static int c2_conf__parse(const char *src, struct confx_object dest[],
+			  size_t n);
+
+/** @} confc_offline */
+#endif /* __COLIBRI_CONF__CONFC_OFFLINE_H__ */
diff --git a/conf/onwire.ff b/conf/onwire.ff
index c662997..e52a89b 100644
--- a/conf/onwire.ff
+++ b/conf/onwire.ff
@@ -97,7 +97,7 @@ DEF(confx_node, RECORD,
     _(xn_nr_cpu,   U32),
     /* Last known state.  See c2_cfg_state_bit. */
     _(xn_state,    U64),
-    /* Node property flag.  See c2_cfg_flag_bit. */
+    /* Property flags.  See c2_cfg_flag_bit. */
     _(xn_flags,    U64),
     /* Pool id. */
     _(xn_pool_id,  U64),
-- 
1.8.3.2


From cd93c07814e4c26358796f1c9add4561172bbdd2 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Tue, 10 Jul 2012 19:28:04 +0300
Subject: [PATCH 261/311] rm -r conf/ut

`conf/ut' directory is a pile of dead code. There is no chance that
it will be updated during DLDINSP phase. So I remove it, to keep
`conf' directory clean.  If deleted conf/ut/* files are ever needed,
they can always be restored from the git repository.
---
 conf/ut/README     |  15 -----
 conf/ut/confc.c    | 162 -----------------------------------------------------
 conf/ut/obj.c      |  45 ---------------
 conf/ut/path.c     | 119 ---------------------------------------
 conf/ut/relation.c |  87 ----------------------------
 5 files changed, 428 deletions(-)
 delete mode 100644 conf/ut/README
 delete mode 100644 conf/ut/confc.c
 delete mode 100644 conf/ut/obj.c
 delete mode 100644 conf/ut/path.c
 delete mode 100644 conf/ut/relation.c

diff --git a/conf/ut/README b/conf/ut/README
deleted file mode 100644
index db7b6a2..0000000
--- a/conf/ut/README
+++ /dev/null
@@ -1,15 +0,0 @@
-Please ignore the contents of conf/ut/ directory (make exception for
-this README, though).
-
-The conf/* files are quite unstable at the moment, and symbols are
-frequently renamed.  Maintaining of conf/ut/* files is hard and rather
-pointless in such circumstances.
-
-I will update conf/ut/* when conf/* are more stable.
-
- --vvv, 2012-02-07
-
-
-So, confd uts live here.
- --abilenko Fri Mar 16 10:54:04 EET 2012
-
diff --git a/conf/ut/confc.c b/conf/ut/confc.c
deleted file mode 100644
index 3d74df2..0000000
--- a/conf/ut/confc.c
+++ /dev/null
@@ -1,162 +0,0 @@
-/* -*- c -*- */
-/*
- * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
- *
- * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
- * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
- * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
- * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
- * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
- * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
- * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
- *
- * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
- * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
- * http://www.xyratex.com/contact
- *
- * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
- * Original creation date: 07-Feb-2012
- */
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-#include "conf/confc.c"
-
-static struct c2_sm_group g_grp;
-static struct c2_thread   g_ath;
-static bool               g_more = true;
-static const char         g_profile[] = "test-profile";
-
-static void ast_thread(int n __attribute__((unused)))
-{
-	while (g_more) {
-		c2_chan_wait(&g_grp.s_clink);
-		c2_sm_group_lock(&g_grp);   /* calls c2_sm_asts_run() */
-		c2_sm_group_unlock(&g_grp); /* ditto */
-	}
-}
-
-static int init(void)
-{
-	int rc;
-	c2_sm_group_init(&g_grp);
-	rc = C2_THREAD_INIT(&g_ath, int, NULL, ast_thread, 0, "ast_thread");
-	rc = rc ?: c2_confc_init(g_profile, "XXX_endpoint", &g_grp);
-	return rc;
-}
-
-static int fini(void)
-{
-	c2_confc_fini();
-	g_more = false;
-	c2_clink_signal(&g_grp.s_clink);
-	c2_thread_join(&g_ath);
-	c2_sm_group_fini(&g_grp);
-	return 0;
-}
-
-static void test_init_fini(void)
-{
-	int                      rc;
-	struct c2_conf_obj      *root;
-	struct c2_sm_group       group;
-	const char               prof[] = "test";
-	const struct c2_conf_buf prof_buf = C2_CONF_BUF_INIT(sizeof prof, prof);
-
-	C2_UT_ASSERT(confc_is_initialized());
-	c2_confc_fini();
-	C2_UT_ASSERT(!confc_is_initialized());
-
-	rc = c2_confc_init(prof, "XXX_endpoint", &group);
-	C2_UT_ASSERT(rc == 0);
-	C2_UT_ASSERT(confc_is_initialized());
-	C2_UT_ASSERT(g_confc.cache.cc_group == &group);
-	C2_UT_ASSERT(!c2_mutex_is_locked(&g_confc.cache.cc_lock));
-	C2_UT_ASSERT(g_confc.root != NULL);
-
-	root = &g_confc.root->cp_obj;
-	C2_UT_ASSERT(root->co_type == C2_CO_PROFILE);
-	C2_UT_ASSERT(root->co_status == C2_CS_MISSING);
-	C2_UT_ASSERT(c2_conf_buf_eq(root->co_key, &prof_buf));
-	C2_UT_ASSERT(/* allocated */ root->co_key.cb_data != prof);
-}
-
-static void test_ctx(void)
-{
-	struct c2_confc_ctx ctx;
-
-	c2_confc_ctx_init(&ctx);
-
-	C2_UT_ASSERT(ctx.fc_result         == NULL);
-	C2_UT_ASSERT(ctx.fc_mach.sm_grp   == &g_grp);
-	C2_UT_ASSERT(ctx.fc_mach.sm_state == S_INITIAL);
-	C2_UT_ASSERT(c2_confc_error(&ctx)  == 0);
-
-	C2_UT_ASSERT(ctx.fc_path.p_origin == NULL);
-	C2_UT_ASSERT(ctx.fc_path.p_len    == 0);
-	C2_UT_ASSERT(ctx.fc_path.p_comps  == NULL);
-
-	C2_UT_ASSERT(ctx.fc_ast.sa_cb     == NULL);
-	C2_UT_ASSERT(ctx.fc_ast.sa_datum  == NULL);
-	C2_UT_ASSERT(ctx.fc_ast.sa_next   == NULL);
-	/* XXX ctx.fc_complete is not tested. Should it be? */
-
-	/* c2_sm_ast::sa_mach is not used; c2_sm is accessed via
-	 * bob_of()->fc_mach */
-	C2_UT_ASSERT(ctx.fc_ast.sa_mach == NULL);
-
-	C2_UT_ASSERT(c2_fop_data(&ctx->fc_fop) == &ctx->fc_req);
-}
-
-static void test_path_status(void)
-{
-	c2_mutex_lock(&g_confc.cache.cc_group->s_lock);
-	/* XXX
-	 * Call path_status(ctx, &status) with different paths
-	 * (ctx->fc_path) and ensure that:
-	 * - if all of the needed objects are cached:
-	 *   - if c2_conf_path_is_directory(&ctx->fc_path):
-	 *      - ctx->fc_result points to a c2_confc_dir with
-	 *        ->d_parent of proper identity (type and key), null
-	 *        ->d_current, and proper ->d_descr;
-	 *   - else:
-	 *      - ctx->fc_result points to a concrete (not generic)
-	 *        configuration object with proper identity and
-	 *        configuration values.
-	 * - elsif ...XXX
-	 */
-	C2_UT_FAIL("XXX not implemented");
-	c2_mutex_unlock(&g_confc.cache.cc_group->s_lock);
-}
-
-static void test_open(void)
-{
-	/* XXX
-	 * - Initiate a c2_confc_ctx object --- ctx.
-	 *
-	 * - `path1' ends with a one-to-many downlink.
-	 *   - Assert c2_confc_open(path1, ctx) returns -EISDIR and
-	 *     does not change `ctx'.
-	 *   - Assert g_grp.s_forkq == NULL.
-	 *
-	 * - `path2' ends with a one-to-one downlink.
-	 *   - Assert c2_confc_open(path2, ctx) returns 0.
-	 *   - Assert g_grp.s_forkq != NULL. (NB a race condition)
-	 *   - Assert ctx->fc_path is equal to path2.
-	 */
-	C2_UT_FAIL("XXX not implemented");
-}
-
-const struct c2_test_suite confc_ut = {
-	.ts_name  = "confc-ut",
-	.ts_init  = init,
-	.fs_fini  = fini,
-	.ts_tests = {
-		{ "init/fini",   test_init_fini },
-		{ "ctx",         test_ctx },
-		{ "path_status", test_path_status },
-		{ "open",        test_open },
-		{ NULL, NULL }
-	}
-};
diff --git a/conf/ut/obj.c b/conf/ut/obj.c
deleted file mode 100644
index 1b564a1..0000000
--- a/conf/ut/obj.c
+++ /dev/null
@@ -1,45 +0,0 @@
-/* -*- c -*- */
-/*
- * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
- *
- * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
- * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
- * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
- * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
- * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
- * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
- * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
- *
- * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
- * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
- * http://www.xyratex.com/contact
- *
- * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
- * Original creation date: 04-Feb-2012
- */
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-#include "conf/obj.c"
-#include <string.h>    /* strlen */
-
-static void test_buf(void)
-{
-	char s[] = "hello";
-	struct c2_conf_buf a = C2_CONF_BUF_INIT(strlen(s), s);
-	struct c2_conf_buf b = C2_CONF_BUF_INIT(strlen(s), "hello");
-
-	C2_ASSERT(a.cb_data != b.cb_data);
-	C2_UT_ASSERT(c2_conf_buf_eq(a, b));
-	++b.cb_size;
-	C2_UT_ASSERT(!c2_conf_buf_eq(a, b));
-}
-
-const struct c2_test_suite conf_ut = {
-	.ts_name  = "conf-obj-ut",
-	.ts_tests = {
-		{ "bytes", test_bytes },
-		{ NULL, NULL }
-	}
-};
diff --git a/conf/ut/path.c b/conf/ut/path.c
deleted file mode 100644
index 18f2fea..0000000
--- a/conf/ut/path.c
+++ /dev/null
@@ -1,119 +0,0 @@
-/* -*- c -*- */
-/*
- * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
- *
- * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
- * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
- * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
- * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
- * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
- * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
- * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
- *
- * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
- * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
- * http://www.xyratex.com/contact
- *
- * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
- * Original creation date: 08-Feb-2012
- */
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-#include "conf/path.h"
-
-static void test_path_invariant(void)
-{
-	C2_UT_FAIL("XXX not implemented");
-}
-
-static bool pathcomp_eq(const struct c2_conf_pathcomp *x,
-			const struct c2_conf_pathcomp *y)
-{
-	C2_ASSERT(x != y && x != NULL && y != NULL);
-
-	if (x->pc_iskey != y->pc_iskey)
-		return false;
-
-	if (!x->pc_iskey)
-		return x->pc_u.relation == y->pc_u.relation;
-
-	C2_ASSERT(/* allocated */ x->pc_u.key.cb_data != y->pc_u.key.cb_data);
-	return c2_conf_buf_eq(&x->pc_u.key, &y->pc_u.key);
-}
-
-static void test_pathcomp_dup(void)
-{
-	uint8_t s[] = "test";
-	const struct c2_conf_pathcomp src[] = {
-		C2_CONF_PATHCOMP_R(C2_CO_FILESYSTEM),
-		C2_CONF_PATHCOMP_R(C2_CO_SERVICE),
-		C2_CONF_PATHCOMP_K(C2_CONF_BUF_INIT(sizeof s, s))
-	};
-	struct c2_conf_pathcomp *dest;
-	size_t i;
-
-	dest = C2_ALLOC_ARR(src, ARRAY_SIZE(src));
-	C2_UT_ASSERT(dest != NULL);
-	for (i = 0; i < ARRAY_SIZE(src); ++i)
-		C2_UT_ASSERT(pathcomp_eq(dest + i, src + i));
-	c2_free(dest);
-}
-
-static void test_path_is_dir(void)
-{
-	size_t i;
-	struct c2_conf_path path;
-	struct c2_conf_obj  prof = { .co_type = C2_CO_PROFILE };
-	struct c2_conf_obj  fs   = { .co_type = C2_CO_FILESYSTEM };
-	struct c2_conf_obj  node = { .co_type = C2_CO_NODE };
-#define DUMMY_KEY  C2_CONF_BUF_INIT(0, NULL)
-	struct c2_conf_pathcomp comps[]    = {
-		/*0*/ C2_CONF_PATHCOMP_R(C2_CO_FILESYSTEM),
-		/*1*/ C2_CONF_PATHCOMP_R(C2_CO_SERVICE),
-		/*2*/ C2_CONF_PATHCOMP_K(DUMMY_KEY),
-		/*3*/ C2_CONF_PATHCOMP_R(C2_CO_NODE),
-		/*4*/ C2_CONF_PATHCOMP_R(C2_CO_SDEV),
-		/*5*/ C2_CONF_PATHCOMP_K(DUMMY_KEY),
-		/*6*/ C2_CONF_PATHCOMP_R(C2_CO_PARTITION),
-		/*7*/ C2_CONF_PATHCOMP_K(DUMMY_KEY)
-	};
-#undef DUMMY_KEY
-	const struct {
-		struct c2_conf_obj *path_origin;
-		size_t              comps_offset;
-		size_t              path_len;
-		bool                expected;
-	} tests[] = {
-		{ &prof, 0, 0, false }, /* [] */
-		{ NULL,  0, 0, false }, /* [] */
-		{ NULL,  0, 1, false }, /* [FILESYSTEM] */
-		{ &fs,   1, 1, true },  /* [SERVICE] */
-		{ &fs,   1, 2, false }, /* [SERVICE, "svc_0"] */
-		{ NULL,  0, 2, true },  /* [FILESYSTEM, SERVICE] */
-		{ &prof, 0, 3, false }, /* [FILESYSTEM, SERVICE, "svc_0"] */
-		{ &fs,   1, 3, false }, /* [SERVICE, "svc_0", NODE] */
-		{ &node, 4, 3, true },  /* [SDEV, "sd_1", PARTITION] */
-		{ &node, 4, 4, false }, /* [SDEV, "sd_1", PARTITION, "part"] */
-	};
-
-	for (i = 0; i < ARRAY_SIZE(tests); ++i) {
-		C2_ASSERT(tests[i].comps_offset + tests[i].path_len
-			  <= ARRAY_SIZE(comps));
-		path.p_origin = tests[i].path_origin;
-		path.p_len    = tests[i].path_len;
-		path.p_comps  = comps + tests[i].comps_offset;
-		C2_UT_ASSERT(c2_conf_path_is_dir(path) == tests[i].expected);
-	}
-}
-
-const struct c2_test_suite conf_path = {
-	.ts_name  = "conf-path-ut",
-	.ts_tests = {
-		{ "path_invariant", test_path_invariant },
-		{ "pathcomp_dup",   test_pathcomp_dup },
-		{ "path_is_dir",    test_path_is_dir },
-		{ NULL, NULL }
-	}
-};
diff --git a/conf/ut/relation.c b/conf/ut/relation.c
deleted file mode 100644
index a342472..0000000
--- a/conf/ut/relation.c
+++ /dev/null
@@ -1,87 +0,0 @@
-/* -*- c -*- */
-/*
- * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
- *
- * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
- * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
- * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
- * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
- * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
- * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
- * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
- *
- * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
- * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
- * http://www.xyratex.com/contact
- *
- * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
- * Original creation date: 08-Feb-2012
- */
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-#include "conf/relation.h"
-#include "lib/cdefs.h"     /* offsetof */
-
-static const struct c2_conf_relation * downlink(enum c2_conf_objtype src,
-						enum c2_conf_objtype tgt,
-						char *tested[C2_CO_NR])
-{
-	const struct c2_conf_relation *ret = c2_conf_downlink(src, tgt);
-	C2_UT_ASSERT(ret != NULL);
-	C2_UT_ASSERT(ret->r_type == tgt);
-	tested[src][tgt] = 1;
-	return ret;
-}
-
-static void test_downlinks(void)
-{
-	const struct c2_conf_relation *r;
-	enum c2_conf_objtype i;
-	enum c2_conf_objtype j;
-	char tested[C2_CO_NR][C2_CO_NR] = {0};
-
-	r = downlink(C2_CO_PROFILE, C2_CO_FILESYSTEM, tested);
-	C2_UT_ASSERT(r->r_offset == offsetof(struct c2_conf_profile,
-					     cp_filesystem));
-	C2_UT_ASSERT(r->r_dir == NULL);
-
-	r = downlink(C2_CO_FILESYSTEM, C2_CO_SERVICE, tested);
-	C2_UT_ASSERT(r->r_offset == offsetof(struct c2_conf_filesystem,
-					     cf_services));
-	C2_UT_ASSERT(r->r_dir == c2_conf_filesystem_services);
-
-	r = downlink(C2_CO_SERVICE, C2_CO_NODE, tested);
-	C2_UT_ASSERT(r->r_offset == offsetof(struct c2_conf_service, cs_node));
-	C2_UT_ASSERT(r->r_dir == NULL);
-
-	r = downlink(C2_CO_NODE, C2_CO_NIC, tested);
-	C2_UT_ASSERT(r->r_offset == offsetof(struct c2_conf_node, cn_nics));
-	C2_UT_ASSERT(r->r_dir == c2_conf_node_nics);
-	r = downlink(C2_CO_NODE, C2_CO_SDEV, tested);
-	C2_UT_ASSERT(r->r_offset == offsetof(struct c2_conf_node, cn_sdevs));
-	C2_UT_ASSERT(r->r_dir == c2_conf_node_sdevs);
-
-	r = downlink(C2_CO_SDEV, C2_CO_PARTITION, tested);
-	C2_UT_ASSERT(r->r_offset == offsetof(struct c2_conf_sdev,
-					     sd_partitions));
-	C2_UT_ASSERT(r->r_dir == c2_conf_sdev_partitions);
-
-	for (i = 0; i < C2_CO_NR; ++i) {
-		for (j = 0; j < C2_CO_NR; ++j) {
-			if (tested[i][j])
-				continue;
-			r = c2_conf_downlink(s, t);
-			C2_UT_ASSERT(r == NULL);
-		}
-	}
-}
-
-const struct c2_test_suite conf_path = {
-	.ts_name  = "conf-relation-ut",
-	.ts_tests = {
-		{ "downlinks", test_downlinks },
-		{ NULL, NULL }
-	}
-};
-- 
1.8.3.2


From 820102528144ace19d99967fd9ead6761532facd Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Thu, 27 Jun 2013 20:07:15 +0800
Subject: [PATCH 08/14] use fop/fom db transaction for poolmach_transit().

---
 ioservice/ut/bulkio_ut.c   |  7 +++-
 ioservice/ut/cob_foms.c    |  7 +++-
 m0t1fs/linux_kernel/dir.c  |  3 +-
 m0t1fs/linux_kernel/file.c |  2 +-
 pool/pool.c                | 21 ++++--------
 pool/pool.h                |  5 +--
 pool/pool_foms.c           |  3 +-
 pool/ut/test_pm.c          | 83 +++++++++++++++++++++++++---------------------
 sns/cm/cm.c                | 32 +++++++++++++-----
 9 files changed, 96 insertions(+), 67 deletions(-)

diff --git a/ioservice/ut/bulkio_ut.c b/ioservice/ut/bulkio_ut.c
index 2cb449a..63b264a 100644
--- a/ioservice/ut/bulkio_ut.c
+++ b/ioservice/ut/bulkio_ut.c
@@ -1634,6 +1634,7 @@ static void bulkio_server_read_write_fv_mismatch(void)
 	struct m0_fop		   *rfop;
 	struct m0_fop_cob_rw_reply *rw_reply;
 	int			    rc;
+	struct m0_db_tx             tx;
 
 	event.pe_type  = M0_POOL_DEVICE;
 	event.pe_index = 1;
@@ -1642,11 +1643,15 @@ static void bulkio_server_read_write_fv_mismatch(void)
 	reqh = m0_cs_reqh_get(&bp->bp_sctx->rsx_mero_ctx, "ioservice");
 	M0_UT_ASSERT(reqh != NULL);
 
+	rc = m0_db_tx_init(&tx, reqh->rh_dbenv, 0);
+	M0_UT_ASSERT(rc == 0);
+
 	pm = m0_ios_poolmach_get(reqh);
 	M0_UT_ASSERT(pm != NULL);
 
-	rc = m0_poolmach_state_transit(pm, &event);
+	rc = m0_poolmach_state_transit(pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
+	m0_db_tx_commit(&tx);
 
 	/* This is just a test to detect failure vector mismatch on server
 	 * side. No need to prepare a full write request, e.g. buffer.
diff --git a/ioservice/ut/cob_foms.c b/ioservice/ut/cob_foms.c
index f6c1df7..37081a5 100644
--- a/ioservice/ut/cob_foms.c
+++ b/ioservice/ut/cob_foms.c
@@ -1142,6 +1142,7 @@ static void cobfoms_fv_updates(void)
 	struct m0_reqh      *reqh;
 	struct m0_poolmach  *pm;
 	struct m0_pool_event event;
+	struct m0_db_tx      tx;
 	int rc;
 
 	event.pe_type  = M0_POOL_DEVICE;
@@ -1151,11 +1152,15 @@ static void cobfoms_fv_updates(void)
 	reqh = m0_cs_reqh_get(&cut->cu_sctx.rsx_mero_ctx, "ioservice");
 	M0_UT_ASSERT(reqh != NULL);
 
+	rc = m0_db_tx_init(&tx, reqh->rh_dbenv, 0);
+	M0_UT_ASSERT(rc == 0);
+
 	pm = m0_ios_poolmach_get(reqh);
 	M0_UT_ASSERT(pm != NULL);
 
-	rc = m0_poolmach_state_transit(pm, &event);
+	rc = m0_poolmach_state_transit(pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
+	m0_db_tx_commit(&tx);
 
 	cobfoms_send_internal(&m0_fop_cob_create_fopt, &m0_fop_cob_delete_fopt,
 			      M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH,
diff --git a/m0t1fs/linux_kernel/dir.c b/m0t1fs/linux_kernel/dir.c
index e2135f0..1fef483 100644
--- a/m0t1fs/linux_kernel/dir.c
+++ b/m0t1fs/linux_kernel/dir.c
@@ -1532,7 +1532,8 @@ static int m0t1fs_ios_cob_op(struct m0t1fs_sb    *csb,
 		while (i < reply->cor_fv_updates.fvu_count) {
 			event = &reply->cor_fv_updates.fvu_events[i];
 			m0_poolmach_state_transit(csb->csb_pool.po_mach,
-						  (struct m0_pool_event*)event);
+						  (struct m0_pool_event*)event,
+						  NULL);
 			i++;
 		}
 	} else
diff --git a/m0t1fs/linux_kernel/file.c b/m0t1fs/linux_kernel/file.c
index 9cec012..cf7f5f7 100644
--- a/m0t1fs/linux_kernel/file.c
+++ b/m0t1fs/linux_kernel/file.c
@@ -4506,7 +4506,7 @@ static void failure_vector_mismatch(struct io_req_fop *irfop)
 	while (i < reply_updates->fvu_count) {
 		event = (struct m0_pool_event*)&reply_updates->fvu_events[i];
 		m0_poolmach_event_dump(event);
-		m0_poolmach_state_transit(csb->csb_pool.po_mach, event);
+		m0_poolmach_state_transit(csb->csb_pool.po_mach, event, NULL);
 		i++;
 	}
 	M0_LOG(M0_DEBUG, "<<<VERSION MISMATCH!");
diff --git a/pool/pool.c b/pool/pool.c
index ba6c420..aa49ac1 100644
--- a/pool/pool.c
+++ b/pool/pool.c
@@ -386,15 +386,15 @@ M0_INTERNAL void m0_poolmach_fini(struct m0_poolmach *pm)
  *       |                                            v
  *       +------------------<-------------------------+
  */
-M0_INTERNAL int m0_poolmach_state_transit(struct m0_poolmach *pm,
-					  struct m0_pool_event *event)
+M0_INTERNAL int m0_poolmach_state_transit(struct m0_poolmach   *pm,
+					  struct m0_pool_event *event,
+					  struct m0_db_tx      *tx)
 {
 	struct m0_poolmach_state   *pm_state;
 	struct m0_pool_spare_usage *spare_array;
 	struct m0_pool_event_link  *event_link;
 	enum m0_pool_nd_state       old_state = M0_PNDS_FAILED;
 	int                         rc = 0;
-	struct m0_db_tx             local_tx;
 	int                         i;
 
 	M0_PRE(pm != NULL);
@@ -548,17 +548,10 @@ M0_INTERNAL int m0_poolmach_state_transit(struct m0_poolmach *pm,
 
 	if (pm->pm_dbenv != NULL) {
 		/* This poolmach is on server. Update to persistent storage. */
-		rc = m0_db_tx_init(&local_tx, pm->pm_dbenv, 0);
-		if (rc == 0) {
-			rc = m0_poolmach_store(pm, &local_tx);
-			if (rc == 0)
-				rc = m0_poolmach_event_store(pm, &local_tx,
-							     event_link);
-			if (rc == 0)
-				rc = m0_db_tx_commit(&local_tx);
-			else
-				m0_db_tx_abort(&local_tx);
-		}
+		M0_ASSERT(tx != NULL);
+		rc = m0_poolmach_store(pm, tx);
+		if (rc == 0)
+			rc = m0_poolmach_event_store(pm, tx, event_link);
 	}
 
 out_unlock:
diff --git a/pool/pool.h b/pool/pool.h
index d1e8c91..07c3b8e 100644
--- a/pool/pool.h
+++ b/pool/pool.h
@@ -356,8 +356,9 @@ M0_INTERNAL void m0_poolmach_fini(struct m0_poolmach *pm);
  *        will be copied into pool machine state, and it can
  *        be used or released by caller after call.
  */
-M0_INTERNAL int m0_poolmach_state_transit(struct m0_poolmach *pm,
-					  struct m0_pool_event *event);
+M0_INTERNAL int m0_poolmach_state_transit(struct m0_poolmach   *pm,
+					  struct m0_pool_event *event,
+					  struct m0_db_tx      *tx);
 
 /**
  * Query the state changes between the "from" and "to" version.
diff --git a/pool/pool_foms.c b/pool/pool_foms.c
index 7d97519..865a41f 100644
--- a/pool/pool_foms.c
+++ b/pool/pool_foms.c
@@ -124,7 +124,8 @@ static int poolmach_fom_tick(struct m0_fom *fom)
 		pme.pe_type  = set_fop->fps_type;
 		pme.pe_index = set_fop->fps_index;
 		pme.pe_state = set_fop->fps_state;
-		set_fop_rep->fps_rc = m0_poolmach_state_transit(poolmach, &pme);
+		set_fop_rep->fps_rc = m0_poolmach_state_transit(poolmach, &pme,
+							&fom->fo_tx.tx_dbtx);
 		break;
 	}
 	default:
diff --git a/pool/ut/test_pm.c b/pool/ut/test_pm.c
index b5a9a07..2fd10b2 100644
--- a/pool/ut/test_pm.c
+++ b/pool/ut/test_pm.c
@@ -30,7 +30,8 @@ enum {
 	PM_TEST_DEFAULT_MAX_DEVICE_FAILURE = 1,
 	PM_TEST_DEFAULT_MAX_NODE_FAILURE   = 1
 };
-static struct m0_dbenv           dbenv;
+static struct m0_dbenv dbenv;
+static struct m0_db_tx tx;
 
 static void pm_test_init_fini(void)
 {
@@ -67,6 +68,8 @@ static void pm_test_transit(void)
 
 	rc = m0_dbenv_init(&dbenv, "pm_test_transit", 0);
 	M0_ASSERT(rc == 0);
+	rc = m0_db_tx_init(&tx, &dbenv, 0);
+	M0_UT_ASSERT(rc == 0);
 	M0_SET0(&pm);
 	rc = m0_poolmach_init(&pm, &dbenv, NULL, PM_TEST_DEFAULT_NODE_NUMBER,
 					 PM_TEST_DEFAULT_DEVICE_NUMBER,
@@ -89,13 +92,13 @@ static void pm_test_transit(void)
 	events[0].pe_type  = M0_POOL_DEVICE;
 	events[0].pe_index = 1;
 	events[0].pe_state = M0_PNDS_FAILED;
-	rc = m0_poolmach_state_transit(&pm, &events[0]);
+	rc = m0_poolmach_state_transit(&pm, &events[0], &tx);
 	M0_UT_ASSERT(rc == 0);
 
 	events[1].pe_type  = M0_POOL_DEVICE;
 	events[1].pe_index = 3;
 	events[1].pe_state = M0_PNDS_OFFLINE;
-	rc = m0_poolmach_state_transit(&pm, &events[1]);
+	rc = m0_poolmach_state_transit(&pm, &events[1], &tx);
 	M0_UT_ASSERT(rc == 0);
 
 	rc = m0_poolmach_current_version_get(&pm, &v1);
@@ -104,13 +107,13 @@ static void pm_test_transit(void)
 	events[2].pe_type  = M0_POOL_DEVICE;
 	events[2].pe_index = 3;
 	events[2].pe_state = M0_PNDS_ONLINE;
-	rc = m0_poolmach_state_transit(&pm, &events[2]);
+	rc = m0_poolmach_state_transit(&pm, &events[2], &tx);
 	M0_UT_ASSERT(rc == 0);
 
 	events[3].pe_type  = M0_POOL_NODE;
 	events[3].pe_index = 0;
 	events[3].pe_state = M0_PNDS_OFFLINE;
-	rc = m0_poolmach_state_transit(&pm, &events[3]);
+	rc = m0_poolmach_state_transit(&pm, &events[3], &tx);
 	M0_UT_ASSERT(rc == 0);
 
 	rc = m0_poolmach_current_version_get(&pm, &v2);
@@ -326,32 +329,33 @@ static void pm_test_transit(void)
 	e_invalid.pe_type  = M0_POOL_NODE + 5;
 	e_invalid.pe_index = 0;
 	e_invalid.pe_state = M0_PNDS_OFFLINE;
-	rc = m0_poolmach_state_transit(&pm, &e_invalid);
+	rc = m0_poolmach_state_transit(&pm, &e_invalid, &tx);
 	M0_UT_ASSERT(rc == -EINVAL);
 
 	/* invalid event. case 2: invalid index */
 	e_invalid.pe_type  = M0_POOL_NODE;
 	e_invalid.pe_index = 100;
 	e_invalid.pe_state = M0_PNDS_OFFLINE;
-	rc = m0_poolmach_state_transit(&pm, &e_invalid);
+	rc = m0_poolmach_state_transit(&pm, &e_invalid, &tx);
 	M0_UT_ASSERT(rc == -EINVAL);
 
 	/* invalid event. case 3: invalid state */
 	e_invalid.pe_type  = M0_POOL_NODE;
 	e_invalid.pe_index = 0;
 	e_invalid.pe_state = M0_PNDS_SNS_REBALANCED + 1;
-	rc = m0_poolmach_state_transit(&pm, &e_invalid);
+	rc = m0_poolmach_state_transit(&pm, &e_invalid, &tx);
 	M0_UT_ASSERT(rc == -EINVAL);
 
 	/* invalid event. case 4: invalid state */
 	e_invalid.pe_type  = M0_POOL_DEVICE;
 	e_invalid.pe_index = 0;
 	e_invalid.pe_state = M0_PNDS_NR;
-	rc = m0_poolmach_state_transit(&pm, &e_invalid);
+	rc = m0_poolmach_state_transit(&pm, &e_invalid, &tx);
 	M0_UT_ASSERT(rc == -EINVAL);
 
 	/* finally */
 	m0_poolmach_fini(&pm);
+	m0_db_tx_commit(&tx);
 	m0_dbenv_fini(&dbenv);
 }
 
@@ -367,6 +371,8 @@ static void pm_test_spare_slot(void)
 
 	rc = m0_dbenv_init(&dbenv, "pm_test_spare_slot", 0);
 	M0_ASSERT(rc == 0);
+	rc = m0_db_tx_init(&tx, &dbenv, 0);
+	M0_UT_ASSERT(rc == 0);
 	M0_SET0(&pm);
 	rc = m0_poolmach_init(&pm, &dbenv, NULL, PM_TEST_DEFAULT_NODE_NUMBER,
 					 PM_TEST_DEFAULT_DEVICE_NUMBER,
@@ -381,7 +387,7 @@ static void pm_test_spare_slot(void)
 	/* FAILED */
 	target_state = M0_PNDS_FAILED;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_device_state(&pm, 1, &state_out);
 	M0_UT_ASSERT(rc == 0);
@@ -401,7 +407,7 @@ static void pm_test_spare_slot(void)
 			continue;
 		/* transit to other state other than the above one is invalid */
 		event.pe_state = state;
-		rc = m0_poolmach_state_transit(&pm, &event);
+		rc = m0_poolmach_state_transit(&pm, &event, &tx);
 		M0_UT_ASSERT(rc == -EINVAL);
 	}
 
@@ -413,7 +419,7 @@ static void pm_test_spare_slot(void)
 	/* transit to SNS_REPAIRING */
 	target_state = M0_PNDS_SNS_REPAIRING;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_device_state(&pm, 1, &state_out);
 	M0_UT_ASSERT(rc == 0);
@@ -430,7 +436,7 @@ static void pm_test_spare_slot(void)
 			continue;
 		/* transit to other state other than the above one is invalid */
 		event.pe_state = state;
-		rc = m0_poolmach_state_transit(&pm, &event);
+		rc = m0_poolmach_state_transit(&pm, &event, &tx);
 		M0_UT_ASSERT(rc == -EINVAL);
 	}
 
@@ -438,7 +444,7 @@ static void pm_test_spare_slot(void)
 	/* transit to SNS_REPAIRED */
 	target_state = M0_PNDS_SNS_REPAIRED;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_device_state(&pm, 1, &state_out);
 	M0_UT_ASSERT(rc == 0);
@@ -455,7 +461,7 @@ static void pm_test_spare_slot(void)
 			continue;
 		/* transit to other state other than the above one is invalid */
 		event.pe_state = state;
-		rc = m0_poolmach_state_transit(&pm, &event);
+		rc = m0_poolmach_state_transit(&pm, &event, &tx);
 		M0_UT_ASSERT(rc == -EINVAL);
 	}
 
@@ -463,7 +469,7 @@ static void pm_test_spare_slot(void)
 	/* transit to SNS_REBALANCING */
 	target_state = M0_PNDS_SNS_REBALANCING;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_device_state(&pm, 1, &state_out);
 	M0_UT_ASSERT(rc == 0);
@@ -477,7 +483,7 @@ static void pm_test_spare_slot(void)
 			continue;
 		/* transit to other state other than the above one is invalid */
 		event.pe_state = state;
-		rc = m0_poolmach_state_transit(&pm, &event);
+		rc = m0_poolmach_state_transit(&pm, &event, &tx);
 		M0_UT_ASSERT(rc == -EINVAL);
 	}
 
@@ -485,7 +491,7 @@ static void pm_test_spare_slot(void)
 	/* transit to SNS_REBALANCED */
 	target_state = M0_PNDS_SNS_REBALANCED;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_device_state(&pm, 1, &state_out);
 	M0_UT_ASSERT(rc == 0);
@@ -499,14 +505,14 @@ static void pm_test_spare_slot(void)
 			continue;
 		/* transit to other state other than the above one is invalid */
 		event.pe_state = state;
-		rc = m0_poolmach_state_transit(&pm, &event);
+		rc = m0_poolmach_state_transit(&pm, &event, &tx);
 		M0_UT_ASSERT(rc == -EINVAL);
 	}
 
 	/* transit to ONLINE */
 	target_state = M0_PNDS_ONLINE;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_device_state(&pm, 1, &state_out);
 	M0_UT_ASSERT(rc == 0);
@@ -517,6 +523,7 @@ static void pm_test_spare_slot(void)
 
 	/* finally */
 	m0_poolmach_fini(&pm);
+	m0_db_tx_commit(&tx);
 	m0_dbenv_fini(&dbenv);
 }
 
@@ -531,6 +538,8 @@ static void pm_test_multi_fail(void)
 
 	rc = m0_dbenv_init(&dbenv, "pm_test_multi_fail", 0);
 	M0_ASSERT(rc == 0);
+	rc = m0_db_tx_init(&tx, &dbenv, 0);
+	M0_UT_ASSERT(rc == 0);
 	M0_SET0(&pm);
 	rc = m0_poolmach_init(&pm, &dbenv, NULL, PM_TEST_DEFAULT_NODE_NUMBER,
 					 PM_TEST_DEFAULT_DEVICE_NUMBER,
@@ -545,7 +554,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 1;
 	target_state = M0_PNDS_FAILED;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_device_state(&pm, 1, &state_out);
 	M0_UT_ASSERT(rc == 0);
@@ -555,7 +564,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 2;
 	target_state = M0_PNDS_FAILED;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_device_state(&pm, 2, &state_out);
 	M0_UT_ASSERT(rc == 0);
@@ -565,7 +574,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 1;
 	target_state = M0_PNDS_SNS_REPAIRING;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	/* the first spare slot is used by device 1 */
 	rc = m0_poolmach_sns_repair_spare_query(&pm, 1, &spare_slot);
@@ -576,7 +585,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 2;
 	target_state = M0_PNDS_SNS_REPAIRING;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	/* the second spare slot is used by device 2 */
 	rc = m0_poolmach_sns_repair_spare_query(&pm, 2, &spare_slot);
@@ -588,7 +597,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 1;
 	target_state = M0_PNDS_SNS_REPAIRED;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	/* the first spare slot is used by device 1 */
 	rc = m0_poolmach_sns_repair_spare_query(&pm, 1, &spare_slot);
@@ -599,7 +608,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 2;
 	target_state = M0_PNDS_SNS_REPAIRED;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	/* the second spare slot is used by device 2 */
 	rc = m0_poolmach_sns_repair_spare_query(&pm, 2, &spare_slot);
@@ -611,7 +620,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 1;
 	target_state = M0_PNDS_SNS_REBALANCING;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	/* the first spare slot is used by device 1 */
 	rc = m0_poolmach_sns_rebalance_spare_query(&pm, 1, &spare_slot);
@@ -622,7 +631,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 2;
 	target_state = M0_PNDS_SNS_REBALANCING;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	/* the second spare slot is used by device 2 */
 	rc = m0_poolmach_sns_rebalance_spare_query(&pm, 2, &spare_slot);
@@ -634,7 +643,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 1;
 	target_state = M0_PNDS_SNS_REBALANCED;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	/* the first spare slot is used by device 1 */
 	rc = m0_poolmach_sns_rebalance_spare_query(&pm, 1, &spare_slot);
@@ -645,7 +654,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 2;
 	target_state = M0_PNDS_SNS_REBALANCED;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	/* the second spare slot is used by device 2 */
 	rc = m0_poolmach_sns_rebalance_spare_query(&pm, 2, &spare_slot);
@@ -656,7 +665,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 2;
 	target_state = M0_PNDS_ONLINE;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_sns_repair_spare_query(&pm, 2, &spare_slot);
 	M0_UT_ASSERT(rc == -ENOENT);
@@ -665,11 +674,11 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 3;
 	target_state = M0_PNDS_FAILED;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	target_state = M0_PNDS_SNS_REPAIRING;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_sns_repair_spare_query(&pm, 3, &spare_slot);
 	M0_UT_ASSERT(rc == 0);
@@ -679,7 +688,7 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 1;
 	target_state = M0_PNDS_ONLINE;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_sns_repair_spare_query(&pm, 1, &spare_slot);
 	M0_UT_ASSERT(rc == -ENOENT);
@@ -688,19 +697,19 @@ static void pm_test_multi_fail(void)
 	event.pe_index = 4;
 	target_state = M0_PNDS_FAILED;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	target_state = M0_PNDS_SNS_REPAIRING;
 	event.pe_state = target_state;
-	rc = m0_poolmach_state_transit(&pm, &event);
+	rc = m0_poolmach_state_transit(&pm, &event, &tx);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_poolmach_sns_repair_spare_query(&pm, 4, &spare_slot);
 	M0_UT_ASSERT(rc == 0);
 	M0_UT_ASSERT(spare_slot == 0);
 
-
 	/* finally */
 	m0_poolmach_fini(&pm);
+	m0_db_tx_commit(&tx);
 	m0_dbenv_fini(&dbenv);
 }
 
diff --git a/sns/cm/cm.c b/sns/cm/cm.c
index 3b5a009..f1071e4 100644
--- a/sns/cm/cm.c
+++ b/sns/cm/cm.c
@@ -526,19 +526,31 @@ M0_INTERNAL size_t m0_sns_cm_buffer_pool_provision(struct m0_net_buffer_pool *bp
 	return bnr;
 }
 
-static int pm_event_setup_and_post(struct m0_poolmach *pm,
+static int pm_event_setup_and_post(struct m0_dbenv *dbenv,
+				   struct m0_poolmach *pm,
 	                           enum m0_pool_event_owner_type et,
 	                           uint32_t oid,
 	                           enum m0_pool_nd_state state)
 {
 	struct m0_pool_event pme;
+	struct m0_db_tx      tx;
+	int                  rc;
+
+	rc = m0_db_tx_init(&tx, dbenv, 0);
+	if (rc != 0)
+		return rc;
 
 	M0_SET0(&pme);
 	pme.pe_type  = et;
 	pme.pe_index = oid;
 	pme.pe_state = state;
+	rc = m0_poolmach_state_transit(pm, &pme, &tx);
 
-	return m0_poolmach_state_transit(pm, &pme);
+	if (rc == 0)
+		m0_db_tx_commit(&tx);
+	else
+		m0_db_tx_abort(&tx);
+	return rc;
 }
 
 static int pm_state(struct m0_sns_cm *scm)
@@ -550,6 +562,7 @@ static int pm_state(struct m0_sns_cm *scm)
 static int cm_ready(struct m0_cm *cm)
 {
 	struct m0_sns_cm      *scm = cm2sns(cm);
+	struct m0_dbenv       *dbenv = scm->sc_it.si_dbenv;
 	int                    bufs_nr;
 	int                    rc = 0;
 	int                    i;
@@ -582,7 +595,8 @@ static int cm_ready(struct m0_cm *cm)
 		 */
 		scm->sc_failures_nr = 1;
 		for (i = 0; i < scm->sc_failures_nr; ++i) {
-			rc = pm_event_setup_and_post(cm->cm_pm, M0_POOL_DEVICE,
+			rc = pm_event_setup_and_post(dbenv, cm->cm_pm,
+						     M0_POOL_DEVICE,
 						     scm->sc_it.si_fdata[i],
 						     M0_PNDS_FAILED);
 			if (rc != 0)
@@ -597,6 +611,7 @@ static int cm_ready(struct m0_cm *cm)
 static int cm_start(struct m0_cm *cm)
 {
 	struct m0_sns_cm      *scm = cm2sns(cm);
+	struct m0_dbenv       *dbenv = scm->sc_it.si_dbenv;
 	enum m0_pool_nd_state  state;
 	int                    rc;
 	int                    i;
@@ -607,7 +622,8 @@ static int cm_start(struct m0_cm *cm)
 	state = pm_state(scm);
 	//m0_cm_continue(cm);
 	for (i = 0; i < scm->sc_failures_nr; ++i) {
-		rc = pm_event_setup_and_post(cm->cm_pm, M0_POOL_DEVICE,
+		rc = pm_event_setup_and_post(dbenv, cm->cm_pm,
+					     M0_POOL_DEVICE,
 					     scm->sc_it.si_fdata[i],
 					     state);
 	}
@@ -620,19 +636,17 @@ static int cm_start(struct m0_cm *cm)
 
 static int cm_stop(struct m0_cm *cm)
 {
-	struct m0_sns_cm      *scm;
+	struct m0_sns_cm      *scm = cm2sns(cm);;
+	struct m0_dbenv       *dbenv = scm->sc_it.si_dbenv;
 	enum m0_pool_nd_state  pm_state;
 	int                    i;
 
-	M0_PRE(cm != NULL);
-
-	scm = cm2sns(cm);
 	M0_ASSERT(M0_IN(scm->sc_op, (SNS_REPAIR, SNS_REBALANCE)));
 	pm_state = scm->sc_op == SNS_REPAIR ? M0_PNDS_SNS_REPAIRED :
 					      M0_PNDS_SNS_REBALANCED;
 	m0_sns_cm_iter_stop(&scm->sc_it);
 	for (i = 0; i < scm->sc_failures_nr; ++i) {
-		pm_event_setup_and_post(cm->cm_pm, M0_POOL_DEVICE,
+		pm_event_setup_and_post(dbenv, cm->cm_pm, M0_POOL_DEVICE,
 					scm->sc_it.si_fdata[i], pm_state);
 	}
 
-- 
1.8.3.2


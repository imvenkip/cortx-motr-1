From 0a657df59fd708c2f81f0eca704fa4dfa6127d1a Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Wed, 19 Jun 2013 20:09:58 +0800
Subject: [PATCH 01/14] initial commit for sns-ha: added a utilility to query
 and set device/node status from pool machine.

---
 Makefile.am            |   8 +++
 ioservice/io_service.c |   9 ++-
 pool/Makefile.sub      |  15 +++-
 pool/pool_foms.c       | 186 +++++++++++++++++++++++++++++++++++++++++++++++++
 pool/pool_foms.h       |  39 +++++++++++
 pool/pool_fops.c       |  98 ++++++++++++++++++++++++++
 pool/pool_fops.h       |  67 ++++++++++++++++++
 rpc/rpc_opcodes.h      |   6 ++
 8 files changed, 425 insertions(+), 3 deletions(-)
 create mode 100644 pool/pool_foms.c
 create mode 100644 pool/pool_foms.h
 create mode 100644 pool/pool_fops.c
 create mode 100644 pool/pool_fops.h

diff --git a/Makefile.am b/Makefile.am
index 2c5ab7d..793e23f 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -613,6 +613,14 @@ console_bin_m0console_LDADD     = $(top_builddir)/mero/libmero.la
 include $(top_srcdir)/console/bin/Makefile.sub
 
 #
+# pool
+#
+
+bin_PROGRAMS             += pool/m0poolmach
+pool_m0poolmach_CPPFLAGS  = -DM0_TARGET='m0poolmach' $(AM_CPPFLAGS)
+pool_m0poolmach_LDADD     = $(top_builddir)/mero/libmero.la
+
+#
 # addb/dump
 #
 
diff --git a/ioservice/io_service.c b/ioservice/io_service.c
index 07e5338..2efc83c 100644
--- a/ioservice/io_service.c
+++ b/ioservice/io_service.c
@@ -171,6 +171,8 @@ static struct m0_addb_rec_type *ios_rwfom_cntr_rts[] = {
 	&m0_addb_rt_ios_wfom_times,
 };
 
+M0_INTERNAL void m0_poolmach_fop_fini(void);
+M0_INTERNAL int m0_poolmach_fop_init(void);
 /**
  * Registers I/O service with mero node.
  * Mero setup calls this function.
@@ -178,6 +180,7 @@ static struct m0_addb_rec_type *ios_rwfom_cntr_rts[] = {
 M0_INTERNAL int m0_ios_register(void)
 {
 	int i;
+	int rc;
 
 	/* The onwire version-number structure is declared as a struct,
 	 * not a sequence (which is more like an array.
@@ -207,7 +210,10 @@ M0_INTERNAL int m0_ios_register(void)
 	ios_cdom_key = m0_reqh_lockers_allot();
 	poolmach_key = m0_reqh_lockers_allot();
 	ios_mds_conn_key = m0_reqh_lockers_allot();
-	return m0_ioservice_fop_init();
+	rc = m0_ioservice_fop_init();
+	if (rc == 0)
+		rc = m0_poolmach_fop_init();
+	return rc;
 }
 
 /**
@@ -217,6 +223,7 @@ M0_INTERNAL void m0_ios_unregister(void)
 {
 	m0_reqh_service_type_unregister(&m0_ios_type);
 	m0_ioservice_fop_fini();
+	m0_poolmach_fop_fini();
 }
 
 M0_INTERNAL bool m0_reqh_io_service_invariant(const struct m0_reqh_io_service
diff --git a/pool/Makefile.sub b/pool/Makefile.sub
index 63ff458..7fe101f 100644
--- a/pool/Makefile.sub
+++ b/pool/Makefile.sub
@@ -1,4 +1,15 @@
-nobase_mero_include_HEADERS += pool/pool.h
+nobase_mero_include_HEADERS += pool/pool.h pool/pool_fops.h pool/pool_foms.h pool/pool_fops_xc.h
 
 mero_libmero_la_SOURCES  += pool/pool.c \
-			    pool/pool_store.c
+			    pool/pool_store.c \
+			    pool/pool_fops_xc.c \
+			    pool/pool_fops.c \
+			    pool/pool_foms.c
+
+pool_m0poolmach_SOURCES  = pool/pool_trigger.c
+
+XC_FILES   += pool/pool_fops_xc.h
+
+CLEANFILES += pool/pool_fops_xc.h \
+              pool/pool_fops_xc.c \
+              pool/pool_fops.gccxml
diff --git a/pool/pool_foms.c b/pool/pool_foms.c
new file mode 100644
index 0000000..75eb583
--- /dev/null
+++ b/pool/pool_foms.c
@@ -0,0 +1,186 @@
+/*
+ * COPYRIGHT 2013 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Huang Hua <Hua_Huang@xyratex.com>
+ * Original creation date: 06/19/2013
+ */
+
+#define M0_TRACE_SUBSYSTEM M0_TRACE_SUBSYS_POOL
+#include "lib/trace.h"
+#include "lib/errno.h"
+#include "lib/memory.h"
+#include "lib/assert.h"
+#include "lib/misc.h"    /* M0_BITS */
+#include "addb/addb.h"
+#include "fop/fop.h"
+#include "fop/fom_generic.h"
+#include "reqh/reqh_service.h"
+#include "pool/pool.h"
+#include "pool/pool_foms.h"
+#include "pool/pool_fops.h"
+#include "ioservice/io_device.h"
+
+static const struct m0_fom_ops poolmach_ops;
+
+static int poolmach_fom_create(struct m0_fop *fop, struct m0_fom **out,
+				  struct m0_reqh *reqh)
+{
+	struct m0_fop *rep_fop;
+	struct m0_fom *fom;
+	int            rc = 0;
+	M0_PRE(fop != NULL);
+	M0_PRE(out != NULL);
+
+	M0_ALLOC_PTR(fom);
+	if (fom == NULL)
+		return -ENOMEM;
+
+	if (fop->f_type == &m0_fop_poolmach_query_fopt) {
+		rep_fop = m0_fop_alloc(&m0_fop_poolmach_query_rep_fopt, NULL);
+		M0_LOG(M0_DEBUG, "create Query fop");
+	} else {
+		rep_fop = m0_fop_alloc(&m0_fop_poolmach_set_rep_fopt, NULL);
+		M0_LOG(M0_DEBUG, "create set fop");
+	}
+	if (rep_fop == NULL) {
+		m0_free(fom);
+		return -ENOMEM;
+	}
+
+	m0_fom_init(fom, &fop->f_type->ft_fom_type, &poolmach_ops, fop, rep_fop,
+		    reqh, fop->f_type->ft_fom_type.ft_rstype);
+	m0_fop_put(rep_fop);
+	*out = fom;
+
+        return rc;
+}
+
+static int poolmach_fom_tick(struct m0_fom *fom)
+{
+	struct m0_fop      *req_fop;
+	struct m0_fop      *rep_fop;
+	struct m0_poolmach *poolmach;
+	struct m0_reqh      *reqh;
+
+	/* first handle generic phase */
+        if (m0_fom_phase(fom) < M0_FOPH_NR)
+                return m0_fom_tick_generic(fom);
+
+	reqh = m0_fom_reqh(fom);
+	poolmach = m0_ios_poolmach_get(reqh);
+	req_fop = fom->fo_fop;
+	rep_fop = fom->fo_rep_fop;
+
+	if (req_fop->f_type == &m0_fop_poolmach_query_fopt) {
+		struct m0_fop_poolmach_query     *query_fop;
+		struct m0_fop_poolmach_query_rep *query_fop_rep;
+
+		query_fop = m0_fop_data(req_fop);
+		query_fop_rep = m0_fop_data(rep_fop);
+		M0_LOG(M0_FATAL, "Query type=%lu, index=%lu",
+				 (unsigned long)query_fop->fpq_type,
+				 (unsigned long)query_fop->fpq_index);
+
+		//query_fop_rep->fpq_rc    = 123;
+		//query_fop_rep->fpq_state = 456;
+
+		query_fop_rep->fpq_rc =
+			m0_poolmach_device_state(poolmach,
+						 query_fop->fpq_index,
+						 &query_fop_rep->fpq_state);
+	} else {
+		struct m0_fop_poolmach_set     *set_fop;
+		struct m0_fop_poolmach_set_rep *set_fop_rep;
+		struct m0_pool_event            pme;
+
+		set_fop = m0_fop_data(req_fop);
+		set_fop_rep = m0_fop_data(rep_fop);
+		M0_LOG(M0_FATAL, "Set type=%lu, index=%lu, state=%lu",
+				 (unsigned long)set_fop->fps_type,
+				 (unsigned long)set_fop->fps_index,
+				 (unsigned long)set_fop->fps_state);
+
+		//set_fop_rep->fps_rc = 789;
+		M0_SET0(&pme);
+		pme.pe_type  = set_fop->fps_type;
+		pme.pe_index = set_fop->fps_index;
+		pme.pe_state = set_fop->fps_state;
+		set_fop_rep->fps_rc = m0_poolmach_state_transit(poolmach, &pme);
+	}
+
+	m0_fom_phase_move(fom, 0, M0_FOPH_SUCCESS);
+	return M0_FSO_AGAIN;
+}
+
+static size_t poolmach_fom_home_locality(const struct m0_fom *fom)
+{
+	M0_PRE(fom != NULL);
+
+	return m0_fop_opcode(fom->fo_fop);
+}
+
+static void poolmach_fom_addb_init(struct m0_fom * fom, struct m0_addb_mc *mc)
+{
+	fom->fo_addb_ctx.ac_magic = M0_ADDB_CTX_MAGIC;
+}
+
+static void poolmach_fom_fini(struct m0_fom *fom)
+{
+	m0_fom_fini(fom);
+	m0_free(fom);
+}
+
+/**
+ * I/O FOM operation vector.
+ */
+static const struct m0_fom_ops poolmach_ops = {
+	.fo_fini          = poolmach_fom_fini,
+	.fo_tick          = poolmach_fom_tick,
+	.fo_home_locality = poolmach_fom_home_locality,
+	.fo_addb_init     = poolmach_fom_addb_init
+};
+
+/**
+ * I/O FOM type operation vector.
+ */
+const struct m0_fom_type_ops poolmach_fom_type_ops = {
+	.fto_create = poolmach_fom_create,
+};
+
+struct m0_sm_state_descr poolmach_phases[] = {
+	[M0_FOPH_POOLMACH_FOM_EXEC] = {
+		.sd_name      = "Pool Machine query/set",
+		.sd_allowed   = M0_BITS(M0_FOPH_SUCCESS,
+					M0_FOPH_FAILURE)
+	},
+};
+
+struct m0_sm_conf poolmach_conf = {
+	.scf_name      = "poolmach phases",
+	.scf_nr_states = ARRAY_SIZE(poolmach_phases),
+	.scf_state     = poolmach_phases
+};
+
+#undef M0_TRACE_SUBSYSTEM
+
+/*
+ *  Local variables:
+ *  c-indentation-style: "K&R"
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ *  fill-column: 80
+ *  scroll-step: 1
+ *  End:
+ */
diff --git a/pool/pool_foms.h b/pool/pool_foms.h
new file mode 100644
index 0000000..92270d1
--- /dev/null
+++ b/pool/pool_foms.h
@@ -0,0 +1,39 @@
+/* -*- C -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Huang Hua <Hua_Huang@xyratex.com>
+ * Original creation date: 06/19/2013
+ */
+
+#pragma once
+
+#ifndef __MERO_POOL_POOL_FOMS_H__
+#define __MERO_POOL_POOL_FOMS_H__
+
+enum m0_poolmach_fom_phases {
+        M0_FOPH_POOLMACH_FOM_EXEC = M0_FOPH_NR + 1,
+};
+
+#endif /* __MERO_POOL_POOL_FOMS_H__ */
+ /*
+ *  Local variables:
+ *  c-indentation-style: "K&R"
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ *  fill-column: 80
+ *  scroll-step: 1
+ *  End:
+ */
diff --git a/pool/pool_fops.c b/pool/pool_fops.c
new file mode 100644
index 0000000..1f4d7d2
--- /dev/null
+++ b/pool/pool_fops.c
@@ -0,0 +1,98 @@
+/* -*- C -*- */
+/*
+ * COPYRIGHT 2013 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Huang Hua <Hua_Huang@xyratex.com>
+ * Original creation date: 06/19/2013
+ */
+
+
+#include "lib/errno.h"
+#include "lib/memory.h"
+#include "lib/misc.h"	/* M0_IN */
+#define M0_TRACE_SUBSYSTEM M0_TRACE_SUBSYS_POOL
+#include "lib/trace.h"
+#include "fop/fop.h"
+#include "fop/fop_item_type.h"
+#include "fop/fom_generic.h"
+#include "rpc/item.h"
+#include "rpc/rpc_opcodes.h"
+#include "rpc/rpc.h"
+#include "pool/pool_fops_xc.h"
+
+struct m0_fop_type m0_fop_poolmach_query_fopt;
+struct m0_fop_type m0_fop_poolmach_query_rep_fopt;
+struct m0_fop_type m0_fop_poolmach_set_fopt;
+struct m0_fop_type m0_fop_poolmach_set_rep_fopt;
+
+M0_INTERNAL void m0_poolmach_fop_fini(void)
+{
+	m0_fop_type_fini(&m0_fop_poolmach_query_fopt);
+	m0_fop_type_fini(&m0_fop_poolmach_query_rep_fopt);
+	m0_fop_type_fini(&m0_fop_poolmach_set_fopt);
+	m0_fop_type_fini(&m0_fop_poolmach_set_rep_fopt);
+	m0_xc_pool_fops_fini();
+}
+
+extern struct m0_reqh_service_type m0_ios_type;
+extern const struct m0_fom_type_ops poolmach_fom_type_ops;
+
+extern struct m0_sm_conf poolmach_conf;
+extern struct m0_sm_state_descr poolmach_phases[];
+
+M0_INTERNAL int m0_poolmach_fop_init(void)
+{
+	m0_xc_pool_fops_init();
+	m0_sm_conf_extend(m0_generic_conf.scf_state, poolmach_phases,
+			  m0_generic_conf.scf_nr_states);
+	return  M0_FOP_TYPE_INIT(&m0_fop_poolmach_query_fopt,
+				 .name      = "Pool Machine query request",
+				 .opcode    = M0_POOLMACHINE_QUERY_OPCODE,
+				 .xt        = m0_fop_poolmach_query_xc,
+				 .rpc_flags = M0_RPC_ITEM_TYPE_REQUEST,
+				 .fom_ops   = &poolmach_fom_type_ops,
+				 .svc_type  = &m0_ios_type,
+				 .sm        = &poolmach_conf) ?:
+		M0_FOP_TYPE_INIT(&m0_fop_poolmach_query_rep_fopt,
+				 .name      = "Pool Machine query reply",
+				 .opcode    = M0_POOLMACHINE_QUERY_REP_OPCODE,
+				 .xt        = m0_fop_poolmach_query_rep_xc,
+				 .rpc_flags = M0_RPC_ITEM_TYPE_REPLY) ?:
+		M0_FOP_TYPE_INIT(&m0_fop_poolmach_set_fopt,
+				 .name      = "Pool Machine set request",
+				 .opcode    = M0_POOLMACHINE_SET_OPCODE,
+				 .xt        = m0_fop_poolmach_set_xc,
+				 .rpc_flags = M0_RPC_ITEM_TYPE_REQUEST,
+				 .fom_ops   = &poolmach_fom_type_ops,
+				 .sm        = &poolmach_conf,
+				 .svc_type  = &m0_ios_type) ?:
+		M0_FOP_TYPE_INIT(&m0_fop_poolmach_set_rep_fopt,
+				 .name      = "Pool Machine set reply",
+				 .opcode    = M0_POOLMACHINE_SET_REP_OPCODE,
+				 .xt        = m0_fop_poolmach_set_rep_xc,
+				 .rpc_flags = M0_RPC_ITEM_TYPE_REPLY);
+}
+
+#undef M0_TRACE_SUBSYSTEM
+
+/*
+ *  Local variables:
+ *  c-indentation-style: "K&R"
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ *  fill-column: 80
+ *  scroll-step: 1
+ *  End:
+ */
diff --git a/pool/pool_fops.h b/pool/pool_fops.h
new file mode 100644
index 0000000..bde6892
--- /dev/null
+++ b/pool/pool_fops.h
@@ -0,0 +1,67 @@
+/* -*- C -*- */
+/*
+ * COPYRIGHT 2013 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Huang Hua <Hua_Huang@xyratex.com>
+ * Original creation date: 06/19/2013
+ */
+
+#pragma once
+
+#ifndef __MERO_POOL_POOL_FOPS_H__
+#define __MERO_POOL_POOL_FOPS_H__
+
+#include "lib/types.h"
+#include "xcode/xcode_attr.h"
+
+extern struct m0_fop_type m0_fop_poolmach_query_fopt;
+extern struct m0_fop_type m0_fop_poolmach_query_rep_fopt;
+extern struct m0_fop_type m0_fop_poolmach_set_fopt;
+extern struct m0_fop_type m0_fop_poolmach_set_rep_fopt;
+
+M0_INTERNAL void m0_poolmach_fop_fini(void);
+M0_INTERNAL int m0_poolmach_fop_init(void);
+
+struct m0_fop_poolmach_query_rep {
+	uint32_t  fpq_rc;
+	uint32_t  fpq_state;
+} M0_XCA_RECORD;
+
+struct m0_fop_poolmach_query {
+	uint32_t  fpq_type;
+	uint32_t  fpq_index;
+} M0_XCA_RECORD;
+
+struct m0_fop_poolmach_set_rep {
+	uint32_t  fps_rc;
+} M0_XCA_RECORD;
+
+struct m0_fop_poolmach_set {
+	uint32_t  fps_type;
+	uint32_t  fps_index;
+	uint32_t  fps_state;
+} M0_XCA_RECORD;
+
+#endif /* __MERO_POOL_POOL_FOPS_H__ */
+
+/*
+ *  Local variables:
+ *  c-indentation-style: "K&R"
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ *  fill-column: 80
+ *  scroll-step: 1
+ *  End:
+ */
diff --git a/rpc/rpc_opcodes.h b/rpc/rpc_opcodes.h
index 4f49607..8080473 100644
--- a/rpc/rpc_opcodes.h
+++ b/rpc/rpc_opcodes.h
@@ -188,6 +188,12 @@ enum M0_RPC_OPCODES {
 
 	/*SNS sliding window update fop. */
 	M0_SNS_CM_SW_ONWIRE_FOP_OPCODE      = 105
+
+	/* Pool */
+	M0_POOLMACHINE_QUERY_OPCODE         = 106,
+	M0_POOLMACHINE_QUERY_REP_OPCODE     = 107,
+	M0_POOLMACHINE_SET_OPCODE           = 108,
+	M0_POOLMACHINE_SET_REP_OPCODE       = 109,
 };
 /** @} endgroup rpc_layer_core */
 
-- 
1.8.3.2


From 1f08aa8571676a7d82876784777af1cbae41f942 Mon Sep 17 00:00:00 2001
From: Amit Jambure <Amit_Jambure@xyratex.com>
Date: Thu, 23 May 2013 17:38:57 +0530
Subject: [PATCH 09/60] rpc: Remove stale declarations related to persistent
 state in RPC.

---
 rpc/conn.h             |  1 -
 rpc/conn_internal.h    | 22 ----------------------
 rpc/rpc.h              |  1 -
 rpc/rpc_machine.c      |  4 +++-
 rpc/rpc_machine.h      |  3 +--
 rpc/session_internal.h | 19 -------------------
 rpc/slot_internal.h    | 20 --------------------
 rpc/ut/rpc_machine.c   | 14 --------------
 8 files changed, 4 insertions(+), 80 deletions(-)

diff --git a/rpc/conn.h b/rpc/conn.h
index ad5096d..f4faa3c 100644
--- a/rpc/conn.h
+++ b/rpc/conn.h
@@ -32,7 +32,6 @@
 struct m0_rpc_machine;
 struct m0_rpc_service;
 struct m0_rpc_chan;
-struct m0_cob;
 struct m0_net_end_point;
 
 /* Exports */
diff --git a/rpc/conn_internal.h b/rpc/conn_internal.h
index efc757e..f032b17 100644
--- a/rpc/conn_internal.h
+++ b/rpc/conn_internal.h
@@ -27,9 +27,7 @@
 
 /* Imports */
 struct m0_rpc_session;
-struct m0_db_tx;
 struct m0_rpc_item;
-struct m0_cob_domain;
 struct m0_rpc_item_source;
 
 /**
@@ -78,26 +76,6 @@ M0_INTERNAL struct m0_rpc_session *m0_rpc_conn_session0(const struct m0_rpc_conn
 M0_INTERNAL void m0_rpc_conn_fini_locked(struct m0_rpc_conn *conn);
 
 /**
-   Lookup for a cob that represents rpc connection with given @sender_id.
-
-   Searches for /SESSIONS/SENDER_$sender_id
- */
-M0_INTERNAL int m0_rpc_conn_cob_lookup(struct m0_cob_domain *dom,
-				       uint64_t sender_id,
-				       struct m0_cob **out,
-				       struct m0_db_tx *tx);
-
-/**
-   Creates a cob that represents rpc connection with given @sender_id
-
-   Creates a cob /SESSIONS/SENDER_$sender_id
- */
-M0_INTERNAL int m0_rpc_conn_cob_create(struct m0_cob_domain *dom,
-				       uint64_t sender_id,
-				       struct m0_cob **out,
-				       struct m0_db_tx *tx);
-
-/**
    Initalises receiver end of conn object.
 
    @post ergo(result == 0, conn_state(conn) == M0_RPC_CONN_INITIALISED &&
diff --git a/rpc/rpc.h b/rpc/rpc.h
index 5556c03..45013de 100644
--- a/rpc/rpc.h
+++ b/rpc/rpc.h
@@ -51,7 +51,6 @@ V6NzJfMTljbTZ3anhjbg&hl=en
 
 /* imports */
 struct m0_db_tx;
-struct m0_cob_domain;
 
 M0_INTERNAL int m0_rpc_init(void);
 M0_INTERNAL void m0_rpc_fini(void);
diff --git a/rpc/rpc_machine.c b/rpc/rpc_machine.c
index 20d3d1e..8989c70 100644
--- a/rpc/rpc_machine.c
+++ b/rpc/rpc_machine.c
@@ -125,6 +125,9 @@ static struct m0_net_tm_callbacks m0_rpc_tm_callbacks = {
 	.ntc_event_cb = rpc_tm_event_cb
 };
 
+/**
+   @todo Remove dom:m0_cob_domain parameter. It is no more required.
+ */
 M0_INTERNAL int m0_rpc_machine_init(struct m0_rpc_machine *machine,
 				    struct m0_cob_domain *dom,
 				    struct m0_net_domain *net_dom,
@@ -148,7 +151,6 @@ M0_INTERNAL int m0_rpc_machine_init(struct m0_rpc_machine *machine,
 		M0_RETURN(-EINVAL);
 
 	M0_SET0(machine);
-	machine->rm_dom		  = dom;
 	machine->rm_reqh	  = reqh;
 	machine->rm_min_recv_size = m0_rpc_max_msg_size(net_dom, msg_size);
 
diff --git a/rpc/rpc_machine.h b/rpc/rpc_machine.h
index 2c1f374..0741562 100644
--- a/rpc/rpc_machine.h
+++ b/rpc/rpc_machine.h
@@ -82,8 +82,6 @@ struct m0_rpc_machine {
 	struct m0_tl			  rm_chans;
 	/** Transfer machine associated with this endpoint.*/
 	struct m0_net_transfer_mc	  rm_tm;
-	/** Cob domain in which cobs related to session will be stored */
-	struct m0_cob_domain		 *rm_dom;
 	/** List of m0_rpc_conn objects, linked using c_link.
 	    List descriptor: rpc_conn
 	    conn is in list if connection is not in {CONN_UNINITIALISED,
@@ -153,6 +151,7 @@ struct m0_rpc_machine {
 
    @param machine Input rpc_machine object.
    @param dom cob domain that contains cobs representing slots
+   @todo      remove above dom parameter. It is no more required.
    @param net_dom Network domain, this rpc_machine is associated with.
    @param ep_addr Source end point address to associate with the transfer mc.
    @param receive_pool Buffer pool to be attached to TM for provisioning it.
diff --git a/rpc/session_internal.h b/rpc/session_internal.h
index 37aa6c3..e1b0261 100644
--- a/rpc/session_internal.h
+++ b/rpc/session_internal.h
@@ -32,7 +32,6 @@
  */
 
 /* Imports */
-struct m0_db_tx;
 struct m0_rpc_item;
 
 enum {
@@ -83,24 +82,6 @@ M0_INTERNAL int m0_rpc_session_init_locked(struct m0_rpc_session *session,
 M0_INTERNAL void m0_rpc_session_fini_locked(struct m0_rpc_session *session);
 
 /**
-   Lookup for a cob named "SESSION_$session_id" that represents rpc session
-   within a given @conn_cob (cob that identifies rpc connection)
- */
-M0_INTERNAL int m0_rpc_session_cob_lookup(struct m0_cob *conn_cob,
-					  uint64_t session_id,
-					  struct m0_cob **session_cob,
-					  struct m0_db_tx *tx);
-
-/**
-   Creates a cob named "SESSION_$session_id" that represents rpc session
-   within a given @conn_cob (cob that identifies rpc connection)
- */
-M0_INTERNAL int m0_rpc_session_cob_create(struct m0_cob *conn_cob,
-					  uint64_t session_id,
-					  struct m0_cob **session_cob,
-					  struct m0_db_tx *tx);
-
-/**
    Terminates receiver end of session.
 
    @pre session->s_state == M0_RPC_SESSION_IDLE
diff --git a/rpc/slot_internal.h b/rpc/slot_internal.h
index d22e832..4d9b19a 100644
--- a/rpc/slot_internal.h
+++ b/rpc/slot_internal.h
@@ -29,8 +29,6 @@
 /* Imports */
 struct m0_rpc_item;
 struct m0_rpc_session;
-struct m0_cob;
-struct m0_db_tx;
 
 /**
    @addtogroup rpc_session
@@ -250,24 +248,6 @@ M0_INTERNAL void m0_rpc_slot_fini(struct m0_rpc_slot *slot);
 
 M0_INTERNAL bool m0_rpc_slot_invariant(const struct m0_rpc_slot *slot);
 
-/**
-   Lookup for a cob named "SLOT_$slot_id:$slot_generation" in @session_cob
- */
-M0_INTERNAL int m0_rpc_slot_cob_lookup(struct m0_cob *session_cob,
-				       uint32_t slot_id,
-				       uint64_t slot_generation,
-				       struct m0_cob **slot_cob,
-				       struct m0_db_tx *tx);
-
-/**
-   Creates a cob named "SLOT_$slot_id:$slot_generation" in @session_cob
- */
-M0_INTERNAL int m0_rpc_slot_cob_create(const struct m0_cob *session_cob,
-				       uint32_t slot_id,
-				       uint64_t slot_generation,
-				       struct m0_cob **slot_cob,
-				       struct m0_db_tx *tx);
-
 M0_INTERNAL void m0_rpc_slot_item_add(struct m0_rpc_slot *slot,
 				      struct m0_rpc_item *item);
 
diff --git a/rpc/ut/rpc_machine.c b/rpc/ut/rpc_machine.c
index d102a39..09dfcde 100644
--- a/rpc/ut/rpc_machine.c
+++ b/rpc/ut/rpc_machine.c
@@ -101,7 +101,6 @@ static void rpc_mc_init_fini_test(void)
 				 max_rpc_msg_size, tm_recv_queue_min_len);
 	M0_UT_ASSERT(rc == 0);
 	M0_UT_ASSERT(machine.rm_reqh == NULL);
-	M0_UT_ASSERT(machine.rm_dom == &cdom);
 	M0_UT_ASSERT(machine.rm_stopping == false);
 	m0_rpc_machine_fini(&machine);
 }
@@ -134,19 +133,6 @@ static void rpc_mc_init_fail_test(void)
 	  Root session cob as well as other mkfs related structres are now
 	  created on behalf of serivice startup if -p option is specified.
 	 */
-/*#ifndef __KERNEL__
-	m0_fi_enable_once("root_session_cob_create", "fake_error");
-	rc = m0_rpc_machine_init(&machine, &cdom, &client_net_dom, ep_addr,
-				 NULL, &buf_pool, M0_BUFFER_ANY_COLOUR,
-				 max_rpc_msg_size, tm_recv_queue_min_len);
-	M0_UT_ASSERT(rc == -EINVAL);
-
-	m0_fi_enable_once("m0_rpc_root_session_cob_create", "fake_error");
-	rc = m0_rpc_machine_init(&machine, &cdom, &client_net_dom, ep_addr,
-				 NULL, &buf_pool, M0_BUFFER_ANY_COLOUR,
-				 max_rpc_msg_size, tm_recv_queue_min_len);
-	M0_UT_ASSERT(rc == -EINVAL);
-#endif*/
 }
 
 #ifndef __KERNEL__
-- 
1.8.3.2


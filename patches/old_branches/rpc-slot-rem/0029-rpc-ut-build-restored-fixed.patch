From 39b06f001a3526fd9178bdcd879f6676f17f7ad3 Mon Sep 17 00:00:00 2001
From: Andriy Tkachuk <andriy_tkachuk@xyratex.com>
Date: Wed, 22 Jan 2014 21:50:01 +0200
Subject: [PATCH 29/60] rpc/ut: build restored & fixed

---
 Makefile.am         |  4 +++
 rpc/ub/ub.c         |  3 +-
 rpc/ut/formation2.c | 99 ++++++++++++-----------------------------------------
 rpc/ut/item.c       | 24 +------------
 rpc/ut/packet.c     | 22 +++---------
 rpc/ut/session.c    | 12 -------
 utils/ut_main.c     |  4 +--
 7 files changed, 33 insertions(+), 135 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index bf05eb3..347f0ed 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -252,6 +252,8 @@ include $(top_srcdir)/net/ut/Makefile.sub
 include $(top_srcdir)/pool/ut/Makefile.sub
 include $(top_srcdir)/reqh/ut/Makefile.sub
 include $(top_srcdir)/rm/ut/Makefile.sub
+include $(top_srcdir)/rpc/ub/Makefile.sub
+include $(top_srcdir)/rpc/ut/Makefile.sub
 include $(top_srcdir)/sm/ut/Makefile.sub
 include $(top_srcdir)/sns/cm/repair/ut/Makefile.sub
 include $(top_srcdir)/sns/ut/Makefile.sub
@@ -1137,6 +1139,8 @@ EXTRA_DIST += addb/Kbuild.sub \
               rm/Kbuild.sub \
               rm/ut/Kbuild.sub \
               rpc/Kbuild.sub \
+              rpc/it/Kbuild.sub \
+              rpc/ut/Kbuild.sub \
               sm/Kbuild.sub \
               sm/ut/Kbuild.sub \
               sns/Kbuild.sub \
diff --git a/rpc/ub/ub.c b/rpc/ub/ub.c
index 7e40304..3ea96e0 100644
--- a/rpc/ub/ub.c
+++ b/rpc/ub/ub.c
@@ -315,8 +315,7 @@ static void fop_send(struct m0_rpc_session *session, size_t msg_id)
 	item->ri_deadline    = m0_time_from_now(1, 0);
 	item->ri_prio        = M0_RPC_ITEM_PRIO_MID; /* XXX CONFIGUREME */
 
-	rc = m0_rpc_post_slot(item, session->s_slot_table[msg_id %
-							  g_args.a_nr_slots]);
+	rc = m0_rpc_post(item);
 	M0_UB_ASSERT(rc == 0);
 	m0_fop_put(fop);
 }
diff --git a/rpc/ut/formation2.c b/rpc/ut/formation2.c
index dcbb132..af13ee2 100644
--- a/rpc/ut/formation2.c
+++ b/rpc/ut/formation2.c
@@ -34,7 +34,6 @@ static struct m0_rpc_frm_constraints  constraints;
 static struct m0_rpc_machine          rmachine;
 static struct m0_rpc_chan             rchan;
 static struct m0_rpc_session          session;
-static struct m0_rpc_slot             slot;
 
 static int frm_ut_init(void)
 {
@@ -90,12 +89,11 @@ static bool packet_stack_is_empty(void)
 }
 
 static bool packet_ready_called;
-static bool item_bind_called;
 static int  item_bind_count;
 
 static void flags_reset(void)
 {
-	packet_ready_called = item_bind_called = false;
+	packet_ready_called = false;
 	item_bind_count = 0;
 }
 
@@ -108,21 +106,8 @@ static bool packet_ready(struct m0_rpc_packet *p)
 	return true;
 }
 
-static bool item_bind(struct m0_rpc_item *item)
-{
-	item_bind_called = true;
-	++item_bind_count;
-
-	if (M0_FI_ENABLED("slot_unavailable"))
-		return false;
-
-	item->ri_slot_refs[0].sr_slot = &slot;
-	return true;
-}
-
 static struct m0_rpc_frm_ops frm_ops = {
 	.fo_packet_ready = packet_ready,
-	.fo_item_bind    = item_bind
 };
 
 static void frm_init_test(void)
@@ -187,9 +172,8 @@ enum {
 	WAITING  = 2,
 	NEVER    = 3,
 
-	BOUND    = 1,
-	UNBOUND  = 2,
-	ONEWAY  = 3,
+	NORMAL  = 1,
+	ONEWAY  = 2,
 };
 
 static uint64_t timeout; /* nano seconds */
@@ -204,7 +188,7 @@ static struct m0_rpc_item *new_item(int deadline, int kind)
 	struct m0_rpc_item      *item;
 
 	M0_UT_ASSERT(M0_IN(deadline, (TIMEDOUT, WAITING, NEVER)));
-	M0_UT_ASSERT(M0_IN(kind,     (BOUND, UNBOUND, ONEWAY)));
+	M0_UT_ASSERT(M0_IN(kind,     (NORMAL, ONEWAY)));
 
 	M0_ALLOC_PTR(item);
 	M0_UT_ASSERT(item != NULL);
@@ -225,7 +209,6 @@ static struct m0_rpc_item *new_item(int deadline, int kind)
 		break;
 	}
 	item->ri_prio = M0_RPC_ITEM_PRIO_MAX;
-	item->ri_slot_refs[0].sr_slot = kind == BOUND ? &slot : NULL;
 	item->ri_session = &session;
 
 	return item;
@@ -276,8 +259,7 @@ static void frm_test1(void)
 		if (deadline == WAITING) {
 			int result;
 
-			M0_UT_ASSERT(!packet_ready_called &&
-				     !item_bind_called);
+			M0_UT_ASSERT(!packet_ready_called);
 			check_frm(FRM_BUSY, 1, 0);
 			/* Allow RPC worker to process timeout AST */
 			m0_rpc_machine_unlock(&rmachine);
@@ -297,8 +279,7 @@ static void frm_test1(void)
 			M0_UT_ASSERT(result == 0);
 			m0_rpc_machine_lock(&rmachine);
 		}
-		M0_UT_ASSERT(packet_ready_called &&
-			     equi(kind == UNBOUND, item_bind_called));
+		M0_UT_ASSERT(packet_ready_called);
 		check_ready_packet_has_item(item);
 		m0_free(item);
 	}
@@ -307,22 +288,20 @@ static void frm_test1(void)
 	/* Do not let formation trigger because of size limit */
 	frm->f_constraints.fc_max_nr_bytes_accumulated = ~0;
 
-	perform_test(TIMEDOUT, BOUND);
-	perform_test(TIMEDOUT, UNBOUND);
+	perform_test(TIMEDOUT, NORMAL);
 	perform_test(TIMEDOUT, ONEWAY);
-	perform_test(WAITING,  BOUND);
-	perform_test(WAITING,  UNBOUND);
+	perform_test(WAITING,  NORMAL);
 	perform_test(WAITING,  ONEWAY);
 
 	/* Test: item is moved to URGENT state when call to m0_sm_timeout_arm()
 	   fails to start item->ri_deadline_timeout in frm_insert().
 	 */
 	set_timeout(100);
-	item = new_item(WAITING, UNBOUND);
+	item = new_item(WAITING, NORMAL);
 	flags_reset();
 	m0_fi_enable_once("m0_sm_timeout_arm", "failed");
 	m0_rpc_frm_enq_item(frm, item);
-	M0_UT_ASSERT(packet_ready_called && item_bind_called);
+	M0_UT_ASSERT(packet_ready_called);
 	check_ready_packet_has_item(item);
 	m0_free(item);
 
@@ -356,13 +335,11 @@ static void frm_test2(void)
 		flags_reset();
 		for (i = 0; i < N - 1; ++i) {
 			m0_rpc_frm_enq_item(frm, items[i]);
-			M0_UT_ASSERT(!packet_ready_called &&
-				     !item_bind_called);
+			M0_UT_ASSERT(!packet_ready_called);
 			check_frm(FRM_BUSY, i + 1, 0);
 		}
 		m0_rpc_frm_enq_item(frm, items[N - 1]);
-		M0_UT_ASSERT(packet_ready_called &&
-			     equi(kind == UNBOUND, item_bind_count == N));
+		M0_UT_ASSERT(packet_ready_called);
 		check_frm(FRM_BUSY, 0, 1);
 
 		p = packet_stack_pop();
@@ -383,8 +360,7 @@ static void frm_test2(void)
 
 	set_timeout(999);
 
-	perform_test(BOUND);
-	perform_test(UNBOUND);
+	perform_test(NORMAL);
 	perform_test(ONEWAY);
 
 	M0_LEAVE();
@@ -399,40 +375,17 @@ static void frm_test3(void)
 	M0_ENTRY();
 
 
-	item = new_item(TIMEDOUT, BOUND);
+	item = new_item(TIMEDOUT, NORMAL);
 	saved = frm->f_constraints.fc_max_nr_packets_enqed;
 	frm->f_constraints.fc_max_nr_packets_enqed = 0;
 	flags_reset();
 	m0_rpc_frm_enq_item(frm, item);
-	M0_UT_ASSERT(!packet_ready_called && !item_bind_called);
+	M0_UT_ASSERT(!packet_ready_called);
 	check_frm(FRM_BUSY, 1, 0);
 
 	frm->f_constraints.fc_max_nr_packets_enqed = saved;
 	m0_rpc_frm_run_formation(frm);
-	M0_UT_ASSERT(packet_ready_called && !item_bind_called);
-
-	check_ready_packet_has_item(item);
-	m0_free(item);
-
-	M0_LEAVE();
-}
-
-static void frm_test4(void)
-{
-	/* packet is not formed if no slot is available */
-	struct m0_rpc_item   *item;
-
-	M0_ENTRY();
-
-	item = new_item(TIMEDOUT, UNBOUND);
-	m0_fi_enable_once("item_bind", "slot_unavailable");
-	flags_reset();
-	m0_rpc_frm_enq_item(frm, item);
-	M0_UT_ASSERT(!packet_ready_called && item_bind_called);
-	check_frm(FRM_BUSY, 1, 0);
-
-	m0_rpc_frm_run_formation(frm);
-	M0_UT_ASSERT(packet_ready_called && item_bind_called);
+	M0_UT_ASSERT(packet_ready_called);
 
 	check_ready_packet_has_item(item);
 	m0_free(item);
@@ -453,7 +406,7 @@ static void frm_do_test5(const int N, const int ITEMS_PER_PACKET)
 	M0_ENTRY("N: %d ITEMS_PER_PACKET: %d", N, ITEMS_PER_PACKET);
 
 	for (i = 0; i < N; ++i)
-		items[i] = new_item(WAITING, BOUND);
+		items[i] = new_item(WAITING, NORMAL);
 
 	saved_max_nr_bytes_acc = frm->f_constraints.fc_max_nr_bytes_accumulated;
 	frm->f_constraints.fc_max_nr_bytes_accumulated = ~0;
@@ -462,7 +415,7 @@ static void frm_do_test5(const int N, const int ITEMS_PER_PACKET)
 	for (i = 0; i < N; ++i)
 		m0_rpc_frm_enq_item(frm, items[i]);
 
-	M0_UT_ASSERT(!packet_ready_called && !item_bind_called);
+	M0_UT_ASSERT(!packet_ready_called);
 	check_frm(FRM_BUSY, N, 0);
 
 	saved_max_packet_size = frm->f_constraints.fc_max_packet_size;
@@ -519,7 +472,7 @@ static void frm_test6(void)
 	M0_ENTRY();
 
 	flags_reset();
-	item = new_item(TIMEDOUT, BOUND);
+	item = new_item(TIMEDOUT, NORMAL);
 
 	m0_fi_enable_once("m0_alloc", "fail_allocation");
 
@@ -548,8 +501,8 @@ static void frm_test7(void)
 
 	M0_ENTRY();
 
-	item1 = new_item(TIMEDOUT, BOUND);
-	item2 = new_item(TIMEDOUT, BOUND);
+	item1 = new_item(TIMEDOUT, NORMAL);
+	item2 = new_item(TIMEDOUT, NORMAL);
 	item1->ri_prio = M0_RPC_ITEM_PRIO_MIN;
 	item2->ri_prio = M0_RPC_ITEM_PRIO_MAX;
 
@@ -618,7 +571,6 @@ static void frm_test8(void)
 	int                        i;
 	int                        deadline;
 	int                        kind;
-	int                        unbound_cnt;
 
 	saved_max_nr_packets_enqed = frm->f_constraints.fc_max_nr_packets_enqed;
 	frm->f_constraints.fc_max_nr_packets_enqed = 0; /* disable formation */
@@ -628,7 +580,6 @@ static void frm_test8(void)
 	seed_kind     = 17;
 	seed_prio     = 57;
 
-	unbound_cnt = 0;
 	flags_reset();
 	for (i = 0; i < N; ++i) {
 		deadline = m0_rnd(3, &seed_deadline) + 1;
@@ -637,8 +588,6 @@ static void frm_test8(void)
 		_timeout = m0_rnd(1000, &seed_timeout);
 
 		set_timeout(_timeout);
-		if (kind == UNBOUND)
-			++unbound_cnt;
 
 		items[i] = new_item(deadline, kind);
 		items[i]->ri_prio = prio;
@@ -653,11 +602,6 @@ static void frm_test8(void)
 	frm->f_constraints.fc_max_nr_bytes_accumulated = 0;
 	m0_rpc_frm_run_formation(frm);
 	M0_UT_ASSERT(packet_ready_called);
-	if (unbound_cnt > 0)
-		M0_UT_ASSERT(item_bind_called &&
-			     unbound_cnt == item_bind_count);
-	else
-		M0_UT_ASSERT(!item_bind_called);
 	check_frm(FRM_BUSY, 0, top);
 
 	while (!packet_stack_is_empty()) {
@@ -690,7 +634,6 @@ const struct m0_test_suite frm_ut = {
 		{ "frm-test1",    frm_test1    },
 		{ "frm-test2",    frm_test2    },
 		{ "frm-test3",    frm_test3    },
-		{ "frm-test4",    frm_test4    },
 		{ "frm-test5",    frm_test5    },
 		{ "frm-test6",    frm_test6    },
 		{ "frm-test7",    frm_test7    },
diff --git a/rpc/ut/item.c b/rpc/ut/item.c
index 1a25b2d..1696502 100644
--- a/rpc/ut/item.c
+++ b/rpc/ut/item.c
@@ -285,27 +285,6 @@ static const struct m0_rpc_item_ops misordered_item_ops = {
 	.rio_replied = misordered_item_replied_cb,
 };
 
-static void test_misordered(void)
-{
-	struct m0_rpc_item *item;
-	int                 rc;
-
-	M0_LOG(M0_DEBUG, "TEST:3.6:START");
-	m0_fi_enable_once("m0_rpc_slot_item_apply", "misorder_item");
-	fop = fop_alloc();
-	item = &fop->f_item;
-	rc = m0_rpc_client_call(fop, session, &misordered_item_ops, 0);
-	M0_UT_ASSERT(rc == 0);
-	M0_UT_ASSERT(item->ri_error == 0);
-	M0_UT_ASSERT(item->ri_nr_sent >= 1);
-	M0_UT_ASSERT(item->ri_reply != NULL);
-	M0_UT_ASSERT(item->ri_reply->ri_type ==
-	             &m0_rpc_fop_noop_fopt.ft_rpc_item_type);
-	M0_UT_ASSERT(chk_state(item, M0_RPC_ITEM_REPLIED));
-	m0_fop_put(fop);
-	M0_LOG(M0_DEBUG, "TEST:3.6:END");
-}
-
 static void __test_resend(struct m0_fop *fop)
 {
 	bool fop_put_flag = false;
@@ -534,7 +513,7 @@ static void test_bound_items(void)
 		item->ri_session  = session;
 		item->ri_deadline = 0;
 		item->ri_ops      = &bound_item_ops;
-		rc = m0_rpc_post_slot(item, session->s_slot_table[0]);
+		rc = m0_rpc_post(item);
 		M0_UT_ASSERT(rc == 0);
 		m0_fop_put(fop);
 	}
@@ -637,7 +616,6 @@ const struct m0_test_suite item_ut = {
 		{ "simple-transitions",     test_simple_transitions     },
 		{ "item-timeout",           test_timeout                },
 		{ "item-resend",            test_resend                 },
-		{ "item-misordered",        test_misordered             },
 		{ "failure-before-sending", test_failure_before_sending },
 		{ "oneway-item",            test_oneway_item            },
 		{ "bound-item",             test_bound_items            },
diff --git a/rpc/ut/packet.c b/rpc/ut/packet.c
index 4fde94d..9e0c69e 100644
--- a/rpc/ut/packet.c
+++ b/rpc/ut/packet.c
@@ -141,26 +141,12 @@ static void fill_ping_fop_data(struct m0_fop_ping_arr *fp_arr)
 
 static void populate_item(struct m0_rpc_item *item)
 {
-	item->ri_slot_refs[0].sr_ow = (struct m0_rpc_onwire_slot_ref) {
+	item->ri_header = (struct m0_rpc_item_header2) {
 		.osr_uuid.u_hi = 9876,
 		.osr_uuid.u_lo = 6789,
 		.osr_sender_id = 101,
 		.osr_session_id = 523,
-		.osr_slot_id = 23,
-		.osr_verno = {
-			.vn_lsn = 7654,
-			.vn_vc = 12345,
-		},
-		.osr_last_persistent_verno = {
-			.vn_lsn = 4356,
-			.vn_vc = 2345,
-		},
-		.osr_last_seen_verno = {
-			.vn_lsn = 1456,
-			.vn_vc = 7865,
-		},
 		.osr_xid = 212,
-		.osr_slot_gen = 321,
 	};
 }
 
@@ -189,11 +175,11 @@ static void packet_compare(struct m0_rpc_packet *p1, struct m0_rpc_packet *p2)
 static void item_compare(struct m0_rpc_item *item1, struct m0_rpc_item *item2)
 {
 
-	struct m0_rpc_onwire_slot_ref *sr_ow1 = &item1->ri_slot_refs[0].sr_ow;
-	struct m0_rpc_onwire_slot_ref *sr_ow2 = &item2->ri_slot_refs[0].sr_ow;
+	struct m0_rpc_item_header2 *h1 = &item1->ri_header;
+	struct m0_rpc_item_header2 *h2 = &item2->ri_header;
 
 	M0_UT_ASSERT(cmp_field(item1, item2, ri_type->rit_opcode));
-	M0_UT_ASSERT(memcmp(sr_ow1, sr_ow2, sizeof *sr_ow1) == 0);
+	M0_UT_ASSERT(memcmp(h1, h2, sizeof *h1) == 0);
 }
 
 static void fop_data_compare(struct m0_fop *fop1, struct m0_fop *fop2)
diff --git a/rpc/ut/session.c b/rpc/ut/session.c
index 4ba9da4..7ad0882 100644
--- a/rpc/ut/session.c
+++ b/rpc/ut/session.c
@@ -193,17 +193,6 @@ static void session_terminate_reply_and_fini(int err)
 	m0_rpc_session_fini(&session);
 }
 
-static void session_hold_release(void)
-{
-	/* Session transition from IDLE => BUSY => IDLE */
-	m0_rpc_machine_lock(&machine);
-	m0_rpc_session_hold_busy(&session);
-	M0_UT_ASSERT(session_state(&session) == M0_RPC_SESSION_BUSY);
-	m0_rpc_session_release(&session);
-	M0_UT_ASSERT(session_state(&session) == M0_RPC_SESSION_IDLE);
-	m0_rpc_machine_unlock(&machine);
-}
-
 static void session_check(void)
 {
 	/* Checks for session states transitions,
@@ -213,7 +202,6 @@ static void session_check(void)
 	session_init_and_establish();
 	session_establish_reply(0);
 	M0_UT_ASSERT(session_state(&session) == M0_RPC_SESSION_IDLE);
-	session_hold_release();
 	session_terminate();
 	session_terminate_reply_and_fini(0);
 }
diff --git a/utils/ut_main.c b/utils/ut_main.c
index f2c64bd..f6f0e63 100644
--- a/utils/ut_main.c
+++ b/utils/ut_main.c
@@ -64,7 +64,7 @@ extern const struct m0_test_suite fit_ut;
 extern const struct m0_test_suite fol_ut;
 //extern const struct m0_test_suite frm_ut;
 extern const struct m0_test_suite ios_bufferpool_ut;
-//extern const struct m0_test_suite item_ut;
+extern const struct m0_test_suite item_ut;
 //extern const struct m0_test_suite item_source_ut;
 extern const struct m0_test_suite layout_ut;
 extern const struct m0_test_suite m0_addb_ut;
@@ -132,7 +132,7 @@ void add_uts(void)
 	m0_ut_add(&fol_ut);
 //	m0_ut_add(&frm_ut);
 	m0_ut_add(&ios_bufferpool_ut);
-//	m0_ut_add(&item_ut);
+	m0_ut_add(&item_ut);
 //	m0_ut_add(&item_source_ut);
 	m0_ut_add(&layout_ut);
 	m0_ut_add(&m0_addb_ut);
-- 
1.8.3.2


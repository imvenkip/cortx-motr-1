From 8a9ab05c48dba1bdc0347ea04cd16276fea357aa Mon Sep 17 00:00:00 2001
From: Andriy Tkachuk <andriy_tkachuk@xyratex.com>
Date: Mon, 3 Feb 2014 12:22:50 +0200
Subject: [PATCH 32/60] all UTs pass now

---
 conf/confc.c                 |  2 ++
 console/ut/console.c         |  4 ++++
 ioservice/io_foms.c          | 12 ------------
 ioservice/ut/bulkio_common.c |  1 -
 ioservice/ut/bulkio_ut.c     |  4 ++++
 ioservice/ut/cob_foms.c      |  4 ++++
 mero/ut/cs_ut_main.c         |  4 ++++
 mgmt/svc/ut/mgmt_svc_ut.c    |  2 ++
 reqh/ut/reqh_fom_ut.c        |  2 ++
 rm/rm_fops.c                 |  4 ----
 rm/ut/rm_fops.c              |  1 -
 rpc/item.c                   |  1 -
 stats/stats_api.c            |  2 ++
 13 files changed, 24 insertions(+), 19 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 6299b77..56c3b50 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -936,7 +936,9 @@ static int grow_cache_st_in(struct m0_sm *mach)
 	m0_rpc_item_put(item->ri_reply);
 
 	/* The item has been consumed and is not needed any more. */
+	m0_sm_group_lock(&item->ri_rmachine->rm_sm_grp);
 	m0_rpc_item_put(item);
+	m0_sm_group_unlock(&item->ri_rmachine->rm_sm_grp);
 	ctx->fc_rpc_item = NULL;
 
 	if (rc == 0) {
diff --git a/console/ut/console.c b/console/ut/console.c
index 69a7823..5d63239 100644
--- a/console/ut/console.c
+++ b/console/ut/console.c
@@ -539,7 +539,11 @@ static void mesg_send_client(int dummy)
 	result = m0_rpc_client_call(fop, &cctx.rcx_session,
 				    NULL, 0 /* deadline */);
 	M0_UT_ASSERT(result == 0);
+	result = m0_rpc_item_wait_for_reply(&fop->f_item, M0_TIME_NEVER);
+	M0_UT_ASSERT(result == 0);
+	m0_sm_group_lock(&fop->f_item.ri_rmachine->rm_sm_grp);
 	m0_fop_put(fop);
+	m0_sm_group_unlock(&fop->f_item.ri_rmachine->rm_sm_grp);
 	cons_client_fini(&cctx);
 }
 
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index 4ff491e..ff7fa11 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -1998,18 +1998,6 @@ static void m0_io_fom_cob_rw_fini(struct m0_fom *fom)
 			       (uint64_t) fom_obj->fcrw_count);
 
 	m0_fom_fini(fom);
-
-	/* drop it completely from rpc slot also */
-	if (!fom->fo_local) {
-		struct m0_rpc_machine *rmachine = fop->f_item.ri_rmachine;
-
-		M0_ASSERT(rmachine != NULL);
-		m0_sm_group_lock(&rmachine->rm_sm_grp);
-		if (m0_ref_read(&fop->f_ref) > 0)
-			m0_fop_put(fop);
-		m0_sm_group_unlock(&rmachine->rm_sm_grp);
-	}
-
 	m0_free(fom_obj);
 }
 
diff --git a/ioservice/ut/bulkio_common.c b/ioservice/ut/bulkio_common.c
index f58b311..4cefd33 100644
--- a/ioservice/ut/bulkio_common.c
+++ b/ioservice/ut/bulkio_common.c
@@ -352,7 +352,6 @@ void io_fops_rpc_submit(struct thrd_arg *t)
 		M0_ASSERT(rbulk->rb_rc == 0);
 		m0_mutex_unlock(&rbulk->rb_mutex);
 	}
-	m0_fop_put(&io_fops[i]->if_fop);
 }
 
 void bulkio_params_init(struct bulkio_params *bp)
diff --git a/ioservice/ut/bulkio_ut.c b/ioservice/ut/bulkio_ut.c
index f44c43e..47e5485 100644
--- a/ioservice/ut/bulkio_ut.c
+++ b/ioservice/ut/bulkio_ut.c
@@ -1716,7 +1716,9 @@ static void bulkio_server_read_write_fv_mismatch(void)
 	rw_reply = io_rw_rep_get(m0_rpc_item_to_fop(wfop->f_item.ri_reply));
 	M0_UT_ASSERT(rw_reply->rwr_rc ==
 			M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH);
+	m0_sm_group_lock(&wfop->f_item.ri_rmachine->rm_sm_grp);
 	m0_fop_put(wfop);
+	m0_sm_group_unlock(&wfop->f_item.ri_rmachine->rm_sm_grp);
 
 	rfop = m0_fop_alloc(&m0_fop_cob_readv_fopt, NULL);
 	M0_UT_ASSERT(rfop != NULL);
@@ -1731,7 +1733,9 @@ static void bulkio_server_read_write_fv_mismatch(void)
 	rw_reply = io_rw_rep_get(m0_rpc_item_to_fop(rfop->f_item.ri_reply));
 	M0_UT_ASSERT(rw_reply->rwr_rc ==
 			M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH);
+	m0_sm_group_lock(&rfop->f_item.ri_rmachine->rm_sm_grp);
 	m0_fop_put(rfop);
+	m0_sm_group_unlock(&rfop->f_item.ri_rmachine->rm_sm_grp);
 }
 
 static void bulkio_init(void)
diff --git a/ioservice/ut/cob_foms.c b/ioservice/ut/cob_foms.c
index 5f1abb2..c0fede3 100644
--- a/ioservice/ut/cob_foms.c
+++ b/ioservice/ut/cob_foms.c
@@ -236,6 +236,7 @@ static void cobfops_destroy(struct m0_fop_type *ftype1,
 	M0_UT_ASSERT(ftype1 == NULL || ftype1 == &m0_fop_cob_create_fopt);
 	M0_UT_ASSERT(ftype2 == NULL || ftype2 == &m0_fop_cob_delete_fopt);
 
+	m0_sm_group_lock(&cut->cu_cctx.rcx_rpc_machine.rm_sm_grp);
 	if (ftype1 != NULL)
 		for (i = 0; i < cut->cu_cobfop_nr; ++i)
 			m0_fop_put(cut->cu_createfops[i]);
@@ -243,6 +244,7 @@ static void cobfops_destroy(struct m0_fop_type *ftype1,
 	if (ftype2 != NULL)
 		for (i = 0; i < cut->cu_cobfop_nr; ++i)
 			m0_fop_put(cut->cu_deletefops[i]);
+	m0_sm_group_unlock(&cut->cu_cctx.rcx_rpc_machine.rm_sm_grp);
 
 	m0_free(cut->cu_createfops);
 	m0_free(cut->cu_deletefops);
@@ -297,6 +299,8 @@ static void cobfops_send_wait(struct cobthread_arg *arg)
 	rc = m0_rpc_client_call(fop, &cut->cu_cctx.rcx_session,
 				NULL, 0 /* deadline */);
 	M0_UT_ASSERT(rc == 0);
+	rc = m0_rpc_item_wait_for_reply(&fop->f_item, M0_TIME_NEVER);
+	M0_UT_ASSERT(rc == 0);
 	rfop = m0_fop_data(m0_rpc_item_to_fop(fop->f_item.ri_reply));
 	M0_UT_ASSERT(rfop->cor_rc == arg->ca_rc);
 }
diff --git a/mero/ut/cs_ut_main.c b/mero/ut/cs_ut_main.c
index 20b0210..b14ed5a 100644
--- a/mero/ut/cs_ut_main.c
+++ b/mero/ut/cs_ut_main.c
@@ -281,7 +281,9 @@ int m0_cs_ut_send_fops(struct m0_rpc_session *cl_rpc_session, int dstype)
 						&cs_ds_req_fop_rpc_item_ops,
 						0 /* deadline */);
 			M0_UT_ASSERT(rc == 0);
+			m0_sm_group_lock(&fop[i]->f_item.ri_rmachine->rm_sm_grp);
 			m0_fop_put(fop[i]);
+			m0_sm_group_unlock(&fop[i]->f_item.ri_rmachine->rm_sm_grp);
 		}
 		break;
 	case CS_UT_SERVICE2:
@@ -293,7 +295,9 @@ int m0_cs_ut_send_fops(struct m0_rpc_session *cl_rpc_session, int dstype)
 						&cs_ds_req_fop_rpc_item_ops,
 						0 /* deadline */);
 			M0_UT_ASSERT(rc == 0);
+			m0_sm_group_lock(&fop[i]->f_item.ri_rmachine->rm_sm_grp);
 			m0_fop_put(fop[i]);
+			m0_sm_group_unlock(&fop[i]->f_item.ri_rmachine->rm_sm_grp);
 		}
 		break;
 	default:
diff --git a/mgmt/svc/ut/mgmt_svc_ut.c b/mgmt/svc/ut/mgmt_svc_ut.c
index f4d8b2d..bf57922 100644
--- a/mgmt/svc/ut/mgmt_svc_ut.c
+++ b/mgmt/svc/ut/mgmt_svc_ut.c
@@ -588,7 +588,9 @@ static void test_status_query(void)
 	}
 	M0_UT_ASSERT(foundFakeService);
 
+	m0_sm_group_lock(&item->ri_rmachine->rm_sm_grp);
 	m0_fop_put(ss_fop);
+	m0_sm_group_unlock(&item->ri_rmachine->rm_sm_grp);
 	mgmt_svc_ut_setup_stop();
 }
 
diff --git a/reqh/ut/reqh_fom_ut.c b/reqh/ut/reqh_fom_ut.c
index 7924300..4e8bf6f 100644
--- a/reqh/ut/reqh_fom_ut.c
+++ b/reqh/ut/reqh_fom_ut.c
@@ -337,7 +337,9 @@ static void fop_send(struct m0_fop *fop, struct m0_rpc_session *session)
 	M0_UT_ASSERT(rc == 0);
 	M0_UT_ASSERT(fop->f_item.ri_error == 0);
 	M0_UT_ASSERT(fop->f_item.ri_reply != 0);
+	m0_sm_group_lock(&fop->f_item.ri_rmachine->rm_sm_grp);
 	m0_fop_put(fop);
+	m0_sm_group_unlock(&fop->f_item.ri_rmachine->rm_sm_grp);
 }
 
 /** Sends create fop request. */
diff --git a/rm/rm_fops.c b/rm/rm_fops.c
index 6655b27..c9fe344 100644
--- a/rm/rm_fops.c
+++ b/rm/rm_fops.c
@@ -329,7 +329,6 @@ int m0_rm_request_out(enum m0_rm_outgoing_type  otype,
 
 	if (rc != 0) {
 		M0_LOG(M0_ERROR, "filling fop failed: rc [%d]\n", rc);
-		m0_fop_put(&outreq->ou_fop);
 		goto out;
 	}
 	outgoing_queue(otype, credit->cr_owner, outreq, in, other);
@@ -410,7 +409,6 @@ static void borrow_ast(struct m0_sm_group *grp, struct m0_sm_ast *ast)
 out:
 	outreq->ou_req.rog_rc = rc;
 	m0_rm_outgoing_complete(&outreq->ou_req);
-	m0_fop_put(&outreq->ou_fop);
 	M0_LEAVE();
 }
 static void revoke_ast(struct m0_sm_group *grp, struct m0_sm_ast *ast)
@@ -446,7 +444,6 @@ static void revoke_ast(struct m0_sm_group *grp, struct m0_sm_ast *ast)
 out:
 	outreq->ou_req.rog_rc = rc;
 	m0_rm_outgoing_complete(&outreq->ou_req);
-	m0_fop_put(&outreq->ou_fop);
 	M0_LEAVE();
 }
 
@@ -487,7 +484,6 @@ static void cancel_ast(struct m0_sm_group *grp, struct m0_sm_ast *ast)
 
 	outreq->ou_req.rog_rc = rc;
 	m0_rm_outgoing_complete(&outreq->ou_req);
-	m0_fop_put(&outreq->ou_fop);
 	M0_LEAVE();
 }
 
diff --git a/rm/ut/rm_fops.c b/rm/ut/rm_fops.c
index fc85624..b39e660 100644
--- a/rm/ut/rm_fops.c
+++ b/rm/ut/rm_fops.c
@@ -185,7 +185,6 @@ static struct m0_rpc_item *rm_reply_create(enum m0_rm_incoming_type reqtype,
 		fop = m0_fop_alloc(fopt, NULL);
 		M0_UT_ASSERT(fop != NULL);
 		item = &oreq->ou_fop.f_item;
-		m0_fop_get(&oreq->ou_fop);
 		switch (reqtype) {
 		case M0_RIT_BORROW:
 			breply = m0_fop_data(fop);
diff --git a/rpc/item.c b/rpc/item.c
index 27727b0..f862e09 100644
--- a/rpc/item.c
+++ b/rpc/item.c
@@ -92,7 +92,6 @@ M0_INTERNAL int m0_rpc_item_module_init(void)
 	/**
 	 * @todo This should be done from dtm subsystem init.
 	 */
-	m0_xc_verno_init();
 	m0_xc_rpc_onwire_init();
 	m0_xc_cookie_init();
 
diff --git a/stats/stats_api.c b/stats/stats_api.c
index 58b8c50..47da3e5 100644
--- a/stats/stats_api.c
+++ b/stats/stats_api.c
@@ -141,7 +141,9 @@ int m0_stats_query(struct m0_rpc_session      *session,
 
 	*stats = stats_recs_dup(&qrfop->sqrf_stats);
 
+	m0_sm_group_lock(&item->ri_rmachine->rm_sm_grp);
 	m0_fop_put(fop);
+	m0_sm_group_unlock(&item->ri_rmachine->rm_sm_grp);
 	return rc;
 }
 
-- 
1.8.3.2


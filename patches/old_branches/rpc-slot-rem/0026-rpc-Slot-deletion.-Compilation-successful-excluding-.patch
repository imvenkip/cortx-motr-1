From 91a839571457b4d566f73f0fdb35e176776b5e04 Mon Sep 17 00:00:00 2001
From: Amit Jambure <Amit_Jambure@xyratex.com>
Date: Fri, 24 May 2013 17:25:47 +0530
Subject: [PATCH 26/60] rpc: Slot deletion. Compilation successful, excluding
 RPC UTs.

---
 Kbuild.in           |  2 +-
 Makefile.am         |  4 ----
 fop/fop_item_type.c |  2 +-
 ioservice/io_fops.c |  6 ++++++
 mero/mero-pub.api   |  1 -
 rpc/conn.c          |  1 -
 rpc/formation2.c    |  1 -
 rpc/frmops.c        |  2 +-
 rpc/item.c          | 22 ++++++++++------------
 rpc/item.h          |  1 -
 rpc/item_internal.h |  3 +++
 rpc/rpc.c           |  4 +---
 rpc/rpc_internal.h  |  3 ---
 rpc/rpc_machine.c   | 38 ++++++++++++++++++++++++++++++++++++++
 rpc/rpc_onwire.c    |  6 ++----
 rpc/session.c       |  7 +------
 rpc/session_foms.c  |  2 --
 rpc/session_fops.c  | 11 -----------
 utils/ub_main.c     |  4 ++--
 utils/ut_main.c     | 40 ++++++++++++++++++++--------------------
 20 files changed, 86 insertions(+), 74 deletions(-)

diff --git a/Kbuild.in b/Kbuild.in
index ac513f4..9c0a0da 100644
--- a/Kbuild.in
+++ b/Kbuild.in
@@ -111,7 +111,7 @@ include $(src)/net/bulk_emulation/ut/Kbuild.sub
 include $(src)/net/lnet/ut/Kbuild.sub
 include $(src)/net/test/ut/Kbuild.sub # TODO: factor out net-test into a separate module
 include $(src)/reqh/ut/Kbuild.sub
-include $(src)/rpc/ut/Kbuild.sub
+#include $(src)/rpc/ut/Kbuild.sub
 include $(src)/sm/ut/Kbuild.sub
 include $(src)/ut/Kbuild.sub
 include $(src)/xcode/ut/Kbuild.sub
diff --git a/Makefile.am b/Makefile.am
index 2c5ab7d..971bbff 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -240,8 +240,6 @@ include $(top_srcdir)/net/ut/Makefile.sub
 include $(top_srcdir)/pool/ut/Makefile.sub
 include $(top_srcdir)/reqh/ut/Makefile.sub
 include $(top_srcdir)/rm/ut/Makefile.sub
-include $(top_srcdir)/rpc/ub/Makefile.sub
-include $(top_srcdir)/rpc/ut/Makefile.sub
 include $(top_srcdir)/sm/ut/Makefile.sub
 include $(top_srcdir)/sns/cm/ut/Makefile.sub
 include $(top_srcdir)/sns/ut/Makefile.sub
@@ -1055,8 +1053,6 @@ EXTRA_DIST += addb/Kbuild.sub \
               reqh/Kbuild.sub \
               reqh/ut/Kbuild.sub \
               rpc/Kbuild.sub \
-              rpc/it/Kbuild.sub \
-              rpc/ut/Kbuild.sub \
               sm/Kbuild.sub \
               sm/ut/Kbuild.sub \
               sns/Kbuild.sub \
diff --git a/fop/fop_item_type.c b/fop/fop_item_type.c
index 2c97ca1..f795226 100644
--- a/fop/fop_item_type.c
+++ b/fop/fop_item_type.c
@@ -98,7 +98,7 @@ M0_INTERNAL int m0_fop_item_encdec(struct m0_rpc_item *item,
 	M0_PRE(cur != NULL);
 
 	/* Currently MAX slot references in sessions is 1. */
-	return m0_rpc_item_header2_encdec(cur, &item->ri_header, 1, what) ?:
+	return m0_rpc_item_header2_encdec(cur, &item->ri_header, what) ?:
 		m0_fop_encdec(m0_rpc_item_to_fop(item), cur, what);
 }
 
diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index 7be459b..2471023 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -904,6 +904,7 @@ static void ioseg_unlink_free(struct ioseg *ioseg)
 /**
    Returns if given 2 fops belong to same type.
  */
+__attribute__((unused))
 static bool io_fop_type_equal(const struct m0_fop *fop1,
 			      const struct m0_fop *fop2)
 {
@@ -1501,11 +1502,13 @@ cleanup:
 	return rc;
 }
 
+__attribute__((unused))
 static struct m0_fid *io_fop_fid_get(struct m0_fop *fop)
 {
 	return &(io_rw_get(fop))->crw_fid;
 }
 
+__attribute__((unused))
 static bool io_fop_fid_equal(struct m0_fop *fop1, struct m0_fop *fop2)
 {
         return m0_fid_eq(io_fop_fid_get(fop1), io_fop_fid_get(fop2));
@@ -1619,6 +1622,8 @@ static void io_item_replied(struct m0_rpc_item *item)
 static void item_io_coalesce(struct m0_rpc_item *head, struct m0_list *list,
 			     uint64_t size)
 {
+	/* Coalescing RPC items is not yet supported */
+#if 0
 	int			 rc;
 	struct m0_fop		*bfop;
 	struct m0_fop		*ufop;
@@ -1684,6 +1689,7 @@ static void item_io_coalesce(struct m0_rpc_item *head, struct m0_list *list,
 				m0_list_del(&item->ri_unbound_link);
 		} m0_tl_endfor;
 	}
+#endif
 }
 
 M0_INTERNAL m0_bcount_t m0_io_fop_byte_count(struct m0_io_fop *iofop)
diff --git a/mero/mero-pub.api b/mero/mero-pub.api
index a10ff52..de75978 100644
--- a/mero/mero-pub.api
+++ b/mero/mero-pub.api
@@ -104,7 +104,6 @@ m0_rpc_reply_post
 m0_rpc_server_start
 m0_rpc_server_stop
 m0_rpc_session_destroy
-m0_rpc_slot_item_list_print
 m0_rwlock_read_lock
 m0_rwlock_read_unlock
 m0_sm_state_set
diff --git a/rpc/conn.c b/rpc/conn.c
index 3318207..5ad2a11 100644
--- a/rpc/conn.c
+++ b/rpc/conn.c
@@ -311,7 +311,6 @@ static int session_zero_attach(struct m0_rpc_conn *conn)
 {
 	struct m0_rpc_session *session;
 	int                    rc;
-	int                    i;
 
 	M0_ENTRY("conn: %p", conn);
 	M0_PRE(conn != NULL && m0_rpc_machine_is_locked(conn->c_rpc_machine));
diff --git a/rpc/formation2.c b/rpc/formation2.c
index ab511d3..225d7e5 100644
--- a/rpc/formation2.c
+++ b/rpc/formation2.c
@@ -549,7 +549,6 @@ static void frm_fill_packet(struct m0_rpc_frm *frm, struct m0_rpc_packet *p)
 	struct m0_rpc_item *item;
 	struct m0_tl       *q;
 	m0_bcount_t         limit;
-	bool                bound;
 
 	M0_ENTRY("frm: %p packet: %p", frm, p);
 
diff --git a/rpc/frmops.c b/rpc/frmops.c
index 38c6833..6fe5dec 100644
--- a/rpc/frmops.c
+++ b/rpc/frmops.c
@@ -459,7 +459,7 @@ static void item_sent(struct m0_rpc_item *item)
 		if (item->ri_pending_reply != NULL) {
 			/* Reply has already been received when we
 			   were waiting for buffer callback */
-			m0_rpc_process_reply(item, item->ri_pending_reply);
+			m0_rpc_item_process_reply(item, item->ri_pending_reply);
 			item->ri_pending_reply = NULL;
 			M0_ASSERT(item->ri_sm.sm_state == M0_RPC_ITEM_REPLIED);
 		}
diff --git a/rpc/item.c b/rpc/item.c
index 7481960..6a0c167 100644
--- a/rpc/item.c
+++ b/rpc/item.c
@@ -74,8 +74,8 @@ static bool opcode_is_dup(uint32_t opcode)
 
 M0_INTERNAL m0_bcount_t m0_rpc_item_onwire_header_size;
 
-#define ITEM_XCODE_OBJ(ptr)     M0_XCODE_OBJ(m0_rpc_onwire_slot_ref_xc, ptr)
-#define SLOT_REF_XCODE_OBJ(ptr) M0_XCODE_OBJ(m0_rpc_item_onwire_header_xc, ptr)
+#define HEADER1_XCODE_OBJ(ptr) M0_XCODE_OBJ(m0_rpc_item_header1_xc, ptr)
+#define HEADER2_XCODE_OBJ(ptr) M0_XCODE_OBJ(m0_rpc_item_header2_xc, ptr)
 
 M0_INTERNAL int m0_rpc_item_module_init(void)
 {
@@ -95,8 +95,8 @@ M0_INTERNAL int m0_rpc_item_module_init(void)
 	m0_rwlock_init(&rpc_item_types_lock);
 	rit_tlist_init(&rpc_item_types_list);
 
-	m0_xcode_ctx_init(&h1_xc, &ITEM_XCODE_OBJ(&h1));
-	m0_xcode_ctx_init(&h2_xc, &SLOT_REF_XCODE_OBJ(&h2));
+	m0_xcode_ctx_init(&h1_xc, &HEADER1_XCODE_OBJ(&h1));
+	m0_xcode_ctx_init(&h2_xc, &HEADER2_XCODE_OBJ(&h2));
 	m0_rpc_item_onwire_header_size = m0_xcode_length(&h1_xc) +
 		m0_xcode_length(&h2_xc);
 
@@ -176,8 +176,7 @@ static struct m0_sm_state_descr outgoing_item_states[] = {
 	[M0_RPC_ITEM_INITIALISED] = {
 		.sd_flags   = M0_SDF_INITIAL | M0_SDF_FINAL,
 		.sd_name    = "INITIALISED",
-		.sd_allowed = M0_BITS(M0_RPC_ITEM_WAITING_IN_STREAM,
-				      M0_RPC_ITEM_ENQUEUED,
+		.sd_allowed = M0_BITS(M0_RPC_ITEM_ENQUEUED,
 				      M0_RPC_ITEM_URGENT,
 				      M0_RPC_ITEM_SENDING,
 				      M0_RPC_ITEM_FAILED,
@@ -281,7 +280,6 @@ M0_INTERNAL bool m0_rpc_item_invariant(const struct m0_rpc_item *item)
 	bool req;
 	bool rply;
 	bool oneway;
-	bool bound;
 
 	if (item == NULL || item->ri_type == NULL)
 		return false;
@@ -294,8 +292,6 @@ M0_INTERNAL bool m0_rpc_item_invariant(const struct m0_rpc_item *item)
 	return  item->ri_magic == M0_RPC_ITEM_MAGIC &&
 		item->ri_prio >= M0_RPC_ITEM_PRIO_MIN &&
 		item->ri_prio <= M0_RPC_ITEM_PRIO_MAX &&
-		item->ri_stage >= RPC_ITEM_STAGE_PAST_COMMITTED &&
-		item->ri_stage <= RPC_ITEM_STAGE_FUTURE &&
 		(req + rply + oneway == 1) && /* only one of three is true */
 		equi(req || rply, item->ri_session != NULL) &&
 
@@ -330,8 +326,6 @@ M0_INTERNAL const char *item_kind(const struct m0_rpc_item *item)
 void m0_rpc_item_init(struct m0_rpc_item *item,
 		      const struct m0_rpc_item_type *itype)
 {
-	struct m0_rpc_slot_ref	*sref;
-
 	M0_ENTRY("item: %p", item);
 	M0_PRE(item != NULL && itype != NULL);
 
@@ -696,7 +690,11 @@ m0_rpc_item_remote_ep_addr(const struct m0_rpc_item *item)
 	return item->ri_session->s_conn->c_rpcchan->rc_destep->nep_addr;
 }
 
-#undef SLOT_REF_XCODE_OBJ
+M0_INTERNAL void m0_rpc_item_process_reply(struct m0_rpc_item *item,
+					   struct m0_rpc_item *reply)
+{
+	M0_LOG(M0_FATAL, "Not yet implemented");
+}
 
 /** @} end of rpc group */
 
diff --git a/rpc/item.h b/rpc/item.h
index 13242cc..e659828 100644
--- a/rpc/item.h
+++ b/rpc/item.h
@@ -162,7 +162,6 @@ struct m0_rpc_item {
 	    @see incoming_item_states
 	 */
 	struct m0_sm                     ri_sm;
-	enum m0_rpc_item_stage		 ri_stage;
 	/** Number of times the item was sent */
 	uint32_t                         ri_nr_sent;
 	/** Reply received when request is still in SENDING state is kept
diff --git a/rpc/item_internal.h b/rpc/item_internal.h
index 34ef019..bdd78f6 100644
--- a/rpc/item_internal.h
+++ b/rpc/item_internal.h
@@ -60,5 +60,8 @@ M0_INTERNAL void m0_rpc_item_send(struct m0_rpc_item *item);
 M0_INTERNAL const char *item_kind(const struct m0_rpc_item *item);
 M0_INTERNAL const char *item_state_name(const struct m0_rpc_item *item);
 
+M0_INTERNAL void m0_rpc_item_process_reply(struct m0_rpc_item *item,
+					   struct m0_rpc_item *reply);
+
 /** @} */
 #endif /* __MERO_RPC_ITEM_INT_H__ */
diff --git a/rpc/rpc.c b/rpc/rpc.c
index 0720ce4..0c091b1 100644
--- a/rpc/rpc.c
+++ b/rpc/rpc.c
@@ -184,7 +184,7 @@ M0_INTERNAL int m0_rpc__post_locked(struct m0_rpc_item *item)
 
 	M0_ENTRY("item: %p", item);
 	M0_PRE(item != NULL && item->ri_type != NULL);
-	M0_PRE(m0_rpc_item_is_request(item) && !m0_rpc_item_is_bound(item));
+	M0_PRE(m0_rpc_item_is_request(item));
 
 	session = item->ri_session;
 	M0_ASSERT(m0_rpc_session_invariant(session));
@@ -198,7 +198,6 @@ M0_INTERNAL int m0_rpc__post_locked(struct m0_rpc_item *item)
 	item->ri_rpc_time = m0_time_now();
 	m0_rpc_item_sm_init(item, M0_RPC_ITEM_OUTGOING);
 
-	item->ri_stage = RPC_ITEM_STAGE_FUTURE;
 	m0_rpc_item_send(item);
 
 	M0_RETURN(item->ri_error);
@@ -210,7 +209,6 @@ int m0_rpc_reply_post(struct m0_rpc_item *request, struct m0_rpc_item *reply)
 
 	M0_ENTRY("req_item: %p, rep_item: %p", request, reply);
 	M0_PRE(request != NULL && reply != NULL);
-	M0_PRE(request->ri_stage == RPC_ITEM_STAGE_IN_PROGRESS);
 	M0_PRE(request->ri_session != NULL);
 	M0_PRE(reply->ri_type != NULL);
 	M0_PRE(m0_rpc_item_size(reply) <=
diff --git a/rpc/rpc_internal.h b/rpc/rpc_internal.h
index a547421..57c14b7 100644
--- a/rpc/rpc_internal.h
+++ b/rpc/rpc_internal.h
@@ -79,9 +79,6 @@ M0_INTERNAL void m0_rpc_session_module_fini(void);
 /**
    Called for each received item.
  */
-M0_INTERNAL int m0_rpc_item_received(struct m0_rpc_item *item,
-				     struct m0_rpc_machine *machine);
-
 M0_INTERNAL void rpc_worker_thread_fn(struct m0_rpc_machine *machine);
 
 /**
diff --git a/rpc/rpc_machine.c b/rpc/rpc_machine.c
index 99fa82b..5979292 100644
--- a/rpc/rpc_machine.c
+++ b/rpc/rpc_machine.c
@@ -822,6 +822,44 @@ static void packet_received(struct m0_rpc_packet    *p,
 	M0_LEAVE();
 }
 
+static int m0_rpc_item_received(struct m0_rpc_item *item,
+				     struct m0_rpc_machine *machine)
+{
+	M0_LOG(M0_FATAL, "Not yet implemented");
+	return 0;
+}
+
+M0_INTERNAL struct m0_rpc_conn *
+m0_rpc_machine_find_conn(const struct m0_rpc_machine *machine,
+			 const struct m0_rpc_item    *item)
+{
+	const struct m0_rpc_item_header2 *header;
+	const struct m0_tl               *conn_list;
+	struct m0_rpc_conn               *conn;
+	bool                              use_uuid;
+
+	M0_ENTRY("machine: %p, item: %p", machine, item);
+
+	header = &item->ri_header;
+	use_uuid = (header->osr_sender_id == SENDER_ID_INVALID);
+	conn_list = m0_rpc_item_is_request(item) ?
+				&machine->rm_incoming_conns :
+				&machine->rm_outgoing_conns;
+
+	m0_tl_for(rpc_conn, conn_list, conn) {
+		if (use_uuid) {
+			if (m0_uint128_cmp(&conn->c_uuid,
+					   &header->osr_uuid) == 0)
+				break;
+		} else if (conn->c_sender_id == header->osr_sender_id) {
+			break;
+		}
+	} m0_tl_endfor;
+
+	M0_LEAVE("conn: %p", conn);
+	return conn;
+}
+
 static void item_received(struct m0_rpc_item      *item,
 			  struct m0_net_end_point *from_ep)
 {
diff --git a/rpc/rpc_onwire.c b/rpc/rpc_onwire.c
index a044a8f..44a6508 100644
--- a/rpc/rpc_onwire.c
+++ b/rpc/rpc_onwire.c
@@ -124,10 +124,8 @@ M0_INTERNAL int m0_rpc_item_header2_encdec(struct m0_bufvec_cursor    *cur,
 	M0_PRE(h2 != NULL);
 	M0_PRE(cur != NULL);
 
-	rc = what == M0_BUFVEC_ENCODE ? header2_encode(x, cur) :
-					header2_decode(cur, x);
-	if (rc != 0)
-		break;
+	rc = what == M0_BUFVEC_ENCODE ? header2_encode(h2, cur) :
+					header2_decode(cur, h2);
 
 	M0_RETURN(rc);
 }
diff --git a/rpc/session.c b/rpc/session.c
index da8df83..b1b13e6 100644
--- a/rpc/session.c
+++ b/rpc/session.c
@@ -153,9 +153,7 @@ session_machine(const struct m0_rpc_session *s)
  */
 M0_INTERNAL bool m0_rpc_session_invariant(const struct m0_rpc_session *session)
 {
-	struct m0_rpc_slot *slot;
-	bool                ok;
-	int                 i;
+	bool ok;
 
 	ok = _0C(session != NULL) &&
 	     _0C(session->s_conn != NULL) &&
@@ -256,7 +254,6 @@ static void __session_fini(struct m0_rpc_session *session)
 	M0_ENTRY("session: %p", session);
 
 	rpc_session_tlink_fini(session);
-	m0_list_fini(&session->s_unbound_items);
 
 	M0_LEAVE();
 }
@@ -459,13 +456,11 @@ M0_INTERNAL void m0_rpc_session_establish_reply_received(struct m0_rpc_item
 	struct fop_session_establish_ctx        *ctx;
 	struct m0_rpc_machine                   *machine;
 	struct m0_rpc_session                   *session;
-	struct m0_rpc_slot                      *slot;
 	struct m0_rpc_item                      *reply_item;
 	struct m0_fop                           *fop;
 	uint64_t                                 sender_id;
 	uint64_t                                 session_id;
 	int32_t                                  rc;
-	int                                      i;
 
 	M0_ENTRY("item: %p", item);
 	M0_PRE(item != NULL &&
diff --git a/rpc/session_foms.c b/rpc/session_foms.c
index 94100cc..4246079 100644
--- a/rpc/session_foms.c
+++ b/rpc/session_foms.c
@@ -158,7 +158,6 @@ M0_INTERNAL int m0_rpc_fom_conn_establish_tick(struct m0_fom *fom)
 	struct m0_rpc_machine                *machine;
 	struct m0_rpc_session                *session0;
 	struct m0_rpc_conn                   *conn;
-	struct m0_rpc_slot                   *slot;
 	int                                   rc;
 
 	M0_ENTRY("fom: %p", fom);
@@ -233,7 +232,6 @@ M0_INTERNAL int m0_rpc_fom_conn_establish_tick(struct m0_fom *fom)
 	}
 	m0_rpc_machine_unlock(machine);
 
-out:
 	if (rc == 0) {
 		reply->rcer_sender_id = conn->c_sender_id;
 		reply->rcer_rc        = 0;
diff --git a/rpc/session_fops.c b/rpc/session_fops.c
index e14b5cb..5137cc7 100644
--- a/rpc/session_fops.c
+++ b/rpc/session_fops.c
@@ -106,17 +106,6 @@ struct m0_fop_type m0_rpc_fop_session_establish_rep_fopt;
 struct m0_fop_type m0_rpc_fop_session_terminate_fopt;
 struct m0_fop_type m0_rpc_fop_session_terminate_rep_fopt;
 
-static struct m0_fop_type *fop_types[] = {
-	&m0_rpc_fop_conn_establish_fopt,
-	&m0_rpc_fop_conn_terminate_fopt,
-	&m0_rpc_fop_session_establish_fopt,
-	&m0_rpc_fop_session_terminate_fopt,
-	&m0_rpc_fop_conn_establish_rep_fopt,
-	&m0_rpc_fop_conn_terminate_rep_fopt,
-	&m0_rpc_fop_session_establish_rep_fopt,
-	&m0_rpc_fop_session_terminate_rep_fopt,
-};
-
 M0_INTERNAL void m0_rpc_session_fop_fini(void)
 {
 	m0_fop_type_fini(&m0_rpc_fop_session_terminate_rep_fopt);
diff --git a/utils/ub_main.c b/utils/ub_main.c
index 62c9e5f..ccbd745 100644
--- a/utils/ub_main.c
+++ b/utils/ub_main.c
@@ -38,7 +38,7 @@ extern struct m0_ub_set m0_fom_ub;
 extern struct m0_ub_set m0_list_ub;
 extern struct m0_ub_set m0_memory_ub;
 extern struct m0_ub_set m0_parity_math_ub;
-extern struct m0_ub_set m0_rpc_ub;
+//extern struct m0_ub_set m0_rpc_ub;
 extern struct m0_ub_set m0_thread_ub;
 extern struct m0_ub_set m0_time_ub;
 extern struct m0_ub_set m0_tlist_ub;
@@ -100,7 +100,7 @@ static void ub_add(const struct ub_args *args)
 	m0_ub_set_add(&m0_tlist_ub);
 	m0_ub_set_add(&m0_time_ub);
 	m0_ub_set_add(&m0_thread_ub);
-	m0_ub_set_add(&m0_rpc_ub);
+//	m0_ub_set_add(&m0_rpc_ub);
 	m0_ub_set_add(&m0_parity_math_ub);
 	m0_ub_set_add(&m0_memory_ub);
 	m0_ub_set_add(&m0_list_ub);
diff --git a/utils/ut_main.c b/utils/ut_main.c
index c110cab..9c7155c 100644
--- a/utils/ut_main.c
+++ b/utils/ut_main.c
@@ -49,17 +49,17 @@ extern const struct m0_test_suite cobfoms_ut;
 extern const struct m0_test_suite conf_ut;
 extern const struct m0_test_suite confc_ut;
 extern const struct m0_test_suite confstr_ut;
-extern const struct m0_test_suite conn_ut;
+//extern const struct m0_test_suite conn_ut;
 extern const struct m0_test_suite console_ut;
 extern const struct m0_test_suite db_cursor_ut;
 extern const struct m0_test_suite db_ut;
 extern const struct m0_test_suite emap_ut;
 extern const struct m0_test_suite fit_ut;
 extern const struct m0_test_suite fol_ut;
-extern const struct m0_test_suite frm_ut;
+//extern const struct m0_test_suite frm_ut;
 extern const struct m0_test_suite ios_bufferpool_ut;
-extern const struct m0_test_suite item_ut;
-extern const struct m0_test_suite item_source_ut;
+//extern const struct m0_test_suite item_ut;
+//extern const struct m0_test_suite item_source_ut;
 extern const struct m0_test_suite layout_ut;
 extern const struct m0_test_suite m0_addb_ut;
 extern const struct m0_test_suite m0_fop_lock_ut;
@@ -73,17 +73,17 @@ extern const struct m0_test_suite m0_net_test_ut;
 extern const struct m0_test_suite m0_net_tm_prov_ut;
 extern const struct m0_test_suite m0d_ut;
 extern const struct m0_test_suite mdservice_ut;
-extern const struct m0_test_suite packet_encdec_ut;
+//extern const struct m0_test_suite packet_encdec_ut;
 extern const struct m0_test_suite parity_math_ut;
 extern const struct m0_test_suite poolmach_ut;
 extern const struct m0_test_suite reqh_ut;
 extern const struct m0_test_suite reqh_service_ut;
 extern const struct m0_test_suite rm_ut;
-extern const struct m0_test_suite rpc_mc_ut;
-extern const struct m0_test_suite rpc_rcv_session_ut;
-extern const struct m0_test_suite rpc_service_ut;
-extern const struct m0_test_suite rpclib_ut;
-extern const struct m0_test_suite session_ut;
+//extern const struct m0_test_suite rpc_mc_ut;
+//extern const struct m0_test_suite rpc_rcv_session_ut;
+//extern const struct m0_test_suite rpc_service_ut;
+//extern const struct m0_test_suite rpclib_ut;
+//extern const struct m0_test_suite session_ut;
 extern const struct m0_test_suite sm_ut;
 extern const struct m0_test_suite sns_cm_ut;
 extern const struct m0_test_suite snscm_net_ut;
@@ -113,16 +113,16 @@ void add_uts(void)
 	m0_ut_add(&conf_ut);
 	m0_ut_add(&confc_ut);
 	m0_ut_add(&confstr_ut);
-	m0_ut_add(&conn_ut);
+//	m0_ut_add(&conn_ut);
 	m0_ut_add(&db_cursor_ut);
 	m0_ut_add(&db_ut);
 	m0_ut_add(&emap_ut);
 	m0_ut_add(&fit_ut);
 	m0_ut_add(&fol_ut);
-	m0_ut_add(&frm_ut);
+//	m0_ut_add(&frm_ut);
 	m0_ut_add(&ios_bufferpool_ut);
-	m0_ut_add(&item_ut);
-	m0_ut_add(&item_source_ut);
+//	m0_ut_add(&item_ut);
+//	m0_ut_add(&item_source_ut);
 	m0_ut_add(&layout_ut);
 	m0_ut_add(&m0_addb_ut);
 	m0_ut_add(&m0_fop_lock_ut);
@@ -135,17 +135,17 @@ void add_uts(void)
 	m0_ut_add(&m0_net_test_ut);
 	m0_ut_add(&m0_net_tm_prov_ut);
 	m0_ut_add(&m0d_ut);
-	m0_ut_add(&packet_encdec_ut);
+//	m0_ut_add(&packet_encdec_ut);
 	m0_ut_add(&parity_math_ut);
 	m0_ut_add(&poolmach_ut);
 	m0_ut_add(&reqh_ut);
 	m0_ut_add(&reqh_service_ut);
 	m0_ut_add(&rm_ut);
-	m0_ut_add(&rpc_mc_ut);
-	m0_ut_add(&rpc_rcv_session_ut);
-	m0_ut_add(&rpc_service_ut);
-	m0_ut_add(&rpclib_ut);
-	m0_ut_add(&session_ut);
+//	m0_ut_add(&rpc_mc_ut);
+//	m0_ut_add(&rpc_rcv_session_ut);
+//	m0_ut_add(&rpc_service_ut);
+//	m0_ut_add(&rpclib_ut);
+//	m0_ut_add(&session_ut);
 	m0_ut_add(&sm_ut);
 	m0_ut_add(&snscm_net_ut);
 	m0_ut_add(&snscm_storage_ut);
-- 
1.8.3.2


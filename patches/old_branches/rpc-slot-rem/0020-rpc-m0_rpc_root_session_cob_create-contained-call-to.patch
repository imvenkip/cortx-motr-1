From 9ccfb6b1011dff9a148205c15148271ed067de57 Mon Sep 17 00:00:00 2001
From: Amit Jambure <Amit_Jambure@xyratex.com>
Date: Thu, 23 May 2013 16:32:43 +0530
Subject: [PATCH 20/60] rpc: m0_rpc_root_session_cob_create() contained call to
 m0_cob_domain_mkfs(); YUCK!!!      Previously we removed all calls to
 m0_rpc_root_session_cob_create().      Restore the calls with
 m0_cob_domain_mkfs().

---
 mero/setup.c          | 24 ++++++++++++++++++++++++
 reqh/ut/reqh_fom_ut.c |  1 -
 ut/ut_rpc_machine.c   | 12 +++++++++++-
 3 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/mero/setup.c b/mero/setup.c
index bbc04be..9781efb 100644
--- a/mero/setup.c
+++ b/mero/setup.c
@@ -1212,6 +1212,25 @@ static void cs_net_domains_fini(struct m0_mero *cctx)
 		m0_net_xprt_fini(xprts[idx]);
 }
 
+static int cs_storage_prepare(struct m0_reqh_context *rctx)
+{
+	struct m0_db_tx tx;
+	int rc;
+
+	rc = m0_db_tx_init(&tx, &rctx->rc_db, 0);
+	if (rc != 0)
+		return rc;
+
+	rc = m0_cob_domain_mkfs(&rctx->rc_mdstore.md_dom, &M0_COB_SLASH_FID,
+				&M0_COB_SESSIONS_FID, &tx);
+	if (rc == 0)
+		m0_db_tx_commit(&tx);
+	else
+		m0_db_tx_abort(&tx);
+
+	return rc;
+}
+
 /**
    Initializes storage for ADDB depending on the type of specified
    while running m0d. It also creates a hard-coded stob on
@@ -1330,6 +1349,11 @@ static int cs_request_handler_start(struct m0_reqh_context *rctx)
 			M0_LOG(M0_ERROR, "m0_mdstore_init");
 			goto cleanup_addb_stob;
 		}
+		rc = cs_storage_prepare(rctx);
+		if (rc != 0) {
+			M0_LOG(M0_ERROR, "cs_storage_prepare");
+			goto cleanup_mdstore;
+		}
 		m0_mdstore_fini(&rctx->rc_mdstore);
 	}
 	rc = m0_mdstore_init(&rctx->rc_mdstore, &rctx->rc_cdom_id, &rctx->rc_db,
diff --git a/reqh/ut/reqh_fom_ut.c b/reqh/ut/reqh_fom_ut.c
index 68a53b2..70efbd9 100644
--- a/reqh/ut/reqh_fom_ut.c
+++ b/reqh/ut/reqh_fom_ut.c
@@ -349,7 +349,6 @@ static void write_send(struct m0_rpc_session *session)
 		rh_io_fop = m0_fop_data(fop);
 		rh_io_fop->fiw_object.f_seq = i;
 		rh_io_fop->fiw_object.f_oid = i;
-
 		M0_ALLOC_ARR(buf, 1 << BALLOC_DEF_BLOCK_SHIFT);
 		M0_ASSERT(buf != NULL);
 		rh_io_fop->fiw_value.fi_buf   = buf;
diff --git a/ut/ut_rpc_machine.c b/ut/ut_rpc_machine.c
index 7fa182e..3c2d3b8 100644
--- a/ut/ut_rpc_machine.c
+++ b/ut/ut_rpc_machine.c
@@ -44,7 +44,8 @@ static void buf_dummy(struct m0_net_buffer_pool *bp)
 
 M0_INTERNAL void m0_ut_rpc_mach_init_and_add(struct m0_ut_rpc_mach_ctx *ctx)
 {
-	int rc;
+	struct m0_db_tx tx;
+	int             rc;
 
 	ctx->rmc_xprt = &m0_net_lnet_xprt;
 	rc = m0_net_xprt_init(ctx->rmc_xprt);
@@ -73,6 +74,15 @@ M0_INTERNAL void m0_ut_rpc_mach_init_and_add(struct m0_ut_rpc_mach_ctx *ctx)
 			     &ctx->rmc_dbenv, 0);
 	M0_ASSERT(rc == 0);
 
+	rc = m0_db_tx_init(&tx, &ctx->rmc_dbenv, 0);
+	M0_ASSERT(rc == 0);
+
+	rc = m0_cob_domain_mkfs(&ctx->rmc_mdstore.md_dom, &M0_COB_SLASH_FID,
+				&M0_COB_SESSIONS_FID, &tx);
+	M0_ASSERT(rc == 0);
+
+	m0_db_tx_commit(&tx);
+
 	/*
 	 * Instead of using m0d and dealing with network, database and
 	 * other subsystems, request handler is initialised in a 'special way'.
-- 
1.8.3.2


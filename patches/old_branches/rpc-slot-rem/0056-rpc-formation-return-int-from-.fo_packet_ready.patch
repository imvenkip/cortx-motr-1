From a82f41557d6ba6570908730590ab84595fffce57 Mon Sep 17 00:00:00 2001
From: Andriy Tkachuk <andriy_tkachuk@xyratex.com>
Date: Tue, 25 Feb 2014 16:59:22 +0200
Subject: [PATCH 56/60] rpc/formation: return int from .fo_packet_ready()

---
 rpc/formation2.c          | 19 +++++++++----------
 rpc/formation2_internal.h | 13 +++++++++----
 rpc/frmops.c              | 10 ++++------
 rpc/ut/formation2.c       |  4 ++--
 4 files changed, 24 insertions(+), 22 deletions(-)

diff --git a/rpc/formation2.c b/rpc/formation2.c
index 6f9c4a6..7e438e6 100644
--- a/rpc/formation2.c
+++ b/rpc/formation2.c
@@ -50,7 +50,7 @@ static bool frm_is_ready(const struct m0_rpc_frm *frm);
 static void frm_fill_packet(struct m0_rpc_frm *frm, struct m0_rpc_packet *p);
 static void frm_fill_packet_from_item_sources(struct m0_rpc_frm    *frm,
 					      struct m0_rpc_packet *p);
-static bool frm_packet_ready(struct m0_rpc_frm *frm, struct m0_rpc_packet *p);
+static int  frm_packet_ready(struct m0_rpc_frm *frm, struct m0_rpc_packet *p);
 static void frm_try_merging_item(struct m0_rpc_frm  *frm,
 				 struct m0_rpc_item *item,
 				 m0_bcount_t         limit);
@@ -442,7 +442,7 @@ static void frm_balance(struct m0_rpc_frm *frm)
 	struct m0_rpc_packet *p;
 	int                   packet_count;
 	int                   item_count;
-	bool                  packet_enqed;
+	int                   rc;
 
 	M0_ENTRY("frm: %p", frm);
 
@@ -472,8 +472,8 @@ static void frm_balance(struct m0_rpc_frm *frm)
 		}
 		++packet_count;
 		item_count += p->rp_ow.poh_nr_items;
-		packet_enqed = frm_packet_ready(frm, p);
-		if (packet_enqed) {
+		rc = frm_packet_ready(frm, p);
+		if (rc == 0) {
 			++frm->f_nr_packets_enqed;
 			/*
 			 * f_nr_packets_enqed will be decremented in packet
@@ -679,11 +679,11 @@ static void frm_try_merging_item(struct m0_rpc_frm  *frm,
 }
 
 /**
-   @see m0_rpc_frm_ops::f_packet_ready()
+   @see m0_rpc_frm_ops::fo_packet_ready()
  */
-static bool frm_packet_ready(struct m0_rpc_frm *frm, struct m0_rpc_packet *p)
+static int frm_packet_ready(struct m0_rpc_frm *frm, struct m0_rpc_packet *p)
 {
-	bool packet_enqed;
+	int rc;
 
 	M0_ENTRY("frm: %p packet %p", frm, p);
 
@@ -694,10 +694,9 @@ static bool frm_packet_ready(struct m0_rpc_frm *frm, struct m0_rpc_packet *p)
 
 	p->rp_frm = frm;
 	/* See packet_ready() in rpc/frmops.c */
-	packet_enqed = frm->f_ops->fo_packet_ready(p);
+	rc = frm->f_ops->fo_packet_ready(p);
 
-	M0_LEAVE("result: %s", (char *)m0_bool_to_str(packet_enqed));
-	return packet_enqed;
+	M0_RETURN(rc);
 }
 
 M0_INTERNAL void m0_rpc_frm_run_formation(struct m0_rpc_frm *frm)
diff --git a/rpc/formation2_internal.h b/rpc/formation2_internal.h
index 6a8341b..86bdd48 100644
--- a/rpc/formation2_internal.h
+++ b/rpc/formation2_internal.h
@@ -243,12 +243,17 @@ struct m0_rpc_frm {
 struct m0_rpc_frm_ops {
 	/**
 	   A packet is ready to be sent over network.
-	   @return true iff packet has been submitted to network layer.
-		   If result is false then all the items in packet
-		   p are moved to FAILED state and are removed from p.
+	   @return 0 iff packet has been submitted to network layer.
+		   Otherwise the items in packet p are moved to
+		   FAILED state and are removed from p.
 		   m0_rpc_packet instance pointed by p is freed.
+	   @note through there is only one implementation instance of
+	         this routine in the real code, the UTs code still
+		 implement its own version of this routine also
+	         and heavily depend on it - that's why we still
+		 have this vector here.
 	 */
-	bool (*fo_packet_ready)(struct m0_rpc_packet *p);
+	int (*fo_packet_ready)(struct m0_rpc_packet *p);
 };
 
 /**
diff --git a/rpc/frmops.c b/rpc/frmops.c
index 47851ad..57573d2 100644
--- a/rpc/frmops.c
+++ b/rpc/frmops.c
@@ -36,7 +36,7 @@
  * @{
  */
 
-static bool packet_ready(struct m0_rpc_packet *p);
+static int packet_ready(struct m0_rpc_packet *p);
 
 static int net_buffer_allocate(struct m0_net_buffer *netbuf,
 			       struct m0_net_domain *ndom,
@@ -124,7 +124,7 @@ rpc_buffer__rmachine(const struct rpc_buffer *rpcbuf)
 
    @see m0_rpc_frm_ops::fo_packet_ready()
  */
-static bool packet_ready(struct m0_rpc_packet *p)
+static int packet_ready(struct m0_rpc_packet *p)
 {
 	struct rpc_buffer *rpcbuf;
 	int                rc;
@@ -146,8 +146,7 @@ static bool packet_ready(struct m0_rpc_packet *p)
 	if (rc != 0)
 		goto out_fini;
 
-	M0_LEAVE("true");
-	return true;
+	M0_RETURN(rc);
 
 out_fini:
 	rpc_buffer_fini(rpcbuf);
@@ -162,8 +161,7 @@ out:
 	m0_rpc_packet_fini(p);
 	m0_free(p);
 
-	M0_LEAVE("false");
-	return false;
+	M0_RETURN(rc);
 }
 
 /**
diff --git a/rpc/ut/formation2.c b/rpc/ut/formation2.c
index 16fda59..959ecc1 100644
--- a/rpc/ut/formation2.c
+++ b/rpc/ut/formation2.c
@@ -97,13 +97,13 @@ static void flags_reset(void)
 	item_bind_count = 0;
 }
 
-static bool packet_ready(struct m0_rpc_packet *p)
+static int packet_ready(struct m0_rpc_packet *p)
 {
 	M0_UT_ASSERT(frm_rmachine(p->rp_frm) == &rmachine);
 	M0_UT_ASSERT(frm_rchan(p->rp_frm) == &rchan);
 	packet_stack_push(p);
 	packet_ready_called = true;
-	return true;
+	return 0;
 }
 
 static struct m0_rpc_frm_ops frm_ops = {
-- 
1.8.3.2


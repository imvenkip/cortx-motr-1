From 553fe5cabf9ebc84121611e68a6340d54a2331c0 Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Thu, 24 May 2012 11:18:17 +0530
Subject: [PATCH 11/11] - Added ADDB events for io service code.

---
 addb/addb.c         |  42 +++++++++-----------
 addb/addb.h         | 101 ++++++++++++++++------------------------------
 addb/addb_console.c |  39 ++++++++++++++----
 addb/addb_fop.c     |  11 ------
 addb/ut/addb.c      |  37 ++---------------
 ioservice/io_foms.c | 112 +++++++++++++++++++++++++++++-----------------------
 lib/param.h         | 102 ++++++++++++++++++++++++-----------------------
 lib/trace.c         |   2 +-
 lib/trace.h         |   8 +---
 rpc/rpc2.c          |   8 ++--
 10 files changed, 209 insertions(+), 253 deletions(-)

diff --git a/addb/addb.c b/addb/addb.c
index 8fc7d3e..3f5e7c9 100644
--- a/addb/addb.c
+++ b/addb/addb.c
@@ -44,9 +44,7 @@
 
    @{
  */
-
-struct __addb_ev_body;
-
+/* Some of common ADDB events which are used through out the code. */
 C2_ADDB_EV_DEFINE_PUBLIC(c2_addb_oom, "oom", C2_ADDB_EVENT_OOM, AEL_NOTE,
 			 C2_ADDB_STAMP);
 
@@ -130,6 +128,17 @@ void c2_addb_ctx_fini(struct c2_addb_ctx *ctx)
 {
 }
 
+int c2_addb_getsize(struct c2_addb_dp *dp)
+{
+	int             i;
+	uint32_t        data_size = 0;
+
+	for (i = 0; i <= dp->ad_nargs; i++)
+		data_size += dp->ad_sizeof[i];
+
+	return c2_align(data_size, 8);
+}
+
 /* defined in {,linux_kernel/}addb_console.c */
 void c2_addb_console(enum c2_addb_ev_level lev, struct c2_addb_dp *dp);
 
@@ -167,30 +176,15 @@ void c2_addb_add(struct c2_addb_dp *dp)
 	}
 }
 
-int c2_addb_var_msg_add(struct c2_addb_ctx       *ctx,
-			const struct c2_addb_loc *loc,
-			char                     *msgbuf,
-			uint32_t                  msglen,
-			const char               *fmt, ...)
+int c2_addb_copy_body(struct c2_addb_dp *dp, const void *body)
 {
-	va_list ap;
-	int     rc;
-
-	va_start(ap, fmt);
-	rc = vsnprintf(msgbuf, msglen, fmt, ap);
-	va_end(ap);
-
-	if (rc > 0)
-		C2_ADDB_ADD(ctx, loc, c2_addb_trace, (const char *)msgbuf);
+	int	size = c2_addb_getsize(dp);
 
-        return rc;
-}
-
-int c2_addb_set_data(struct c2_addb_dp *dp, const void *body)
-{
-	dp->ad_data = (char *)c2_alloc(dp->ad_size);
+	dp->ad_data = (char *)c2_alloc(size);
+	if (dp->ad_data == NULL)
+		return -ENOMEM;
 
-	memcpy((void *)dp->ad_data, body, dp->ad_size);
+	memcpy((void *)dp->ad_data, body, size);
 
 	return 0;
 }
diff --git a/addb/addb.h b/addb/addb.h
index 8d0bfea..b6a9d81 100644
--- a/addb/addb.h
+++ b/addb/addb.h
@@ -80,6 +80,11 @@ struct c2_addb_ctx_type {
 };
 
 /**
+ * Returns the size of "variable data" from ADDB data point.
+ */
+int c2_addb_getsize(struct c2_addb_dp *dp);
+
+/**
     Write addb records into this stob.
  */
 typedef int (*c2_addb_stob_add_t)(struct c2_addb_dp *dp, struct c2_dtx *tx,
@@ -104,31 +109,6 @@ int c2_addb_net_add(struct c2_addb_dp *dp, struct c2_net_conn *);
 int c2_addb_choose_store_media(enum c2_addb_rec_store_type type, ...);
 
 /**
- * Adds a formatted message to addb stream.
- * ADDB message is first formatted into the pre-allocated buffer according
- * to the custom defined format. Then if that succeeds, the formatted string
- * is added into addb as a trace message. Caller is supposed to allocate
- * msgbuf big enough to accommodate the formatted message. The output will
- * be trimmed if it exceeds the maximal size of the msgbuf.
- *
- * @param ctx pointer to addb context.
- * @param loc event location (sub-system).
- * @param msgbuf message buffer passed by caller to receive formatted message.
- * @param msglen length of message buffer.
- * @param fmt format string representing custom made message.
- * @return On success it returns actual formatted message length, and negative
- *         value returned on error. Most of the cases it is not required to
- *         to check return values by caller. But it's upto caller, if caller
- *         wants to retry with new buffer to make sure that whole message
- *         is written to addb.
- */
-int c2_addb_var_msg_add(struct c2_addb_ctx       *ctx,
-			const struct c2_addb_loc *loc,
-			char                     *msgbuf,
-			uint32_t                  msglen,
-			const char               *fmt, ...);
-
-/**
    Activity in context on which addb event happens.
 
    This can be, for example, FOP processing or storage IO. There is also a
@@ -156,8 +136,6 @@ struct c2_addb_loc {
 	const char *al_name;
 };
 
-typedef int (*c2_addb_ev_subst_t)(struct c2_addb_dp *dp, ...);
-
 /** Event severity level. */
 enum c2_addb_ev_level {
 	AEL_NONE = 0,
@@ -188,34 +166,12 @@ struct c2_addb_record_header;
 struct c2_addb_record;
 
 /**
-   Packing this event into a buffer.
-
-   @param dp the data point
-   @param rec the caller supplied addb record, which is long enough to fill.
-
-   @return 0 on success. Other negative values mean error.
-*/
-typedef	int (*c2_addb_ev_pack_t)(struct c2_addb_dp *dp,
-				 struct c2_addb_record *rec);
-
-/**
-   Get size for this event data point.
-
-   The size is its opaque data, excluding header.
-   @param dp the data point
-   @return actual size is returned on success. Negative values mean error.
-*/
-typedef	int (*c2_addb_ev_getsize_t)(struct c2_addb_dp *dp);
-
-int c2_addb_set_data(struct c2_addb_dp *dp, const void *body);
+ * Copies the variable size ADDB body to data point.
+ * Size of variable ADDB body is available in ADDB data point.
+ */
+int c2_addb_copy_body(struct c2_addb_dp *dp, const void *body);
 
 struct c2_addb_ev_ops {
-	c2_addb_ev_subst_t    aeo_subst;
-	c2_addb_ev_pack_t     aeo_pack;
-	c2_addb_ev_getsize_t  aeo_getsize;
-	size_t                aeo_size;
-	const char           *aeo_name;
-	enum c2_addb_ev_level aeo_level;
 };
 
 /**
@@ -236,17 +192,24 @@ enum c2_addb_event_id {
 	C2_ADDB_EVENT_COB_MDDELETE          = 0x22ULL,
 
 	C2_ADDB_EVENT_TRACE		    = 0x30ULL,
-        C2_ADDB_EVENT_UT_TRACE		    = 0x31ULL,
         C2_ADDB_EVENT_CS_FUNC_FAIL	    = 0x32ULL,
         C2_ADDB_EVENT_CREATE_COB_FUNC_FAIL  = 0x33ULL,
-        C2_ADDB_EVENT_DELETE_COB_FUNC_FAIL  = 0x34ULL,	
+        C2_ADDB_EVENT_DELETE_COB_FUNC_FAIL  = 0x34ULL,
         C2_ADDB_EVENT_COBFID_FUNC_FAIL	    = 0x35ULL,
         C2_ADDB_EVENT_BULKCLIENT_FUNC_FAIL  = 0x36ULL,
         C2_ADDB_EVENT_USUNRPC1_REQ	    = 0x37ULL,
         C2_ADDB_EVENT_USUNRPC1_OPNOTSURPPORT = 0x38ULL,
         C2_ADDB_EVENT_FORMATION_FUNC_FAIL   = 0x39ULL,
-        C2_ADDB_EVENT_RPCM_FUNC_FAIL	    = 0x40ULL,
-        C2_ADDB_EVENT_YAML2DB_FUNC_FAIL	    = 0x41ULL
+        C2_ADDB_EVENT_RPC_MACHINE_FUNC_FAIL = 0x40ULL,
+        C2_ADDB_EVENT_YAML2DB_FUNC_FAIL	    = 0x41ULL,
+	C2_ADDB_EVENT_IO_FOM_CREATE	    = 0x42ULL,
+	C2_ADDB_EVENT_IO_FOM_FINISH	    = 0x43ULL,
+	C2_ADDB_EVENT_BUFFER_ACQUIRE	    = 0x44ULL,
+	C2_ADDB_EVENT_BUFFER_RELEASE	    = 0x45ULL,
+	C2_ADDB_EVENT_ZERO_COPY_INIT	    = 0x46ULL,
+	C2_ADDB_EVENT_ZERO_COPY_FINISH	    = 0x47ULL,
+	C2_ADDB_EVENT_COB_RW_INIT	    = 0x48ULL,
+	C2_ADDB_EVENT_COB_RW_FINISH	    = 0x49ULL
 };
 
 /**
@@ -284,7 +247,6 @@ struct c2_addb_dp {
 	const struct c2_addb_loc *ad_loc;
 	const struct c2_addb_ev  *ad_ev;
 	enum c2_addb_ev_level     ad_level;
-	int			  ad_size;
 	int 			  ad_nargs;
 	const int		 *ad_offset;
 	const int		 *ad_sizeof;
@@ -338,7 +300,7 @@ void c2_addb_fini(void);
    @endcode
  */
 
-#define __C2_ADDB_EV_DEFINE(var, name, id, level)				\
+#define __C2_ADDB_EV_DEFINE(var, name, id, level)			\
 const struct c2_addb_ev var = {						\
 	.ae_name  = (name),						\
 	.ae_id    = (id),						\
@@ -377,26 +339,31 @@ const struct c2_addb_ev var = {						\
    hit = c2_dirent_cache_lookup(pdir, name, &entry);
    C2_ADDB_ADD(&fop->f_addb_ctx, &reqh_addb_loc, &reqh_dirent_cache, hit);
    @endcode
+
+   "__addb_ev_body" is dynamically defined ADDB body depending on number
+   of arguments and their types.
+
+   "_offset" is array of offsets of each member of variable ADDB body.
+   "_sizeof" is array of size of  each member of variable ADDB body.
 */
 #define C2_ADDB_ADD(ctx, loc, ev, ...)				\
 {								\
 	struct c2_addb_dp __dp;					\
-	C2_ARG_DECL(__addb_ev_body, ## __VA_ARGS__)		\
+	C2_VAR_BODY_DECL(__addb_ev_body, ## __VA_ARGS__)	\
 								\
 	__dp.ad_ctx    = (ctx);					\
 	__dp.ad_loc    = (loc);					\
 	__dp.ad_ev     = &(ev);					\
 	__dp.ad_level  = (c2_addb_level_default);		\
-	__dp.ad_size   = sizeof(struct __addb_ev_body);		\
-	__dp.ad_nargs  = (C2_COUNT_PARAMS(__addb_ev_body, ## __VA_ARGS__));	\
+	__dp.ad_nargs  = (C2_COUNT_PARAMS(__addb_ev_body,	\
+			                  ## __VA_ARGS__));	\
 	__dp.ad_offset = _offset;				\
 	__dp.ad_sizeof = _sizeof;				\
 								\
 	(void)sizeof(((__ ## ev ## _typecheck_t *)NULL)		\
 		     (&__dp , ## __VA_ARGS__));			\
-	if (c2_addb_set_data(&__dp ,				\
-	   		     &(const struct __addb_ev_body){ __VA_ARGS__ })\
-	    == 0)						\
+	if (c2_addb_copy_body(&__dp ,				\
+	    &(const struct __addb_ev_body){ __VA_ARGS__ }) == 0)\
 		c2_addb_add(&__dp);				\
 }
 
@@ -417,6 +384,8 @@ enum c2_addb_ev_level c2_addb_choose_default_level_console(
 typedef int								\
 __ ## ops ## _typecheck_t(struct c2_addb_dp *dp , ## __VA_ARGS__)
 
+/** Events which are used throughout Colibri */
+
 /** A call to an external system component failed. */
 C2_ADDB_OPS_DEFINE(C2_ADDB_SYSCALL, int rc);
 /** A call to a given function failed. */
@@ -432,8 +401,6 @@ C2_ADDB_OPS_DEFINE(C2_ADDB_FLAG, bool flag);
 /** Record a trace event. */
 C2_ADDB_OPS_DEFINE(C2_ADDB_TRACE, const char *message);
 
-/** Events which are used throughout Colibri */
-
 /** Report this event when memory allocation fails. */
 C2_ADDB_EV_DECLARE(c2_addb_oom, C2_ADDB_STAMP);
 
diff --git a/addb/addb_console.c b/addb/addb_console.c
index e64e2fd..9c77eb6 100644
--- a/addb/addb_console.c
+++ b/addb/addb_console.c
@@ -48,7 +48,7 @@ void c2_addb_console(enum c2_addb_ev_level lev, struct c2_addb_dp *dp)
 
 	ctx = dp->ad_ctx;
 	ev  = dp->ad_ev;
-	printf("addb: ctx: %s/%p, loc: %s, ev: %s ",
+	printf("addb: ctx: %s/%p, loc: %s, ev: %s",
 	       ctx->ac_type->act_name, ctx, dp->ad_loc->al_name,
 	       ev->ae_name);
 
@@ -84,13 +84,13 @@ void c2_addb_console(enum c2_addb_ev_level lev, struct c2_addb_dp *dp)
 		case C2_ADDB_EVENT_COBFID_FUNC_FAIL:
 		case C2_ADDB_EVENT_BULKCLIENT_FUNC_FAIL:
 		case C2_ADDB_EVENT_FORMATION_FUNC_FAIL:
-		case C2_ADDB_EVENT_RPCM_FUNC_FAIL:
+		case C2_ADDB_EVENT_RPC_MACHINE_FUNC_FAIL:
 		case C2_ADDB_EVENT_YAML2DB_FUNC_FAIL:
-			printf("function name : %s rc : %d\n", (char *)v[0].v64, v[1].v32);
+			printf(", msg: %s rc: %d\n",
+			       (char *)v[0].v64, v[1].v32);
 			break;
 		case C2_ADDB_EVENT_TRACE:
-		case C2_ADDB_EVENT_UT_TRACE:
-			printf("msg : %s\n", (char *)v[0].v64);
+			printf(", msg: %s\n", (char *)v[0].v64);
 			break;
 		case C2_ADDB_EVENT_USUNRPC_REQ:
 		case C2_ADDB_EVENT_USUNRPC1_REQ:
@@ -103,11 +103,36 @@ void c2_addb_console(enum c2_addb_ev_level lev, struct c2_addb_dp *dp)
 		case C2_ADDB_EVENT_USUNRPC_OPNOTSURPPORT:
 		case C2_ADDB_EVENT_USUNRPC1_OPNOTSURPPORT:
 		case C2_ADDB_EVENT_COB_MDEXISTS:
-			printf("val : %lu\n", v[0].v64);
+			printf(", val: %lu\n", v[0].v64);
 			break;
 		case C2_ADDB_EVENT_COB_MDDELETE:
-			printf("flag : %d\n", v[0].v8);
+			printf(", flag: %d\n", v[0].v8);
 		   	break;
+		case C2_ADDB_EVENT_IO_FOM_CREATE:
+			printf(", rw: %s, fid: %lu:%lu, ndesc: %d, "
+			       "size: %lu\n", (char *)v[0].v64, v[1].v64,
+				v[2].v64, v[3].v32, v[4].v64);
+			break;
+		case C2_ADDB_EVENT_IO_FOM_FINISH:
+			printf(", size: %d, rc: %d\n", v[0].v32, v[1].v32);
+			break;
+		case C2_ADDB_EVENT_BUFFER_ACQUIRE:
+		case C2_ADDB_EVENT_BUFFER_RELEASE:
+			printf(", nbuffs: %d\n", v[0].v32);
+			break;
+		case C2_ADDB_EVENT_ZERO_COPY_INIT:
+			printf(", nbuffs: %d\n", v[0].v32);
+			break;
+		case C2_ADDB_EVENT_ZERO_COPY_FINISH:
+			printf(", rc: %d\n", v[0].v32);
+			break;
+		case C2_ADDB_EVENT_COB_RW_INIT:
+			printf(", rw: %s, fid: %lu:%lu, size: %d\n",
+			       (char *)v[0].v64, v[1].v64, v[2].v64, v[3].v32);
+			break;
+		case C2_ADDB_EVENT_COB_RW_FINISH:
+			printf(", rc: %d\n", v[0].v32);
+			break;
 	}
 }
 
diff --git a/addb/addb_fop.c b/addb/addb_fop.c
index 7426050..0522d8d 100644
--- a/addb/addb_fop.c
+++ b/addb/addb_fop.c
@@ -129,17 +129,6 @@ static int c2_addb_record_header_pack(struct c2_addb_dp *dp,
 	return 0;
 };
 
-int c2_addb_getsize(struct c2_addb_dp *dp)
-{
-	int		i;
-	uint32_t	data_size = 0;
-
-	for (i = 0; i <= dp->ad_nargs; i++)
-		data_size += dp->ad_sizeof[i];
-
-	return c2_align(data_size, 8);
-}
-
 int c2_addb_pack(struct c2_addb_dp *dp,
 		       struct c2_addb_record *rec)
 {
diff --git a/addb/ut/addb.c b/addb/ut/addb.c
index d7d9887..59f1f42 100644
--- a/addb/ut/addb.c
+++ b/addb/ut/addb.c
@@ -39,19 +39,15 @@ const struct c2_addb_loc c2_addb_ut_loc = {
 	.al_name = "ADDB-UT"
 };
 
-C2_ADDB_OPS_DEFINE(C2_ADDB_UT_TRACE, const char *msg);
+//C2_ADDB_OPS_DEFINE(C2_ADDB_TRACE, const char *msg);
 
 C2_ADDB_EV_DEFINE(custom_trace_ut, "custom_trace_ut_msg",
-                  C2_ADDB_EVENT_UT_TRACE, AEL_TRACE, C2_ADDB_UT_TRACE);
+                  C2_ADDB_EVENT_TRACE, AEL_TRACE, C2_ADDB_TRACE);
 
 static const char s_out_fname[] = "addb_ut_output_redirect";
 
-enum {
-	ADDB_UT_VAR_MSG_SIZE = 256,
-};
-
 #define MESSAGE_LENGTH sizeof("addb: ctx: ADDB-UT/0x8ff4fa0, loc: ADDB-UT, ev: \
-			      trace/trace, rc: 0 name: A test ADDB message for \
+			      trace/trace, msg: A test ADDB message for \
 			      C2_ADDB_TRACE event")
 
 #ifndef __KERNEL__
@@ -81,32 +77,6 @@ static void test_addb()
 }
 #endif
 
-static void test_addb_var_msg_add(void)
-{
-	char message[ADDB_UT_VAR_MSG_SIZE];
-	int  msg_size;
-	char addb_msg[ADDB_UT_VAR_MSG_SIZE];
-
-	memset(message, 'A', ADDB_UT_VAR_MSG_SIZE);
-	message[ADDB_UT_VAR_MSG_SIZE-1] = '\0';
-
-	c2_addb_ctx_init(&addb_ut_ctx, &c2_addb_ut_ctx, &c2_addb_global_ctx);
-
-	msg_size = c2_addb_var_msg_add(&addb_ut_ctx, &c2_addb_ut_loc, addb_msg,
-				       ADDB_UT_VAR_MSG_SIZE, "%s", message);
-
-	C2_UT_ASSERT(msg_size == ADDB_UT_VAR_MSG_SIZE-1);
-
-	/* Truncate message and returns actual size of formatted message. */
-	msg_size = c2_addb_var_msg_add(&addb_ut_ctx, &c2_addb_ut_loc, addb_msg,
-				       ADDB_UT_VAR_MSG_SIZE,
-				       "msglen = %d, %s",
-				       strlen(message), message);
-
-	C2_UT_ASSERT(msg_size > ADDB_UT_VAR_MSG_SIZE
-		     && strlen(addb_msg) == ADDB_UT_VAR_MSG_SIZE-1);
-}
-
 const struct c2_test_suite addb_ut = {
         .ts_name  = "addb-ut",
         .ts_init  = NULL,
@@ -115,7 +85,6 @@ const struct c2_test_suite addb_ut = {
 #ifndef __KERNEL__
                 { "addb", test_addb},
 #endif
-                { "addb_var_msg", test_addb_var_msg_add},
 		{ NULL, NULL }
         }
 };
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index a50c706..c4d6752 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -564,12 +564,6 @@
  */
 #define IOSERVICE_NAME "ioservice"
 
-enum {
-	ADDB_MSG_SMALL_SIZE  = 64,
-	ADDB_MSG_MEDIUM_SIZE = 128,
-	ADDB_MSG_LARGE_SIZE  = 256,
-};
-
 C2_TL_DESCR_DEFINE(stobio, "STOB I/O", static, struct c2_stob_io_desc,
                    siod_linkage,  siod_magic,
                    C2_STOB_IO_DESC_LINK_MAGIC,  C2_STOB_IO_DESC_HEAD_MAGIC);
@@ -585,6 +579,42 @@ C2_TL_DESCR_DEFINE(rpcbulkbufs, "rpc bulk buffers", static,
 		   C2_RPC_BULK_BUF_MAGIC, C2_RPC_BULK_MAGIC);
 C2_TL_DEFINE(rpcbulkbufs, static, struct c2_rpc_bulk_buf);
 
+/* ADDB events for ioservice. */
+C2_ADDB_OPS_DEFINE(C2_IO_FOM_CREATE, const char *rw, uint64_t fid_seq,
+		   uint64_t fid_oid, int ndesc, c2_bcount_t size);
+C2_ADDB_EV_DEFINE(c2_io_fom_create, "io_fom_create",
+		  C2_ADDB_EVENT_IO_FOM_CREATE, AEL_TRACE, C2_IO_FOM_CREATE);
+
+C2_ADDB_OPS_DEFINE(C2_IO_FOM_FINISH, c2_bcount_t size, int rc);
+C2_ADDB_EV_DEFINE(c2_io_fom_finish, "io_fom_finish",
+		  C2_ADDB_EVENT_IO_FOM_FINISH, AEL_TRACE, C2_IO_FOM_FINISH);
+
+C2_ADDB_OPS_DEFINE(C2_BUFFER_ACQUIRE, int nbufs);
+C2_ADDB_EV_DEFINE(c2_buffer_acquire, "buffer_acquire",
+		  C2_ADDB_EVENT_BUFFER_ACQUIRE, AEL_TRACE, C2_BUFFER_ACQUIRE);
+
+C2_ADDB_OPS_DEFINE(C2_BUFFER_RELEASE, int nbufs);
+C2_ADDB_EV_DEFINE(c2_buffer_release, "buffer_release",
+		  C2_ADDB_EVENT_BUFFER_RELEASE, AEL_TRACE, C2_BUFFER_RELEASE);
+
+C2_ADDB_OPS_DEFINE(C2_ZERO_COPY_INIT, int nbuffs);
+C2_ADDB_EV_DEFINE(c2_zero_copy_init, "zero_copy_init",
+		  C2_ADDB_EVENT_ZERO_COPY_INIT, AEL_TRACE, C2_ZERO_COPY_INIT);
+
+C2_ADDB_OPS_DEFINE(C2_ZERO_COPY_FINISH, int rc);
+C2_ADDB_EV_DEFINE(c2_zero_copy_finish, "zero_copy_finish",
+		  C2_ADDB_EVENT_ZERO_COPY_FINISH, AEL_TRACE,
+		  C2_ZERO_COPY_FINISH);
+
+C2_ADDB_OPS_DEFINE(C2_COB_RW_INIT, const char *rw, uint64_t fid_seq,
+		   uint64_t fid_oid, c2_bcount_t size);
+C2_ADDB_EV_DEFINE(c2_cob_rw_init, "cob_rw_init",
+		  C2_ADDB_EVENT_COB_RW_INIT, AEL_TRACE, C2_COB_RW_INIT);
+
+C2_ADDB_OPS_DEFINE(C2_COB_RW_FINISH, int rc);
+C2_ADDB_EV_DEFINE(c2_cob_rw_finish, "cob_rw_finish",
+		  C2_ADDB_EVENT_COB_RW_FINISH, AEL_TRACE, C2_COB_RW_FINISH);
+
 /**
  * @todo
  * This is stuff function.
@@ -1045,7 +1075,6 @@ int c2_io_fom_cob_rw_create(struct c2_fop *fop, struct c2_fom **out)
         struct c2_fop_cob_rw    *rwfop;
         const char              *fom_type_string;
         c2_bcount_t              size;
-	char                     addb_msg[ADDB_MSG_MEDIUM_SIZE];
 
         C2_PRE(fop != NULL);
         C2_PRE(c2_is_io_fop(fop));
@@ -1094,12 +1123,10 @@ int c2_io_fom_cob_rw_create(struct c2_fop *fop, struct c2_fom **out)
 
 	fom_type_string = c2_is_read_fop(fop) ? "I/O READ" : "I/O WRITE";
         size = io_fom_cob_rw_indexvec_size(fop);
-	c2_addb_var_msg_add(&fom->fo_fop->f_addb, &io_fom_addb_loc,
-			    addb_msg, ADDB_MSG_MEDIUM_SIZE,
-			    "FOM: created/type=%s, fid=%lu:%lu, ndesc=%d, "
-			    "size=%d", fom_type_string,
-			    rwfop->crw_fid.f_seq, rwfop->crw_fid.f_oid,
-			    fom_obj->fcrw_ndesc, size);
+	C2_ADDB_ADD(&fom->fo_fop->f_addb, &io_fom_addb_loc,
+		    c2_io_fom_create, (const char *)fom_type_string,
+		    rwfop->crw_fid.f_seq, rwfop->crw_fid.f_oid,
+		    fom_obj->fcrw_ndesc, size);
         return rc;
 }
 
@@ -1126,7 +1153,6 @@ static int io_fom_cob_rw_acquire_net_buffer(struct c2_fom *fom)
         struct c2_fop                *fop;
         struct c2_io_fom_cob_rw      *fom_obj = NULL;
         struct c2_net_transfer_mc     tm;
-	char                          addb_msg[ADDB_MSG_SMALL_SIZE];
 
         C2_PRE(fom != NULL);
         C2_PRE(c2_is_io_fop(fom->fo_fop));
@@ -1199,7 +1225,7 @@ static int io_fom_cob_rw_acquire_net_buffer(struct c2_fom *fom)
                     c2_net_buffer_pool_unlock(fom_obj->fcrw_bp);
 		    C2_ADDB_ADD(&fom->fo_fop->f_addb,
 				&io_fom_addb_loc, c2_addb_trace,
-				(const char *)"FOM: net_buffs_acquire waiting\n");
+				(const char *)"net_buffs_acquire waiting\n");
 
                     return  FSO_WAIT;
             } else if (nb == NULL) {
@@ -1226,10 +1252,8 @@ static int io_fom_cob_rw_acquire_net_buffer(struct c2_fom *fom)
         }
 
         fom_obj->fcrw_batch_size = acquired_net_bufs;
-	c2_addb_var_msg_add(&fom->fo_fop->f_addb, &io_fom_addb_loc,
-			    addb_msg, ADDB_MSG_SMALL_SIZE,
-			    "FOM: net_buffs_acquire/batch_size=%d\n",
-			    fom_obj->fcrw_batch_size);
+	C2_ADDB_ADD(&fom->fo_fop->f_addb, &io_fom_addb_loc,
+		    c2_buffer_acquire, fom_obj->fcrw_batch_size);
         return FSO_AGAIN;
 }
 
@@ -1253,8 +1277,6 @@ static int io_fom_cob_rw_release_net_buffer(struct c2_fom *fom)
         struct c2_fop                  *fop;
         struct c2_io_fom_cob_rw        *fom_obj = NULL;
         struct c2_net_transfer_mc       tm;
-	char                            addb_msg[ADDB_MSG_SMALL_SIZE];
-
 
         C2_PRE(fom != NULL);
         C2_PRE(c2_is_read_fop(fom->fo_fop) || c2_is_write_fop(fom->fo_fop));
@@ -1286,10 +1308,8 @@ static int io_fom_cob_rw_release_net_buffer(struct c2_fom *fom)
         c2_net_buffer_pool_unlock(fom_obj->fcrw_bp);
 
         fom_obj->fcrw_batch_size = acquired_net_bufs;
-	c2_addb_var_msg_add(&fom->fo_fop->f_addb, &io_fom_addb_loc,
-			    addb_msg, ADDB_MSG_SMALL_SIZE,
-			    "FOM: net_buffs_release/batch_size=%d\n",
-			    fom_obj->fcrw_batch_size);
+	C2_ADDB_ADD(&fom->fo_fop->f_addb, &io_fom_addb_loc,
+		    c2_buffer_release, fom_obj->fcrw_batch_size);
 
         if (required_net_bufs == 0)
                fom->fo_phase = FOPH_SUCCESS;
@@ -1320,7 +1340,6 @@ static int io_fom_cob_rw_initiate_zero_copy(struct c2_fom *fom)
         struct c2_net_buf_desc    *net_desc;
         struct c2_net_domain      *dom;
         uint32_t                   buffers_added = 0;
-	char                       addb_msg[ADDB_MSG_SMALL_SIZE];
 
         C2_PRE(fom != NULL);
         C2_PRE(c2_is_io_fop(fom->fo_fop));
@@ -1396,10 +1415,9 @@ static int io_fom_cob_rw_initiate_zero_copy(struct c2_fom *fom)
                 return FSO_AGAIN;
         }
 
-	c2_addb_var_msg_add(&fom->fo_fop->f_addb, &io_fom_addb_loc,
-			    addb_msg, ADDB_MSG_SMALL_SIZE,
-			    "FOM: zero_copy_initiated/batch_size=%d\n",
-			    fom_obj->fcrw_batch_size);
+	C2_ADDB_ADD(&fom->fo_fop->f_addb, &io_fom_addb_loc,
+		     c2_zero_copy_init, buffers_added);
+
         return FSO_WAIT;
 }
 
@@ -1442,7 +1460,7 @@ static int io_fom_cob_rw_zero_copy_finish(struct c2_fom *fom)
         c2_rpc_bulk_fini(rbulk);
 
 	C2_ADDB_ADD(&fom->fo_fop->f_addb, &io_fom_addb_loc,
-		    c2_addb_trace, (const char *)"FOM: zero_copy_finished\n");
+		    c2_zero_copy_init, rbulk->rb_rc);
 
         return FSO_AGAIN;
 }
@@ -1476,7 +1494,6 @@ static int io_fom_cob_rw_io_launch(struct c2_fom *fom)
 	struct c2_io_indexvec    wire_ivec;
 	struct c2_stob_domain	*fom_stdom;
 	struct c2_fop_file_fid	*ffid;
-	char                     addb_msg[ADDB_MSG_SMALL_SIZE];
 
 	C2_PRE(fom != NULL);
         C2_PRE(c2_is_io_fop(fom->fo_fop));
@@ -1604,6 +1621,11 @@ static int io_fom_cob_rw_io_launch(struct c2_fom *fom)
                         break;
                 }
 
+		C2_ADDB_ADD(&fom->fo_fop->f_addb, &io_fom_addb_loc,
+			    c2_cob_rw_init, c2_is_read_fop(fop) ?
+			    (const char *)"I/O READ" :(const char *)"I/O WRITE",
+			    ffid->f_seq, ffid->f_oid, ivec_count);
+
                 fom_obj->fcrw_num_stobio_launched++;
                 stobio_tlink_init(stio_desc);
                 stobio_tlist_add(&fom_obj->fcrw_stio_list, stio_desc);
@@ -1635,11 +1657,6 @@ static int io_fom_cob_rw_io_launch(struct c2_fom *fom)
 
                 c2_mutex_unlock(&fom_obj->fcrw_stio_mutex);
 
-		c2_addb_var_msg_add(&fom->fo_fop->f_addb, &io_fom_addb_loc,
-				    addb_msg, ADDB_MSG_SMALL_SIZE,
-				    "FOM: stob_io_launched/n_iocount=%d\n",
-				    fom_obj->fcrw_num_stobio_launched);
-
 	        return FSO_WAIT;
         }
 
@@ -1710,12 +1727,14 @@ static int io_fom_cob_rw_io_finish(struct c2_fom *fom)
         if (fom->fo_rc != 0) {
 	        fom->fo_phase = FOPH_FAILURE;
                 C2_ADDB_ADD(&fom->fo_fop->f_addb, &io_fom_addb_loc,
-                            c2_addb_func_fail, (const char *)"io_fom_cob_rw_io_finish",
-                            fom->fo_rc);
+                            c2_addb_func_fail,
+			    (const char *)"io_fom_cob_rw_io_finish.",
+			    fom->fo_rc);
 	        return FSO_AGAIN;
         }
+
 	C2_ADDB_ADD(&fom->fo_fop->f_addb, &io_fom_addb_loc,
-		    c2_addb_trace, (const char *)"FOM: stob_io_finished.\n");
+		    c2_cob_rw_finish, fom->fo_rc);
 
         return FSO_AGAIN;
 }
@@ -1733,7 +1752,6 @@ static int c2_io_fom_cob_rw_state(struct c2_fom *fom)
         int                                      rc = 0;
         struct c2_io_fom_cob_rw                 *fom_obj;
         struct c2_io_fom_cob_rw_state_transition st;
-	char                                     addb_msg[ADDB_MSG_SMALL_SIZE];
 
         C2_PRE(fom != NULL);
         C2_PRE(c2_is_io_fop(fom->fo_fop));
@@ -1763,10 +1781,6 @@ static int c2_io_fom_cob_rw_state(struct c2_fom *fom)
                 rwrep = io_rw_rep_get(fom->fo_rep_fop);
                 rwrep->rwr_rc = fom->fo_rc;
                 rwrep->rwr_count = fom_obj->fcrw_bytes_transfered;
-		c2_addb_var_msg_add(&fom->fo_fop->f_addb, &io_fom_addb_loc,
-				    addb_msg, ADDB_MSG_SMALL_SIZE,
-				    "FOM: set reply/io_count=%lu, rc=%d\n",
-				    rwrep->rwr_count, rwrep->rwr_rc);
                 return rc;
         }
 
@@ -1794,7 +1808,6 @@ static void c2_io_fom_cob_rw_fini(struct c2_fom *fom)
         struct c2_net_buffer      *nb = NULL;
         struct c2_stob_io_desc    *stio_desc = NULL;
         struct c2_net_transfer_mc  tm;
-	char                       addb_msg[ADDB_MSG_SMALL_SIZE];
 
         C2_PRE(fom != NULL);
 
@@ -1840,10 +1853,9 @@ static void c2_io_fom_cob_rw_fini(struct c2_fom *fom)
 
         c2_mutex_fini(&fom_obj->fcrw_stio_mutex);
 
-	c2_addb_var_msg_add(&fom->fo_fop->f_addb, &io_fom_addb_loc,
-			    addb_msg, ADDB_MSG_SMALL_SIZE,
-			    "FOM: finished/size=%lu, rc=%d",
-			    fom_obj->fcrw_bytes_transfered, fom->fo_rc);
+	C2_ADDB_ADD(&fom->fo_fop->f_addb, &io_fom_addb_loc,
+		    c2_io_fom_finish, fom_obj->fcrw_bytes_transfered,
+		    fom->fo_rc);
         c2_fom_fini(fom);
 
         c2_free(fom_obj);
diff --git a/lib/param.h b/lib/param.h
index c63067b..8d00c78 100644
--- a/lib/param.h
+++ b/lib/param.h
@@ -25,10 +25,14 @@
 #include <stddef.h>
 #include "lib/cdefs.h"
 
-#define C2_ARG_DECL(...)						\
-	C2_CAT(C2_ARG_DECL, C2_COUNT_PARAMS(__VA_ARGS__))(__VA_ARGS__)
+enum {
+	C2_PARAM_ARGC_MAX = 9
+};
 
-#define __ARG_DECL(name, NR, DECL, OFFSET, SIZEOF)			\
+#define C2_VAR_BODY_DECL(...)						\
+	C2_CAT(C2_VAR_BODY_DECL, C2_COUNT_PARAMS(__VA_ARGS__))(__VA_ARGS__)
+
+#define __VAR_BODY_DECL(name, NR, DECL, OFFSET, SIZEOF)			\
 	struct name DECL; 						\
 	static const int _offset[NR] = OFFSET;				\
 	static const int _sizeof[NR] = SIZEOF;
@@ -44,84 +48,84 @@ C2_CASSERT(!C2_HAS_TYPE(a, const char []) &&                            \
 
 /**
  * PARAM_GROUP() is used to pass { x0, ..., xn } as a single argument to
- * __ARG_DECL().
+ * __VAR_BODY_DECL().
  */
 #define PARAM_GROUP(...) __VA_ARGS__
 
-#define C2_ARG_DECL0(name) __ARG_DECL(name, 0, { ; }, {}, {});
+#define C2_VAR_BODY_DECL0(name) __VAR_BODY_DECL(name, 0, { ; }, {}, {});
 
-#define C2_ARG_DECL1(name, a0)						\
-   __ARG_DECL(name, 1,							\
+#define C2_VAR_BODY_DECL1(name, a0)					\
+   __VAR_BODY_DECL(name, 1,						\
    { PARAM_TYPEOF(a0, v0); },						\
-   { PARAM_OFFSETOF(name, v0) },						\
+   { PARAM_OFFSETOF(name, v0) },					\
    { PARAM_SIZEOF(a0) });						\
    PARAM_CHECK(a0);
 
-#define C2_ARG_DECL2(name, a0, a1)					\
-   __ARG_DECL(name, 2,							\
+#define C2_VAR_BODY_DECL2(name, a0, a1)					\
+   __VAR_BODY_DECL(name, 2,						\
    { PARAM_TYPEOF(a0, v0); PARAM_TYPEOF(a1, v1); },			\
-   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1) }),		\
+   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1) }),	\
    PARAM_GROUP({ PARAM_SIZEOF(a0), PARAM_SIZEOF(a1) }));		\
    PARAM_CHECK(a0); PARAM_CHECK(a1);
 
-#define C2_ARG_DECL3(name, a0, a1, a2)					\
-   __ARG_DECL(name, 3,							\
+#define C2_VAR_BODY_DECL3(name, a0, a1, a2)				\
+   __VAR_BODY_DECL(name, 3,						\
    { PARAM_TYPEOF(a0, v0); PARAM_TYPEOF(a1, v1);			\
      PARAM_TYPEOF(a2, v2); },						\
-   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),		\
-		 PARAM_OFFSETOF(name, v2) }),					\
+   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),	\
+		 PARAM_OFFSETOF(name, v2) }),				\
    PARAM_GROUP({ PARAM_SIZEOF(a0), PARAM_SIZEOF(a1),			\
 		 PARAM_SIZEOF(a2) }));					\
    PARAM_CHECK(a0); PARAM_CHECK(a1); PARAM_CHECK(a2);
 
-#define C2_ARG_DECL4(name, a0, a1, a2, a3)				\
-   __ARG_DECL(name, 4,							\
+#define C2_VAR_BODY_DECL4(name, a0, a1, a2, a3)				\
+   __VAR_BODY_DECL(name, 4,						\
    { PARAM_TYPEOF(a0, v0); PARAM_TYPEOF(a1, v1);			\
      PARAM_TYPEOF(a2, v2); PARAM_TYPEOF(a3, v3); },			\
-   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),		\
-		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3) }),		\
+   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),	\
+		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3) }),	\
    PARAM_GROUP({ PARAM_SIZEOF(a0), PARAM_SIZEOF(a1), 			\
 		 PARAM_SIZEOF(a2), PARAM_SIZEOF(a3) }));		\
    PARAM_CHECK(a0); PARAM_CHECK(a1); PARAM_CHECK(a2); PARAM_CHECK(a3);
 
-#define C2_ARG_DECL5(name, a0, a1, a2, a3, a4)				\
-   __ARG_DECL(name, 5,							\
+#define C2_VAR_BODY_DECL5(name, a0, a1, a2, a3, a4)			\
+   __VAR_BODY_DECL(name, 5,						\
    { PARAM_TYPEOF(a0, v0); PARAM_TYPEOF(a1, v1);			\
      PARAM_TYPEOF(a2, v2); PARAM_TYPEOF(a3, v3);			\
      PARAM_TYPEOF(a4, v4); },						\
-   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),		\
-		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3),		\
-                 PARAM_OFFSETOF(name, v4) }),					\
+   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),	\
+		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3),	\
+                 PARAM_OFFSETOF(name, v4) }),				\
    PARAM_GROUP({ PARAM_SIZEOF(a0), PARAM_SIZEOF(a1),			\
 		 PARAM_SIZEOF(a2), PARAM_SIZEOF(a3),			\
-                 PARAM_SIZEOF(a4) }));		\
+                 PARAM_SIZEOF(a4) }));					\
    PARAM_CHECK(a0); PARAM_CHECK(a1); PARAM_CHECK(a2); PARAM_CHECK(a3);	\
    PARAM_CHECK(a4);
 
-#define C2_ARG_DECL6(name, a0, a1, a2, a3, a4, a5)			\
-   __ARG_DECL(name, 6,							\
+#define C2_VAR_BODY_DECL6(name, a0, a1, a2, a3, a4, a5)			\
+   __VAR_BODY_DECL(name, 6,						\
    { PARAM_TYPEOF(a0, v0); PARAM_TYPEOF(a1, v1);			\
      PARAM_TYPEOF(a2, v2);PARAM_TYPEOF(a3, v3);				\
      PARAM_TYPEOF(a4, v4); PARAM_TYPEOF(a5, v5); },			\
-   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),		\
-		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3),		\
-                 PARAM_OFFSETOF(name, v4), PARAM_OFFSETOF(name, v5) }),		\
+   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),	\
+		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3),	\
+                 PARAM_OFFSETOF(name, v4), PARAM_OFFSETOF(name, v5) }),	\
    PARAM_GROUP({ PARAM_SIZEOF(a0), PARAM_SIZEOF(a1),			\
 		 PARAM_SIZEOF(a2), PARAM_SIZEOF(a3),			\
                  PARAM_SIZEOF(a4), PARAM_SIZEOF(a5) }));		\
    PARAM_CHECK(a0); PARAM_CHECK(a1); PARAM_CHECK(a2); PARAM_CHECK(a3);	\
    PARAM_CHECK(a4); PARAM_CHECK(a5);
 
-#define C2_ARG_DECL7(name, a0, a1, a2, a3, a4, a5, a6)			\
-   __ARG_DECL(name, 7,							\
+#define C2_VAR_BODY_DECL7(name, a0, a1, a2, a3, a4, a5, a6)		\
+   __VAR_BODY_DECL(name, 7,						\
    { PARAM_TYPEOF(a0, v0); PARAM_TYPEOF(a1, v1);			\
      PARAM_TYPEOF(a2, v2); PARAM_TYPEOF(a3, v3);			\
      PARAM_TYPEOF(a4, v4); PARAM_TYPEOF(a5, v5);			\
      PARAM_TYPEOF(a6, v6); },						\
-   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),		\
-		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3),		\
-                 PARAM_OFFSETOF(name, v4), PARAM_OFFSETOF(name, v5),		\
-                 PARAM_OFFSETOF(name, v6) }),					\
+   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),	\
+		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3),	\
+                 PARAM_OFFSETOF(name, v4), PARAM_OFFSETOF(name, v5),	\
+                 PARAM_OFFSETOF(name, v6) }),				\
    PARAM_GROUP({ PARAM_SIZEOF(a0), PARAM_SIZEOF(a1),			\
 		 PARAM_SIZEOF(a2), PARAM_SIZEOF(a3),			\
                  PARAM_SIZEOF(a4), PARAM_SIZEOF(a5),			\
@@ -129,16 +133,16 @@ C2_CASSERT(!C2_HAS_TYPE(a, const char []) &&                            \
    PARAM_CHECK(a0); PARAM_CHECK(a1); PARAM_CHECK(a2); PARAM_CHECK(a3);	\
    PARAM_CHECK(a4); PARAM_CHECK(a5); PARAM_CHECK(a6);
 
-#define C2_ARG_DECL8(name, a0, a1, a2, a3, a4, a5, a6, a7)		\
-   __ARG_DECL(name, 8,							\
+#define C2_VAR_BODY_DECL8(name, a0, a1, a2, a3, a4, a5, a6, a7)		\
+   __VAR_BODY_DECL(name, 8,						\
    { PARAM_TYPEOF(a0, v0); PARAM_TYPEOF(a1, v1);			\
      PARAM_TYPEOF(a2, v2); PARAM_TYPEOF(a3, v3);			\
      PARAM_TYPEOF(a4, v4); PARAM_TYPEOF(a5, v5);			\
      PARAM_TYPEOF(a6, v6); PARAM_TYPEOF(a7, v7); },			\
-   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),		\
-		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3),		\
-                 PARAM_OFFSETOF(name, v4), PARAM_OFFSETOF(name, v5),		\
-                 PARAM_OFFSETOF(name, v6), PARAM_OFFSETOF(name, v7) }),		\
+   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),	\
+		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3),	\
+                 PARAM_OFFSETOF(name, v4), PARAM_OFFSETOF(name, v5),	\
+                 PARAM_OFFSETOF(name, v6), PARAM_OFFSETOF(name, v7) }),	\
    PARAM_GROUP({ PARAM_SIZEOF(a0), PARAM_SIZEOF(a1),			\
 		 PARAM_SIZEOF(a2), PARAM_SIZEOF(a3),			\
                  PARAM_SIZEOF(a4), PARAM_SIZEOF(a5),			\
@@ -146,18 +150,18 @@ C2_CASSERT(!C2_HAS_TYPE(a, const char []) &&                            \
    PARAM_CHECK(a0); PARAM_CHECK(a1); PARAM_CHECK(a2); PARAM_CHECK(a3);	\
    PARAM_CHECK(a4); PARAM_CHECK(a5); PARAM_CHECK(a6); PARAM_CHECK(a7);
 
-#define C2_ARG_DECL9(name, a0, a1, a2, a3, a4, a5, a6, a7, a8)		\
-   __ARG_DECL(name, 9,							\
+#define C2_VAR_BODY_DECL9(name, a0, a1, a2, a3, a4, a5, a6, a7, a8)	\
+   __VAR_BODY_DECL(name, 9,						\
    { PARAM_TYPEOF(a0, v0); PARAM_TYPEOF(a1, v1); 			\
      PARAM_TYPEOF(a2, v2); PARAM_TYPEOF(a3, v3); 			\
      PARAM_TYPEOF(a4, v4); PARAM_TYPEOF(a5, v5);			\
      PARAM_TYPEOF(a6, v6); PARAM_TYPEOF(a7, v7);			\
      PARAM_TYPEOF(a8, v8); PARAM_TYPEOF(a9, v9); },			\
-   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),		\
-		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3),		\
-               	 PARAM_OFFSETOF(name, v4), PARAM_OFFSETOF(name, v5),		\
-		 PARAM_OFFSETOF(name, v6), PARAM_OFFSETOF(name, v7),		\
-                 PARAM_OFFSETOF(name, v8) }),					\
+   PARAM_GROUP({ PARAM_OFFSETOF(name, v0), PARAM_OFFSETOF(name, v1),	\
+		 PARAM_OFFSETOF(name, v2), PARAM_OFFSETOF(name, v3),	\
+               	 PARAM_OFFSETOF(name, v4), PARAM_OFFSETOF(name, v5),	\
+		 PARAM_OFFSETOF(name, v6), PARAM_OFFSETOF(name, v7),	\
+                 PARAM_OFFSETOF(name, v8) }),				\
    PARAM_GROUP({ PARAM_SIZEOF(a0), PARAM_SIZEOF(a1),			\
 		 PARAM_SIZEOF(a2), PARAM_SIZEOF(a3),			\
                	 PARAM_SIZEOF(a4), PARAM_SIZEOF(a5),			\
diff --git a/lib/trace.c b/lib/trace.c
index 17bd0a4..c9313e7 100644
--- a/lib/trace.c
+++ b/lib/trace.c
@@ -194,7 +194,7 @@ c2_trace_record_print(const struct c2_trace_rec_header *trh, const void *buf)
 		uint16_t v16;
 		uint32_t v32;
 		uint64_t v64;
-	} v[C2_TRACE_ARGC_MAX];
+	} v[C2_PARAM_ARGC_MAX];
 	char subsys_map_str[sizeof(uint64_t) * CHAR_BIT +3];
 
 	c2_console_printf("%8.8llu %15.15llu %5.5x %-18s %-20s "
diff --git a/lib/trace.h b/lib/trace.h
index 95eec98..7d48ef1 100644
--- a/lib/trace.h
+++ b/lib/trace.h
@@ -273,9 +273,9 @@ void c2_console_vprintf(const char *fmt, va_list ap);
  * @note The variadic arguments must match the number
  *       and types of fields in the format.
  */
-#define C2_TRACE_POINT(FMT, ...)		\
+#define C2_TRACE_POINT(FMT, ...)					\
 ({									\
-	C2_ARG_DECL(t_body,##  __VA_ARGS__)				\
+	C2_VAR_BODY_DECL(t_body,##  __VA_ARGS__)			\
 	static const struct c2_trace_descr td = {			\
                 .td_fmt    = (FMT),					\
 		.td_func   = __func__,					\
@@ -295,10 +295,6 @@ void c2_console_vprintf(const char *fmt, va_list ap);
 #  define C2_TRACE_SUBSYSTEM C2_TRACE_SUBSYS_OTHER
 #endif
 
-enum {
-	C2_TRACE_ARGC_MAX = 9
-};
-
 /** @} end of trace group */
 
 /* __COLIBRI_LIB_TRACE_H__ */
diff --git a/rpc/rpc2.c b/rpc/rpc2.c
index 925b93b..6d193b9 100644
--- a/rpc/rpc2.c
+++ b/rpc/rpc2.c
@@ -79,13 +79,13 @@ static const struct c2_addb_loc rpc_machine_addb_loc = {
 	        .al_name = "rpc-machine"
 };
 
-C2_ADDB_OPS_DEFINE(C2_ADDB_RPCM_FUNC_CALL, const char *fname, int rc);
+C2_ADDB_OPS_DEFINE(C2_ADDB_RPC_MACHINE_FUNC_CALL, const char *fname, int rc);
 
 C2_ADDB_EV_DEFINE(rpc_machine_func_fail, "rpc_machine_func_fail",
-		  C2_ADDB_EVENT_RPCM_FUNC_FAIL, AEL_ERROR,
-		  C2_ADDB_RPCM_FUNC_CALL);
+		  C2_ADDB_EVENT_RPC_MACHINE_FUNC_FAIL, AEL_ERROR,
+		  C2_ADDB_RPC_MACHINE_FUNC_CALL);
 #define ADDB_FUNC_FAIL(ctx, loc, ev, name, rc)                          \
-        C2_ADDB_ADD(ctx, loc, ev, (const char *)name, rc)  
+        C2_ADDB_ADD(ctx, loc, ev, (const char *)name, rc)
 
 /**
    Buffer callback for buffers added by rpc layer for receiving messages.
-- 
1.8.3.2


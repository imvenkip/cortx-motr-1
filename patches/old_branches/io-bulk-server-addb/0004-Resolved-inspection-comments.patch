From c8ca302a4f9c9641546bc1e527c200c87a7c9697 Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Mon, 9 Apr 2012 17:48:20 +0530
Subject: [PATCH 04/11] - Resolved inspection comments.

---
 addb/addb.h         | 11 ++++++++---
 addb/ut/addb.c      | 11 ++++++++++-
 ioservice/io_foms.c |  8 ++++----
 3 files changed, 22 insertions(+), 8 deletions(-)

diff --git a/addb/addb.h b/addb/addb.h
index ab7b728..b7a4839 100644
--- a/addb/addb.h
+++ b/addb/addb.h
@@ -104,12 +104,17 @@ int c2_addb_choose_store_media(enum c2_addb_rec_store_type type, ...);
 
 /**
  * Adds variable addb messages.
- * @note This interface adds addb trace event messages.
+ * ADDB message is fist formatted into the pre-allocated buffer according
+ * to the custom defined format. Then if that succeeds, the formatted string
+ * is added into addb as a trace message. Caller is supposed to allocate
+ * msgbuf big enough to accommodate the formatted message. The output will
+ * be trimmed if it exceeds the maximal size of the msgbuf.
+ *
  * @param ctx pointer to addb context.
  * @param loc event location (sub-system).
- * @param msgbuf message buffer passed by caller to copy formated message.
+ * @param msgbuf message buffer passed by caller to receive formatted message.
  * @param msglen length of message buffer.
- * @param fmt formatted string representing custom made message.
+ * @param fmt format string representing custom made message.
  * @return On success it returns actual formatted message length, and negative
  *         value returned on error. Most of the cases it is not required to
  *         to check return values by caller. But it's upto caller, if caller
diff --git a/addb/ut/addb.c b/addb/ut/addb.c
index 2cbda27..e5ec7e3 100644
--- a/addb/ut/addb.c
+++ b/addb/ut/addb.c
@@ -82,7 +82,7 @@ static void test_addb_var_msg_add(void)
 	char addb_msg[ADDB_UT_VAR_MSG_SIZE];
 
 	memset(message, 'A', ADDB_UT_VAR_MSG_SIZE);
-	message[ADDB_UT_VAR_MSG_SIZE-1] = 0;
+	message[ADDB_UT_VAR_MSG_SIZE-1] = '\0';
 
 	c2_addb_ctx_init(&addb_ut_ctx, &c2_addb_ut_ctx, &c2_addb_global_ctx);
 
@@ -93,6 +93,15 @@ static void test_addb_var_msg_add(void)
 
 	C2_UT_ASSERT(msg_size == ADDB_UT_VAR_MSG_SIZE-1);
 
+	/* Truncate message and returns actual size of formated message. */
+	msg_size = c2_addb_var_msg_add(&addb_ut_ctx, &c2_addb_ut_loc, addb_msg,
+				       ADDB_UT_VAR_MSG_SIZE,
+				       "msglen = %d, %s",
+				       strlen(message), message);
+
+	C2_UT_ASSERT(msg_size > ADDB_UT_VAR_MSG_SIZE
+		     && strlen(addb_msg) == ADDB_UT_VAR_MSG_SIZE-1);
+
 	c2_addb_choose_default_level_console(AEL_WARN);
 }
 
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index 8147fc0..64465a8 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -923,7 +923,7 @@ static int  io_fom_cob_rw_indexvec_wire2mem(struct c2_fom         *fom,
 
 static int io_fom_cob_rw_indexvec_size(struct c2_fop *fop)
 {
-	int                      i,j;
+	uint32_t                 i,j;
 	c2_bcount_t              size = 0;
 	struct c2_fop_cob_rw    *rwfop;
 
@@ -931,9 +931,9 @@ static int io_fom_cob_rw_indexvec_size(struct c2_fop *fop)
 
 	rwfop = io_rw_get(fop);
         for (i = 0; i < rwfop->crw_desc.id_nr; i++) {
-		struct c2_io_indexvec wire_ivec = rwfop->crw_ivecs.cis_ivecs[i];
-		for (j = 0; j < wire_ivec.ci_nr; j++) {
-			size += wire_ivec.ci_iosegs[j].ci_count;
+		struct c2_io_indexvec *wire_ivec = &rwfop->crw_ivecs.cis_ivecs[i];
+		for (j = 0; j < wire_ivec->ci_nr; j++) {
+			size += wire_ivec->ci_iosegs[j].ci_count;
 		}
 	}
 
-- 
1.8.3.2


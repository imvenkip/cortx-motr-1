From 4a4aea2a1f1886f02d0a27fb9eb84babab09e7d5 Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Wed, 13 Nov 2013 17:42:12 +0530
Subject: [PATCH 123/159]  - Fixed fom_monitor registration from client as well
 as server issue.

---
 fop/fom.c | 46 +++++++++++++++++++++++++++++-----------------
 fop/fom.h |  5 +++++
 2 files changed, 34 insertions(+), 17 deletions(-)

diff --git a/fop/fom.c b/fop/fom.c
index 8483def..cd27e2c 100644
--- a/fop/fom.c
+++ b/fop/fom.c
@@ -171,19 +171,19 @@ M0_TL_DEFINE(wail, static, struct m0_fom);
 static bool fom_wait_time_is_out(const struct m0_fom_domain *dom,
                                  const struct m0_fom *fom);
 static int loc_thr_create(struct m0_fom_locality *loc);
+static void __fom_domain_fini(struct m0_fom_domain *dom);
 
 /**
  * Fom domain operations.
  * @todo Support fom timeout functionality.
  */
+#undef FOM_RATE_KEY
+#define FOM_RATE_KEY(reqh)	(reqh->rh_fom_dom.fd_fop_rate_monitor_key)
+
 static struct m0_fom_domain_ops m0_fom_dom_ops = {
 	.fdo_time_is_out = fom_wait_time_is_out
 };
 
-struct m0_addb_monitor fop_rate_monitor;
-
-static uint32_t fop_rate_monitor_key;
-
 static struct fop_rate_stats_sum_rec {
 	uint64_t frssr_fop_rate;
 } fop_rate_stats_sum;
@@ -194,7 +194,7 @@ fop_rate_monitor_sum_rec(const struct m0_addb_monitor *mon,
 {
 	struct m0_addb_sum_rec *sum_rec;
 
-	sum_rec = m0_reqh_lockers_get(reqh, fop_rate_monitor_key);
+	sum_rec = m0_reqh_lockers_get(reqh, FOM_RATE_KEY(reqh));
 	M0_ASSERT(sum_rec != NULL);
 
 	return sum_rec;
@@ -213,7 +213,7 @@ static void fop_rate_monitor_watch(const struct m0_addb_monitor *monitor,
 
 	if (m0_addb_rec_rid_to_id(rec->ar_rid) == M0_ADDB_RECID_FOP_RATE_CNTR) {
 		m0_rwlock_read_lock(&reqh->rh_rwlock);
-		sum_rec = m0_reqh_lockers_get(reqh, fop_rate_monitor_key);
+		sum_rec = m0_reqh_lockers_get(reqh, FOM_RATE_KEY(reqh));
 		m0_rwlock_read_unlock(&reqh->rh_rwlock);
 		M0_ASSERT(sum_rec != NULL);
 
@@ -239,7 +239,8 @@ const struct m0_addb_monitor_ops fop_rate_monitor_ops = {
 };
 
 static int fop_rate_monitor_init(struct m0_reqh         *reqh,
-				 struct m0_addb_monitor *monitor)
+				 struct m0_addb_monitor *monitor,
+				 uint32_t               *fop_rate_monitor_key)
 {
 #undef FOP_RATE_STATS_NR
 #define FOP_RATE_STATS_NR (sizeof(fop_rate_stats_sum) / sizeof(uint64_t))
@@ -253,14 +254,14 @@ static int fop_rate_monitor_init(struct m0_reqh         *reqh,
 		return -ENOMEM;
 
 	m0_addb_monitor_init(monitor, &fop_rate_monitor_ops);
-	m0_addb_monitor_sum_rec_init(sum_rec, &m0_addb_rt_fop_rate,
+	m0_addb_monitor_sum_rec_init(sum_rec, &m0_addb_rt_fop_rate_cntr,
 				     (uint64_t *)&fop_rate_stats_sum,
 				     FOP_RATE_STATS_NR);
 
-	fop_rate_monitor_key = m0_reqh_lockers_allot();
+	*fop_rate_monitor_key = m0_reqh_lockers_allot();
 
 	m0_rwlock_write_lock(&reqh->rh_rwlock);
-	m0_reqh_lockers_set(reqh, fop_rate_monitor_key, sum_rec);
+	m0_reqh_lockers_set(reqh, *fop_rate_monitor_key, sum_rec);
 	m0_rwlock_write_unlock(&reqh->rh_rwlock);
 
 	m0_addb_monitor_add(reqh, monitor);
@@ -268,14 +269,15 @@ static int fop_rate_monitor_init(struct m0_reqh         *reqh,
 }
 
 static void fop_rate_monitor_fini(struct m0_reqh         *reqh,
-				  struct m0_addb_monitor *monitor)
+				  struct m0_addb_monitor *monitor,
+				  uint32_t                fop_rate_monitor_key)
 {
 	struct m0_addb_sum_rec *sum_rec;
 
 	M0_PRE(monitor != NULL && reqh != NULL);
 
 	sum_rec = monitor->am_ops->amo_sum_rec(monitor, reqh);
-	m0_addb_monitor_del(reqh, &fop_rate_monitor);
+	m0_addb_monitor_del(reqh, monitor);
 
 	m0_rwlock_write_lock(&reqh->rh_rwlock);
 	m0_reqh_lockers_clear(reqh, fop_rate_monitor_key);
@@ -284,7 +286,7 @@ static void fop_rate_monitor_fini(struct m0_reqh         *reqh,
 	m0_addb_monitor_sum_rec_fini(sum_rec);
 	m0_free(sum_rec);
 
-	m0_addb_monitor_fini(&fop_rate_monitor);
+	m0_addb_monitor_fini(monitor);
 }
 static void group_lock(struct m0_fom_locality *loc)
 {
@@ -1036,7 +1038,7 @@ M0_INTERNAL int m0_fom_domain_init(struct m0_fom_domain *dom)
 		loc->fl_dom = dom;
 		result = loc_init(loc, cpu, cpu_max);
 		if (result != 0) {
-			m0_fom_domain_fini(dom);
+			__fom_domain_fini(dom);
 			break;
 		}
 		m0_locality_set(cpu, &(struct m0_locality){
@@ -1047,16 +1049,18 @@ M0_INTERNAL int m0_fom_domain_init(struct m0_fom_domain *dom)
 	}
 
 	m0_bitmap_fini(&onln_cpu_map);
-	return fop_rate_monitor_init(dom->fd_reqh, &fop_rate_monitor);
+	dom->fd_fop_rate_monitor_key = 0;
+	return fop_rate_monitor_init(dom->fd_reqh,
+				     &dom->fd_fop_rate_monitor,
+				     &dom->fd_fop_rate_monitor_key);
 }
 
-M0_INTERNAL void m0_fom_domain_fini(struct m0_fom_domain *dom)
+static void __fom_domain_fini(struct m0_fom_domain *dom)
 {
 	int fd_loc_nr;
 
 	M0_ASSERT(m0_fom_domain_invariant(dom));
 
-	fop_rate_monitor_fini(dom->fd_reqh, &fop_rate_monitor);
 	fd_loc_nr = dom->fd_localities_nr;
 	while (fd_loc_nr > 0) {
 		loc_fini(&dom->fd_localities[fd_loc_nr - 1]);
@@ -1066,6 +1070,14 @@ M0_INTERNAL void m0_fom_domain_fini(struct m0_fom_domain *dom)
 	m0_free(dom->fd_localities);
 }
 
+M0_INTERNAL void m0_fom_domain_fini(struct m0_fom_domain *dom)
+{
+	__fom_domain_fini(dom);
+	fop_rate_monitor_fini(dom->fd_reqh,
+			      &dom->fd_fop_rate_monitor,
+			      dom->fd_fop_rate_monitor_key);
+}
+
 M0_INTERNAL bool m0_fom_domain_is_idle(const struct m0_fom_domain *dom)
 {
 	return m0_forall(i, dom->fd_localities_nr,
diff --git a/fop/fom.h b/fop/fom.h
index b4d0ff3..ddfbf16 100644
--- a/fop/fom.h
+++ b/fop/fom.h
@@ -210,6 +210,7 @@ Doc?docid=0AQaCw6YRYSVSZGZmMzV6NzJfMTNkOGNjZmdnYg
 #include "dtm/dtm.h"           /* m0_dtx */
 #include "stob/stob.h"
 #include "reqh/reqh_service.h"
+#include "addb/addb_monitor.h"
 
 /* export */
 struct m0_fom_domain;
@@ -340,6 +341,10 @@ struct m0_fom_domain {
 	struct m0_reqh			*fd_reqh;
 	/** Addb context for fom */
 	struct m0_addb_ctx               fd_addb_ctx;
+	/** fop rate monitor key */
+	uint32_t			 fd_fop_rate_monitor_key;
+	/** fop rate monitor */
+	struct m0_addb_monitor           fd_fop_rate_monitor;
 };
 
 /** Operations vector attached to a domain. */
-- 
1.8.3.2


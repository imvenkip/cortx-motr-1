From 8e9d5c4af1cde0976772ccad28559310cd251320 Mon Sep 17 00:00:00 2001
From: Rohan Puri <rohan_puri@xyratex.com>
Date: Thu, 17 Oct 2013 16:34:30 +0530
Subject: [PATCH 103/159] Changes summary : - 1. Fixed BUG: Since fops(items)
 sent to stats service are 'one way', we do not need a rpc session to be   
 established, only rpc connection would suffice, removed the session relevant
 code. 2. Fixed BUG: Instead of making use of m0_rpc_post(), make use of
 m0_rpc_oneway_item_post(), since we    do not expect reply of these items. 3.
 Fixed BUG: In m0_addb_monitor_summaries_post(), no of stats that are sent in
 a fop was not set. Its    now set to correct number.

---
 addb/addb_monitor.c         | 77 ++++++++++++++++++---------------------------
 addb/addb_monitor.h         |  7 ++---
 m0t1fs/linux_kernel/super.c |  3 +-
 3 files changed, 34 insertions(+), 53 deletions(-)

diff --git a/addb/addb_monitor.c b/addb/addb_monitor.c
index 30ea955..bd5fac2 100644
--- a/addb/addb_monitor.c
+++ b/addb/addb_monitor.c
@@ -169,6 +169,24 @@ M0_TL_DEFINE(addb_mon, M0_INTERNAL, struct m0_addb_monitor);
 struct m0_addb_ctx m0_addb_monitors_mod_ctx;
 
 #ifndef __KERNEL__
+static int addb_mon_rpc_client_connect(struct m0_rpc_conn    *conn,
+				       struct m0_rpc_machine *rpc_mach,
+				       const char            *remote_addr,
+				       uint64_t               max_rpcs_in_flight)
+{
+	struct m0_net_end_point *ep;
+	int                      rc;
+
+	rc = m0_net_end_point_create(&ep, &rpc_mach->rm_tm, remote_addr);
+	if (rc != 0)
+		M0_RETURN(rc);
+	rc = m0_rpc_conn_create(conn, ep, rpc_mach, max_rpcs_in_flight,
+				M0_TIME_NEVER);
+	m0_net_end_point_put(ep);
+
+	M0_RETURN(rc);
+}
+
 M0_INTERNAL int m0_addb_monitor_stats_svc_conn_init(struct m0_reqh *reqh)
 {
 	int                           rc = 0;
@@ -201,13 +219,6 @@ M0_INTERNAL int m0_addb_monitor_stats_svc_conn_init(struct m0_reqh *reqh)
 		m0_mutex_unlock(&mon_ctx->amc_mutex);
 		M0_RETURN(-ENOMEM);
 	}
-	STATS_ALLOC_PTR(mon_ctx->amc_stats_session, &m0_addb_monitors_mod_ctx,
-			SVC_CONN_ESTABLISH_3);
-	if (mon_ctx->amc_stats_session == NULL) {
-		m0_free(mon_ctx->amc_stats_conn);
-		m0_mutex_unlock(&mon_ctx->amc_mutex);
-		M0_RETURN(-ENOMEM);
-	}
 	/**
 	 * Need to release monitoring ctx mutex here to avoid deadlock due to
 	 * same thread acguiring this mutex twice(once above here in this
@@ -215,16 +226,15 @@ M0_INTERNAL int m0_addb_monitor_stats_svc_conn_init(struct m0_reqh *reqh)
 	 * first time.
 	 */
 	m0_mutex_unlock(&mon_ctx->amc_mutex);
-	rc = m0_rpc_client_connect(mon_ctx->amc_stats_conn,
-				   mon_ctx->amc_stats_session, rmach,
-				   stats_svc_ep,
-				   ADDB_STATS_MAX_RPCS_IN_FLIGHT,
-				   ADDB_STATS_MAX_RPC_SLOTS_NR);
+	rc = addb_mon_rpc_client_connect(mon_ctx->amc_stats_conn,
+					 rmach,
+					 stats_svc_ep,
+					 ADDB_STATS_MAX_RPCS_IN_FLIGHT);
+
 	m0_mutex_lock(&mon_ctx->amc_mutex);
 	if (rc != 0) {
 		STATS_ADDB_FUNCFAIL(rc, SVC_CONN_ESTABLISH_3,
 				    &m0_addb_monitors_mod_ctx);
-		m0_free(mon_ctx->amc_stats_session);
 		m0_free(mon_ctx->amc_stats_conn);
 		m0_mutex_unlock(&mon_ctx->amc_mutex);
 		M0_RETURN(rc);
@@ -237,12 +247,11 @@ M0_INTERNAL int m0_addb_monitor_stats_svc_conn_init(struct m0_reqh *reqh)
 
 M0_INTERNAL void m0_addb_conf_process(struct m0_reqh *reqh,
 				      struct m0_rpc_conn *conn,
-				      struct m0_rpc_session *session,
 				      const char *ep)
 {
 	struct m0_addb_monitoring_ctx *mon_ctx;
 
-	M0_PRE(reqh != NULL && conn != NULL && session != NULL && ep != NULL);
+	M0_PRE(reqh != NULL && conn != NULL && ep != NULL);
 
 	mon_ctx = &reqh->rh_addb_monitoring_ctx;
 
@@ -253,7 +262,6 @@ M0_INTERNAL void m0_addb_conf_process(struct m0_reqh *reqh,
 		/** Only assign stats ep for the first mentioned conf object */
 		mon_ctx->amc_stats_ep      = ep;
 		mon_ctx->amc_stats_conn    = conn;
-		mon_ctx->amc_stats_session = session;
 	}
 out:
 	m0_mutex_unlock(&mon_ctx->amc_mutex);
@@ -371,16 +379,10 @@ M0_INTERNAL void m0_addb_monitor_stats_svc_conn_fini(struct m0_reqh *reqh)
 	M0_PRE(reqh != NULL);
 
 	mon_ctx = &reqh->rh_addb_monitoring_ctx;
-
-	rc = m0_rpc_session_destroy(mon_ctx->amc_stats_session, M0_TIME_NEVER);
-	if (rc != 0)
-		STATS_ADDB_FUNCFAIL(rc, SVC_CONN_FINI_1,
-				    &m0_addb_monitors_mod_ctx);
 	rc = m0_rpc_conn_destroy(mon_ctx->amc_stats_conn, M0_TIME_NEVER);
 	if (rc != 0)
 		STATS_ADDB_FUNCFAIL(rc, SVC_CONN_FINI_2,
 				    &m0_addb_monitors_mod_ctx);
-	mon_ctx->amc_stats_session = NULL;
 	mon_ctx->amc_stats_conn    = NULL;
 	mon_ctx->amc_stats_ep      = NULL;
 }
@@ -440,28 +442,14 @@ static void addb_mon_fop_free(struct m0_stats_update_fop *fop_data,
 
 static void addb_monitor_stats_fop_release(struct m0_ref *ref)
 {
-	struct m0_fop              *fop = container_of(ref, struct m0_fop, f_ref);
-	struct m0_stats_update_fop *fop_data = m0_fop_data(fop);
+	struct m0_fop *fop = container_of(ref, struct m0_fop, f_ref);
 
-	addb_mon_fop_free(fop_data, fop_data->suf_stats.sf_nr);
 	m0_fop_fini(fop);
 	m0_free(fop);
 }
 
-static void stats_item_sent(struct m0_rpc_item *item)
-{
-	struct m0_fop *fop;
-
-	fop = container_of(item, struct m0_fop, f_item);
-	m0_fop_put(fop);
-}
-
-const struct m0_rpc_item_ops addb_monitor_stats_rpc_item_ops = {
-	.rio_sent = stats_item_sent
-};
-
 static int addb_monitor_stats_fop_send(struct m0_stats_update_fop *fop_data,
-				       struct m0_rpc_session      *session)
+				       struct m0_rpc_conn      *conn)
 {
 	struct m0_fop      *stats_update_fop;
 	struct m0_rpc_item *item;
@@ -474,15 +462,11 @@ static int addb_monitor_stats_fop_send(struct m0_stats_update_fop *fop_data,
 	m0_fop_init(stats_update_fop, &m0_fop_stats_update_fopt,
 		    (void *) fop_data, addb_monitor_stats_fop_release);
 
-	stats_update_fop->f_item.ri_ops = &addb_monitor_stats_rpc_item_ops;
-
 	item                     = &stats_update_fop->f_item;
-	item->ri_session         = session;
 	item->ri_prio            = M0_RPC_ITEM_PRIO_MIN;
 	item->ri_deadline        = 0;
-	item->ri_resend_interval = M0_TIME_NEVER;
 
-	rc = m0_rpc_post(item);
+	rc = m0_rpc_oneway_item_post(conn, item);
 	m0_fop_put(stats_update_fop);
 
 	return rc;
@@ -506,7 +490,7 @@ M0_INTERNAL int m0_addb_monitor_summaries_post(struct m0_reqh       *reqh,
 	M0_PRE(reqh != NULL);
 
 	mon_ctx = &reqh->rh_addb_monitoring_ctx;
-	M0_ASSERT(mon_ctx->amc_stats_session != NULL);
+	M0_ASSERT(mon_ctx->amc_stats_conn != NULL);
 	mon_list = &mon_ctx->amc_list;
 
 	m0_mutex_lock(&reqh->rh_addb_monitoring_ctx.amc_mutex);
@@ -562,7 +546,7 @@ M0_INTERNAL int m0_addb_monitor_summaries_post(struct m0_reqh       *reqh,
 		if (used == BATCH) {
 			fop->suf_stats.sf_nr = BATCH;
 			result = addb_monitor_stats_fop_send(fop,
-						             mon_ctx->amc_stats_session);
+						             mon_ctx->amc_stats_conn);
 			if (result != 0)
 				goto out;
 			used   = 0;
@@ -572,8 +556,9 @@ M0_INTERNAL int m0_addb_monitor_summaries_post(struct m0_reqh       *reqh,
 		}
 	}
 	if (fop != NULL) {
+		fop->suf_stats.sf_nr = fop_nr;
 		result = addb_monitor_stats_fop_send(fop,
-					             mon_ctx->amc_stats_session);
+					             mon_ctx->amc_stats_conn);
 		if (result != 0)
 			goto out;
 	}
diff --git a/addb/addb_monitor.h b/addb/addb_monitor.h
index ce33439..4871874 100644
--- a/addb/addb_monitor.h
+++ b/addb/addb_monitor.h
@@ -241,10 +241,10 @@ struct m0_addb_monitor_ops {
 	 */
 	void                    (*amo_watch) (const struct m0_addb_monitor *mon,
 					      const struct m0_addb_rec     *rec,
-					      const struct m0_reqh         *r);
+					      struct m0_reqh               *r);
 	/** Returns m0_addb_sum_rec, if any for this monitor. */
 	struct m0_addb_sum_rec *(*amo_sum_rec) (const struct m0_addb_monitor *m,
-					        const struct m0_reqh         *r);
+					        struct m0_reqh               *r);
 };
 
 struct m0_addb_monitor {
@@ -276,7 +276,6 @@ struct m0_addb_monitoring_ctx {
 	/* Stats service endpoint */
 	const char            *amc_stats_ep;
 	struct m0_rpc_conn    *amc_stats_conn;
-	struct m0_rpc_session *amc_stats_session;
 };
 
 /**
@@ -356,12 +355,10 @@ M0_INTERNAL int m0_addb_monitor_summaries_post(struct m0_reqh       *reqh,
  * connection details
  * @param reqh request handler
  * @param conn rpc connection object of stats service
- * @param session rpc session object of stats service
  * @param ep stats service endpoint
  */
 M0_INTERNAL void m0_addb_conf_process(struct m0_reqh *reqh,
 				      struct m0_rpc_conn *conn,
-				      struct m0_rpc_session *session,
 				      const char *ep);
 
 /**
diff --git a/m0t1fs/linux_kernel/super.c b/m0t1fs/linux_kernel/super.c
index 5ae68b2..982a5dd 100644
--- a/m0t1fs/linux_kernel/super.c
+++ b/m0t1fs/linux_kernel/super.c
@@ -508,8 +508,7 @@ static int connect_to_service(const char *addr, enum m0_conf_service_type type,
 	if (rc == 0) {
 		if (type == M0_CST_SS)
 			m0_addb_conf_process(&m0t1fs_globals.g_reqh,
-					     &ctx->sc_conn, &ctx->sc_session,
-					     addr);
+					     &ctx->sc_conn, addr);
 		svc_ctx_tlist_add_tail(&csb->csb_service_contexts, ctx);
 		M0_CNT_INC(csb->csb_nr_active_contexts);
 		M0_LOG(M0_INFO, "Connected to service `%s'. %d active contexts",
-- 
1.8.3.2


From b184f03fb2d2f8bd99db77182f6af4ffc9299273 Mon Sep 17 00:00:00 2001
From: Rajanikant Chirmade <rajanikant_chirmade@xyratex.com>
Date: Fri, 1 Nov 2013 18:28:19 +0530
Subject: [PATCH 122/159] - Defined fop_rate monitor - Fix for m0stats -l - Fix
 issue in m0_addb_monitor_del(). Skipped re-setting last scanned monitor   if
 addb service already finished. - Moved m0_addb_monitors_fini() at the end of
 m0t1fs_rpc_fini().

---
 addb/addb_monitor.c                         |  16 ++--
 addb/addb_monitor.h                         |   9 ++-
 addb/addb_rec.c                             |   7 +-
 extra-libs/galois                           |   2 +-
 fop/fom.c                                   | 114 +++++++++++++++++++++++++++-
 fop/fop.c                                   |   4 +-
 fop/fop_addb.h                              |  10 ++-
 m0t1fs/linux_kernel/st/m0t1fs_common_inc.sh |   1 +
 m0t1fs/linux_kernel/st/m0t1fs_server_inc.sh |   2 +-
 mero/magic.h                                |   3 +
 reqh/reqh.c                                 |  18 +++--
 stats/util/stats_util.c                     |  27 +++----
 12 files changed, 179 insertions(+), 34 deletions(-)

diff --git a/addb/addb_monitor.c b/addb/addb_monitor.c
index 5ae0b77..9073714 100644
--- a/addb/addb_monitor.c
+++ b/addb/addb_monitor.c
@@ -264,6 +264,8 @@ M0_INTERNAL int m0_addb_monitors_init(struct m0_reqh *reqh)
 				 &m0_addb_ct_monitors_mod, &m0_addb_proc_ctx);
 	}
 
+	mon_ctx->amc_magic = M0_ADDB_MONITOR_CTX_MAGIC;
+
 	return rc;
 }
 
@@ -335,13 +337,16 @@ M0_INTERNAL void m0_addb_monitor_del(struct m0_reqh         *reqh,
 	M0_PRE(m0_addb_monitor_invariant(monitor));
 
 	svc = m0_reqh_service_find(&m0_addb_svc_type, reqh);
-	M0_ASSERT(svc != NULL);
-	addb_svc = bob_of(svc, struct addb_svc, as_reqhs, &addb_svc_bob);
+	if (svc != NULL) {
+		addb_svc = bob_of(svc, struct addb_svc, as_reqhs, &addb_svc_bob);
 
-	m0_mutex_lock(&reqh->rh_addb_monitoring_ctx.amc_mutex);
-	if (addb_svc->as_pfom.pf_mon == monitor) {
-		addb_svc->as_pfom.pf_mon = NULL;
+		m0_mutex_lock(&reqh->rh_addb_monitoring_ctx.amc_mutex);
+		if (addb_svc->as_pfom.pf_mon == monitor) {
+			addb_svc->as_pfom.pf_mon = NULL;
+		}
+		m0_mutex_lock(&reqh->rh_addb_monitoring_ctx.amc_mutex);
 	}
+	m0_mutex_lock(&reqh->rh_addb_monitoring_ctx.amc_mutex);
 	addb_mon_tlist_del(monitor);
 	m0_mutex_unlock(&reqh->rh_addb_monitoring_ctx.amc_mutex);
 }
@@ -375,6 +380,7 @@ M0_INTERNAL void m0_addb_monitors_fini(struct m0_reqh *reqh)
 
 	addb_mon_tlist_fini(&reqh->rh_addb_monitoring_ctx.amc_list);
 	m0_mutex_fini(&reqh->rh_addb_monitoring_ctx.amc_mutex);
+	reqh->rh_addb_monitoring_ctx.amc_magic = 0;
 }
 
 #define SUM_SIZE(sum) (sum->asr_rec.ss_data.au64s_nr * sizeof(uint64_t))
diff --git a/addb/addb_monitor.h b/addb/addb_monitor.h
index a6f3e66..1dcde83 100644
--- a/addb/addb_monitor.h
+++ b/addb/addb_monitor.h
@@ -219,6 +219,12 @@ enum {
 
 M0_TL_DESCR_DECLARE(addb_mon, M0_EXTERN);
 
+#define M0_ADDB_MONITOR_STATS_TYPE_REGISTER(stats_type, name)		\
+do {									\
+	stats_type.art_name = name;					\
+	m0_addb_rec_type_register(&stats_type);				\
+} while(0)
+
 struct m0_addb_sum_rec {
 	/**
 	 * This flag is true iff the record contains data still
@@ -269,6 +275,7 @@ M0_INTERNAL bool m0_addb_monitor_invariant(struct m0_addb_monitor *mon);
  * object.
  */
 struct m0_addb_monitoring_ctx {
+	uint64_t               amc_magic;
 	/* List of active monitors */
 	struct m0_tl           amc_list;
 	/* Mutex to protect amc_list */
@@ -305,7 +312,7 @@ M0_INTERNAL void m0_addb_monitor_init(struct m0_addb_monitor           *monitor,
  * @param mon_data uint64_t array of monitor specific data
  * @param nr No of uint64_t words.
  */
-M0_INTERNAL void m0_addb_sum_rec_init(struct m0_addb_sum_rec        *sum_rec,
+M0_INTERNAL void m0_addb_monitor_sum_rec_init(struct m0_addb_sum_rec        *sum_rec,
 				      const struct m0_addb_rec_type *rtype,
 				      uint64_t                      *mon_data,
 				      size_t                         nr);
diff --git a/addb/addb_rec.c b/addb/addb_rec.c
index 82cce73..9579010 100644
--- a/addb/addb_rec.c
+++ b/addb/addb_rec.c
@@ -158,7 +158,11 @@ static void addb_rec_post(struct m0_addb_mc *mc,
 	 * @todo: Find a way to remove this condition and instead assert
 	 * on not NULL.
 	 */
-	if (mc->am_reqh != NULL) {
+#undef MON_CTX_CONFIGURED
+#define MON_CTX_CONFIGURED(mon_ctx)				\
+	(mon_ctx.amc_magic == M0_ADDB_MONITOR_CTX_MAGIC)
+	if (mc->am_reqh != NULL &&
+	    MON_CTX_CONFIGURED(mc->am_reqh->rh_addb_monitoring_ctx)) {
 		/* Invoke all the monitor's filters */
 		m0_mutex_lock(&mc->am_reqh->rh_addb_monitoring_ctx.amc_mutex);
 		m0_tl_for(addb_mon,
@@ -168,6 +172,7 @@ static void addb_rec_post(struct m0_addb_mc *mc,
 		} m0_tl_endfor;
 		m0_mutex_unlock(&mc->am_reqh->rh_addb_monitoring_ctx.amc_mutex);
 	}
+#undef MON_CTX_CONFIGURED
 }
 
 #ifndef __KERNEL__
diff --git a/extra-libs/galois b/extra-libs/galois
index 3230956..10ccbd0 160000
--- a/extra-libs/galois
+++ b/extra-libs/galois
@@ -1 +1 @@
-Subproject commit 32309568c1977a934d9aab96552392417ca9dd21
+Subproject commit 10ccbd0ca55db92909fda817ee1065d914736440
diff --git a/fop/fom.c b/fop/fom.c
index 9e3d90e..8483def 100644
--- a/fop/fom.c
+++ b/fop/fom.c
@@ -36,6 +36,7 @@
 #include "sm/sm.h"
 #include "fop/fop_addb.h"
 #include "rpc/rpc_machine.h"
+#include "addb/addb_monitor.h"
 
 /**
  * @addtogroup fom
@@ -179,6 +180,112 @@ static struct m0_fom_domain_ops m0_fom_dom_ops = {
 	.fdo_time_is_out = fom_wait_time_is_out
 };
 
+struct m0_addb_monitor fop_rate_monitor;
+
+static uint32_t fop_rate_monitor_key;
+
+static struct fop_rate_stats_sum_rec {
+	uint64_t frssr_fop_rate;
+} fop_rate_stats_sum;
+
+static struct m0_addb_sum_rec *
+fop_rate_monitor_sum_rec(const struct m0_addb_monitor *mon,
+		         struct m0_reqh               *reqh)
+{
+	struct m0_addb_sum_rec *sum_rec;
+
+	sum_rec = m0_reqh_lockers_get(reqh, fop_rate_monitor_key);
+	M0_ASSERT(sum_rec != NULL);
+
+	return sum_rec;
+}
+
+static void fop_rate_monitor_watch(const struct m0_addb_monitor *monitor,
+				   const struct m0_addb_rec     *rec,
+				   struct m0_reqh               *reqh)
+{
+#undef FOP_RATE
+#define FOP_RATE(sum_rec)					\
+	(struct fop_rate_stats_sum_rec *)sum_rec->asr_rec.ss_data.au64s_data
+
+	struct m0_addb_sum_rec        *sum_rec;
+	struct fop_rate_stats_sum_rec *f_rate;
+
+	if (m0_addb_rec_rid_to_id(rec->ar_rid) == M0_ADDB_RECID_FOP_RATE_CNTR) {
+		m0_rwlock_read_lock(&reqh->rh_rwlock);
+		sum_rec = m0_reqh_lockers_get(reqh, fop_rate_monitor_key);
+		m0_rwlock_read_unlock(&reqh->rh_rwlock);
+		M0_ASSERT(sum_rec != NULL);
+
+		m0_mutex_lock(&sum_rec->asr_mutex);
+		M0_ASSERT(sum_rec->asr_rec.ss_id ==
+			  M0_ADDB_RECID_FOP_RATE_CNTR);
+		f_rate = FOP_RATE(sum_rec);
+		/*
+		 * fop_rate is ADDB counter.
+ 		 * rec->ar_data.au64s_data[1] is number of samples
+ 		 * rec->ar_data.au64s_data[2] is sum_samples
+ 		 */
+		f_rate->frssr_fop_rate =
+		rec->ar_data.au64s_data[2]/rec->ar_data.au64s_data[1];;
+		m0_mutex_unlock(&sum_rec->asr_mutex);
+	}
+#undef FOP_RATE
+}
+
+const struct m0_addb_monitor_ops fop_rate_monitor_ops = {
+	.amo_watch = fop_rate_monitor_watch,
+	.amo_sum_rec = fop_rate_monitor_sum_rec
+};
+
+static int fop_rate_monitor_init(struct m0_reqh         *reqh,
+				 struct m0_addb_monitor *monitor)
+{
+#undef FOP_RATE_STATS_NR
+#define FOP_RATE_STATS_NR (sizeof(fop_rate_stats_sum) / sizeof(uint64_t))
+
+	struct m0_addb_sum_rec *sum_rec;
+
+	M0_PRE(monitor != NULL && reqh != NULL);
+
+	FOP_ALLOC_PTR(sum_rec, FOM_RATE_MON_INIT, &m0_fop_addb_ctx);
+	if (sum_rec == NULL)
+		return -ENOMEM;
+
+	m0_addb_monitor_init(monitor, &fop_rate_monitor_ops);
+	m0_addb_monitor_sum_rec_init(sum_rec, &m0_addb_rt_fop_rate,
+				     (uint64_t *)&fop_rate_stats_sum,
+				     FOP_RATE_STATS_NR);
+
+	fop_rate_monitor_key = m0_reqh_lockers_allot();
+
+	m0_rwlock_write_lock(&reqh->rh_rwlock);
+	m0_reqh_lockers_set(reqh, fop_rate_monitor_key, sum_rec);
+	m0_rwlock_write_unlock(&reqh->rh_rwlock);
+
+	m0_addb_monitor_add(reqh, monitor);
+	return 0;
+}
+
+static void fop_rate_monitor_fini(struct m0_reqh         *reqh,
+				  struct m0_addb_monitor *monitor)
+{
+	struct m0_addb_sum_rec *sum_rec;
+
+	M0_PRE(monitor != NULL && reqh != NULL);
+
+	sum_rec = monitor->am_ops->amo_sum_rec(monitor, reqh);
+	m0_addb_monitor_del(reqh, &fop_rate_monitor);
+
+	m0_rwlock_write_lock(&reqh->rh_rwlock);
+	m0_reqh_lockers_clear(reqh, fop_rate_monitor_key);
+	m0_rwlock_write_unlock(&reqh->rh_rwlock);
+
+	m0_addb_monitor_sum_rec_fini(sum_rec);
+	m0_free(sum_rec);
+
+	m0_addb_monitor_fini(&fop_rate_monitor);
+}
 static void group_lock(struct m0_fom_locality *loc)
 {
 	m0_sm_group_lock(&loc->fl_group);
@@ -822,7 +929,7 @@ static int loc_init(struct m0_fom_locality *loc, size_t cpu, size_t cpu_max)
 	}
 
 	result = m0_addb_counter_init(&loc->fl_stat_fop_rate,
-				      &m0_addb_rt_fop_rate);
+				      &m0_addb_rt_fop_rate_cntr);
 	if (result != 0) {
 		m0_addb_counter_fini(&loc->fl_stat_sched_wait_times);
 		m0_addb_counter_fini(&loc->fl_stat_run_times);
@@ -938,9 +1045,9 @@ M0_INTERNAL int m0_fom_domain_init(struct m0_fom_domain *dom)
 				.lo_idx  = dom->fd_localities_nr });
 		M0_CNT_INC(dom->fd_localities_nr);
 	}
-	m0_bitmap_fini(&onln_cpu_map);
 
-	return result;
+	m0_bitmap_fini(&onln_cpu_map);
+	return fop_rate_monitor_init(dom->fd_reqh, &fop_rate_monitor);
 }
 
 M0_INTERNAL void m0_fom_domain_fini(struct m0_fom_domain *dom)
@@ -949,6 +1056,7 @@ M0_INTERNAL void m0_fom_domain_fini(struct m0_fom_domain *dom)
 
 	M0_ASSERT(m0_fom_domain_invariant(dom));
 
+	fop_rate_monitor_fini(dom->fd_reqh, &fop_rate_monitor);
 	fd_loc_nr = dom->fd_localities_nr;
 	while (fd_loc_nr > 0) {
 		loc_fini(&dom->fd_localities[fd_loc_nr - 1]);
diff --git a/fop/fop.c b/fop/fop.c
index 89d6415..343ac1b 100644
--- a/fop/fop.c
+++ b/fop/fop.c
@@ -34,6 +34,7 @@
 #include "fop/fop.h"
 #include "fop/fop_xc.h"
 #include "fop/fom_long_lock.h" /* m0_fom_ll_global_init */
+#include "addb/addb_monitor.h" /* stats register */
 
 /**
    @addtogroup fop
@@ -256,7 +257,8 @@ M0_INTERNAL int m0_fops_init(void)
 	m0_addb_rec_type_register(&m0_addb_rt_fl_sched_wait_times);
 	m0_addb_rec_type_register(&m0_addb_rt_fl_runq_nr);
 	m0_addb_rec_type_register(&m0_addb_rt_fl_wail_nr);
-	m0_addb_rec_type_register(&m0_addb_rt_fop_rate);
+	m0_addb_rec_type_register(&m0_addb_rt_fop_rate_cntr);
+        M0_ADDB_MONITOR_STATS_TYPE_REGISTER(m0_addb_rt_fop_rate, "fop_rate");
 	M0_ADDB_CTX_INIT(&m0_addb_gmc, &m0_fop_addb_ctx, &m0_addb_ct_fop_mod,
 			 &m0_addb_proc_ctx);
 	ft_tlist_init(&fop_types_list);
diff --git a/fop/fop_addb.h b/fop/fop_addb.h
index 87962a8..14a2fec 100644
--- a/fop/fop_addb.h
+++ b/fop/fop_addb.h
@@ -68,7 +68,8 @@ M0_ALLOC_ARR_ADDB(ptr, nr, &m0_addb_gmc, M0_FOP_ADDB_LOC_##loc, ctx)
  */
 enum {
 	M0_FOP_ADDB_LOC_LOC_THR_CREATE    = 10,
-	M0_FOP_ADDB_LOC_FOM_DOMAIN_INIT   = 20
+	M0_FOP_ADDB_LOC_FOM_DOMAIN_INIT   = 20,
+	M0_FOP_ADDB_LOC_FOM_RATE_MON_INIT = 30,
 };
 
 extern struct m0_addb_ctx m0_fop_addb_ctx;
@@ -92,7 +93,8 @@ enum {
 	M0_ADDB_RECID_FL_SCHED_WAIT_TIMES = 66,
 	M0_ADDB_RECID_FL_RUNQ_NR = 67,
 	M0_ADDB_RECID_FL_WAIL_NR = 68,
-	M0_ADDB_RECID_FOP_RATE   = 69,
+	M0_ADDB_RECID_FOP_RATE_CNTR = 69,
+	M0_ADDB_RECID_FOP_RATE      = 70,
 };
 
 /**
@@ -134,12 +136,14 @@ M0_ADDB_RT_CNTR(m0_addb_rt_fl_run_times, M0_ADDB_RECID_FL_RUN_TIMES);
 M0_ADDB_RT_CNTR(m0_addb_rt_fl_sched_wait_times,
 		M0_ADDB_RECID_FL_SCHED_WAIT_TIMES);
 /** FOP rate (number of fop executed per sec) **/
-M0_ADDB_RT_CNTR(m0_addb_rt_fop_rate, M0_ADDB_RECID_FOP_RATE);
+M0_ADDB_RT_CNTR(m0_addb_rt_fop_rate_cntr, M0_ADDB_RECID_FOP_RATE_CNTR);
 
 /** Locality run queue length */
 M0_ADDB_RT_DP(m0_addb_rt_fl_runq_nr, M0_ADDB_RECID_FL_RUNQ_NR, "runq_nr");
 /** Locality wait queue (list) length */
 M0_ADDB_RT_DP(m0_addb_rt_fl_wail_nr, M0_ADDB_RECID_FL_WAIL_NR, "wail_nr");
+/** ADDB record for fop rate stats summary record */
+M0_ADDB_RT_STATS(m0_addb_rt_fop_rate, M0_ADDB_RECID_FOP_RATE, "fop_rate");
 
 /** @} end of fom group */
 
diff --git a/m0t1fs/linux_kernel/st/m0t1fs_common_inc.sh b/m0t1fs/linux_kernel/st/m0t1fs_common_inc.sh
index a68070a..f15acb3 100644
--- a/m0t1fs/linux_kernel/st/m0t1fs_common_inc.sh
+++ b/m0t1fs/linux_kernel/st/m0t1fs_common_inc.sh
@@ -38,6 +38,7 @@ MERO_IOSERVICE_NAME=ioservice
 MERO_MDSERVICE_NAME=mdservice
 MERO_SNSREPAIRSERVICE_NAME=sns_repair
 MERO_SNSREBALANCESERVICE_NAME=sns_rebalance
+MERO_STATSSERVICE_NAME=stats
 MERO_RMSERVICE_NAME=rmservice
 MERO_STOB_DOMAIN=linux
 
diff --git a/m0t1fs/linux_kernel/st/m0t1fs_server_inc.sh b/m0t1fs/linux_kernel/st/m0t1fs_server_inc.sh
index 9d8f1be..6e177b1 100644
--- a/m0t1fs/linux_kernel/st/m0t1fs_server_inc.sh
+++ b/m0t1fs/linux_kernel/st/m0t1fs_server_inc.sh
@@ -25,7 +25,7 @@ mero_service()
 		for ((i=0; i < ${#EP[*]}; i++)) ; do
 			SNAME="-s $MERO_ADDBSERVICE_NAME"
 			if ((i == 0)); then
-				SNAME="-s $MERO_MDSERVICE_NAME -s $MERO_RMSERVICE_NAME $SNAME"
+				SNAME="-s $MERO_MDSERVICE_NAME -s $MERO_RMSERVICE_NAME $SNAME -s $MERO_STATSSERVICE_NAME"
 			else
 				SNAME="-s $MERO_IOSERVICE_NAME -s $MERO_SNSREPAIRSERVICE_NAME \
 				      -s $MERO_SNSREBALANCESERVICE_NAME $SNAME"
diff --git a/mero/magic.h b/mero/magic.h
index 74a6481..dfc8621 100644
--- a/mero/magic.h
+++ b/mero/magic.h
@@ -120,6 +120,9 @@ enum m0_magic_satchel {
 	/* ADDB monitor (addb shoebill) */
 	M0_ADDB_MONITOR_LIST_LINK_MAGIC = 0x33addb7719304577,
 
+	/* m0_addb_monitoring_ctx::amc_magic (basils basils) */
+	M0_ADDB_MONITOR_CTX_MAGIC = 0x33ba5115ba511577,
+
 /* balloc */
 	/* m0_balloc_super_block::bsb_magic (blessed baloc) */
 	M0_BALLOC_SB_MAGIC = 0x33b1e55edba10c77,
diff --git a/reqh/reqh.c b/reqh/reqh.c
index 6f7e824..2da9c44 100644
--- a/reqh/reqh.c
+++ b/reqh/reqh.c
@@ -160,29 +160,37 @@ m0_reqh_init(struct m0_reqh *reqh, const struct m0_reqh_init_args *reqh_args)
 	M0_ADDB_CTX_INIT(&m0_addb_gmc, &reqh->rh_addb_ctx,
 			 &m0_addb_ct_reqh_mod, &m0_addb_proc_ctx);
 
+	m0_rwlock_init(&reqh->rh_rwlock);
+	m0_reqh_lockers_init(reqh);
+
 	rc = m0_addb_monitors_init(reqh);
 	if (rc != 0)
-		return rc;
+		goto monitors_init_failed;
 
 	reqh->rh_fom_dom.fd_reqh = reqh;
 	rc = m0_fom_domain_init(&reqh->rh_fom_dom);
 	if (rc != 0)
-		return rc;
+		goto fom_domain_init_failed;
 
 	m0_reqh_svc_tlist_init(&reqh->rh_services);
 	m0_reqh_rpc_mach_tlist_init(&reqh->rh_rpc_machines);
 	m0_sm_group_init(&reqh->rh_sm_grp);
 	m0_mutex_init(&reqh->rh_mutex); /* deprecated */
 	m0_chan_init(&reqh->rh_sd_signal, &reqh->rh_mutex); /* deprecated */
-	m0_rwlock_init(&reqh->rh_rwlock);
 	m0_sm_init(&reqh->rh_sm, &m0_reqh_sm_conf, M0_REQH_ST_INIT,
 		   &reqh->rh_sm_grp);
-	m0_reqh_lockers_init(reqh);
 
 	if (reqh->rh_beseg != NULL)
 		rc = m0_reqh_dbenv_init(reqh, reqh->rh_beseg);
 
 	return rc;
+
+fom_domain_init_failed:
+	m0_addb_monitors_fini(reqh);
+monitors_init_failed:
+	m0_rwlock_fini(&reqh->rh_rwlock);
+	m0_reqh_lockers_fini(reqh);
+	return rc;
 }
 
 #ifndef __KERNEL__
@@ -362,9 +370,9 @@ M0_INTERNAL void m0_reqh_fini(struct m0_reqh *reqh)
 	m0_sm_group_unlock(&reqh->rh_sm_grp);
 	m0_sm_group_fini(&reqh->rh_sm_grp);
 	m0_addb_ctx_fini(&reqh->rh_addb_ctx);
-	m0_addb_monitors_fini(reqh);
 	m0_addb_mc_fini(&reqh->rh_addb_mc);
         m0_fom_domain_fini(&reqh->rh_fom_dom);
+	m0_addb_monitors_fini(reqh);
         m0_reqh_svc_tlist_fini(&reqh->rh_services);
         m0_reqh_rpc_mach_tlist_fini(&reqh->rh_rpc_machines);
 	m0_reqh_lockers_fini(reqh);
diff --git a/stats/util/stats_util.c b/stats/util/stats_util.c
index bae1ee9..bd45730 100644
--- a/stats/util/stats_util.c
+++ b/stats/util/stats_util.c
@@ -316,10 +316,21 @@ int main(int argc, char *argv[])
         sigaction(SIGQUIT, &sa, NULL);
         sigaction(SIGPIPE, &sa, NULL);
 
+	rc = m0_init();
+	if (rc != 0) {
+		fprintf(stderr, "Failed to initialize library. rc = %d\n", rc);
+		return rc;
+	}
+
+	if (list_names) {
+		stats_print_list();
+		goto mero_fini;
+	}
+
 	rc = stats_local_ep(local_ep);
 	if (rc != 0) {
 		fprintf(stderr, "Failed to get local address. rc = %d\n", rc);
-		return rc;
+		goto mero_fini;
 	}
 
 	if (remote_addr == NULL || stats_list == NULL) {
@@ -347,16 +358,6 @@ int main(int argc, char *argv[])
 	cctx.rcx_remote_addr = epx.ex_endpoint;
 	cctx.rcx_local_addr  = strdup(local_ep);
 
-	rc = m0_init();
-	if (rc != 0) {
-		fprintf(stderr, "Failed to initialize library. rc = %d\n", rc);
-		return rc;
-	}
-
-	if (list_names) {
-		stats_print_list();
-		goto mero_fini;
-	}
 
         rc = m0_net_xprt_init(xprt);
         if (rc != 0) {
@@ -401,10 +402,10 @@ disconnect:
 
 domain_fini:
 	m0_net_domain_fini(&client_net_dom);
-mero_fini:
-	m0_fini();
 mero_fini_fclose:
 	fclose(fout);
+mero_fini:
+	m0_fini();
 	return rc;
 }
 
-- 
1.8.3.2


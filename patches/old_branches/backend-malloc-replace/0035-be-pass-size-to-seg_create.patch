From 29200c78987abaec3b81a2130a917bc7546c77dd Mon Sep 17 00:00:00 2001
From: Andriy Tkachuk <andriy_tkachuk@xyratex.com>
Date: Wed, 29 May 2013 13:55:46 +0300
Subject: [PATCH 035/161] be: pass size to seg_create()

---
 be/seg.c | 16 +++++++++-------
 be/seg.h |  4 ++--
 2 files changed, 11 insertions(+), 9 deletions(-)

diff --git a/be/seg.c b/be/seg.c
index a4c6630..987f7dd 100644
--- a/be/seg.c
+++ b/be/seg.c
@@ -58,25 +58,26 @@ static void seg_io_prepare(struct m0_be_seg *seg, struct m0_stob_io *io)
 	io->si_stob.iv_index       = BE_SEG_DEFAULT_OFFSET;
 }
 
-static void seg_header_prepare(struct m0_be_seg *seg, struct m0_stob_io *io)
+static void seg_header_prepare(struct m0_be_seg *seg, struct m0_stob_io *io,
+				m0_bcount_t size)
 {
 	struct be_seg_hdr *header = (struct be_seg_hdr *)seg->bs_addr;
 
 	/* fill segment header */
-	header->bh_addr = BE_SEG_DEFAULT_ADDR;
-	header->bh_size = sizeof(struct be_seg_hdr);
+	header->bh_addr = BE_SEG_DEAULT_ADDR;
+	header->bh_size = size;
 
 	seg_io_prepare(seg, io);
 }
 
-static int seg_header_write(struct m0_be_seg *seg)
+static int seg_header_write(struct m0_be_seg *seg, m0_bcount_t size)
 {
 	struct m0_stob_io io;
 	struct m0_clink   clink;
 	int               rc;
 
 	m0_stob_io_init(&io);
-	seg_header_prepare(seg, &io);
+	seg_header_prepare(seg, &io, size);
 
 	m0_clink_init(&clink, NULL);
 	m0_clink_add(&io.si_wait, &clink);
@@ -92,13 +93,14 @@ static int seg_header_write(struct m0_be_seg *seg)
 	return io.si_rc;
 }
 
-int m0_be_seg_create(struct m0_be_seg *seg)
+int m0_be_seg_create(struct m0_be_seg *seg, m0_bcount_t size)
 {
 	M0_PRE(seg->bs_state == M0_BSS_INIT);
 	M0_PRE(seg->bs_stob->so_domain != NULL);
 	M0_PRE(seg->bs_stob->so_state != CSS_EXISTS);
 
-	return m0_stob_create(seg->bs_stob, NULL) ?: seg_header_write(seg);
+	return m0_stob_create(&seg->bs_stob, NULL) ?:
+		seg_header_write(seg, size);
 }
 
 int m0_be_seg_destroy(struct m0_be_seg *seg)
diff --git a/be/seg.h b/be/seg.h
index 9fc1d07..30ed879 100644
--- a/be/seg.h
+++ b/be/seg.h
@@ -59,8 +59,8 @@ int m0_be_seg_open(struct m0_be_seg *seg);
 
 void m0_be_seg_close(struct m0_be_seg *seg);
 
-/** Creates segment on storage. */
-int m0_be_seg_create(struct m0_be_seg *seg);
+/** Creates the segment of specified size on the storage. */
+int m0_be_seg_create(struct m0_be_seg *seg, m0_bcount_t size);
 
 int m0_be_seg_destroy(struct m0_be_seg *seg);
 
-- 
1.8.3.2


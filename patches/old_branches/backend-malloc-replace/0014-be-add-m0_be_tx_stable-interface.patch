From 994901ee7994d90301fa07229af93c198dbea119 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Tue, 28 May 2013 17:06:07 +0300
Subject: [PATCH 014/161] be: add m0_be_tx_stable() interface

Refine the API as the result of "conf2" use case discussion.
---
 be/seg.h | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/be/seg.h b/be/seg.h
index 3258f48..cece0b4 100644
--- a/be/seg.h
+++ b/be/seg.h
@@ -91,6 +91,7 @@ struct m0_be_tx {
 	struct m0_be       *t_be;
 	struct m0_tlink     t_linkage;
 	m0_be_tx_cb_t       t_persistent;
+	m0_be_tx_cb_t       t_discarded;
 };
 
 void m0_be_tx_init(struct m0_be_tx *tx, struct m0_be *be,
@@ -98,19 +99,27 @@ void m0_be_tx_init(struct m0_be_tx *tx, struct m0_be *be,
 
 void m0_be_tx_fini(struct m0_be_tx *tx);
 
-void m0_be_tx_prep(struct m0_be_tx *tx, const struct m0_be_tx_credit *cr);
+void m0_be_tx_prep(struct m0_be_tx *tx, const struct m0_be_tx_credit *credit);
 
 void m0_be_tx_open(struct m0_be_tx *tx);
 
 void m0_be_tx_capture(struct m0_be_tx *tx, const struct m0_be_reg *reg);
 
-void m0_be_tx_close(struct m0_be_tx *tx);
+/** XXX */
+void m0_be_tx_close(struct m0_be_tx *tx, m0_bcount_t payload_size,
+		    void (*filler)(struct m0_be_tx *tx, void *payload,
+				   void *datum), void *datum);
 
 int m0_be_tx_timedwait(struct m0_be_tx *tx, m0_time_t timeout);
 
 /** Forces the transaction to storage. */
 void m0_be_tx_force(struct m0_be_tx *tx);
 
+/**
+ * Notifies backend that the transaction is no longer needed for recovery.
+ */
+void m0_be_tx_stable(struct m0_be_tx *tx);
+
 struct m0_be_tx_credit {
 	/**
 	 * The number of regions needed for operation representation in the
-- 
1.8.3.2


From b5b745de6c9921907d635150b0e30c3c76b71345 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Wed, 29 May 2013 12:34:46 +0300
Subject: [PATCH 022/161] be: It compiles!

Some files need to be added to `mero/mero-pub.api' though:

Checking mero public API...   FAIL
WARNING: Did you forget to add the following public functions
         to the 'mero/mero-pub.api' list or to add M0_INTERNAL prefix to them?

+m0_be__reg_invariant
+m0_be_alloc
+m0_be_alloc_stats
+m0_be_allocator_create
+m0_be_allocator_credit
+m0_be_allocator_destroy
+m0_be_allocator_fini
+m0_be_allocator_init
+m0_be_free
+m0_be_reg_get
+m0_be_reg_get_fast
+m0_be_reg_put
+m0_be_seg_fini
+m0_be_seg_init
+m0_be_seg_open
---
 be/alloc.c |  6 ++++++
 be/seg.c   | 22 ++++++++++++++++++----
 2 files changed, 24 insertions(+), 4 deletions(-)

diff --git a/be/alloc.c b/be/alloc.c
index a76b85a..93853d4 100644
--- a/be/alloc.c
+++ b/be/alloc.c
@@ -18,6 +18,8 @@
  * Original creation date: 29-May-2013
  */
 
+#include "be/seg.h"
+
 /**
  * @addtogroup be
  *
@@ -26,6 +28,7 @@
 
 int m0_be_allocator_init(struct m0_be_allocator *a, struct m0_be_seg *seg)
 {
+	return -1;
 }
 
 void m0_be_allocator_fini(struct m0_be_allocator *a)
@@ -34,10 +37,12 @@ void m0_be_allocator_fini(struct m0_be_allocator *a)
 
 int m0_be_allocator_create(struct m0_be_allocator *a)
 {
+	return -1;
 }
 
 int m0_be_allocator_destroy(struct m0_be_allocator *a)
 {
+	return -1;
 }
 
 void m0_be_allocator_credit(const struct m0_be_allocator *a,
@@ -49,6 +54,7 @@ void m0_be_allocator_credit(const struct m0_be_allocator *a,
 void *m0_be_alloc(struct m0_be_allocator *a, struct m0_be_tx *tx,
 		  m0_bcount_t size, unsigned shift)
 {
+	return NULL;
 }
 
 void m0_be_free(struct m0_be_allocator *a, struct m0_be_tx *tx, void *ptr)
diff --git a/be/seg.c b/be/seg.c
index ce98bc1..f4d4b96 100644
--- a/be/seg.c
+++ b/be/seg.c
@@ -18,6 +18,9 @@
  * Original creation date: 29-May-2013
  */
 
+#include "be/seg.h"
+#include "lib/assert.h"
+
 /**
  * @addtogroup be
  *
@@ -94,10 +97,10 @@ int m0_be_seg_destroy(struct m0_be_seg *seg);
 	//stob destroy ...
 }
 
-void m0_be_seg_init(struct m0_be_seg *seg, struct m0_stob *stob,
-		    struct m0_be *be)
+void
+m0_be_seg_init(struct m0_be_seg *seg, struct m0_stob *stob, struct m0_be *be)
 {
-	seg->bs_be   = be;
+	seg->bs_be = be;
 	seg->bs_stob = stob;
 	seg->bs_state = M0_BSS_INIT;
 }
@@ -113,8 +116,17 @@ bool m0_be__reg_invariant(const struct m0_be_reg *reg)
 		reg->br_addr != NULL;
 }
 
+/** "On-disk" header for segment, stored in STOB at zero offset. */
+struct be_seg_hdr {
+	void       *bh_addr;
+	m0_bcount_t bh_size;
+};
+
 int m0_be_seg_open(struct m0_be_seg *seg)
 {
+#if 1 /*XXX*/
+	return -1;
+#else /*XXX*/
 	struct m0_stob_io io;
 	struct m0_clink   clink;
 	int               r;
@@ -140,7 +152,8 @@ int m0_be_seg_open(struct m0_be_seg *seg)
 	m0_clink_del_lock(&clink);
 	m0_clink_fini(&clink);
 	m0_stob_io_fini(&io);
-	if (r != 0) return r;
+	if (r != 0)
+		return r;
 
 	rc = m0_be_allocator_init(&seg->bs_allocator, seg);
 	if (rc != 0)
@@ -148,6 +161,7 @@ int m0_be_seg_open(struct m0_be_seg *seg)
 	seg->bs_state = M0_BSS_OPENED;
 	/* TODO: mmap an area at bh_addr of bh_size */
 	return 0;
+#endif /*XXX*/
 }
 
 void m0_be_seg_close(struct m0_be_seg *seg)
-- 
1.8.3.2


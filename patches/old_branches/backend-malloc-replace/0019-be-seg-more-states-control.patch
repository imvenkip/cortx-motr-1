From b6e91d97469251c46094bf8ad72c144aa1e6479b Mon Sep 17 00:00:00 2001
From: Andriy Tkachuk <andriy_tkachuk@xyratex.com>
Date: Wed, 29 May 2013 13:00:06 +0300
Subject: [PATCH 019/161] be/seg: more states control

---
 be/seg.c | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/be/seg.c b/be/seg.c
index 1783ab7..ce98bc1 100644
--- a/be/seg.c
+++ b/be/seg.c
@@ -73,6 +73,7 @@ int m0_be_seg_create(struct m0_be_seg *seg)
 {
 	int		   result;
 
+	M0_PRE(seg->bs_state == M0_BSS_INIT);
 	M0_PRE(seg->bs_stob->so_domain != NULL);
 	M0_PRE(seg->bs_stob->so_state != CSS_EXISTS);
 
@@ -88,6 +89,7 @@ int m0_be_seg_create(struct m0_be_seg *seg)
 
 int m0_be_seg_destroy(struct m0_be_seg *seg);
 {
+	M0_PRE(M0_IN(seg->bs_state, (M0_BSS_INIT, M0_BSS_CLOSED)));
 	m0_stob_put(seg->bs_stob);
 	//stob destroy ...
 }
@@ -102,9 +104,7 @@ void m0_be_seg_init(struct m0_be_seg *seg, struct m0_stob *stob,
 
 void m0_be_seg_fini(struct m0_be_seg *seg)
 {
-	M0_PRE(seg->bs_state == M0_BSS_CLOSED);
-
-	m0_be_allocator_fini(&seg->bs_allocator);
+	M0_PRE(M0_IN(seg->bs_state, (M0_BSS_INIT, M0_BSS_CLOSED)));
 }
 
 bool m0_be__reg_invariant(const struct m0_be_reg *reg)
@@ -142,10 +142,22 @@ int m0_be_seg_open(struct m0_be_seg *seg)
 	m0_stob_io_fini(&io);
 	if (r != 0) return r;
 
+	rc = m0_be_allocator_init(&seg->bs_allocator, seg);
+	if (rc != 0)
+		return rc;
+	seg->bs_state = M0_BSS_OPENED;
 	/* TODO: mmap an area at bh_addr of bh_size */
 	return 0;
 }
 
+void m0_be_seg_close(struct m0_be_seg *seg)
+{
+	M0_PRE(seg->bs_state == M0_BSS_OPENED);
+
+	m0_be_allocator_fini(&seg->bs_allocator);
+	seg->bs_state = M0_BSS_CLOSED;
+}
+
 void m0_be_reg_get(struct m0_be_reg *reg, struct m0_be_op *op)
 {
 	M0_PRE(m0_be__reg_invariant(reg));
-- 
1.8.3.2


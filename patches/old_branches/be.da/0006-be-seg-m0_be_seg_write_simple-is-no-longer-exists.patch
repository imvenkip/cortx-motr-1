From 50da7f9ea7e1090c730141d4576d5f4b033b1f5e Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Tue, 20 Aug 2013 14:19:09 +0300
Subject: [PATCH 06/34] be/seg: m0_be_seg_write_simple() is no longer exists

---
 be/seg.c | 85 ----------------------------------------------------------------
 be/seg.h | 10 --------
 2 files changed, 95 deletions(-)

diff --git a/be/seg.c b/be/seg.c
index 3999956..322756b 100644
--- a/be/seg.c
+++ b/be/seg.c
@@ -201,91 +201,6 @@ static inline m0_bcount_t be_seg_pgno(const struct m0_be_seg *seg, void *addr)
 	return (addr - seg->bs_addr) >> seg->bs_pgshift;
 }
 
-static inline m0_bcount_t be_seg_blkno(const struct m0_be_seg *seg, void *addr)
-{
-	return (addr - seg->bs_addr) >> seg->bs_bshift;
-}
-
-/** @todo XXX replace it. copy-pasted from above */
-static void iovec_prepare2(struct m0_be_seg *seg, struct m0_be_reg_area *area,
-			   struct m0_indexvec *iv, struct m0_bufvec *bv)
-{
-	struct m0_be_reg_d *rd;
-	int		    nr;
-	int		    i;
-
-	M0_PRE(seg->bs_bshift == 0);
-
-	nr = m0_be_regmap_size(&area->bra_map);
-
-	M0_ALLOC_ARR(bv->ov_vec.v_count, nr);
-	M0_ALLOC_ARR(bv->ov_buf, nr);
-
-	M0_ALLOC_ARR(iv->iv_vec.v_count, nr);
-	M0_ALLOC_ARR(iv->iv_index, nr);
-
-	M0_ASSERT(bv->ov_vec.v_count != NULL && bv->ov_buf   != NULL);
-	M0_ASSERT(iv->iv_vec.v_count != NULL && iv->iv_index != NULL);
-
-	bv->ov_vec.v_nr = nr;
-	iv->iv_vec.v_nr = nr;
-
-	i = 0;
-	for (rd = m0_be_reg_area_first(area); rd != NULL;
-	     rd = m0_be_reg_area_next(area, rd)) {
-		bv->ov_vec.v_count[i] = rd->rd_reg.br_size;
-		bv->ov_buf[i]	      = rd->rd_buf;
-
-		iv->iv_vec.v_count[i] = rd->rd_reg.br_size;
-		iv->iv_index[i]       = be_seg_blkno(seg, rd->rd_reg.br_addr);
-		++i;
-	}
-	M0_ASSERT(i == nr);
-}
-
-static bool be_seg_stobio_cb(struct m0_clink *link)
-{
-	struct m0_be_op   *op = container_of(link, struct m0_be_op,
-					     bo_u.u_segio.si_clink);
-	struct m0_stob_io *io = &op->bo_u.u_segio.si_stobio;
-
-/* XXX: This probably should be deleted, but most likely in m0_be_op_fini() or
-   ->sd_in() of M0_BOS_SUCCESS | M0_BOS_FAILURE states...
- */
-/*        m0_clink_del_lock(link); */
-/*        m0_clink_fini(link); */
-/*        m0_stob_io_fini(io); */
-
-	op->bo_sm.sm_rc = io->si_rc;
-	m0_be_op_state_set(op, io->si_rc == 0 ? M0_BOS_SUCCESS : M0_BOS_FAILURE);
-
-	return io->si_rc == 0;
-}
-
-M0_INTERNAL void m0_be_seg_write_simple(struct m0_be_seg *seg,
-					struct m0_be_op *op,
-					struct m0_be_reg_area *area)
-{
-	struct m0_stob_io *io    = &op->bo_u.u_segio.si_stobio;
-	struct m0_clink   *clink = &op->bo_u.u_segio.si_clink;
-	int                rc;
-
-	/* Set up op, clink and io structs for SEGIO write. */
-	op->bo_utype = M0_BOP_SEGIO;
-	m0_clink_init(clink, &be_seg_stobio_cb);
-
-	m0_stob_io_init(io);
-	io->si_flags        = 0;
-	io->si_opcode       = SIO_WRITE;
-	io->si_fol_rec_part = (void *)1;
-
-	iovec_prepare2(seg, area, &io->si_stob, &io->si_user);
-
-	m0_clink_add_lock(&io->si_wait, clink);
-	m0_be_op_state_set(op, M0_BOS_ACTIVE);
-	rc = m0_stob_io_launch(io, seg->bs_stob, NULL, NULL);
-}
-
 M0_INTERNAL void m0_be_reg_get(struct m0_be_reg *reg, struct m0_be_op *op)
 {
 	m0_bcount_t n;
diff --git a/be/seg.h b/be/seg.h
index dc57991..fcac7ee 100644
--- a/be/seg.h
+++ b/be/seg.h
@@ -161,15 +161,5 @@ M0_INTERNAL int m0_be_seg__write(struct m0_be_reg *reg, void *src);
 M0_INTERNAL int m0_be_reg__read(struct m0_be_reg *reg);
 M0_INTERNAL int m0_be_reg__write(struct m0_be_reg *reg);
 
-/**
- * Simple segment write implementation which has to be removed ASAP.
- * It's introduced because we need straightforward possibility to
- * write data on the disk. This will unblock other tasks in BE. This
- * call will be replaced with m0_be_seg_write() in the nearest future.
- */
-M0_INTERNAL void m0_be_seg_write_simple(struct m0_be_seg *seg,
-					struct m0_be_op *op,
-					struct m0_be_reg_area *area);
-
 /** @} end of be group */
 #endif /* __MERO_BE_SEG_H__ */
-- 
1.8.3.2


From ead22f38b7f3bf6b4a42ff7a8205ce295d2a9658 Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Wed, 21 Aug 2013 03:37:36 +0300
Subject: [PATCH 13/34] be/tx_credit: m0_be_tx_credit_invalid added and used in
 be-ut:tx-usecase_failure

---
 be/tx.c        |  4 +++-
 be/tx_credit.c |  3 +++
 be/tx_credit.h |  3 +++
 be/ut/tx.c     | 12 ++----------
 4 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index 89a6893..74c018b 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -223,7 +223,9 @@ M0_INTERNAL void m0_be_tx_open(struct m0_be_tx *tx)
 	M0_ENTRY();
 	M0_PRE(BE_TX_LOCKED_AT_STATE(tx, (M0_BTS_PREPARE)));
 
-	rc = m0_be_reg_area_init(&tx->t_reg_area, &tx->t_prepared, true);
+	rc = m0_be_tx_credit_eq(&tx->t_prepared,
+				&m0_be_tx_credit_invalid) ? -EINVAL : 0;
+	rc = rc ?: m0_be_reg_area_init(&tx->t_reg_area, &tx->t_prepared, true);
 
 	be_tx_state_move(tx, rc == 0 ? M0_BTS_OPENING : M0_BTS_FAILED, rc);
 
diff --git a/be/tx_credit.c b/be/tx_credit.c
index be76cc1..09dc25a 100644
--- a/be/tx_credit.c
+++ b/be/tx_credit.c
@@ -27,6 +27,9 @@
  * @{
  */
 
+struct m0_be_tx_credit m0_be_tx_credit_invalid =
+	M0_BE_TX_CREDIT_INIT(M0_BCOUNT_MAX, M0_BCOUNT_MAX);
+
 M0_INTERNAL void m0_be_tx_credit_add(struct m0_be_tx_credit *c0,
 				     const struct m0_be_tx_credit *c1)
 {
diff --git a/be/tx_credit.h b/be/tx_credit.h
index 0cab4c1..aad0983 100644
--- a/be/tx_credit.h
+++ b/be/tx_credit.h
@@ -68,6 +68,9 @@ struct m0_be_tx_credit {
 	m0_bcount_t tc_reg_size;
 };
 
+/* invalid m0_be_tx_credit value */
+extern struct m0_be_tx_credit m0_be_tx_credit_invalid;
+
 #define M0_BE_TX_CREDIT(name) struct m0_be_tx_credit name = {0}
 
 #define M0_BE_TX_CREDIT_INIT(nr, size) \
diff --git a/be/ut/tx.c b/be/ut/tx.c
index d3a33a4..d365808 100644
--- a/be/ut/tx.c
+++ b/be/ut/tx.c
@@ -29,14 +29,6 @@
 
 #include <stdlib.h>		/* rand_r */
 
-enum {
-	BE_UT_FAIL_REG_NR   = 1ULL << 60,
-	BE_UT_FAIL_REG_SIZE = 1ULL << 60,
-};
-
-static struct m0_be_tx_credit be_ut_tx_fail_credit =
-	M0_BE_TX_CREDIT_INIT(BE_UT_FAIL_REG_NR, BE_UT_FAIL_REG_SIZE);
-
 void m0_be_ut_tx_usecase_success(void)
 {
 	struct m0_be_ut_backend ut_be;
@@ -86,7 +78,7 @@ void m0_be_ut_tx_usecase_failure(void)
 
 	m0_be_ut_tx_init(&tx, &ut_be);
 
-	m0_be_tx_prep(&tx, &be_ut_tx_fail_credit);
+	m0_be_tx_prep(&tx, &m0_be_tx_credit_invalid);
 
 	m0_be_tx_open(&tx);
 	rc = m0_be_tx_timedwait(&tx, M0_BITS(M0_BTS_ACTIVE, M0_BTS_FAILED),
@@ -169,7 +161,7 @@ void m0_be_ut_tx_states(void)
 	M0_UT_ASSERT(tx.t_sm.sm_rc == 0);
 	M0_UT_ASSERT(m0_be_tx_state(&tx) == M0_BTS_PREPARE);
 
-	m0_be_tx_prep(&tx, &be_ut_tx_fail_credit);
+	m0_be_tx_prep(&tx, &m0_be_tx_credit_invalid);
 	M0_UT_ASSERT(tx.t_sm.sm_rc == 0);
 	M0_UT_ASSERT(m0_be_tx_state(&tx) == M0_BTS_PREPARE);
 
-- 
1.8.3.2


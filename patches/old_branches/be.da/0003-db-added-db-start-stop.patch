From f83792a80ff140b146e47bf4babd817e4feb5859 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Wed, 21 Aug 2013 10:05:03 +0300
Subject: [PATCH 03/34] db: added db start/stop.

---
 db/db.c      | 150 ++++++++++++++++++++++++++++++++++++++++-------------------
 db/db.h      |   4 ++
 db/db_impl.h |   7 ++-
 3 files changed, 112 insertions(+), 49 deletions(-)

diff --git a/db/db.c b/db/db.c
index b753b6d..e6e924d 100644
--- a/db/db.c
+++ b/db/db.c
@@ -31,6 +31,7 @@
 #include <stdlib.h>    /* free */
 #include <sys/stat.h>  /* mkdir */
 #include <stdio.h>     /* asprintf, fopen, fclose */
+#include <unistd.h>    /* access */
 
 #include "lib/adt.h"   /* m0_buf */
 #include "lib/misc.h"  /* M0_SET0 */
@@ -46,6 +47,8 @@
 #include "be/domain.h"	/* m0_be_domain */
 #include "ut/ast_thread.c"/* XXX: m0_ut_ast_thread_start */
 
+#include "stob/linux.h"		/* m0_linux_stob_domain_locate */
+
 /**
    @addtogroup db
    @{
@@ -53,57 +56,125 @@
 
 struct m0_addb_ctx m0_db_mod_ctx;
 
-static int ast_start(struct m0_dbenv *env)
+static struct m0_be_seg        _db_seg;
+static struct m0_sm_group      _db_sm_group;
+static struct m0_be_domain     _db_dom;
+static struct m0_be_domain_cfg _db_cfg = {
+	.bc_engine = {
+		.bec_group_nr = 1,
+		.bec_log_size = 1 << 27,
+		.bec_tx_size_max = M0_BE_TX_CREDIT_INIT(1 << 20, 1 << 26),
+		.bec_group_size_max = M0_BE_TX_CREDIT_INIT(1 << 21, 1 << 27),
+		.bec_group_tx_max = 20
+	},
+};
+
+static int ast_start(void)
 {
-        m0_sm_group_init(&env->d_i.d_sm_group);
-        return m0_ut_ast_thread_start(&env->d_i.d_sm_group);
+        m0_sm_group_init(&_db_sm_group);
+        return m0_ut_ast_thread_start(&_db_sm_group);
 }
 
-static void ast_stop(struct m0_dbenv *env)
+static void ast_stop(void)
 {
         m0_ut_ast_thread_stop();
-        m0_sm_group_fini(&env->d_i.d_sm_group);
+        m0_sm_group_fini(&_db_sm_group);
 }
 
-M0_INTERNAL int m0_dbenv_init(struct m0_dbenv *env, const char *name,
-			      uint64_t flags)
+M0_INTERNAL int m0_db_domain_init(struct m0_reqh *reqh)
 {
 	int rc;
-	static struct m0_be_domain     dom;
-	static struct m0_be_domain_cfg cfg = {
-		.bc_engine = {
-			.bec_group_nr = 1,
-			.bec_log_size = 1 << 27,
-			.bec_tx_size_max = M0_BE_TX_CREDIT_INIT(1 << 20,
-								1 << 26),
-			.bec_group_size_max = M0_BE_TX_CREDIT_INIT(1 << 21,
-								   1 << 27),
-			.bec_group_tx_max = 20
-		},
-	};
 
-	rc = ast_start(env);
+	rc = ast_start();
 	if (rc != 0)
 		return rc;
 
-        rc = m0_be_domain_init(&dom, &cfg);
-	if (rc != 0) {
-		ast_stop(env);
-		return rc;
-	}
+	_db_cfg.bc_engine.bec_group_fom_reqh = reqh;
+        rc = m0_be_domain_init(&_db_dom, &_db_cfg);
+	if (rc != 0)
+		ast_stop();
 
-	env->d_i.d_dom      = &dom;
-	env->d_i.d_dom_cfg  = &cfg;
+	return rc;
+}
+
+M0_INTERNAL void m0_db_domain_fini(void)
+{
+        m0_be_domain_fini(&_db_dom);
+	ast_stop();
+}
+
+M0_INTERNAL int m0_db_init(void)
+{
+	m0_addb_ctx_type_register(&m0_addb_ct_db_mod);
+	M0_ADDB_CTX_INIT(&m0_addb_gmc, &m0_db_mod_ctx,
+			 &m0_addb_ct_db_mod, &m0_addb_proc_ctx);
+	/* DBXXX: init emap types here */
+	/* m0_xc_extmap_init(); */
+	return 0;
+}
+
+M0_INTERNAL void m0_db_fini(void)
+{
+        m0_addb_ctx_fini(&m0_db_mod_ctx);
+	/* DBXXX: fini emap types here */
+	/* m0_xc_extmap_fini(); */
+}
+
+static int dbenv_dir_prepare(const char *storage_dir)
+{
+	char db[256];
+	char dbo[256];
+
+	sprintf(db, "rm -rf %s", storage_dir);
+	sprintf(dbo, "%s/o", storage_dir);
+
+        return system(db)
+		?: mkdir(storage_dir, 0700)
+		?: mkdir(dbo, 0700);
+}
+
+M0_INTERNAL int m0_dbenv_init(struct m0_dbenv *env, const char *storage_dir,
+			      uint64_t flags)
+{
+        struct m0_stob_id stob_id = { .si_bits = M0_UINT128(0, 42) };
+        int               rc;
+
+	env->d_i = (struct m0_dbenv_impl) {
+		.d_dom	    = &_db_dom,
+		.d_seg      = &_db_seg,
+		.d_dom_cfg  = &_db_cfg,
+		.d_sm_group = &_db_sm_group,
+	};
+
+	rc = access(storage_dir, 0700);
+	if (rc == 0) { /* db exists */
+		M0_IMPOSSIBLE("not implemented yet");
+	} else {
+		rc = dbenv_dir_prepare(storage_dir) ?:
+			m0_linux_stob_domain_locate(storage_dir,
+						    &env->d_i.d_stob_dom) ?:
+			m0_stob_create_helper(env->d_i.d_stob_dom, (void*)1,
+					      &stob_id, &_db_seg.bs_stob);
+		if (rc != 0)
+			return rc;
+
+		m0_be_seg_init(env->d_i.d_seg, env->d_i.d_seg->bs_stob,
+			       env->d_i.d_dom);
+		rc = m0_be_seg_create(env->d_i.d_seg, 1 << 26) ?:
+			m0_be_seg_open(env->d_i.d_seg);
+	}
 
-        m0_sm_group_lock(&env->d_i.d_sm_group);
 	return rc;
 }
 
 M0_INTERNAL void m0_dbenv_fini(struct m0_dbenv *env)
 {
-        m0_sm_group_unlock(&env->d_i.d_sm_group);
-        m0_be_domain_fini(env->d_i.d_dom);
-	ast_stop(env);
+        m0_be_seg_close(env->d_i.d_seg);
+	m0_be_seg_destroy(env->d_i.d_seg);
+        m0_be_seg_fini(env->d_i.d_seg);
+	m0_stob_put(env->d_i.d_seg->bs_stob);
+
+	env->d_i.d_stob_dom->sd_ops->sdo_fini(env->d_i.d_stob_dom);
 }
 
 M0_INTERNAL int m0_dbenv_sync(struct m0_dbenv *env)
@@ -236,23 +307,6 @@ M0_INTERNAL int m0_db_cursor_del(struct m0_db_cursor *cursor)
 	return -1;
 }
 
-M0_INTERNAL int m0_db_init(void)
-{
-	m0_addb_ctx_type_register(&m0_addb_ct_db_mod);
-	M0_ADDB_CTX_INIT(&m0_addb_gmc, &m0_db_mod_ctx,
-			 &m0_addb_ct_db_mod, &m0_addb_proc_ctx);
-	/* DBXXX: init emap types here */
-	/* m0_xc_extmap_init(); */
-	return 0;
-}
-
-M0_INTERNAL void m0_db_fini(void)
-{
-        m0_addb_ctx_fini(&m0_db_mod_ctx);
-	/* DBXXX: fini emap types here */
-	/* m0_xc_extmap_fini(); */
-}
-
 /** @} end of db group */
 
 /*
diff --git a/db/db.h b/db/db.h
index 6f58e2a..355cc9e 100644
--- a/db/db.h
+++ b/db/db.h
@@ -452,6 +452,10 @@ M0_INTERNAL int m0_db_cursor_del(struct m0_db_cursor *cursor);
 M0_INTERNAL int m0_db_init(void);
 M0_INTERNAL void m0_db_fini(void);
 
+struct m0_reqh;
+M0_INTERNAL int m0_db_domain_init(struct m0_reqh *reqh);
+M0_INTERNAL void m0_db_domain_fini(void);
+
 /** @} end of db group */
 
 /* __MERO_DB_REC_H__ */
diff --git a/db/db_impl.h b/db/db_impl.h
index 6052ae5..31bcdcb 100644
--- a/db/db_impl.h
+++ b/db/db_impl.h
@@ -43,7 +43,12 @@ struct m0_dbenv_impl {
         /** @ d_dom configuration */
         struct m0_be_domain_cfg *d_dom_cfg;
         /** SM group associated with this database backend implementation */
-        struct m0_sm_group       d_sm_group;
+        struct m0_sm_group      *d_sm_group;
+	/** Segment which is used to implement db storage */
+	struct m0_be_seg        *d_seg;
+	/** Pointer to stob domain */
+	struct m0_stob_domain   *d_stob_dom;
+
 #if 0 /* XXX: move from mero/ut/ast_thread.c */
 	/** Thread for asynchronous environment related work. */
         struct m0_thread         d_thread;
-- 
1.8.3.2


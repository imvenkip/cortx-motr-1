From 0876e760dc14a0aa6aa095d218b2bff4fb27859b Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Tue, 20 Aug 2013 14:11:26 +0300
Subject: [PATCH 05/34] be/tx: m0_be_tx_close_sync() can't fail

---
 be/tx.h        | 7 +++++--
 be/ut/alloc.c  | 3 +--
 be/ut/btree.c  | 6 ++----
 be/ut/extmap.c | 8 ++------
 be/ut/helper.c | 3 +--
 be/ut/list.c   | 8 ++------
 be/ut/tx.c     | 8 ++------
 7 files changed, 15 insertions(+), 28 deletions(-)

diff --git a/be/tx.h b/be/tx.h
index f67493d..0f8c9aa 100644
--- a/be/tx.h
+++ b/be/tx.h
@@ -399,10 +399,13 @@ static inline int m0_be_tx_open_sync(struct m0_be_tx *tx)
 				  M0_TIME_NEVER);
 }
 
-static inline int m0_be_tx_close_sync(struct m0_be_tx *tx)
+static inline void m0_be_tx_close_sync(struct m0_be_tx *tx)
 {
+	int rc;
+
 	m0_be_tx_close(tx);
-	return m0_be_tx_timedwait(tx, M0_BITS(M0_BTS_DONE), M0_TIME_NEVER);
+	rc = m0_be_tx_timedwait(tx, M0_BITS(M0_BTS_DONE), M0_TIME_NEVER);
+	M0_ASSERT(rc == 0);
 }
 
 /** @} end of be group */
diff --git a/be/ut/alloc.c b/be/ut/alloc.c
index 5e17a40..a4512d4 100644
--- a/be/ut/alloc.c
+++ b/be/ut/alloc.c
@@ -126,8 +126,7 @@ static void be_ut_alloc_ptr_handle(struct m0_be_allocator *a,
 	m0_be_op_fini(&op);
 
 	if (ut_be != NULL) {
-		rc = m0_be_tx_close_sync(tx);
-		M0_UT_ASSERT(rc == 0);
+		m0_be_tx_close_sync(tx);
 		m0_be_tx_fini(tx);
 	}
 }
diff --git a/be/ut/btree.c b/be/ut/btree.c
index cdaaab8..663c6ab 100644
--- a/be/ut/btree.c
+++ b/be/ut/btree.c
@@ -247,8 +247,7 @@ create_tree(struct m0_be_ut_backend *ut_be, struct m0_be_seg *seg)
 	sprintf(v, "XYZ");
 	M0_BE_OP_SYNC(op, m0_be_btree_update(tree, tx, &op, &key, &val));
 
-	rc = m0_be_tx_close_sync(tx); /* Make things persistent. */
-	M0_UT_ASSERT(rc == 0);
+	m0_be_tx_close_sync(tx); /* Make things persistent. */
 	m0_be_tx_fini(tx);
 
 	btree_dbg_print(tree);
@@ -284,8 +283,7 @@ static void destroy_tree(struct m0_be_btree *tree,
 
 	M0_BE_OP_SYNC(op, m0_be_free(a, tx, &op, tree));
 
-	rc = m0_be_tx_close_sync(tx); /* Make things persistent. */
-	M0_UT_ASSERT(rc == 0);
+	m0_be_tx_close_sync(tx); /* Make things persistent. */
 	m0_be_tx_fini(tx);
 
 	btree_dbg_print(tree);
diff --git a/be/ut/extmap.c b/be/ut/extmap.c
index 75be158..13f720a 100644
--- a/be/ut/extmap.c
+++ b/be/ut/extmap.c
@@ -61,8 +61,7 @@ static void emap_alloc(struct m0_be_tx *tx)
 	M0_BE_OP_SYNC(op, emap = m0_be_alloc(a, tx, &op, sizeof *emap, 0));
 	M0_UT_ASSERT(emap != NULL);
 
-	rc = m0_be_tx_close_sync(tx);
-	M0_UT_ASSERT(rc == 0);
+	m0_be_tx_close_sync(tx);
 	m0_be_tx_fini(tx);
 }
 
@@ -129,12 +128,9 @@ static void test_init(void)
 
 static void test_fini(void)
 {
-	int rc;
-
 	M0_BE_OP_SYNC(op, m0_be_emap_destroy(emap, &tx2, &op));
 
-	rc = m0_be_tx_close_sync(&tx2);
-	M0_UT_ASSERT(rc == 0);
+	m0_be_tx_close_sync(&tx2);
 	m0_be_tx_fini(&tx2);
 
 #if 0 /* XXX DEBUGME
diff --git a/be/ut/helper.c b/be/ut/helper.c
index 9dcf2ff..f4a0869 100644
--- a/be/ut/helper.c
+++ b/be/ut/helper.c
@@ -228,8 +228,7 @@ static void be_ut_seg_allocator_initfini(struct m0_be_ut_seg *ut_seg,
 	}
 
 	if (ut_be != NULL) {
-		rc = m0_be_tx_close_sync(&tx);
-		M0_ASSERT(rc == 0);
+		m0_be_tx_close_sync(&tx);
 		m0_be_tx_fini(&tx);
 	}
 }
diff --git a/be/ut/list.c b/be/ut/list.c
index b5bc5c4..17cf20c 100644
--- a/be/ut/list.c
+++ b/be/ut/list.c
@@ -166,17 +166,13 @@ M0_INTERNAL void m0_be_ut_list_api(void)
 	}
 
 	/* Make things persistent. */
-	rc = m0_be_tx_close_sync(&tx);
-	M0_UT_ASSERT(rc == 0);
+	m0_be_tx_close_sync(&tx);
+	m0_be_tx_fini(&tx);
 
 	/* Reload segment and check data. */
 	m0_be_ut_seg_check_persistence(&ut_seg);
 	check(list, seg);
 
-	rc = m0_be_tx_timedwait(&tx, M0_BITS(M0_BTS_DONE), M0_TIME_NEVER);
-	M0_UT_ASSERT(rc == 0);
-	m0_be_tx_fini(&tx);
-
 	/* XXX can't destroy allocator because some memory wasn't freed */
 	/* m0_be_ut_seg_allocator_fini(&ut_seg, &ut_be); */
 	m0_be_ut_seg_fini(&ut_seg);
diff --git a/be/ut/tx.c b/be/ut/tx.c
index 5201b7c..d3a33a4 100644
--- a/be/ut/tx.c
+++ b/be/ut/tx.c
@@ -200,9 +200,7 @@ void m0_be_ut_tx_empty(void)
 	rc = m0_be_tx_open_sync(&tx);
 	M0_UT_ASSERT(rc == 0);
 
-	rc = m0_be_tx_close_sync(&tx);
-	M0_UT_ASSERT(rc == 0);
-
+	m0_be_tx_close_sync(&tx);
 	m0_be_tx_fini(&tx);
 
 	m0_be_ut_backend_fini(&ut_be);
@@ -430,9 +428,7 @@ void m0_be_ut_tx_fast(void)
 		struct m0_be_tx *tx = &txs[i % ARRAY_SIZE(txs)];
 
 		if (i >= ARRAY_SIZE(txs)) {
-			rc = m0_be_tx_close_sync(tx);
-			M0_UT_ASSERT(rc == 0);
-
+			m0_be_tx_close_sync(tx);
 			m0_be_tx_fini(tx);
 		}
 
-- 
1.8.3.2


From 6af5258c61ed33fb06af744b1ba2b8eac5a87694 Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Thu, 9 Jan 2014 05:27:38 +0200
Subject: [PATCH 37/96] be/alloc: refactored ambiguous chunk_size variable

---
 be/alloc.c | 15 +++++++--------
 1 file changed, 7 insertions(+), 8 deletions(-)

diff --git a/be/alloc.c b/be/alloc.c
index f3fe040..9341991 100644
--- a/be/alloc.c
+++ b/be/alloc.c
@@ -670,7 +670,7 @@ be_alloc_chunk_split(struct m0_be_allocator *a,
 {
 	struct be_alloc_chunk *prev;
 	struct be_alloc_chunk *new;
-	const m0_bcount_t      chunk_size = sizeof *c;
+	const m0_bcount_t      chunk_sizeof = sizeof *c;
 	uintptr_t	       start0;
 	uintptr_t	       start1;
 	uintptr_t	       start_next;
@@ -683,7 +683,7 @@ be_alloc_chunk_split(struct m0_be_allocator *a,
 	prev	    = be_alloc_chunk_prev(a, c);
 
 	start0	    = be_alloc_chunk_after(a, prev);
-	start1	    = start_new + chunk_size + size;
+	start1	    = start_new + chunk_sizeof + size;
 	start_next  = be_alloc_chunk_after(a, c);
 	chunk0_size = start_new - start0;
 	chunk1_size = start_next - start1;
@@ -694,7 +694,7 @@ be_alloc_chunk_split(struct m0_be_allocator *a,
 	be_alloc_chunk_del_fini(a, tx, c);
 	/* c is not a valid chunk now */
 
-	if (chunk0_size <= chunk_size) {
+	if (chunk0_size <= chunk_sizeof) {
 		/* no space for chunk0 */
 		if (prev != NULL) {
 			/* XXX refactor next if as func */
@@ -715,10 +715,10 @@ be_alloc_chunk_split(struct m0_be_allocator *a,
 	/* add the new chunk */
 	new = be_alloc_chunk_add_after(a, tx, prev,
 				       prev == NULL ? chunk0_size : 0,
-				       chunk_size + size, false);
+				       chunk_sizeof + size, false);
 	M0_ASSERT(new != NULL);
 
-	if (chunk1_size <= chunk_size) {
+	if (chunk1_size <= chunk_sizeof) {
 		/* no space for chunk1 */
 		new->bac_size += chunk1_size;
 		be_alloc_size_capture(a, tx, new);
@@ -744,7 +744,6 @@ be_alloc_chunk_trysplit(struct m0_be_allocator *a,
 	uintptr_t	       addr_mem;
 	uintptr_t	       addr_start;
 	uintptr_t	       addr_end;
-	const uintptr_t	       chunk_size = sizeof *c;
 
 	M0_PRE(be_alloc_chunk_invariant(a, c));
 	M0_PRE(alignment != 0);
@@ -752,11 +751,11 @@ be_alloc_chunk_trysplit(struct m0_be_allocator *a,
 		addr_start = (uintptr_t) c;
 		addr_end   = (uintptr_t) &c->bac_mem[c->bac_size];
 		/* find aligned address for memory block */
-		addr_mem   = addr_start + chunk_size + alignment - 1;
+		addr_mem   = addr_start + sizeof *c + alignment - 1;
 		addr_mem  &= ~(alignment - 1);
 		/* if block fits inside free chunk */
 		result = addr_mem + size <= addr_end ?
-			 be_alloc_chunk_split(a, tx, c, addr_mem - chunk_size,
+			 be_alloc_chunk_split(a, tx, c, addr_mem - sizeof *c,
 					      size) : NULL;
 	}
 	M0_POST(ergo(result != NULL, be_alloc_chunk_invariant(a, result)));
-- 
1.8.3.2


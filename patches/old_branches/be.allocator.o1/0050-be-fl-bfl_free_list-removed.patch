From 809dfe59e099be058071c8d8c1cabc670d188b3e Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Tue, 14 Jan 2014 17:55:07 +0200
Subject: [PATCH 50/96] be/fl: bfl_free_list removed

---
 be/fl.c | 80 +----------------------------------------------------------------
 be/fl.h |  2 +-
 2 files changed, 2 insertions(+), 80 deletions(-)

diff --git a/be/fl.c b/be/fl.c
index 773a8ab..9d81f70 100644
--- a/be/fl.c
+++ b/be/fl.c
@@ -42,12 +42,6 @@ M0_TL_DESCR_DEFINE(chunks_free, "XXX list of free chunks in m0_be_allocator",
 		   M0_BE_ALLOC_FREE_LINK_MAGIC, M0_BE_ALLOC_FREE_MAGIC);
 M0_TL_DEFINE(chunks_free, static, struct be_alloc_chunk);
 
-M0_TL_DESCR_DEFINE(chunk_sizes, "DOCUMENTME",
-		   static, struct m0_be_fl_size,
-		   bfs_size_link, bfs_size_link_magic,
-	/* XXX */  M0_BE_ALLOC_FREE_LINK_MAGIC + 1, M0_BE_ALLOC_FREE_MAGIC + 1);
-M0_TL_DEFINE(chunk_sizes, static, struct be_alloc_chunk);
-
 static struct m0_be_list *be_fl_list(struct m0_be_fl *fl, unsigned long index)
 {
 	M0_PRE(index < ARRAY_SIZE(fl->bfl_free));
@@ -68,10 +62,8 @@ M0_INTERNAL void m0_be_fl_init(struct m0_be_fl *fl, struct m0_be_seg *seg)
 {
 	int i;
 
-	m0_be_list_init(&fl->bfl_free_list, seg);
 	for (i = 0; i < ARRAY_SIZE(fl->bfl_free); ++i) {
 		m0_be_list_init(be_fl_list(fl, i), seg);
-		m0_be_tlink_init(be_fl_list(fl, i), &fl->bfl_free_list);
 	}
 
 	/* XXX temporary solution to make capturing checkers pass */
@@ -80,14 +72,12 @@ M0_INTERNAL void m0_be_fl_init(struct m0_be_fl *fl, struct m0_be_seg *seg)
 
 M0_INTERNAL void m0_be_fl_fini(struct m0_be_fl *fl)
 {
-	struct m0_be_seg *seg = fl->bfl_free_list.bl_seg;
+	struct m0_be_seg *seg = fl->bfl_free[0].bfs_list.bl_seg;
 	int		  i;
 
 	for (i = 0; i < ARRAY_SIZE(fl->bfl_free); ++i) {
-		m0_be_tlink_fini(be_fl_list(fl, i), &fl->bfl_free_list);
 		m0_be_list_fini(be_fl_list(fl, i));
 	}
-	m0_be_list_fini(&fl->bfl_free_list);
 
 	/* XXX temporary solution to make capturing checkers pass */
 	m0_be_reg__write(&M0_BE_REG_PTR(seg, fl));	/* XXX */
@@ -99,14 +89,9 @@ M0_INTERNAL void m0_be_fl_create(struct m0_be_fl *fl,
 {
 	int i;
 
-	M0_BE_OP_SYNC(op, m0_be_list_create(
-		    &fl->bfl_free_list, tx, &op, seg, &chunk_sizes_tl));
 	for (i = 0; i < ARRAY_SIZE(fl->bfl_free); ++i) {
 		M0_BE_OP_SYNC(op, m0_be_list_create(
 			be_fl_list(fl, i), tx, &op, seg, &chunks_free_tl));
-		M0_BE_OP_SYNC(op,
-		      m0_be_tlink_create(be_fl_list(fl, i), tx, &op,
-					 &fl->bfl_free_list));
 	}
 }
 
@@ -115,13 +100,9 @@ M0_INTERNAL void m0_be_fl_destroy(struct m0_be_fl *fl, struct m0_be_tx *tx)
 	int i;
 
 	for (i = 0; i < ARRAY_SIZE(fl->bfl_free); ++i) {
-		M0_BE_OP_SYNC(op,
-		      m0_be_tlink_destroy(be_fl_list(fl, i), tx, &op,
-					  &fl->bfl_free_list));
 		M0_BE_OP_SYNC(op, m0_be_list_destroy(be_fl_list(fl, i),
 						     tx, &op));
 	}
-	M0_BE_OP_SYNC(op, m0_be_list_destroy(&fl->bfl_free_list, tx, &op));
 }
 
 M0_INTERNAL unsigned long m0_be_fl_index_round_up(struct m0_be_fl *fl,
@@ -145,26 +126,8 @@ M0_INTERNAL unsigned long m0_be_fl_index_round_down_chunk(struct m0_be_fl *fl,
 M0_INTERNAL bool m0_be_fl__invariant(struct m0_be_fl *fl)
 {
 	struct be_alloc_chunk *chunk;
-	struct m0_be_fl_size  *fl_size;
-	struct m0_be_fl_size  *prev;
-	bool		       empty;
 	int		       i;
 
-	/* check if there is only empty lists in bfl_free_list */
-	for (i = 0; i < ARRAY_SIZE(fl->bfl_free); ++i) {
-		M0_BE_OP_SYNC(op, empty =
-			      m0_be_list_is_empty(be_fl_list(fl, i), &op));
-		if (_0C(equi(m0_tlink_is_in(&chunk_sizes_tl, &fl->bfl_free[i]),
-			     empty)))
-			return false;
-	}
-	/* check if bfl_free_list is ordered */
-	prev = NULL;
-	m0_tlist_for(&chunk_sizes_tl, &fl->bfl_free_list.bl_list, fl_size) {
-		if (_0C(prev >= fl_size))
-			return false;
-		prev = fl_size;
-	} m0_tlist_endfor;
 	/* check if each bfs_list contains chunks with appropriate size */
 	for (i = 0; i < ARRAY_SIZE(fl->bfl_free); ++i) {
 		m0_tlist_for(&chunks_free_tl,
@@ -177,48 +140,14 @@ M0_INTERNAL bool m0_be_fl__invariant(struct m0_be_fl *fl)
 	return true;
 }
 
-/* XXX naming */
-M0_INTERNAL void m0_be_fl_add_size(struct m0_be_fl *fl,
-				   struct m0_be_tx *tx,
-				   unsigned long index)
-{
-	struct m0_be_fl_size *fl_size;
-	struct m0_be_fl_size *fl_size_new = &fl->bfl_free[index];
-
-	m0_tlist_for(&chunk_sizes_tl, &fl->bfl_free_list.bl_list, fl_size) {
-		if (fl_size > fl_size_new)
-			break;
-	} m0_tlist_endfor;
-	if (fl_size > fl_size_new) {
-		M0_BE_OP_SYNC(op, m0_be_list_add_before(&fl->bfl_free_list,
-							&op, tx, fl_size,
-							fl_size_new));
-	} else {
-		M0_BE_OP_SYNC(op, m0_be_list_add_tail(&fl->bfl_free_list,
-						      &op, tx, fl_size_new));
-	}
-}
-
-M0_INTERNAL void m0_be_fl_del_size(struct m0_be_fl *fl,
-				   struct m0_be_tx *tx,
-				   unsigned long index)
-{
-	M0_BE_OP_SYNC(op, m0_be_list_del(&fl->bfl_free_list,
-					 &op, tx, &fl->bfl_free[index]));
-}
-
 M0_INTERNAL void m0_be_fl_add(struct m0_be_fl *fl,
 			      struct m0_be_tx *tx,
 			      struct be_alloc_chunk *chunk)
 {
 	unsigned long index = m0_be_fl_index_round_down_chunk(fl, chunk);
-	bool	      empty;
 
 	M0_PRE_EX(m0_be_fl__invariant(fl));
 
-	empty = be_fl_list_is_empty(fl, index);
-	if (empty)
-		m0_be_fl_add_size(fl, tx, index);
 	M0_BE_OP_SYNC(op, m0_be_tlink_create(chunk, tx, &op,
 					     be_fl_list(fl, index)));
 	M0_BE_OP_SYNC(op, m0_be_list_add(be_fl_list(fl, index),
@@ -232,7 +161,6 @@ M0_INTERNAL void m0_be_fl_del(struct m0_be_fl *fl,
 			      struct be_alloc_chunk *chunk)
 {
 	unsigned long index = m0_be_fl_index_round_down_chunk(fl, chunk);
-	bool	      empty;
 
 	M0_PRE_EX(m0_be_fl__invariant(fl));
 
@@ -240,10 +168,6 @@ M0_INTERNAL void m0_be_fl_del(struct m0_be_fl *fl,
 					 &op, tx, chunk));
 	M0_BE_OP_SYNC(op, m0_be_tlink_destroy(chunk, tx, &op,
 					      be_fl_list(fl, index)));
-	empty = be_fl_list_is_empty(fl, index);
-	if (empty)
-		m0_be_fl_del_size(fl, tx, index);
-
 	M0_POST_EX(m0_be_fl__invariant(fl));
 }
 
@@ -307,7 +231,6 @@ M0_INTERNAL void m0_be_fl_credit(struct m0_be_fl *fl,
 		m0_be_tx_credit_add(accum, &M0_BE_TX_CREDIT(0x1000, 0x10000));
 		break;
 	case M0_BFL_ADD:
-		m0_be_list_credit(&fl->bfl_free_list, M0_BLO_INSERT, 1, accum);
 		m0_be_list_credit(be_fl_list(fl, 0), M0_BLO_TLINK_CREATE, 1,
 				  accum);
 		m0_be_list_credit(be_fl_list(fl, 0), M0_BLO_INSERT, 1, accum);
@@ -316,7 +239,6 @@ M0_INTERNAL void m0_be_fl_credit(struct m0_be_fl *fl,
 		m0_be_list_credit(be_fl_list(fl, 0), M0_BLO_DELETE, 1, accum);
 		m0_be_list_credit(be_fl_list(fl, 0), M0_BLO_TLINK_DESTROY, 1,
 				  accum);
-		m0_be_list_credit(&fl->bfl_free_list, M0_BLO_DELETE, 1, accum);
 		break;
 	case M0_BFL_RESIZE:
 		m0_be_fl_credit(fl, M0_BFL_DEL, accum);
diff --git a/be/fl.h b/be/fl.h
index 517a0c0..a807663 100644
--- a/be/fl.h
+++ b/be/fl.h
@@ -39,6 +39,7 @@ enum {
 					      M0_BE_FL_NR * M0_BE_FL_STEP */
 };
 
+/** m0_be_fl operation. @see m0_be_fl_credit() */
 enum m0_be_fl_op {
 	M0_BFL_CREATE,
 	M0_BFL_DESTROY,
@@ -57,7 +58,6 @@ struct m0_be_fl_size {
 /** m0_be free list */
 struct m0_be_fl {
 	struct m0_be_fl_size bfl_free[M0_BE_FL_NR + 1];
-	struct m0_be_list    bfl_free_list;
 };
 
 struct be_alloc_chunk;
-- 
1.8.3.2


From bea3b69b13cb6a33ba1fb95235c41d464147dcd1 Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Wed, 15 Jan 2014 01:04:53 +0200
Subject: [PATCH 68/96] be/alloc: check size calculations overflow in alloc()

---
 be/alloc.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/be/alloc.c b/be/alloc.c
index 3b41dcb..a0c6056 100644
--- a/be/alloc.c
+++ b/be/alloc.c
@@ -682,9 +682,11 @@ M0_INTERNAL void m0_be_alloc_aligned(struct m0_be_allocator *a,
 	m0_mutex_lock(&a->ba_lock);
 	M0_PRE_EX(m0_be_allocator__invariant(a));
 
+	M0_ASSERT_INFO(size <= (M0_BCOUNT_MAX - (1UL << shift)) / 2,
+		       "size = %lu", size);
 	/* algorithm starts here */
 	aligned_size = shift == M0_BE_ALLOC_SHIFT_MIN ? size :
-		       size * 2 + (1U << shift);
+		       size * 2 + (1UL << shift);
 	c = m0_be_fl_pick(&a->ba_fl, aligned_size);
 	if (c != NULL) {
 		c = be_alloc_chunk_trysplit(a, tx, c, size, shift);
-- 
1.8.3.2


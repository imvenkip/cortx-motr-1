From 1e4c1e35ba28a23a20efc402591d5ea8dd77b2d3 Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Tue, 14 Jan 2014 23:20:01 +0200
Subject: [PATCH 57/96] be/ut/alloc: be-ut:alloc-oom added

---
 be/ut/alloc.c | 69 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 be/ut/main.c  |  2 ++
 2 files changed, 71 insertions(+)

diff --git a/be/ut/alloc.c b/be/ut/alloc.c
index 265d409..6ec8a9d 100644
--- a/be/ut/alloc.c
+++ b/be/ut/alloc.c
@@ -230,6 +230,75 @@ M0_INTERNAL void m0_be_ut_alloc_info(void)
 	m0_be_ut_backend_fini(&be_ut_alloc_backend);
 }
 
+/* segment and memory allocation sizes to test */
+enum {
+	BE_UT_OOM_SEG_START	= 0x400,
+	BE_UT_OOM_SEG_STEP	= 0x42,
+	BE_UT_OOM_SEG_STEP_NR	= 0x4,
+	BE_UT_OOM_ALLOC_START	= 0x1,
+	BE_UT_OOM_ALLOC_STEP	= 0x1,
+	BE_UT_OOM_ALLOC_STEP_NR	= 0x10,
+};
+
+static void be_ut_alloc_oom_case(struct m0_be_allocator *a,
+				 m0_bcount_t alloc_size)
+{
+	unsigned   ptrs_nr = 0;
+	unsigned   i;
+	void	 **ptrs;
+
+	M0_ALLOC_ARR(ptrs, BE_UT_OOM_SEG_START);
+	M0_UT_ASSERT(ptrs != NULL);
+
+	do {
+		M0_BE_UT_TRANSACT(&be_ut_alloc_backend, NULL, tx, cred,
+		  m0_be_allocator_credit(a, M0_BAO_ALLOC, alloc_size, 0, &cred),
+		  M0_BE_OP_SYNC(op, m0_be_alloc(a, tx, &op,
+						&ptrs[ptrs_nr], alloc_size)));
+	} while (ptrs[ptrs_nr++] != NULL);
+
+	M0_UT_ASSERT(ptrs_nr > 1);
+
+	for (i = 0; i < ptrs_nr; ++i) {
+		M0_BE_UT_TRANSACT(&be_ut_alloc_backend, NULL, tx, cred,
+			  m0_be_allocator_credit(a, M0_BAO_FREE, 0, 0, &cred),
+			  M0_BE_OP_SYNC(op, m0_be_free(a, tx, &op, ptrs[i])));
+	}
+
+	m0_free(ptrs);
+}
+
+M0_INTERNAL void m0_be_ut_alloc_oom(void)
+{
+	struct m0_be_ut_seg ut_seg;
+	int		    seg_size_start;
+	int		    seg_step;
+	int		    alloc_step;
+
+	m0_be_ut_backend_init(&be_ut_alloc_backend);
+
+	m0_be_ut_seg_init(&ut_seg, &be_ut_alloc_backend, 0x10000);
+	seg_size_start = m0_be_seg_reserved(&ut_seg.bus_seg) +
+			 BE_UT_OOM_SEG_START;
+	m0_be_ut_seg_fini(&ut_seg);
+
+	for (seg_step = 0; seg_step < BE_UT_OOM_SEG_STEP_NR; ++seg_step) {
+		m0_be_ut_seg_init(&ut_seg, &be_ut_alloc_backend,
+				  seg_size_start +
+				  seg_step * BE_UT_OOM_SEG_STEP);
+		m0_be_ut_seg_allocator_init(&ut_seg, &be_ut_alloc_backend);
+
+		for (alloc_step = 0; alloc_step < BE_UT_OOM_ALLOC_STEP_NR;
+		     ++alloc_step) {
+			be_ut_alloc_oom_case(ut_seg.bus_allocator,
+					     BE_UT_OOM_ALLOC_START +
+					     alloc_step * BE_UT_OOM_ALLOC_STEP);
+		}
+		m0_be_ut_seg_allocator_fini(&ut_seg, &be_ut_alloc_backend);
+		m0_be_ut_seg_fini(&ut_seg);
+	}
+	m0_be_ut_backend_fini(&be_ut_alloc_backend);
+}
 #undef M0_TRACE_SUBSYSTEM
 
 /*
diff --git a/be/ut/main.c b/be/ut/main.c
index 24aa25d..e277770 100644
--- a/be/ut/main.c
+++ b/be/ut/main.c
@@ -63,6 +63,7 @@ extern void m0_be_ut_alloc_init_fini(void);
 extern void m0_be_ut_alloc_create_destroy(void);
 extern void m0_be_ut_alloc_multiple(void);
 extern void m0_be_ut_alloc_concurrent(void);
+extern void m0_be_ut_alloc_oom(void);
 extern void m0_be_ut_alloc_info(void);
 
 extern void m0_be_ut_list(void);
@@ -107,6 +108,7 @@ const struct m0_test_suite be_ut = {
 		{ "alloc-create",        m0_be_ut_alloc_create_destroy },
 		{ "alloc-multiple",      m0_be_ut_alloc_multiple       },
 		{ "alloc-concurrent",    m0_be_ut_alloc_concurrent     },
+		{ "alloc-oom",		 m0_be_ut_alloc_oom	       },
 		{ "alloc-info",		 m0_be_ut_alloc_info	       },
 #endif
 		{ "list",                m0_be_ut_list		       },
-- 
1.8.3.2


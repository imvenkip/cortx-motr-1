From 19b376e12917c8949a1aeb2f50565b16edfd7b49 Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Sun, 17 Nov 2013 22:37:22 +0200
Subject: [PATCH 13/96] be/allocator: list_delete() and tlink_destroy() used

---
 be/alloc.c | 103 ++++++++++++++++++++++---------------------------------------
 1 file changed, 37 insertions(+), 66 deletions(-)

diff --git a/be/alloc.c b/be/alloc.c
index db7e262..abdf303 100644
--- a/be/alloc.c
+++ b/be/alloc.c
@@ -176,6 +176,17 @@ M0_TL_DESCR_DEFINE(chunks_free, "list of free chunks in m0_be_allocator",
 		   M0_BE_ALLOC_FREE_LINK_MAGIC, M0_BE_ALLOC_FREE_MAGIC);
 M0_TL_DEFINE(chunks_free, static, struct be_alloc_chunk);
 
+/* XXX use these accessors everywhere */
+static struct m0_be_list *be_alloc_list_chunks(struct m0_be_allocator *a)
+{
+	return &a->ba_h->bah_chunks;
+}
+
+static struct m0_be_list *be_alloc_list_free(struct m0_be_allocator *a)
+{
+	return &a->ba_h->bah_free;
+}
+
 static void be_alloc_chunk_capture(struct m0_be_allocator *a,
 				   struct m0_be_tx *tx,
 				   struct be_alloc_chunk *c)
@@ -242,54 +253,6 @@ static void chunks_free_tlink_init_c(struct m0_be_allocator *a,
 	be_alloc_chunk_capture(a, tx, c);
 }
 
-static void chunks_all_tlink_fini_c(struct m0_be_allocator *a,
-				    struct m0_be_tx *tx,
-				    struct be_alloc_chunk *c)
-{
-	chunks_all_tlink_fini(c);
-	be_alloc_chunk_capture(a, tx, c);
-}
-
-static void chunks_free_tlink_fini_c(struct m0_be_allocator *a,
-				     struct m0_be_tx *tx,
-				     struct be_alloc_chunk *c)
-{
-	chunks_free_tlink_fini(c);
-	be_alloc_chunk_capture(a, tx, c);
-}
-
-static void chunks_all_tlist_del_c(struct m0_be_allocator *a,
-				   struct m0_be_tx *tx,
-				   struct be_alloc_chunk *c)
-{
-	struct be_alloc_chunk *cprev;
-	struct be_alloc_chunk *cnext;
-
-	cprev = chunks_all_tlist_prev(&a->ba_h->bah_chunks.bl_list, c);
-	cnext = chunks_all_tlist_next(&a->ba_h->bah_chunks.bl_list, c);
-	chunks_all_tlist_del(c);
-	be_alloc_chunk_capture(a, tx, c);
-	be_alloc_chunk_capture(a, tx, cprev);
-	be_alloc_chunk_capture(a, tx, cnext);
-	be_alloc_head_capture(a, tx);
-}
-
-static void chunks_free_tlist_del_c(struct m0_be_allocator *a,
-				    struct m0_be_tx *tx,
-				    struct be_alloc_chunk *c)
-{
-	struct be_alloc_chunk *fprev;
-	struct be_alloc_chunk *fnext;
-
-	fprev = chunks_free_tlist_prev(&a->ba_h->bah_free.bl_list, c);
-	fnext = chunks_free_tlist_next(&a->ba_h->bah_free.bl_list, c);
-	chunks_free_tlist_del(c);
-	be_alloc_chunk_capture(a, tx, c);
-	be_alloc_chunk_capture(a, tx, fprev);
-	be_alloc_chunk_capture(a, tx, fnext);
-	be_alloc_head_capture(a, tx);
-}
-
 static void chunks_free_tlist_add_tail_c(struct m0_be_allocator *a,
 					 struct m0_be_tx *tx,
 					 struct be_alloc_chunk *c)
@@ -424,10 +387,13 @@ static void be_alloc_chunk_del_fini(struct m0_be_allocator *a,
 				    struct be_alloc_chunk *c)
 {
 	M0_PRE(be_alloc_chunk_invariant(a, c));
-	chunks_free_tlist_del_c(a, tx, c);
-	chunks_all_tlist_del_c(a, tx, c);
-	chunks_free_tlink_fini_c(a, tx, c);
-	chunks_all_tlink_fini_c(a, tx, c);
+
+	M0_BE_OP_SYNC(op, m0_be_list_del(be_alloc_list_free(a),	  &op, tx, c));
+	M0_BE_OP_SYNC(op, m0_be_list_del(be_alloc_list_chunks(a), &op, tx, c));
+	M0_BE_OP_SYNC(op, m0_be_tlink_destroy(c, tx, &op,
+					      be_alloc_list_free(a)));
+	M0_BE_OP_SYNC(op, m0_be_tlink_destroy(c, tx, &op,
+					      be_alloc_list_chunks(a)));
 }
 
 static struct be_alloc_chunk *be_alloc_chunk_addr(void *ptr)
@@ -660,16 +626,16 @@ M0_INTERNAL int m0_be_allocator_init(struct m0_be_allocator *a,
 	a->ba_h = &((struct m0_be_seg_hdr *) seg->bs_addr)->bh_alloc;
 	M0_ASSERT(m0_addr_is_aligned(a->ba_h, BE_ALLOC_HEADER_SHIFT));
 
-	m0_be_list_init(&a->ba_h->bah_chunks);
-	m0_be_list_init(&a->ba_h->bah_free);
+	m0_be_list_init(be_alloc_list_chunks(a));
+	m0_be_list_init(be_alloc_list_free(a));
 
 	return 0;
 }
 
 M0_INTERNAL void m0_be_allocator_fini(struct m0_be_allocator *a)
 {
-	m0_be_list_fini(&a->ba_h->bah_free);
-	m0_be_list_fini(&a->ba_h->bah_chunks);
+	m0_be_list_fini(be_alloc_list_free(a));
+	m0_be_list_fini(be_alloc_list_chunks(a));
 	m0_mutex_fini(&a->ba_lock);
 }
 
@@ -721,10 +687,10 @@ M0_INTERNAL int m0_be_allocator_create(struct m0_be_allocator *a,
 	h->bah_size = free_space;
 	h->bah_addr = (void *) ((uintptr_t) a->ba_seg->bs_addr + overhead);
 
-	M0_BE_OP_SYNC(op, m0_be_list_create(&h->bah_chunks, tx, &op, seg,
-					    &chunks_all_tl));
-	M0_BE_OP_SYNC(op, m0_be_list_create(&h->bah_free, tx, &op, seg,
-					    &chunks_free_tl));
+	M0_BE_OP_SYNC(op, m0_be_list_create(be_alloc_list_chunks(a), tx, &op,
+					    seg, &chunks_all_tl));
+	M0_BE_OP_SYNC(op, m0_be_list_create(be_alloc_list_free(a), tx, &op,
+					    seg, &chunks_free_tl));
 
 	h->bah_stats = (struct m0_be_allocator_stats) {
 		.bas_free_space = free_space,
@@ -757,8 +723,8 @@ M0_INTERNAL void m0_be_allocator_destroy(struct m0_be_allocator *a,
 
 	be_alloc_chunk_del_fini(a, tx, c);
 
-	M0_BE_OP_SYNC(op, m0_be_list_destroy(&h->bah_chunks, tx, &op));
-	M0_BE_OP_SYNC(op, m0_be_list_destroy(&h->bah_free, tx, &op));
+	M0_BE_OP_SYNC(op, m0_be_list_destroy(be_alloc_list_chunks(a), tx, &op));
+	M0_BE_OP_SYNC(op, m0_be_list_destroy(be_alloc_list_free(a), tx, &op));
 
 	m0_mutex_unlock(&a->ba_lock);
 	/** @todo PUT_PTR h */
@@ -779,6 +745,9 @@ M0_INTERNAL void m0_be_allocator_credit(struct m0_be_allocator *a,
 	struct m0_be_tx_credit mem_zero_credit = {};
 	struct m0_be_tx_credit chunk_credit;
 	struct m0_be_tx_credit header_credit;
+	struct m0_be_tx_credit tmp;
+	struct m0_be_list      *chunks = be_alloc_list_chunks(a);
+	struct m0_be_list      *free   = be_alloc_list_free(a);
 
 	chunk_credit  = M0_BE_TX_CREDIT_TYPE(struct be_alloc_chunk);
 	header_credit = M0_BE_TX_CREDIT_TYPE(struct m0_be_allocator_header);
@@ -797,10 +766,12 @@ M0_INTERNAL void m0_be_allocator_credit(struct m0_be_allocator *a,
 	/* tlist_add_after() x2 */
 	m0_be_tx_credit_mac(&chunk_add_after_credit, &capture_around_credit, 4);
 
-	/* tlist_del() x2 */
-	m0_be_tx_credit_mac(&chunk_del_fini_credit, &capture_around_credit, 2);
-	/* tlink_fini() x2 */
-	m0_be_tx_credit_mac(&chunk_del_fini_credit, &chunk_credit, 2);
+	tmp = M0_BE_TX_CREDIT(0, 0);
+	m0_be_list_credit(free,	  M0_BLO_DELETE,	1, &tmp);
+	m0_be_list_credit(chunks, M0_BLO_DELETE,	1, &tmp);
+	m0_be_list_credit(free,	  M0_BLO_TLINK_DESTROY, 1, &tmp);
+	m0_be_list_credit(chunks, M0_BLO_TLINK_DESTROY, 1, &tmp);
+	chunk_del_fini_credit = tmp;
 
 	m0_be_tx_credit_add(&chunk_trymerge_credit, &chunk_del_fini_credit);
 	m0_be_tx_credit_add(&chunk_trymerge_credit, &chunk_credit);
-- 
1.8.3.2


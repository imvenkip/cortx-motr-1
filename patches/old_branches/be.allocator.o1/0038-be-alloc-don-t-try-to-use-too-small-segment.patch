From 6224069bd26d3e40692ceec322387d756aef1011 Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Thu, 9 Jan 2014 05:59:31 +0200
Subject: [PATCH 38/96] be/alloc: don't try to use too small segment

---
 be/alloc.c | 8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)

diff --git a/be/alloc.c b/be/alloc.c
index 9341991..93f4736 100644
--- a/be/alloc.c
+++ b/be/alloc.c
@@ -836,23 +836,21 @@ M0_INTERNAL int m0_be_allocator_create(struct m0_be_allocator *a,
 				       struct m0_be_seg *seg)
 {
 	struct be_alloc_chunk *c;
-	m0_bcount_t	       overhead;
 	m0_bcount_t	       free_space;
 
 	M0_PRE(m0_be_seg__invariant(seg));
 
-	overhead   = seg->bs_reserved;
-	free_space = seg->bs_size - overhead;
+	free_space = seg->bs_size - m0_be_seg_reserved(seg);
 
 	/* check if segment is large enough to allocate at least 1 byte */
-	if (seg->bs_size <= overhead)
+	if (seg->bs_size <= m0_be_seg_reserved(seg) + sizeof(*c) + 1)
 		return -ENOSPC;
 
 	m0_mutex_lock(&a->ba_lock);
 
 	a->ba_seg   = seg;
 	a->ba_size  = free_space;
-	a->ba_addr  = (void *) ((uintptr_t) a->ba_seg->bs_addr + overhead);
+	a->ba_addr  = seg->bs_addr + m0_be_seg_reserved(seg);
 	a->ba_stats = (struct m0_be_allocator_stats) {
 		.bas_free_space = free_space,
 	};
-- 
1.8.3.2


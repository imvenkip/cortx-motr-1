From 9dd06e6630f31d17ccc1fd48e7878c48231416f2 Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Thu, 12 Dec 2013 06:08:43 +0200
Subject: [PATCH 27/96] be/ut/list: decreased stack size in m0_be_ut_list()

---
 be/linux_kernel/stubs.c | 38 +++++++++++++++++++++++++++++++++++++-
 be/ut/alloc.c           |  4 ++--
 be/ut/helper.h          | 26 +++++++++++++++-----------
 be/ut/list.c            | 45 +++++++++++++++++++++++++--------------------
 4 files changed, 79 insertions(+), 34 deletions(-)

diff --git a/be/linux_kernel/stubs.c b/be/linux_kernel/stubs.c
index e243944..9c6c6b8 100644
--- a/be/linux_kernel/stubs.c
+++ b/be/linux_kernel/stubs.c
@@ -38,7 +38,9 @@ M0_INTERNAL void m0_be_alloc(struct m0_be_allocator *a,
 			     m0_bcount_t size)
 {
 	void *p = m0_alloc(size);
-	op->bo_u.u_allocator.a_ptr = p;
+
+	if (op != NULL)
+		op->bo_u.u_allocator.a_ptr = p;
 	if (ptr != NULL)
 		*ptr = p;
 }
@@ -270,3 +272,37 @@ m0_be_ut_backend_sm_group_lookup(struct m0_be_ut_backend *ut_be)
 void m0_be_ut_tx_init(struct m0_be_tx *tx, struct m0_be_ut_backend *ut_be)
 {
 }
+
+M0_INTERNAL void m0_be_ut_alloc(struct m0_be_ut_backend *ut_be,
+				struct m0_be_ut_seg *ut_seg,
+				void **ptr,
+				m0_bcount_t size)
+{
+	m0_be_alloc(NULL, NULL, NULL, ptr, size);
+}
+
+M0_INTERNAL void m0_be_ut_free(struct m0_be_ut_backend *ut_be,
+			       struct m0_be_ut_seg *ut_seg,
+			       void *ptr)
+{
+	m0_be_free(NULL, NULL, NULL, ptr);
+}
+
+M0_INTERNAL void m0_be_ut_txc_init(struct m0_be_ut_txc *tc)
+{
+}
+
+M0_INTERNAL void m0_be_ut_txc_start(struct m0_be_ut_txc *tc,
+				    struct m0_be_tx *tx,
+				    const struct m0_be_seg *seg)
+{
+}
+
+M0_INTERNAL void m0_be_ut_txc_check(struct m0_be_ut_txc *tc,
+				    struct m0_be_tx *tx)
+{
+}
+
+M0_INTERNAL void m0_be_ut_txc_fini(struct m0_be_ut_txc *tc)
+{
+}
diff --git a/be/ut/alloc.c b/be/ut/alloc.c
index 1928bf3..7ca2c3e 100644
--- a/be/ut/alloc.c
+++ b/be/ut/alloc.c
@@ -108,7 +108,7 @@ static void be_ut_alloc_ptr_handle(struct m0_be_allocator *a,
 			  m0_be_allocator_credit(a, M0_BAO_ALLOC_ALIGNED,
 						 size, shift, &cred),
 			  M0_BE_OP_SYNC(op,
-			  m0_be_alloc_aligned(a, &tx, &op, p, size, shift)));
+			  m0_be_alloc_aligned(a, tx, &op, p, size, shift)));
 		M0_UT_ASSERT(*p != NULL);
 		M0_UT_ASSERT(m0_addr_is_aligned(*p, shift));
 	} else {
@@ -116,7 +116,7 @@ static void be_ut_alloc_ptr_handle(struct m0_be_allocator *a,
 			  m0_be_allocator_credit(a, M0_BAO_FREE_ALIGNED,
 						 size, shift, &cred),
 			  M0_BE_OP_SYNC(op,
-					m0_be_free_aligned(a, &tx, &op, *p)));
+					m0_be_free_aligned(a, tx, &op, *p)));
 		*p = NULL;
 	}
 }
diff --git a/be/ut/helper.h b/be/ut/helper.h
index 1029c6c..9135bc0 100644
--- a/be/ut/helper.h
+++ b/be/ut/helper.h
@@ -24,6 +24,7 @@
 
 #include "lib/types.h"		/* bool */
 #include "lib/buf.h"		/* m0_buf */
+#include "lib/memory.h"		/* M0_ALLOC_PTR */
 #include "sm/sm.h"		/* m0_sm */
 #include "stob/stob.h"		/* m0_stob */
 
@@ -188,30 +189,33 @@ M0_INTERNAL int m0_be_ut__seg_dict_destroy(struct m0_be_seg   *seg,
 #define M0_BE_UT_TRANSACT(__ut_be, __ut_seg,				\
 			  __tx, __cred, __credit_func, __action_func)	\
 	do {								\
-		struct m0_be_tx_credit __cred = {};			\
-		struct m0_be_ut_txc    __tc   = {};			\
-		struct m0_be_tx        __tx   = {};			\
-		int                    __rc;				\
+		struct m0_be_tx_credit	__cred = {};			\
+		struct m0_be_ut_txc	__tc   = {};			\
+		struct m0_be_tx	       *__tx;				\
+		int			__rc;				\
 									\
-		m0_be_ut_tx_init(&__tx, (__ut_be));			\
+		M0_ALLOC_PTR(__tx);					\
+		M0_ASSERT(__tx != NULL);				\
+		m0_be_ut_tx_init(__tx, (__ut_be));			\
 		__credit_func;						\
-		m0_be_tx_prep(&__tx, &__cred);				\
-		__rc = m0_be_tx_open_sync(&__tx);			\
+		m0_be_tx_prep(__tx, &__cred);				\
+		__rc = m0_be_tx_open_sync(__tx);			\
 		M0_ASSERT_INFO(__rc == 0, "__rc = %d", __rc);		\
 		if (__rc == 0) {					\
 			if (__ut_seg != NULL) {				\
 				m0_be_ut_txc_init(&__tc);		\
-				m0_be_ut_txc_start(&__tc, &__tx,	\
+				m0_be_ut_txc_start(&__tc, __tx,	\
 						   &(__ut_seg)->bus_seg);\
 			}						\
 			__action_func;					\
 			if (__ut_seg != NULL) {				\
-				m0_be_ut_txc_check(&__tc, &__tx);	\
+				m0_be_ut_txc_check(&__tc, __tx);	\
 				m0_be_ut_txc_fini(&__tc);		\
 			}						\
-			m0_be_tx_close_sync(&__tx);			\
+			m0_be_tx_close_sync(__tx);			\
 		}							\
-		m0_be_tx_fini(&__tx);					\
+		m0_be_tx_fini(__tx);					\
+		m0_free(__tx);						\
 	} while (0)
 
 #endif /* __MERO_BE_UT_HELPER_H__ */
diff --git a/be/ut/list.c b/be/ut/list.c
index 37a2509..422a838 100644
--- a/be/ut/list.c
+++ b/be/ut/list.c
@@ -59,6 +59,7 @@ M0_INTERNAL void m0_be_ut_list(void)
 	static struct m0_be_ut_backend	ut_be;
 	static struct m0_be_ut_seg	ut_seg;
 	static struct m0_be_seg        *seg;
+	static struct m0_be_op		op;
 	static struct test             *elem[10];
 	int				i;
 
@@ -78,7 +79,7 @@ M0_INTERNAL void m0_be_ut_list(void)
 	m0_be_list_init(list, seg);
 	M0_BE_UT_TRANSACT(&ut_be, &ut_seg, tx, cred,
 		  m0_be_list_credit(list, M0_BLO_CREATE, 1, &cred),
-		  M0_BE_OP_SYNC(op, m0_be_list_create(list, &tx, &op,
+		  M0_BE_OP_SYNC_WITH(&op, m0_be_list_create(list, tx, &op,
 						      seg, &test_tl)));
 
 	/* Perform some operations over the list. */
@@ -87,7 +88,7 @@ M0_INTERNAL void m0_be_ut_list(void)
 		m0_be_tlink_init(elem[i], list);
 		M0_BE_UT_TRANSACT(&ut_be, &ut_seg, tx, cred,
 		  m0_be_list_credit(list, M0_BLO_TLINK_CREATE, 1, &cred),
-		  M0_BE_OP_SYNC(op, m0_be_tlink_create(elem[i], &tx, &op,
+		  M0_BE_OP_SYNC_WITH(&op, m0_be_tlink_create(elem[i], tx, &op,
 						       list)));
 	}
 	/* add */
@@ -96,32 +97,32 @@ M0_INTERNAL void m0_be_ut_list(void)
 		M0_BE_UT_TRANSACT(&ut_be, &ut_seg, tx, cred,
 				  cred = M0_BE_TX_CREDIT_PTR(elem[i]),
 				  (elem[i]->t_payload = i,
-				   M0_BE_TX_CAPTURE_PTR(seg, &tx, elem[i])));
+				   M0_BE_TX_CAPTURE_PTR(seg, tx, elem[i])));
 
 		if (i < ARRAY_SIZE(elem) / 2) {
 			if (i % 2 == 0) {
 				M0_BE_UT_TRANSACT(&ut_be, &ut_seg, tx, cred,
 						  cred = cred_ins,
-						  M0_BE_OP_SYNC(op,
-				 m0_be_list_add(list, &op, &tx, elem[i])));
+						  M0_BE_OP_SYNC_WITH(&op,
+				 m0_be_list_add(list, &op, tx, elem[i])));
 			} else {
 				M0_BE_UT_TRANSACT(&ut_be, &ut_seg, tx, cred,
 						  cred = cred_ins,
-						  M0_BE_OP_SYNC(op,
-				 m0_be_list_add_tail(list, &op, &tx, elem[i])));
+						  M0_BE_OP_SYNC_WITH(&op,
+				 m0_be_list_add_tail(list, &op, tx, elem[i])));
 			}
 		} else {
 			if (i % 2 == 0) {
 				M0_BE_UT_TRANSACT(&ut_be, &ut_seg, tx, cred,
 						  cred = cred_ins,
-						  M0_BE_OP_SYNC(op,
-				 m0_be_list_add_after(list, &op, &tx,
+						  M0_BE_OP_SYNC_WITH(&op,
+				 m0_be_list_add_after(list, &op, tx,
 						      elem[i - 1], elem[i])));
 			} else {
 				M0_BE_UT_TRANSACT(&ut_be, &ut_seg, tx, cred,
 						  cred = cred_ins,
-						  M0_BE_OP_SYNC(op,
-				 m0_be_list_add_before(list, &op, &tx,
+						  M0_BE_OP_SYNC_WITH(&op,
+				 m0_be_list_add_before(list, &op, tx,
 						       elem[i - 1], elem[i])));
 			}
 		}
@@ -134,7 +135,8 @@ M0_INTERNAL void m0_be_ut_list(void)
 
 		M0_BE_UT_TRANSACT(&ut_be, &ut_seg, tx, cred,
 		  m0_be_list_credit(list, M0_BLO_DELETE, 1, &cred),
-		  M0_BE_OP_SYNC(op, m0_be_list_del(list, &op, &tx, elem[i])));
+		  M0_BE_OP_SYNC_WITH(&op, m0_be_list_del(list, &op,
+							 tx, elem[i])));
 	}
 
 	/* Reload segment and check data. */
@@ -154,19 +156,20 @@ M0_INTERNAL void m0_be_ut_list(void)
 
 		M0_BE_UT_TRANSACT(&ut_be, &ut_seg, tx, cred,
 		  m0_be_list_credit(list, M0_BLO_DELETE, 1, &cred),
-		  M0_BE_OP_SYNC(op, m0_be_list_del(list, &op, &tx, elem[i])));
+		  M0_BE_OP_SYNC_WITH(&op, m0_be_list_del(list, &op,
+							 tx, elem[i])));
 	}
 
 	for (i = 0; i < ARRAY_SIZE(elem); ++i) {
 		M0_BE_UT_TRANSACT(&ut_be, &ut_seg, tx, cred,
 		  m0_be_list_credit(list, M0_BLO_TLINK_DESTROY, 1, &cred),
-		  M0_BE_OP_SYNC(op, m0_be_tlink_destroy(elem[i], &tx, &op,
-							list)));
+		  M0_BE_OP_SYNC_WITH(&op, m0_be_tlink_destroy(elem[i], tx, &op,
+							      list)));
 		m0_be_tlink_fini(elem[i], list);
 	}
 	M0_BE_UT_TRANSACT(&ut_be, &ut_seg, tx, cred,
 		  m0_be_list_credit(list, M0_BLO_DESTROY, 1, &cred),
-		  M0_BE_OP_SYNC(op, m0_be_list_destroy(list, &tx, &op)));
+		  M0_BE_OP_SYNC_WITH(&op, m0_be_list_destroy(list, tx, &op)));
 	m0_be_list_fini(list);
 
 	for (i = 0; i < ARRAY_SIZE(elem); ++i)
@@ -186,17 +189,19 @@ M0_INTERNAL void m0_be_ut_list(void)
 
 static void *be_list_head(struct m0_be_list *list)
 {
-	void *p;
+	struct m0_be_op	 op;
+	void		*p;
 
-	M0_BE_OP_SYNC(op, p = m0_be_list_head(list, &op));
+	M0_BE_OP_SYNC_WITH(&op, p = m0_be_list_head(list, &op));
 	return p;
 }
 
 static void *be_list_next(struct m0_be_list *list, const void *obj)
 {
-	void *p;
+	struct m0_be_op	 op;
+	void		*p;
 
-	M0_BE_OP_SYNC(op, p = m0_be_list_next(list, &op, obj));
+	M0_BE_OP_SYNC_WITH(&op, p = m0_be_list_next(list, &op, obj));
 	return p;
 }
 
-- 
1.8.3.2


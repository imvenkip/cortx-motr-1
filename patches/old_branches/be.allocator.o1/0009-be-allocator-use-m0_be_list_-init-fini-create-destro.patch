From 77c1e25f0229c0fe653ea244fb53175018d523f4 Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Fri, 15 Nov 2013 00:52:34 +0200
Subject: [PATCH 09/96] be/allocator: use
 m0_be_list_{init,fini,create,destroy}()

---
 be/alloc.c | 59 ++++++++++++++++++-----------------------------------------
 1 file changed, 18 insertions(+), 41 deletions(-)

diff --git a/be/alloc.c b/be/alloc.c
index 9888197..ac8085f 100644
--- a/be/alloc.c
+++ b/be/alloc.c
@@ -344,38 +344,6 @@ static void chunks_free_tlist_add_c(struct m0_be_allocator *a,
 	chunks_free_tlist_capture_around(a, tx, new);
 }
 
-static void chunks_all_tlist_init_c(struct m0_be_allocator *a,
-				    struct m0_be_tx *tx,
-				    struct m0_tl *l)
-{
-	chunks_all_tlist_init(l);
-	be_alloc_head_capture(a, tx);
-}
-
-static void chunks_free_tlist_init_c(struct m0_be_allocator *a,
-				     struct m0_be_tx *tx,
-				     struct m0_tl *l)
-{
-	chunks_free_tlist_init(l);
-	be_alloc_head_capture(a, tx);
-}
-
-static void chunks_all_tlist_fini_c(struct m0_be_allocator *a,
-				    struct m0_be_tx *tx,
-				    struct m0_tl *l)
-{
-	chunks_all_tlist_fini(l);
-	be_alloc_head_capture(a, tx);
-}
-
-static void chunks_free_tlist_fini_c(struct m0_be_allocator *a,
-				     struct m0_be_tx *tx,
-				     struct m0_tl *l)
-{
-	chunks_free_tlist_fini(l);
-	be_alloc_head_capture(a, tx);
-}
-
 static bool be_alloc_is_mem_in_allocator(struct m0_be_allocator *a,
 					 m0_bcount_t size, const void *ptr)
 {
@@ -693,11 +661,16 @@ M0_INTERNAL int m0_be_allocator_init(struct m0_be_allocator *a,
 	a->ba_h = &((struct m0_be_seg_hdr *) seg->bs_addr)->bh_alloc;
 	M0_ASSERT(m0_addr_is_aligned(a->ba_h, BE_ALLOC_HEADER_SHIFT));
 
+	m0_be_list_init(&a->ba_h->bah_chunks);
+	m0_be_list_init(&a->ba_h->bah_free);
+
 	return 0;
 }
 
 M0_INTERNAL void m0_be_allocator_fini(struct m0_be_allocator *a)
 {
+	m0_be_list_fini(&a->ba_h->bah_free);
+	m0_be_list_fini(&a->ba_h->bah_chunks);
 	m0_mutex_fini(&a->ba_lock);
 }
 
@@ -731,16 +704,17 @@ M0_INTERNAL int m0_be_allocator_create(struct m0_be_allocator *a,
 {
 	struct m0_be_allocator_header *h;
 	struct be_alloc_chunk	      *c;
+	struct m0_be_seg	      *seg = a->ba_seg;
 	m0_bcount_t		       overhead;
 	m0_bcount_t		       free_space;
 
 	h = a->ba_h;
 	/** @todo GET_PTR h */
-	overhead   = a->ba_seg->bs_reserved;
-	free_space = a->ba_seg->bs_size - overhead;
+	overhead   = seg->bs_reserved;
+	free_space = seg->bs_size - overhead;
 
 	/* check if segment is large enough to allocate at least 1 byte */
-	if (a->ba_seg->bs_size <= overhead)
+	if (seg->bs_size <= overhead)
 		return -ENOSPC;
 
 	m0_mutex_lock(&a->ba_lock);
@@ -748,8 +722,10 @@ M0_INTERNAL int m0_be_allocator_create(struct m0_be_allocator *a,
 	h->bah_size = free_space;
 	h->bah_addr = (void *) ((uintptr_t) a->ba_seg->bs_addr + overhead);
 
-	chunks_all_tlist_init_c(a, tx, &h->bah_chunks.bl_list);
-	chunks_free_tlist_init_c(a, tx, &h->bah_free.bl_list);
+	M0_BE_OP_SYNC(op, m0_be_list_create(&h->bah_chunks, tx, &op, seg,
+					    &chunks_all_tl));
+	M0_BE_OP_SYNC(op, m0_be_list_create(&h->bah_free, tx, &op, seg,
+					    &chunks_free_tl));
 
 	h->bah_stats = (struct m0_be_allocator_stats) {
 		.bas_free_space = free_space,
@@ -782,8 +758,8 @@ M0_INTERNAL void m0_be_allocator_destroy(struct m0_be_allocator *a,
 
 	be_alloc_chunk_del_fini(a, tx, c);
 
-	chunks_free_tlist_fini_c(a, tx, &h->bah_free.bl_list);
-	chunks_all_tlist_fini_c(a, tx, &h->bah_chunks.bl_list);
+	M0_BE_OP_SYNC(op, m0_be_list_destroy(&h->bah_chunks, tx, &op));
+	M0_BE_OP_SYNC(op, m0_be_list_destroy(&h->bah_free, tx, &op));
 
 	m0_mutex_unlock(&a->ba_lock);
 	/** @todo PUT_PTR h */
@@ -795,6 +771,7 @@ M0_INTERNAL void m0_be_allocator_credit(struct m0_be_allocator *a,
 					unsigned                shift,
 					struct m0_be_tx_credit *accum)
 {
+	struct m0_be_tx_credit cred_list_create = {};
 	struct m0_be_tx_credit capture_around_credit = {};
 	struct m0_be_tx_credit chunk_add_after_credit = {};
 	struct m0_be_tx_credit chunk_del_fini_credit = {};
@@ -809,6 +786,7 @@ M0_INTERNAL void m0_be_allocator_credit(struct m0_be_allocator *a,
 	shift = max_check(shift, (unsigned) M0_BE_ALLOC_SHIFT_MIN);
 	mem_zero_credit = M0_BE_TX_CREDIT(1, size * 2);
 
+	m0_be_list_credit(NULL, M0_BLO_CREATE, 1, &cred_list_create);
 	m0_be_tx_credit_add(&capture_around_credit, &header_credit);
 	m0_be_tx_credit_mac(&capture_around_credit, &chunk_credit, 3);
 
@@ -828,8 +806,7 @@ M0_INTERNAL void m0_be_allocator_credit(struct m0_be_allocator *a,
 	/** @todo TODO XXX add list credits instead of entire header */
 	switch (optype) {
 		case M0_BAO_CREATE:
-			/* tlist_init x2 */
-			m0_be_tx_credit_mac(accum, &header_credit, 2);
+			m0_be_tx_credit_mac(accum, &cred_list_create, 2);
 			m0_be_tx_credit_add(accum, &chunk_add_after_credit);
 			break;
 		case M0_BAO_DESTROY:
-- 
1.8.3.2


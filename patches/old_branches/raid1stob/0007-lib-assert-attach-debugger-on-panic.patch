From 443f7a59cc963a16a2e4929806a89685933e1957 Mon Sep 17 00:00:00 2001
From: Nikita Danilov <nikita_danilov@xyratex.com>
Date: Mon, 12 Nov 2012 08:00:55 -0800
Subject: [PATCH 07/15] lib/assert: attach debugger on panic.

---
 lib/assert.c             | 19 +++++++++++++++++++
 lib/user_space/uthread.c | 20 +++++++++++++++++++-
 2 files changed, 38 insertions(+), 1 deletion(-)

diff --git a/lib/assert.c b/lib/assert.c
index fb6eb83..c9ab84c 100644
--- a/lib/assert.c
+++ b/lib/assert.c
@@ -20,6 +20,7 @@
 
 #include <stdio.h>  /* fprintf, fflush */
 #include <stdlib.h> /* abort */
+#include <unistd.h> /* fork, execvp */
 
 #ifdef HAVE_BACKTRACE
 #  include <execinfo.h>
@@ -41,6 +42,8 @@ enum {
 	BACKTRACE_DEPTH_MAX = 256
 };
 
+extern char *c2_debugger_args[4];
+
 /**
    Simple user space panic function: issue diagnostics to the stderr, flush the
    stream, optionally print the backtrace and abort(3) the program.
@@ -64,6 +67,22 @@ void c2_panic(const char *expr, const char *func, const char *file, int lineno)
 	}
 #endif
 	C2_LOG(C2_FATAL, "panic: %s %s() (%s:%i)", expr, func, file, lineno);
+	if (c2_debugger_args[0] != NULL) {
+		int rc;
+
+		rc = fork();
+		if (rc > 0) {
+			/* parent */
+			volatile bool stop = true;
+
+			while (stop) {
+				;
+			}
+		} else if (rc == 0) {
+			/* child */
+			rc = execvp(c2_debugger_args[0], c2_debugger_args);
+		}
+	}
 	abort();
 }
 
diff --git a/lib/user_space/uthread.c b/lib/user_space/uthread.c
index 4d6781a..61260da 100644
--- a/lib/user_space/uthread.c
+++ b/lib/user_space/uthread.c
@@ -19,6 +19,11 @@
  * Original creation date: 02/18/2011
  */
 
+#include <stdlib.h>     /* getenv */
+#include <unistd.h>     /* getpid */
+#include <errno.h>      /* program_invocation_name */
+#include <stdio.h>      /* snprinf */
+
 #include "lib/misc.h"   /* C2_SET0 */
 #include "lib/memory.h"
 #include "lib/errno.h"
@@ -138,9 +143,22 @@ int c2_thread_confine(struct c2_thread *q, const struct c2_bitmap *processors)
 	return -pthread_setaffinity_np(q->t_h.h_id, sizeof cpuset, &cpuset);
 }
 
+char *c2_debugger_args[4] = {
+	NULL, /* debugger name */
+	NULL, /* our binary name */
+	NULL, /* our process id */
+	NULL
+};
+
 int c2_threads_init(void)
 {
-	int result;
+	int    result;
+	static char pidbuf[20];
+
+	c2_debugger_args[0] = getenv("COLIBRI_DEBUGGER");
+	c2_debugger_args[1] = program_invocation_name;
+	c2_debugger_args[2] = pidbuf;
+	snprintf(pidbuf, ARRAY_SIZE(pidbuf), "%i", getpid());
 
 	result = -pthread_attr_init(&pthread_attr_default);
 	if (result != 0)
-- 
1.8.3.2


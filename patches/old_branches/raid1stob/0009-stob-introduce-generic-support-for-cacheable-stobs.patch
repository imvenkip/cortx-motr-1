From 6d956b66ed552f22e85de476bc7c968fc72ab5a0 Mon Sep 17 00:00:00 2001
From: Nikita Danilov <nikita_danilov@xyratex.com>
Date: Sun, 11 Nov 2012 17:40:26 +0400
Subject: [PATCH 09/15] stob: introduce generic support for cacheable stobs.

Introduce c2_stob_cache representing an in-memory cache of
stobs. c2_stob_cacheable is an element of this cache. The cache can be searched
by stob identifier and populated with new objects.

Currently, the cache is implemented as a list.
---
 colibri/magic.h |   7 ++++
 stob/cache.c    | 126 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 stob/cache.h    |  91 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 224 insertions(+)
 create mode 100644 stob/cache.c
 create mode 100644 stob/cache.h

diff --git a/colibri/magic.h b/colibri/magic.h
index f101b3e..31ac8b1 100755
--- a/colibri/magic.h
+++ b/colibri/magic.h
@@ -460,6 +460,13 @@ enum c2_magic_satchel {
 	/* rpc_chans_tl::td_head_magic (idesia fossil) */
 	C2_RPC_CHAN_HEAD_MAGIC = 0x331de51af0551177,
 
+/* stob */
+	/* c2_stob_cacheable::ca_magix (bilobed flood) */
+	C2_STOB_CACHEABLE_MAGIX = 0x33b110bedf100d77,
+
+	/* stob/cache.c:cache_tl::td_head_magic (faded ballade) */
+	C2_STOB_CACHE_MAGIX     = 0x33FADEDBA11ADE77,
+
 /* Trace */
 	/* c2_trace_rec_header::trh_magic (foldable doll) */
 	C2_TRACE_MAGIC = 0x33f01dab1ed01177,
diff --git a/stob/cache.c b/stob/cache.c
new file mode 100644
index 0000000..e20870c
--- /dev/null
+++ b/stob/cache.c
@@ -0,0 +1,126 @@
+/*
+ * COPYRIGHT 2011 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Nikita Danilov <Nikita_Danilov@xyratex.com>
+ * Original creation date: 11-Nov-2012
+ */
+
+#include "colibri/magic.h"
+
+#include "stob/cache.h"
+
+/**
+ * @addtogroup stobcache
+ *
+ * @{
+ */
+
+C2_TL_DESCR_DEFINE(cache, "cacheable stobs", static, struct c2_stob_cacheable,
+		   ca_linkage, ca_magix,
+		   C2_STOB_CACHEABLE_MAGIX, C2_STOB_CACHE_MAGIX);
+
+C2_TL_DEFINE(cache, static, struct c2_stob_cacheable);
+
+void c2_stob_cacheable_init(struct c2_stob_cacheable *obj,
+			    const struct c2_stob_id *id,
+			    struct c2_stob_domain *dom)
+{
+	c2_stob_init(&obj->ca_stob, id, dom);
+	cache_tlink_init(obj);
+}
+
+void c2_stob_cacheable_fini(struct c2_stob_cacheable *obj)
+{
+	cache_tlink_del_fini(obj);
+	c2_stob_fini(&obj->ca_stob);
+}
+
+void c2_stob_cache_init(struct c2_stob_cache *cache)
+{
+	cache_tlist_init(&cache->ch_head);
+}
+
+void c2_stob_cache_fini(struct c2_stob_cache *cache)
+{
+	struct c2_stob_cacheable *obj;
+
+	c2_tl_for(cache, &cache->ch_head, obj) {
+		c2_stob_put(&obj->ca_stob);
+	} c2_tl_endfor;
+	cache_tlist_fini(&cache->ch_head);
+}
+
+struct c2_stob_cacheable *c2_stob_cacheable_lookup(struct c2_stob_cache *cache,
+						   const struct c2_stob_id *id)
+{
+	struct c2_stob_cacheable *obj;
+
+	c2_tl_for(cache, &cache->ch_head, obj) {
+		if (c2_stob_id_eq(id, &obj->ca_stob.so_id)) {
+			c2_stob_get(&obj->ca_stob);
+			break;
+		}
+	} c2_tl_endfor;
+	return obj;
+}
+
+int c2_stob_cache_find(struct c2_stob_cache *cache,
+		       struct c2_stob_domain *dom,
+		       const struct c2_stob_id *id,
+		       int (*init)(struct c2_stob_domain *,
+				   const struct c2_stob_id *,
+				   struct c2_stob_cacheable **),
+		       struct c2_stob_cacheable **out)
+{
+	struct c2_stob_cacheable *obj;
+	struct c2_stob_cacheable *ghost;
+	int                       result;
+
+	result = 0;
+	c2_rwlock_read_lock(&dom->sd_guard);
+	obj = c2_stob_cacheable_lookup(cache, id);
+	c2_rwlock_read_unlock(&dom->sd_guard);
+
+	if (obj == NULL) {
+		result = (*init)(dom, id, &obj);
+		if (result == 0) {
+			C2_ASSERT(obj != NULL);
+			c2_rwlock_write_lock(&dom->sd_guard);
+			ghost = c2_stob_cacheable_lookup(cache, id);
+			if (ghost == NULL)
+				cache_tlist_add(&cache->ch_head, obj);
+			else {
+				obj->ca_stob.so_op->sop_fini(&obj->ca_stob);
+				obj = ghost;
+			}
+			c2_stob_get(&obj->ca_stob);
+			c2_rwlock_write_unlock(&dom->sd_guard);
+		}
+	}
+	*out = obj;
+	return result;
+}
+
+/** @} end group stobcache */
+
+/*
+ *  Local variables:
+ *  c-indentation-style: "K&R"
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ *  fill-column: 80
+ *  scroll-step: 1
+ *  End:
+ */
diff --git a/stob/cache.h b/stob/cache.h
new file mode 100644
index 0000000..d90b3b6
--- /dev/null
+++ b/stob/cache.h
@@ -0,0 +1,91 @@
+/* -*- C -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Nikita Danilov <Nikita_Danilov@xyratex.com>
+ * Original creation date: 11-Nov-2012
+ */
+
+#pragma once
+
+#ifndef __COLIBRI_STOB_CACHE_H__
+#define __COLIBRI_STOB_CACHE_H__
+
+/**
+ * @defgroup stobcache Stob caching.
+ *
+ * This module provides a simple interface for stob types that want to cache
+ * stobs in memory.
+ *
+ * @{
+ */
+
+#include "lib/tlist.h"
+#include "lib/types.h"             /* uint64_t */
+
+#include "stob/stob.h"
+
+struct c2_stob_cacheable {
+	uint64_t        ca_magix;
+	struct c2_stob  ca_stob;
+	struct c2_tlink ca_linkage;
+};
+
+struct c2_stob_cache {
+	struct c2_tl ch_head;
+};
+
+void c2_stob_cacheable_init(struct c2_stob_cacheable *obj,
+			    const struct c2_stob_id *id,
+			    struct c2_stob_domain *dom);
+void c2_stob_cacheable_fini(struct c2_stob_cacheable *obj);
+
+void c2_stob_cache_init(struct c2_stob_cache *cache);
+void c2_stob_cache_fini(struct c2_stob_cache *cache);
+
+/** Searches for the object with a given identifier in the cache. */
+struct c2_stob_cacheable *c2_stob_cacheable_lookup(struct c2_stob_cache *cache,
+						   const struct c2_stob_id *id);
+
+/**
+ * Searches for the object with a given identifier in the cache, creates one if
+ * none is found. This can be used as an implementation of
+ * c2_stob_domain_op::sdo_stob_find().
+ *
+ * Domain read-write lock is used for synchronisation.
+ */
+int c2_stob_cache_find(struct c2_stob_cache *cache,
+		       struct c2_stob_domain *dom,
+		       const struct c2_stob_id *id,
+		       int (*init)(struct c2_stob_domain *,
+				   const struct c2_stob_id *,
+				   struct c2_stob_cacheable **),
+		       struct c2_stob_cacheable **out);
+
+
+/** @} end group stobcache */
+
+/* __COLIBRI_STOB_CACHE_H__ */
+#endif
+
+/*
+ *  Local variables:
+ *  c-indentation-style: "K&R"
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ *  fill-column: 80
+ *  scroll-step: 1
+ *  End:
+ */
-- 
1.8.3.2


From df4dc28f7df6821328cb39fce1800c04137330f8 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 23 Mar 2012 11:59:18 +0200
Subject: [PATCH 089/370] change c2_confc_open_sync() to return error code

Make c2_confc_open_sync() return int and take void** parameter.
Update the pseudocode in examples correspondingly.

Reported-by: Nikita Danilov <nikita_danilov@xyratex.com>
Reviewed-on: http://reviewboard.clusterstor.com/r/714/
---
 conf/confc.c | 24 +++++++++++++++---------
 conf/confc.h | 48 ++++++++++++++++++++++--------------------------
 2 files changed, 37 insertions(+), 35 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index e8d603c..1875e3d 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -574,26 +574,32 @@ int c2_confc_open(struct c2_confc_ctx *ctx, struct c2_conf_obj *path_origin,
 	return 0;
 }
 
-void * c2_confc_open_sync(struct c2_confc *client,
-			  struct c2_conf_obj *path_origin,
-			  const struct c2_conf_pathcomp *path, size_t path_len)
+int c2_confc_open_sync(void **obj, struct c2_confc *client,
+		       struct c2_conf_obj *path_origin,
+		       const struct c2_conf_pathcomp *path, size_t path_len)
 {
 	struct c2_confc_ctx ctx;
+	struct c2_clink     clink;
 	int                 rc;
-	void               *result = NULL;
 
 	C2_PRE(confc_is_initialised(client));
 
 	c2_confc_ctx_init(&ctx, client);
+	c2_clink_init(&clink, NULL);
+	c2_clink_add(&ctx.fc_complete, &clink);
+
 	rc = c2_confc_open(&ctx, path_origin, path, path_len);
 	if (rc == 0) {
-		rc = c2_sm_timedwait(&ctx.fc_mach, S_TERMINAL | S_FAILURE,
-				     C2_TIME_NEVER);
-		C2_ASSERT(rc == 0);
-		result = ctx.fc_result;
+		c2_chan_wait(&clink);
+		*obj = ctx.fc_result;
+		if (*obj == NULL)
+			rc = c2_confc_error(&ctx);
 	}
+
+	c2_clink_del(&clink);
+	c2_clink_fini(&clink);
 	c2_confc_ctx_fini(&ctx);
-	return result;
+	return rc;
 }
 
 void c2_confc_close(void *obj, struct c2_confc *client)
diff --git a/conf/confc.h b/conf/confc.h
index 9c1407b..31fedf7 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -159,14 +159,13 @@
  *
  * struct c2_confc *confc = ...;
  *
- * static struct c2_conf_filesystem * filesystem_open_a(int32_t *errno)
+ * static int filesystem_open_a(struct c2_conf_filesystem **fs)
  * {
- *     struct c2_confc_ctx        ctx;
- *     struct c2_clink            clink;
- *     struct c2_conf_pathcomp    path[] =
+ *     struct c2_confc_ctx     ctx;
+ *     struct c2_clink         clink;
+ *     struct c2_conf_pathcomp path[] =
  *         { C2_CONF_PATHCOMP_R(C2_CO_FILESYSTEM) };
- *     struct c2_conf_filesystem *ret = NULL;
- *     int                        rc;
+ *     int                     rc;
  *
  *     c2_confc_ctx_init(&ctx, confc);
  *     c2_clink_init(&clink, NULL)
@@ -175,24 +174,22 @@
  *     rc = c2_confc_open(&ctx, NULL, path, ARRAY_SIZE(path));
  *     if (rc == 0) {
  *         c2_chan_wait(&clink);
- *         ret = ctx.fc_result;
- *         if (ret == NULL && errno != NULL)
- *             *errno = c2_confc_error(ctx);
- *     } else if (errno != NULL) {
- *         *errno = -rc;
+ *         *fs = ctx.fc_result;
+ *         if (*fs == NULL)
+ *             rc = c2_confc_error(&ctx);
  *     }
  *
  *     c2_clink_del(&clink);
  *     c2_clink_fini(&clink);
  *     c2_confc_ctx_fini(&ctx);
- *     return ret;
+ *     return rc;
  * }
  *
- * static struct c2_conf_filesystem * filesystem_open_s(void)
+ * static int filesystem_open_s(struct c2_conf_filesystem **fs)
  * {
  *     struct c2_conf_pathcomp path[] =
  *         { C2_CONF_PATHCOMP_R(C2_CO_FILESYSTEM) };
- *     return c2_confc_open_sync(confc, NULL, path, ARRAY_SIZE(path));
+ *     return c2_confc_open_sync(fs, confc, NULL, path, ARRAY_SIZE(path));
  * }
  * @endcode
  *
@@ -249,7 +246,7 @@
  *         C2_CONF_PATHCOMP_R(C2_CO_FILESYSTEM),
  *         C2_CONF_PATHCOMP_R(C2_CO_SERVICE)
  *     };
- *     int ret = -1;
+ *     int ret;
  *
  *     // /fs/services
  *     services = c2_confc_diropen_sync(confc, NULL, path, ARRAY_SIZE(path));
@@ -261,8 +258,8 @@
  *             continue;
  *
  *         path[0].pc_u.relation = C2_CO_NODE;
- *         node = c2_confc_open_sync(confc, svc, path, 1); // svc/node
- *         if (node == NULL)
+ *         ret = c2_confc_open_sync(&node, confc, svc, path, 1); // svc/node
+ *         if (ret != 0)
  *             goto end;
  *
  *         if (!c2_conf_buf_eq(node->cn_obj.co_key, node_key)) {
@@ -428,15 +425,16 @@ int c2_confc_open(struct c2_confc_ctx *ctx, struct c2_conf_obj *path_origin,
 		  const struct c2_conf_pathcomp *path, size_t path_len);
 
 /**
- * Synchronous variant of c2_confc_open(). Returns a pointer to the
- * requested configuration object or NULL in case of error.
+ * Opens configuration object synchronously.
+ *
+ * If the function succeeds, *obj will point to the requested
+ * configuration object.
  *
  * @see c2_confc_open()
  */
-void * c2_confc_open_sync(struct c2_confc *client,
-			  struct c2_conf_obj *path_origin,
-			  const struct c2_conf_pathcomp *path,
-			  size_t path_len);
+int c2_confc_open_sync(void **obj, struct c2_confc *client,
+		       struct c2_conf_obj *path_origin,
+		       const struct c2_conf_pathcomp *path, size_t path_len);
 
 /* XXX[future]
  * If statistics shows that synchronous variant is used more often, we
@@ -448,9 +446,7 @@ void * c2_confc_open_sync(struct c2_confc *client,
  * Closes configuration object opened with c2_confc_open() or
  * c2_confc_open_sync().
  *
- * @param obj     The value returned by c2_confc_open_sync() or, in case
- *                of c2_confc_open(), the value taken from
- *                c2_confc_ctx::fc_result.
+ * @param obj     Opened configuration object.
  * @param client  The instance of confc this object was opened with.
  *
  * @note  c2_confc_close(NULL,...) is a noop.
-- 
1.8.3.2


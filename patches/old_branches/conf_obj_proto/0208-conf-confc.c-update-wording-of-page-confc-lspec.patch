From 3b00f851382f869d1feb0c68110e46a281cb49d9 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 22 Jun 2012 03:11:16 +0300
Subject: [PATCH 208/370] conf/confc.c: update wording of @page confc-lspec

---
 conf/confc.c | 126 +++++++++++++++++++++++++++--------------------------------
 1 file changed, 57 insertions(+), 69 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 327022e..4138c46 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -82,9 +82,8 @@
  * <!---------------------------------------------------------------->
  * @subsection confc-lspec-state-initial S_INITIAL
  *
- * c2_confc_open() and c2_confc_diropen() check validity of `path'
- * argument (see c2_conf_path_is_valid()), copy it to
- * c2_confc_ctx::fc_path, and post an AST to c2_confc::cc_group.
+ * c2_confc_open() populates c2_confc_ctx::fc_path array
+ * (path_store()) and posts an AST to c2_confc::cc_group.
  *
  * @note  c2_sm_ast_post() signals group's clink. Current design of
  *        confc assumes that some thread will respond to this event by
@@ -101,14 +100,14 @@
  * call, moves the state machine to another state:
  *
 @verbatim
-+---------------------+-----------------+
-| path_walk() returns |   next state    |
-+---------------------+-----------------+
-|    C2_CS_READY      |  S_TERMINAL     |
-|    C2_CS_MISSING    |  S_WAIT_REPLY   |
-|    C2_CS_LOADING    |  S_WAIT_STATUS  |
-|         < 0         |  S_FAILURE      |
-+---------------------+-----------------+
++--------------------+-----------------+
+| path_walk() result |   next state    |
++--------------------+-----------------+
+|    C2_CS_READY     |  S_TERMINAL     |
+|    C2_CS_MISSING   |  S_WAIT_REPLY   |
+|    C2_CS_LOADING   |  S_WAIT_STATUS  |
+|         < 0        |  S_FAILURE      |
++--------------------+-----------------+
 @endverbatim
  *
  * The algorithm of path_walk() is described below (see @ref
@@ -133,14 +132,12 @@
  * <!---------------------------------------------------------------->
  * @subsection confc-lspec-state-wait-status S_WAIT_STATUS
  *
- * A state machine in S_WAIT_STATUS state remains idle until any of
- * the channels (c2_conf_obj::co_chan) that clinks of c2_confc_ctx are
+ * A state machine in S_WAIT_STATUS state remains idle until the
+ * channel (c2_conf_obj::co_chan) that c2_confc_ctx::fc_clink is
  * registered with is signaled.  Such an event triggers
- * on_object_updated() callback, which de-registers clinks (->fc_extra
- * and ->fc-clink) and posts an AST that will eventually move the
- * state machine to S_CHECK state. If ->fc_extra is not NULL,
- * on_object_updated() also finalizes clinks of this array and frees
- * it.
+ * on_object_updated() callback, which de-registers the clink and
+ * posts an AST that will eventually move the state machine to S_CHECK
+ * state.
  *
  * @note  Object's channel (c2_conf_obj::co_chan) is signaled
  *        (c2_chan_broadcast()) when
@@ -150,7 +147,8 @@
  *          (loading succeeded) or C2_CS_MISSING (loading failed);
  *        -#
  *           the object is closed and its number of references becomes
- *           zero.  This case is not applicable to S_WAIT_STATUS state.
+ *           zero.  (This case is not applicable to S_WAIT_STATUS
+ *           state.)
  *
  * <!---------------------------------------------------------------->
  * @subsection confc-lspec-state-grow-cache S_GROW_CACHE
@@ -175,26 +173,20 @@
  * @section confc-lspec-walk Walking the DAG
  *
  * path_walk() begins with locking the confc cache (c2_confc::cc_lock);
- * it unlocks the cache before returning.  The function does two
- * things, represented by subroutines:
- *   -#
- *      walk() "moves" along the DAG of cached configuration
- *      objects. It starts at the configuration object the path
- *      originates from and follows the directions specified by path
- *      components.  walk() stops when all of the path components are
- *      consumed or when a stub is reached.  It returns the "resultant
- *      status" of the objects belonging the path or negative error
- *      code.
- *   -#
- *      walk_complete() applies the results of path walking. The
- *      arguments are c2_confc_ctx, path position reached by walk(),
- *      and status value returned by walk().
+ * it unlocks the cache before returning.
  *
- * @note According to "confc offline" workaround (see @ref
- *       conf-fspec-preload), the situations when configuration data
- *       requested by an application is missing from the confc cache
- *       are treated as failures.  path_walk() C2_ASSERT()s that the
- *       value of status returned by walk() is C2_CS_READY.
+ * The function "moves" along the DAG of cached configuration objects,
+ * starting at c2_confc_ctx::fc_origin object and following
+ * c2_confc_ctx::fc_path.  Next object is found by calling
+ * c2_conf_obj_ops::coo_lookup() with current object and path
+ * component as parameters.  The iteration continues until
+ * ->coo_lookup() fails, or a stub is met, or the end of path is
+ * reached.
+ *
+ * path_walk_complete() applies the results of path walking:
+ * increments reference counter of C2_CS_READY object, fills
+ * c2_conf_fetch request for C2_CS_MISSING object, or registers clink
+ * with the channel of C2_CS_LOADING object.
  *
  * <hr> <!------------------------------------------------------------>
  * @section confc-lspec-grow Growing the cache
@@ -203,7 +195,7 @@
  * returning.  The function performs the following operations for
  * every object descriptor (confx_object, defined in conf/onwire.ff):
  *   -#
- *      Tries to find an object with the same identity (type and key)
+ *      Tries to find an object with the same identity (type and id)
  *      in the registry of cached objects (c2_confc::cc_registry),
  *      using c2_conf_map_lookup().
  *   -#
@@ -221,11 +213,7 @@
  *
  * object_enrich() compares cached object with the descriptor received
  * from the confd.  If a discrepancy is found (!c2_conf_obj_match()),
- * the function
- *   - reports the discrepancy (C2_ADDB_ADD());
- *   - sets status of the cached object to C2_CS_MISSING;
- *   - signals object's channel (c2_chan_broadcast());
- *   - returns negative value.
+ * the function reports it (C2_ADDB_ADD()) and returns an error code.
  *
  * If there is no discrepancy, and the cached object is a stub,
  * object_enrich()
@@ -643,30 +631,6 @@ static void grow_cache_st_in(struct c2_sm *mach)
 	XXX;
 }
 
-/** Action to perform on entering S_TERMINAL or S_FAILURE state. */
-static void completion_announce(struct c2_sm *mach)
-{
-	c2_chan_broadcast(&mach_to_ctx(mach)->fc_complete);
-}
-
-static bool check_st_invariant(const struct c2_sm *mach)
-{
-	const struct c2_confc_ctx *ctx = const_mach_to_ctx(mach);
-	return mach->sm_rc == 0 && ctx->fc_result == NULL &&
-		ctx_invariant(ctx);
-}
-
-static bool failure_st_invariant(const struct c2_sm *mach)
-{
-	const struct c2_confc_ctx *ctx = const_mach_to_ctx(mach);
-	return ctx->fc_result == NULL && ctx->fc_mach.sm_rc < 0;
-}
-
-static bool terminal_st_invariant(const struct c2_sm *mach)
-{
-	return mach->sm_rc == 0 && const_mach_to_ctx(mach)->fc_result != NULL;
-}
-
 /** Handles `RPC replied' event (i.e. response arrival or an error). */
 static void on_replied(struct c2_rpc_item *item)
 {
@@ -694,6 +658,30 @@ static bool on_object_updated(struct c2_clink *link)
 	ast_state_set(&ctx->fc_ast, S_CHECK);
 	return true; /* event is consumed */
 }
+
+/** Action to perform on entering S_TERMINAL or S_FAILURE state. */
+static void completion_announce(struct c2_sm *mach)
+{
+	c2_chan_broadcast(&mach_to_ctx(mach)->fc_complete);
+}
+
+static bool check_st_invariant(const struct c2_sm *mach)
+{
+	const struct c2_confc_ctx *ctx = const_mach_to_ctx(mach);
+	return mach->sm_rc == 0 && ctx->fc_result == NULL &&
+		ctx_invariant(ctx);
+}
+
+static bool failure_st_invariant(const struct c2_sm *mach)
+{
+	const struct c2_confc_ctx *ctx = const_mach_to_ctx(mach);
+	return ctx->fc_result == NULL && ctx->fc_mach.sm_rc < 0;
+}
+
+static bool terminal_st_invariant(const struct c2_sm *mach)
+{
+	return mach->sm_rc == 0 && const_mach_to_ctx(mach)->fc_result != NULL;
+}
 
 /* ------------------------------------------------------------------
  * Walkies.
@@ -765,7 +753,7 @@ static int path_walk(struct c2_confc_ctx *ctx)
 }
 
 /**
- * Applies results of a path walk.
+ * Applies the results of path walking.
  *
  * @returns original status of the reached configuration object.
  *
-- 
1.8.3.2


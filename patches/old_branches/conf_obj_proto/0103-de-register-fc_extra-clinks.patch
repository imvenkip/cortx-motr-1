From a5a38549097f3ae07ed281e2d06a51b0a93810ff Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 30 Mar 2012 00:29:53 +0300
Subject: [PATCH 103/370] de-register ->fc_extra clinks

+ Rename on_unpinned() to on_object_update().
---
 conf/confc.c | 25 +++++++++++++++----------
 conf/confc.h |  7 +++----
 2 files changed, 18 insertions(+), 14 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 00caa96..503851b 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -330,9 +330,9 @@
  *   All this function does is c2_rpc_post()ing c2_confc_ctx::fc_fop.
  *
  * - A state machine in S_WAIT_STATUS state waits for
- *   c2_confc_ctx::fc_clink to be signaled.  on_unpinned() call-back,
- *   associated with the clink, posts an AST that will move the
- *   state machine to S_CHECK state.
+ *   c2_confc_ctx::fc_clink to be signaled.  on_object_update()
+ *   callback, associated with the clink, posts an AST that will move
+ *   the state machine to S_CHECK state.
  *
  * - A state machine in S_WAIT_REPLY state waits for a response from
  *   confd to arrive.  Upon receiving a response, on_replied() is
@@ -939,7 +939,7 @@ static bool terminal_st_invariant(const struct c2_sm *mach)
 	return mach->sm_rc == 0 && ctx->fc_result != NULL;
 }
 
-/** Handles RPC "replied" event: response arrival or an error. */
+/** Handles `RPC replied' event, i.e. response arrival or an error. */
 static void on_replied(struct c2_rpc_item *item)
 {
 	struct c2_confc_ctx *ctx;
@@ -956,14 +956,19 @@ static void on_replied(struct c2_rpc_item *item)
 	}
 }
 
-/** Handles "object unpinned" event. */
-static bool on_unpinned(struct c2_clink *link)
+/** Handles `object loading completed' and `object unpinned' events. */
+static bool on_object_update(struct c2_clink *link)
 {
+	size_t i;
 	struct c2_confc_ctx *ctx =
-		container_of(link, struct c2_confc_ctx, fc_clink);
-	c2_clink_del(link);
+		container_of(link->cl_group, struct c2_confc_ctx, fc_clink);
+
+	for (i = 0; i < ctx->fc_nr_extra; ++i)
+		c2_clink_del(ctx->fc_extra + i);
+	c2_clink_del(ctx->fc_clink); /* group head is de-registered last */
+
 	ast_state_set(&ctx->fc_ast, S_CHECK);
-	return true;
+	return true; /* event is consumed */
 }
 
 static const struct c2_sm_state_descr confc_states[S_NR] = {
@@ -1161,7 +1166,7 @@ void c2_confc_ctx_init(struct c2_confc_ctx *ctx, struct c2_confc *client)
 	c2_sm_init(&ctx->fc_mach, &confc_states_conf, S_INITIAL,
 		   confc->cc_group, XXX /* *c2_addb_ctx */);
 	c2_chan_init(&ctx->fc_complete);
-	c2_clink_init(&ctx->fc_clink, on_unpinned);
+	c2_clink_init(&ctx->fc_clink, on_object_update);
 	C2_POST(ctx_invariant(ctx));
 }
 
diff --git a/conf/confc.h b/conf/confc.h
index 51a1414..ece9bdf 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -387,11 +387,10 @@ struct c2_confc_ctx {
 	/** Request fop. */
 	struct c2_fop            fc_fop;
 	/**
-	 * Record of interest in "object loading completed" or
-	 * "object unpinned" events.
+	 * Record of interest in `object loading completed' or
+	 * `object unpinned' events.
 	 *
-	 * This clink gets added to c2_conf_obj::co_chan channel.
-	 * It is also a "group head" clink for ->fc_extra.
+	 * The head of clink group comprising ->fc_extra clinks and itself.
 	 */
 	struct c2_clink          fc_clink;
 	/**
-- 
1.8.3.2


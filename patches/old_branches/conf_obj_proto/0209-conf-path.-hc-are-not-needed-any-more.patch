From 98f4755da5dbbeb3ecfb70e7d4a3a3ee3e9f96b0 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 22 Jun 2012 03:21:17 +0300
Subject: [PATCH 209/370] conf/path.[hc] are not needed any more

---
 conf/obj.c  |   2 -
 conf/path.c | 187 -------------------------------------
 conf/path.h | 304 ------------------------------------------------------------
 3 files changed, 493 deletions(-)
 delete mode 100644 conf/path.c
 delete mode 100644 conf/path.h

diff --git a/conf/obj.c b/conf/obj.c
index 6963c5f..7707770 100644
--- a/conf/obj.c
+++ b/conf/obj.c
@@ -160,7 +160,6 @@
  * @section conf-fspec Functional Specification
  *
  * - @subpage conf-fspec-obj
- * - @subpage conf-fspec-path
  * - @subpage confc-fspec
  * - @subpage conf-fspec-preload
  * - @subpage conf-fspec-objops
@@ -172,7 +171,6 @@
  *
  * - @ref conf-lspec-comps
  * - @ref conf_dlspec_obj
- * - @ref conf_dlspec_path
  * - @subpage confc-lspec
  * - @ref conf_dlspec_objops
  * - @ref conf_dlspec_map
diff --git a/conf/path.c b/conf/path.c
deleted file mode 100644
index 07d5fa0..0000000
--- a/conf/path.c
+++ /dev/null
@@ -1,187 +0,0 @@
-/* -*- c -*- */
-/*
- * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
- *
- * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
- * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
- * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
- * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
- * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
- * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
- * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
- *
- * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
- * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
- * http://www.xyratex.com/contact
- *
- * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
- * Original creation date: 05-Feb-2012
- */
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-#include "conf/path.h"
-#include "conf/obj.h"
-#include "lib/arith.h"  /* C2_CNT_INC */
-#include "lib/memory.h" /* C2_ALLOC_ARR */
-#include "lib/misc.h"   /* memcpy */
-
-/**
- * @defgroup conf_dlspec_path Path to Configuration Object/Directory
- *
- * @see @ref conf, @ref conf-lspec
- *
- * @{
- */
-
-const struct c2_conf_relation dl_profile[] = {
-	{
-		.r_type   = C2_CO_FILESYSTEM,
-		.r_offset = offsetof(struct c2_conf_profile, cp_filesystem),
-		.r_dir    = NULL
-	}
-};
-const struct c2_conf_relation dl_filesystem[] = {
-	{
-		.r_type   = C2_CO_SERVICE,
-		.r_offset = offsetof(struct c2_conf_filesystem, cf_services),
-		.r_dir    = c2_conf_filesystem_services_tl
-	}
-};
-const struct c2_conf_relation dl_service[] = {
-	{
-		.r_type   = C2_CO_NODE,
-		.r_offset = offsetof(struct c2_conf_service, cs_node),
-		.r_dir    = NULL
-	}
-};
-const struct c2_conf_relation dl_node[] = {
-	{
-		.r_type   = C2_CO_NIC,
-		.r_offset = offsetof(struct c2_conf_node, cn_nics),
-		.r_dir    = c2_conf_node_nics_tl
-	},
-	{
-		.r_type   = C2_CO_SDEV,
-		.r_offset = offsetof(struct c2_conf_node, cn_sdevs),
-		.r_dir    = c2_conf_node_sdevs_tl
-	}
-};
-const struct c2_conf_relation dl_sdev[] = {
-	{
-		.r_type   = C2_CO_PARTITION,
-		.r_offset = offsetof(struct c2_conf_sdev, sd_partitions),
-		.r_dir    = c2_conf_sdev_partitions_tl
-	}
-};
-
-const struct rels {
-	const struct c2_conf_relation *data;
-	size_t                         nr;
-} downlinks[C2_CO_NR] = {
-	[C2_CO_PROFILE]    = { .data = dl_profile,
-			       .nr   = ARRAY_SIZE(dl_profile) },
-	[C2_CO_FILESYSTEM] = { .data = dl_filesystem,
-			       .nr   = ARRAY_SIZE(dl_filesystem) },
-	[C2_CO_SERVICE]    = { .data = dl_service,
-			       .nr   = ARRAY_SIZE(dl_service) },
-	[C2_CO_NODE]       = { .data = dl_node,
-			       .nr   = ARRAY_SIZE(dl_node) },
-	[C2_CO_NIC]        = { .data = NULL, .ar_nr = 0 },
-	[C2_CO_SDEV]       = { .data = dl_sdev,
-			       .nr   = ARRAY_SIZE(dl_sdev) },
-	[C2_CO_PARTITION]  = { .data = NULL, .ar_nr = 0 }
-};
-
-bool c2_conf_path_is_valid(const struct c2_conf_obj *origin,
-			   const struct c2_conf_pathcomp *path, bool *isdir)
-{
-	const struct c2_conf_relation *rel;
-	enum c2_conf_objtype           cur = origin->co_type;
-
-	if (!c2_conf_eop(path) && path->pc_iskey)
-		return false; /* property #1 is not met */
-
-	for (*isdir = false; !c2_conf_eop(path); ++path) {
-		if (path->pc_iskey) {
-			if (*isdir) {
-				/* key has "narrowed" one-to-many relation */
-				*isdir = false;
-				continue;
-			} else {
-				return false; /* property #3 is not met */
-			}
-			/* NB: we don't care about the value of key */
-		}
-
-		C2_ASSERT(!path->pc_iskey);
-		if (*isdir)
-			return false; /* property #2 is not met */
-		rel = c2_conf_downlink(cur, path->u.pc_relation);
-		if (rel == NULL)
-			return false; /* property #0 is not met */
-
-		cur = rel->r_type;
-		*isdir = rel->r_dir != NULL;
-	}
-	return true;
-}
-
-const struct c2_conf_relation * c2_conf_downlink(uint32_t src, uint32_t tgt)
-{
-	size_t i;
-	const struct rels *rs = downlinks + src;
-
-	C2_PRE(src < C2_CO_NR && tgt < C2_CO_NR);
-
-	for (i = 0; i < rs->nr; ++i) {
-		if (rs->data[i]->r_type == tgt)
-			return rs->data + i;
-	}
-	return NULL;
-}
-
-static bool pathcomp_invariant(const struct c2_conf_pathcomp *pc)
-{
-	return (pc->pc_iskey == 0 && pc->pc_relation < C2_CO_NR) ||
-		(pc->pc_iskey == 1 && pc->u.pc_key.cb_size > 0
-		 && pc->u.pc_key.cb_data != NULL) ||
-		pc->pc_iskey == ~0U;
-}
-
-bool c2_conf_eop(const struct c2_conf_pathcomp *pc)
-{
-	C2_PRE(pathcomp_invariant(pc));
-	return pc->pc_iskey == ~0U;
-}
-
-bool c2_conf_pathcomp_is_last(const struct c2_conf_pathcomp *pc)
-{
-	C2_PRE(!c2_conf_eop(pc));
-	return c2_conf_eop(pc + 1);
-}
-
-size_t c2_conf_path_len(const struct c2_conf_pathcomp *path)
-{
-	size_t len = 0;
-	while (!c2_conf_eop(path + len))
-		C2_CNT_INC(len);
-	return len;
-}
-
-struct c2_conf_pathcomp *
-c2_conf_pathcomp_dup(const struct c2_conf_pathcomp *src)
-{
-	struct c2_conf_pathcomp *ret;
-	size_t nr = c2_conf_path_len(src);
-	C2_CNT_INC(nr); /* add one for C2_CONF_EOP */
-
-	C2_ALLOC_ARR(ret, nr);
-	if (ret == NULL)
-		return NULL;
-
-	return memcpy(ret, src, nr * sizeof(*ret));
-}
-
-/** @} conf_dlspec_path */
diff --git a/conf/path.h b/conf/path.h
deleted file mode 100644
index 63e48fc..0000000
--- a/conf/path.h
+++ /dev/null
@@ -1,304 +0,0 @@
-/* -*- c -*- */
-/*
- * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
- *
- * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
- * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
- * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
- * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
- * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
- * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
- * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
- *
- * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
- * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
- * http://www.xyratex.com/contact
- *
- * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
- * Original creation date: 30-Jan-2012
- */
-#ifndef __COLIBRI_CONF_PATH_H__
-#define __COLIBRI_CONF_PATH_H__
-
-/**
- * @page conf-fspec-path Path to Configuration Object/Directory
- *
- * - @ref conf-fspec-path-comp
- *   - @ref conf-fspec-path-example
- * - @ref conf-fspec-path-data
- * - @ref conf-fspec-path-sub
- * - @ref conf-fspec-path-macros
- * - @ref conf_dfspec_path "Detailed Functional Specification"
- *
- * <hr> <!------------------------------------------------------------>
- * @section conf-fspec-path-comp Interpreting Path Components
- *
- * Recall from @ref conf-def that path is `{x, R}' tuple, where `x'
- * (path origin) is a configuration object and `R' is a sequence of
- * path components.
- *
- * Path components describe "movement" from the origin object to path
- * target, which is either object or directory. A path traversal
- * algorithm (see @ref confc-lspec-walk) consumes path components in
- * the order they are specified.
- *
- * There are three types of path components: relation, key, and
- * end-of-path marker.
- *
- * Relation tells which one of current object's downlinks to
- * follow. Relations are expressed via c2_conf_objtype of target
- * objects.  For example, consider a c2_conf_node object. It has two
- * downlinks: ->cn_nics and ->cn_sdevs. The types of target objects
- * are C2_CO_NIC and C2_CO_SDEV, correspondingly.
- *
- * Key "narrows" one-to-many relation. E.g.,
- * c2_conf_filesystem::cf_services downlink points to a list of
- * service objects. If the next path component is a key, then this key
- * is used to choose one particular c2_conf_service object in the
- * list; path traversal will be continued from that object.
- *
- * <!---------------------------------------------------------------->
- * @subsection conf-fspec-path-example Example
- *
- * Suppose we have the following DAG of configuration objects (as per
- * schema outlined in the HLD):
- *
-@verbatim
-prof
- \_<cp_filesystem>
-     \_ fs
-         \_<cf_services>
-             \_ svc-0
-             |   \_<cs_node>
-             |      \_ node-0
-             |          \_<cn_nics>
-             |          |  \_ nic-0
-             |          |  \_ nic-1
-             |          \_<cn_sdevs>
-             |             \_ sdev-0
-             |             |   \_<sd_partitions>
-             |             |      \_ part-0
-             |             |      \_ part-1
-             |             \_ sdev-1
-             |                 \_<sd_partitions>
-             |                    \_ part-2
-             |                    \_ part-3
-             \_ svc-1
-             |   \_<cs_node>
-             |      \_ @node-0
-             \_ svc-2
-                 \_<cs_node>
-                    \_ node-1
-                        \_<cn_nics>
-                        |  \_ nic-2
-                        \_<cn_sdevs>
-                           \_ sdev-2
-                               \_<sd_partitions>
-                                  \_ part-4
-
-Legend:
-    foo    object key (e.g., `prof' is a c2_conf_profile with key "prof")
-    <bar>  relation field (e.g., `<cs_node>' is c2_conf_service::cs_node)
-    @baz   reference (e.g., `@node-0' refers to `node-0')
-@endverbatim
- *
- * This pseudocode
- *
- * @code
- * {prof, [C2_CO_FILESYSTEM, C2_CO_SERVICE, "svc-1", C2_CO_NODE, C2_CONF_EOP]}
- * @endcode
- *
- * represents a path that originates at `prof' object and has five
- * components, the last being end-of-path marker.
- *
- * 1) The first path component -- `C2_CO_FILESYSTEM' -- is a relation.
- *    `prof' object does have a suitable downlink:
- *    c2_conf_profile::cp_filesystem points to an object of type
- *    C2_CO_FILESYSTEM.  So we follow the first path component and
- *    move to `fs' configuration object.
- *
- * 2) Next path component is `C2_CO_SERVICE'. The corresponding
- *    downlink is c2_conf_filesystem::cf_services --- a "one-to-many"
- *    relation.  If it was the last path component, the path target
- *    would be a directory (of c2_conf_services).  But this is not the
- *    last component. fs->cf_services points to a list of three
- *    services with keys "svc-0", "svc-1", and "svc-2".
- *
- * 3) Third path component -- "svc-1" -- is a key. It instructs which
- *    particular route to take when navigating from `fs' object. Thus
- *    we move to `svc-1' c2_conf_service object.
- *
- * 4) `C2_CO_NODE'. This path component corresponds to
- *    c2_conf_service::cs_node relation.  We advance to the
- *    `node-0' configuration object, ..
- *
- * 5) .. which appears to be path target, because the next path
- *    component -- `C2_CONF_EOP' -- is an end-of-path marker.
- *
- * <hr> <!------------------------------------------------------------>
- * @section conf-fspec-path-data Data Structures
- *
- * - c2_conf_pathcomp --- path component. This structure wraps tagged
- *   union that is able to represent a key, a relation, or an
- *   end-of-path marker.  Note, that c2_conf_pathcomp is defined in
- *   "conf/onwire.ff".
- *
- * - c2_conf_relation --- describes relation of a configuration object.
- *   Contains type (c2_conf_objtype) of target object(s), offset of
- *   the relation field in object's structure, and pointer to tlist
- *   descriptor that describes collection of target objects
- *   (one-to-many relations only).
- *
- * <hr> <!------------------------------------------------------------>
- * @section conf-fspec-path-sub Subroutines
- *
- * - c2_conf_path_is_valid(): performs sanity check of a path.
- * - c2_conf_downlink(): returns description of a downlink
- *   (c2_conf_relation), given types of source and target objects.
- * - c2_conf_eop(): checks whether given path component is an
- *   end-of-path marker.
- * - c2_conf_pathcomp_is_last(): returns true iff given path component
- *   precedes end-of-path marker (cf. c2_conf_eop()).
- * - c2_conf_path_len(): returns the number of path components,
- *   excluding end-of-path marker.
- * - c2_conf_pathcomp_dup(): duplicates an array of path components.
- *
- * <hr> <!------------------------------------------------------------>
- * @section conf-fspec-path-macros Convenience Macros
- *
- * These are initializers for c2_conf_pathcomp structure:
- * - C2_CONF_REL() -- relation;
- * - C2_CONF_KEY() -- key;
- * - C2_CONF_EOP   -- end-of-path marker.
- *
- * @see @ref conf_dfspec_path "Detailed Functional Specification"
- */
-
-/**
- * @defgroup conf_dfspec_path Path to Configuration Object/Directory
- * @brief Detailed Functional Specification.
- *
- * @see @ref conf, @ref conf-fspec-path "Functional Specification"
- *
- * @{
- */
-
-struct c2_conf_obj;
-struct c2_conf_pathcomp;
-
-/**
- * Performs sanity check of a path.
- *
- * An empty path is valid.  Non-empty path is valid iff the following
- * properties hold:
- * - #0: relations are downlinks (c2_conf_downlink() != NULL);
- * - #1: the first component is a relation;
- * - #2: one-to-many relation is followed by a key or is the last
- *       component;
- * - #3: a key is preceded by one-to-many relation.
- *
- * @note  c2_conf_path_is_valid() does not verify keys of `path' (i.e.,
- *        it does not check the existence of objects referred to by
- *        keys).
- *
- * @param origin      Path origin.
- * @param path        Path components.
- * @param[out] isdir  If the path is valid and isdir != NULL, then
- *                    *isdir will be set to:
- *                    - @c true:  the path leads to a collection of objects;
- *                    - @c false: the path leads to a single object.
- *
- * @pre  origin != NULL && path != NULL
- */
-bool c2_conf_path_is_valid(const struct c2_conf_obj *origin,
-			   const struct c2_conf_pathcomp *path, bool *isdir);
-
-/**
- * Relation --- a pointer from one configuration object to another
- * object or a list of objects.
- *
- * @todo XXX Try to make this definition private.
- */
-struct c2_conf_relation {
-	/**
-	 * Type of relation's target. See c2_conf_objtype for values.
-	 *
-	 * Target can be either single configuration object or a list
-	 * of objects.
-	 */
-	uint32_t                  r_type; /* XXX enum c2_conf_objtype? */
-	/** Offset of the relation field in an ambient structure. */
-	int                       r_offset;
-	/**
-	 * tlist descriptor of the target directory (which is a list
-	 * of objects); NULL if the relation points to a configuration
-	 * object.
-	 */
-	const struct c2_tl_descr *r_dir;
-};
-
-/**
- * Returns description of a downlink, given types of source and target
- * objects. Returns NULL if there is no such downlink.
- *
- * @param src Type of object the downlink originates from.  See c2_conf_objtype.
- * @param tgt Type of downlink's target object(s).  See c2_conf_objtype.
- *
- * @pre  src < C2_CO_NR && tgt < C2_CO_NR
- */
-const struct c2_conf_relation * c2_conf_downlink(uint32_t src, uint32_t tgt);
-
-/**
- * Initializers for c2_conf_pathcomp structure. (The structure itself
- * is defined in "conf/onwire.ff".)
- *
- * - C2_CONF_REL(<objtype>)      -- "relation" component;
- * - C2_CONF_KEY(<size>, <data>) -- "key" component;
- * - C2_CONF_EOP                 -- end-of-path marker.
- *
- * Example:
- *
- * @code
- * char key[] = "svc-uuid";
- * const struct c2_conf_pathcomp path[] = {
- *     C2_CONF_REL(C2_CO_SERVICE),
- *     C2_CONF_KEY(sizeof key, key),
- *     C2_CONF_EOP
- * };
- * const struct c2_conf_pathcomp empty_path[] = { C2_CONF_EOP };
- * @endcode
- */
-#define C2_CONF_REL(r)  { .pc_iskey = 0, .u.pc_relation = (r) }
-#define C2_CONF_KEY(ksize, kdata)  \
-	{ .pc_iskey = 1, .u.pc_key = C2_CONF_BUF_INIT(ksize, kdata) }
-#define C2_CONF_EOP  { .pc_iskey = ~0U }
-
-/** Returns true iff the path component is equal to C2_CONF_EOP. */
-bool c2_conf_eop(const struct c2_conf_pathcomp *pc);
-
-/**
- * Returns true iff given path component precedes end-of-path marker
- * (C2_CONF_EOP).
- *
- * @pre  !c2_conf_eop(pc)
- *
- * @see c2_conf_eop()
- */
-bool c2_conf_pathcomp_is_last(const struct c2_conf_pathcomp *pc);
-
-/** Returns the number of path components without the trailing C2_CONF_EOP. */
-size_t c2_conf_path_len(const struct c2_conf_pathcomp *path);
-
-/**
- * Duplicates an array of path components.
- *
- * Allocates memory for a copy of the path `src', does the copy, and
- * returns a pointer to it.
- *
- * If insufficient memory is available, NULL is returned.
- */
-struct c2_conf_pathcomp *
-c2_conf_pathcomp_dup(const struct c2_conf_pathcomp *src);
-
-/** @} conf_dfspec_path */
-#endif /* __COLIBRI_CONF_PATH_H__ */
-- 
1.8.3.2


From e8004e499d031a3762ccc9852a100ca74542d488 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Wed, 4 Apr 2012 12:48:31 +0300
Subject: [PATCH 121/370] use ctx_invariant() wherever applicable

Reviewed-on: https://reviewboard.clusterstor.com/r/714/
Reported-by: Carl Braganza <carl_braganza@xyratex.com>
---
 conf/confc.c | 40 ++++++++++++++++++++++++++--------------
 1 file changed, 26 insertions(+), 14 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 7259530..d4543e8 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -600,22 +600,30 @@
 
 static inline struct c2_mutex * group_lock(struct c2_confc_ctx *ctx)
 {
+	C2_PRE(ctx_invariant(ctx));
 	return &ctx->fc_client->cc_group->s_lock;
 }
 
 static inline struct c2_mutex * cache_lock(struct c2_confc_ctx *ctx)
 {
+	C2_PRE(ctx_invariant(ctx));
 	return &ctx->fc_client->cc_lock;
 }
 
-static inline struct c2_confc_ctx * mach_to_ctx(struct c2_sm *mach)
+static struct c2_confc_ctx * mach_to_ctx(struct c2_sm *mach)
 {
-	return container_of(mach, struct c2_confc_ctx, fc_mach);
+	struct c2_confc_ctx *ctx =
+		container_of(mach, struct c2_confc_ctx, fc_mach);
+	C2_ASSERT(ctx_invariant(ctx));
+	return ctx;
 }
 
-static inline struct c2_confc_ctx * ast_to_ctx(struct c2_sm_ast *ast)
+static struct c2_confc_ctx * ast_to_ctx(struct c2_sm_ast *ast)
 {
-	return container_of(ast, struct c2_confc_ctx, fc_ast);
+	struct c2_confc_ctx *ctx =
+		container_of(ast, struct c2_confc_ctx, fc_ast);
+	C2_ASSERT(ctx_invariant(ctx));
+	return ctx;
 }
 
 static inline struct c2_confc * registry_to_client(struct c2_conf_map *cache)
@@ -705,9 +713,10 @@ extra_clinks_create(struct c2_clink *group, uint32_t n)
 static int act(struct c2_confc_ctx *cx, const struct walk_ctx *wx,
 	       enum c2_conf_status status)
 {
+	C2_PRE(ctx_invariant(cx));
+	C2_PRE(walk_ctx_invariant(wx));
 	C2_PRE(c2_mutex_is_locked(group_lock(cx)));
 	C2_PRE(c2_mutex_is_locked(cache_lock(cx)));
-	C2_PRE(walk_ctx_invariant(wx));
 
 	switch (status) {
 	case C2_CS_READY:
@@ -788,16 +797,15 @@ static int act(struct c2_confc_ctx *cx, const struct walk_ctx *wx,
 static int path_walk(struct c2_confc_ctx *ctx)
 {
 	int             ret;
-	struct walk_ctx wx = {
-		.w_obj   = ctx->fc_origin,
-		.w_path  = ctx->fc_path,
-		.w_atdir = false,
-		.w_nload = 0
-	};
+	struct walk_ctx wx = { .w_atdir = false, .w_nload = 0 };
 
+	C2_PRE(ctx_invariant(ctx));
 	C2_PRE(c2_conf_path_is_valid(ctx->fc_origin, ctx->fc_path, NULL));
 	C2_PRE(c2_mutex_is_locked(group_lock(ctx)));
 
+	wx.w_obj  = ctx->fc_origin;
+	wx.w_path = ctx->fc_path;
+
 	c2_mutex_lock(cache_lock(ctx));
 	ret = walk(&wx);
 	/*
@@ -978,6 +986,7 @@ request_fill(struct c2_conf_fetch *req, const struct c2_conf_obj *origin,
 	struct c2_confc_ctx *ctx =
 		container_of(req, struct c2_confc_ctx, fc_req);
 
+	C2_PRE(ctx_invariant(ctx));
 	C2_PRE(c2_conf_path_is_valid(origin, path, NULL));
 	C2_PRE(c2_mutex_is_locked(group_lock(ctx)));
 	C2_PRE(c2_mutex_is_locked(cache_lock(ctx)));
@@ -1056,9 +1065,8 @@ static void wait_reply_st_in(struct c2_sm *mach)
 	int rc;
 	struct c2_confc_ctx *ctx = mach_to_ctx(mach);
 
-	C2_PRE(c2_mutex_is_locked(group_lock(ctx)));
-	C2_PRE(ctx_invariant(ctx));
 	C2_PRE(request_is_valid(ctx->fc_req));
+	C2_PRE(c2_mutex_is_locked(group_lock(ctx)));
 
 	rc = c2_rpc_post(&ctx->fc_fop.f_item);
 	C2_ASSERT(rc == 0); /* c2_rpc_post() always returns 0, but hey */
@@ -1102,6 +1110,7 @@ static bool failure_st_invariant(const struct c2_sm *mach)
 {
 	const struct c2_confc_ctx *ctx =
 		container_of(mach, const struct c2_confc_ctx, fc_mach);
+	C2_ASSERT(ctx_invariant(ctx));
 	return ctx->fc_result == NULL && ctx->fc_mach.sm_rc < 0;
 }
 
@@ -1109,6 +1118,7 @@ static bool terminal_st_invariant(const struct c2_sm *mach)
 {
 	const struct c2_confc_ctx *ctx =
 		container_of(mach, const struct c2_confc_ctx, fc_mach);
+	C2_ASSERT(ctx_invariant(ctx));
 	return mach->sm_rc == 0 && ctx->fc_result != NULL;
 }
 
@@ -1120,6 +1130,7 @@ static void on_replied(struct c2_rpc_item *item)
 	C2_PRE(item->ri_type == &request_item_type);
 	ctx = container_of(c2_rpc_item_to_fop(item), struct c2_confc_ctx,
 			   fc_fop);
+	C2_ASSERT(ctx_invariant(ctx));
 
 	if (item->ri_error == 0) {
 		c2_rpc_item_get(item->ri_reply);
@@ -1136,6 +1147,7 @@ static bool on_object_updated(struct c2_clink *link)
 	struct c2_confc_ctx *ctx =
 		container_of(link->cl_group, struct c2_confc_ctx, fc_clink);
 
+	C2_PRE(ctx_invariant(ctx));
 	C2_PRE(c2_mutex_is_locked(cache_lock(ctx)));
 
 	for (i = 0; i < ctx->fc_nr_extra; ++i)
@@ -1369,7 +1381,7 @@ void c2_confc_ctx_fini(struct c2_confc_ctx *ctx)
 	ctx->fc_client = NULL;
 }
 
-static bool ctx_invariant(struct c2_confc_ctx *ctx)
+static bool ctx_invariant(const struct c2_confc_ctx *ctx)
 {
 	const struct c2_rpc_item *item = &ctx->fc_fop.f_item;
 	return XXX /* more checks */ &&
-- 
1.8.3.2


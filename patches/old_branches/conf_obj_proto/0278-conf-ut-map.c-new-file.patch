From 03a8a85b1aee1e684a79a848fdaa57b96c297e21 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Sat, 28 Jul 2012 00:35:35 +0300
Subject: [PATCH 278/370] conf/ut/map.c: new file

test_add_lookup(): UT for c2_conf_map_{init,add,lookup,fini}().
---
 conf/map.h    |  6 +++---
 conf/ut/map.c | 66 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 69 insertions(+), 3 deletions(-)
 create mode 100644 conf/ut/map.c

diff --git a/conf/map.h b/conf/map.h
index d8a8c3c..cee9269 100644
--- a/conf/map.h
+++ b/conf/map.h
@@ -27,17 +27,17 @@
  *
  * Object identity-to-address mapping, also known as a registry of
  * cached configuration objects, is an in-memory database that
- * associates object identities ({type, id} pairs) with memory
+ * associates object identities -- {type, id} pairs -- with memory
  * addresses of these objects.  A confc or confd module maintaining
  * configuration cache creates such a registry and uses it to ensure
- * uniqueness of configuration objects stored in the cache.
+ * uniqueness of configuration objects stored in this cache.
  *
  * The implementation is based on in-memory Berkeley database, which
  * is created and manipulated via Colibri database interfaces
  * ("db/db.h").
  *
  * A registry is represented by c2_conf_map structure. Registry
- * entries can be iterated using c2_conf_map_cursor.
+ * entries can be iterated over using c2_conf_map_cursor.
  *
  * @see @ref conf_dfspec_map "Detailed Functional Specification"
  */
diff --git a/conf/ut/map.c b/conf/ut/map.c
new file mode 100644
index 0000000..4cd7269
--- /dev/null
+++ b/conf/ut/map.c
@@ -0,0 +1,66 @@
+/* -*- c -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
+ * Original creation date: 26-Jul-2012
+ */
+
+#include "conf/map.c"
+#include "lib/ut.h"
+
+static void test_add_lookup(void)
+{
+	struct c2_conf_map       map;
+	struct c2_conf_obj      *p;
+	int                      rc;
+	const struct c2_conf_obj a =
+		{ .co_type = C2_CO_DIR, .co_id = C2_CONF_BUF_STR("dir") };
+	const struct c2_conf_obj b = {
+		.co_type = C2_CO_SDEV,
+		.co_id   = C2_CONF_BUF_INIT(4, "ni\0c") /* not a C string */
+	};
+
+	rc = c2_conf_map_init(&map);
+	C2_UT_ASSERT(rc == 0);
+
+	p = c2_conf_map_lookup(&map, a.co_type, &a.co_id);
+	C2_UT_ASSERT(p == NULL);
+
+	rc = c2_conf_map_add(&map, &a);
+	C2_UT_ASSERT(rc == 0);
+	p = c2_conf_map_lookup(&map, a.co_type, &a.co_id);
+	C2_UT_ASSERT(p == &a);
+
+	p = c2_conf_map_lookup(&map, b.co_type, &b.co_id);
+	C2_UT_ASSERT(p == NULL);
+
+	rc = c2_conf_map_add(&map, &b);
+	C2_UT_ASSERT(rc == 0);
+	p = c2_conf_map_lookup(&map, b.co_type, &b.co_id);
+	C2_UT_ASSERT(p == &b);
+
+	c2_conf_map_fini(&map);
+}
+
+const struct c2_test_suite c2_conf_map_ut = {
+	.ts_name  = "conf_map",
+	.ts_init  = NULL,
+	.ts_fini  = NULL,
+	.ts_tests = {
+		{ "add & lookup", test_add_lookup },
+		{ NULL, NULL }
+	}
+};
-- 
1.8.3.2


From d0f41b8c1c96d430f214fc011865ebf4ba54c977 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Sat, 15 Sep 2012 15:41:01 +0300
Subject: [PATCH 366/370] Add knots, elements of link system.

---
 conf/Makefile.am    |  2 +-
 conf/link.c         | 10 +++----
 conf/link.h         |  4 +--
 conf/list.c         | 77 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 conf/list.h         | 26 ++++++++++++++++++
 conf/ut/Makefile.am |  4 +++
 conf/ut/linktest.c  | 15 +++++------
 conf/ut/oddlist.c   | 35 ++++++++++++++++++++++++
 8 files changed, 157 insertions(+), 16 deletions(-)
 create mode 100644 conf/list.c
 create mode 100644 conf/list.h
 create mode 100644 conf/ut/oddlist.c

diff --git a/conf/Makefile.am b/conf/Makefile.am
index 3f30bf3..4a8e4a7 100644
--- a/conf/Makefile.am
+++ b/conf/Makefile.am
@@ -7,7 +7,7 @@ _OBJS_SRC = objs/common.h objs/common.c objs/dir.c objs/profile.c   \
 noinst_LTLIBRARIES = libcolibri-conf.la
 libcolibri_conf_la_SOURCES = obj.h obj.c reg.h reg.c obj_ops.h obj_ops.c \
                              onwire.h preload.h preload.c $(_OBJS_SRC) \
-                             link.h link.c
+                             link.h link.c list.c list.h
 
 INCLUDES = -iquote . -iquote $(top_srcdir) -iquote $(top_srcdir)/include \
            -iquote /usr/include
diff --git a/conf/link.c b/conf/link.c
index 694c4b8..ada3a35 100644
--- a/conf/link.c
+++ b/conf/link.c
@@ -45,22 +45,22 @@ struct c2_conf_rel *rel_lookup(struct c2_conf_rel *from,
 	return 0;
 }
 
-int c2_conf_rel_walk(struct c2_conf_rel *from,
-		     const c2_conf_rel_identity **through)
+struct c2_conf_rel *c2_conf_rel_walk(struct c2_conf_rel *from,
+				     const c2_conf_rel_identity **through)
 {
 	struct c2_conf_rel *current = from;
 	struct c2_conf_rel *next = NULL;
 
-	for (; through[1] != NULL; through++) {
+	for (; through[0] != NULL && through[1] != NULL; through++) {
 		next = rel_lookup(current, through[1]);
 		if (next == NULL)
-			return -1;
+			return NULL;
 
 		printf("%s -> %s\n", current->cr_who.cw_id,
 		       next->cr_who.cw_id);
 		current = next;
 	}
 
-	return 0;
+	return current;
 }
 
diff --git a/conf/link.h b/conf/link.h
index 61cc178..f3c5965 100644
--- a/conf/link.h
+++ b/conf/link.h
@@ -28,8 +28,8 @@ void c2_conf_rel_fini(struct c2_conf_rel *link);
 void c2_conf_rel_add(struct c2_conf_rel *to,   struct c2_conf_rel *what);
 void c2_conf_rel_del(struct c2_conf_rel *from, struct c2_conf_rel *what);
 
-int c2_conf_rel_walk(struct c2_conf_rel *from,
-		     const c2_conf_rel_identity **through);
+struct c2_conf_rel *c2_conf_rel_walk(struct c2_conf_rel *from,
+				     const c2_conf_rel_identity **through);
 
 /*
   struct c2_conf_rel compound = ...;
diff --git a/conf/list.c b/conf/list.c
new file mode 100644
index 0000000..612bbcd
--- /dev/null
+++ b/conf/list.c
@@ -0,0 +1,77 @@
+
+#include "conf/list.h"
+#include "lib/errno.h"
+#include "lib/memory.h"
+
+struct c2_knot_list_item {
+	struct c2_list_link  oli_link;
+	struct c2_knot      *oli_data;
+};
+
+void c2_knot_list_init(struct c2_knot_list *list)
+{
+	c2_list_init(&list->ol_list);
+}
+
+void c2_knot_list_fini(struct c2_knot_list *list)
+{
+	c2_list_fini(&list->ol_list);
+}
+
+int  c2_knot_list_add(struct c2_knot_list *list, struct c2_knot *data)
+{
+	struct c2_knot_list_item *item;
+
+	C2_ALLOC_PTR(item);
+	if (item == NULL)
+		return -ENOMEM;
+
+	item->oli_data = data;
+	c2_list_link_init(&item->oli_link);
+
+	c2_list_add_tail(&list->ol_list, &item->oli_link);
+
+	return 0;
+}
+
+void c2_knot_list_del(struct c2_knot_list *li, struct c2_knot *data)
+{
+	struct c2_knot_list_item *item;
+	struct c2_list_link     *pos;
+	struct c2_list          *list = &li->ol_list;
+
+	c2_list_for_each(list, pos) {
+		item = c2_list_entry(pos, struct c2_knot_list_item, oli_link);
+		if (item->oli_data == data) {
+			c2_list_del(&item->oli_link);
+			c2_list_link_fini(&item->oli_link);
+			c2_free(item);
+			return;
+		}
+	}
+
+	C2_IMPOSSIBLE("No item with given data found!");
+}
+
+size_t c2_knot_list_length(struct c2_knot_list *list)
+{
+	return c2_list_length(&list->ol_list);
+}
+
+struct c2_knot *c2_knot_list_entry(struct c2_knot_list *li, size_t n)
+{
+	struct c2_knot_list_item *item;
+	struct c2_list_link      *pos;
+	struct c2_list           *list = &li->ol_list;
+	size_t			  i = 0;
+
+	c2_list_for_each(list, pos) {
+		item = c2_list_entry(pos, struct c2_knot_list_item, oli_link);
+		if (n == i)
+			return item->oli_data;
+
+		i++;
+	}
+
+	return NULL;
+}
diff --git a/conf/list.h b/conf/list.h
new file mode 100644
index 0000000..28497d8
--- /dev/null
+++ b/conf/list.h
@@ -0,0 +1,26 @@
+#pragma once
+#ifndef __COLIBRI_KNOT_LIST_H__
+#define __COLIBRI_KNOT_LIST_H__
+
+#include "lib/list.h"
+
+struct c2_knot_list {
+	struct c2_list ol_list;
+};
+
+struct c2_knot {
+	struct c2_knot      *k_parent;
+	struct c2_knot_list  k_children;
+};
+
+void c2_knot_list_init(struct c2_knot_list *list);
+void c2_knot_list_fini(struct c2_knot_list *list);
+
+int  c2_knot_list_add(struct c2_knot_list *list, struct c2_knot *data);
+void c2_knot_list_del(struct c2_knot_list *list, struct c2_knot *data);
+
+size_t c2_knot_list_length(struct c2_knot_list *list);
+struct c2_knot *c2_knot_list_entry(struct c2_knot_list *list, size_t n);
+
+
+#endif /* __COLIBRI_KNOT_LIST_H__  */
diff --git a/conf/ut/Makefile.am b/conf/ut/Makefile.am
index 78af3d7..cfc6e07 100644
--- a/conf/ut/Makefile.am
+++ b/conf/ut/Makefile.am
@@ -14,3 +14,7 @@ prepar_LDADD    = $(top_builddir)/colibri/libcolibri.la
 noinst_PROGRAMS  = linktest
 linktest_SOURCES = linktest.c
 linktest_LDADD   = $(top_builddir)/colibri/libcolibri.la
+
+noinst_PROGRAMS  = oddlist
+oddlist_SOURCES = oddlist.c
+oddlist_LDADD   = $(top_builddir)/colibri/libcolibri.la
diff --git a/conf/ut/linktest.c b/conf/ut/linktest.c
index 767582a..747a98d 100644
--- a/conf/ut/linktest.c
+++ b/conf/ut/linktest.c
@@ -13,9 +13,9 @@ enum types {
 /*
 	mb0
 	 |
-   +-----+------+------+
-   |	 |	|      |
- bios0	mem0   mem1   cpu0
+   +-----+------+-------+
+   |	 |	|       |
+ bios0	mem0   mem1    cpu0
 			|
 	   +------+-----+--- +----+----+
  	   |	  |     |    |	  |    |
@@ -68,18 +68,17 @@ int main(void)
 	printf("test1:\n");
 	{
 		const char *path[] = { "mb0", "cpu0", "reg0", NULL };
-		int rc = c2_conf_rel_walk(&r00, path);
-		C2_ASSERT(rc == 0);
+		struct c2_conf_rel *rel = c2_conf_rel_walk(&r00, path);
+		C2_ASSERT(rel != NULL);
 	}
 	printf("test2:\n");
 	{
 		const char *path[] = { "mb0", "cpu0", "regX", NULL };
-		int rc = c2_conf_rel_walk(&r00, path);
-		C2_ASSERT(rc == -1);
+		struct c2_conf_rel *rel = c2_conf_rel_walk(&r00, path);
+		C2_ASSERT(rel == NULL);
 	}
 
 
-
 	c2_conf_rel_del(&r00, &r10);
 	c2_conf_rel_del(&r00, &r11);
 	c2_conf_rel_del(&r00, &r12);
diff --git a/conf/ut/oddlist.c b/conf/ut/oddlist.c
new file mode 100644
index 0000000..e1d77cc
--- /dev/null
+++ b/conf/ut/oddlist.c
@@ -0,0 +1,35 @@
+#include "conf/list.h"
+#include <stdio.h>
+
+
+struct c2_knot {
+	int i;
+};
+
+int main(void)
+{
+	struct c2_knot_list list;
+	struct c2_knot data[] = { {0}, {1}, {2}, {3}, {4} };
+	int i;
+
+	c2_knot_list_init(&list);
+
+	for (i = 0; i < ARRAY_SIZE(data); ++i)
+		c2_knot_list_add(&list, &data[i]);
+
+
+	printf("len: %lu\n", c2_knot_list_length(&list));
+
+	for (i = 0; i < ARRAY_SIZE(data); ++i)
+		printf("[%d]: %d\n", i, c2_knot_list_entry(&list, i)->i);
+
+	printf("NULL: %p\n", c2_knot_list_entry(&list, 100));
+
+	for (i = 0; i < ARRAY_SIZE(data); ++i)
+		c2_knot_list_del(&list, &data[i]);
+
+
+	c2_knot_list_fini(&list);
+
+	return 0;
+}
-- 
1.8.3.2


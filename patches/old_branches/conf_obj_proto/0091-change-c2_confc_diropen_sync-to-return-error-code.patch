From 269a034fc1a0f804656381a97454951415a1090d Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 23 Mar 2012 16:36:13 +0200
Subject: [PATCH 091/370] change c2_confc_diropen_sync() to return error code

Make c2_confc_diropen_sync() take `struct c2_confc_dir **' parameter
and return `int'.  Update examples accordingly.

Reported-by: Nikita Danilov <nikita_danilov@xyratex.com>
Reviewed-on: http://reviewboard.clusterstor.com/r/714/
---
 conf/confc.c |  2 ++
 conf/confc.h | 51 +++++++++++++++++++++++++++------------------------
 2 files changed, 29 insertions(+), 24 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 1875e3d..18ce609 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -625,6 +625,8 @@ struct c2_confc_dir {
 	struct c2_conf_obj       *d_current;
 	/** List descriptor. */
 	const struct c2_tl_descr *d_descr;
+	/** The confc instance this collection relates to. */
+	struct c2_confc          *d_client;
 };
 
 /* ------------------------------------------------------------------
diff --git a/conf/confc.h b/conf/confc.h
index a1feff9..fe21839 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -127,8 +127,8 @@
  * The application gets access to configuration data by opening
  * configuration objects.
  *
- * c2_confc_open() or c2_confc_open_sync() open individual
- * configuration objects; c2_confc_diropen() or
+ * c2_confc_open() and c2_confc_open_sync() open individual
+ * configuration objects; c2_confc_diropen() and
  * c2_confc_diropen_sync() open directories.  Objects of a directory
  * are iterated over with c2_confc_dirnext().
  *
@@ -209,10 +209,11 @@
  *         C2_CONF_PATHCOMP_R(C2_CO_FILESYSTEM),
  *         C2_CONF_PATHCOMP_R(C2_CO_SERVICE)
  *     };
+ *     int rc;
  *
- *     d = c2_confc_diropen_sync(confc, NULL, path, ARRAY_SIZE(path));
- *     if (d == NULL)
- *         return -1;
+ *     rc = c2_confc_diropen_sync(&d, confc, NULL, path, ARRAY_SIZE(path));
+ *     if (rc != 0)
+ *         return rc;
  *
  *     while ((svc = c2_confc_dirnext(d)) != NULL) {
  *         if (svc->cs_type == tos) {
@@ -225,7 +226,7 @@
  * }
  * @endcode
  *
- * @subsection ex3  List devices used by a specific service on a specific node
+ * @subsection ex3  List devices used by specific service on specific node
  *
  * @code
  * #include "conf/confc.h"
@@ -249,9 +250,10 @@
  *     int ret;
  *
  *     // /fs/services
- *     services = c2_confc_diropen_sync(confc, NULL, path, ARRAY_SIZE(path));
- *     if (services == NULL)
- *         return -1;
+ *     ret = c2_confc_diropen_sync(&services, confc, NULL, path,
+ *                                 ARRAY_SIZE(path));
+ *     if (ret != 0)
+ *         return ret;
  *
  *     while ((svc = c2_confc_dirnext(services)) != NULL) {
  *         if (svc->cs_type != svc_type)
@@ -260,7 +262,7 @@
  *         path[0].pc_u.relation = C2_CO_NODE;
  *         ret = c2_confc_open_sync(&node, confc, svc, path, 1); // svc/node
  *         if (ret != 0)
- *             goto end;
+ *             break;
  *
  *         if (!c2_conf_buf_eq(node->cn_obj.co_key, node_key)) {
  *             c2_confc_close(node, confc);
@@ -268,10 +270,10 @@
  *         }
  *
  *         path[0].pc_u.relation = C2_CO_NIC;
- *         d = c2_confc_diropen_sync(confc, node, path, 1); // node/nics
- *         if (d == NULL) {
+ *         ret = c2_confc_diropen_sync(&d, confc, node, path, 1); // node/nics
+ *         if (ret != 0) {
  *             c2_confc_close(node, confc);
- *             goto end;
+ *             break;
  *         }
  *         while ((nic = c2_confc_dirnext(d)) != NULL) {
  *             // ... Use `nic' ...
@@ -279,10 +281,10 @@
  *         c2_confc_dirclose(d, confc);
  *
  *         path[0].pc_u.relation = C2_CO_SDEV;
- *         d = c2_confc_diropen_sync(confc, node, path, 1); // node/sdevs
- *         if (d == NULL) {
+ *         ret = c2_confc_diropen_sync(&d, confc, node, path, 1); // node/sdevs
+ *         if (ret != 0) {
  *             c2_confc_close(node, confc);
- *             goto end;
+ *             break;
  *         }
  *         while ((sdev = c2_confc_dirnext(d)) != NULL) {
  *             // ... Use `sdev' ...
@@ -292,8 +294,6 @@
  *         c2_confc_close(node, confc);
  *     }
  *
- *     ret = 0;
- * end:
  *     c2_confc_dirclose(services, confc);
  *     return ret;
  * }
@@ -469,15 +469,16 @@ int c2_confc_diropen(struct c2_confc_ctx *ctx, struct c2_conf_obj *path_origin,
 		     const struct c2_conf_pathcomp *path, size_t path_len);
 
 /**
- * Synchronous variant of c2_confc_diropen(). Returns pointer to the
- * requested collection of configuration objects or NULL in case of
- * error.
+ * Opens collection of configuration object synchronously.
+ *
+ * If the function succeeds, *dir will point to the requested
+ * collection (aka directory).
  *
  * @see c2_confc_diropen()
  */
-struct c2_confc_dir *
-c2_confc_diropen_sync(struct c2_confc *client, struct c2_conf_obj *path_origin,
-		      const struct c2_conf_pathcomp *path, size_t path_len);
+int c2_confc_diropen_sync(struct c2_confc_dir **dir, struct c2_confc *client,
+			  struct c2_conf_obj *path_origin,
+			  const struct c2_conf_pathcomp *path, size_t path_len);
 
 /**
  * Returns the next configuration object of given collection.
@@ -503,6 +504,8 @@ const void * c2_confc_dirnext(struct c2_confc_dir *dir);
  * c2_confc_diropen_sync().
  *
  * @note  c2_confc_dirclose(NULL,...) is a noop.
+ *
+ * @pre  ergo(dir != NULL, dir->d_parent->co_nrefs > 0)
  */
 void c2_confc_dirclose(struct c2_confc_dir *dir, struct c2_confc *client);
 
-- 
1.8.3.2


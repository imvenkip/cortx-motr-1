From be4530fa73dacbb38358032298ebd1c896a3000b Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Fri, 31 Aug 2012 12:49:09 +0300
Subject: [PATCH 349/370] preload: Add puck of concrete confx parsers, lots
 minor beautifications.

---
 conf/preload.c    | 155 ++++++++++++++++++++++++++++++++++++++++++++++--------
 conf/ut/confx.txt |  10 ++--
 2 files changed, 137 insertions(+), 28 deletions(-)

diff --git a/conf/preload.c b/conf/preload.c
index ad298d7..342fa28 100644
--- a/conf/preload.c
+++ b/conf/preload.c
@@ -45,6 +45,7 @@ struct hunk {
 };
 
 #define HUNK_CP(p) { .begin = p->begin, .end = p->end }
+#define HUNK_EMPTY { NULL, NULL }
 
 static bool hunk_is_empty(const struct hunk *p)
 {
@@ -124,13 +125,21 @@ static int unit_advance(struct hunk *unit, char open, char close)
 	C2_PRE(!hunk_is_empty(unit));
 
 	if (!(*unit->begin == open && *unit->end == close))
-		return -ENOENT;
+		return -EINVAL;
 
 	unit->begin++;
 	unit->end--;
 
-	/* @todo: hunk_is_valid() */
-	return (unit->begin >= unit->end) ? -ENOENT : 0;
+	return hunk_is_valid(unit) ? 0 : -ENOENT;
+}
+
+static int unit_quoted_unquote(struct hunk *unit)
+{
+	int rc = unit_advance(unit, '\"', '\"');
+
+	return (rc == -EINVAL)
+		? 0  /* -EINVAL means that hunk is not in quotes */
+		: rc;
 }
 
 static int unit_parse(struct hunk *unit, char ss)
@@ -253,12 +262,55 @@ static int parse_profile(const struct hunk *key, const struct hunk *val,
 	return 0;
 }
 
+static int rootfid_parse(struct fid *fid, const struct hunk *val)
+{
+	int rc;
+	struct hunk aval = HUNK_CP(val);
+	struct hunk rfid = HUNK_EMPTY;
+
+	rc = unit_advance(&aval, '[', ']');
+	if (rc != 0)
+		return rc;
+
+	rc = sequence_parse(&rfid, &aval, ',');
+	if (rc != 0)
+		return rc;
+	fid->f_container = strtoull(rfid.begin, NULL, 0);
+
+	rc = sequence_parse(&rfid, &aval, ',');
+	if (rc != 0)
+		return rc;
+	fid->f_key = strtoull(rfid.begin, NULL, 0);
+
+	rc = sequence_parse(&rfid, &aval, ',');
+
+	return rc == -ENOENT ? 0 : -EINVAL;
+}
+
 static int parse_filesystem(const struct hunk *key, const struct hunk *val,
 			    struct confx_object *out)
 {
 	hunk_pr(__FUNCTION__, key);
 	hunk_pr(__FUNCTION__, val);
 
+	if (hunk_str_eq(key, "id"))
+		c2_buf_init(&out->o_id, (void *)val->begin, hunk_len(val));
+
+	else if (hunk_str_eq(key, "rootfid"))
+		return rootfid_parse(&out->o_conf.u.u_filesystem.xf_rootfid,
+				     val);
+
+	/* @todo: ask vvv for input! */
+	else if (hunk_str_eq(key, "params"))
+		out->o_conf.u.u_sdev.xd_partitions.ab_count = 0;
+
+	/* @todo: ask vvv for input! */
+	else if (hunk_str_eq(key, "services"))
+		out->o_conf.u.u_sdev.xd_partitions.ab_count = 0;
+
+	else
+		return -EINVAL;
+
 	return 0;
 }
 
@@ -268,6 +320,25 @@ static int parse_service(const struct hunk *key, const struct hunk *val,
 	hunk_pr(__FUNCTION__, key);
 	hunk_pr(__FUNCTION__, val);
 
+	if (hunk_str_eq(key, "id"))
+		c2_buf_init(&out->o_id, (void *)val->begin, hunk_len(val));
+
+	else if (hunk_str_eq(key, "svc_type"))
+		out->o_conf.u.u_service.xs_type =
+			strtoul(val->begin, NULL, 0);
+
+	/* @todo: ask vvv for input! */
+	else if (hunk_str_eq(key, "endpoints"))
+		out->o_conf.u.u_service.xs_endpoints.ab_count = 0;
+
+	else if (hunk_str_eq(key, "node"))
+		c2_buf_init(&out->o_conf.u.u_service.xs_node,
+			    (void *)val->begin, hunk_len(val));
+
+	else
+		return -EINVAL;
+
+
 	return 0;
 }
 
@@ -277,6 +348,40 @@ static int parse_node(const struct hunk *key, const struct hunk *val,
 	hunk_pr(__FUNCTION__, key);
 	hunk_pr(__FUNCTION__, val);
 
+	if (hunk_str_eq(key, "id"))
+		c2_buf_init(&out->o_id, (void *)val->begin, hunk_len(val));
+
+	else if (hunk_str_eq(key, "memsize"))
+		out->o_conf.u.u_node.xn_memsize =
+			strtoul(val->begin, NULL, 0);
+
+	else if (hunk_str_eq(key, "nr_cpu"))
+		out->o_conf.u.u_node.xn_nr_cpu =
+			strtoul(val->begin, NULL, 0);
+
+	else if (hunk_str_eq(key, "last_state"))
+		out->o_conf.u.u_node.xn_last_state =
+			strtoull(val->begin, NULL, 0);
+
+	else if (hunk_str_eq(key, "flags"))
+		out->o_conf.u.u_node.xn_flags =
+			strtoull(val->begin, NULL, 0);
+
+	else if (hunk_str_eq(key, "pool_id"))
+		out->o_conf.u.u_node.xn_pool_id =
+			strtoull(val->begin, NULL, 0);
+
+	/* @todo: ask vvv for input! */
+	else if (hunk_str_eq(key, "nics"))
+		out->o_conf.u.u_node.xn_nics.ab_count = 0;
+
+	/* @todo: ask vvv for input! */
+	else if (hunk_str_eq(key, "sdevs"))
+		out->o_conf.u.u_node.xn_sdevs.ab_count = 0;
+
+	else
+		return -EINVAL;
+
 	return 0;
 }
 
@@ -321,6 +426,17 @@ static int parse_sdev(const struct hunk *key, const struct hunk *val,
 	hunk_pr(__FUNCTION__, key);
 	hunk_pr(__FUNCTION__, val);
 
+	/*
+	  @todo: no "filename":"/path/to/somewhere" in confstr!
+	  @todo: allocate or what with this?
+	  "partitions":["part0"]
+	  struct arr_buf xd_partitions;
+	  struct arr_buf {
+		uint32_t       ab_count;
+		struct c2_buf *ab_elems;
+	  } ;
+	*/
+
 	if (hunk_str_eq(key, "id"))
 		c2_buf_init(&out->o_id, (void *)val->begin, hunk_len(val));
 
@@ -348,21 +464,13 @@ static int parse_sdev(const struct hunk *key, const struct hunk *val,
 		c2_buf_init(&out->o_conf.u.u_sdev.xd_filename,
 			    (void *)val->begin, hunk_len(val));
 
+	/* @todo: ask vvv for input! */
+	else if (hunk_str_eq(key, "partitions"))
+		out->o_conf.u.u_sdev.xd_partitions.ab_count = 0;
+
 	else
 		return -EINVAL;
 
-	/*
-	  @todo: no "filename":"/path/to/somewhere" in confstr!
-	  @todo: allocate or what with this?
-	  "partitions":["part0"]
-	  struct arr_buf xd_partitions;
-	  struct arr_buf {
-		uint32_t       ab_count;
-		struct c2_buf *ab_elems;
-	  } ;
-	*/
-
-
 	return 0;
 }
 
@@ -443,9 +551,9 @@ static size_t str_to_x(const struct hunk *key)
 static int x_parser_call(const struct hunk *str, struct confx_object *out)
 {
 	int rc;
-	struct hunk ent = { NULL, NULL };
-	struct hunk key = { NULL, NULL };
-	struct hunk val = { NULL, NULL };
+	struct hunk ent = HUNK_EMPTY;
+	struct hunk key = HUNK_EMPTY;
+	struct hunk val = HUNK_EMPTY;
 
 	rc = sequence_parse(&ent, str, ':');
 	if (rc != 0)
@@ -476,8 +584,9 @@ static int x_parser_call(const struct hunk *str, struct confx_object *out)
 		return 0;
 	}
 
-	C2_ASSERT(out->o_conf.u_type != C2_CO_INVALID_TYPE);
-	return xstr[out->o_conf.u_type].r_parse(&key, &val, out);
+	C2_POST(out->o_conf.u_type != C2_CO_INVALID_TYPE);
+	return unit_quoted_unquote(&val) ?:
+		xstr[out->o_conf.u_type].r_parse(&key, &val, out);
 }
 
 
@@ -490,13 +599,13 @@ int c2_conf_parse(const char *src, struct confx_object *dest, size_t n)
 	int rc;
 	size_t conf_index = 0;
 	struct hunk str = { .begin = src, .end = &src[strlen(src) - 1] };
-	struct hunk blk = { NULL, NULL };
+	struct hunk blk = HUNK_EMPTY;
 
 	for (; block_parse(&blk, &str) == 0; ) {
-		struct hunk rec = { NULL, NULL };
+		struct hunk rec = HUNK_EMPTY;
 
 		for (; record_parse(&rec, &blk) == 0; ) {
-			struct hunk ent = { NULL, NULL };
+			struct hunk ent = HUNK_EMPTY;
 			dest[conf_index].o_conf.u_type = C2_CO_INVALID_TYPE;
 
 			for (; entry_parse(&ent, &rec) == 0; ) {
diff --git a/conf/ut/confx.txt b/conf/ut/confx.txt
index 9d118ff..6db05fb 100644
--- a/conf/ut/confx.txt
+++ b/conf/ut/confx.txt
@@ -1,12 +1,12 @@
 
 [ { "type":"profile", "id":"test-2", "filesystem":"c2t1fs" }
-, { "type":"filesystem", "id":"c2t1fs", "rootfid":[11, 22], "params":[50,60,70],
-    "services":["mds", "io"] }
-, { "type":"service", "id":"mds", "filesystem":"c2t1fs", "svc_type":1,
+, { "type":"filesystem", "id":"c2t1fs", "rootfid":[11, 22],
+    "params":["50","60","70"],   "services":["mds", "io"] }
+, { "type":"service", "id":"mds", "svc_type":1,
     "endpoints":["addr0"], "node":"N" }
-, { "type":"service", "id":"io", "filesystem":"c2t1fs", "svc_type":2,
+, { "type":"service", "id":"io", "svc_type":2,
     "endpoints":["addr1","addr2","addr3"], "node":"N" }
-, { "type":"node", "id":"N", "services":["mds", "io"], "memsize":8000,
+, { "type":"node", "id":"N", "memsize":8000,
     "nr_cpu":2, "last_state":3, "flags":2, "pool_id":0, "nics":["nic0"],
     "sdevs":["sdev0"] }
 , { "type":"nic", "id":"nic0", "iface_type":5, "mtu":8192, "speed":10000,
-- 
1.8.3.2


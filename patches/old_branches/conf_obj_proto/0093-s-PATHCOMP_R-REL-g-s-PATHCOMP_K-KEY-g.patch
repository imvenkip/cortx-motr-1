From 248c2c39e4d5cf02dc7c9655323ae52b89e957f3 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Sun, 25 Mar 2012 17:47:04 +0300
Subject: [PATCH 093/370] s/PATHCOMP_R/REL/g; s/PATHCOMP_K/KEY/g

C2_CONF_PATHCOMP_R -> C2_CONF_REL
C2_CONF_PATHCOMP_K -> C2_CONF_KEY

`C2_CONF_EOP' symbol is used to terminate arrays of path components.
Its name is rather short and does not contain `PATHCOMP_'.  With this
in mind, it seems justified to shorten `C2_CONF_PATHCOMP_R' and
`C2_CONF_PATHCOMP_K' as well.
---
 conf/confc.h   | 38 ++++++++++++++------------------------
 conf/onwire.ff |  3 +--
 conf/path.h    | 14 +++++++-------
 3 files changed, 22 insertions(+), 33 deletions(-)

diff --git a/conf/confc.h b/conf/confc.h
index 3568964..1b0b987 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -170,8 +170,7 @@
  *     c2_clink_add(&ctx.fc_complete, &clink);
  *
  *     rc = c2_confc_open(&ctx, NULL, (struct c2_conf_pathcomp []){
- *                        C2_CONF_PATHCOMP_R(C2_CO_FILESYSTEM),
- *                        C2_CONF_EOP });
+ *                        C2_CONF_REL(C2_CO_FILESYSTEM), C2_CONF_EOP });
  *     if (rc == 0) {
  *         c2_chan_wait(&clink);
  *         *fs = ctx.fc_result;
@@ -188,8 +187,7 @@
  * static int filesystem_open_s(struct c2_conf_filesystem **fs)
  * {
  *     return c2_confc_open_sync(fs, confc, NULL, (struct c2_conf_pathcomp []){
- *                               C2_CONF_PATHCOMP_R(C2_CO_FILESYSTEM),
- *                               C2_CONF_EOP });
+ *                               C2_CONF_REL(C2_CO_FILESYSTEM), C2_CONF_EOP });
  * }
  * @endcode
  *
@@ -205,14 +203,11 @@
  * {
  *     struct c2_confc_dir    *d;
  *     struct c2_conf_service *svc;
- *     struct c2_conf_pathcomp path[] = {
- *         C2_CONF_PATHCOMP_R(C2_CO_FILESYSTEM),
- *         C2_CONF_PATHCOMP_R(C2_CO_SERVICE),
- *         C2_CONF_EOP
- *     };
  *     int rc;
  *
- *     rc = c2_confc_diropen_sync(&d, confc, NULL, path);
+ *     rc = c2_confc_diropen_sync(&d, confc, NULL, (struct c2_conf_pathcomp []){
+ *                                C2_CONF_REL(C2_CO_FILESYSTEM),
+ *                                C2_CONF_REL(C2_CO_SERVICE), C2_CONF_EOP });
  *     if (rc != 0)
  *         return rc;
  *
@@ -246,12 +241,10 @@
  *     struct c2_conf_sdev    *sdev;
  *     int ret;
  *
- *     // /fs/services
  *     ret = c2_confc_diropen_sync(&services, confc, NULL,
- *                                 (struct c2_conf_pathcomp []){
- *                                 C2_CONF_PATHCOMP_R(C2_CO_FILESYSTEM),
- *                                 C2_CONF_PATHCOMP_R(C2_CO_SERVICE),
- *                                 C2_CONF_EOP });
+ *                                 (struct c2_conf_pathcomp []){ // /fs/services
+ *                                 C2_CONF_REL(C2_CO_FILESYSTEM),
+ *                                 C2_CONF_REL(C2_CO_SERVICE), C2_CONF_EOP });
  *     if (ret != 0)
  *         return ret;
  *
@@ -260,9 +253,8 @@
  *             continue;
  *
  *         ret = c2_confc_open_sync(&node, confc, svc,
- *                                  (struct c2_conf_pathcomp []){
- *                                  C2_CONF_PATHCOMP_R(C2_CO_NODE),
- *                                  C2_CONF_EOP });  // svc/node
+ *                                  (struct c2_conf_pathcomp []){ // svc/node
+ *                                  C2_CONF_REL(C2_CO_NODE), C2_CONF_EOP });
  *         if (ret != 0)
  *             break;
  *
@@ -271,10 +263,9 @@
  *             continue;
  *         }
  *
- *         ret = c2_confc_diropen_sync(&d, confc, node,
+ *         ret = c2_confc_diropen_sync(&d, confc, node,  // node/nics
  *                                     (struct c2_conf_pathcomp []){
- *                                     C2_CONF_PATHCOMP_R(C2_CO_NIC),
- *                                     C2_CONF_EOP });  // node/nics
+ *                                     C2_CONF_REL(C2_CO_NIC), C2_CONF_EOP });
  *         if (ret != 0) {
  *             c2_confc_close(node, confc);
  *             break;
@@ -284,10 +275,9 @@
  *         }
  *         c2_confc_dirclose(d, confc);
  *
- *         ret = c2_confc_diropen_sync(&d, confc, node,
+ *         ret = c2_confc_diropen_sync(&d, confc, node,  // node/sdevs
  *                                     (struct c2_conf_pathcomp []){
- *                                     C2_CONF_PATHCOMP_R(C2_CO_SDEV),
- *                                     C2_CONF_EOP });  // node/sdevs
+ *                                     C2_CONF_REL(C2_CO_SDEV), C2_CONF_EOP });
  *         if (ret != 0) {
  *             c2_confc_close(node, confc);
  *             break;
diff --git a/conf/onwire.ff b/conf/onwire.ff
index ef77c79..6cd60ce 100644
--- a/conf/onwire.ff
+++ b/conf/onwire.ff
@@ -35,8 +35,7 @@ DEF(c2_conf_buf, SEQUENCE,
 /**
  * Path component.
  *
- * See also: C2_CONF_PATHCOMP_R(), C2_CONF_PATHCOMP_K(), C2_CONF_EOP,
- *           c2_conf_eop().
+ * See also: C2_CONF_REL(), C2_CONF_KEY(), C2_CONF_EOP, c2_conf_eop().
  */
 DEF(c2_conf_pathcomp, UNION,
     _(pc_iskey, U32),           /* boolean value: 0 (no), 1 (yes) */
diff --git a/conf/path.h b/conf/path.h
index 8fff418..a4ba5f7 100644
--- a/conf/path.h
+++ b/conf/path.h
@@ -81,21 +81,21 @@ const struct c2_conf_relation * c2_conf_downlink(uint32_t src, uint32_t tgt);
  * Initializers for c2_conf_pathcomp structure. The structure itself
  * is described in `onwire.ff'.
  *
- * - C2_CONF_PATHCOMP_R --- relation
- * - C2_CONF_PATHCOMP_K --- key
- * - C2_CONF_EOP -- "end of path" marker
+ * - C2_CONF_REL --- relation
+ * - C2_CONF_KEY --- key
+ * - C2_CONF_EOP --- "end of path" marker
  *
  * Example:
  *
  *     uint8_t key[] = "uuid";
  *     struct c2_conf_pathcomp pcomps[] = {
- *         C2_CONF_PATHCOMP_R(C2_CO_SERVICE),
- *         C2_CONF_PATHCOMP_K(sizeof key, key),
+ *         C2_CONF_REL(C2_CO_SERVICE),
+ *         C2_CONF_KEY(sizeof key, key),
  *         C2_CONF_EOP
  *     };
  */
-#define C2_CONF_PATHCOMP_R(r)  { .pc_iskey = 0, .u.pc_relation = (r) }
-#define C2_CONF_PATHCOMP_K(ksize, kdata)  \
+#define C2_CONF_REL(r)  { .pc_iskey = 0, .u.pc_relation = (r) }
+#define C2_CONF_KEY(ksize, kdata)  \
 	{ .pc_iskey = 1, .u.pc_key = C2_CONF_BUF_INIT(ksize, kdata) }
 #define C2_CONF_EOP  { .pc_iskey = ~0U }
 
-- 
1.8.3.2


From f6427f21018c1720109db7eca0f37acefcbb8ffd Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Sun, 12 Aug 2012 23:15:33 +0300
Subject: [PATCH 311/370] conf/obj_ops.c: make readdir_{pre,post}() static

---
 conf/confc.h   |   6 ---
 conf/obj_ops.c | 160 ++++++++++++++++++++++++++++++++++-----------------------
 conf/obj_ops.h |  31 -----------
 3 files changed, 96 insertions(+), 101 deletions(-)

diff --git a/conf/confc.h b/conf/confc.h
index f785aa1..f9bd731 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -738,9 +738,6 @@ void c2_confc_close(struct c2_conf_obj *obj);
  * @see confc-fspec-recipe4
  *
  * @pre   ctx->fc_mach.sm_state == S_INITIAL
- * @pre   c2_conf_readdir_pre(dir, *pptr)
- *
- * @post  c2_conf_readdir_post(retval, dir, *pptr)
  * @post  ergo(C2_IN(retval, (C2_CONF_DIRNEXT, C2_CONF_DIREND)),
  *             ctx->fc_mach.sm_state == S_INITIAL)
  */
@@ -773,9 +770,6 @@ int c2_confc_readdir(struct c2_confc_ctx *ctx, struct c2_conf_obj *dir,
  *
  * c2_confc_close(entry);
  * @endcode
- *
- * @pre   c2_conf_readdir_pre(dir, *pptr)
- * @post  c2_conf_readdir_post(retval, dir, *pptr)
  */
 int c2_confc_readdir_sync(struct c2_conf_obj *dir, struct c2_conf_obj **pptr);
 
diff --git a/conf/obj_ops.c b/conf/obj_ops.c
index eacd9ca..bf22ccc 100644
--- a/conf/obj_ops.c
+++ b/conf/obj_ops.c
@@ -147,32 +147,9 @@ int c2_conf_obj_fill(struct c2_conf_obj *dest, const struct confx_object *src,
 	 */
 	XXX;
 }
-
-static bool
-belongs(const struct c2_conf_obj *entry, const struct c2_conf_obj *dir);
-
-bool c2_conf_readdir_pre(const struct c2_conf_obj *dir,
-			 const struct c2_conf_obj *entry)
-{
-	return c2_conf_obj_invariant(dir) && c2_conf_obj_invariant(entry) &&
-		dir->co_type == C2_CO_DIR && dir->co_nrefs > 0 &&
-		ergo(entry != NULL, belongs(entry, dir) && entry->co_nrefs > 0);
-}
-
-bool c2_conf_readdir_post(int retval, const struct c2_conf_obj *dir,
-			  const struct c2_conf_obj *entry)
-{
-	return c2_conf_obj_invariant(dir) && c2_conf_obj_invariant(entry) &&
-		C2_IN(retval,
-		     (C2_CONF_DIREND, C2_CONF_DIRNEXT, C2_CONF_DIRMISS)) &&
-		(retval == C2_CONF_DIRNEXT ?
-		 (entry != NULL && belongs(entry, dir) && entry->co_nrefs > 0) :
-		 entry == NULL);
-}
 
 /* ------------------------------------------------------------------
- * Implementations of ->coo_{lookup,readdir,invariant}() for concrete
- * object types
+ * ->coo_lookup()
  * ------------------------------------------------------------------ */
 
 static int dir_lookup(struct c2_conf_obj *parent,
@@ -196,46 +173,6 @@ static int dir_lookup(struct c2_conf_obj *parent,
 	XXX;
 }
 
-static int dir_readdir(struct c2_conf_obj *dir, struct c2_conf_obj **pptr)
-{
-	/*
-	 * struct c2_conf_obj *next;
-	 * int                 ret;
-	 * struct c2_conf_obj *prev = *pptr;
-	 *
-	 * C2_PRE(c2_conf_readdir_pre(dir, prev));
-	 *
-	 * if (prev == NULL) {
-	 *     next = c2_tlist_head();
-	 * } else {
-	 *     next = c2_tlist_next(..., prev);
-	 *     c2_conf_obj_put(prev);
-	 *     *pptr = NULL;
-	 * }
-	 *
-	 * if (next == NULL) {
-	 *     ret = C2_CONF_DIREND;
-	 * } else if (next->co_status != C2_CS_READY) {
-	 *     ret = C2_CONF_DIRMISS;
-	 * } else {
-	 *     c2_conf_obj_get(next);
-	 *     *pptr = next;
-	 *     ret = C2_CONF_DIRNEXT;
-	 * }
-	 *
-	 * C2_POST(c2_conf_readdir_post(ret, dir, *pptr));
-	 * return ret;
-	 */
-	XXX;
-}
-
-static bool dir_invariant(const struct c2_conf_obj *obj)
-{
-	struct c2_conf_dir *dir = C2_CONF_CAST(obj, c2_conf_dir);
-
-	XXX;
-}
-
 static int
 profile_lookup(struct c2_conf_obj *parent, const struct c2_conf_buf *name,
 	       struct c2_conf_obj **out)
@@ -267,17 +204,74 @@ profile_lookup(struct c2_conf_obj *parent, const struct c2_conf_buf *name,
  * function, taking a NULL terminated array of "known children" as a
  * parameter.
  */
+
+/* ------------------------------------------------------------------
+ * ->coo_readdir()
+ * ------------------------------------------------------------------ */
+
+static bool readdir_pre(const struct c2_conf_obj *dir,
+			const struct c2_conf_obj *entry);
+static bool readdir_post(int retval, const struct c2_conf_obj *dir,
+			 const struct c2_conf_obj *entry);
+
+static int dir_readdir(struct c2_conf_obj *dir, struct c2_conf_obj **pptr)
+{
+	/*
+	 * struct c2_conf_obj *next;
+	 * int                 ret;
+	 * struct c2_conf_obj *prev = *pptr;
+	 *
+	 * C2_PRE(readdir_pre(dir, prev));
+	 *
+	 * if (prev == NULL) {
+	 *     next = c2_tlist_head();
+	 * } else {
+	 *     next = c2_tlist_next(..., prev);
+	 *     c2_conf_obj_put(prev);
+	 *     *pptr = NULL;
+	 * }
+	 *
+	 * if (next == NULL) {
+	 *     ret = C2_CONF_DIREND;
+	 * } else if (next->co_status != C2_CS_READY) {
+	 *     ret = C2_CONF_DIRMISS;
+	 * } else {
+	 *     c2_conf_obj_get(next);
+	 *     *pptr = next;
+	 *     ret = C2_CONF_DIRNEXT;
+	 * }
+	 *
+	 * C2_POST(readdir_post(ret, dir, *pptr));
+	 * return ret;
+	 */
+	XXX;
+}
 
 /* XXX
  *
  * There are no {profile..partition}_readdir().
  * ->coo_readdir of any object except of c2_conf_dir is NULL.
  */
+
+/* ------------------------------------------------------------------
+ * ->coo_invariant()
+ * ------------------------------------------------------------------ */
+
+static bool dir_invariant(const struct c2_conf_obj *obj)
+{
+	struct c2_conf_dir *dir = C2_CONF_CAST(obj, c2_conf_dir);
+
+	XXX;
+}
 
 /* XXX
  *
  * {profile..partition}_invariant()
  */
+
+/* ------------------------------------------------------------------
+ * misc.
+ * ------------------------------------------------------------------ */
 
 static bool confc_is_locked(const struct c2_confc *confc)
 {
@@ -293,4 +287,42 @@ belongs(const struct c2_conf_obj *entry, const struct c2_conf_obj *dir)
 	return d->cd_items_t == entry->co_type && entry->co_parent == dir;
 }
 
+/**
+ * Precondition for c2_conf_obj_ops::coo_readdir().
+ *
+ * @param dir     The 1st argument of ->coo_readdir().
+ * @param entry   The 2nd argument of ->coo_readdir(), dereferenced
+ *                before the function is called (*pptr).
+ *
+ * @see c2_conf_obj_ops::coo_readdir()
+ */
+static bool
+readdir_pre(const struct c2_conf_obj *dir, const struct c2_conf_obj *entry)
+{
+	return c2_conf_obj_invariant(dir) && c2_conf_obj_invariant(entry) &&
+		dir->co_type == C2_CO_DIR && dir->co_nrefs > 0 &&
+		ergo(entry != NULL, belongs(entry, dir) && entry->co_nrefs > 0);
+}
+
+/**
+ * Postcondition for c2_conf_obj_ops::coo_readdir().
+ *
+ * @param retval  The value returned by ->coo_readdir().
+ * @param dir     The 1st argument of ->coo_readdir().
+ * @param entry   The 2nd argument of ->coo_readdir(), dereferenced
+ *                after the function is called (*pptr).
+ *
+ * @see c2_conf_obj_ops::coo_readdir()
+ */
+static bool readdir_post(int retval, const struct c2_conf_obj *dir,
+			 const struct c2_conf_obj *entry)
+{
+	return c2_conf_obj_invariant(dir) && c2_conf_obj_invariant(entry) &&
+		C2_IN(retval,
+		     (C2_CONF_DIREND, C2_CONF_DIRNEXT, C2_CONF_DIRMISS)) &&
+		(retval == C2_CONF_DIRNEXT ?
+		 (entry != NULL && belongs(entry, dir) && entry->co_nrefs > 0) :
+		 entry == NULL);
+}
+
 /** @} conf_dlspec_objops */
diff --git a/conf/obj_ops.h b/conf/obj_ops.h
index 2a7ad92..0eb7df5 100644
--- a/conf/obj_ops.h
+++ b/conf/obj_ops.h
@@ -44,9 +44,6 @@
  * - c2_conf_obj_get() increases and c2_conf_obj_put() decreases
  *   object's number of references.
  *
- * - c2_conf_readdir_pre(), c2_conf_readdir_post() --- pre- and
- *   postcondition for c2_conf_obj_ops::coo_readdir().
- *
  * @see @ref conf_dfspec_objops "Detailed Functional Specification"
  */
 
@@ -97,9 +94,6 @@ struct c2_conf_obj_ops {
 	 *
 	 * ->coo_readdir() pins (c2_conf_obj_get()) the resulting
 	 * object in case of C2_CONF_DIRNEXT.
-	 *
-	 * @pre   c2_conf_readdir_pre(dir, *pptr)
-	 * @post  c2_conf_readdir_post(retval, dir, *pptr)
 	 */
 	int (*coo_readdir)(struct c2_conf_obj *dir, struct c2_conf_obj **pptr);
 	/**
@@ -185,30 +179,5 @@ enum c2_conf_dirval {
 	C2_CONF_DIRMISS
 };
 
-/**
- * Precondition for c2_conf_obj_ops::coo_readdir().
- *
- * @param dir     The 1st argument of ->coo_readdir().
- * @param entry   The 2nd argument of ->coo_readdir(), dereferenced
- *                before the function is called (*pptr).
- *
- * @see c2_conf_obj_ops::coo_readdir()
- */
-bool c2_conf_readdir_pre(const struct c2_conf_obj *dir,
-			 const struct c2_conf_obj *entry);
-
-/**
- * Postcondition for c2_conf_obj_ops::coo_readdir().
- *
- * @param retval  The value returned by ->coo_readdir().
- * @param dir     The 1st argument of ->coo_readdir().
- * @param entry   The 2nd argument of ->coo_readdir(), dereferenced
- *                after the function is called (*pptr).
- *
- * @see c2_conf_obj_ops::coo_readdir()
- */
-bool c2_conf_readdir_post(int retval, const struct c2_conf_obj *dir,
-			  const struct c2_conf_obj *entry);
-
 /** @} conf_dfspec_objops */
 #endif /* __COLIBRI_CONF_OBJOPS_H__ */
-- 
1.8.3.2


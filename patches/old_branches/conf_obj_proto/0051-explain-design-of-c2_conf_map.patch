From dee8e55e38917e4cc5cd42a515adc8faf3370d35 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Mon, 12 Mar 2012 00:19:48 +0200
Subject: [PATCH 051/370] explain design of c2_conf_map

---
 conf/cache.h | 11 ++++++++++-
 conf/confc.c | 12 ++++++++++++
 conf/confc.h |  3 +++
 conf/map.c   | 45 +++++++++++++++++++++++++++++++++++++++++++++
 conf/map.h   | 42 ++++++++++++++++++++++++++++++++++++------
 5 files changed, 106 insertions(+), 7 deletions(-)
 create mode 100644 conf/map.c

diff --git a/conf/cache.h b/conf/cache.h
index fa01e8e..0afe838 100644
--- a/conf/cache.h
+++ b/conf/cache.h
@@ -24,6 +24,14 @@
 #include "lib/mutex.h" /* c2_mutex */
 #include "lib/cdefs.h" /* container_of */
 
+/**
+ * @defgroup conf_cache  Configuration Cache
+ *
+ * @see @ref confc-dld
+ *
+ * @{
+ */
+
 struct c2_sm_group;
 
 /** Configuration cache. */
@@ -39,7 +47,7 @@ struct c2_conf_cache {
 	struct c2_mutex     cc_lock;
 };
 
-void c2_conf_cache_init(struct c2_conf_cache *cache);
+int c2_conf_cache_init(struct c2_conf_cache *cache);
 void c2_conf_cache_fini(struct c2_conf_cache *cache);
 
 static inline struct c2_conf_cache *
@@ -48,4 +56,5 @@ c2_conf_map_to_cache(struct c2_conf_map *map)
 	return container_of(map, struct c2_conf_cache, cc_registry);
 }
 
+/** @} conf_cache */
 #endif /* __COLIBRI_CONF_CACHE_H__ */
diff --git a/conf/confc.c b/conf/confc.c
index 3155372..150ded1 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -235,8 +235,18 @@
  * @section confc-dld-conformance Conformance
  *
  * XXX
+ *
+ * @see confc_dlspec
  */
 
+/**
+ * @defgroup confc_dlspec  Confc Internals
+ *
+ * @see @ref confc-dld, @ref confc-dld-lspec
+ *
+ * @{
+ */
+
 static struct {
 	struct c2_conf_cache    cache;
 	struct c2_conf_profile *root;
@@ -870,3 +880,5 @@ cache_add(struct c2_conf_map *registry, const struct c2_confx_object *src)
 	 */
 	XXX;
 }
+
+/** @} confc_dlspec */
diff --git a/conf/confc.h b/conf/confc.h
index e2990ba..1e80032 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -294,8 +294,11 @@
 /**
  * @defgroup confc_dfspec  Configuration Client (confc)
  *
+ * @see @ref confc-dld, @ref confc-dld-fspec
+ *
  * @{
  */
+
 struct c2_confc_dir;
 
 /**
diff --git a/conf/map.c b/conf/map.c
new file mode 100644
index 0000000..a562fb6
--- /dev/null
+++ b/conf/map.c
@@ -0,0 +1,45 @@
+/* -*- c -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
+ * Original creation date: 11-Mar-2012
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+#include "conf/map.h"
+
+int c2_conf_map_init(struct c2_conf_map *map)
+{
+	/*
+	 * int rc;
+	 *
+	 * C2_PRE(map->m_db == NULL);
+	 *
+	 * // Initialize DB handle.
+	 * rc = db_create(&map->m_db, NULL, 0);
+	 *
+	 * // Set DB cache size (10 MB should suffice).
+	 * rc = map->m_db->set_cachesize(...);
+	 *
+	 * // Open the database.
+	 * rc = map->m_db->open(map->m_db, NULL, NULL, "confc registry",
+	 *                      DB_BTREE, DB_CREATE, 0);
+	 */
+	XXX;
+}
+C2_EXPORTED(c2_conf_map_init);
diff --git a/conf/map.h b/conf/map.h
index d45efd4..fbda21c 100644
--- a/conf/map.h
+++ b/conf/map.h
@@ -20,19 +20,47 @@
 #ifndef __COLIBRI_CONF_MAP_H__
 #define __COLIBRI_CONF_MAP_H__
 
+#include <db.h> /* DB */
+
+/**
+ * @addtogroup conf_cache
+ *
+ * The implementation of c2_conf_map is based on in-memory Berkeley DB.
+ * Since it is not possible to create a "memory-only" Berkeley
+ * database using current version of Colibri's database interfaces
+ * ("db/db.h"), this implementation invokes Berkeley DB API directly
+ * (<db.h>).
+ *
+ * DB environments (DB_ENV) are not used. Since only one thread can
+ * work with a registry of cached objects, there is no use for
+ * multi-threaded features provided by a DB environment.
+ *
+ * @see Writing In-Memory Berkeley DB Applications
+ * [http://docs.oracle.com/cd/E17076_02/html/articles/inmemory/C/index.html]
+ *
+ * @{
+ */
+
 /**
  * Objid-to-address mapping.
  *
- * Maps configuration object identity to the address of this object in
- * memory.  (Identity of a configuration object is {key, type} pair.)
+ * Maps identity of configuration object to the address of this object
+ * in memory.  (Recall that @e identity of a configuration object is a
+ * {key, type} pair.)
  *
  * c2_conf_map is used as a registry of cached configuration objects.
  */
 struct c2_conf_map {
-	XXX;
+	DB *m_db; /*< DB handle. */
 };
 
-void c2_conf_map_init(struct c2_conf_map *map);
+/**
+ * Constructs empty mapping.
+ *
+ * @pre  map->cm_db == NULL
+ */
+int c2_conf_map_init(struct c2_conf_map *map);
+
 void c2_conf_map_fini(struct c2_conf_map *map);
 
 /**
@@ -43,7 +71,7 @@ void c2_conf_map_fini(struct c2_conf_map *map);
 int c2_conf_map_add(struct c2_conf_map *map, const struct c2_conf_obj *obj);
 
 /**
- * Searches mapping for an object with given key and type.
+ * Searches for an object given its key and type.
  *
  * Returns NULL if the object is not found.
  */
@@ -58,7 +86,7 @@ struct c2_conf_obj * c2_conf_map_lookup(const struct c2_conf_map *map,
  */
 struct c2_conf_map_cursor {
 	const struct c2_conf_map *mc_map;
-	XXX;
+	DBC                      *mc_cur;
 };
 
 /**
@@ -76,4 +104,6 @@ void c2_conf_map_cursor_fini(struct c2_conf_map_cursor *cur);
  */
 struct c2_conf_obj * c2_conf_map_next(struct c2_conf_map_cursor *cur);
 
+/** @} conf_cache */
+
 #endif /* __COLIBRI_CONF_MAP_H__ */
-- 
1.8.3.2


From f26f07c62492c2f4f849987603bcd048196b278b Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Tue, 12 Jun 2012 23:50:09 +0300
Subject: [PATCH 196/370] confc_offline.h: use JSON for configuration string

As field names are now included in objects' encodings, the format of
configuration string starts having many similarities with JSON (thanks
to Anatoliy for pointing this out).  And we can save development efforts
by choosing one of existing open-source JSON parsers (e.g., json-c looks
promising).
---
 conf/confc_offline.h | 144 +++++++++++++++++----------------------------------
 1 file changed, 47 insertions(+), 97 deletions(-)

diff --git a/conf/confc_offline.h b/conf/confc_offline.h
index 2720833..d330cf5 100644
--- a/conf/confc_offline.h
+++ b/conf/confc_offline.h
@@ -24,47 +24,54 @@
  * @page conf-fspec-preload Pre-Loading of Configuration Cache
  *
  * - @ref conf-fspec-preload-string
- *   - @ref conf-fspec-preload-string-grammar
+ *   - @ref conf-fspec-preload-string-format
  *   - @ref conf-fspec-preload-string-examples
  * - @ref conf_dfspec_preload "Detailed Functional Specification"
  *
- * Confc cache can be created pre-loaded with configuration data. This
- * can be useful in situations like testing, boot-strapping, and
- * manual control, when confc cannot or should not communicate with
- * confd.
+ * When configuration cache is created, it can be pre-loaded with
+ * configuration data.  Cache pre-loading can be useful for testing,
+ * boot-strapping, and manual control. One of use cases is a situation
+ * when confc cannot or should not communicate with confd.
+ *
+ * <hr> <!------------------------------------------------------------>
+ * @section conf-fspec-preload-string  Configuration string
  *
  * The application pre-loads confc cache by passing textual
  * description of configuration objects -- so called configuration
- * string -- to c2_confc_init() via `conf_source' parameter. The value
- * of this parameter should start with "local-conf:", otherwise it
- * will be treated as an end point address of confd.
+ * string -- to c2_confc_init() via `conf_source' parameter. Note
+ * that the value of this parameter should start with "local-conf:",
+ * otherwise it will be treated as an end point address of confd.
  *
- * When confc API is used by a kernel module, the configuration string
- * is specified as a module parameter. User-space application obtains
- * this string from command line.
+ * When confc API is used by a kernel module, configuration string is
+ * provided as mount(8) option.
  *
- * <hr> <!------------------------------------------------------------>
- * @section conf-fspec-preload-string  Configuration string
+ * <!---------------------------------------------------------------->
+ * @subsection conf-fspec-preload-string-format  Format
  *
- * Configuration string describes a sequence of configuration objects.
- * c2_conf_parse() translates this string into an array of
- * confx_objects.
+ * Configuration string represents a set (array) of configuration
+ * objects encoded using JSON [http://www.json.org/] format.
  *
- * An object is represented by a sequence of attributes.  The first
- * attribute is object's identity.  Set of remaining attributes
- * depends on object's type.  Attributes are ordered similarly to the
- * fields of confx_* structure that corresponds to object's type.
+ * First two members of a configuration object encoding are "type" and
+ * "id". The set of remaining members depends on the type of object.
  *
- * E.g., this configuration string
+ * Object relations are expressed via object ids. Directory objects
+ * (c2_conf_dir) are not encoded.
+ *
+ * c2_conf_parse() translates configuration string into an array of
+ * confx_objects.
+ *
+ * E.g., configuration string
  *
 @verbatim
-(prof:"test","c2t1fs") (fs:"c2t1fs",[11,22],[50,60,70],[])
+[ {"type":"profile", "id":"test", "filesystem":"c2t1fs"},
+  {"type":"filesystem", "id":"c2t1fs", "rootfid":[11,22], "params":[50,60,70],
+   "services":[]} ]
 @endverbatim
  *
  * describes two confx_objects:
  *
  * @code
- * struct confx_object o1 = {
+ * struct confx_object a = {
  *     .o_key = C2_CONF_BUF_INIT(4, "test"),
  *     .o_val = {
  *         .ov_type = C2_CO_PROFILE,
@@ -73,7 +80,7 @@
  *         }
  *     }
  * };
- * struct confx_object o2 = {
+ * struct confx_object b = {
  *     .o_key = C2_CONF_BUF_INIT(6, "c2t1fs"),
  *     .o_val = {
  *         .ov_type = C2_CO_FILESYSTEM,
@@ -87,82 +94,25 @@
  * @endcode
  *
  * <!---------------------------------------------------------------->
- * @subsection conf-fspec-preload-string-grammar Grammar
- *
-@verbatim
-object-sequence:
-        object
-        object-sequence object
-
-object:
-        '(' type ':' STR ',' field-sequence ')'
-
-type:
-        'prof'
-        'fs'
-        'svc'
-        'node'
-        'sdev'
-        'part'
-
-field-sequence:
-        field
-        field-sequence ',' field
-
-field:
-        STR
-        UINT
-        '[' string-sequence* ']'
-        '[' integer-sequence* ']'
-
-string-sequence:
-        STR
-        string-sequence ',' STR
-
-integer-sequence:
-        UINT
-        integer-sequence ',' UINT
-@endverbatim
- *
- * UINT is an unsigned decimal integer.
- *
- * STR resembles C string, but escape characters are not supported.
- *
- * @code
- * "Hello, world!"    -- valid STR
- * "one\ttwo\03\0\xf" -- not a STR
- * @endcode
- *
- * Tokens can be separated by white-space characters.
- * Comments start with a hash symbol and run to the end of line.
- *
- * <!---------------------------------------------------------------->
  * @subsection conf-fspec-preload-string-examples Examples
  *
 @verbatim
-#               filesystem
-(prof:"test-2", "c2t1fs")
-
-#             rootfid   params      services
-(fs:"c2t1fs", [11, 22]  [50,60,70], ["mds", "io"])
-
-#           filesystem     type   end points                 node
-(svc:"mds", "c2t1fs",      1,     ["addr0"],                 "N")
-(svc:"io",  "c2t1fs",      2,     ["addr1","addr2","addr3"], "N")
-
-#          services       RAM   nr.CPU  state   flags   pool   nics
-(node:"N", ["mds", "io"], 8000, 2,      3,      2,      0,     ["nic0"],
-#          sdevs
-           ["sdev0"])
-
-#            node   type   MTU   speed   filename   state
-(nic:"nic0", "N",   5,     8192, 10000,  "ib0",     3)
-
-#              node   iface   media   size          state   flags   parts
-(sdev:"sdev0", "N",   4,      1,      596000000000, 3,      4,      ["part0"])
-
-#              sdev     start   size          idx   type   filename
-(part:"part0", "sdev0", 0,      596000000000, 0,    7,     "sda1")
+[ { "type":"profile", "id":"test-2", "filesystem":"c2t1fs" }
+, { "type":fs, "id":"c2t1fs", "rootfid":[11, 22], "params":[50,60,70],
+    "services":["mds", "io"] }
+, { "type":"service", "id":"mds", "filesystem":"c2t1fs", "type":1,
+    "endpoints":["addr0"], "node":"N" }
+, { "type":"service", "id":"io", "filesystem":"c2t1fs", "type":2,
+    "endpoints":["addr1","addr2","addr3"], "node":"N" }
+, { "type":"node", "id":"N", "services":["mds", "io"], "memsize":8000,
+    "nr_cpu":2, "last_state":3, "flags":2, "pool_id":0, "nics":["nic0"],
+    "sdevs":["sdev0"] }
+, { "type":"nic", "id":"nic0", "iface_type":5, "mtu":8192, "speed":10000,
+    "filename":"ib0", "last_state":3 }
+, { "type":"sdev", "id":"sdev0", "iface":4, "media":1, "size":596000000000,
+    "last_state":3, "flags":4, "partitions":["part0"] }
+, { "type":"partition", "id":"part0", "start":0, "size":596000000000, "index":0,
+    "type":7, "filename":"sda1" } ]
 @endverbatim
  *
  * @see @ref conf_dfspec_preload "Detailed Functional Specification"
-- 
1.8.3.2


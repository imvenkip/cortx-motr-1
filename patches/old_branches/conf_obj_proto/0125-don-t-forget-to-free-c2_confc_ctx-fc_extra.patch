From 1e56f99183be5ba07fe73621e3de4911e0549437 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Mon, 9 Apr 2012 10:58:53 +0300
Subject: [PATCH 125/370] don't forget to free c2_confc_ctx::fc_extra

Reviewed-on: https://reviewboard.clusterstor.com/r/714/
Reported-by: Carl Braganza <carl_braganza@xyratex.com>
References:  LogD-1.3 #999
---
 conf/confc.c | 25 ++++++++++++++++++++++---
 1 file changed, 22 insertions(+), 3 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index e72d6a9..a0b2de6 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -281,7 +281,9 @@
  * registered with is signaled.  Such an event triggers
  * on_object_updated() callback, which de-registers clinks (->fc_extra
  * and ->fc-clink) and posts an AST that will eventually move the
- * state machine to S_CHECK state.
+ * state machine to S_CHECK state. If ->fc_extra is not NULL,
+ * on_object_updated() also finalizes clinks of this array and frees
+ * it.
  *
  * @note  Object's channel (c2_conf_obj::co_chan) is signaled
  *        (c2_chan_broadcast()) when
@@ -711,7 +713,7 @@ static int walk(struct walk_ctx *wx)
 	return ret;
 }
 
-/** Allocate `n' clinks and attach them to the `group'. */
+/** Allocates `n' clinks and attaches them to the `group'. */
 static struct c2_clink *
 extra_clinks_create(struct c2_clink *group, uint32_t n)
 {
@@ -725,6 +727,21 @@ extra_clinks_create(struct c2_clink *group, uint32_t n)
 	return ret;
 }
 
+/** Frees resources allocated for ctx->fc_extra array. */
+static void extra_clinks_destroy(struct c2_confc_ctx *ctx)
+{
+	uint32_t i;
+	C2_PRE(ctx_invariant(ctx));
+
+	if (ctx->fc_extra != NULL) {
+		for (i = 0; i < ctx->fc_nr_extra; ++i)
+			c2_clink_fini(ctx->fc_extra + i);
+		c2_free(ctx->fc_extra);
+		ctx->fc_extra = NULL;
+		ctx->fc_nr_extra = 0;
+	}
+}
+
 static int act(struct c2_confc_ctx *cx, const struct walk_ctx *wx,
 	       enum c2_conf_status status)
 {
@@ -1168,6 +1185,7 @@ static bool on_object_updated(struct c2_clink *link)
 	for (i = 0; i < ctx->fc_nr_extra; ++i)
 		c2_clink_del(ctx->fc_extra + i);
 	c2_clink_del(&ctx->fc_clink); /* group head is de-registered last */
+	extra_clinks_destroy(ctx);
 
 	ast_state_set(&ctx->fc_ast, S_CHECK);
 	return true; /* event is consumed */
@@ -1391,6 +1409,7 @@ void c2_confc_ctx_fini(struct c2_confc_ctx *ctx)
 	ctx->fc_extra = NULL;
 	ctx->fc_nr_extra = 0;
 	c2_clink_fini(&ctx->fc_clink);
+	extra_clinks_destroy(ctx);
 	c2_chan_fini(&ctx->fc_complete);
 	c2_sm_fini(&ctx->fc_mach);
 	ctx->fc_client = NULL;
@@ -1404,7 +1423,7 @@ static bool ctx_invariant(const struct c2_confc_ctx *ctx)
 		item->ri_ops != NULL &&
 		item->ri_ops->rio_replied == on_replied &&
 		c2_fop_data(ctx->fc_fop) == &ctx->fc_req &&
-		equi(ctx->fc_nr_extra == 0, ctx->fc_extra == NULL);
+		equi(ctx->fc_extra == NULL, ctx->fc_nr_extra == 0);
 }
 
 static enum c2_conf_status
-- 
1.8.3.2


From a289a41c23ee1f067084c405a4f7f694e3e68305 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Thu, 29 Mar 2012 23:00:29 +0300
Subject: [PATCH 100/370] c2_conf_pathcomp_is_last(), c2_conf_path_len()

+ c2_conf_pathcomp_is_last(), c2_conf_path_len(): new functions.
+ Add precondition to c2_conf_path_is_valid().  Note that NULL origin
  is not accepted any more.
---
 conf/path.c | 25 ++++++++++++++++++-------
 conf/path.h | 16 ++++++++++++++--
 2 files changed, 32 insertions(+), 9 deletions(-)

diff --git a/conf/path.c b/conf/path.c
index 0365133..c75d535 100644
--- a/conf/path.c
+++ b/conf/path.c
@@ -114,19 +114,30 @@ bool c2_conf_eop(const struct c2_conf_pathcomp *pc)
 	return pc->pc_iskey == ~0U;
 }
 
+bool c2_conf_pathcomp_is_last(const struct c2_conf_pathcomp *pc)
+{
+	C2_PRE(!c2_conf_eop(pc));
+	return c2_conf_eop(pc + 1);
+}
+
+size_t c2_conf_path_len(const struct c2_conf_pathcomp *path)
+{
+	size_t len = 0;
+	while (!c2_conf_eop(path + len))
+		C2_CNT_INC(len);
+	return len;
+}
+
 struct c2_conf_pathcomp *
 c2_conf_pathcomp_dup(const struct c2_conf_pathcomp *src)
 {
 	struct c2_conf_pathcomp *ret;
-	size_t len = 0;
-
-	while (!c2_conf_eop(src + len))
-		C2_CNT_INC(len);
-	C2_CNT_INC(len); /* one for C2_CONF_EOP */
+	size_t nr = c2_conf_path_len(src);
+	C2_CNT_INC(nr); /* add one for C2_CONF_EOP */
 
-	C2_ALLOC_ARR(ret, len);
+	C2_ALLOC_ARR(ret, nr);
 	if (ret == NULL)
 		return NULL;
 
-	return memcpy(ret, src, len * sizeof *ret);
+	return memcpy(ret, src, nr * sizeof(*ret));
 }
diff --git a/conf/path.h b/conf/path.h
index a4ba5f7..6245ddd 100644
--- a/conf/path.h
+++ b/conf/path.h
@@ -34,12 +34,14 @@ struct c2_conf_pathcomp;
  *   component;
  * - a key is preceded by a one-to-many downlink.
  *
- * @param origin      Origin of the path to validate.
- * @param path        Path to validate.
+ * @param origin      Path origin.
+ * @param path        Path components.
  * @param[out] isdir  If the path is valid and isdir != NULL, then
  *                    *isdir will be set to:
  *                    - @c true:  the path leads to a collection of objects;
  *                    - @c false: the path leads to a single object.
+ *
+ * @pre  origin != NULL && path != NULL
  */
 bool c2_conf_path_is_valid(const struct c2_conf_obj *origin,
 			   const struct c2_conf_pathcomp *path, bool *isdir);
@@ -103,6 +105,16 @@ const struct c2_conf_relation * c2_conf_downlink(uint32_t src, uint32_t tgt);
 bool c2_conf_eop(const struct c2_conf_pathcomp *pc);
 
 /**
+ * Returns true iff this is the last component before C2_CONF_EOP.
+ *
+ * @pre  !c2_conf_eop(pc)
+ */
+bool c2_conf_pathcomp_is_last(const struct c2_conf_pathcomp *pc);
+
+/** Returns the number of path components excluding trailing C2_CONF_EOP. */
+size_t c2_conf_path_len(const struct c2_conf_pathcomp *path);
+
+/**
  * Duplicates an array of path components.
  *
  * Allocates memory for a copy of the path `src', does the copy, and
-- 
1.8.3.2


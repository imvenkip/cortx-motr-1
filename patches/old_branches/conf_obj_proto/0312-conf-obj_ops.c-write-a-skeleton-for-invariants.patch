From e365b5df50fb87e574f71c4e71f8d5b964c8ed40 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Mon, 13 Aug 2012 21:27:37 +0300
Subject: [PATCH 312/370] conf/obj_ops.c: write a "skeleton" for invariants

---
 conf/obj.c     |  26 ---------
 conf/obj.h     |  23 ++++----
 conf/obj_ops.c | 172 +++++++++++++++++++++++++++++++++++++++++----------------
 3 files changed, 135 insertions(+), 86 deletions(-)

diff --git a/conf/obj.c b/conf/obj.c
index d987932..6d72c0f 100644
--- a/conf/obj.c
+++ b/conf/obj.c
@@ -410,30 +410,4 @@
  * @{
  */
 
-enum {
-	CONF_DIR_MAGIX        = 0x3301dca1ab005e77,
-	CONF_PROFILE_MAGIX    = 0x33c105ab1e5ea177,
-	CONF_FILESYSTEM_MAGIX = 0x33f00d0fc01aba77,
-	CONF_SERVICE_MAGIX    = 0x33b1a5ed10ca1e77,
-	CONF_NODE_MAGIX       = 0x33c01055a1d05a77,
-	CONF_NIC_MAGIX        = 0x33ba5eba11feed77,
-	CONF_SDEV_MAGIX       = 0x33a115eed5a1ad77,
-	CONF_PARTITION_MAGIX  = 0x33bacca15a100f77
-};
-
-/* XXX TODO: .bt_check = conf_dir_invariant, where
- * conf_dir_invariant() calls
- *     C2_ASSERT(dir->cd_obj.co_parent != NULL);
- * In other words, a directory always has a parent.
- */
-struct c2_bob_type c2_conf_dir_bob = XXX;
-
-struct c2_bob_type c2_conf_profile_bob = XXX;
-struct c2_bob_type c2_conf_filesystem_bob = XXX;
-struct c2_bob_type c2_conf_service_bob = XXX;
-struct c2_bob_type c2_conf_node_bob = XXX;
-struct c2_bob_type c2_conf_nic_bob = XXX;
-struct c2_bob_type c2_conf_sdev_bob = XXX;
-struct c2_bob_type c2_conf_partition_bob = XXX;
-
 /** @} conf_dlspec_obj */
diff --git a/conf/obj.h b/conf/obj.h
index 1136eda..8752a90 100644
--- a/conf/obj.h
+++ b/conf/obj.h
@@ -231,10 +231,9 @@ struct c2_conf_dir {
 	/**
 	 * Type of items.
 	 *
-	 * This field lets c2_conf_dir know which "relation" it
-	 * represents.
+	 * This field lets c2_conf_dir know which "relation" it represents.
 	 */
-	enum c2_conf_objtype cd_items_t;
+	enum c2_conf_objtype cd_item_type;
 };
 
 struct c2_conf_profile {
@@ -370,16 +369,14 @@ struct c2_conf_partition {
 #define c2_conf_sdev_cast_field       sd_obj
 #define c2_conf_partition_cast_field  pa_obj
 
-#define _DECLARE(type) extern struct c2_bob_type type ## _bob
-_DECLARE(c2_conf_dir);
-_DECLARE(c2_conf_profile);
-_DECLARE(c2_conf_filesystem);
-_DECLARE(c2_conf_service);
-_DECLARE(c2_conf_node);
-_DECLARE(c2_conf_nic);
-_DECLARE(c2_conf_sdev);
-_DECLARE(c2_conf_partition);
-#undef _DECLARE
+extern const struct c2_bob_type c2_conf_dir_bob;
+extern const struct c2_bob_type c2_conf_profile_bob;
+extern const struct c2_bob_type c2_conf_filesystem_bob;
+extern const struct c2_bob_type c2_conf_service_bob;
+extern const struct c2_bob_type c2_conf_node_bob;
+extern const struct c2_bob_type c2_conf_nic_bob;
+extern const struct c2_bob_type c2_conf_sdev_bob;
+extern const struct c2_bob_type c2_conf_partition_bob;
 
 /** @} conf_dfspec_obj */
 #endif /* __COLIBRI_CONF_OBJ_H__ */
diff --git a/conf/obj_ops.c b/conf/obj_ops.c
index bf22ccc..699b2af 100644
--- a/conf/obj_ops.c
+++ b/conf/obj_ops.c
@@ -26,7 +26,8 @@
 #include "lib/cdefs.h"    /* ergo */
 #include "lib/arith.h"    /* C2_CNT_INC, C2_CNT_DEC */
 #include "lib/misc.h"     /* C2_IN */
-#include "lib/cdefs.h"    /* IS_IN_ARRAY */
+#include "lib/cdefs.h"    /* C2_MAGIX_OFFSET, IS_IN_ARRAY */
+#include "lib/assert.h"   /* C2_IMPOSSIBLE */
 
 /**
  * @defgroup conf_dlspec_objops Configuration Object Operations
@@ -36,12 +37,106 @@
  * @{
  */
 
-static bool confc_is_locked(const struct c2_confc *confc);
+/* ------------------------------------------------------------------
+ * bobs and invariants
+ * ------------------------------------------------------------------ */
+enum {
+	CONF_DIR_MAGIX        = 0x3301dca1ab005e77,
+	CONF_PROFILE_MAGIX    = 0x33c105ab1e5ea177,
+	CONF_FILESYSTEM_MAGIX = 0x33f00d0fc01aba77,
+	CONF_SERVICE_MAGIX    = 0x33b1a5ed10ca1e77,
+	CONF_NODE_MAGIX       = 0x33c01055a1d05a77,
+	CONF_NIC_MAGIX        = 0x33ba5eba11feed77,
+	CONF_SDEV_MAGIX       = 0x33a115eed5a1ad77,
+	CONF_PARTITION_MAGIX  = 0x33bacca15a100f77
+};
+
+static bool dir_invariant(const void *ptr);
+static bool profile_invariant(const void *ptr);
+XXX;
+
+#define _BOB_DEFINE(type, magix, invariant)                         \
+const struct c2_bob_type type ## _bob = {                           \
+	.bt_name = #type,                                           \
+	.bt_magix_offset =                                          \
+		C2_MAGIX_OFFSET(struct type, type ## _cast_field) + \
+		C2_MAGIX_OFFSET(struct c2_conf_obj, co_magix),      \
+	.bt_magix = magix,                                          \
+	.bt_check = invariant                                       \
+}
+
+_BOB_DEFINE(c2_conf_dir,        CONF_DIR_MAGIX,        dir_invariant);
+_BOB_DEFINE(c2_conf_profile,    CONF_PROFILE_MAGIX,    profile_invariant);
+_BOB_DEFINE(c2_conf_filesystem, CONF_FILESYSTEM_MAGIX, filesystem_invariant);
+_BOB_DEFINE(c2_conf_service,    CONF_SERVICE_MAGIX,    service_invariant);
+_BOB_DEFINE(c2_conf_node,       CONF_NODE_MAGIX,       node_invariant);
+_BOB_DEFINE(c2_conf_nic,        CONF_NIC_MAGIX,        nic_invariant);
+_BOB_DEFINE(c2_conf_sdev,       CONF_SDEV_MAGIX,       sdev_invariant);
+_BOB_DEFINE(c2_conf_partition,  CONF_PARTITION_MAGIX,  partition_invariant);
+#unset _BOB_DEFINE
+
+static bool concrete_invariant(const struct c2_conf_obj *obj)
+{
+#define CHECK(ptr, type)                                                   \
+	c2_bob_check(&type ## _bob, container_of((ptr), const struct type, \
+						 type ## _cast_field))
+
+	switch (obj->co_type) {
+	case C2_CO_DIR:        return CHECK(obj, c2_conf_dir);
+	case C2_CO_PROFILE:    return CHECK(obj, c2_conf_profile);
+	case C2_CO_FILESYSTEM: return CHECK(obj, c2_conf_filesystem);
+	case C2_CO_SERVICE:    return CHECK(obj, c2_conf_service);
+	case C2_CO_NODE:       return CHECK(obj, c2_conf_node);
+	case C2_CO_NIC:        return CHECK(obj, c2_conf_nic);
+	case C2_CO_SDEV:       return CHECK(obj, c2_conf_sdev);
+	case C2_CO_PARTITION:  return CHECK(obj, c2_conf_partition);
+	default:
+		C2_IMPOSSIBLE("Invalid object type");
+	}
+
+	return false; /* never reached */
+#undef CHECK
+}
 
 bool c2_conf_obj_invariant(const struct c2_conf_obj *obj)
 {
-	return XXX_bob_check(obj) && (obj->co_ops->coo_invariant == NULL ?
-				      true : obj->co_ops->coo_invariant(obj));
+	return
+		/* Check only generic fields. */
+		obj->co_type < C2_CO_NR &&
+		obj->co_id.cb_size > 0 && obj->co_id.cb_data != NULL &&
+		C2_IN(obj->co_status,
+		      (C2_CS_MISSING, C2_CS_LOADING, C2_CS_READY)) &&
+		obj->co_ops != NULL &&
+		/* Check concrete fields. */
+		concrete_invariant(obj);
+}
+
+C2_TL_DESCR_DEFINE(dir, "c2_conf_dir", static, struct XXX, XXX);
+C2_TL_DEFINE(dir, static, struct XXX);
+
+static bool dir_invariant(const void *ptr)
+{
+	struct c2_conf_obj       *child;
+	const struct c2_conf_dir *dir = ptr;
+
+	return dir->cd_obj.co_parent != NULL && dir->cd_item_type < C2_CO_NR &&
+		c2_tlist_forall(&dir_tl, child, &dir->cd_items,
+				child->co_type == dir->cd_item_type);
+}
+
+/* XXX
+ *
+ * {profile..partition}_invariant()
+ */
+XXX;
+
+/* ------------------------------------------------------------------
+ * c2_conf_obj_{get,put}()
+ * ------------------------------------------------------------------ */
+
+static bool confc_is_locked(const struct c2_confc *confc)
+{
+	return c2_mutex_is_locked(&confc->cc_lock);
 }
 
 void c2_conf_obj_get(struct c2_conf_obj *obj)
@@ -63,28 +158,32 @@ void c2_conf_obj_put(struct c2_conf_obj *obj)
 	if (obj->co_nrefs == 0)
 		c2_chan_broadcast(&obj->co_chan);
 }
+
+/* ------------------------------------------------------------------
+ * c2_conf_{new,match,fill}()
+ * ------------------------------------------------------------------ */
 
-static const struct {
-	/**
-	 * Tests equality of the cached configuration object and its
-	 * on-wire representation.
-	 *
-	 * @pre  cached->co_status == C2_CS_READY
-	 * @pre  cached->co_type == onwire->o_conf.u_type
-	 * @pre  c2_conf_buf_eq(cached->co_id, onwire->o_id)
-	 */
-	bool (*oo_equal)(const struct c2_conf_obj *cached,
-			 const struct confx_object *onwire);
-} obj_ops[C2_CO_NR] = {
-	[C2_CO_DIR]        = { .oo_equal = XXX },
-	[C2_CO_PROFILE]    = { .oo_equal = XXX },
-	[C2_CO_FILESYSTEM] = { .oo_equal = XXX },
-	[C2_CO_SERVICE]    = { .oo_equal = XXX },
-	[C2_CO_NODE]       = { .oo_equal = XXX },
-	[C2_CO_NIC]        = { .oo_equal = XXX },
-	[C2_CO_SDEV]       = { .oo_equal = XXX },
-	[C2_CO_PARTITION]  = { .oo_equal = XXX }
-};
+/* static const struct { */
+/* 	/\** */
+/* 	 * Tests equality of the cached configuration object and its */
+/* 	 * on-wire representation. */
+/* 	 * */
+/* 	 * @pre  cached->co_status == C2_CS_READY */
+/* 	 * @pre  cached->co_type == onwire->o_conf.u_type */
+/* 	 * @pre  c2_conf_buf_eq(cached->co_id, onwire->o_id) */
+/* 	 *\/ */
+/* 	bool (*oo_equal)(const struct c2_conf_obj *cached, */
+/* 			 const struct confx_object *onwire); */
+/* } obj_ops[C2_CO_NR] = { */
+/* 	[C2_CO_DIR]        = { .oo_equal = XXX }, */
+/* 	[C2_CO_PROFILE]    = { .oo_equal = XXX }, */
+/* 	[C2_CO_FILESYSTEM] = { .oo_equal = XXX }, */
+/* 	[C2_CO_SERVICE]    = { .oo_equal = XXX }, */
+/* 	[C2_CO_NODE]       = { .oo_equal = XXX }, */
+/* 	[C2_CO_NIC]        = { .oo_equal = XXX }, */
+/* 	[C2_CO_SDEV]       = { .oo_equal = XXX }, */
+/* 	[C2_CO_PARTITION]  = { .oo_equal = XXX } */
+/* }; */
 
 /** Allocate concrete object and return the address of its ->*_obj field. */
 static struct c2_conf_obj *concrete_obj_alloc(enum c2_conf_objtype type)
@@ -254,37 +353,16 @@ static int dir_readdir(struct c2_conf_obj *dir, struct c2_conf_obj **pptr)
  */
 
 /* ------------------------------------------------------------------
- * ->coo_invariant()
- * ------------------------------------------------------------------ */
-
-static bool dir_invariant(const struct c2_conf_obj *obj)
-{
-	struct c2_conf_dir *dir = C2_CONF_CAST(obj, c2_conf_dir);
-
-	XXX;
-}
-
-/* XXX
- *
- * {profile..partition}_invariant()
- */
-
-/* ------------------------------------------------------------------
  * misc.
  * ------------------------------------------------------------------ */
 
-static bool confc_is_locked(const struct c2_confc *confc)
-{
-	return c2_mutex_is_locked(&confc->cc_lock);
-}
-
 static bool
 belongs(const struct c2_conf_obj *entry, const struct c2_conf_obj *dir)
 {
 	const struct c2_conf_dir *d = bob_of(dir, const struct c2_conf_dir,
 					     c2_conf_dir_cast_field,
 					     &c2_conf_dir_bob);
-	return d->cd_items_t == entry->co_type && entry->co_parent == dir;
+	return d->cd_item_type == entry->co_type && entry->co_parent == dir;
 }
 
 /**
-- 
1.8.3.2


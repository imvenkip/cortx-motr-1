From 88ddf319fb8529c924214254f072c72736c1c50c Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 30 Mar 2012 23:26:26 +0300
Subject: [PATCH 107/370] describe S_CHECK in `State Specification' section

+ add ``path_walk() result / confc state'' table
+ *_st_in callbacks: C2_PRE() that group is locked
---
 conf/confc.c | 30 ++++++++++++++++++++----------
 conf/confc.h |  4 ++--
 2 files changed, 22 insertions(+), 12 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 8924c77..b0d770f 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -194,12 +194,8 @@
  *       event by calling c2_sm_asts_run().
  *
  * When the AST, posted by c2_confc_open(), is run, it moves the state
- * machine (c2_confc_ctx::fc_mach) to S_CHECK state.  When S_CHECK
- * state is entered, check_st_in() callback is invoked. This function
- * calls path_walk() and, depending on the value returned by the
- * latter, switches the state machine to S_TERMINAL, S_WAIT_REPLY,
- * S_WAIT_STATUS, or S_FAILURE state. No AST is needed as the group is
- * already locked.
+ * machine (c2_confc_ctx::fc_mach) to S_CHECK state.  See @ref
+ * confc-dld-lspec-state below.
  *
  * <!------------------------------------------------------------------>
  * @subsection confc-dld-lspec-walk Walking the DAG
@@ -294,8 +290,20 @@
  *
  * - S_CHECK
  *
- * See @ref confc-dld-lspec-open for the description of actions
- * performed by a confc state machine on entering S_CHECK state.
+ * When S_CHECK state is entered, check_st_in() callback is
+ * invoked. It calls path_walk() and, depending on the value returned
+ * by this call, moves the state machine to another state:
+ *
+@verbatim
++---------------------+------------------+
+| path_walk() returns | next confc state |
++---------------------+------------------+
+|         < 0         |   S_FAILURE      |
+|    C2_CS_READY      |   S_TERMINAL     |
+|    C2_CS_MISSING    |   S_WAIT_REPLY   |
+|    C2_CS_LOADING    |   S_WAIT_STATUS  |
++---------------------+------------------+
+@endverbatim
  *
  * - S_WAIT_REPLY
  *
@@ -304,7 +312,7 @@
  * configuration request (c2_confc_ctx::fc_req) to the confd, using
  * c2_rpc_post().  (Not now; see @ref confc-offline.)
  *
- * A state machine remains in S_WAIT_REPLY state until reply from
+ * A state machine remains in S_WAIT_REPLY state until a reply from
  * confd arrives. This event triggers on_replied() callback.  If the
  * error code contained in confd's reply (c2_conf_fetch_resp) is
  * non-zero, on_replied() posts an AST that will eventually move the
@@ -939,6 +947,7 @@ static void wait_reply_st_in(struct c2_sm *mach)
 	int rc;
 	struct c2_confc_ctx *ctx = mach_to_ctx(mach);
 
+	C2_PRE(c2_mutex_is_locked(group_lock(ctx)));
 	C2_PRE(ctx_invariant(ctx));
 	C2_PRE(request_is_valid(ctx->fc_req));
 
@@ -955,6 +964,7 @@ static void grow_cache_st_in(struct c2_sm *mach)
 	 * struct c2_confc_ctx       *ctx  = mach_to_ctx(mach);
 	 * struct c2_rpc_item        *item = c2_fop_to_rpc_item(&ctx->fc_fop);
 	 *
+	 * C2_PRE(c2_mutex_is_locked(group_lock(ctx)));
 	 * C2_PRE(item->ri_error == 0 && item->ri_reply != NULL);
 	 *
 	 * resp = c2_fop_data(c2_rpc_item_to_fop(item->ri_reply));
@@ -1013,7 +1023,7 @@ static void on_replied(struct c2_rpc_item *item)
 /** Handles `object loading completed' and `object unpinned' events. */
 static bool on_object_updated(struct c2_clink *link)
 {
-	size_t i;
+	uint32_t i;
 	struct c2_confc_ctx *ctx =
 		container_of(link->cl_group, struct c2_confc_ctx, fc_clink);
 
diff --git a/conf/confc.h b/conf/confc.h
index ece9bdf..5bbc9de 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -403,8 +403,8 @@ struct c2_confc_ctx {
 	 * @see `Multiple channels' section in @ref chan.
 	 */
 	struct c2_clink         *fc_extra;
-	/** Length of ->fc_extra array. */
-	size_t                   fc_nr_extra;
+	/** Number of ->fc_extra clinks. */
+	uint32_t                 fc_nr_extra;
 };
 
 void c2_confc_ctx_init(struct c2_confc_ctx *ctx, struct c2_confc *client);
-- 
1.8.3.2


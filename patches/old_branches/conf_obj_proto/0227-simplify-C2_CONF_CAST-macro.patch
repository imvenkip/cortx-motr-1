From e76eadb611a937458c5c73daf441987ddcf1a0ed Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Thu, 5 Jul 2012 20:07:05 +0300
Subject: [PATCH 227/370] simplify C2_CONF_CAST() macro

Deduce the name of field from type name. (Kudos to Nikita for suggesting
the trick!)

RB: r/865/diff/1/?file=22712#file22712line185
---
 conf/confc.h | 23 +++++++++++------------
 conf/obj.h   | 36 ++++++++++++++++++++++++------------
 2 files changed, 35 insertions(+), 24 deletions(-)

diff --git a/conf/confc.h b/conf/confc.h
index dd38fbc..dc22fb3 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -178,7 +178,7 @@ struct c2_mutex;
  *         if (obj == NULL)
  *             rc = c2_confc_error(&ctx);
  *         else
- *             *fs = C2_CONF_CAST(obj, c2_conf_filesystem, cf_obj);
+ *             *fs = C2_CONF_CAST(obj, c2_conf_filesystem);
  *     }
  *
  *     c2_clink_del(&clink);
@@ -213,12 +213,12 @@ struct c2_mutex;
  *
  *     // This is an idiom: initialize c2_conf_dircur and close
  *     // directory object.  c2_conf_dircur will keep the object pinned.
- *     c2_conf_dircur_init(&cur, C2_CONF_CAST(obj, c2_conf_dir, cd_obj));
+ *     c2_conf_dircur_init(&cur, C2_CONF_CAST(obj, c2_conf_dir));
  *     c2_confc_close(obj);
  *
  *     while ((rc = c2_confc_readdir_sync(&obj, &cur)) > 0) {
  *         const struct c2_conf_service *svc =
- *             C2_CONF_CAST(obj, c2_conf_service, cs_obj);
+ *             C2_CONF_CAST(obj, c2_conf_service);
  *         if (svc->cs_type == tos) {
  *             // ... Use `svc' ...
  *         }
@@ -251,14 +251,14 @@ struct c2_mutex;
  *     if (rc != 0)
  *         return rc;
  *
- *     c2_conf_dircur_init(&svc_cur, C2_CONF_CAST(obj, c2_conf_dir, cd_obj));
+ *     c2_conf_dircur_init(&svc_cur, C2_CONF_CAST(obj, c2_conf_dir));
  *     c2_confc_close(obj); // `svc_cur' will keep the object pinned
  *
  *     while ((rc = c2_confc_readdir_sync(&obj, &svc_cur)) > 0) {
  *         // `obj' points at c2_conf_service::cs_obj.
  *         struct c2_conf_dircur   cur;
- *         struct c2_conf_service *svc = C2_CONF_CAST(obj, c2_conf_service,
- *                                                    cs_obj);
+ *         struct c2_conf_service *svc = C2_CONF_CAST(obj, c2_conf_service);
+ *
  *         if (svc->cs_type != svc_type)
  *             continue; // This is not the service we are looking for.
  *
@@ -278,11 +278,10 @@ struct c2_mutex;
  *             break;
  *
  *         // Process NICs.
- *         c2_conf_dircur_init(&cur, C2_CONF_CAST(obj, c2_conf_dir, cd_obj));
+ *         c2_conf_dircur_init(&cur, C2_CONF_CAST(obj, c2_conf_dir));
  *         c2_confc_close(obj);
  *         while ((rc = c2_confc_readdir_sync(&obj, &cur)) > 0) {
- *             const struct c2_conf_nic *nic =
- *                 C2_CONF_CAST(obj, c2_conf_nic, ni_obj);
+ *             const struct c2_conf_nic *nic = C2_CONF_CAST(obj, c2_conf_nic);
  *             // ... Use `nic' ...
  *         }
  *         c2_conf_dircur_fini(&cur);
@@ -295,11 +294,11 @@ struct c2_mutex;
  *             break;
  *
  *         // Process storage devices.
- *         c2_conf_dircur_init(&cur, C2_CONF_CAST(obj, c2_conf_dir, cd_obj));
+ *         c2_conf_dircur_init(&cur, C2_CONF_CAST(obj, c2_conf_dir));
  *         c2_confc_close(obj);
  *         while ((rc = c2_confc_readdir_sync(&obj, &cur)) > 0) {
- *             const struct c2_conf_sdev *sdev =
- *                 C2_CONF_CAST(obj, c2_conf_sdev, sd_obj);
+ *             const struct c2_conf_sdev *sdev = C2_CONF_CAST(obj,
+ *                                                            c2_conf_sdev);
  *             // ... Use `sdev' ...
  *         }
  *         c2_conf_dircur_fini(&cur);
diff --git a/conf/obj.h b/conf/obj.h
index c423995..cc9059c 100644
--- a/conf/obj.h
+++ b/conf/obj.h
@@ -218,17 +218,7 @@ struct c2_conf_obj {
 	 */
 	struct c2_confc              *co_confc;
 };
-
-/**
- * Casts c2_conf_obj to the ambient concrete configuration object.
- *
- * @param ptr    Pointer to c2_conf_obj member.
- * @param type   Type of concrete configuration object (without `struct').
- * @param field  Name of c2_conf_obj member within the struct.
- */
-#define C2_CONF_CAST(ptr, type, field) \
-	bob_of(ptr, struct type, field, &type ## _bob)
-
+
 /* ------------------------------------------------------------------
  * Concrete configuration objects
  * ------------------------------------------------------------------ */
@@ -355,7 +345,29 @@ struct c2_conf_partition {
 	uint32_t           pa_type;
 	const char        *pa_filename;
 };
+
+/* ------------------------------------------------------------------
+ * Cast
+ * ------------------------------------------------------------------ */
+
+#define c2_conf_dir_cast_field        cd_obj
+#define c2_conf_profile_cast_field    cp_obj
+#define c2_conf_filesystem_cast_field cf_obj
+#define c2_conf_service_cast_field    cs_obj
+#define c2_conf_node_cast_field       cn_obj
+#define c2_conf_nic_cast_field        ni_obj
+#define c2_conf_sdev_cast_field       sd_obj
+#define c2_conf_partition_cast_field  pa_obj
 
+/**
+ * Casts c2_conf_obj to the ambient concrete configuration object.
+ *
+ * @param ptr    Pointer to c2_conf_obj member.
+ * @param type   Type of concrete configuration object (without `struct').
+ */
+#define C2_CONF_CAST(ptr, type) \
+	bob_of(ptr, struct type, type ## _cast_field, &type ## _bob)
+
 /* ------------------------------------------------------------------
  * Object operations vector
  * ------------------------------------------------------------------ */
@@ -391,7 +403,7 @@ struct c2_conf_obj_ops {
 	int (*coo_readdir)(struct c2_conf_obj **result,
 			   struct c2_conf_dircur *cur);
 };
-
+
 /* ------------------------------------------------------------------
  * Directory cursor
  * ------------------------------------------------------------------ */
-- 
1.8.3.2


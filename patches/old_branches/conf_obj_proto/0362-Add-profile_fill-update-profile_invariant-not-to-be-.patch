From 9337a9c4f38f8716206339f53bc4ff2b6dc6e3c2 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Thu, 6 Sep 2012 20:02:10 +0300
Subject: [PATCH 362/370] Add profile_fill, update profile_invariant not to be
 strict while obj fini.

---
 conf/obj_ops.c         |  2 +-
 conf/objs/filesystem.c | 16 +++++++---------
 conf/objs/profile.c    |  8 ++++++--
 conf/reg.c             |  2 ++
 conf/ut/obj.c          |  6 +++---
 5 files changed, 19 insertions(+), 15 deletions(-)

diff --git a/conf/obj_ops.c b/conf/obj_ops.c
index a45f534..8b018b7 100644
--- a/conf/obj_ops.c
+++ b/conf/obj_ops.c
@@ -187,8 +187,8 @@ int c2_conf_obj_fill(struct c2_conf_obj *dest, const struct confx_object *src,
 	C2_PRE(confx_object_is_valid(src));
 
 	rc = dest->co_ops->coo_fill(dest, src, reg);
+	dest->co_status = (rc == 0 ? C2_CS_READY : C2_CS_MISSING);
 
-	C2_POST(dest->co_status == (rc == 0 ? C2_CS_READY : C2_CS_MISSING));
 	C2_POST(ergo(rc == 0, dest->co_mounted));
 	C2_POST(confc_is_unset_or_locked(dest));
 	C2_POST(c2_conf_obj_invariant(dest));
diff --git a/conf/objs/filesystem.c b/conf/objs/filesystem.c
index 135efe6..e9a85bc 100644
--- a/conf/objs/filesystem.c
+++ b/conf/objs/filesystem.c
@@ -33,15 +33,13 @@ static bool filesystem_invariant(const void *bob)
 	C2_PRE(self_obj->co_type == C2_CO_FILESYSTEM);
 
 	return ergo(obj_is_stub(self_obj), self->cf_params == NULL) &&
-		(self_obj->co_mounted ?
-		 /* check relations */
-		 parent_check(self_obj, C2_CO_PROFILE) &&
-		 C2_CONF_CAST(self_obj->co_parent,
-			      c2_conf_profile)->cp_filesystem == self &&
-		 child_check(self_obj, MEMBER_PTR(self->cf_services, cd_obj),
-			     C2_CO_DIR) :
-		 /* ensure the absence of relations */
-		 self_obj->co_parent == NULL && self->cf_services == NULL);
+		ergo(self_obj->co_mounted, /* check relations */
+		     parent_check(self_obj, C2_CO_PROFILE) &&
+		     C2_CONF_CAST(self_obj->co_parent,
+				  c2_conf_profile)->cp_filesystem == self &&
+		     child_check(self_obj,
+				 MEMBER_PTR(self->cf_services, cd_obj),
+				 C2_CO_DIR));
 }
 
 static int filesystem_fill(struct c2_conf_obj *__dest,
diff --git a/conf/objs/profile.c b/conf/objs/profile.c
index 61a4824..56208fd 100644
--- a/conf/objs/profile.c
+++ b/conf/objs/profile.c
@@ -46,7 +46,7 @@ static bool profile_invariant(const void *bob)
 		 child_check(self_obj, MEMBER_PTR(self->cp_filesystem, cf_obj),
 			     C2_CO_FILESYSTEM) :
 		 /* ensure the absence of relations */
-		 self->cp_filesystem == NULL);
+			  self->cp_filesystem == NULL);
 }
 
 static int profile_fill(struct c2_conf_obj *__dest,
@@ -60,8 +60,12 @@ static int profile_fill(struct c2_conf_obj *__dest,
 	const struct confx_profile *src = &__src->o_conf.u.u_profile;
 
 	rc = obj_find(reg, C2_CO_FILESYSTEM, &src->xp_filesystem, &fs);
-	if (rc == 0)
+	if (rc == 0) {
 		dest->cp_filesystem = C2_CONF_CAST(fs, c2_conf_filesystem);
+		dest->cp_filesystem->cf_obj.co_parent = __dest;
+		dest->cp_filesystem->cf_obj.co_mounted = true;
+		__dest->co_mounted = true;
+	}
 	return rc;
 }
 
diff --git a/conf/reg.c b/conf/reg.c
index 74d0b31..9eb1155 100644
--- a/conf/reg.c
+++ b/conf/reg.c
@@ -79,6 +79,8 @@ void c2_conf_reg_fini(struct c2_conf_reg *reg)
 
 	c2_tl_for(c2_conf_reg, &reg->r_objs, obj) {
 		c2_conf_reg_tlist_del(obj);
+		/* don't let concrete invariants check relations */
+		obj->co_mounted = false;
 		c2_conf_obj_delete(obj);
 	} c2_tl_endfor;
 
diff --git a/conf/ut/obj.c b/conf/ut/obj.c
index 808163b..bb0fb46 100644
--- a/conf/ut/obj.c
+++ b/conf/ut/obj.c
@@ -66,9 +66,9 @@ void test_obj(void)
 	n = c2_conf_parse(buf, conf, ARRAY_SIZE(conf));
 	C2_UT_ASSERT(n == 8);
 
-	for (t = 0; t < 0/*n*/; ++t) {
-		obj = c2_conf_obj_create(t, &(const struct c2_buf)
-					 C2_BUF_INITS("test"));
+	for (t = 0; t < 1; ++t) {
+		obj = c2_conf_obj_create(t+1, &(const struct c2_buf)
+					 C2_BUF_INITS("test-2"));
 		C2_UT_ASSERT(obj != NULL);
 
 		rc = c2_conf_obj_fill(obj, &conf[t], &reg);
-- 
1.8.3.2


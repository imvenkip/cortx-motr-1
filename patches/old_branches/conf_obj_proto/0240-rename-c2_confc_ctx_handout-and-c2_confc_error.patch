From 34cfe9d175d25a628edefdec1174540911ad27fa Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 13 Jul 2012 10:43:09 +0300
Subject: [PATCH 240/370] rename c2_confc_ctx_handout() and c2_confc_error()

s/c2_confc_ctx_handout/c2_confc_ctx_result/
s/c2_confc_error/c2_confc_ctx_error/

LogD #411
RB: r/849/diff/1/?file=22430#file22430line72,
    r/865/diff/1-4/?file=22712#file22712line537
---
 conf/confc.c |  6 +++---
 conf/confc.h | 20 ++++++++++----------
 conf/obj.c   |  2 +-
 3 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/conf/confc.c b/conf/confc.c
index 592d275..b9f9afa 100644
--- a/conf/confc.c
+++ b/conf/confc.c
@@ -438,7 +438,7 @@ void c2_confc_ctx_fini(struct c2_confc_ctx *ctx)
 	c2_mutex_unlock(group_lock(confc));
 }
 
-struct c2_conf_obj *c2_confc_ctx_handout(struct c2_confc_ctx *ctx)
+struct c2_conf_obj *c2_confc_ctx_result(struct c2_confc_ctx *ctx)
 {
 	C2_PRE(C2_IN(ctx->fc_mach, (S_TERMINAL, S_FAILURE)));
 
@@ -484,9 +484,9 @@ int c2_confc_open_sync(struct c2_conf_obj **result, struct c2_conf_obj *origin,
 	rc = c2_confc_open(&ctx, origin, path);
 	if (rc == 0) {
 		c2_chan_wait(&clink);
-		*result = c2_confc_ctx_handout(&ctx);
+		*result = c2_confc_ctx_result(&ctx);
 		if (*result == NULL)
-			rc = c2_confc_error(&ctx);
+			rc = c2_confc_ctx_error(&ctx);
 	}
 
 	c2_clink_del(&clink);
diff --git a/conf/confc.h b/conf/confc.h
index 0c74a86..694123f 100644
--- a/conf/confc.h
+++ b/conf/confc.h
@@ -81,10 +81,10 @@ struct c2_mutex;
  * - c2_confc_open_sync() opens configuration object synchronously.
  * - c2_confc_close() closes configuration object.
  *
- * - c2_confc_ctx_handout() is used to take the resulting
+ * - c2_confc_ctx_result() is used to obtain the resulting
  *   configuration object from c2_confc_ctx.
- * - c2_confc_error() returns the error status for the asynchronous
- *   configuration request.
+ * - c2_confc_ctx_error() returns the error status for the
+ *   asynchronous configuration request.
  *
  * - c2_confc_readdir() requests asynchronous retrieval of the next
  *   directory entry.
@@ -136,8 +136,8 @@ struct c2_mutex;
  * Prior to calling them, the application should initialize a context
  * object (c2_confc_ctx_init()) and register a clink with
  * c2_confc_ctx::fc_complete channel.  After the clink is signaled,
- * c2_confc_ctx_handout() is be used to obtain the requested
- * configuration object.  c2_confc_error() returns the error code.
+ * c2_confc_ctx_result() is be used to obtain the requested
+ * configuration object.  c2_confc_ctx_error() returns the error code.
  *
  * A caller of c2_confc_open_sync() or c2_confc_readdir_sync() will be
  * blocked while confc processes the request.
@@ -174,9 +174,9 @@ struct c2_mutex;
  *                 struct c2_conf_obj *obj;
  *
  *                 c2_chan_wait(&clink);
- *                 obj = c2_confc_ctx_handout(&ctx);
+ *                 obj = c2_confc_ctx_result(&ctx);
  *                 if (obj == NULL)
- *                         rc = c2_confc_error(&ctx);
+ *                         rc = c2_confc_ctx_error(&ctx);
  *                 else
  *                         *fs = C2_CONF_CAST(obj, c2_conf_filesystem);
  *         }
@@ -445,7 +445,7 @@ struct c2_confc_ctx {
 	 * The value is NULL until ->fc_complete channel is signaled.
 	 * It is also NULL if configuration retrieval failed.
 	 *
-	 * @see c2_confc_ctx_handout(), c2_confc_error().
+	 * @see c2_confc_ctx_result(), c2_confc_ctx_error().
 	 */
 	struct c2_conf_obj      *fc_result;
 	/** The confc instance this context belongs to. */
@@ -490,10 +490,10 @@ void c2_confc_ctx_fini(struct c2_confc_ctx *ctx);
  *
  * @pre  C2_IN(ctx->fc_mach, (S_TERMINAL, S_FAILURE))
  */
-struct c2_conf_obj *c2_confc_ctx_handout(struct c2_confc_ctx *ctx);
+struct c2_conf_obj *c2_confc_ctx_result(struct c2_confc_ctx *ctx);
 
 /** Returns the error status for the asynchronous configuration request. */
-static inline int32_t c2_confc_error(const struct c2_confc_ctx *ctx)
+static inline int32_t c2_confc_ctx_error(const struct c2_confc_ctx *ctx)
 {
 	return ctx->fc_mach.sm_rc;
 }
diff --git a/conf/obj.c b/conf/obj.c
index aceac34..47a38c8 100644
--- a/conf/obj.c
+++ b/conf/obj.c
@@ -337,7 +337,7 @@
  * keen to know every aspect of cluster configuration, confc cache may
  * eventually consume all available memory.  Confc will be unable to
  * allocate new objects, its state machines will end in S_FAILURE
- * state, and c2_confc_error() will return -ENOMEM.  The application
+ * state, and c2_confc_ctx_error() will return -ENOMEM.  The application
  * may opt to get rid of configuration cache by issuing c2_confc_fini().
  *
  * @todo Implement cache eviction.
-- 
1.8.3.2


From 3641f7feac8dcae512d36781b56c74c3dafa2256 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Wed, 29 Aug 2012 17:53:16 +0300
Subject: [PATCH 337/370] Add obj and obj_obs into build-system. Fix
 compilation errors.

---
 Makefile.am         |   1 +
 colibri/Makefile.am |   1 +
 conf/Makefile.am    |   9 +++
 conf/obj_ops.c      | 166 +++++++++++++++++++++++++++++++++-------------------
 conf/obj_ops.h      |   4 +-
 conf/reg.c          |   6 +-
 conf/reg.h          |   2 +-
 configure.ac        |   1 +
 fid/fid.h           |   4 +-
 9 files changed, 122 insertions(+), 72 deletions(-)
 create mode 100644 conf/Makefile.am

diff --git a/Makefile.am b/Makefile.am
index a7c4dad..55193c2 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -23,6 +23,7 @@ SUBDIRS_LIBS =                     \
                capa                \
                cfg                 \
                cob                 \
+               conf                \
                console             \
                db                  \
                desim               \
diff --git a/colibri/Makefile.am b/colibri/Makefile.am
index a85a9f3..86dfb38 100644
--- a/colibri/Makefile.am
+++ b/colibri/Makefile.am
@@ -22,6 +22,7 @@ libcolibri_la_LIBADD      = @AIO_LIBS@ @PTHREAD_LIBS@ @DB_LIBS@ @GALOIS_LIBS@ @Y
 			    $(top_builddir)/capa/libcolibri-capa.la \
                             $(top_builddir)/cfg/libcolibri-cfg.la \
                             $(top_builddir)/cob/libcolibri-cob.la \
+                            $(top_builddir)/conf/libcolibri-conf.la \
                             $(top_builddir)/console/libcolibri-console.la \
                             $(top_builddir)/db/libcolibri-db.la \
                             $(top_builddir)/desim/libcolibri-desim.la \
diff --git a/conf/Makefile.am b/conf/Makefile.am
new file mode 100644
index 0000000..2baa13e
--- /dev/null
+++ b/conf/Makefile.am
@@ -0,0 +1,9 @@
+include $(top_srcdir)/Makefile.xc
+
+noinst_LTLIBRARIES = libcolibri-conf.la
+libcolibri_conf_la_SOURCES = obj.h obj.c reg.h reg.c onwire.h obj_ops.h obj_ops.c
+
+INCLUDES	= -iquote . -iquote $(top_srcdir) -iquote \
+		$(top_srcdir)/include -iquote /usr/include
+
+clean-local: clean-xc
diff --git a/conf/obj_ops.c b/conf/obj_ops.c
index 228bcdc..32cddb2 100644
--- a/conf/obj_ops.c
+++ b/conf/obj_ops.c
@@ -22,7 +22,8 @@
 #  include "config.h"
 #endif
 #include "conf/obj_ops.h"
-#include "conf/confc.h"   /* c2_confc */
+#include "conf/reg.h"     /* c2_conf_reg_lookup */
+/* #include "conf/confc.h"   /\* c2_confc *\/ */
 #include "lib/cdefs.h"    /* ergo, C2_MAGIX_OFFSET, IS_IN_ARRAY */
 #include "lib/arith.h"    /* C2_CNT_INC, C2_CNT_DEC */
 #include "lib/misc.h"     /* C2_IN, memcpy, memcmp, strlen */
@@ -62,10 +63,10 @@ static const struct c2_bob_type generic_obj_bob = {
 	.bt_magix        = C2_CONF_OBJ_MAGIC,
 	.bt_check        = generic_obj_invariant
 };
-C2_BOB_DEFINE(static, &generic_obj_bob, c2_conf_obj);
+C2_BOB_DEFINE(/* static */, &generic_obj_bob, c2_conf_obj); /* XXX */
 
 C2_TL_DESCR_DEFINE(generic_objs, "c2_conf_obj-s", static, struct c2_conf_obj,
-		   co_linkage, co_gen_magic, C2_CONF_OBJ_MAGIC, DIR_MAGIC);
+		   co_dir_link, co_gen_magic, C2_CONF_OBJ_MAGIC, DIR_MAGIC);
 C2_TL_DEFINE(generic_objs, static, struct c2_conf_obj);
 
 #define _BOB_TYPE_DEFINE(abbrev, magic)                            \
@@ -121,10 +122,10 @@ static const struct obj_type {
 		.ot_bob        = &c2_conf_ ## abbrev ## _bob,                 \
 		.ot_ops        = {                                            \
 			.coo_lookup  = abbrev ## _lookup,                     \
-			.coo_readdir = XXX,                                   \
+			.coo_readdir = NULL, /*XXX*/                          \
 			.coo_fill    = abbrev ## _fill,                       \
 			.coo_match   = abbrev ## _match,                      \
-			.coo_fini    = XXX                                    \
+			.coo_fini    = NULL /*XXX*/			      \
 		}                                                             \
 	}
 
@@ -141,7 +142,7 @@ static const struct obj_type {
 
 static const struct obj_type *obj_type(enum c2_conf_objtype type)
 {
-	C2_PRE(IS_IN_ARRAY(type, concrete_types));
+	C2_PRE(IS_IN_ARRAY(type, _obj_types));
 	return &_obj_types[type];
 }
 
@@ -172,7 +173,7 @@ static bool generic_obj_invariant(const void *bob)
 	return buf_is_valid(&obj->co_id) &&
 		C2_IN(obj->co_status,
 		      (C2_CS_MISSING, C2_CS_LOADING, C2_CS_READY)) &&
-		obj->co_ops == &obj_type(type)->ot_ops &&
+		obj->co_ops == &obj_type(obj->co_type)->ot_ops &&
 		ergo(obj_is_stub(obj), obj->co_nrefs == 0);
 }
 
@@ -230,8 +231,12 @@ static bool profile_invariant(const void *bob)
 		child_is_ok(self_obj, MEMBER_PTR(self->cp_filesystem, cf_obj),
 			    C2_CO_FILESYSTEM) &&
 		/* Other checks. */
+#if 0 /* XXX */
 		ergo(self_obj->co_confc != NULL,
 		     self_obj->co_confc->cc_root == self_obj);
+#else
+		true;
+#endif
 }
 
 static bool filesystem_invariant(const void *bob)
@@ -387,8 +392,6 @@ c2_conf_obj_new(enum c2_conf_objtype type, const struct c2_buf *id)
 static int obj_find(struct c2_conf_reg *reg, enum c2_conf_objtype type,
 		    const struct c2_buf *id, struct c2_conf_obj **out)
 {
-	int rc;
-
 	*out = c2_conf_reg_lookup(reg, type, id);
 
 	if (*out == NULL) {
@@ -398,11 +401,7 @@ static int obj_find(struct c2_conf_reg *reg, enum c2_conf_objtype type,
 			return -ENOMEM;
 
 		/* Register the stub. */
-		rc = c2_conf_reg_add(reg, *out);
-		if (rc != 0) {
-			(*out)->co_ops->coo_fini(*out);
-			return rc;
-		}
+		c2_conf_reg_add(reg, *out);
 	}
 
 	return 0;
@@ -423,7 +422,7 @@ static int obj_find(struct c2_conf_reg *reg, enum c2_conf_objtype type,
  * XXX @todo UT transactional property of dir_new().
  */
 static int dir_new(const struct c2_buf *dir_id, enum c2_conf_objtype child_type,
-		   struct arr_buf *src, struct c2_conf_reg *reg,
+		   const struct arr_buf *src, struct c2_conf_reg *reg,
 		   struct c2_conf_dir **out)
 {
 	struct c2_conf_obj *dir;
@@ -438,7 +437,7 @@ static int dir_new(const struct c2_buf *dir_id, enum c2_conf_objtype child_type,
 		return -ENOMEM;
 	*out = C2_CONF_CAST(dir, c2_conf_dir); /* XXX C2_CONF_CAST()? */
 
-	for (i = 0; i < src->ab_count; ++i) {
+	for (rc = 0, i = 0; i < src->ab_count; ++i) {
 		rc = obj_find(reg, child_type, &src->ab_elems[i], &child);
 		if (rc != 0)
 			break;
@@ -448,14 +447,12 @@ static int dir_new(const struct c2_buf *dir_id, enum c2_conf_objtype child_type,
 		generic_objs_tlist_add(&(*out)->cd_items, child);
 	}
 
-	rc = rc ?: c2_conf_reg_add(reg, dir);
-
-	if (rc != 0) { /* Restore consistency. */
-		const struct obj_type *ot = obj_type(child_type);
-
-		c2_tlist_for(&generic_objs_tl, &dir->cd_items, child) {
-			/* Finalise directory element. */
-			c2_conf_reg_delete(reg, child_type, &src->ab_elems[j]);
+	if (rc == 0) {
+		c2_conf_reg_add(reg, dir);
+	} else { /* Restore consistency. */
+		c2_tlist_for(&generic_objs_tl, &(*out)->cd_items, child) {
+			/* Unregister (and finalise) directory element. */
+			c2_conf_reg_delete(reg, child);
 #if 0 /*XXX*/
 			/* XXX This should be done by c2_conf_reg_delete(). */
 			child->co_ops->coo_fini(child);
@@ -465,12 +462,7 @@ static int dir_new(const struct c2_buf *dir_id, enum c2_conf_objtype child_type,
 		} c2_tlist_endfor;
 
 		/* Finalise the directory itself. */
-		c2_conf_reg_delete(reg, C2_CO_DIR, &dir->co_id);
-#if 0 /*XXX*/
-		/* XXX This should be done by c2_conf_reg_delete(). */
-		dir->co_ops->coo_fini(dir);
-		c2_free(*out);
-#endif /*XXX*/
+		c2_conf_reg_delete(reg, dir);
 	}
 
 	return rc;
@@ -491,13 +483,13 @@ bool c2_conf_obj_match(const struct c2_conf_obj *cached,
 	C2_PRE(confx_object_is_valid(onwire));
 
 	if (cached->co_type != onwire->o_conf.u_type ||
-	    !c2_buf_eq(cached->co_id, onwire->o_id))
+	    !c2_buf_eq(&cached->co_id, &onwire->o_id))
 		return false;
 
 	if (cached->co_status != C2_CS_READY)
 		return true; /* a stub corresponds to the on-wire object */
 
-	return obj_type(obj->co_type)->ot_ops.coo_match(cached, onwire);
+	return obj_type(cached->co_type)->ot_ops.coo_match(cached, onwire);
 }
 
 static bool profile_match(const struct c2_conf_obj *cached,
@@ -526,7 +518,8 @@ static bool service_match(const struct c2_conf_obj *cached,
 			  const struct confx_object *onwire)
 {
 	const struct confx_service   *objx = &onwire->o_conf.u.u_service;
-	const struct c2_conf_service *obj = C2_CONF_CAST(cached, &onwire->o_id);
+	const struct c2_conf_service *obj = C2_CONF_CAST(cached,
+							 c2_conf_service);
 	const struct c2_conf_node    *child = obj->cs_node;
 
 	return obj->cs_type == objx->xs_type &&
@@ -610,8 +603,12 @@ static bool arrays_eq(const char **cached, const struct arr_buf *onwire)
 
 static bool confc_is_nil_or_locked(const struct c2_conf_obj *obj)
 {
+#if 0 /* XXX */
 	return obj->co_confc == NULL ||
 		c2_mutex_is_locked(&obj->co_confc->cc_lock);
+#else
+	return true;
+#endif
 }
 
 void c2_conf_obj_get(struct c2_conf_obj *obj)
@@ -638,15 +635,17 @@ void c2_conf_obj_put(struct c2_conf_obj *obj)
  * Stubs filling
  * ------------------------------------------------------------------ */
 
-static int endpoints_populate(char ***dest, const struct arr_buf *src);
+static int endpoints_populate(const char ***dest, const struct arr_buf *src);
+static char *buf_strdup(const struct c2_buf *buf);
 
 int c2_conf_obj_fill(struct c2_conf_obj *dest, const struct confx_object *src,
 		     struct c2_conf_reg *reg)
 {
-	const struct obj_type *ot = obj_type(obj->co_type);
+	int                    rc;
+	const struct obj_type *ot = obj_type(dest->co_type);
 
 	C2_PRE(c2_conf_obj_invariant(dest));
-	C2_PRE(confc_is_nil_or_locked(obj));
+	C2_PRE(confc_is_nil_or_locked(dest));
 	C2_PRE(obj_is_stub(dest) && dest->co_nrefs == 0);
 	C2_PRE(dest->co_type == src->o_conf.u_type);
 	C2_PRE(c2_buf_eq(&dest->co_id, &src->o_id));
@@ -657,11 +656,47 @@ int c2_conf_obj_fill(struct c2_conf_obj *dest, const struct confx_object *src,
 		return rc;
 	dest->co_status = C2_CS_READY;
 
-	C2_POST(c2_conf_obj_invariant(obj));
-	C2_POST(confc_is_nil_or_locked(obj));
+	C2_POST(c2_conf_obj_invariant(dest));
+	C2_POST(confc_is_nil_or_locked(dest));
 	return 0;
 }
 
+#define DUMMY_FILL(abbrev)					\
+static int abbrev ## _fill(struct c2_conf_obj *__dest,			\
+		    const struct confx_object *__src,		\
+		    struct c2_conf_reg *reg)			\
+{								\
+	C2_IMPOSSIBLE("c2_conf_dir is never filled from confx_object"); \
+	return -1; \
+}
+
+DUMMY_FILL(dir);
+DUMMY_FILL(sdev);
+DUMMY_FILL(partition);
+
+#define DUMMY_LOOKUP(abbrev) \
+static int \
+abbrev ## _lookup(struct c2_conf_obj *parent, const struct c2_buf *name, \
+		  struct c2_conf_obj **out) \
+{ \
+	C2_IMPOSSIBLE("XXX"); \
+	return -1; \
+}
+
+DUMMY_LOOKUP(filesystem);
+DUMMY_LOOKUP(service);
+DUMMY_LOOKUP(node);
+DUMMY_LOOKUP(nic);
+DUMMY_LOOKUP(sdev);
+DUMMY_LOOKUP(partition);
+
+static bool dir_match(const struct c2_conf_obj *cached,
+		      const struct confx_object *onwire)
+{
+	C2_IMPOSSIBLE("XXX");
+	return false;
+}
+
 static int profile_fill(struct c2_conf_obj *__dest,
 			const struct confx_object *__src,
 			struct c2_conf_reg *reg)
@@ -693,8 +728,13 @@ static int filesystem_fill(struct c2_conf_obj *__dest,
 	/* XXX C2_CONF_CAST()? */
 	dest = C2_CONF_CAST(__dest, c2_conf_filesystem);
 
+#if 0 /*XXX*/
 	dest->cf_rootfid = src->xf_rootfid;
-	dest->cf_params = XXX;
+#else
+	dest->cf_rootfid.f_container = src->xf_rootfid.f_container;
+	dest->cf_rootfid.f_key = src->xf_rootfid.f_key;
+#endif
+	/* dest->cf_params = XXX; */
 
 	return dir_new(&__src->o_id, C2_CO_SERVICE, &src->xf_services, reg,
 		       &dest->cf_services);
@@ -732,11 +772,11 @@ static int node_fill(struct c2_conf_obj *__dest,
 
 	dest = C2_CONF_CAST(__dest, c2_conf_node); /* XXX */
 
-	dest->cn_memsize    = xn_memsize;
-	dest->cn_nr_cpu     = xn_nr_cpu;
-	dest->cn_last_state = xn_last_state;
-	dest->cn_flags      = xn_flags;
-	dest->cn_pool_id    = xn_pool_id;
+	dest->cn_memsize    = src->xn_memsize;
+	dest->cn_nr_cpu     = src->xn_nr_cpu;
+	dest->cn_last_state = src->xn_last_state;
+	dest->cn_flags      = src->xn_flags;
+	dest->cn_pool_id    = src->xn_pool_id;
 
 	/* Mangle directories' identifiers to make them unique. */
 	{
@@ -745,12 +785,12 @@ static int node_fill(struct c2_conf_obj *__dest,
 		rc = c2_buf_copy(&nic_id, &__src->o_id);
 		if (rc != 0)
 			return rc;
-		nic_id.b_addr[0] = 'N';
+		*(char *)nic_id.b_addr = 'N';
 
 		rc = c2_buf_copy(&sdev_id, &__src->o_id);
 		if (rc != 0)
 			return rc;
-		sdev_id.b_addr[0] = 'S';
+		*(char *)sdev_id.b_addr = 'S';
 	}
 
 	return dir_new(&nic_id, C2_CO_NIC, &src->xn_nics, reg,
@@ -775,12 +815,13 @@ static int nic_fill(struct c2_conf_obj *__dest,
 	dest->ni_filename = buf_strdup(&src->xi_filename);
 	if (dest->ni_filename == NULL)
 		return -ENOMEM;
+
+	return 0;
 }
 
-static int endpoints_populate(char ***dest, const struct arr_buf *src)
+static int endpoints_populate(const char ***dest, const struct arr_buf *src)
 {
-	uint32_t              i;
-	const struct arr_buf *ep;
+	uint32_t i;
 
 	C2_PRE(src->ab_count > 0 && src->ab_elems != NULL);
 
@@ -798,7 +839,7 @@ static int endpoints_populate(char ***dest, const struct arr_buf *src)
 	return 0;
 fail:
 	for (; i != 0; --i)
-		c2_free((*dest)[i]);
+		c2_free((void *)(*dest)[i]);
 	c2_free(*dest);
 	return -ENOMEM;
 }
@@ -810,14 +851,14 @@ fail:
 static int dir_lookup(struct c2_conf_obj *parent, const struct c2_buf *name,
 		      struct c2_conf_obj **out)
 {
-	struct c2_conf_obj *child;
-	struct c2_conf_dir *dir = C2_CONF_CAST(parent, c2_conf_dir);
+	/* struct c2_conf_obj *child; */
+	/* struct c2_conf_dir *dir = C2_CONF_CAST(parent, c2_conf_dir); */
 
 	C2_PRE(parent->co_status == C2_CS_READY);
 
 	/*
 	 * for_each(child in dir->cd_items) {
-	 *     if (c2_buf_eq(child->co_id, name)) {
+	 *     if (c2_buf_eq(&child->co_id, name)) {
 	 *         *out = child;
 	 *         return 0;
 	 *     }
@@ -825,7 +866,7 @@ static int dir_lookup(struct c2_conf_obj *parent, const struct c2_buf *name,
 	 *
 	 * return -ENOENT;
 	 */
-	XXX;
+	return -ENOENT; /*XXX*/
 }
 
 static int
@@ -863,12 +904,12 @@ profile_lookup(struct c2_conf_obj *parent, const struct c2_buf *name,
  * ->coo_readdir()
  * ------------------------------------------------------------------ */
 
-static bool readdir_pre(const struct c2_conf_obj *dir,
-			const struct c2_conf_obj *entry);
-static bool readdir_post(int retval, const struct c2_conf_obj *dir,
-			 const struct c2_conf_obj *entry);
+/* static bool readdir_pre(const struct c2_conf_obj *dir, */
+/* 			const struct c2_conf_obj *entry); */
+/* static bool readdir_post(int retval, const struct c2_conf_obj *dir, */
+/* 			 const struct c2_conf_obj *entry); */
 
-static int dir_readdir(struct c2_conf_obj *dir, struct c2_conf_obj **pptr)
+/* static XXX */ int dir_readdir(struct c2_conf_obj *dir, struct c2_conf_obj **pptr)
 {
 	/*
 	 * struct c2_conf_obj *next;
@@ -898,7 +939,8 @@ static int dir_readdir(struct c2_conf_obj *dir, struct c2_conf_obj **pptr)
 	 * C2_POST(readdir_post(ret, dir, *pptr));
 	 * return ret;
 	 */
-	XXX;
+
+	return C2_CONF_DIRMISS; /*XXX*/
 }
 
 /* XXX
@@ -962,6 +1004,7 @@ belongs(const struct c2_conf_obj *entry, const struct c2_conf_obj *dir)
 	return d->cd_item_type == entry->co_type && entry->co_parent == dir;
 }
 
+#if 0 /*XXX*/
 /**
  * Precondition for c2_conf_obj_ops::coo_readdir().
  *
@@ -978,6 +1021,7 @@ readdir_pre(const struct c2_conf_obj *dir, const struct c2_conf_obj *entry)
 		dir->co_type == C2_CO_DIR && dir->co_nrefs > 0 &&
 		ergo(entry != NULL, belongs(entry, dir) && entry->co_nrefs > 0);
 }
+#endif
 
 /**
  * Postcondition for c2_conf_obj_ops::coo_readdir().
@@ -989,7 +1033,7 @@ readdir_pre(const struct c2_conf_obj *dir, const struct c2_conf_obj *entry)
  *
  * @see c2_conf_obj_ops::coo_readdir()
  */
-static bool readdir_post(int retval, const struct c2_conf_obj *dir,
+/* static XXX */ bool readdir_post(int retval, const struct c2_conf_obj *dir,
 			 const struct c2_conf_obj *entry)
 {
 	return c2_conf_obj_invariant(dir) && c2_conf_obj_invariant(entry) &&
diff --git a/conf/obj_ops.h b/conf/obj_ops.h
index 0508611..858ea44 100644
--- a/conf/obj_ops.h
+++ b/conf/obj_ops.h
@@ -22,6 +22,7 @@
 #define __COLIBRI_CONF_OBJOPS_H__
 
 #include "conf/obj.h"
+#include "conf/onwire.h"
 
 /**
  * @page conf-fspec-objops Configuration Object Operations
@@ -57,9 +58,6 @@
  * @{
  */
 
-/** Magic value of a generic configuration object (c2_conf_obj). */
-enum { C2_CONF_OBJ_MAGIC = 0x335e1f1e55ce1177 /* selfless cell */ };
-
 /* export */
 C2_TL_DESCR_DECLARE(c2_conf_reg, extern);
 C2_TL_DECLARE(c2_conf_reg, , struct c2_conf_obj);
diff --git a/conf/reg.c b/conf/reg.c
index b1ce805..d529a64 100644
--- a/conf/reg.c
+++ b/conf/reg.c
@@ -23,8 +23,6 @@
 #endif
 #include "conf/reg.h"
 #include "conf/obj_ops.h" /* C2_CONF_OBJ_MAGIC */
-#include "conf/onwire.h"  /* c2_conf_buf */
-#include "conf/buf.h"     /* c2_conf_buf_eq */
 #include "lib/memory.h"   /* C2_ALLOC_PTR */
 #include "lib/errno.h"    /* ENOMEM */
 
@@ -59,12 +57,12 @@ void c2_conf_reg_add(struct c2_conf_reg *reg, struct c2_conf_obj *obj)
 
 struct c2_conf_obj *c2_conf_reg_lookup(const struct c2_conf_reg *reg,
 				       enum c2_conf_objtype type,
-				       const struct c2_conf_buf *id)
+				       const struct c2_buf *id)
 {
 	struct c2_conf_obj *obj;
 
 	c2_tlist_for(&c2_conf_reg_tl, &reg->r_objs, obj) {
-		if (obj->co_type == type && c2_conf_buf_eq(&obj->co_id, id))
+		if (obj->co_type == type && c2_buf_eq(&obj->co_id, id))
 			break;
 	} c2_tlist_endfor;
 
diff --git a/conf/reg.h b/conf/reg.h
index ac965bf..19fd314 100644
--- a/conf/reg.h
+++ b/conf/reg.h
@@ -119,7 +119,7 @@ void c2_conf_reg_delete(const struct c2_conf_reg *reg, struct c2_conf_obj *obj);
  */
 struct c2_conf_obj *c2_conf_reg_lookup(const struct c2_conf_reg *reg,
 				       enum c2_conf_objtype type,
-				       const struct c2_conf_buf *id);
+				       const struct c2_buf *id);
 
 /** @} conf_dfspec_reg */
 #endif /* __COLIBRI_CONF_REG_H__ */
diff --git a/configure.ac b/configure.ac
index 5dd56eb..0ed0d0c 100644
--- a/configure.ac
+++ b/configure.ac
@@ -671,6 +671,7 @@ AC_CONFIG_FILES([
                  cob/ut/Makefile
                  colibri/Makefile
                  colibri/ut/Makefile
+                 conf/Makefile
                  conf/ut/Makefile
                  console/Makefile
                  console/bin/Makefile
diff --git a/fid/fid.h b/fid/fid.h
index 9e94320..33b5825 100644
--- a/fid/fid.h
+++ b/fid/fid.h
@@ -29,12 +29,10 @@
    @{
  */
 
-/* export */
-struct fid;
-
 /* import */
 #include "lib/types.h"
 
+/* @todo: add xcode */
 struct c2_fid {
 	uint64_t f_container;
 	uint64_t f_key;
-- 
1.8.3.2


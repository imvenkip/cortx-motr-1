From 0b17b0f85d67123bb33cf7755c83f940a79e1819 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Sun, 2 Sep 2012 00:37:35 +0300
Subject: [PATCH 355/370] preload.c: Fix minor bugs, replace assertions with
 conditionals.

---
 conf/preload.c | 38 +++++++++++++++++++++++++-------------
 1 file changed, 25 insertions(+), 13 deletions(-)

diff --git a/conf/preload.c b/conf/preload.c
index 2be2323..d64950b 100644
--- a/conf/preload.c
+++ b/conf/preload.c
@@ -195,13 +195,13 @@ static int unit_trim(struct hunk *p)
 
 	while (isspace(*p->begin)) {
 		p->begin++;
-		if (p->begin == p->end)
+		if (p->begin > p->end)
 			return -ENOENT;
 	}
 
 	while (isspace(*p->end)) {
 		p->end--;
-		if (p->begin == p->end)
+		if (p->begin > p->end)
 			return -ENOENT;
 	}
 
@@ -276,12 +276,15 @@ static int unit_parse(struct hunk *unit, char ss)
 			continue;
 
 		if (*p == ss) {
+			if (p == unit->begin)   /* unit starts from ',': e.g. */
+				return -EINVAL; /* ',42', treated as an error */
+
 			unit->end = --p;
 			break;
 		}
 	}
 
-	return unit_trim(unit);
+	return unit_trim(unit); /* @todo: if quoted, then what to do? */
 }
 
 static int unit_next(struct hunk *unit, const struct hunk *buffer, char ss)
@@ -303,8 +306,7 @@ static int unit_next(struct hunk *unit, const struct hunk *buffer, char ss)
 	C2_ASSERT(*unit->begin == ss);
 	unit->begin++;
 
-	C2_POST(hunk_invariant(unit));
-	return 0;
+	return hunk_invariant(unit) ? 0 : -EINVAL;
 }
 
 
@@ -687,7 +689,7 @@ static int unused_parse(const struct hunk *key, const struct hunk *val,
 	return -1;
 }
 
-static const struct xstr_rec {
+static const struct x_parsers {
 	const char *r_name;
 	int (*r_parse)(const struct hunk *key, const struct hunk *val,
 		       struct confx_object *out);
@@ -710,7 +712,8 @@ static size_t str_to_x(const struct hunk *key)
 		if (hunk_str_eq(key, xstr[i].r_name))
 			return i;
 
-	C2_IMPOSSIBLE("Wrong configuration string type given!");
+	/* Wrong configuration string type given! */
+	return C2_CO_INVALID_TYPE;
 }
 
 static int x_parser_call(const struct hunk *str, struct confx_object *out)
@@ -749,8 +752,11 @@ static int x_parser_call(const struct hunk *str, struct confx_object *out)
 		return 0;
 	}
 
-	C2_POST(out->o_conf.u_type != C2_CO_INVALID_TYPE);
-	return unit_quoted_unquote(&val) ?:
+	rc = unit_quoted_unquote(&val);
+	if (rc != 0)
+		return rc;
+
+	return (out->o_conf.u_type == C2_CO_INVALID_TYPE) ? -EINVAL :
 		xstr[out->o_conf.u_type].r_parse(&key, &val, out);
 }
 
@@ -766,27 +772,33 @@ int c2_conf_parse(const char *src, struct confx_object *dest, size_t n)
 	struct hunk str = HUNK_INITS(src);
 	struct hunk blk = HUNK_EMPTY;
 
-	for (; block_parse(&blk, &str) == 0; ) {
+	while ((rc = block_parse(&blk, &str)) == 0) {
 		struct hunk rec = HUNK_EMPTY;
 
-		for (; record_parse(&rec, &blk) == 0; ) {
+		while ((rc = record_parse(&rec, &blk)) == 0) {
 			struct hunk ent = HUNK_EMPTY;
 
 			dest[conf_index].o_conf.u_type = C2_CO_INVALID_TYPE;
 
-			for (; entry_parse(&ent, &rec) == 0; ) {
+			while ((rc = entry_parse(&ent, &rec)) == 0) {
 				rc = x_parser_call(&ent, &dest[conf_index]);
 				if (rc != 0)
 					return rc;
 			}
 
+			if (rc != -ENOENT)
+				return rc;
+
 			++conf_index;
 			if (conf_index >= n)
 				return -ENOMEM;
 		}
+
+		if (rc != -ENOENT)
+			return rc;
 	}
 
-	return conf_index;
+	return (rc != -ENOENT) ? rc : conf_index;
 }
 
 void c2_confx_fini(struct confx_object *dest, size_t n)
-- 
1.8.3.2


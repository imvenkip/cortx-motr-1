From f1c93d5198a959fa802fa8df7a0f4ac556a281bb Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 17 Aug 2012 21:57:27 +0300
Subject: [PATCH 294/370] conf: fix two bugs in c2_conf_reg_fini()

c2_conf_reg_fini() used to free generic (embedded) configuration object.
This would lead to a segmentation fault, because a concrete (ambient)
object was allocated.  And objptr was never freed.

+ conf/obj.h: Introduce c2_conf_obj_ops::coo_fini().

LogD #758
---
 conf/obj.h    | 10 ++++++++++
 conf/reg.c    | 10 ++++++----
 conf/reg.h    |  5 ++++-
 conf/ut/reg.c | 61 ++++++++++++++++++++++++++++++++++++-----------------------
 4 files changed, 57 insertions(+), 29 deletions(-)

diff --git a/conf/obj.h b/conf/obj.h
index 0528f7b..99f6d54 100644
--- a/conf/obj.h
+++ b/conf/obj.h
@@ -489,6 +489,16 @@ struct c2_conf_obj_ops {
 	 * @see c2_conf__obj_invariant()
 	 */
 	bool (*coo_invariant)(const struct c2_conf_obj *obj);
+	/**
+	 * Destructor of configuration object.
+	 *
+	 * The intended usage of ->coo_fini() is to free the allocated
+	 * concrete object (i.e., the ambient object that `obj' is
+	 * embedded in).
+	 *
+	 * NULL is a noop.
+	 */
+	void (*coo_fini)(struct c2_conf_obj *obj);
 };
 
 /**
diff --git a/conf/reg.c b/conf/reg.c
index d5f7460..40679b8 100644
--- a/conf/reg.c
+++ b/conf/reg.c
@@ -68,17 +68,19 @@ void c2_conf_reg_init(struct c2_conf_reg *reg)
 
 void c2_conf_reg_fini(struct c2_conf_reg *reg)
 {
-	struct objptr      *p;
-	struct c2_conf_obj *obj;
+	struct objptr *p;
 
 	c2_tlist_for(&reg_tl, &reg->r_ptrs, p) {
-		obj = p->p_obj;
+		struct c2_conf_obj *obj = p->p_obj;
 		C2_ASSERT(obj->co_nrefs == 0 &&
 			  obj->co_status != C2_CS_LOADING);
-		c2_free(obj);
+
+		if (obj->co_ops->coo_fini != NULL)
+			obj->co_ops->coo_fini(obj);
 
 		reg_tlist_del(p);
 		reg_tlink_fini(p);
+		c2_free(p);
 	} c2_tlist_endfor;
 
 	reg_tlist_fini(&reg->r_ptrs);
diff --git a/conf/reg.h b/conf/reg.h
index c400154..e1a4e77 100644
--- a/conf/reg.h
+++ b/conf/reg.h
@@ -73,7 +73,10 @@ struct c2_conf_reg {
 void c2_conf_reg_init(struct c2_conf_reg *reg);
 
 /**
- * Finalises a registry, freeing all the registered configuration objects.
+ * Finalises a registry.
+ *
+ * c2_conf_reg_fini() does c2_conf_obj_ops::coo_fini() of every
+ * registered configuration object.
  *
  * @pre  None of the registered objects is being used by the application
  *       (->co_nrefs > 0) or is C2_CS_LOADING.
diff --git a/conf/ut/reg.c b/conf/ut/reg.c
index e17f60e..50ae956 100644
--- a/conf/ut/reg.c
+++ b/conf/ut/reg.c
@@ -25,41 +25,54 @@
 #include "lib/ut.h"
 
 #if 0 /*XXX*/
+static size_t g_nr_finalised = 0;
+
+static void obj_fini(struct c2_conf_obj *obj __attribute__((unused)))
+{
+	++g_nr_finalised;
+}
+
 static void test_add_lookup(void)
 {
-	struct c2_conf_reg       reg;
-	struct c2_conf_obj      *p;
-	int                      rc;
-	const struct c2_conf_obj a = {
-		.co_type = C2_CO_DIR,
-		.co_id   = C2_CONF_BUF_STR("dir") };
-	const struct c2_conf_obj b = {
-		.co_type = C2_CO_NIC,
-		.co_id   = C2_CONF_BUF_INIT(4, "ni\0c") /* not a C string */
+	struct c2_conf_reg           reg;
+	size_t                       i;
+	const struct c2_conf_obj_ops ops = { .coo_fini = obj_fini };
+	struct c2_conf_obj           samples[] = {
+		{
+			.co_type = C2_CO_DIR,
+			.co_id   = C2_CONF_BUF_INITS("dir"),
+			.co_ops  = &ops
+		},
+		{
+			.co_type = C2_CO_NIC,
+			.co_id   = C2_CONF_BUF_INIT(4, "ni\0c"),
+			.co_ops  = &ops
+		}
 	};
 
-	rc = c2_conf_reg_init(&reg);
-	C2_UT_ASSERT(rc == 0);
+	c2_conf_reg_init(&reg);
 
-	p = c2_conf_reg_lookup(&reg, a.co_type, &a.co_id);
-	C2_UT_ASSERT(p == NULL);
+	for (i = 0; i < sizeof samples; ++i) {
+		struct c2_conf_obj *p;
+		int                 rc;
 
-	rc = c2_conf_reg_add(&reg, &a);
-	C2_UT_ASSERT(rc == 0);
-	p = c2_conf_reg_lookup(&reg, a.co_type, &a.co_id);
-	C2_UT_ASSERT(p == &a);
+		p = c2_conf_reg_lookup(&reg, samples[i].co_type,
+				       &samples[i].co_id);
+		C2_UT_ASSERT(p == NULL);
 
-	p = c2_conf_reg_lookup(&reg, b.co_type, &b.co_id);
-	C2_UT_ASSERT(p == NULL);
+		rc = c2_conf_reg_add(&reg, &samples[i]);
+		C2_UT_ASSERT(rc == 0);
 
-	rc = c2_conf_reg_add(&reg, &b);
-	C2_UT_ASSERT(rc == 0);
-	p = c2_conf_reg_lookup(&reg, b.co_type, &b.co_id);
-	C2_UT_ASSERT(p == &b);
+		p = c2_conf_reg_lookup(&reg, samples[i].co_type,
+				       &samples[i].co_id);
+		C2_UT_ASSERT(p == &samples[i]);
+	}
 
+	C2_UT_ASSERT(g_nr_finalised == 0);
 	c2_conf_reg_fini(&reg);
+	C2_UT_ASSERT(g_nr_finalised == sizeof samples);
 }
-#endif /* XXX */
+#endif /*XXX*/
 
 const struct c2_test_suite conf_reg_ut = {
 	.ts_name  = "conf-reg-ut",
-- 
1.8.3.2


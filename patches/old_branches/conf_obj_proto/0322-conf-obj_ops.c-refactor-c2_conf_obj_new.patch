From bcb1c8ca512064f3e4ba566cd09f84ee93a182ed Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Tue, 21 Aug 2012 18:59:48 +0300
Subject: [PATCH 322/370] conf/obj_ops.c: refactor c2_conf_obj_new()

- Get rid of noisy generic_obj_init().
- Rename _generic_obj_check() to generic_obj_invariant() for uniformity
  with other invariants.
---
 conf/obj_ops.c | 67 ++++++++++++++++++++--------------------------------------
 conf/obj_ops.h |  2 +-
 2 files changed, 24 insertions(+), 45 deletions(-)

diff --git a/conf/obj_ops.c b/conf/obj_ops.c
index d290d4d..3308df4 100644
--- a/conf/obj_ops.c
+++ b/conf/obj_ops.c
@@ -43,7 +43,7 @@
  * bobs
  * ------------------------------------------------------------------ */
 
-static bool _generic_obj_check(const void *bob);
+static bool generic_obj_invariant(const void *bob);
 static bool buf_is_valid(const struct c2_conf_buf *buf);
 
 enum {
@@ -63,7 +63,7 @@ static const struct c2_bob_type generic_obj_bob = {
 	.bt_magix_offset = C2_MAGIX_OFFSET(struct c2_conf_obj,
 					   co_magic.generic),
 	.bt_magix        = CONF_GENERIC_MAGIC,
-	.bt_check        = _generic_obj_check
+	.bt_check        = generic_obj_invariant
 };
 C2_BOB_DEFINE(static, &generic_obj_bob, c2_conf_obj);
 
@@ -137,17 +137,6 @@ static const struct obj_type *obj_type(enum c2_conf_objtype type)
 	C2_PRE(IS_IN_ARRAY(type, concrete_types));
 	return &_obj_types[type];
 }
-
-static bool _generic_obj_check(const void *bob)
-{
-	const struct c2_conf_obj *obj = bob;
-
-	return buf_is_valid(&obj->co_id) &&
-		C2_IN(obj->co_status,
-		      (C2_CS_MISSING, C2_CS_LOADING, C2_CS_READY)) &&
-		obj->co_ops == &obj_type(type)->ot_ops;
-}
-C2_BASSERT(generic_obj_bob.bt_check == _generic_obj_check);
 
 /* ------------------------------------------------------------------
  * Invariants
@@ -169,6 +158,16 @@ generic_obj_check_as(const struct c2_conf_obj *obj, enum c2_conf_objtype type)
 	return obj->co_type == type && c2_conf_obj_bob_check(obj);
 }
 
+static bool generic_obj_invariant(const void *bob)
+{
+	const struct c2_conf_obj *obj = bob;
+
+	return buf_is_valid(&obj->co_id) &&
+		C2_IN(obj->co_status,
+		      (C2_CS_MISSING, C2_CS_LOADING, C2_CS_READY)) &&
+		obj->co_ops == &obj_type(type)->ot_ops;
+}
+
 static bool dir_invariant(const void *bob)
 {
 	const struct c2_conf_dir *self = bob;
@@ -343,33 +342,6 @@ static bool partition_invariant(const void *bob)
  * c2_conf_{new,match,fill}()
  * ------------------------------------------------------------------ */
 
-static int generic_obj_init(struct c2_conf_obj *obj, enum c2_conf_objtype type,
-			    const struct c2_conf_buf *id)
-{
-	int                    rc;
-	const struct obj_type *ot = obj_type(type);
-
-	C2_PRE(buf_is_valid(id));
-
-	rc = c2_conf_buf_copy(&obj->co_id, id);
-	if (rc != 0)
-		return rc;
-
-	obj->co_type = type;
-	obj->co_status = C2_CS_MISSING;
-	obj->co_ops = &ot->ot_ops;
-	C2_ASSERT(obj->co_parent == NULL);
-	C2_ASSERT(obj->co_nrefs == 0);
-	c2_chan_init(&obj->co_chan);
-	/* TODO Assert that obj->co_linkage is zeroed. */
-	C2_ASSERT(obj->co_confc == NULL);
-	c2_conf_obj_bob_init(obj);
-	obj->co_magic.concrete = ot->ot_bob->bt_magix;
-
-	C2_POST(generic_obj_check_as(obj, type));
-	return 0;
-}
-
 struct c2_conf_obj *
 c2_conf_obj_new(enum c2_conf_objtype type, const struct c2_conf_buf *id)
 {
@@ -383,14 +355,21 @@ c2_conf_obj_new(enum c2_conf_objtype type, const struct c2_conf_buf *id)
 		return NULL;
 	obj = amb + ot->ot_obj_offset;
 
-	rc = generic_obj_init(obj, type, id);
+	rc = c2_conf_buf_copy(&obj->co_id, id);
 	if (rc != 0) {
-		c2_bob_fini(ot->ot_bob, amb);
 		c2_free(amb);
 		return NULL;
 	}
-	/* Generic fields have been validated by generic_obj_init().
-	 * Concrete fields cannot be validated, because connections to
+
+	c2_conf_obj_bob_init(obj);
+	c2_bob_init(ot->ot_bob, amb);
+	obj->co_type = type;
+	obj->co_status = C2_CS_MISSING;
+	obj->co_ops = &ot->ot_ops;
+	c2_chan_init(&obj->co_chan);
+
+	C2_POST(c2_conf_obj_bob_check(obj));
+	/* Concrete fields cannot be validated, because connections to
 	 * other objects of the DAG have not been established yet. */
 	return obj;
 }
diff --git a/conf/obj_ops.h b/conf/obj_ops.h
index fb8ef38..1450f03 100644
--- a/conf/obj_ops.h
+++ b/conf/obj_ops.h
@@ -140,7 +140,7 @@ void c2_conf_obj_put(struct c2_conf_obj *obj);
 /**
  * Allocates and initialises configuration object of given type.
  *
- * Copies `id' into ->co_id of the resulted object.
+ * Copies `id' into ->co_id of the resulting object.
  */
 struct c2_conf_obj *c2_conf_obj_new(enum c2_conf_objtype type,
 				    const struct c2_conf_buf *id);
-- 
1.8.3.2


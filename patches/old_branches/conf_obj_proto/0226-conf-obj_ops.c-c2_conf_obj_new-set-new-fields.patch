From 2c85354f328e13dab431f00c4be9ff60289f3c79 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Thu, 5 Jul 2012 17:08:42 +0300
Subject: [PATCH 226/370] conf/obj_ops.c (c2_conf_obj_new): set new fields

- c2_alloc() allocates raw bytes, not a c2_conf_obj. Use concrete_obj_alloc()
  instead.
- Get rid of obj_size().

It is better not to rely on `struct c2_conf_obj *' being the first field
of a concrete configuration object.
---
 conf/obj.h     |  4 +---
 conf/obj_ops.c | 42 ++++++++++++------------------------------
 conf/obj_ops.h |  3 +--
 3 files changed, 14 insertions(+), 35 deletions(-)

diff --git a/conf/obj.h b/conf/obj.h
index 61a06f0..c423995 100644
--- a/conf/obj.h
+++ b/conf/obj.h
@@ -185,9 +185,7 @@ struct c2_conf_obj {
 	enum c2_conf_objtype          co_type;
 	/**
 	 * Magic value.
-	 *
-	 * Different magic values are used for different concrete
-	 * object types.
+	 * Different concrete object types have different magic values.
 	 */
 	uint64_t                      co_magix;
 	/**
diff --git a/conf/obj_ops.c b/conf/obj_ops.c
index 5379b10..f3834bb 100644
--- a/conf/obj_ops.c
+++ b/conf/obj_ops.c
@@ -55,50 +55,32 @@ static const struct {
 	[C2_CO_PARTITION]  = { .oo_equal = XXX }
 };
 
-static size_t obj_size(enum c2_conf_objtype t)
+/** Allocate concrete object and return the address of its ->*_obj field. */
+static struct c2_conf_obj *concrete_obj_alloc(enum c2_conf_objtype type)
 {
-	switch (t) {
-	case C2_CO_DIR:
-		return sizeof c2_conf_dir;
-	case C2_CO_PROFILE:
-		return sizeof c2_conf_profile;
-	case C2_CO_FILESYSTEM:
-		return sizeof c2_conf_filesystem;
-	case C2_CO_SERVICE:
-		return sizeof c2_conf_service;
-	case C2_CO_NODE:
-		return sizeof c2_conf_node;
-	case C2_CO_NIC:
-		return sizeof c2_conf_nic;
-	case C2_CO_SDEV:
-		return sizeof c2_conf_sdev;
-	case C2_CO_PARTITION:
-		return sizeof c2_conf_partition;
-	default:
-		C2_IMPOSSIBLE("Invalid objtype");
-	}
-	return 0; /* never reached */
+	XXX;
 }
 
 struct c2_conf_obj *
 c2_conf_obj_new(enum c2_conf_objtype type, const struct c2_conf_buf *id)
 {
 	int rc;
-	struct c2_conf_obj *ret = c2_alloc(obj_size(type));
+	struct c2_conf_obj *ret = concrete_obj_alloc(type);
 
 	if (ret == NULL)
 		return NULL;
 
-	ret->co_type = type;
-	ret->co_status = C2_CS_MISSING;
-	C2_ASSERT(ret->co_nrefs == 0);
-	c2_chan_init(&ret->co_chan);
-
 	rc = c2_conf_buf_copy(&ret->co_id, id);
 	if (rc != 0) {
 		c2_free(ret);
 		return NULL;
 	}
+
+	ret->co_type = type;
+	ret->co_magix = XXX;
+	ret->co_status = C2_CS_MISSING;
+	ret->co_ops = XXX;
+	c2_chan_init(&ret->co_chan);
 	return ret;
 }
 
@@ -125,9 +107,9 @@ int c2_conf_obj_fill(struct c2_conf_obj *dest, const struct confx_object *src,
 	 * Set fields of `dest', copying data from `src'.
 	 *
 	 * For "foreign key" fields (aka relations):
-	 *   - If the target object does not exist in cache, create a
+	 *   - if target object does not exist in the cache, create a
 	 *     stub for it;
-	 *   - Assign dest's relation: make it point to the target object.
+	 *   - set relation fields of dest and target.
 	 *
 	 * dest->co_status = C2_CS_READY;
 	 * C2_POST(...);
diff --git a/conf/obj_ops.h b/conf/obj_ops.h
index b7dd07b..aedcf02 100644
--- a/conf/obj_ops.h
+++ b/conf/obj_ops.h
@@ -55,7 +55,7 @@ bool c2_conf_obj_match(const struct c2_conf_obj *cached,
  *
  * @param dest  Cached configuration object (stub) to be filled with
  *              configuration data.
- * @param src   On-wire object to read the data from.
+ * @param src   On-wire object --- the source of configuration data.
  * @param reg   Registry of cached configuration objects.
  *
  * @pre   c2_mutex_is_locked(&dest->co_confc->cc_lock)
@@ -64,7 +64,6 @@ bool c2_conf_obj_match(const struct c2_conf_obj *cached,
  * @pre   dest->co_type == src->o_conf.u_type
  * @pre   c2_conf_buf_eq(dest->co_id, src->o_id)
  *
- * @post  dest->co_status == C2_CS_READY
  * @post  c2_mutex_is_locked(&dest->co_confc->cc_lock)
  */
 int c2_conf_obj_fill(struct c2_conf_obj *dest, const struct confx_object *src,
-- 
1.8.3.2


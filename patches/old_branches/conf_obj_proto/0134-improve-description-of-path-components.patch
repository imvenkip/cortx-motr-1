From 998bdc8fc8831c9466636068d815b50887c0de42 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Tue, 17 Apr 2012 21:05:46 +0300
Subject: [PATCH 134/370] improve description of path components

- Explain the difference between relations and keys (in the context
  of path components).
- Illustrate the DAG with ASCII drawing.

[RB #714]
---
 conf/obj.c  |   6 ++--
 conf/path.h | 105 +++++++++++++++++++++++++++++++++++++++++++++---------------
 2 files changed, 83 insertions(+), 28 deletions(-)

diff --git a/conf/obj.c b/conf/obj.c
index 6022067..2646685 100644
--- a/conf/obj.c
+++ b/conf/obj.c
@@ -111,11 +111,11 @@
  *
  * - <b>Path target</b>: the object or directory that a path leads to.
  *   Path target is @b reachable if all of the intermediate objects of
- *   the path (if any) are ready (C2_CS_READY) and target is either an
- *   object that is ready or a directory of ready objects.
+ *   the path are ready (C2_CS_READY) and target is either an object
+ *   that is ready or a directory of ready objects.
  *
  * - A configuration object is said to be @b pinned if its reference
- *   counter is nonzero, otherwise it is @b unpinned.  Confc never
+ *   counter is nonzero; otherwise it is @b unpinned.  Confc never
  *   invalidates pinned objects.
  *
  * <hr> <!------------------------------------------------------------>
diff --git a/conf/path.h b/conf/path.h
index 53292b8..f358d4d 100644
--- a/conf/path.h
+++ b/conf/path.h
@@ -24,58 +24,113 @@
  * @page conf-fspec-path Path to Configuration Object/Directory
  *
  * - @ref conf-fspec-path-comp
+ *   - @ref conf-fspec-path-example
  * - @ref conf-fspec-path-data
  * - @ref conf-fspec-path-sub
  * - @ref conf-fspec-path-macros
  * - @ref conf_dfspec_path "Detailed Functional Specification"
  *
- * XXX @todo Tell that path is used by application, passed over network, etc.
- *
  * <hr> <!------------------------------------------------------------>
- * @section conf-fspec-path-comp Interpretation of Path Components
+ * @section conf-fspec-path-comp Interpreting Path Components
  *
  * Recall from @ref conf-def that path is `{x, R}' tuple, where `x'
  * (path origin) is a configuration object and `R' is a sequence of
  * path components.
  *
- * Path components explain how to "move" from the origin of a path to
- * its target. Path components can be thought of as "navigational
- * directives".
+ * Path components describe "movement" from the origin object to path
+ * target, which is either object or directory. A path traversal
+ * algorithm (see @ref confc-lspec-walk) consumes path components in
+ * the order they are specified.
+ *
+ * A component is either relation or key.  Relation tells which one of
+ * current object's downlinks to follow. Relations are expressed via
+ * c2_conf_objtype of target objects.  For example, consider a
+ * c2_conf_node object. It has two downlinks: ->cn_nics and
+ * ->cn_sdevs. The types of target objects are C2_CO_NIC and
+ * C2_CO_SDEV, correspondingly.
+ *
+ * A key "narrows" one-to-many relation. E.g.,
+ * c2_conf_filesystem::cf_services downlink points to a list of
+ * service objects. If the next path component is a key, then this key
+ * is used to choose one particular c2_conf_service object in the
+ * list; path traversal will be continued from that object.
+ *
+ * @subsection conf-fspec-path-example Example
+ *
+ * Suppose we have the following DAG of configuration objects (as per
+ * schema outlined in the HLD):
+ *
+@verbatim
+prof
+ \_<cp_filesystem>
+     \_ fs
+         \_<cf_services>
+             \_ svc-0
+             |   \_<cs_node>
+             |      \_ node-0
+             |          \_<cn_nics>
+             |          |  \_ nic-0
+             |          |  \_ nic-1
+             |          \_<cn_sdevs>
+             |             \_ sdev-0
+             |             |   \_<sd_partitions>
+             |             |      \_ part-0
+             |             |      \_ part-1
+             |             \_ sdev-1
+             |                 \_<sd_partitions>
+             |                    \_ part-2
+             |                    \_ part-3
+             \_ svc-1
+             |   \_<cs_node>
+             |      \_ @node-0
+             \_ svc-2
+                 \_<cs_node>
+                    \_ node-1
+                        \_<cn_nics>
+                        |  \_ nic-2
+                        \_<cn_sdevs>
+                           \_ sdev-2
+                               \_<sd_partitions>
+                                  \_ part-4
+
+Legend:
+    foo    object key (e.g., `prof' is a c2_conf_profile with key "prof")
+    <bar>  relation field (e.g., `<cs_node>' is c2_conf_service::cs_node)
+    @baz   reference (e.g., `@node-0' refers to `node-0')
+@endverbatim
  *
- * Let's look into an example:
+ * This pseudocode
  *
- * `{prof, [C2_CO_FILESYSTEM, C2_CO_SERVICE, "svc-1", C2_CO_NODE, C2_CONF_EOP]}'
+ * @code
+ * {prof, [C2_CO_FILESYSTEM, C2_CO_SERVICE, "svc-1", C2_CO_NODE, C2_CONF_EOP]}
+ * @endcode
  *
- * This pseudo-code represents a path that originates at `prof' object
- * and has five components, including the trailing end-of-path marker.
+ * represents a path that originates at `prof' object and has five
+ * components, the last being end-of-path marker.
  *
- * 1) The first path component -- `C2_CO_FILESYSTEM' -- represents a
- *    relation (a relation is expressed by c2_conf_objtype of target
- *    object(s)).  It specifies which downlink of "current"
- *    configuration object (`prof') to follow.  The object does have a
- *    suitable downlink: c2_conf_profile::cp_filesystem.  So we
- *    "follow" the first path component and move to, say, `fs'
- *    configuration object.
+ * 1) The first path component -- `C2_CO_FILESYSTEM' -- is a relation.
+ *    `prof' object does have a suitable downlink:
+ *    c2_conf_profile::cp_filesystem points to an object of type
+ *    C2_CO_FILESYSTEM.  So we follow the first path component and
+ *    move to `fs' configuration object.
  *
  * 2) Next path component is `C2_CO_SERVICE'. The corresponding
  *    downlink is c2_conf_filesystem::cf_services --- a "one-to-many"
  *    relation.  If it was the last path component, the path target
  *    would be a directory (of c2_conf_services).  But this is not the
- *    last component.
- *
- * Let's suppose that fs->cf_services points to a list of three
- * services with keys "svc-0", "svc-1", and "svc-2".
+ *    last component. fs->cf_services points to a list of three
+ *    services with keys "svc-0", "svc-1", and "svc-2".
  *
- * 3) Next path component -- "svc-1" -- is a key. It instructs which
+ * 3) Third path component -- "svc-1" -- is a key. It instructs which
  *    particular route to take when navigating from `fs' object. Thus
  *    we move to `svc-1' c2_conf_service object.
  *
  * 4) `C2_CO_NODE'. This path component corresponds to
  *    c2_conf_service::cs_node relation.  We advance to the
- *    corresponding c2_conf_node configuration object, ...
+ *    `node-0' configuration object, ..
  *
- * ... which happens to be the path target as there are no more
- * components to follow.
+ * 5) .. which appears to be path target, because the next path
+ *    component -- `C2_CONF_EOP' -- is an end-of-path marker.
  *
  * <hr> <!------------------------------------------------------------>
  * @section conf-fspec-path-data Data Structures
-- 
1.8.3.2


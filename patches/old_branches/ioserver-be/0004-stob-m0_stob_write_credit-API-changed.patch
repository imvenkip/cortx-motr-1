From a7018954f59c859795dd84a2f84c7ac805a2d213 Mon Sep 17 00:00:00 2001
From: Andriy Tkachuk <andriy_tkachuk@xyratex.com>
Date: Tue, 24 Sep 2013 19:20:59 +0300
Subject: [PATCH 4/7] stob: m0_stob_write_credit() API changed

From now, the number of writes instead of number
of bytes should be passed in arguments.
---
 addb/user_space/addb_stobsink.c |  2 +-
 ioservice/io_foms.c             |  2 +-
 reqh/ut/io_fop.c                |  6 +-----
 stob/ad.c                       | 22 +++++++++++++---------
 stob/stob.c                     | 12 ++++++------
 stob/stob.h                     |  4 ++--
 6 files changed, 24 insertions(+), 24 deletions(-)

diff --git a/addb/user_space/addb_stobsink.c b/addb/user_space/addb_stobsink.c
index 63ffee3..f1e529c 100644
--- a/addb/user_space/addb_stobsink.c
+++ b/addb/user_space/addb_stobsink.c
@@ -828,7 +828,7 @@ static void stobsink_persist(struct stobsink_poolbuf *pb,
 		m0_sm_group_lock(grp);
 		m0_dtx_init(&pb->spb_tx, dom->sd_bedom, grp);
 		dom->sd_ops->sdo_write_credit(dom,
-				m0_vec_count(&pb->spb_io.si_user.ov_vec),
+				pb->spb_io.si_user.ov_vec.v_nr,
 				&pb->spb_tx.tx_betx_cred);
 		rc = dom->sd_ops->sdo_tx_make(dom, &pb->spb_tx);
 		if (rc != 0) {
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index 8c33052..65e3a75 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -1754,7 +1754,7 @@ static void stob_write_credit(struct m0_fom *fom)
 	for (i = 0; i < rwfop->crw_ivecs.cis_nr; i++) {
 		wire_ivec = rwfop->crw_ivecs.cis_ivecs[i];
 		for (j = 0; j < wire_ivec.ci_nr; j++)
-			count += wire_ivec.ci_iosegs[j].ci_count >> bshift;
+			++count;
 	}
 	M0_LOG(M0_DEBUG, "blocks=%d", (int)count);
 	m0_stob_write_credit(fom_stdom, count, &fom->fo_tx.tx_betx_cred);
diff --git a/reqh/ut/io_fop.c b/reqh/ut/io_fop.c
index 1871077..2682747 100644
--- a/reqh/ut/io_fop.c
+++ b/reqh/ut/io_fop.c
@@ -513,14 +513,10 @@ static void fom_stob_write_credit(struct m0_fom *fom)
 {
 	struct m0_stob_io_write *in_fop;
 	struct m0_stob          *stobj;
-	uint32_t                 bshift;
-	m0_bcount_t              count;
 
 	in_fop = m0_fop_data(fom->fo_fop);
 	stobj = stob_object_find(&in_fop->fiw_object, fom);
-	bshift = stobj->so_op->sop_block_shift(stobj);
-	count = in_fop->fiw_value.fi_count >> bshift;
-	m0_stob_write_credit(stobj->so_domain, count,
+	m0_stob_write_credit(stobj->so_domain, 1,
 				&fom->fo_tx.tx_betx_cred);
 	m0_stob_put(stobj);
 }
diff --git a/stob/ad.c b/stob/ad.c
index 66d2c25..ed5eed5 100644
--- a/stob/ad.c
+++ b/stob/ad.c
@@ -1431,36 +1431,40 @@ static int ad_write_launch(struct m0_stob_io *io, struct ad_domain *adom,
 	return result;
 }
 
-static void ad_write_credit(struct ad_domain *dom, m0_bcount_t sz,
+static void ad_write_credit(struct ad_domain *dom, m0_bcount_t nr,
 			    struct m0_be_tx_credit *acc)
 {
-	sz >>= dom->ad_babshift;
-
+	M0_ENTRY("nr=%d cred=[%d:%d]", (int)nr,
+		(int)acc->tc_reg_nr, (int)acc->tc_reg_size);
 	if (dom->ad_ballroom->ab_ops->bo_alloc_credit != NULL)
-		dom->ad_ballroom->ab_ops->bo_alloc_credit(dom->ad_ballroom, sz,
+		dom->ad_ballroom->ab_ops->bo_alloc_credit(dom->ad_ballroom, nr,
 							  acc);
-	m0_be_emap_credit(&dom->ad_adata, M0_BEO_PASTE, sz, acc);
+	M0_LOG(M0_DEBUG, "after bo_alloc: cred=[%d:%d]",
+		(int)acc->tc_reg_nr, (int)acc->tc_reg_size);
+	m0_be_emap_credit(&dom->ad_adata, M0_BEO_PASTE, nr, acc);
+	M0_LOG(M0_DEBUG, "after emap_cred: cred=[%d:%d]",
+		(int)acc->tc_reg_nr, (int)acc->tc_reg_size);
 
 	if (dom->ad_ballroom->ab_ops->bo_free_credit != NULL)
 		dom->ad_ballroom->ab_ops->bo_free_credit(dom->ad_ballroom, 3,
 							 acc);
+	M0_LEAVE("cred=[%d:%d]", (int)acc->tc_reg_nr, (int)acc->tc_reg_size);
 }
 
 /**
    Implementation of m0_stob_domain_op::sdo_write_credit().
  */
 static void ad_domain_stob_write_credit(struct m0_stob_domain  *dom,
-					m0_bcount_t             size,
+					m0_bcount_t             nr,
 					struct m0_be_tx_credit *accum)
 {
 	struct ad_domain     *adom    = domain2ad(dom);
 
 	M0_PRE(adom->ad_setup);
 	M0_PRE(dom->sd_type == &m0_ad_stob_type);
-	M0_PRE(size > 0);
 
-	ad_write_credit(adom, size, accum);
-	m0_stob_write_credit(adom->ad_bstore->so_domain, size, accum);
+	ad_write_credit(adom, nr, accum);
+	m0_stob_write_credit(adom->ad_bstore->so_domain, nr, accum);
 }
 
 /**
diff --git a/stob/stob.c b/stob/stob.c
index 66d2c51..91dcd43 100644
--- a/stob/stob.c
+++ b/stob/stob.c
@@ -105,11 +105,11 @@ m0_stob_domain_lookup(struct m0_stob_type *type, uint32_t domain_id)
 
 
 M0_INTERNAL void m0_stob_write_credit(struct m0_stob_domain  *dom,
-				      m0_bcount_t             size,
+				      m0_bcount_t             nr,
 				      struct m0_be_tx_credit *accum)
 {
 	if (dom->sd_ops->sdo_write_credit != NULL)
-		dom->sd_ops->sdo_write_credit(dom, size, accum);
+		dom->sd_ops->sdo_write_credit(dom, nr, accum);
 }
 
 M0_INTERNAL void m0_stob_domain_init(struct m0_stob_domain *dom,
@@ -224,16 +224,16 @@ M0_INTERNAL void m0_stob_create_credit(struct m0_stob *obj,
 
 M0_INTERNAL void m0_stob_get(struct m0_stob *obj)
 {
-	M0_ENTRY();
+	M0_ENTRY("stob=%p", obj);
 	m0_atomic64_inc(&obj->so_ref);
-	M0_LEAVE("ref: %lu", (unsigned long)m0_atomic64_get(&obj->so_ref));
+	M0_LEAVE("ref=%lu", (unsigned long)m0_atomic64_get(&obj->so_ref));
 }
 
 M0_INTERNAL void m0_stob_put(struct m0_stob *obj)
 {
 	struct m0_stob_domain *dom;
 
-	M0_ENTRY("ref: %lu", (unsigned long)m0_atomic64_get(&obj->so_ref));
+	M0_ENTRY("stob=%p", obj);
 
 	dom = obj->so_domain;
 	m0_rwlock_write_lock(&dom->sd_guard);
@@ -241,7 +241,7 @@ M0_INTERNAL void m0_stob_put(struct m0_stob *obj)
 		obj->so_op->sop_fini(obj);
 	m0_rwlock_write_unlock(&dom->sd_guard);
 
-	M0_LEAVE();
+	M0_LEAVE("ref=%lu", (unsigned long)m0_atomic64_get(&obj->so_ref));
 }
 
 static void m0_stob_io_private_fini(struct m0_stob_io *io)
diff --git a/stob/stob.h b/stob/stob.h
index 3cfbff2..881fb9c 100644
--- a/stob/stob.h
+++ b/stob/stob.h
@@ -158,7 +158,7 @@ struct m0_stob_domain_op {
 	   Calculates the credit for write operation.
 	 */
 	void (*sdo_write_credit)(struct m0_stob_domain  *dom,
-				 m0_bcount_t             size,
+				 m0_bcount_t             nr,
 				 struct m0_be_tx_credit *accum);
 };
 
@@ -170,7 +170,7 @@ M0_INTERNAL void m0_stob_domain_init(struct m0_stob_domain *dom,
 M0_INTERNAL void m0_stob_domain_fini(struct m0_stob_domain *dom);
 
 M0_INTERNAL void m0_stob_write_credit(struct m0_stob_domain  *dom,
-				      m0_bcount_t             size,
+				      m0_bcount_t             nr,
 				      struct m0_be_tx_credit *accum);
 
 /**
-- 
1.8.3.2


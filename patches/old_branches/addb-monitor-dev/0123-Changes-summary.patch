From 63360e720db7a3e0138d7df355ded128661ef361 Mon Sep 17 00:00:00 2001
From: Rohan Puri <rohan_puri@xyratex.com>
Date: Mon, 18 Nov 2013 11:34:39 +0530
Subject: [PATCH 123/125] Changes summary :- 1. Make addb monitor for m0t1fs io
 size separate for total read & total write.

---
 m0t1fs/linux_kernel/file.c          |  2 +-
 m0t1fs/linux_kernel/file_internal.h |  6 ------
 m0t1fs/linux_kernel/m0t1fs.c        | 23 +++++++++++++++--------
 m0t1fs/linux_kernel/m0t1fs.h        | 10 +++++++++-
 m0t1fs/m0t1fs_addb.h                |  4 ++--
 5 files changed, 27 insertions(+), 18 deletions(-)

diff --git a/m0t1fs/linux_kernel/file.c b/m0t1fs/linux_kernel/file.c
index 060a323..69789bd 100644
--- a/m0t1fs/linux_kernel/file.c
+++ b/m0t1fs/linux_kernel/file.c
@@ -4239,7 +4239,7 @@ last:
 			       1000); /* uS */
 	m0_addb_counter_update(&stats->ais_sizes_cntr, (uint64_t) count);
 	M0_ADDB_POST(&m0_addb_gmc, &m0_addb_rt_m0t1fs_io_finish,
-		     M0_ADDB_CTX_VEC(&m0t1fs_addb_ctx), count, time_io);
+		     M0_ADDB_CTX_VEC(&m0t1fs_addb_ctx), rw, count, time_io);
 	m0t1fs_addb_stat_post_counters(csb);
 
 	M0_LEAVE();
diff --git a/m0t1fs/linux_kernel/file_internal.h b/m0t1fs/linux_kernel/file_internal.h
index 26ce0a0..f37313f 100644
--- a/m0t1fs/linux_kernel/file_internal.h
+++ b/m0t1fs/linux_kernel/file_internal.h
@@ -1229,12 +1229,6 @@ enum io_req_state {
 	IRS_FAILED,
 };
 
-/** Represents type of IO request. */
-enum io_req_type {
-        IRT_READ,
-        IRT_WRITE,
-        IRT_TYPE_NR,
-};
 
 /** Operation vector for struct io_request. */
 struct io_request_ops {
diff --git a/m0t1fs/linux_kernel/m0t1fs.c b/m0t1fs/linux_kernel/m0t1fs.c
index 4cf49c2..a216236 100644
--- a/m0t1fs/linux_kernel/m0t1fs.c
+++ b/m0t1fs/linux_kernel/m0t1fs.c
@@ -58,8 +58,8 @@ static void m0t1fs_net_fini(void);
 static int  m0t1fs_rpc_init(void);
 static void m0t1fs_rpc_fini(void);
 
-static int  m0t1fs_addb_mon_init(void);
-static void m0t1fs_addb_mon_fini(void);
+static int  m0t1fs_addb_mon_total_io_size_init(void);
+static void m0t1fs_addb_mon_total_io_size_fini(void);
 
 static int  m0t1fs_layout_init(void);
 static void m0t1fs_layout_fini(void);
@@ -145,7 +145,7 @@ M0_INTERNAL int m0t1fs_init(void)
 	if (rc != 0)
 		goto net_fini;
 
-	rc = m0t1fs_addb_mon_init();
+	rc = m0t1fs_addb_mon_total_io_size_init();
 	if (rc != 0)
 		goto rpc_fini;
 
@@ -163,7 +163,7 @@ M0_INTERNAL int m0t1fs_init(void)
 layout_fini:
 	m0t1fs_layout_fini();
 addb_mon_fini:
-	m0t1fs_addb_mon_fini();
+	m0t1fs_addb_mon_total_io_size_fini();
 rpc_fini:
 	m0t1fs_rpc_fini();
 net_fini:
@@ -318,8 +318,15 @@ static void m0t1fs_mon_rw_io_watch(const struct m0_addb_monitor *mon,
 		M0_ASSERT(sum_rec != NULL);
 
 		m0_mutex_lock(&sum_rec->asr_mutex);
-		sum_data->sd_io += rec->ar_data.au64s_data[0];
-		sum_rec->asr_dirty = true;
+		if (rec->ar_data.au64s_data[0] == IRT_READ) {
+			sum_data->sd_rio += rec->ar_data.au64s_data[1];
+			sum_rec->asr_dirty = true;
+		} else if (rec->ar_data.au64s_data[0] == IRT_WRITE) {
+			sum_data->sd_wio += rec->ar_data.au64s_data[1];
+			sum_rec->asr_dirty = true;
+		}
+		else
+			M0_IMPOSSIBLE("Invalid IO state");
 		m0_mutex_unlock(&sum_rec->asr_mutex);
 
 	}
@@ -344,7 +351,7 @@ const struct m0_addb_monitor_ops m0t1fs_addb_mon_rw_io_ops = {
 	.amo_sum_rec = m0t1fs_mon_rw_io_sum_rec
 };
 
-static int m0t1fs_addb_mon_init(void)
+static int m0t1fs_addb_mon_total_io_size_init(void)
 {
 	struct m0_addb_sum_rec *sum_rec;
 	struct m0_reqh         *reqh = &m0t1fs_globals.g_reqh;
@@ -375,7 +382,7 @@ static int m0t1fs_addb_mon_init(void)
 	return 0;
 }
 
-static void m0t1fs_addb_mon_fini(void)
+static void m0t1fs_addb_mon_total_io_size_fini(void)
 {
 	struct m0_addb_sum_rec *sum_rec;
 	struct m0_addb_monitor *mon = &m0t1fs_globals.g_addb_mon_rw_io_size;
diff --git a/m0t1fs/linux_kernel/m0t1fs.h b/m0t1fs/linux_kernel/m0t1fs.h
index 83672a5..cdbfeb5 100644
--- a/m0t1fs/linux_kernel/m0t1fs.h
+++ b/m0t1fs/linux_kernel/m0t1fs.h
@@ -409,7 +409,15 @@ enum {
 };
 
 struct m0t1fs_addb_mon_sum_data_io_size {
-	uint64_t sd_io;
+	uint64_t sd_rio;
+	uint64_t sd_wio;
+};
+
+/** Represents type of IO request. */
+enum io_req_type {
+        IRT_READ,
+        IRT_WRITE,
+        IRT_TYPE_NR,
 };
 
 /** Anything that is global to m0t1fs module goes in this singleton structure.
diff --git a/m0t1fs/m0t1fs_addb.h b/m0t1fs/m0t1fs_addb.h
index 7587444..66e9a1f 100644
--- a/m0t1fs/m0t1fs_addb.h
+++ b/m0t1fs/m0t1fs_addb.h
@@ -109,7 +109,7 @@ enum {
 
 /* Total time required and size for IO */
 M0_ADDB_RT_DP(m0_addb_rt_m0t1fs_io_finish, M0T1FS_ADDB_RECID_IO_FINISH,
-	      "io_size" /* in bytes */, "time_ns");
+	      "rw", "io_size" /* in bytes */, "time_ns");
 
 /* Time required and io size for each COB FID */
 M0_ADDB_RT_DP(m0_addb_rt_m0t1fs_cob_io_finish, M0T1FS_ADDB_RECID_COB_IO_FINISH,
@@ -118,7 +118,7 @@ M0_ADDB_RT_DP(m0_addb_rt_m0t1fs_cob_io_finish, M0T1FS_ADDB_RECID_COB_IO_FINISH,
 
 /* Number of bytes read, written from this client instance (m0t1fs) */
 M0_ADDB_RT_STATS(m0_addb_rt_m0t1fs_mon_io_size, M0T1FS_ADDB_RECID_MON_IO_SIZE,
-	      "total_io_size");
+	      "total_rio_size", "total_wio_size");
 
 /* m0t1fs root cob */
 M0_ADDB_RT_DP(m0_addb_rt_m0t1fs_root_cob, M0T1FS_ADDB_RECID_ROOT_COB,
-- 
1.8.3.2


From 776c3f71303fe7524fa5d8e080a2dd7eafaccf55 Mon Sep 17 00:00:00 2001
From: Rohan Puri <rohan_puri@xyratex.com>
Date: Mon, 15 Jul 2013 16:46:05 +0530
Subject: [PATCH 037/125] DLD for stats monitoring infrastructure

---
 addb/addb_monitor.c | 67 +++++++++++++++++++++++----------------
 addb/addb_monitor.h | 91 +++++++++++++++++++++++++++++++++++++----------------
 2 files changed, 104 insertions(+), 54 deletions(-)

diff --git a/addb/addb_monitor.c b/addb/addb_monitor.c
index 600931d..a0e979f 100644
--- a/addb/addb_monitor.c
+++ b/addb/addb_monitor.c
@@ -39,8 +39,9 @@
 
    <hr>
    @section ADDB-MON-INFRA-DLD-ovw Overview
-   This design describes the ADDB monitoring infrastructure data structures,
-   posting of summary ADDB records from inside monitors.
+   This design describes the ADDB monitoring infrastructure along with posting
+   of addb summary records to stats service & addb service(if from client else
+   on sinks them to addb stobs on server).
 
    <hr>
    @section ADDB-MON-INFRA-DLD-def Definitions
@@ -70,20 +71,27 @@
    This design closely follows that described in
    @ref ADDB-MON-INFRA-DLD-ref-HLD "[0]"
 
-   An ADDB monitoring infrastructure provides infrastructure to define, add,
-   remove ADDD monitors.
+   An ADDB monitoring infrastructure provides infrastructure to init, add,
+   remove ADDD monitors along with sending them to stats service as a fop &
+   posting them on global addb machine similar to other addb records.
 
    <hr>
    @section ADDB-MON-INFRA-DLD-lspec Logical Specification
    - @ref ADDB-MON-INFRA-DLD-lspec-comps
-   - @ref ADDB-MON-INFRA-DLD-lspec-rec
-   - @ref ADDB-DLD-CNTR-lspec-sm_counter
    - @ref ADDB-DLD-CNTR-lspec-thread
 
    @subsection ADDB-MON-INFRA-DLD-lspec-comps ADDB Monitor infrastructure Overview
 
-   ADDB monitors are objects used to monitor any parameter (node or mero) &
-   generate ADDB summary records that are then sent to stats service.
+   ADDB monitors are filters which monitor the type/s of addb records they are
+   interested in. They generate & maintain summary data from this monitoring.
+   This summary data structure is monitor specific and is stored using request
+   handlers locker data structure.
+   This summary data is sent periodically to the stats service through a fop &
+   also as addb records to the addb service if present on client or to the addb
+   stob if present on server. This is done through enhancing the
+   functionality of addb pfom @ref ADDB-DLD-SVC-pstats on the server and making
+   use of a simple fom on the client.
+
 
 		Global ADDB monitors list
              ____    ____    ____          ____
@@ -92,28 +100,27 @@
 
 
 	addb_rec_1
-	addb_rec_2                   ____
-	addb_rec_3----------------->|monx|->Generate ADDB summary record &
-	    .                       |____| post ast
+	addb_rec_2 monitor stream    ____
+	addb_rec_3----------------->|monx|->Generate/Update ADDB summary record
+	    .      of addb recs     |____|
 	    .
 	    .
 	addb_rec_n
 
-	When rpc worker thread run asts -> Post ADDB summary records to
-	stats & addb service.
+	Periodically running fom will send all the addb summary records for
+	all the monitors to the stats service by creating a fop for it &
+	post the summary data as addb summary records on the globally available
+	addb machine.
 
    @subsection ADDB-MON-INFRA-DLD-lspec-thread Threading and Concurrency Model
 
-   ADDB monitors run in the context of the thread that posted ADDB records.
-   These monitors generate summary ADDB records, but do not post them, instead
-   the posting is deferred to the rpc worker thread that runs periodically.
+   ADDB monitors update addb summary data by processing the addb records. Also,
+   there is a periodic fom that reads this addb summary data for each monitor
+   and sends this data to stats service by creating a fop. Hence, need to
+   synchronize amongst these two accesses of addb summary data. This is achieved
+   by adding m0_mutex to m0_addb_sum_rec structure.
  */
 
-/**
-   @addtogroup addb_pvt
-   @see @ref addb "Analysis and Data-Base API"
-   @{
- */
 #include "addb/addb_monitor.h"
 
 struct m0_addb_monitor_global_ctx monitor_global_ctx;
@@ -216,6 +223,7 @@ M0_INTERNAL void m0_addb_monitor_subsys_fini(void)
 	monitor_global_ctx.amgc_reqh = NULL;
 }
 
+/* @todo: Calculate the correct len for this macro */
 #define ADDB_SUM_REC_ON_WIRE_LEN(sum) 0
 
 M0_INTERNAL int m0_addb_post_summaries(void)
@@ -290,12 +298,13 @@ M0_INTERNAL int m0_addb_post_summaries(void)
 				 * the former as a fop as its content can change
 				 * during the process of creation of fop to its
 				 * sending to stats service. We can avoid that
-				 * by taking some global lock until the fop is sent
-				 * but this is avoided to make the lock granularity
-				 * small, just to copying it. Also, on-wire summary
-				 * record would be few bytes and all dirtied would
-				 * be dirtied_mon * sizeof(each on-wire sum rec)
-				 * would be approximately some KBs.
+				 * by taking some global lock until the fop is
+				 * sent but this is avoided to make the lock
+				 * granularity small, just to copying it. Also,
+				 * on-wire summary record would be few bytes and
+				 * all dirtied would be dirtied_mon *
+				 * sizeof(each on-wire sum rec) would be
+				 * approximately some KBs.
 				 */
 				memcpy(addb_sum_rec_on_wire, sum->asr_rec, len); 
 				sum_rec->asrfd_data = addb_sum_rec_on_wire;
@@ -308,6 +317,10 @@ M0_INTERNAL int m0_addb_post_summaries(void)
 	 * @todo: Send this on-wire fop data by creating and sending a fop
 	 * to stats service.
 	 */
+
+	/**
+	 * @todo: Post on global machine too.
+	 */
 	M0_RETURN(0);
 }
 
diff --git a/addb/addb_monitor.h b/addb/addb_monitor.h
index 13843d8..ace251e 100644
--- a/addb/addb_monitor.h
+++ b/addb/addb_monitor.h
@@ -34,14 +34,7 @@
    - @ref ADDB-MON-INFRA-DLD-fspec-sub
    - @ref ADDB-MON-INFRA-DLD-fspec-cli
    - @ref ADDB-MON-INFRA-DLD-fspec-usecases
-     - @ref ADDB-MON-INFRA-DLD-fspec-uc-TSMC
-     - @ref ADDB-MON-INFRA-DLD-fspec-uc-PSMC
-     - @ref ADDB-MON-INFRA-DLD-fspec-uc-AWKMC
-     - @ref ADDB-MON-INFRA-DLD-fspec-uc-reg
-     - @ref ADDB-MON-INFRA-DLD-fspec-uc-mod-ctx
-     - @ref ADDB-MON-INFRA-DLD-fspec-uc-post
-     - @ref ADDB-MON-INFRA-DLD-fspec-uc-cntr
-     - @ref ADDB-MON-INFRA-DLD-fspec-uc-read
+     - @ref ADDB-MON-INFRA-DLD-fspec-uc-IAAM
    - Detailed functional specifications:
      - @ref addb "Analysis and Diagnostics Data-Base API"
      - @ref addb_pvt "ADDB Internal Interfaces"
@@ -51,33 +44,78 @@
 
    The following data structures are involved in an ADDB monitoring
    infrastructure:
-   - m0_addb_monitor
    - m0_addb_monitor_global_ctx
+   - m0_addb_monitor
    - m0_addb_sum_rec
 
    <hr>
    @section ADDB-DLD-fspec-sub Subroutines and Macros
 
    Interfaces needed for ADDB monitoring infrastructure
-   - m0_addb_monitor_subsystem_init()
+   - m0_addb_monitor_subsys_init()
    - m0_addb_monitor_add()
-   - m0_addb_monitor_delete()
-   - m0_addb_monitor_subsystem_fini()
+   - m0_addb_monitor_del()
+   - m0_addb_monitor_subsys_fini()
    - m0_addb_post_summaries()
 
    <hr>
    @section ADDB-DLD-fspec-usecases Recipes
-   - @ref ADDB-DLD-fspec-uc-create_monitor
-   - @ref ADDB-DLD-fspec-uc-PSMC
-   - @ref ADDB-DLD-fspec-uc-AWKMC
-   - @ref ADDB-DLD-fspec-uc-reg
-   - @ref ADDB-DLD-fspec-uc-post
-   - @ref ADDB-DLD-fspec-uc-cntr
-   - @ref ADDB-DLD-fspec-uc-read
+   - @ref ADDB-DLD-fspec-uc-IAAM
+
+   @subsection ADDB-DLD-fspec-uc-IAAM Init & Add monitor
+
+   This shows the series of steps that needs to be taken
+   for creating, initializing & adding the monitor into mero system.
+
+   @code
+	// 1. Add monitor to the structure that is to be monitored
+	struct m0_module_struct {
+		struct m0_addb_monitor ms_mon;
+	}module_struct;
+
+	// 2. Define the ADDB summary record type.
+	M0_ADDB_RT_DP(m0_addb_sum_rec1, M0_ADDB_SUM_REC1, "para1");
+
+	// 3. Define monitor specific data that contains information
+	// for the stats to be monitored & key to locate this data.
+
+	struct m0_addb_sum_rec *sum1 = m0_malloc(sizeof(struct m0_addb_sum_rec)
+					+ uint64_t * 1);
+	uint32_t sum1_key;
+
+
+	// 4. Set the monitor specific data in reqh's locker data-structure.
+	int sum1_am_sum_set(const struct m0_reqh *reqh)
+	{
+		m0_reqh_lockers_set(reqh, sum1_key, &sum1);
+	}
+
+	// 5. Get the monitor specific data from reqh's lockers DS/
+	struct m0_add_sum_rec * sum1_am_sum_get(const struct m0_reqh *reqh)
+	{
+		return m0_reqh_lockers_get(reqh, sum1_key);
+	}
+
+	// 6. Define am_watch()
+	void sum1_am_watch(struct m0_addb_rec *rec, struct m0_reqh *reqh)
+	{
+		// for addb rec of type X
+		struct m0_addb_sum_rec *sum1 = reqh_lockers_get(reqh, sum1_key);
+
+		m0_mutex_lock(&sum1->asr_mutex);
+		// update data
+		// set the dirty flag
+		m0_mutex_unlock(&sum1->asr_mutex);
+	}
+
+	// 7. init monitor
+	m0_addb_monitor_init(&module_struct->ms_mon, sum1_am_watch,
+			     sum1_am_sum_get, sum1_am_sum_set);
 
-   @subsection ADDB-DLD-fspec-uc-create_monitor Create monitor
+	// 8. Add monitor to the mero system
+	m0_addb_monitor_add(&module_struct->ms_mon);
 
-   Series of steps
+   @endcode
 */
 
 #include "addb/addb_monitor_wire.h"
@@ -86,7 +124,6 @@
 struct m0_addb_monitor;
 
 M0_TL_DESCR_DECLARE(addb_mon, M0_EXTERN);
-//M0_TL_DELARE(addb_mon, M0_INTERNAL, struct m0_addb_monitor);
 
 struct m0_addb_sum_rec {
 	/**
@@ -106,22 +143,22 @@ struct m0_addb_monitor {
 	 * Linkage to global monitors list in
 	 * m0_addb_monitor_global_ctx:amgc_list
 	 */
-	struct m0_tlink  am_linkage;
+	struct m0_tlink           am_linkage;
 	/**
 	 * Any processing specific to monitor is done here
 	 * includes, updates to the m0_addb_sum_rec data updation.
 	 */
-	void           (*am_watch) (const struct m0_addb_rec *rec,
-				    const struct m0_reqh     *reqh);
+	void                    (*am_watch) (const struct m0_addb_rec *rec,
+					     const struct m0_reqh     *reqh);
 	/* Returns m0_addb_sum_rec, if any for this monitor. */
 	struct m0_addb_sum_rec *(*am_sum_get) (const struct m0_reqh *reqh);
 	/**
 	 * Set the monitor specific m0_addb_sum_rec, if any
 	 * in the reqh's locker structure
 	 */
-	int           (*am_sum_set) (const struct m0_reqh *reqh);
+	int                     (*am_sum_set) (const struct m0_reqh *reqh);
 	/* Magic needed for monitor's tlist */
-	uint64_t        am_magic;
+	uint64_t                  am_magic;
 };
 
 struct stats_conn {
-- 
1.8.3.2


From d7b29d3c9e2f6780a7e75a7ad23dc1f61015f82f Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Thu, 15 Nov 2012 17:59:27 +0800
Subject: [PATCH 06/10] embed c2_pool_event into c2_pool_event_link directly.

---
 ioservice/io_device.c |  8 +++-----
 pool/pool.c           | 31 +++++++++----------------------
 pool/pool.h           |  2 +-
 pool/ut/test_pm.c     | 26 +++++++++-----------------
 4 files changed, 22 insertions(+), 45 deletions(-)

diff --git a/ioservice/io_device.c b/ioservice/io_device.c
index a4021f2..101fb79 100644
--- a/ioservice/io_device.c
+++ b/ioservice/io_device.c
@@ -337,7 +337,6 @@ int c2_ios_poolmach_version_updates_pack(struct c2_poolmach         *pm,
 		rc = -ENOMEM;
 		c2_tl_for(poolmach_events, &events_list, scan) {
 			poolmach_events_tlink_del_fini(scan);
-			c2_free(scan->pel_event);
 			c2_free(scan);
 		} c2_tl_endfor;
 		goto out;
@@ -345,12 +344,11 @@ int c2_ios_poolmach_version_updates_pack(struct c2_poolmach         *pm,
 
 	index = 0;
 	c2_tl_for(poolmach_events, &events_list, scan) {
-		updates->fvu_events[index].fve_type  = scan->pel_event->pe_type;
-		updates->fvu_events[index].fve_index = scan->pel_event->pe_index;
-		updates->fvu_events[index].fve_state = scan->pel_event->pe_state;
+		updates->fvu_events[index].fve_type  = scan->pel_event.pe_type;
+		updates->fvu_events[index].fve_index = scan->pel_event.pe_index;
+		updates->fvu_events[index].fve_state = scan->pel_event.pe_state;
 		index++;
 		poolmach_events_tlink_del_fini(scan);
-		c2_free(scan->pel_event);
 		c2_free(scan);
 	} c2_tl_endfor;
 
diff --git a/pool/pool.c b/pool/pool.c
index fb5f6c8..58e1dfa 100644
--- a/pool/pool.c
+++ b/pool/pool.c
@@ -160,7 +160,6 @@ void c2_poolmach_fini(struct c2_poolmach *pm)
 	/* iterate through events and free them */
 	c2_tl_for(poolmach_events, &pm->pm_state.pst_events_list, scan) {
 		poolmach_events_tlink_del_fini(scan);
-		c2_free(scan->pel_event);
 		c2_free(scan);
 	} c2_tl_endfor;
 
@@ -199,7 +198,6 @@ int c2_poolmach_state_transit(struct c2_poolmach *pm,
 			      struct c2_pool_event *event)
 {
 	struct c2_poolmach_state  *pm_state;
-	struct c2_pool_event      *new_event;
 	struct c2_pool_event_link *event_link;
 	enum c2_pool_nd_state      old_state;
 	int                        rc = 0;
@@ -272,26 +270,22 @@ int c2_poolmach_state_transit(struct c2_poolmach *pm,
 	c2_rwlock_write_lock(&pm->pm_lock);
 
 	/* step 2: Update the state according to event */
-	new_event  = c2_alloc(sizeof *new_event);
 	event_link = c2_alloc(sizeof *event_link);
-	if (new_event == NULL || event_link == NULL) {
-		c2_free(new_event);
-		c2_free(event_link);
+	if (event_link == NULL) {
 		rc = -ENOMEM;
 		goto out_unlock;
 	}
-	*new_event = *event;
-	event_link->pel_event = new_event;
+	event_link->pel_event = *event;
 	if (event->pe_type == C2_POOL_NODE) {
 		/* TODO if this is a new node join event, the index
 		 * might larger than the current number. Then we need
 		 * to create a new larger array to hold nodes info.
 		 */
 		pm_state->pst_nodes_array[event->pe_index].pn_state =
-				new_event->pe_state;
+				event->pe_state;
 	} else if (event->pe_type == C2_POOL_DEVICE) {
 		pm_state->pst_devices_array[event->pe_index].pd_state =
-				new_event->pe_state;
+				event->pe_state;
 	}
 
 	/* step 3: Increase the version */
@@ -316,7 +310,6 @@ int c2_poolmach_state_query(struct c2_poolmach *pm,
 {
 	struct c2_pool_version_numbers zero = { {0, 0} };
 	struct c2_pool_event_link     *scan;
-	struct c2_pool_event          *event;
 	struct c2_pool_event_link     *event_link;
 	int                            rc = 0;
 
@@ -342,23 +335,17 @@ int c2_poolmach_state_query(struct c2_poolmach *pm,
 		/* allocate a copy of the event and event link,
 		 * add it to output list.
 		 */
-		event = c2_alloc(sizeof *event);
 		event_link = c2_alloc(sizeof *event_link);
-		if (event == NULL || event_link == NULL) {
-			struct c2_pool_event_link *s;
-			c2_free(event);
-			c2_free(event_link);
+		if (event_link == NULL) {
+			struct c2_pool_event_link *tmp;
 			rc = -ENOMEM;
-			c2_tl_for(poolmach_events, event_list_head, s) {
-				poolmach_events_tlink_del_fini(s);
-				c2_free(s->pel_event);
-				c2_free(s);
+			c2_tl_for(poolmach_events, event_list_head, tmp) {
+				poolmach_events_tlink_del_fini(tmp);
+				c2_free(tmp);
 			} c2_tl_endfor;
 			break;
 		}
 		*event_link = *scan;
-		event_link->pel_event = event;
-		*event = *scan->pel_event;
 		poolmach_events_tlink_init_at_tail(event_link, event_list_head);
 
 		if (to != NULL &&
diff --git a/pool/pool.h b/pool/pool.h
index 83a0737..1c39f8b 100644
--- a/pool/pool.h
+++ b/pool/pool.h
@@ -203,7 +203,7 @@ struct c2_pool_event {
  */
 struct c2_pool_event_link {
 	/** the event itself */
-	struct c2_pool_event          *pel_event;
+	struct c2_pool_event           pel_event;
 
 	/**
 	 * Pool machine's new version when this event handled
diff --git a/pool/ut/test_pm.c b/pool/ut/test_pm.c
index 199b938..28eae4f 100644
--- a/pool/ut/test_pm.c
+++ b/pool/ut/test_pm.c
@@ -63,7 +63,7 @@ static void dump_event_list(struct c2_tl *head)
 	struct c2_pool_event_link *scan;
 
 	c2_tl_for(poolmach_events, head, scan) {
-		dump_event(scan->pel_event);
+		dump_event(&scan->pel_event);
 		dump_version(&scan->pel_new_version);
 	} c2_tl_endfor;
 	if (verbose)
@@ -154,14 +154,13 @@ static void pm_test_transit(void)
 	C2_UT_ASSERT(count == 2);
 	index = 0;
 	c2_tl_for(poolmach_events, &events_list, scan) {
-		struct c2_pool_event *e = scan->pel_event;
+		struct c2_pool_event *e = &scan->pel_event;
 		C2_UT_ASSERT(events[index].pe_state == e->pe_state);
 		C2_UT_ASSERT(events[index].pe_type  == e->pe_type);
 		C2_UT_ASSERT(events[index].pe_index == e->pe_index);
 
 		index++;
 		poolmach_events_tlink_del_fini(scan);
-		c2_free(scan->pel_event);
 		c2_free(scan);
 	} c2_tl_endfor;
 
@@ -176,13 +175,12 @@ static void pm_test_transit(void)
 	C2_UT_ASSERT(count == 2);
 	index = 2;
 	c2_tl_for(poolmach_events, &events_list, scan) {
-		struct c2_pool_event *e = scan->pel_event;
+		struct c2_pool_event *e = &scan->pel_event;
 		C2_UT_ASSERT(events[index].pe_state == e->pe_state);
 		C2_UT_ASSERT(events[index].pe_type  == e->pe_type);
 		C2_UT_ASSERT(events[index].pe_index == e->pe_index);
 		index++;
 		poolmach_events_tlink_del_fini(scan);
-		c2_free(scan->pel_event);
 		c2_free(scan);
 	} c2_tl_endfor;
 
@@ -197,13 +195,12 @@ static void pm_test_transit(void)
 	C2_UT_ASSERT(count == 4);
 	index = 0;
 	c2_tl_for(poolmach_events, &events_list, scan) {
-		struct c2_pool_event *e = scan->pel_event;
+		struct c2_pool_event *e = &scan->pel_event;
 		C2_UT_ASSERT(events[index].pe_state == e->pe_state);
 		C2_UT_ASSERT(events[index].pe_type  == e->pe_type);
 		C2_UT_ASSERT(events[index].pe_index == e->pe_index);
 		index++;
 		poolmach_events_tlink_del_fini(scan);
-		c2_free(scan->pel_event);
 		c2_free(scan);
 	} c2_tl_endfor;
 
@@ -218,13 +215,12 @@ static void pm_test_transit(void)
 	C2_UT_ASSERT(count == 2);
 	index = 0;
 	c2_tl_for(poolmach_events, &events_list, scan) {
-		struct c2_pool_event *e = scan->pel_event;
+		struct c2_pool_event *e = &scan->pel_event;
 		C2_UT_ASSERT(events[index].pe_state == e->pe_state);
 		C2_UT_ASSERT(events[index].pe_type  == e->pe_type);
 		C2_UT_ASSERT(events[index].pe_index == e->pe_index);
 		index++;
 		poolmach_events_tlink_del_fini(scan);
-		c2_free(scan->pel_event);
 		c2_free(scan);
 	} c2_tl_endfor;
 
@@ -239,13 +235,12 @@ static void pm_test_transit(void)
 	C2_UT_ASSERT(count == 2);
 	index = 2;
 	c2_tl_for(poolmach_events, &events_list, scan) {
-		struct c2_pool_event *e = scan->pel_event;
+		struct c2_pool_event *e = &scan->pel_event;
 		C2_UT_ASSERT(events[index].pe_state == e->pe_state);
 		C2_UT_ASSERT(events[index].pe_type  == e->pe_type);
 		C2_UT_ASSERT(events[index].pe_index == e->pe_index);
 		index++;
 		poolmach_events_tlink_del_fini(scan);
-		c2_free(scan->pel_event);
 		c2_free(scan);
 	} c2_tl_endfor;
 
@@ -260,13 +255,12 @@ static void pm_test_transit(void)
 	C2_UT_ASSERT(count == 4);
 	index = 0;
 	c2_tl_for(poolmach_events, &events_list, scan) {
-		struct c2_pool_event *e = scan->pel_event;
+		struct c2_pool_event *e = &scan->pel_event;
 		C2_UT_ASSERT(events[index].pe_state == e->pe_state);
 		C2_UT_ASSERT(events[index].pe_type  == e->pe_type);
 		C2_UT_ASSERT(events[index].pe_index == e->pe_index);
 		index++;
 		poolmach_events_tlink_del_fini(scan);
-		c2_free(scan->pel_event);
 		c2_free(scan);
 	} c2_tl_endfor;
 
@@ -285,13 +279,12 @@ static void pm_test_transit(void)
 	C2_UT_ASSERT(count == 4);
 	index = 0;
 	c2_tl_for(poolmach_events, &events_list, scan) {
-		struct c2_pool_event *e = scan->pel_event;
+		struct c2_pool_event *e = &scan->pel_event;
 		C2_UT_ASSERT(events[index].pe_state == e->pe_state);
 		C2_UT_ASSERT(events[index].pe_type  == e->pe_type);
 		C2_UT_ASSERT(events[index].pe_index == e->pe_index);
 		index++;
 		poolmach_events_tlink_del_fini(scan);
-		c2_free(scan->pel_event);
 		c2_free(scan);
 	} c2_tl_endfor;
 
@@ -306,13 +299,12 @@ static void pm_test_transit(void)
 	C2_UT_ASSERT(count == 4);
 	index = 0;
 	c2_tl_for(poolmach_events, &events_list, scan) {
-		struct c2_pool_event *e = scan->pel_event;
+		struct c2_pool_event *e = &scan->pel_event;
 		C2_UT_ASSERT(events[index].pe_state == e->pe_state);
 		C2_UT_ASSERT(events[index].pe_type  == e->pe_type);
 		C2_UT_ASSERT(events[index].pe_index == e->pe_index);
 		index++;
 		poolmach_events_tlink_del_fini(scan);
-		c2_free(scan->pel_event);
 		c2_free(scan);
 	} c2_tl_endfor;
 
-- 
1.8.3.2


From a6ead7319afda29ef0c397b582ad3bae6809d1df Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Wed, 7 Nov 2012 14:20:22 +0800
Subject: [PATCH 04/10] more about de-graded write handling: one for write
 spanned to failed device, and the other case.

---
 c2t1fs/linux_kernel/file.c | 23 ++++++++++++++---------
 1 file changed, 14 insertions(+), 9 deletions(-)

diff --git a/c2t1fs/linux_kernel/file.c b/c2t1fs/linux_kernel/file.c
index ffa13c0..72e338b 100644
--- a/c2t1fs/linux_kernel/file.c
+++ b/c2t1fs/linux_kernel/file.c
@@ -209,16 +209,21 @@
    A degraded write request is handled as the following:
    (1) Calculate its parity group, find out related data units and parity units.
        This needs help from the file's layout.
-   (2) Send async read requests to all other survival data units in this
-       parity. If the original write request is a full-stripe write request,
-       skip this step. Other data units are those data units which are not
-       covered (spanned) by this write request.
+   (2) Prepare to async read data and/or parity units.
+       (2.1) If this is a full-stripe write request, skip to step (4).
+       (2.2) If write request only spans ONLINE devices, this is similar to a
+             Read-Modify-Write (rmw), except a little difference: only async
+             read the spannd data unit(s). Async read all spannd data units.
+       (2.3) If write request spans FAILED/OFFLINE devices, async read all
+             survival and unspanned data units and necessary parity unit(s).
    (3) When these async read requests complete, replies come back to client.
-       Calculate parity (or parities) for this parity group from the data units.
-       Those async read requests can be released after this.
-   (4) Send write request(s) to data units, and all the new parity data, except
-       the failed device(s). Please note here: write to the failed devices are
-       excluded to send.
+       (3.1) for (2.2) case, prepare new parity units from the old data and
+             new data.
+       (3.2) for (2.3) case, first, re-calculate the lost data unit, and do
+             the same as 3.1.
+   (4) Send write request(s) to data units, along with all the new parity data,
+       except the failed device(s). Please note here: write to the failed
+       devices are excluded to send.
    (5) When those write requests complete, return to user space.
 
    The same thread used by the rmw will be used here to run the ASTs. The basic
-- 
1.8.3.2


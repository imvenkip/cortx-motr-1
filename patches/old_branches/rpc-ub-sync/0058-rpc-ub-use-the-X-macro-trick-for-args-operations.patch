From c250994c1a2bf805f44346dc091802a6a1e587ca Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Sun, 24 Mar 2013 22:56:35 +0200
Subject: [PATCH 58/63] rpc-ub: use the "X macro" trick for args operations

Inspired by http://www.drdobbs.com/cpp/the-x-macro/228700289 .
The good thing is that the names of arguments, their default values,
and upper limits are kept in a single "table" (note the definition of `ARGS').
There is also less boilerplate code for an error to squeeze into.
Hopefully, this change does not hurt code readability.
---
 rpc/ub/ub.c | 88 +++++++++++++++++++++++++++++--------------------------------
 1 file changed, 42 insertions(+), 46 deletions(-)

diff --git a/rpc/ub/ub.c b/rpc/ub/ub.c
index 6fe7696..cc770f3 100644
--- a/rpc/ub/ub.c
+++ b/rpc/ub/ub.c
@@ -38,56 +38,39 @@
  * CLI arguments
  * ---------------------------------------------------------------- */
 
+/* X(name, defval, max) */
+#define ARGS                    \
+	X(nr_conns,   1, 10000) \
+	X(nr_slots,  15,   100) \
+	X(nr_msgs,  100,  1000) \
+	X(msg_len,   32,  8192)
+
 struct args {
-	unsigned int a_nr_conns;
-	unsigned int a_nr_slots;
-	unsigned int a_nr_msgs;
-	unsigned int a_msg_len;
+#define X(name, defval, max)  unsigned int a_ ## name;
+	ARGS
+#undef X
 };
 
+static struct args g_args;
+
 /** Assigns default values to the arguments. */
 static void args_init(struct args *args)
 {
-	args->a_nr_conns = 1;
-	args->a_nr_slots = 15;
-	args->a_nr_msgs  = 100;
-	args->a_msg_len  = 32;
-}
-
-enum { /* XXX TODO: Revise these values. */
-	MAX_NR_CONNS = 10000,
-	MAX_NR_SLOTS = 100,
-	MAX_NR_MSGS  = 1000,
-	MAX_MSG_LEN  = 8192
-};
-
-static int args_format_error(void)
-{
-	fprintf(stderr, "**ERROR** Invalid format of the string with options.\n"
-		"  Expected:"
-		" nr_conns=NUM,nr_slots=NUM,nr_msgs=NUM,msg_len=NUM\n");
-	return -EINVAL;
-}
-
-static bool check(unsigned int n, unsigned int max)
-{
-	return 0 < n && n <= max;
+#define X(name, defval, max)  args->a_ ## name = defval;
+	ARGS
+#undef X
 }
 
 static int args_check_limits(const struct args *args)
 {
-	if (check(args->a_nr_conns, MAX_NR_CONNS) &&
-	    check(args->a_nr_slots, MAX_NR_SLOTS) &&
-	    check(args->a_nr_msgs,  MAX_NR_MSGS) &&
-	    check(args->a_msg_len,  MAX_MSG_LEN))
+#define X(name, defval, max) \
+	&& 0 < args->a_ ## name && args->a_ ## name <= max
+
+	if (true ARGS)
 		return 0;
+#undef X
 
-	fprintf(stderr, "**ERROR** Parameter is out of limits, which are:\n"
-		"  nr_conns: 1..%u\n"
-		"  nr_slots: 1..%u\n"
-		"  nr_msgs:  1..%u\n"
-		"  msg_len:  1..%u\n",
-		MAX_NR_CONNS, MAX_NR_SLOTS, MAX_NR_MSGS, MAX_MSG_LEN);
+	fprintf(stderr, "Value is out of bounds\n");
 	return -EINVAL;
 }
 
@@ -106,6 +89,17 @@ static bool token_matches(const char *token, const struct match *tbl)
 	return false;
 }
 
+static void args_help(void)
+{
+	fprintf(stderr, "Expecting a comma-separated list of parameter"
+		" specifications:\n");
+#define X(name, defval, max) \
+	fprintf(stderr, "  %s=NUM\t(default = %u, ulimit = %u)\n", \
+		#name, defval, max);
+	ARGS
+#undef X
+}
+
 static int args_parse(const char *src, struct args *dest)
 {
 	if (src == NULL || *src == 0)
@@ -113,11 +107,10 @@ static int args_parse(const char *src, struct args *dest)
 
 	char *s;
 	char *token;
-	struct match match_tbl[] = {
-		{ "nr_conns=%u", &dest->a_nr_conns },
-		{ "nr_slots=%u", &dest->a_nr_slots },
-		{ "nr_msgs=%u",  &dest->a_nr_msgs },
-		{ "msg_len=%u",  &dest->a_msg_len },
+	const struct match match_tbl[] = {
+#define X(name, defval, max) { #name "=%u", &dest->a_ ## name },
+		ARGS
+#undef X
 		{ NULL, NULL }
 	};
 
@@ -126,13 +119,16 @@ static int args_parse(const char *src, struct args *dest)
 		return -ENOMEM;
 
 	while ((token = strsep(&s, ",")) != NULL) {
-		if (!token_matches(token, match_tbl))
-			return args_format_error();
+		if (!token_matches(token, match_tbl)) {
+			fprintf(stderr, "Unable to parse `%s'\n", token);
+			args_help();
+			return -EINVAL;
+		}
 	}
 	return args_check_limits(dest);
 }
 
-static struct args g_args;
+#undef ARGS
 
 /* ----------------------------------------------------------------
  * RPC client and server definitions
-- 
1.8.3.2


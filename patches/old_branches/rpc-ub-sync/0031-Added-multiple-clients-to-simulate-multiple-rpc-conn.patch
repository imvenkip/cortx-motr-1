From 9bf69c5ef12b22be1f51864dfe156236c0f2b68f Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Thu, 14 Mar 2013 15:59:12 +0200
Subject: [PATCH 31/63] Added multiple clients to simulate multiple rpc
 connections test.

---
 rpc/ub/ub.c | 67 ++++++++++++++++++++++++++++++++++---------------------------
 1 file changed, 37 insertions(+), 30 deletions(-)

diff --git a/rpc/ub/ub.c b/rpc/ub/ub.c
index 92b382e..0a14cab 100644
--- a/rpc/ub/ub.c
+++ b/rpc/ub/ub.c
@@ -38,44 +38,46 @@
 
 enum {
 	CLIENT_COB_DOM_ID  = 16,
-	SESSION_SLOTS      = 15,
-	MAX_RPCS_IN_FLIGHT = 1,
+	SESSION_SLOTS      = 15, /* @todo: play with this value! */
+	MAX_RPCS_IN_FLIGHT = 1,  /* @todo: play with this value! */
 	CONNECT_TIMEOUT    = 50,
 	MAX_RETRIES        = 5
 };
 
-/* @todo:
-   - move g_cctx, client_net_dom, client_dbenv, client_cob_dom,
-     etc, all client related stuff into a single structure.
-   - Check that slots are really utilized.
-   - define rpc client interface such that it can represent multiple clients.
- */
-
-#if 0
-#define CLIENT_ENDPOINT_ADDR    "0@lo:12345:34:*"
-#define SERVER_ENDPOINT_ADDR    "0@lo:12345:34:1"
-#define SERVER_ENDPOINT         "lnet:" SERVER_ENDPOINT_ADDR
+#ifdef UB_USE_LNET_XPORT
+#	define SERVER_ENDPOINT_ADDR "0@lo:12345:34:1"
+#	define SERVER_ENDPOINT      "lnet:" SERVER_ENDPOINT_ADDR
 
 static struct m0_net_xprt *g_xprt = &m0_net_lnet_xprt;
-#else
-#define CLIENT_ENDPOINT_ADDR "127.0.0.1:12345"
-#define SERVER_ENDPOINT_ADDR CLIENT_ENDPOINT_ADDR
-#define SERVER_ENDPOINT      "bulk-mem:" SERVER_ENDPOINT_ADDR
+#else /* !UB_USE_LNET_XPORT, used bulk-mem in-memroy xport instead */
+#	define SERVER_ENDPOINT_ADDR "127.0.0.1:54321"
+#	define SERVER_ENDPOINT      "bulk-mem:" SERVER_ENDPOINT_ADDR
 
 static struct m0_net_xprt  *g_xprt = &m0_net_bulk_mem_xprt;
 #endif
 
 /**
- * @todo: documentation.
+ * RPC client and related data structures used to represent one rpc client in UB
  */
 struct ub_rpc_client {
+	 /** RPC client context */
 	struct m0_rpc_client_ctx rc_ctx;
+
+	/** RPC client network domain associated with ub_rpc_client::rc_ctx */
 	struct m0_net_domain     rc_net_dom;
+
+	/** RPC client COB domain associated with ub_rpc_client::rc_ctx */
 	struct m0_cob_domain     rc_cob_dom;
+
+	/** RPC client DB associated with ub_rpc_client::rc_ctx */
 	struct m0_dbenv          rc_dbenv;
 };
 
-static struct ub_rpc_client g_client[1];
+/**
+ * RPC client instances used. They are used to simulate multiple RPC connections
+ * m0_rpc_conn utilisation in UB
+ */
+static struct ub_rpc_client g_client[3];
 
 #define NAME(ext) "rpc-ub" ext
 static char *g_argv[] = {
@@ -108,7 +110,8 @@ static const struct m0_rpc_item_ops ub_item_ops = {
  * ---------------------------------------------------------------- */
 
 static int _client_init(struct ub_rpc_client *client, uint32_t cob_dom_id,
-			const char *db_name, uint32_t slot_nr)
+			const char *db_name, uint32_t slot_nr,
+			const char *client_ep)
 {
 	int rc;
 
@@ -122,7 +125,7 @@ static int _client_init(struct ub_rpc_client *client, uint32_t cob_dom_id,
 	client->rc_ctx.rcx_db_name               = strdup(db_name);
 	client->rc_ctx.rcx_nr_slots              = slot_nr;
 
-	client->rc_ctx.rcx_local_addr            = CLIENT_ENDPOINT_ADDR;
+	client->rc_ctx.rcx_local_addr            = strdup(client_ep);
 	client->rc_ctx.rcx_remote_addr           = SERVER_ENDPOINT_ADDR;
 	client->rc_ctx.rcx_timeout_s             = CONNECT_TIMEOUT;
 	client->rc_ctx.rcx_max_rpcs_in_flight    = MAX_RPCS_IN_FLIGHT;
@@ -140,15 +143,19 @@ static void _client_fini(struct ub_rpc_client *client)
 
 	rc = m0_rpc_client_stop(&client->rc_ctx);
 	M0_ASSERT(rc == 0);
-	/* I know, db_name is not actually const pointer */
+
+	/* I know, db_name and local_addr are not actually const pointers */
 	m0_free((void*)client->rc_ctx.rcx_db_name);
+	m0_free((void*)client->rc_ctx.rcx_local_addr);
 	m0_net_domain_fini(&client->rc_net_dom);
 }
 
 static void _start(void)
 {
-	int i;
-	int rc;
+	int  i;
+	int  rc;
+	char cli_db[40];
+	char cli_ep[40];
 
 	rc = m0_net_xprt_init(g_xprt);
 	M0_ASSERT(rc == 0);
@@ -157,10 +164,10 @@ static void _start(void)
 	M0_ASSERT(rc == 0);
 
 	for (i = 0; i < ARRAY_SIZE(g_client); ++i) {
-		char clientdb[20];
-		snprintf(clientdb, ARRAY_SIZE(clientdb), ".client-db-%d", i);
-		rc = _client_init(&g_client[i], CLIENT_COB_DOM_ID + i,
-				  clientdb, SESSION_SLOTS);
+		snprintf(cli_db, ARRAY_SIZE(cli_db), ".client-db-%d", i);
+		snprintf(cli_ep, ARRAY_SIZE(cli_ep), "127.0.0.1:%d", 12345 - i);
+		rc = _client_init(&g_client[i], CLIENT_COB_DOM_ID + i, cli_db,
+				  SESSION_SLOTS, cli_ep);
 		M0_ASSERT(rc == 0);
 	}
 
@@ -230,7 +237,7 @@ static void fop_send(struct m0_rpc_session *session, size_t seqn)
 	rc = client_post(fop, session);
 	M0_UB_ASSERT(rc == 0);
 
-	/* @todo: revert back m0_fop_put(fop); */
+	m0_fop_put(fop);
 }
 
 /* ----------------------------------------------------------------
@@ -248,7 +255,7 @@ static void XXX_name_me(int iter M0_UNUSED)
 	   mero: NOTICE : [rpc/slot.c:584:m0_rpc_slot_reply_received] < rc=-71.
 	   Needs investigation!
 	 */
-	for (i = 0; i < 30; ++i) {
+	for (i = 0; i < 3; ++i) {
 		for (j = 0; j < ARRAY_SIZE(g_client); ++j) {
 			session = &g_client[j].rc_ctx.rcx_session;
 			fop_send(session, i);
-- 
1.8.3.2


From ad55651adaccce81330f5f8dd85c6698b3393fd5 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Tue, 12 Mar 2013 10:34:23 +0200
Subject: [PATCH 15/63] Add RPC client and service start/stop into RPC UB.

---
 m0t1fs/linux_kernel/st/st |  2 +-
 rpc/ub/rpc_ub_fops.c      | 72 ++++++++++++++++++++++++--------------
 rpc/ub/rpc_ub_fops.h      |  3 +-
 rpc/ub/ub.c               | 89 +++++++++++++++++++++++++++++++++++++++++------
 4 files changed, 126 insertions(+), 40 deletions(-)

diff --git a/m0t1fs/linux_kernel/st/st b/m0t1fs/linux_kernel/st/st
index d5de11a..aeceefb 100755
--- a/m0t1fs/linux_kernel/st/st
+++ b/m0t1fs/linux_kernel/st/st
@@ -16,7 +16,7 @@ die() { echo "$@" >&2; exit 1; }
 
 M0_CORE_DIR=`readlink -f $0`
 M0_CORE_DIR=${M0_CORE_DIR%/*/*/*/*}
-[[ "${M0_CORE_DIR##*/}" =~ ^mero ]] || die 'Unable to determine M0_CORE_DIR'
+# [[ "${M0_CORE_DIR##*/}" =~ ^mero ]] || die 'Unable to determine M0_CORE_DIR'
 
 ## Path to the file with configuration string for confd.
 CONF_FILE=$SANDBOX_DIR/conf.txt
diff --git a/rpc/ub/rpc_ub_fops.c b/rpc/ub/rpc_ub_fops.c
index f38579a..8d28c32 100644
--- a/rpc/ub/rpc_ub_fops.c
+++ b/rpc/ub/rpc_ub_fops.c
@@ -25,7 +25,14 @@
 #include "rpc/rpc_opcodes.h"
 #include "rpc/ub/rpc_ub_fops_xc.h"
 
-/* extern struct m0_reqh_service_type m0_rpc_service_type; */
+extern struct m0_reqh_service_type ds1_service_type;
+
+struct m0_fop_type m0_rpc_ub_req_fopt;
+struct m0_fop_type m0_rpc_ub_resp_fopt;
+
+/* -----------------------------------------------------------------------------
+   RPC UB request FOM declarations
+ * ---------------------------------------------------------------------------*/
 
 static int ub_req_fom_create(struct m0_fop *fop, struct m0_fom **m,
 			    struct m0_reqh *reqh);
@@ -33,8 +40,6 @@ static void ub_req_fom_fini(struct m0_fom *fom);
 static int ub_req_fom_tick(struct m0_fom *fom);
 static size_t ub_req_fom_home_locality(const struct m0_fom *fom);
 
-struct m0_fop_type m0_rpc_ub_req_fopt;
-
 static const struct m0_fom_type_ops ub_req_fom_type_ops = {
 	.fto_create = ub_req_fom_create,
 };
@@ -51,29 +56,9 @@ static const struct m0_fom_ops ub_req_fom_ops = {
 	.fo_home_locality = ub_req_fom_home_locality,
 };
 
-M0_INTERNAL void m0_rpc_ub_fops_init(void)
-{
-	int rc;
-
-	m0_xc_rpc_ub_fops_init();
-	rc = M0_FOP_TYPE_INIT(&m0_rpc_ub_req_fopt,
-		.name      = "RPC_UB_request",
-		.opcode    = M0_RPC_UB_REQ_OPCODE,
-		.xt        = ub_req_xc,
-		.rpc_flags = M0_RPC_ITEM_TYPE_ONEWAY,
-		.fom_ops   = &ub_req_fom_type_ops,
-		.sm        = &m0_generic_conf,
-                /* @todo: register own service for UBs!!! */
-		.svc_type  = NULL /* &m0_rpc_service_type */);
-	M0_ASSERT(rc == 0);
-}
-
-M0_INTERNAL void m0_rpc_ub_fops_fini(void)
-{
-	m0_fop_type_fini(&m0_rpc_ub_req_fopt);
-	m0_xc_rpc_ub_fops_fini();
-}
-
+/* -----------------------------------------------------------------------------
+   RPC UB request FOM definitions
+ * ---------------------------------------------------------------------------*/
 
 static int ub_req_fom_create(struct m0_fop *fop, struct m0_fom **m,
 			    struct m0_reqh *reqh)
@@ -106,6 +91,41 @@ static size_t ub_req_fom_home_locality(const struct m0_fom *fom)
 	return 0;
 }
 
+/* -----------------------------------------------------------------------------
+   RPC UB FOPs initialization/finalization
+ * ---------------------------------------------------------------------------*/
+
+M0_INTERNAL void m0_rpc_ub_fops_init(void)
+{
+	int rc;
+
+	m0_xc_rpc_ub_fops_init();
+
+        rc = M0_FOP_TYPE_INIT(&m0_rpc_ub_req_fopt,
+			      .name      = "RPC UB request",
+			      .opcode    = M0_RPC_UB_REQ_OPCODE,
+			      .xt        = ub_req_xc,
+			      .rpc_flags = M0_RPC_ITEM_TYPE_REQUEST,
+			      .fom_ops   = &ub_req_fom_type_ops,
+			      .sm        = &m0_generic_conf,
+			      /* use default `ds1_service_type' service, we do
+			       not need something more sophisticated yet: */
+			      .svc_type  = &ds1_service_type) ?:
+	     M0_FOP_TYPE_INIT(&m0_rpc_ub_resp_fopt,
+			      .name      = "RPC UB response",
+			      .opcode    = M0_RPC_UB_RESP_OPCODE,
+			      .xt        = ub_resp_xc,
+			      .rpc_flags = M0_RPC_ITEM_TYPE_REPLY);
+	M0_ASSERT(rc == 0);
+}
+
+M0_INTERNAL void m0_rpc_ub_fops_fini(void)
+{
+	m0_fop_type_fini(&m0_rpc_ub_req_fopt);
+	m0_fop_type_fini(&m0_rpc_ub_resp_fopt);
+	m0_xc_rpc_ub_fops_fini();
+}
+
 /*
  *  Local variables:
  *  c-indentation-style: "K&R"
diff --git a/rpc/ub/rpc_ub_fops.h b/rpc/ub/rpc_ub_fops.h
index 883742c..3c9fd39 100644
--- a/rpc/ub/rpc_ub_fops.h
+++ b/rpc/ub/rpc_ub_fops.h
@@ -43,8 +43,7 @@ struct ub_resp {
 } M0_XCA_RECORD;
 
 extern struct m0_fop_type m0_rpc_ub_req_fopt;
-/* @todo: make new fop */
-/* extern struct m0_fop_type m0_rpc_ub_resp_fopt; */
+extern struct m0_fop_type m0_rpc_ub_resp_fopt;
 
 M0_INTERNAL void m0_rpc_ub_fops_init(void);
 M0_INTERNAL void m0_rpc_ub_fops_fini(void);
diff --git a/rpc/ub/ub.c b/rpc/ub/ub.c
index 475d9e9..90d0f4c 100644
--- a/rpc/ub/ub.c
+++ b/rpc/ub/ub.c
@@ -21,15 +21,50 @@
 #include "lib/ub.h"        /* m0_ub_set */
 #include "net/net.h"       /* m0_net_xprt_init */
 #include "net/bulk_mem.h"  /* m0_net_bulk_mem_xprt */
+#include "ut/cs_service.h" /* m0_cs_default_stypes */
+#include "rpc/rpclib.h"
+#include "rpc/ub/rpc_ub_fops.h"
 
-static struct m0_net_xprt *g_xprt = &m0_net_bulk_mem_xprt;
+/* ----------------------------------------------------------------------------
+   Client and Server definitions
+ -----------------------------------------------------------------------------*/
 
-#if 0 /* XXX <<<<<<< */
 #define NAME(ext) "rpc-ub" ext
+#define CLIENT_ENDPOINT_ADDR    "127.0.0.1:12345"
+#define SERVER_ENDPOINT_ADDR    "127.0.0.1:12345"
+#define SERVER_ENDPOINT         "bulk-mem:" SERVER_ENDPOINT_ADDR
+
+enum {
+	CLIENT_COB_DOM_ID  = 16,
+	SESSION_SLOTS      = 15,
+	MAX_RPCS_IN_FLIGHT = 1,
+	CONNECT_TIMEOUT    = 5,
+	MAX_RETRIES        = 5,
+};
+
+static struct m0_net_xprt      *g_xprt = &m0_net_bulk_mem_xprt;
+static struct m0_net_domain     client_net_dom;
+static struct m0_dbenv          client_dbenv;
+static struct m0_cob_domain     client_cob_dom;
+
+static struct m0_rpc_client_ctx g_cctx = {
+	.rcx_net_dom               = &client_net_dom,
+	.rcx_local_addr            = CLIENT_ENDPOINT_ADDR,
+	.rcx_remote_addr           = SERVER_ENDPOINT_ADDR,
+	.rcx_db_name               = NAME(".cli.db"),
+	.rcx_dbenv                 = &client_dbenv,
+	.rcx_cob_dom_id            = CLIENT_COB_DOM_ID,
+	.rcx_cob_dom               = &client_cob_dom,
+	.rcx_nr_slots              = SESSION_SLOTS,
+	.rcx_timeout_s             = CONNECT_TIMEOUT,
+	.rcx_max_rpcs_in_flight    = MAX_RPCS_IN_FLIGHT,
+	.rcx_recv_queue_min_length = M0_NET_TM_RECV_QUEUE_DEF_LEN,
+};
+
 static char *g_argv[] = {
 	NAME(""), "-r", "-p", "-T", "AD", "-D", NAME(".db"),
 	"-S", NAME(".stob"), "-A", NAME(".addb-stob"), "-e", SERVER_ENDPOINT,
-	"-s", "XXX"
+	"-s", "ds1"
 };
 
 static struct m0_rpc_server_ctx g_sctx = {
@@ -37,28 +72,60 @@ static struct m0_rpc_server_ctx g_sctx = {
 	.rsx_xprts_nr         = 1,
 	.rsx_argv             = g_argv,
 	.rsx_argc             = ARRAY_SIZE(g_argv),
-	.rsx_service_types    = NULL, /* XXX */
-	.rsx_service_types_nr = 0,    /* XXX */
-	.rsx_log_file_name    = NAME(".log")
+	.rsx_service_types    = m0_cs_default_stypes,
+	.rsx_service_types_nr = 2,
+	.rsx_log_file_name    = NAME(".log"),
 };
 #undef NAME
 
-static struct m0_rpc_client_ctx g_cctx = {
-};
-#endif /* XXX >>>>>>> */
+/* ----------------------------------------------------------------------------
+   RPC Server and Client initialization, @todo: copy/paste...
+ -----------------------------------------------------------------------------*/
 
-static void XXX(int iter M0_UNUSED)
+static void _start(void)
 {
 	int rc;
 
 	rc = m0_net_xprt_init(g_xprt);
-	M0_UB_ASSERT(rc == 0);
+	M0_ASSERT(rc == 0);
+
+	rc = m0_net_domain_init(&client_net_dom, g_xprt, &m0_addb_proc_ctx);
+	M0_ASSERT(rc == 0);
+
+	rc = m0_rpc_server_start(&g_sctx);
+	M0_ASSERT(rc == 0);
 
+	rc = m0_rpc_client_start(&g_cctx);
+	M0_ASSERT(rc == 0);
+
+	m0_rpc_ub_fops_init();
+}
+
+static void _stop(void)
+{
+	int rc;
+
+	rc = m0_rpc_client_stop(&g_cctx);
+	M0_ASSERT(rc == 0);
+
+	m0_rpc_server_stop(&g_sctx);
+	m0_net_domain_fini(&client_net_dom);
 	m0_net_xprt_fini(g_xprt);
+	m0_rpc_ub_fops_fini();
+}
+
+/* ----------------------------------------------------------------------------
+   Test...
+ -----------------------------------------------------------------------------*/
+
+static void XXX(int iter M0_UNUSED)
+{
 }
 
 struct m0_ub_set m0_rpc_ub = {
 	.us_name = "rpc-ub",
+	.us_init = _start,
+	.us_fini = _stop,
 	.us_run  = {
 		{ .ub_name  = "XXX",
 		  .ub_iter  = 1,
-- 
1.8.3.2


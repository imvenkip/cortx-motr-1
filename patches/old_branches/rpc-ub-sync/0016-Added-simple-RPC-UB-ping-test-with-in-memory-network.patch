From bbe56ccbb54e06b4f0fc3da3cc37db36af15b61b Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Tue, 12 Mar 2013 13:28:33 +0200
Subject: [PATCH 16/63] Added simple RPC UB ping test with in-memory network
 layer.

---
 m0t1fs/linux_kernel/st/st |  2 +-
 rpc/ub/rpc_ub_fops.c      | 24 ++++++++++++++++++++++--
 rpc/ub/ub.c               | 32 ++++++++++++++++++++++++++++++++
 3 files changed, 55 insertions(+), 3 deletions(-)

diff --git a/m0t1fs/linux_kernel/st/st b/m0t1fs/linux_kernel/st/st
index aeceefb..d5de11a 100755
--- a/m0t1fs/linux_kernel/st/st
+++ b/m0t1fs/linux_kernel/st/st
@@ -16,7 +16,7 @@ die() { echo "$@" >&2; exit 1; }
 
 M0_CORE_DIR=`readlink -f $0`
 M0_CORE_DIR=${M0_CORE_DIR%/*/*/*/*}
-# [[ "${M0_CORE_DIR##*/}" =~ ^mero ]] || die 'Unable to determine M0_CORE_DIR'
+[[ "${M0_CORE_DIR##*/}" =~ ^mero ]] || die 'Unable to determine M0_CORE_DIR'
 
 ## Path to the file with configuration string for confd.
 CONF_FILE=$SANDBOX_DIR/conf.txt
diff --git a/rpc/ub/rpc_ub_fops.c b/rpc/ub/rpc_ub_fops.c
index 8d28c32..6a4e518 100644
--- a/rpc/ub/rpc_ub_fops.c
+++ b/rpc/ub/rpc_ub_fops.c
@@ -19,10 +19,12 @@
  */
 
 #include "lib/memory.h"
+#include "lib/ub.h"
 #include "fop/fop.h"
 #include "fop/fom.h"
 #include "fop/fom_generic.h"
 #include "rpc/rpc_opcodes.h"
+#include "rpc/ub/rpc_ub_fops.h"
 #include "rpc/ub/rpc_ub_fops_xc.h"
 
 extern struct m0_reqh_service_type ds1_service_type;
@@ -82,8 +84,26 @@ static void ub_req_fom_fini(struct m0_fom *fom)
 
 static int ub_req_fom_tick(struct m0_fom *fom)
 {
-	m0_fom_phase_set(fom, M0_FOPH_FINISH);
-	return M0_FSO_WAIT;
+	const struct ub_req *req;
+	struct ub_resp      *resp;
+	int rc;
+
+	if (m0_fom_phase(fom) < M0_FOPH_NR)
+		return m0_fom_tick_generic(fom);
+
+	M0_UB_ASSERT(fom->fo_rep_fop == NULL);
+	fom->fo_rep_fop = m0_fop_alloc(&m0_rpc_ub_resp_fopt, NULL);
+	M0_UB_ASSERT(fom->fo_rep_fop != NULL);
+
+	req  = m0_fop_data(fom->fo_fop);
+	resp = m0_fop_data(fom->fo_rep_fop);
+
+	resp->ur_seqn = req->ur_seqn;
+	rc = m0_buf_copy(&resp->ur_data, &req->ur_data);
+	M0_UB_ASSERT(rc == 0);
+
+	m0_fom_phase_move(fom, 0, M0_FOPH_SUCCESS);
+	return M0_FSO_AGAIN;
 }
 
 static size_t ub_req_fom_home_locality(const struct m0_fom *fom)
diff --git a/rpc/ub/ub.c b/rpc/ub/ub.c
index 90d0f4c..e532c6f 100644
--- a/rpc/ub/ub.c
+++ b/rpc/ub/ub.c
@@ -19,6 +19,8 @@
  */
 
 #include "lib/ub.h"        /* m0_ub_set */
+#include "lib/string.h"    /* strlen, strdup */
+#include "fop/fop.h"       /* m0_fop_alloc */
 #include "net/net.h"       /* m0_net_xprt_init */
 #include "net/bulk_mem.h"  /* m0_net_bulk_mem_xprt */
 #include "ut/cs_service.h" /* m0_cs_default_stypes */
@@ -114,12 +116,42 @@ static void _stop(void)
 	m0_rpc_ub_fops_fini();
 }
 
+static void fop_send(struct m0_rpc_session *session)
+{
+	int             rc;
+	const char     *data = "RPC UB data";
+	struct m0_fop  *fop;
+	struct ub_req  *req;
+	struct ub_resp *resp;
+
+	fop = m0_fop_alloc(&m0_rpc_ub_req_fopt, NULL);
+	M0_UB_ASSERT(fop != NULL);
+
+	req = m0_fop_data(fop);
+	req->ur_seqn = 0x12345678;
+	m0_buf_init(&req->ur_data, strdup(data), strlen(data));
+
+	fop->f_item.ri_nr_sent_max = MAX_RETRIES;
+	rc = m0_rpc_client_call(fop, session, NULL, 0);
+
+	M0_UB_ASSERT(rc == 0);
+	M0_UB_ASSERT(fop->f_item.ri_error == 0);
+	M0_UB_ASSERT(fop->f_item.ri_reply != 0);
+
+	resp = m0_fop_data(m0_rpc_item_to_fop(fop->f_item.ri_reply));
+	M0_UB_ASSERT(resp->ur_seqn == req->ur_seqn);
+	M0_UB_ASSERT(m0_buf_eq(&resp->ur_data, &req->ur_data));
+
+	m0_fop_put(fop);
+}
+
 /* ----------------------------------------------------------------------------
    Test...
  -----------------------------------------------------------------------------*/
 
 static void XXX(int iter M0_UNUSED)
 {
+	fop_send(&g_cctx.rcx_session);
 }
 
 struct m0_ub_set m0_rpc_ub = {
-- 
1.8.3.2


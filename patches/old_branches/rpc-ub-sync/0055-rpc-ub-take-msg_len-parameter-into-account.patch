From 4f0f43e49d50d6fc303044261857126f4b8111a9 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 22 Mar 2013 13:40:13 +0200
Subject: [PATCH 55/63] rpc-ub: take `msg_len' parameter into account

---
 rpc/ub/ub.c | 15 ++++++++++-----
 1 file changed, 10 insertions(+), 5 deletions(-)

diff --git a/rpc/ub/ub.c b/rpc/ub/ub.c
index 8217d48..c6e42cc 100644
--- a/rpc/ub/ub.c
+++ b/rpc/ub/ub.c
@@ -268,20 +268,25 @@ static void ub_item_replied(struct m0_rpc_item *item)
 	M0_UB_ASSERT(m0_buf_eq(&resp->ur_data, &req->uq_data));
 }
 
-static void fop_send(struct m0_rpc_session *session, size_t nr)
+static void fop_send(struct m0_rpc_session *session, size_t msg_id)
 {
 	struct m0_fop      *fop;
 	struct ub_req      *req;
 	struct m0_rpc_item *item;
+	char               *data;
 	int                 rc;
-	const char         *data = "RPC UB data"; /* XXX CONFIGUREME */
+
+	M0_PRE(g_args.a_msg_len > 0);
 
 	fop = m0_fop_alloc(&m0_rpc_ub_req_fopt, NULL);
 	M0_UB_ASSERT(fop != NULL);
 
 	req = m0_fop_data(fop);
-	req->uq_seqn = nr;
-	m0_buf_init(&req->uq_data, strdup(data), strlen(data));
+	req->uq_seqn = msg_id;
+	M0_ALLOC_ARR(data, g_args.a_msg_len);
+	M0_UB_ASSERT(data != NULL);
+	/* `data' will be freed by rpc layer (see m0_fop_fini()) */
+	m0_buf_init(&req->uq_data, data, g_args.a_msg_len);
 
 	item = &fop->f_item;
 	item->ri_nr_sent_max = MAX_RETRIES;
@@ -290,7 +295,7 @@ static void fop_send(struct m0_rpc_session *session, size_t nr)
 	item->ri_deadline    = 0; /* XXX CONFIGUREME? */
 	item->ri_prio        = M0_RPC_ITEM_PRIO_MID; /* XXX CONFIGUREME */
 
-	rc = m0_rpc_post_slot(item, session->s_slot_table[nr %
+	rc = m0_rpc_post_slot(item, session->s_slot_table[msg_id %
 							  g_args.a_nr_slots]);
 	M0_UB_ASSERT(rc == 0);
 	m0_fop_put(fop);
-- 
1.8.3.2


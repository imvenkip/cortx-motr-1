From 2b6711bdd9a58e033059f8603ce5be7a17940633 Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Sun, 19 May 2013 20:43:24 +0800
Subject: [PATCH 1/3] code to add "-i" CLI option. change option_add() to
 duplicate string inside.

---
 mero/conf.c | 102 +++++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 60 insertions(+), 42 deletions(-)

diff --git a/mero/conf.c b/mero/conf.c
index 875db9b..6faf650 100644
--- a/mero/conf.c
+++ b/mero/conf.c
@@ -43,11 +43,19 @@ static struct m0_sm_group g_grp;
 static void ast_thread_init(void);
 static void ast_thread_fini(void);
 
-/* Note: `s' is believed to be heap-allocated. */
-static void option_add(struct cs_args *args, char *s)
+/* Note: `s' is duplicated inside. So it can be freed later */
+static void option_add(struct cs_args *args, const char *s)
 {
 	M0_PRE(0 <= args->ca_argc && args->ca_argc < ARRAY_SIZE(args->ca_argv));
-	args->ca_argv[args->ca_argc++] = s;
+	args->ca_argv[args->ca_argc++] = m0_strdup(s);
+}
+
+static void options_dump(struct cs_args *args)
+{
+	int i;
+	M0_LOG(M0_FATAL, "Dumping args -------------------->>>>>>>>>>>>>");
+	for (i = 0; i <= args->ca_argc; i++)
+		M0_LOG(M0_FATAL, "%5d: %s", i, args->ca_argv[i]);
 }
 
 static void
@@ -55,7 +63,7 @@ fs_options_add(struct cs_args *args, const struct m0_conf_filesystem *fs)
 {
 	int i;
 	for (i = 0; fs->cf_params[i] != NULL; ++i)
-		option_add(args, m0_strdup(fs->cf_params[i]));
+		option_add(args, fs->cf_params[i]);
 }
 
 static const char *service_name[] = {
@@ -66,26 +74,30 @@ static const char *service_name[] = {
 	[M0_CST_DLM] = "dlm"         /* DLM service. */
 };
 
-static char *service_name_dup(const struct m0_conf_service *svc)
+static const char *service_name_get(const struct m0_conf_service *svc)
 {
 	M0_ASSERT(svc->cs_type > 0 && svc->cs_type < ARRAY_SIZE(service_name));
-	return m0_strdup(service_name[svc->cs_type]);
+	return service_name[svc->cs_type];
 }
 
 static void
 service_options_add(struct cs_args *args, const struct m0_conf_service *svc)
 {
 	int   i;
-	char *id = service_name_dup(svc);
+	const char *id = service_name_get(svc);
 
 	M0_ASSERT(id != NULL); /* XXX TODO: error checking */
 	for (i = 0; svc->cs_endpoints != NULL && svc->cs_endpoints[i] != NULL;
 	     ++i) {
-		option_add(args, m0_strdup("-e"));
-		option_add(args, m0_strdup(svc->cs_endpoints[i]));
+		option_add(args, "-e");
+		option_add(args, svc->cs_endpoints[i]);
+		if (svc->cs_type == M0_CST_IOS) {
+			option_add(args, "-i");
+			option_add(args, svc->cs_endpoints[i]);
+		}
 	}
 
-	option_add(args, m0_strdup("-s"));
+	option_add(args, "-s");
 	option_add(args, id);
 }
 
@@ -94,13 +106,13 @@ node_options_add(struct cs_args *args, const struct m0_conf_node *node)
 {
 	char buf[64] = {0};
 
-	option_add(args, m0_strdup("-m"));
+	option_add(args, "-m");
 	(void)snprintf(buf, ARRAY_SIZE(buf) - 1, "%u", node->cn_memsize);
-	option_add(args, m0_strdup(buf));
+	option_add(args, buf);
 
-	option_add(args, m0_strdup("-q"));
+	option_add(args, "-q");
 	(void)snprintf(buf, ARRAY_SIZE(buf) - 1, "%lu", node->cn_flags);
-	option_add(args, m0_strdup(buf));
+	option_add(args, buf);
 }
 
 /** Uses confc API to generate CLI arguments. */
@@ -122,7 +134,7 @@ static int conf_to_args(struct cs_args *dest, const char *confd_addr,
 	if (rc != 0)
 		goto end;
 
-	option_add(dest, m0_strdup("lt-m0d")); /* XXX Does the value matter? */
+	option_add(dest, "lt-m0d"); /* XXX Does the value matter? */
 
 	rc = m0_confc_open_sync(&fs, confc.cc_root, M0_BUF_INITS("filesystem"));
 	if (rc != 0)
@@ -192,7 +204,7 @@ M0_INTERNAL int cs_conf_to_args(struct cs_args *args, const char *confd_addr,
 	M0_ENTRY();
 	M0_PRE(confd_addr != NULL && profile != NULL);
 
-	M0_LOG(M0_DEBUG, "confd_addr=%s profile=%s", confd_addr, profile);
+	M0_LOG(M0_FATAL, "confd_addr=%s profile=%s", confd_addr, profile);
 
 	cctx.rcx_net_dom               = &client_net_dom;
 	cctx.rcx_local_addr            = client_ep;
@@ -239,6 +251,7 @@ net_dom:
 	m0_net_domain_fini(&client_net_dom);
 xprt:
 	m0_net_xprt_fini(xprt);
+	options_dump(args);
 	M0_RETURN(rc);
 }
 
@@ -250,12 +263,17 @@ M0_INTERNAL int cs_genders_to_args(struct cs_args *args, const char *argv0,
 	struct m0_mgmt_svc_conf       *svc;
 	struct m0_mgmt_service_ep_conf sep;
 	char                           nbuf[16];
-	char                          *bp;
-	size_t                         l;
+	enum {
+		BUF_LEN = 128
+	};
+	char                           bp[BUF_LEN];
 	int                            i;
 	int                            rc;
 
 	M0_PRE(args != NULL && args->ca_argc == 0);
+
+	M0_LOG(M0_FATAL, "argv0=%s genders=%s", argv0, genders);
+
 	rc = m0_mgmt_conf_init(&conf, genders);
 	if (rc != 0)
 		return rc;
@@ -264,31 +282,33 @@ M0_INTERNAL int cs_genders_to_args(struct cs_args *args, const char *argv0,
 		goto error;
 
 	/* NB: allocation failures checked at end of block */
-	option_add(args, m0_strdup(argv0));
-	option_add(args, m0_strdup("-r"));
-	l = strlen(node.mnc_m0d_ep) + strlen(m0_net_lnet_xprt.nx_name) + 2;
-	bp = m0_alloc(l);
-	if (bp != NULL)
-		sprintf(bp, "%s:%s", m0_net_lnet_xprt.nx_name, node.mnc_m0d_ep);
-	option_add(args, m0_strdup("-e"));
+	option_add(args, argv0);
+	option_add(args, "-r");
+
+	option_add(args, "-e");
+	M0_ASSERT(strlen(node.mnc_m0d_ep) + strlen(m0_net_lnet_xprt.nx_name) + 2
+		  <= BUF_LEN);
+	snprintf(bp, BUF_LEN, "%s:%s", m0_net_lnet_xprt.nx_name,
+		 node.mnc_m0d_ep);
 	option_add(args, bp);
+
 	if (node.mnc_max_rpc_msg != 0) {
-		option_add(args, m0_strdup("-m"));
+		option_add(args, "-m");
 		i = snprintf(nbuf, sizeof nbuf, "%lu", node.mnc_max_rpc_msg);
 		if (i >= sizeof nbuf) {
 			rc = -EINVAL;
 			goto done;
 		}
-		option_add(args, m0_strdup(nbuf));
+		option_add(args, nbuf);
 	}
 	if (node.mnc_recvq_min_len != 0) {
-		option_add(args, m0_strdup("-q"));
+		option_add(args, "-q");
 		i = snprintf(nbuf, sizeof nbuf, "%u", node.mnc_recvq_min_len);
 		if (i >= sizeof nbuf) {
 			rc = -EINVAL;
 			goto done;
 		}
-		option_add(args, m0_strdup(nbuf));
+		option_add(args, nbuf);
 	}
 
 	rc = m0_mgmt_service_ep_get(&conf, service_name[M0_CST_MDS], &sep);
@@ -299,25 +319,22 @@ M0_INTERNAL int cs_genders_to_args(struct cs_args *args, const char *argv0,
 	} else {
 		M0_ASSERT(sep.mse_ep_nr > 0);
 		/** @todo use HA or something to determine correct instance */
-		option_add(args, m0_strdup("-G"));
-		l = strlen(sep.mse_ep[0]) +
-		    strlen(m0_net_lnet_xprt.nx_name) + 2;
-		bp = m0_alloc(l);
-		if (bp != NULL)
-			sprintf(bp, "%s:%s",
-				m0_net_lnet_xprt.nx_name, sep.mse_ep[0]);
+		option_add(args, "-G");
+		M0_ASSERT(strlen(sep.mse_ep[0]) +
+			  strlen(m0_net_lnet_xprt.nx_name) + 2 <= BUF_LEN);
+		snprintf(bp, BUF_LEN, "%s:%s",
+			 m0_net_lnet_xprt.nx_name, sep.mse_ep[0]);
 		option_add(args, bp);
 		m0_mgmt_service_ep_free(&sep);
 	}
 	m0_tl_for(m0_mgmt_conf, &node.mnc_svc, svc) {
-		option_add(args, m0_strdup("-s"));
-		l = strlen(svc->msc_name) + strlen(svc->msc_uuid) + 2;
-		bp = m0_alloc(l);
-		if (bp != NULL)
-			sprintf(bp, "%s:%s", svc->msc_name, svc->msc_uuid);
+		option_add(args, "-s");
+		M0_ASSERT(strlen(svc->msc_name) + strlen(svc->msc_uuid) + 2 <=
+			  BUF_LEN);
+		snprintf(bp, BUF_LEN, "%s:%s", svc->msc_name, svc->msc_uuid);
 		option_add(args, bp);
 		for (i = 0; i < svc->msc_argc; ++i)
-			option_add(args, m0_strdup(svc->msc_argv[i]));
+			option_add(args, svc->msc_argv[i]);
 	} m0_tlist_endfor;
 	/* detect any earlier memory allocation failures */
 	for (i = 0; i < args->ca_argc && rc == 0; ++i) {
@@ -328,6 +345,7 @@ done:
 	m0_mgmt_node_free(&node);
 error:
 	m0_mgmt_conf_fini(&conf);
+	options_dump(args);
 	return rc;
 }
 
-- 
1.8.3.2


From ee91acd3bb8dfdc800a43154d4daf5ccae0198e1 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Thu, 21 Mar 2013 14:22:26 +0530
Subject: [PATCH 095/157] Coverage of few more error cases.

---
 layout/composite.c         |  16 ++++++-
 layout/layout_internal.h   |  25 ++++++++++-
 layout/ut/composite.c      | 108 +++++++++++++++++++++++++++++++--------------
 layout/ut/composite.h      |   3 +-
 layout/ut/layout.c         | 108 ++++++++++++++++++++++++++++++++++++++++-----
 layout/ut/layout.h         |   1 +
 layout/ut/layout_generic.c |   1 +
 7 files changed, 213 insertions(+), 49 deletions(-)

diff --git a/layout/composite.c b/layout/composite.c
index b0acf87..cc5cd13 100644
--- a/layout/composite.c
+++ b/layout/composite.c
@@ -1534,7 +1534,7 @@ static int ext_inmem_validate(struct m0_composite_layout *cl,
 		} else { /* ext_validation_kind == EXT_DEL_VALIDATION */
 			if (lr_ext->cle_state != M0_CLRES_INVALID &&
 			     (first_noninvalid_state != M0_CLRES_INVALID &&
-			      lr_ext->cle_state !=first_noninvalid_state)) {
+			      lr_ext->cle_state != first_noninvalid_state)) {
 				rc = -EINVAL;
 				M0_LOG(M0_ERROR, "lid %llu, layer %lu, "
 				       "Overlapping extent can not be deleted "
@@ -2349,7 +2349,10 @@ static int sublayout_id_indb_lookup(struct m0_composite_layout *cl,
 
 	pair_set(&pair, &key, &rec, cl, layer_idx,
 		 0 /* To be overwritten with the lookup */);
+	if (M0_FI_ENABLED("table_lookup_err"))
+		{ rc = L_TABLE_LOOKUP_ERR; goto err1_injected; }
 	rc = m0_table_lookup(tx, &pair);
+err1_injected:
 	if (rc != 0 && rc != -ENOENT)
 		/**
 		 * The later condition is since the number of layers is not
@@ -2435,7 +2438,10 @@ static int sublayout_id_indb_delete(const struct m0_composite_layout *cl,
 		 (unsigned long long)layer->clr_sl->l_id);
 
 	pair_set(&pair, &key, &rec, cl, layer->clr_idx, 0 /* Ignored */);
+	if (M0_FI_ENABLED("table_del_err"))
+		{ rc = L_TABLE_DEL_ERR; goto err1_injected; }
 	rc = m0_table_delete(tx, &pair);
+err1_injected:
 	if (rc != 0)
 		m0_layout__log("sublayout_id_indb_delete",
 			       "failed to delete from layer_sublayout table",
@@ -2462,8 +2468,11 @@ static int extmap_indb_add(struct m0_composite_layout *cl,
 
 	emap = emap_from_cl(cl);
 	prefix_set(&prefix, cl->cl_base.l_id, layer->clr_idx);
+	if (M0_FI_ENABLED("emap_obj_insert_err"))
+		{ rc = L_EMAP_OBJ_INSERT_ERR; goto err1_injected; }
 	rc = m0_emap_obj_insert(emap, tx, (struct m0_uint128 *)&prefix,
 				M0_CLRES_INVALID);
+err1_injected:
 	if (rc != 0) {
 		m0_layout__log("extmap_indb_add",
 			       "failed to insert into layer_emap",
@@ -2947,7 +2956,10 @@ static int layer_indb_delete(struct m0_composite_layout *cl,
 	}
 
 	prefix_set(&prefix, cl->cl_base.l_id, layer->clr_idx);
+	if (M0_FI_ENABLED("emap_obj_del_err"))
+		{ rc = L_EMAP_OBJ_DEL_ERR; goto err1_injected; }
 	rc = m0_emap_obj_delete(emap, tx, (struct m0_uint128 *)&prefix);
+err1_injected:
 	if (rc != 0) {
 		m0_layout__log("layer_indb_delete",
 			       "failed to delete from layer_emap",
@@ -3125,7 +3137,7 @@ static int composite_instance_build(struct m0_layout *l,
 		 (unsigned long long)fid->f_container,
 		 (unsigned long long)fid->f_key);
 
-	if (M0_FI_ENABLED("mem_err1")) { ci = NULL; goto err1_injected; }
+	if (M0_FI_ENABLED("mem_err")) { ci = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(ci);
 err1_injected:
 	if (ci == NULL) {
diff --git a/layout/layout_internal.h b/layout/layout_internal.h
index 4bc313e..cffe285 100644
--- a/layout/layout_internal.h
+++ b/layout/layout_internal.h
@@ -101,11 +101,34 @@ enum {
 	L_TABLE_INSERT_ERR         = -507,
 
 	/**
+	 * Simulation for m0_table_lookup() facing error e.g. in
+	 * the path of m0_layout_lookup() for a composite type of a layout.
+	 */
+	L_TABLE_LOOKUP_ERR         = -508,
+
+	/**
+	 * Simulation for m0_table_delete() facing error e.g. in
+	 * the path of m0_layout_delete() for a composite type of a layout.
+	 */
+	L_TABLE_DEL_ERR            = -509,
+
+	/**
 	 * Simulation for m0_emap_lookup() facing error e.g. in
 	 * the path of m0_layout_lookup() for composite type of a layout.
 	 */
-	L_EMAP_LOOKUP_ERR          = -508
+	L_EMAP_LOOKUP_ERR          = -510,
 
+	/**
+	 * Simulation for m0_emap_obj_insert() facing error e.g. while
+	 * adding a layer to a composite type of a layout.
+	 */
+	L_EMAP_OBJ_INSERT_ERR      = -511,
+
+	/**
+	 * Simulation for m0_emap_obj_delete() facing error e.g. while
+	 * deleting a layer from a composite type of a layout.
+	 */
+	L_EMAP_OBJ_DEL_ERR         = -512
 };
 
 /** ADDB context for the layout module. */
diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index b0bcaa0..8c2c6e6 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -438,7 +438,8 @@ static int composite_layers_add(struct m0_composite_layout *cl,
 					    extents_nr, tx);
 		if (layer_add_failure_test) {
 			M0_UT_ASSERT(rc == L_TABLE_INSERT_ERR ||
-				     rc == -ENOMEM || rc == -EINVAL);
+				     rc == -ENOMEM || rc == -EINVAL ||
+				     rc == L_EMAP_OBJ_INSERT_ERR);
 			M0_UT_ASSERT(cl->cl_layers_nr == i);
 			extentlist_free(&extents);
 			break;
@@ -1270,7 +1271,7 @@ int test_instance_composite(uint64_t lid, struct m0_layout_domain *domain,
 	M0_UT_ASSERT(m0_ref_read(&l->l_ref) == 1);
 	rc = m0_layout_instance_build(l, &gfid, &li);
 	if (failure_test)
-		M0_UT_ASSERT(rc == -ENOMEM || rc == -EPROTO);
+		M0_UT_ASSERT(rc == -ENOMEM);
 	else {
 		M0_UT_ASSERT(rc == 0);
 		M0_UT_ASSERT(m0_ref_read(&l->l_ref) == 2);
@@ -1323,7 +1324,8 @@ int test_layer_ops_composite(uint64_t lid,
 			     struct m0_layout_domain *domain,
 			     uint32_t layers_nr,
 			     uint32_t min_extents_nr,
-			     bool layer_add_failure_test)
+			     bool layer_add_failure_test,
+			     bool layer_del_failure_test)
 {
 	struct m0_layout           *l;
 	struct m0_layout           *l_copy_orig;
@@ -1361,8 +1363,13 @@ int test_layer_ops_composite(uint64_t lid,
 				  !CONTIGUOUS_EXTENTS, layer_add_failure_test);
 	if (layer_add_failure_test) {
 		M0_UT_ASSERT(rc == L_TABLE_INSERT_ERR || rc == -ENOMEM ||
-			     rc == -EINVAL);
+			     rc == -EINVAL || rc == L_EMAP_OBJ_INSERT_ERR);
 		//todo tx_fini()  or m0_db_tx_abort(txptr); ?
+		//todo Check organisation of the following
+		if (domain->ld_is_db_available) {
+			rc_tmp = m0_db_tx_commit(&tx);
+			M0_UT_ASSERT(rc_tmp == 0);
+		}
 
 		/* Delete the composite layout object. */
 		m0_layout_put(&cl->cl_base);
@@ -1421,6 +1428,26 @@ int test_layer_ops_composite(uint64_t lid,
 
 	/* Now, delete the layer. */
 	rc = m0_composite_layer_delete(cl, txptr);
+	if (layer_del_failure_test) {
+		M0_UT_ASSERT(rc == -EINVAL || rc == L_TABLE_DEL_ERR ||
+			     rc == L_EMAP_OBJ_DEL_ERR);
+		//todo tx_fini()  or m0_db_tx_abort(txptr); ?
+
+		//todo Check organisation of the following
+		if (domain->ld_is_db_available) {
+			rc_tmp = m0_db_tx_commit(&tx);
+			M0_UT_ASSERT(rc_tmp == 0);
+		}
+		/* Delete the composite layout object. */
+		m0_layout_put(&cl->cl_base);
+		M0_UT_ASSERT(m0_layout_find(domain, lid) == NULL);
+
+		/* Delete the precreated sublayouts. */
+		sublayouts_delete(domain, lid, layers_nr);
+
+		composite_layout_copy_delete(l_copy_orig);
+		return rc;
+	}
 	M0_UT_ASSERT(rc == 0);
 
 	if (domain->ld_is_db_available) {
@@ -2347,7 +2374,8 @@ int test_lookup_composite(uint64_t lid,
 	if (failure_test)
 		M0_UT_ASSERT(rc == -ENOENT || rc == -ENOMEM || rc == -EPROTO ||
 			     rc == -EINVAL || rc == LO_DECODE_ERR ||
-			     L_EMAP_LOOKUP_ERR);
+			     rc == L_TABLE_LOOKUP_ERR ||
+			     rc == L_EMAP_LOOKUP_ERR);
 	else
 		M0_UT_ASSERT(rc == 0);
 
@@ -2579,13 +2607,30 @@ int test_update_composite(uint64_t lid,
 	M0_UT_ASSERT(rc == 0);
 
 	rc = m0_layout_update(l1, &tx, &pair);
-	if (failure_test)
-		M0_UT_ASSERT(rc == LO_ENCODE_ERR || rc == L_TABLE_UPDATE_ERR);
-	else
-		M0_UT_ASSERT(rc == 0);
 	rc_tmp = m0_db_tx_commit(&tx);
 	M0_UT_ASSERT(rc_tmp == 0);
 
+	if (failure_test) {
+		M0_UT_ASSERT(rc == LO_ENCODE_ERR || rc == L_TABLE_UPDATE_ERR ||
+			     rc == L_TABLE_INSERT_ERR);
+
+		/*
+		 * todo In this case, verify that the update op has not altered
+		 * the layout.
+		 */
+		/* Delete the in-memory layout. */
+		m0_layout_put(l1);
+		M0_UT_ASSERT(list_lookup(domain, lid) == NULL);
+
+		/* Delete the precreated sublayouts. */
+		sublayouts_delete(domain, lid, layers_nr + 4);
+
+		m0_free(area);
+		return rc;
+	}
+
+	M0_UT_ASSERT(rc == 0);
+
 	/* verify that the ext is updated right. */
 	rc = m0_db_tx_init(&tx, domain->ld_dbenv, DBFLAGS);
 	M0_UT_ASSERT(rc == 0);
@@ -2603,37 +2648,34 @@ int test_update_composite(uint64_t lid,
 	 * layout with composite type that does not exist in the DB results
 	 * into the layout being written to the DB.
 	 */
-	if (!failure_test)
-		composite_layout_copy(l1, &l1_copy);
+	composite_layout_copy(l1, &l1_copy);
 
 	/* Delete the in-memory layout. */
 	m0_layout_put(l1);
 	M0_UT_ASSERT(list_lookup(domain, lid) == NULL);
 
-	if (!failure_test) {
-		//Verify structuring of code in this fn e.g. where shud be the
-		//check for user count, extent verification  etc.
-		/*
-		 * Lookup for the layout object from the DB to verify that its
-		 * user count is indeed updated.
-		 */
-		rc = layout_lookup(lid, domain, &m0_composite_layout_type,
-				   !FAILURE_TEST, &l2);
-		M0_UT_ASSERT(rc == 0);
-		M0_UT_ASSERT(l2->l_user_count == 100);
-		M0_UT_ASSERT(m0_ref_read(&l2->l_ref) == 1);
+	//Verify structuring of code in this fn e.g. where shud be the
+	//check for user count, extent verification  etc.
+	/*
+	 * Lookup for the layout object from the DB to verify that its
+	 * user count is indeed updated.
+	 */
+	rc = layout_lookup(lid, domain, &m0_composite_layout_type,
+			   !FAILURE_TEST, &l2);
+	M0_UT_ASSERT(rc == 0);
+	M0_UT_ASSERT(l2->l_user_count == 100);
+	M0_UT_ASSERT(m0_ref_read(&l2->l_ref) == 1);
 
-		/*
-		 * Compare the two layouts - one created earlier here and the
-		 * one that is looked up from the DB.
-		 */
-		composite_layout_compare(l1_copy, l2, false);
-		composite_layout_copy_delete(l1_copy);
+	/*
+	 * Compare the two layouts - one created earlier here and the
+	 * one that is looked up from the DB.
+	 */
+	composite_layout_compare(l1_copy, l2, false);
+	composite_layout_copy_delete(l1_copy);
 
-		/* Delete the in-memory layout. */
-		m0_layout_put(l2);
-		M0_UT_ASSERT(list_lookup(domain, lid) == NULL);
-	}
+	/* Delete the in-memory layout. */
+	m0_layout_put(l2);
+	M0_UT_ASSERT(list_lookup(domain, lid) == NULL);
 
 	/* Delete the precreated sublayouts. */
 	sublayouts_delete(domain, lid, layers_nr + 4);
diff --git a/layout/ut/composite.h b/layout/ut/composite.h
index 83a1a09..e9e1159 100644
--- a/layout/ut/composite.h
+++ b/layout/ut/composite.h
@@ -102,7 +102,8 @@ int test_layer_ops_composite(uint64_t lid,
 			     struct m0_layout_domain *domain,
 			     uint32_t layers_nr,
 			     uint32_t min_extents_nr,
-			     bool failure_test);
+			     bool layer_add_failure_test,
+			     bool layer_del_failure_test);
 int test_ext_lookup_composite(uint64_t lid,
 			      struct m0_layout_domain *domain,
 			      uint32_t layers_nr,
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index 95ec411..6c4c367 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -781,7 +781,6 @@ static void test_decode_failure(void)
 				   !CONTIGUOUS_EXTENTS, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 
-
 	/* todo layer_add failure for zeroth and the next layer? */
 }
 
@@ -1317,6 +1316,12 @@ static void test_instance_failure(void)
 				   LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
 				   FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EPROTO);
+
+	/* Simulate memory allocation error in m0_composite_instance_build(). */
+	lid = 13021;
+	m0_fi_enable_once("composite_instance_build", "mem_err");
+	rc = test_instance_composite(lid, &domain, FAILURE_TEST);
+	M0_UT_ASSERT(rc == -ENOMEM);
 }
 
 static void test_layer_ops_inmem(void)
@@ -1328,7 +1333,8 @@ static void test_layer_ops_inmem(void)
 
 	lid = 14001;
 	rc = test_layer_ops_composite(lid, &domain, 6, 10,
-				      !LAYER_ADD_FAILURE_TEST);
+				      !LAYER_ADD_FAILURE_TEST,
+				      !LAYER_DEL_FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 }
 
@@ -1339,19 +1345,30 @@ static void test_layer_ops_inmem_failure(void)
 
 	M0_UT_ASSERT(domain.ld_is_db_available == false);
 
+	/* Simulate memory allocation error while adding a layer. */
 	lid = 15001;
 	m0_fi_enable_off_n_on_m("layer_inmem_add", "mem_err", 1, 1);
 	rc = test_layer_ops_composite(lid, &domain, 5, 8,
-				      LAYER_ADD_FAILURE_TEST);
+				      LAYER_ADD_FAILURE_TEST,
+				      !LAYER_DEL_FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 	m0_fi_disable("layer_inmem_add", "mem_err");
 
+	/* Simulate invalid extent list error while adding a layer. */
 	lid = 15002;
 	m0_fi_enable_off_n_on_m("extentlist_build", "extents_nr_zero", 1, 1);
 	rc = test_layer_ops_composite(lid, &domain, 5, 8,
-				      LAYER_ADD_FAILURE_TEST);
+				      LAYER_ADD_FAILURE_TEST,
+				      !LAYER_DEL_FAILURE_TEST);
 	m0_fi_disable("extentlist_build", "extents_nr_zero");
 	M0_UT_ASSERT(rc == -EINVAL);
+
+	/* Try to delete the zeroth layer. */
+	lid = 15021;
+	rc = test_layer_ops_composite(lid, &domain, 1, 5,
+				      !LAYER_ADD_FAILURE_TEST,
+				      LAYER_DEL_FAILURE_TEST);
+	M0_UT_ASSERT(rc == -EINVAL);
 }
 
 static void test_layer_ext_ops_inmem(void)
@@ -1629,6 +1646,18 @@ static void test_lookup_failure(void)
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == L_EMAP_LOOKUP_ERR);
 
+	/*
+	 * Simulate sublayout id lookup error in the path of
+	 * comp_layout_indb_read().
+	 */
+	lid = 19027;
+	m0_fi_enable_off_n_on_m("sublayout_id_indb_lookup", "table_lookup_err",
+				4, 1);
+	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
+				   EXISTING_TEST, FAILURE_TEST);
+	M0_UT_ASSERT(rc == L_TABLE_LOOKUP_ERR);
+	m0_fi_disable("sublayout_id_indb_lookup", "table_lookup_err");
+
 	domain_ldb_available_set(&domain, false);
 }
 
@@ -1772,11 +1801,9 @@ static void test_add_failure(void)
 	M0_UT_ASSERT(rc == -EEXIST);
 
 	/*
-	 * Add a layout object with COMPOSITE layout type. Simulate error
-	 * while adding a layer to the DB to verify that in-memory layer
-	 * gets deleted.
+	 * Simulate error while adding a layer to the DB to verify that
+	 * the in-memory layer gets deleted.
 	 */
-
 	m0_fi_enable_off_n_on_m("sublayout_id_indb_add", "table_insert_err",
 				1, 1);
 	lid = 21022;
@@ -1894,6 +1921,30 @@ static void test_update_failure(void)
 				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == L_TABLE_UPDATE_ERR);
 
+	/*
+	 * Simulate layout add failure in the path of m0_layout_update() for
+	 * a composite type of a layout.
+	 */
+	m0_fi_enable_off_n_on_m("sublayout_id_indb_add", "table_insert_err",
+				4 /* layers_nr */, 1);
+	lid = 23003;
+	rc = test_update_composite(lid, &domain, 4, 5, !CONTIGUOUS_EXTENTS,
+				   EXISTING_TEST, FAILURE_TEST);
+	M0_UT_ASSERT(rc == L_TABLE_INSERT_ERR);
+	m0_fi_disable("sublayout_id_indb_add", "table_insert_err");
+
+	/*
+	 * Simulate layer add failure in the path of m0_layout_update() for
+	 * a composite type of a layout.
+	 */
+	m0_fi_enable_off_n_on_m("sublayout_id_indb_add", "table_insert_err",
+				5 /* layers_nr + 1 */, 1);
+	lid = 23004;
+	rc = test_update_composite(lid, &domain, 4, 5, !CONTIGUOUS_EXTENTS,
+				   EXISTING_TEST, FAILURE_TEST);
+	M0_UT_ASSERT(rc == L_TABLE_INSERT_ERR);
+	m0_fi_disable("sublayout_id_indb_add", "table_insert_err");
+
 	domain_ldb_available_set(&domain, false);
 }
 
@@ -2054,7 +2105,8 @@ static void test_layer_ops_indb(void)
 
 	lid = 26001;
 	rc = test_layer_ops_composite(lid, &domain, 5, 10,
-				      !LAYER_ADD_FAILURE_TEST);
+				      !LAYER_ADD_FAILURE_TEST,
+				      !LAYER_DEL_FAILURE_TEST);
 	M0_ASSERT(rc == 0);
 
 	domain_ldb_available_set(&domain, false);
@@ -2067,14 +2119,46 @@ static void test_layer_ops_indb_failure(void)
 
 	domain_ldb_available_set(&domain, true);
 
+	//todo Incorporate these tests into m0_layout_add/delete tests
+	/* Simulate sublayout id add error while adding a layer. */
 	lid = 27001;
-	m0_fi_enable_off_n_on_m("sublayout_id_indb_add",
-				"table_insert_err", 1, 1);
+	m0_fi_enable_off_n_on_m("sublayout_id_indb_add", "table_insert_err",
+				1, 1);
 	rc = test_layer_ops_composite(lid, &domain, 5, 10,
-				      LAYER_ADD_FAILURE_TEST);
+				      LAYER_ADD_FAILURE_TEST,
+				      !LAYER_DEL_FAILURE_TEST);
 	M0_UT_ASSERT(rc == L_TABLE_INSERT_ERR);
 	m0_fi_disable("sublayout_id_indb_add", "table_insert_err");
 
+	/* Simulate emap obj insert error while adding a layer. */
+	lid = 27002;
+	m0_fi_enable_off_n_on_m("extmap_indb_add", "emap_obj_insert_err",
+				1, 1);
+	rc = test_layer_ops_composite(lid, &domain, 5, 10,
+				      LAYER_ADD_FAILURE_TEST,
+				      !LAYER_DEL_FAILURE_TEST);
+	M0_UT_ASSERT(rc == L_EMAP_OBJ_INSERT_ERR);
+	m0_fi_disable("extmap_indb_add", "emap_obj_insert_err");
+
+	/* todo Following errors are happening for the zeroth layers. Make
+	 * sure they are covered for the non-zeroth and the somewhat last
+	 * layer. */
+	/* Simulate emap obj delete error while deleting a layer. */
+	lid = 27021;
+	m0_fi_enable_once("layer_indb_delete", "emap_obj_del_err");
+	rc = test_layer_ops_composite(lid, &domain, 5, 5,
+				      !LAYER_ADD_FAILURE_TEST,
+				      LAYER_DEL_FAILURE_TEST);
+	M0_UT_ASSERT(rc == L_EMAP_OBJ_DEL_ERR);
+
+	/* Simulate sublayout id delete error while deleting a layer. */
+	lid = 27022;
+	m0_fi_enable_once("sublayout_id_indb_delete", "table_del_err");
+	rc = test_layer_ops_composite(lid, &domain, 5, 5,
+				      !LAYER_ADD_FAILURE_TEST,
+				      LAYER_DEL_FAILURE_TEST);
+	M0_UT_ASSERT(rc == L_TABLE_DEL_ERR);
+
 	domain_ldb_available_set(&domain, false);
 }
 
diff --git a/layout/ut/layout.h b/layout/ut/layout.h
index 26d4fff..c0460c0 100644
--- a/layout/ut/layout.h
+++ b/layout/ut/layout.h
@@ -39,6 +39,7 @@ enum {
 	FAILURE_TEST             = true, /* Failure injected */
 	ADD_TO_DB                = true, /* Add layout/layer/ext to the DB */
 	LAYER_ADD_FAILURE_TEST   = true, /* Failure injected for layer add op */
+	LAYER_DEL_FAILURE_TEST   = true, /* Failure injected for layer del op */
 	LAYOUT_DESTROY           = true, /* Delete layout object */
 	UNIT_SIZE                = 4096, /* For pdclust layout type */
 	USER_COUNT_INCREMENTED   = true, /* For verification of user count */
diff --git a/layout/ut/layout_generic.c b/layout/ut/layout_generic.c
index d9e1fba..d83c713 100644
--- a/layout/ut/layout_generic.c
+++ b/layout/ut/layout_generic.c
@@ -259,6 +259,7 @@ int layout_lookup(uint64_t lid, struct m0_layout_domain *domain,
 	if (failure_test)
 		M0_UT_ASSERT(rc == -ENOENT || rc == -ENOMEM || rc == -EPROTO ||
 			     rc == -EINVAL || rc == LO_DECODE_ERR ||
+			     rc == L_TABLE_LOOKUP_ERR ||
 			     rc == L_EMAP_LOOKUP_ERR);
 	else
 		M0_UT_ASSERT(rc == 0);
-- 
1.8.3.2


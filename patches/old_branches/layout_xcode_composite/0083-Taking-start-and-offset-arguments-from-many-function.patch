From 490b7838085dae496ae093dc8920cfbab7690160 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Tue, 12 Mar 2013 12:42:12 +0530
Subject: [PATCH 083/157] Taking start and offset arguments from many function
 from the UT

---
 layout/ut/composite.c | 182 +++++++++------------------------
 layout/ut/composite.h |  26 -----
 layout/ut/layout.c    | 271 +++++++++++---------------------------------------
 3 files changed, 105 insertions(+), 374 deletions(-)

diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index b36629d..696764d 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -57,10 +57,8 @@ static void sublayout_build(uint64_t lid, struct m0_layout_domain *domain,
 	inline_test = lid % 5 ? LESS_THAN_INLINE : MORE_THAN_INLINE;
 	NKP_assign(enum_id, inline_test, 9, 109, 1200, &N, &K, &P);
 	rc = pdclust_layout_build(lid, domain, enum_id,
-				  N, K, P, &seed,
-				  10, 20,
-				  &pl, &list_enum, &lin_enum,
-				  false);
+				  N, K, P, &seed, 10, 20,
+				  &pl, &list_enum, &lin_enum, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 	*sublayout = m0_pdl_to_layout(pl);
 }
@@ -109,8 +107,8 @@ static void sublayout_delete(struct m0_layout_domain *domain,
 }
 
 /*
- * Deletes all the sublayouts including the one used as the original layout
- * (part of the zeroth layer).
+ * Deletes all the sublayouts including the one which is part of the zeroth
+ * layer.
  */
 static void sublayouts_delete(struct m0_layout_domain *domain,
 			      uint64_t composite_lid,
@@ -134,28 +132,29 @@ static void sublayouts_delete(struct m0_layout_domain *domain,
  */
 static void extentlist_build(struct m0_tl *extents,
 			     uint32_t extents_nr,
-			     m0_bindex_t min_start_offset,
-			     m0_bindex_t approximate_end_offset,
 			     bool if_contiguous_extents)
 {
+	m0_bindex_t                       start_offset;
+	m0_bindex_t                       end_offset;
 	struct m0_composite_layer_extent *lr_ext;
 	m0_bindex_t                       delta;
 	uint32_t                          i;
 
-	min_start_offset = 0;
-	approximate_end_offset = M0_BINDEX_MAX + 1;
+	start_offset = 0;
+	end_offset   = M0_BINDEX_MAX + 1;
 
 	/* Initialise a m0_tl for storing the extents. */
 	m0_composite_layer_ext_tlist_init(extents);
 	M0_UT_ASSERT(m0_composite_layer_ext_tlist_is_empty(extents));
 
-	delta = (approximate_end_offset - min_start_offset) / extents_nr;
+	delta = (end_offset - start_offset) / extents_nr;
 	for (i = 0; i < extents_nr; ++i) {
 		M0_ALLOC_PTR(lr_ext);
 		M0_UT_ASSERT(lr_ext != NULL);
-		lr_ext->cle_ext.e_start = min_start_offset + i * delta;
+		lr_ext->cle_ext.e_start = start_offset + i * delta;
 		if (i == extents_nr - 1)
-			lr_ext->cle_ext.e_end = M0_BINDEX_MAX + 1;
+			/* end_offset may not be exact multiple of delta. */
+			lr_ext->cle_ext.e_end = end_offset;
 		else
 			lr_ext->cle_ext.e_end = lr_ext->cle_ext.e_start + delta;
 
@@ -174,10 +173,10 @@ static void composite_layout_verify(struct m0_layout *l,
 				    uint64_t composite_lid,
 				    uint32_t layers_nr,
 				    uint32_t min_extents_nr,
-				    m0_bindex_t min_start_offset,
-				    m0_bindex_t approximate_end_offset,
 				    bool if_contiguous_extents)
 {
+	m0_bindex_t                       start_offset;
+	m0_bindex_t                       end_offset;
 	bool                              inline_test;
 	uint64_t                          sublayout_id;
 	struct m0_composite_layout       *cl;
@@ -193,8 +192,8 @@ static void composite_layout_verify(struct m0_layout *l,
 	uint32_t                          i;
 	uint32_t                          j;
 
-	min_start_offset = 0;
-	approximate_end_offset = M0_BINDEX_MAX + 1;
+	start_offset = 0;
+	end_offset   = M0_BINDEX_MAX + 1;
 
 	M0_UT_ASSERT(l != NULL);
 	M0_UT_ASSERT(l->l_type == &m0_composite_layout_type);
@@ -227,15 +226,13 @@ static void composite_layout_verify(struct m0_layout *l,
 
 		/* Verify the extents. */
 		j = 0;
-		delta = (approximate_end_offset - min_start_offset) /
-			extents_nr;
+		delta = (end_offset - start_offset) / extents_nr;
 		m0_tl_for(m0_composite_layer_ext, &layer->clr_extents, lr_ext) {
 			M0_UT_ASSERT(lr_ext->cle_ext.e_start ==
-				     min_start_offset + j * delta);
+				     start_offset + j * delta);
 			M0_UT_ASSERT(lr_ext->cle_ext.e_end ==
 				     lr_ext->cle_ext.e_start + delta ||
-				     lr_ext->cle_ext.e_end ==
-				     M0_BINDEX_MAX + 1);
+				     lr_ext->cle_ext.e_end == end_offset);
 			if (if_contiguous_extents || j % 2 == 0)
 				M0_UT_ASSERT(lr_ext->cle_state ==
 					     M0_CLRES_VALID);
@@ -341,8 +338,6 @@ static void composite_dump(const struct m0_composite_layout *cl)
 static int composite_build(uint64_t lid,
 			   struct m0_layout_domain *domain,
 			   uint32_t min_extents_nr,
-			   m0_bindex_t min_start_offset,
-			   m0_bindex_t approximate_end_offset,
 			   bool if_contiguous_extents,
 			   struct m0_composite_layout **cl,
 			   bool failure_test)
@@ -358,9 +353,7 @@ static int composite_build(uint64_t lid,
 	sublayout_build(sublayout_id, domain, &sublayout);
 
 	/* Build an extent list to be associated with the sublayout. */
-	extentlist_build(&extents, min_extents_nr,
-			 min_start_offset, approximate_end_offset,
-			 if_contiguous_extents);
+	extentlist_build(&extents, min_extents_nr, if_contiguous_extents);
 
 	/* Build a composite layout. */
 	rc = m0_composite_build(domain, lid, sublayout,
@@ -379,7 +372,6 @@ static int composite_build(uint64_t lid,
 
 	/* Verify the composite layout object contents. */
 	composite_layout_verify(l_from_cl, lid, 1, min_extents_nr,
-				min_start_offset, approximate_end_offset,
 				if_contiguous_extents);
 	return 0;
 }
@@ -395,8 +387,6 @@ static int composite_layers_add(struct m0_composite_layout *cl,
 				struct m0_db_tx *tx,
 				uint32_t layers_nr,
 				uint32_t min_extents_nr,
-				m0_bindex_t min_start_offset,
-				m0_bindex_t approximate_end_offset,
 				bool if_contiguous_extents,
 				bool layer_add_failure_test)
 {
@@ -419,9 +409,7 @@ static int composite_layers_add(struct m0_composite_layout *cl,
 		m0_layout_put(sublayout);
 
 		/* Build an extent list to be associated with the sublayout. */
-		extentlist_build(&extents, extents_nr,
-				 min_start_offset, approximate_end_offset,
-				 if_contiguous_extents);
+		extentlist_build(&extents, extents_nr, if_contiguous_extents);
 
 		rc = m0_composite_layer_add(cl, sublayout, &extents,
 					    extents_nr, tx);
@@ -435,10 +423,7 @@ static int composite_layers_add(struct m0_composite_layout *cl,
 
 		/* Verify the composite layout object contents. */
 		composite_layout_verify(&cl->cl_base, cl->cl_base.l_id, i + 1,
-					min_extents_nr,
-					min_start_offset,
-					approximate_end_offset,
-					if_contiguous_extents);
+					min_extents_nr, if_contiguous_extents);
 	}
 	return rc;
 }
@@ -455,8 +440,6 @@ static int composite_build_and_layers_add(uint64_t lid,
 					  struct m0_composite_layout **cl,
 					  uint32_t layers_nr,
 					  uint32_t min_extents_nr,
-					  m0_bindex_t min_start_offset,
-					  m0_bindex_t approximate_end_offset,
 					  bool if_contiguous_extents,
 					  bool failure_test,
 					  bool layer_add_failure_test)
@@ -465,12 +448,10 @@ static int composite_build_and_layers_add(uint64_t lid,
 
 	M0_UT_ASSERT(cl != NULL);
 	rc = composite_build(lid, domain, min_extents_nr,
-			     min_start_offset, approximate_end_offset,
 			     if_contiguous_extents, cl, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	rc = composite_layers_add(*cl, tx, layers_nr, min_extents_nr,
-				  min_start_offset, approximate_end_offset,
 				  if_contiguous_extents,
 				  layer_add_failure_test);
 	if (layer_add_failure_test)
@@ -494,8 +475,6 @@ int test_build_composite(uint64_t lid,
 			 struct m0_layout_domain *domain,
 			 uint32_t layers_nr,
 			 uint32_t min_extents_nr,
-			 m0_bindex_t min_start_offset,
-			 m0_bindex_t approximate_end_offset,
 			 bool if_contiguous_extents,
 			 bool failure_test)
 {
@@ -504,8 +483,7 @@ int test_build_composite(uint64_t lid,
 	int                         rc;
 
 	rc = composite_build_and_layers_add(lid, domain, NULL, &cl, layers_nr,
-					    min_extents_nr, min_start_offset,
-					    approximate_end_offset,
+					    min_extents_nr,
 					    if_contiguous_extents,
 					    failure_test,
 					    !LAYER_ADD_FAILURE_TEST);
@@ -642,11 +620,11 @@ static void composite_layout_buf_build(uint64_t composite_lid,
 				       struct m0_layout_domain *domain,
 				       uint32_t layers_nr,
 				       uint32_t min_extents_nr,
-				       m0_bindex_t min_start_offset,
-				       m0_bindex_t approximate_end_offset,
 				       bool if_contiguous_extents,
 				       struct m0_bufvec_cursor *dcur)
 {
+	m0_bindex_t                    start_offset;
+	m0_bindex_t                    end_offset;
 	m0_bcount_t                    nbytes;
 	uint64_t                       sublayout_id;
 	struct m0_layout              *sublayout;
@@ -662,8 +640,8 @@ static void composite_layout_buf_build(uint64_t composite_lid,
 	M0_UT_ASSERT(dcur != NULL);
 	M0_UT_ASSERT(layers_nr > 0);
 
-	min_start_offset = 0;
-	approximate_end_offset = M0_BINDEX_MAX + 1;
+	start_offset = 0;
+	end_offset   = M0_BINDEX_MAX + 1;
 
 	/* Build part of the buffer representing generic part of the layout. */
 	generic_buf_build(m0_composite_layout_type.lt_id, dcur);
@@ -709,13 +687,12 @@ static void composite_layout_buf_build(uint64_t composite_lid,
 						 sizeof layer_header);
 		M0_UT_ASSERT(nbytes == sizeof layer_header);
 
-		delta = (approximate_end_offset - min_start_offset) /
-			extents_nr;
+		delta = (end_offset - start_offset) / extents_nr;
 		//todo Assert everywhere applicable that extents_nr >= 2
 		for (j = 0; j < layer_header.clh_extents_nr; ++j) {
-			ext.e_start = min_start_offset + j * delta;
+			ext.e_start = start_offset + j * delta;
 			if (j == layer_header.clh_extents_nr - 1)
-				ext.e_end = M0_BINDEX_MAX + 1;
+				ext.e_end = end_offset;
 			else
 				ext.e_end = ext.e_start + delta;
 			nbytes = m0_bufvec_cursor_copyto(dcur, &ext,
@@ -739,8 +716,6 @@ int test_decode_composite(uint64_t lid,
 			  struct m0_layout_domain *domain,
 			  uint32_t layers_nr,
 			  uint32_t min_extents_nr,
-			  m0_bindex_t min_start_offset,
-			  m0_bindex_t approximate_end_offset,
 			  bool if_contiguous_extents,
 			  bool failure_test)
 {
@@ -757,7 +732,6 @@ int test_decode_composite(uint64_t lid,
 	bv = (struct m0_bufvec) M0_BUFVEC_INIT_BUF(&area, &num_bytes);
 	m0_bufvec_cursor_init(&cur, &bv);
 	composite_layout_buf_build(lid, domain, layers_nr, min_extents_nr,
-				   min_start_offset, approximate_end_offset,
 				   if_contiguous_extents, &cur);
 
 	/* Rewind the cursor. */
@@ -777,8 +751,6 @@ int test_decode_composite(uint64_t lid,
 
 		/* Verify the layout object built by m0_layout_decode(). */
 		composite_layout_verify(l, lid, layers_nr, min_extents_nr,
-					min_start_offset,
-					approximate_end_offset,
 					if_contiguous_extents);
 	}
 
@@ -808,11 +780,11 @@ static void composite_layout_buf_verify(uint64_t lid,
 					struct m0_layout_domain *domain,
 					uint32_t layers_nr,
 					uint32_t min_extents_nr,
-					m0_bindex_t min_start_offset,
-					m0_bindex_t approximate_end_offset,
 					bool if_contiguous_extents,
 					struct m0_bufvec_cursor *cur)
 {
+	m0_bindex_t                    start_offset;
+	m0_bindex_t                    end_offset;
 	uint32_t                       lt_id;
 	struct composite_header       *cl_header;
 	struct composite_layer_header *layer_header;
@@ -825,8 +797,8 @@ static void composite_layout_buf_verify(uint64_t lid,
 
 	M0_UT_ASSERT(cur != NULL);
 
-	min_start_offset = 0;
-	approximate_end_offset = M0_BINDEX_MAX + 1;
+	start_offset = 0;
+	end_offset   = M0_BINDEX_MAX + 1;
 
 	/* Verify generic part of the layout buffer. */
 	lbuf_verify(cur, &lt_id);
@@ -851,15 +823,14 @@ static void composite_layout_buf_verify(uint64_t lid,
 		M0_UT_ASSERT(layer_header->clh_extents_nr == extents_nr);
 		M0_UT_ASSERT(m0_bufvec_cursor_step(cur) >=
 			     layer_header->clh_extents_nr * sizeof ext);
-		delta = (approximate_end_offset - min_start_offset) /
-			extents_nr;
+		delta = (end_offset - start_offset) / extents_nr;
 		for (j = 0; j < layer_header->clh_extents_nr; ++j) {
 			ext = m0_bufvec_cursor_addr(cur);
 			m0_bufvec_cursor_move(cur, sizeof *ext);
 			M0_UT_ASSERT(ext->e_start ==
-				     min_start_offset + j * delta);
+				     start_offset + j * delta);
 			if (j == layer_header->clh_extents_nr - 1)
-				M0_UT_ASSERT(ext->e_end == M0_BINDEX_MAX + 1);
+				M0_UT_ASSERT(ext->e_end == end_offset);
 			else
 				M0_UT_ASSERT(ext->e_end ==
 					     ext->e_start + delta);
@@ -880,8 +851,6 @@ int test_encode_composite(uint64_t lid,
 			  struct m0_layout_domain *domain,
 			  uint32_t layers_nr,
 			  uint32_t min_extents_nr,
-			  m0_bindex_t min_start_offset,
-			  m0_bindex_t approximate_end_offset,
 			  bool if_contiguous_extents,
 			  bool failure_test)
 {
@@ -894,8 +863,7 @@ int test_encode_composite(uint64_t lid,
 
 	/* Build a layout object. */
 	rc = composite_build_and_layers_add(lid, domain, NULL, &cl, layers_nr,
-					    min_extents_nr, min_start_offset,
-					    approximate_end_offset,
+					    min_extents_nr,
 					    if_contiguous_extents,
 					    !FAILURE_TEST,
 					    !LAYER_ADD_FAILURE_TEST);
@@ -920,8 +888,7 @@ int test_encode_composite(uint64_t lid,
 	/* Verify the layout buffer produced by m0_layout_encode(). */
 	if (!failure_test)
 		composite_layout_buf_verify(lid, domain, layers_nr,
-					    min_extents_nr, min_start_offset,
-					    approximate_end_offset,
+					    min_extents_nr,
 					    if_contiguous_extents, &cur);
 
 	/* Delete the composite layout object. */
@@ -1012,8 +979,6 @@ int test_decode_encode_composite(uint64_t lid,
 				 struct m0_layout_domain *domain,
 				 uint32_t layers_nr,
 				 uint32_t min_extents_nr,
-				 m0_bindex_t min_start_offset,
-				 m0_bindex_t approximate_end_offset,
 				 bool if_contiguous_extents)
 {
 	void                    *area1;
@@ -1033,7 +998,6 @@ int test_decode_encode_composite(uint64_t lid,
 	m0_bufvec_cursor_init(&cur1, &bv1);
 
 	composite_layout_buf_build(lid, domain, layers_nr, min_extents_nr,
-				   min_start_offset, approximate_end_offset,
 				   if_contiguous_extents, &cur1);
 
 	/* Rewind the cursor. */
@@ -1223,8 +1187,6 @@ int test_encode_decode_composite(uint64_t lid,
 				 struct m0_layout_domain *domain,
 				 uint32_t layers_nr,
 				 uint32_t min_extents_nr,
-				 m0_bindex_t min_start_offset,
-				 m0_bindex_t approximate_end_offset,
 				 bool if_contiguous_extents)
 {
 	struct m0_composite_layout *cl;
@@ -1239,8 +1201,7 @@ int test_encode_decode_composite(uint64_t lid,
 
 	/* Build a layout object. */
 	rc = composite_build_and_layers_add(lid, domain, NULL, &cl, layers_nr,
-					    min_extents_nr, min_start_offset,
-					    approximate_end_offset,
+					    min_extents_nr,
 					    if_contiguous_extents,
 					    !FAILURE_TEST,
 					    !LAYER_ADD_FAILURE_TEST);
@@ -1311,8 +1272,7 @@ int test_instance_composite(uint64_t lid, struct m0_layout_domain *domain,
 
 	layers_nr = 5;
 	rc = composite_build_and_layers_add(lid, domain, NULL, &cl,
-					    layers_nr,
-					    8, lid * 100, lid * 100 * 100,
+					    layers_nr, 8,
 					    CONTIGUOUS_EXTENTS,
 					    !FAILURE_TEST,
 					    !LAYER_ADD_FAILURE_TEST);
@@ -1378,7 +1338,6 @@ int test_layer_op_composite(uint64_t lid,
 		rc = composite_build_and_layers_add(lid, domain,
 						    NULL, &cl,
 						    layers_nr, min_extents_nr,
-						    0, 0,
 						    !CONTIGUOUS_EXTENTS,
 						    !FAILURE_TEST,
 						    !LAYER_ADD_FAILURE_TEST);
@@ -1389,7 +1348,7 @@ int test_layer_op_composite(uint64_t lid,
 		 * layers to it.
 		 */
 		rc = test_add_composite(lid, domain, layers_nr,
-					min_extents_nr, 0, 0,
+					min_extents_nr,
 					!CONTIGUOUS_EXTENTS,
 					!LAYOUT_DESTROY, &l,
 					!DUPLICATE_TEST, !FAILURE_TEST,
@@ -1399,7 +1358,7 @@ int test_layer_op_composite(uint64_t lid,
 	}
 
 	composite_layout_copy(l, &l_copy_orig);
-	composite_layout_verify(l, lid, layers_nr, min_extents_nr, 0, 0,
+	composite_layout_verify(l, lid, layers_nr, min_extents_nr,
 				!CONTIGUOUS_EXTENTS);
 
 	if (domain->ld_is_db_available) {
@@ -1482,8 +1441,6 @@ static int ext_operate(enum extent_operation eop,
 		       struct m0_layout_domain *domain,
 		       uint32_t layers_nr,
 		       uint32_t min_extents_nr,
-		       m0_bindex_t min_start_offset,
-		       m0_bindex_t approximate_end_offset,
 		       bool if_contiguous_extents,
 		       uint32_t kind_of_extent_to_operate,
 		       uint64_t ext_state,
@@ -1493,16 +1450,12 @@ int test_ext_lookup_composite(uint64_t lid,
 			      struct m0_layout_domain *domain,
 			      uint32_t layers_nr,
 			      uint32_t min_extents_nr,
-			      m0_bindex_t min_start_offset,
-			      m0_bindex_t approximate_end_offset,
 			      bool if_contiguous_extents,
 			      uint32_t kind_of_extent_to_operate,
 			      bool failure_test)
 {
 	return ext_operate(EXTENT_LOOKUP, lid, domain,
-			   layers_nr, min_extents_nr,
-			   min_start_offset, approximate_end_offset,
-			   if_contiguous_extents,
+			   layers_nr, min_extents_nr, if_contiguous_extents,
 			   kind_of_extent_to_operate, M0_CLRES_INVALID,
 			   failure_test);
 }
@@ -1511,17 +1464,13 @@ int test_ext_add_composite(uint64_t lid,
 			   struct m0_layout_domain *domain,
 			   uint32_t layers_nr,
 			   uint32_t min_extents_nr,
-			   m0_bindex_t min_start_offset,
-			   m0_bindex_t approximate_end_offset,
 			   bool if_contiguous_extents,
 			   uint32_t kind_of_extent_to_operate,
 			   uint64_t ext_state,
 			   bool failure_test)
 {
 	return ext_operate(EXTENT_ADD, lid, domain,
-			   layers_nr, min_extents_nr,
-			   min_start_offset, approximate_end_offset,
-			   if_contiguous_extents,
+			   layers_nr, min_extents_nr, if_contiguous_extents,
 			   kind_of_extent_to_operate, ext_state,
 			   failure_test);
 }
@@ -1530,17 +1479,13 @@ int test_ext_state_update_composite(uint64_t lid,
 				    struct m0_layout_domain *domain,
 				    uint32_t layers_nr,
 				    uint32_t min_extents_nr,
-				    m0_bindex_t min_start_offset,
-				    m0_bindex_t approximate_end_offset,
 				    bool if_contiguous_extents,
 				    uint32_t kind_of_extent_to_operate,
 				    uint64_t ext_state,
 				    bool failure_test)
 {
 	return ext_operate(EXTENT_UPDATE, lid, domain,
-			   layers_nr, min_extents_nr,
-			   min_start_offset, approximate_end_offset,
-			   if_contiguous_extents,
+			   layers_nr, min_extents_nr, if_contiguous_extents,
 			   kind_of_extent_to_operate, ext_state,
 			   failure_test);
 }
@@ -1549,16 +1494,12 @@ int test_ext_delete_composite(uint64_t lid,
 			      struct m0_layout_domain *domain,
 			      uint32_t layers_nr,
 			      uint32_t min_extents_nr,
-			      m0_bindex_t min_start_offset,
-			      m0_bindex_t approximate_end_offset,
 			      bool if_contiguous_extents,
 			      uint32_t kind_of_extent_to_operate,
 			      bool failure_test)
 {
 	return ext_operate(EXTENT_DELETE, lid, domain,
-			   layers_nr, min_extents_nr,
-			   min_start_offset, approximate_end_offset,
-			   if_contiguous_extents,
+			   layers_nr, min_extents_nr, if_contiguous_extents,
 			   kind_of_extent_to_operate, M0_CLRES_INVALID,
 			   failure_test);
 }
@@ -1568,8 +1509,6 @@ static int ext_operate(enum extent_operation eop,
 		       struct m0_layout_domain *domain,
 		       uint32_t layers_nr,
 		       uint32_t min_extents_nr,
-		       m0_bindex_t min_start_offset,
-		       m0_bindex_t approximate_end_offset,
 		       bool if_contiguous_extents,
 		       uint32_t kind_of_extent_to_operate,
 		       uint64_t ext_state,
@@ -1599,8 +1538,6 @@ static int ext_operate(enum extent_operation eop,
 		rc = composite_build_and_layers_add(lid, domain,
 						    NULL, &cl,
 						    layers_nr, min_extents_nr,
-						    min_start_offset,
-						    approximate_end_offset,
 						    if_contiguous_extents,
 						    !FAILURE_TEST,
 						    !LAYER_ADD_FAILURE_TEST);
@@ -1611,9 +1548,7 @@ static int ext_operate(enum extent_operation eop,
 		 * layers to it.
 		 */
 		rc = test_add_composite(lid, domain, layers_nr,
-					min_extents_nr, min_start_offset,
-					approximate_end_offset,
-					if_contiguous_extents,
+					min_extents_nr, if_contiguous_extents,
 					!LAYOUT_DESTROY, &l,
 					!DUPLICATE_TEST, !FAILURE_TEST,
 					!LAYER_ADD_FAILURE_TEST);
@@ -1842,8 +1777,6 @@ int test_lookup_composite(uint64_t lid,
 			  struct m0_layout_domain *domain,
 			  uint32_t layers_nr,
 			  uint32_t min_extents_nr,
-			  m0_bindex_t min_start_offset,
-			  m0_bindex_t approximate_end_offset,
 			  bool if_contiguous_extents,
 			  bool existing_test,
 			  bool failure_test)
@@ -1859,9 +1792,7 @@ int test_lookup_composite(uint64_t lid,
 	/* If existing_test is true, first add a layout object to the DB. */
 	if (existing_test) {
 		rc = test_add_composite(lid, domain, layers_nr,
-					min_extents_nr, min_start_offset,
-					approximate_end_offset,
-					if_contiguous_extents,
+					min_extents_nr, if_contiguous_extents,
 					!LAYOUT_DESTROY, &l1,
 					!DUPLICATE_TEST, !FAILURE_TEST,
 					!LAYER_ADD_FAILURE_TEST);
@@ -1921,8 +1852,6 @@ int test_add_composite(uint64_t lid,
 		       struct m0_layout_domain *domain,
 		       uint32_t layers_nr,
 		       uint32_t min_extents_nr,
-		       m0_bindex_t min_start_offset,
-		       m0_bindex_t approximate_end_offset,
 		       bool if_contiguous_extents,
 		       bool layout_destroy, struct m0_layout **l_obj,
 		       bool duplicate_test,
@@ -1945,7 +1874,6 @@ int test_add_composite(uint64_t lid,
 
 	/* Build a layout object. */
 	rc = composite_build(lid, domain, min_extents_nr,
-			     min_start_offset, approximate_end_offset,
 			     if_contiguous_extents, &cl, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
@@ -1969,7 +1897,6 @@ int test_add_composite(uint64_t lid,
 	rc = m0_db_tx_init(&tx, domain->ld_dbenv, DBFLAGS);
 	M0_UT_ASSERT(rc == 0);
 	rc = composite_layers_add(cl, &tx, layers_nr, min_extents_nr,
-				  min_start_offset, approximate_end_offset,
 				  if_contiguous_extents,
 				  layer_add_failure_test);
 	if (layer_add_failure_test)
@@ -2021,8 +1948,6 @@ int test_update_composite(uint64_t lid,
 			  struct m0_layout_domain *domain,
 			  uint32_t layers_nr,
 			  uint32_t min_extents_nr,
-			  m0_bindex_t min_start_offset,
-			  m0_bindex_t approximate_end_offset,
 			  bool if_contiguous_extents,
 			  bool existing_test,
 			  bool failure_test)
@@ -2048,7 +1973,6 @@ int test_update_composite(uint64_t lid,
 
 	/* Build a layout object. */
 	rc = composite_build(lid, domain, min_extents_nr,
-			     min_start_offset, approximate_end_offset,
 			     if_contiguous_extents, &cl, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 	M0_UT_ASSERT(list_lookup(domain, lid) == &cl->cl_base);
@@ -2073,8 +1997,6 @@ int test_update_composite(uint64_t lid,
 		rc = m0_db_tx_init(&tx, domain->ld_dbenv, DBFLAGS);
 		M0_UT_ASSERT(rc == 0);
 		rc = composite_layers_add(cl, &tx, layers_nr, min_extents_nr,
-					  min_start_offset,
-					  approximate_end_offset,
 					  if_contiguous_extents,
 					  !LAYER_ADD_FAILURE_TEST);
 		M0_UT_ASSERT(rc == 0);
@@ -2085,8 +2007,6 @@ int test_update_composite(uint64_t lid,
 		M0_UT_ASSERT(domain->ld_is_db_available == true);
 		domain_ldb_available_set(domain, false);
 		rc = composite_layers_add(cl, NULL, layers_nr, min_extents_nr,
-					  min_start_offset,
-					  approximate_end_offset,
 					  if_contiguous_extents,
 					  !LAYER_ADD_FAILURE_TEST);
 		M0_UT_ASSERT(rc == 0);
@@ -2219,8 +2139,6 @@ int test_delete_composite(uint64_t lid,
 			  struct m0_layout_domain *domain,
 			  uint32_t layers_nr,
 			  uint32_t min_extents_nr,
-			  m0_bindex_t min_start_offset,
-			  m0_bindex_t approximate_end_offset,
 			  bool if_contiguous_extents,
 			  bool failure_test)
 {
@@ -2240,7 +2158,6 @@ int test_delete_composite(uint64_t lid,
 
 	/* Build a layout object. */
 	rc = composite_build(lid, domain, min_extents_nr,
-			     min_start_offset, approximate_end_offset,
 			     if_contiguous_extents, &cl, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 	M0_UT_ASSERT(list_lookup(domain, lid) == &cl->cl_base);
@@ -2262,7 +2179,6 @@ int test_delete_composite(uint64_t lid,
 	rc = m0_db_tx_init(&tx, domain->ld_dbenv, DBFLAGS);
 	M0_UT_ASSERT(rc == 0);
 	rc = composite_layers_add(cl, &tx, layers_nr, min_extents_nr,
-				  min_start_offset, approximate_end_offset,
 				  if_contiguous_extents,
 				  !LAYER_ADD_FAILURE_TEST);
 	rc_tmp = m0_db_tx_commit(&tx);
diff --git a/layout/ut/composite.h b/layout/ut/composite.h
index 2c6558c..d4daa67 100644
--- a/layout/ut/composite.h
+++ b/layout/ut/composite.h
@@ -43,39 +43,29 @@ int test_build_composite(uint64_t lid,
 			 struct m0_layout_domain *domain,
 			 uint32_t sublayouts_nr,
 			 uint32_t min_extents_nr,
-			 m0_bindex_t min_start_offset,
-			 m0_bindex_t approximate_end_address,
 			 bool if_contiguous_extents,
 			 bool failure_test);
 int test_decode_composite(uint64_t lid,
 			  struct m0_layout_domain *domain,
 			  uint32_t sublayouts_nr,
 			  uint32_t min_extents_nr,
-			  m0_bindex_t min_start_offset,
-			  m0_bindex_t approximate_end_offset,
 			  bool if_contiguous_extents,
 			  bool failure_test);
 int test_encode_composite(uint64_t lid,
 			  struct m0_layout_domain *domain,
 			  uint32_t sublayouts_nr,
 			  uint32_t min_extents_nr,
-			  m0_bindex_t min_start_offset,
-			  m0_bindex_t approximate_end_offset,
 			  bool if_contiguous_extents,
 			  bool failure_test);
 int test_decode_encode_composite(uint64_t lid,
 				 struct m0_layout_domain *domain,
 				 uint32_t sublayouts_nr,
 				 uint32_t min_extents_nr,
-				 m0_bindex_t min_start_offset,
-				 m0_bindex_t approximate_end_offset,
 				 bool if_contiguous_extents);
 int test_encode_decode_composite(uint64_t lid,
 				 struct m0_layout_domain *domain,
 				 uint32_t sublayouts_nr,
 				 uint32_t min_extents_nr,
-				 m0_bindex_t min_start_offset,
-				 m0_bindex_t approximate_end_offset,
 				 bool if_contiguous_extents);
 int test_instance_composite(uint64_t lid,
 			    struct m0_layout_domain *domain,
@@ -84,8 +74,6 @@ int test_lookup_composite(uint64_t lid,
 			  struct m0_layout_domain *domain,
 			  uint32_t layers_nr,
 			  uint32_t min_extents_nr,
-			  m0_bindex_t min_start_offset,
-			  m0_bindex_t approximate_end_offset,
 			  bool if_contiguous_extents,
 			  bool existing_test,
 			  bool failure_test);
@@ -93,8 +81,6 @@ int test_add_composite(uint64_t lid,
 		       struct m0_layout_domain *domain,
 		       uint32_t sublayouts_nr,
 		       uint32_t min_extents_nr,
-		       m0_bindex_t min_start_offset,
-		       m0_bindex_t approximate_end_offset,
 		       bool if_contiguous_extents,
 		       bool layout_destroy, struct m0_layout **l_obj,
 		       bool duplicate_test,
@@ -104,8 +90,6 @@ int test_update_composite(uint64_t lid,
 			  struct m0_layout_domain *domain,
 			  uint32_t sublayouts_nr,
 			  uint32_t min_extents_nr,
-			  m0_bindex_t min_start_offset,
-			  m0_bindex_t approximate_end_offset,
 			  bool if_contiguous_extents,
 			  bool existing_test,
 			  bool failure_test);
@@ -113,8 +97,6 @@ int test_delete_composite(uint64_t lid,
 			  struct m0_layout_domain *domain,
 			  uint32_t sublayouts_nr,
 			  uint32_t min_extents_nr,
-			  m0_bindex_t min_start_offset,
-			  m0_bindex_t approximate_end_offset,
 			  bool if_contiguous_extents,
 			  bool failure_test);
 int test_layer_op_composite(uint64_t lid,
@@ -126,8 +108,6 @@ int test_ext_lookup_composite(uint64_t lid,
 			      struct m0_layout_domain *domain,
 			      uint32_t layers_nr,
 			      uint32_t min_extents_nr,
-			      m0_bindex_t min_start_offset,
-			      m0_bindex_t approximate_end_offset,
 			      bool if_contiguous_extents,
 			      uint32_t kind_of_extent_to_lookup,
 			      bool failure_test);
@@ -135,8 +115,6 @@ int test_ext_add_composite(uint64_t lid,
 			   struct m0_layout_domain *domain,
 			   uint32_t layers_nr,
 			   uint32_t min_extents_nr,
-			   m0_bindex_t min_start_offset,
-			   m0_bindex_t approximate_end_offset,
 			   bool if_contiguous_extents,
 			   uint32_t kind_of_extent_to_operate,
 			   uint64_t ext_state,
@@ -145,8 +123,6 @@ int test_ext_state_update_composite(uint64_t lid,
 				    struct m0_layout_domain *domain,
 				    uint32_t layers_nr,
 				    uint32_t min_extents_nr,
-				    m0_bindex_t min_start_offset,
-				    m0_bindex_t approximate_end_offset,
 				    bool if_contiguous_extents,
 				    uint32_t kind_of_extent_to_operate,
 				    uint64_t ext_state,
@@ -155,8 +131,6 @@ int test_ext_delete_composite(uint64_t lid,
 			      struct m0_layout_domain *domain,
 			      uint32_t layers_nr,
 			      uint32_t min_extents_nr,
-			      m0_bindex_t min_start_offset,
-			      m0_bindex_t approximate_end_offset,
 			      bool if_contiguous_extents,
 			      uint32_t kind_of_extent_to_operate,
 			      bool failure_test);
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index d41e61a..974e279 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -470,7 +470,6 @@ static void test_build(void)
 	 */
 	lid = 1021;
 	rc = test_build_composite(lid, &domain, 5, 10,
-				  lid * 100, lid * 100 * 100,
 				  CONTIGUOUS_EXTENTS, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
@@ -480,18 +479,6 @@ static void test_build(void)
 	 */
 	lid = 1022;
 	rc = test_build_composite(lid, &domain, 5, 11,
-				  lid * 100, lid * 100 * 100,
-				  !CONTIGUOUS_EXTENTS, !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	/*
-	 * Build a layout object with COMPOSITE layout type, with noncontiguous
-	 * extents in its layers and with the extents with the range from 0 to
-	 * M0_BINDEX_MAX and destroy it.
-	 */
-	lid = 1023;
-	rc = test_build_composite(lid, &domain, 5, 12,
-				  0, M0_BINDEX_MAX,
 				  !CONTIGUOUS_EXTENTS, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 }
@@ -634,7 +621,6 @@ static void test_decode(void)
 	 */
 	lid = 3021;
 	rc = test_decode_composite(lid, &domain, 7, 10,
-				   lid * 100, lid * 100 * 100,
 				   CONTIGUOUS_EXTENTS, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
@@ -644,7 +630,6 @@ static void test_decode(void)
 	 */
 	lid = 3022;
 	rc = test_decode_composite(lid, &domain, 8, 10,
-				   lid * 100, lid * 100 * 100,
 				   !CONTIGUOUS_EXTENTS, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 }
@@ -776,7 +761,6 @@ static void test_encode(void)
 	 */
 	lid = 5021;
 	rc = test_encode_composite(lid, &domain, 8, 25,
-				   lid * 100, lid * 100 * 100,
 				   CONTIGUOUS_EXTENTS, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
@@ -786,7 +770,6 @@ static void test_encode(void)
 	 */
 	lid = 5022;
 	rc = test_encode_composite(lid, &domain, 9, 25,
-				   lid * 100, lid * 100 * 100,
 				   !CONTIGUOUS_EXTENTS, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 }
@@ -882,7 +865,6 @@ static void test_decode_encode(void)
 	 */
 	lid = 7021;
 	rc = test_decode_encode_composite(lid, &domain, 5, 10,
-					  lid * 100, lid * 10 * 100,
 					  CONTIGUOUS_EXTENTS);
 	M0_UT_ASSERT(rc == 0);
 }
@@ -954,7 +936,6 @@ static void test_encode_decode(void)
 	 */
 	lid = 8021;
 	rc = test_encode_decode_composite(lid, &domain, 7, 27,
-					  lid * 100, lid * 100 * 100,
 					  CONTIGUOUS_EXTENTS);
 	M0_UT_ASSERT(rc == 0);
 }
@@ -1277,56 +1258,48 @@ static void test_composite_layer_ext_ops_internal(void)
 	/* Test cases for extent lookup. */
 	lid = 14001;
 	rc = test_ext_lookup_composite(lid, &domain, 3, 4,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS, NON_EXISTING,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14002;
 	rc = test_ext_lookup_composite(lid, &domain, 3, 5,
-				       lid * 100, lid * 100 * 100,
 				       CONTIGUOUS_EXTENTS, EXACT_EXISTING,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14003;
 	rc = test_ext_lookup_composite(lid, &domain, 3, 6,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS, EXACT_EXISTING,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14004;
 	rc = test_ext_lookup_composite(lid, &domain, 3, 7,
-				       lid * 100, lid * 100 * 100,
 				       CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14005;
 	rc = test_ext_lookup_composite(lid, &domain, 3, 8,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14006;
 	rc = test_ext_lookup_composite(lid, &domain, 3, 9,
-				       lid * 100, lid * 100 * 100,
 				       CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14007;
 	rc = test_ext_lookup_composite(lid, &domain, 4, 4,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14008;
 	rc = test_ext_lookup_composite(lid, &domain, 4, 5,
-				       lid * 100, lid * 100 * 100,
 				       CONTIGUOUS_EXTENTS,
 				       OVERLAPPING_COMPLETE,
 				       !FAILURE_TEST);
@@ -1334,7 +1307,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14009;
 	rc = test_ext_lookup_composite(lid, &domain, 4, 6,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS,
 				       OVERLAPPING_COMPLETE,
 				       !FAILURE_TEST);
@@ -1342,7 +1314,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14010;
 	rc = test_ext_lookup_composite(lid, &domain, 4, 7,
-				       lid * 100, lid * 100 * 100,
 				       CONTIGUOUS_EXTENTS,
 				       CONTAINED_WITHIN,
 				       !FAILURE_TEST);
@@ -1350,7 +1321,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14011;
 	rc = test_ext_lookup_composite(lid, &domain, 4, 8,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS,
 				       CONTAINED_WITHIN,
 				       !FAILURE_TEST);
@@ -1359,7 +1329,6 @@ static void test_composite_layer_ext_ops_internal(void)
 	/* Test cases for extent addition. */
 	lid = 14021;
 	rc = test_ext_add_composite(lid, &domain, 4, 7,
-				    lid * 100, lid * 100 * 100,
 				    !CONTIGUOUS_EXTENTS, NON_EXISTING,
 				    M0_CLRES_VALID,
 				    !FAILURE_TEST);
@@ -1367,7 +1336,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14022;
 	rc = test_ext_add_composite(lid, &domain, 4, 8,
-				    lid * 100, lid * 100 * 100,
 				    CONTIGUOUS_EXTENTS, EXACT_EXISTING,
 				    M0_CLRES_VALID,
 				    !FAILURE_TEST);
@@ -1375,7 +1343,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14023;
 	rc = test_ext_add_composite(lid, &domain, 4, 4,
-				    lid * 100, lid * 100 * 100,
 				    !CONTIGUOUS_EXTENTS, EXACT_EXISTING,
 				    M0_CLRES_VALID,
 				    !FAILURE_TEST);
@@ -1383,7 +1350,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14024;
 	rc = test_ext_add_composite(lid, &domain, 4, 5,
-				    lid * 100, lid * 100 * 100,
 				    CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
 				    M0_CLRES_VALID,
 				    !FAILURE_TEST);
@@ -1391,7 +1357,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14025;
 	rc = test_ext_add_composite(lid, &domain, 4, 6,
-				    lid * 100, lid * 100 * 100,
 				    !CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
 				    M0_CLRES_VALID,
 				    !FAILURE_TEST);
@@ -1399,7 +1364,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14026;
 	rc = test_ext_add_composite(lid, &domain, 4, 7,
-				    lid * 100, lid * 100 * 100,
 				    CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
 				    M0_CLRES_VALID,
 				    !FAILURE_TEST);
@@ -1407,7 +1371,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14027;
 	rc = test_ext_add_composite(lid, &domain, 4, 8,
-				    lid * 100, lid * 100 * 100,
 				    CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
 				    M0_CLRES_VALID,
 				    !FAILURE_TEST);
@@ -1415,7 +1378,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14028;
 	rc = test_ext_add_composite(lid, &domain, 4, 4,
-				    lid * 100, lid * 100 * 100,
 				    CONTIGUOUS_EXTENTS, OVERLAPPING_COMPLETE,
 				    M0_CLRES_VALID,
 				    !FAILURE_TEST);
@@ -1423,7 +1385,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14029;
 	rc = test_ext_add_composite(lid, &domain, 4, 5,
-				    lid * 100, lid * 100 * 100,
 				    !CONTIGUOUS_EXTENTS, OVERLAPPING_COMPLETE,
 				    M0_CLRES_VALID,
 				    !FAILURE_TEST);
@@ -1431,7 +1392,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14030;
 	rc = test_ext_add_composite(lid, &domain, 4, 6,
-				    lid * 100, lid * 100 * 100,
 				    CONTIGUOUS_EXTENTS, CONTAINED_WITHIN,
 				    M0_CLRES_VALID,
 				    !FAILURE_TEST);
@@ -1439,7 +1399,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14031;
 	rc = test_ext_add_composite(lid, &domain, 4, 6,
-				    lid * 100, lid * 100 * 100,
 				    !CONTIGUOUS_EXTENTS, CONTAINED_WITHIN,
 				    M0_CLRES_VALID,
 				    !FAILURE_TEST);
@@ -1449,7 +1408,6 @@ static void test_composite_layer_ext_ops_internal(void)
 	//todo Cover other cases with the flattening state addition
 	lid = 14032;
 	rc = test_ext_add_composite(lid, &domain, 4, 6,
-				    lid * 100, lid * 100 * 100,
 				    !CONTIGUOUS_EXTENTS, NON_EXISTING,
 				    M0_CLRES_FLATTENING,
 				    !FAILURE_TEST);
@@ -1459,7 +1417,6 @@ static void test_composite_layer_ext_ops_internal(void)
 	/* Test cases for extent updation. */
 	lid = 14041;
 	rc = test_ext_state_update_composite(lid, &domain, 5, 4,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     NON_EXISTING,
 					     M0_CLRES_VALID,
@@ -1468,7 +1425,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14042;
 	rc = test_ext_state_update_composite(lid, &domain, 5, 5,
-					     lid * 100, lid * 100 * 100,
 					     CONTIGUOUS_EXTENTS,
 					     EXACT_EXISTING,
 					     M0_CLRES_VALID,
@@ -1477,7 +1433,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14043;
 	rc = test_ext_state_update_composite(lid, &domain, 5, 6,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     EXACT_EXISTING,
 					     M0_CLRES_VALID,
@@ -1486,7 +1441,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14044;
 	rc = test_ext_state_update_composite(lid, &domain, 5, 7,
-					     lid * 100, lid * 100 * 100,
 					     CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_LEFT,
 					     M0_CLRES_VALID,
@@ -1495,7 +1449,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14045;
 	rc = test_ext_state_update_composite(lid, &domain, 5, 8,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_LEFT,
 					     M0_CLRES_VALID,
@@ -1504,7 +1457,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14046;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 4,
-					     lid * 100, lid * 100 * 100,
 					     CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_RIGHT,
 					     M0_CLRES_VALID,
@@ -1513,7 +1465,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14047;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 5,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_RIGHT,
 					     M0_CLRES_VALID,
@@ -1522,7 +1473,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14048;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 6,
-					     lid * 100, lid * 100 * 100,
 					     CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_COMPLETE,
 					     M0_CLRES_VALID,
@@ -1531,7 +1481,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14049;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 7,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_COMPLETE,
 					     M0_CLRES_VALID,
@@ -1540,7 +1489,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14050;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 6,
-					     lid * 100, lid * 100 * 100,
 					     CONTIGUOUS_EXTENTS,
 					     CONTAINED_WITHIN,
 					     M0_CLRES_VALID,
@@ -1549,7 +1497,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14051;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 6,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     CONTAINED_WITHIN,
 					     M0_CLRES_VALID,
@@ -1559,7 +1506,6 @@ static void test_composite_layer_ext_ops_internal(void)
 	//todo Update extent to have the flattening state
 	lid = 14061;
 	rc = test_ext_state_update_composite(lid, &domain, 5, 4,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     NON_EXISTING,
 					     M0_CLRES_FLATTENING,
@@ -1568,7 +1514,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14062;
 	rc = test_ext_state_update_composite(lid, &domain, 5, 5,
-					     lid * 100, lid * 100 * 100,
 					     CONTIGUOUS_EXTENTS,
 					     EXACT_EXISTING,
 					     M0_CLRES_FLATTENING,
@@ -1577,7 +1522,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14063;
 	rc = test_ext_state_update_composite(lid, &domain, 5, 6,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     EXACT_EXISTING,
 					     M0_CLRES_FLATTENING,
@@ -1586,7 +1530,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14064;
 	rc = test_ext_state_update_composite(lid, &domain, 5, 7,
-					     lid * 100, lid * 100 * 100,
 					     CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_LEFT,
 					     M0_CLRES_FLATTENING,
@@ -1595,7 +1538,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14065;
 	rc = test_ext_state_update_composite(lid, &domain, 5, 8,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_LEFT,
 					     M0_CLRES_FLATTENING,
@@ -1604,7 +1546,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14066;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 4,
-					     lid * 100, lid * 100 * 100,
 					     CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_RIGHT,
 					     M0_CLRES_FLATTENING,
@@ -1613,7 +1554,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14067;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 5,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_RIGHT,
 					     M0_CLRES_FLATTENING,
@@ -1622,7 +1562,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14068;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 6,
-					     lid * 100, lid * 100 * 100,
 					     CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_COMPLETE,
 					     M0_CLRES_FLATTENING,
@@ -1631,7 +1570,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14069;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 7,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     OVERLAPPING_COMPLETE,
 					     M0_CLRES_FLATTENING,
@@ -1640,7 +1578,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14070;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 6,
-					     lid * 100, lid * 100 * 100,
 					     CONTIGUOUS_EXTENTS,
 					     CONTAINED_WITHIN,
 					     M0_CLRES_FLATTENING,
@@ -1649,7 +1586,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14071;
 	rc = test_ext_state_update_composite(lid, &domain, 4, 6,
-					     lid * 100, lid * 100 * 100,
 					     !CONTIGUOUS_EXTENTS,
 					     CONTAINED_WITHIN,
 					     M0_CLRES_FLATTENING,
@@ -1659,56 +1595,48 @@ static void test_composite_layer_ext_ops_internal(void)
 	/* Test cases for extent deletion. */
 	lid = 14081;
 	rc = test_ext_delete_composite(lid, &domain, 4, 4,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS, NON_EXISTING,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14082;
 	rc = test_ext_delete_composite(lid, &domain, 4, 5,
-				       lid * 100, lid * 100 * 100,
 				       CONTIGUOUS_EXTENTS, EXACT_EXISTING,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14083;
 	rc = test_ext_delete_composite(lid, &domain, 4, 6,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS, EXACT_EXISTING,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14084;
 	rc = test_ext_delete_composite(lid, &domain, 4, 7,
-				       lid * 100, lid * 100 * 100,
 				       CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14085;
 	rc = test_ext_delete_composite(lid, &domain, 4, 8,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14086;
 	rc = test_ext_delete_composite(lid, &domain, 4, 4,
-				       lid * 100, lid * 100 * 100,
 				       CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14087;
 	rc = test_ext_delete_composite(lid, &domain, 4, 5,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
 				       !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	lid = 14088;
 	rc = test_ext_delete_composite(lid, &domain, 4, 6,
-				       lid * 100, lid * 100 * 100,
 				       CONTIGUOUS_EXTENTS,
 				       OVERLAPPING_COMPLETE,
 				       !FAILURE_TEST);
@@ -1716,7 +1644,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14089;
 	rc = test_ext_delete_composite(lid, &domain, 4, 7,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS,
 				       OVERLAPPING_COMPLETE,
 				       !FAILURE_TEST);
@@ -1724,7 +1651,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14090;
 	rc = test_ext_delete_composite(lid, &domain, 4, 6,
-				       lid * 100, lid * 100 * 100,
 				       CONTIGUOUS_EXTENTS,
 				       CONTAINED_WITHIN,
 				       !FAILURE_TEST);
@@ -1732,7 +1658,6 @@ static void test_composite_layer_ext_ops_internal(void)
 
 	lid = 14091;
 	rc = test_ext_delete_composite(lid, &domain, 4, 6,
-				       lid * 100, lid * 100 * 100,
 				       !CONTIGUOUS_EXTENTS,
 				       CONTAINED_WITHIN,
 				       !FAILURE_TEST);
@@ -1793,8 +1718,7 @@ static void test_lookup(void)
 	lid = 16001;
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 !EXISTING_TEST,
-				 FAILURE_TEST);
+				 !EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOENT);
 
 	/*
@@ -1804,8 +1728,7 @@ static void test_lookup(void)
 	lid = 16002;
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, LESS_THAN_INLINE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -1816,8 +1739,7 @@ static void test_lookup(void)
 	lid = 16003;
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, EXACT_INLINE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -1828,8 +1750,7 @@ static void test_lookup(void)
 	lid = 16004;
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -1839,8 +1760,7 @@ static void test_lookup(void)
 	lid = 16005;
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 !EXISTING_TEST,
-				 FAILURE_TEST);
+				 !EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOENT);
 
 	/*
@@ -1850,8 +1770,7 @@ static void test_lookup(void)
 	lid = 16006;
 	rc = test_lookup_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -1870,12 +1789,8 @@ static void test_lookup(void)
 	 * exist in the DB.
 	 */
 	lid = 16021;
-	rc = test_lookup_composite(lid, &domain,
-				   7, 30,
-				   lid * 100, lid * 100 * 100,
-				   !CONTIGUOUS_EXTENTS,
-				   !EXISTING_TEST,
-				   FAILURE_TEST);
+	rc = test_lookup_composite(lid, &domain, 7, 30, !CONTIGUOUS_EXTENTS,
+				   !EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOENT);
 
 	/*
@@ -1883,12 +1798,8 @@ static void test_lookup(void)
 	 * non-contiguous extents. Then perform lookup for it.
 	 */
 	lid = 16022;
-	rc = test_lookup_composite(lid, &domain,
-				   2, 30,
-				   lid * 100, lid * 100 * 100,
-				   !CONTIGUOUS_EXTENTS,
-				   EXISTING_TEST,
-				   !FAILURE_TEST);
+	rc = test_lookup_composite(lid, &domain, 2, 30, !CONTIGUOUS_EXTENTS,
+				   EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -1896,27 +1807,8 @@ static void test_lookup(void)
 	 * extents. Then perform lookup for it.
 	 */
 	lid = 16023;
-	rc = test_lookup_composite(lid, &domain,
-				   5, 5,
-				   lid * 100, lid * 100 * 100,
-				   CONTIGUOUS_EXTENTS,
-				   EXISTING_TEST,
-				   !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	/*
-	 * Add a layout object with COMPOSITE layout type and with the extents
-	 * ranging over the complete namespace (0 to M0_BINDEX_MAX). Then
-	 * perform lookup for it.
-	 * todo Take out such cases with M0_BINDEX_MAX range.
-	 */
-	lid = 16024;
-	rc = test_lookup_composite(lid, &domain,
-				   20, 5,
-				   0, M0_BINDEX_MAX,
-				   CONTIGUOUS_EXTENTS,
-				   EXISTING_TEST,
-				   !FAILURE_TEST);
+	rc = test_lookup_composite(lid, &domain, 5, 5, CONTIGUOUS_EXTENTS,
+				   EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	domain_ldb_available_set(&domain, false);
@@ -1937,8 +1829,7 @@ static void test_lookup_failure(void)
 	lid = 17001;
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 !EXISTING_TEST,
-				 FAILURE_TEST);
+				 !EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOENT);
 
 	/*
@@ -1948,8 +1839,7 @@ static void test_lookup_failure(void)
 	lid = 17002;
 	rc = test_lookup_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
-				 !EXISTING_TEST,
-				 FAILURE_TEST);
+				 !EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOENT);
 
 	/* Simulate pdclust_allocate() failure in m0_layout_lookup(). */
@@ -1957,8 +1847,7 @@ static void test_lookup_failure(void)
 	m0_fi_enable_off_n_on_m("pdclust_allocate", "mem_err", 1, 1);
 	rc = test_lookup_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
-				 EXISTING_TEST,
-				 FAILURE_TEST);
+				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 	m0_fi_disable("pdclust_allocate", "mem_err");
 
@@ -1967,8 +1856,7 @@ static void test_lookup_failure(void)
 	m0_fi_enable_once("m0_layout_decode", "lo_decode_err");
 	rc = test_lookup_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
-				 EXISTING_TEST,
-				 FAILURE_TEST);
+				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == LO_DECODE_ERR);
 
 	/* Furnish m0_layout_lookup() with unregistered layout type. */
@@ -1990,8 +1878,7 @@ static void test_lookup_failure(void)
 	m0_fi_enable_once("noninline_read", "cursor_init_err");
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 EXISTING_TEST,
-				 FAILURE_TEST);
+				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOENT);
 
 	/*
@@ -2002,8 +1889,7 @@ static void test_lookup_failure(void)
 	m0_fi_enable_once("noninline_read", "cursor_get_err");
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 EXISTING_TEST,
-				 FAILURE_TEST);
+				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 
 	/*
@@ -2014,8 +1900,7 @@ static void test_lookup_failure(void)
 	m0_fi_enable_once("noninline_read", "invalid_fid_err");
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 EXISTING_TEST,
-				 FAILURE_TEST);
+				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EPROTO);
 
 	domain_ldb_available_set(&domain, false);
@@ -2036,8 +1921,7 @@ static void test_add(void)
 	rc = test_add_pdclust(lid, &domain,
 			      LIST_ENUM_ID, LESS_THAN_INLINE,
 			      LAYOUT_DESTROY, NULL,
-			      !DUPLICATE_TEST,
-			      !FAILURE_TEST);
+			      !DUPLICATE_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -2049,8 +1933,7 @@ static void test_add(void)
 	rc = test_add_pdclust(lid, &domain,
 			      LIST_ENUM_ID, EXACT_INLINE,
 			      LAYOUT_DESTROY, NULL,
-			      !DUPLICATE_TEST,
-			      !FAILURE_TEST);
+			      !DUPLICATE_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -2061,8 +1944,7 @@ static void test_add(void)
 	rc = test_add_pdclust(lid, &domain,
 			      LIST_ENUM_ID, MORE_THAN_INLINE,
 			      LAYOUT_DESTROY, NULL,
-			      !DUPLICATE_TEST,
-			      !FAILURE_TEST);
+			      !DUPLICATE_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/* Add a layout object with PDCLUST layout type and LINEAR enum type. */
@@ -2070,29 +1952,24 @@ static void test_add(void)
 	rc = test_add_pdclust(lid, &domain,
 			      LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
 			      LAYOUT_DESTROY, NULL,
-			      !DUPLICATE_TEST,
-			      !FAILURE_TEST);
+			      !DUPLICATE_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/* Add a layout object with COMPOSITE layout type. */
 	lid = 18021;
 	rc = test_add_composite(lid, &domain, 7, 50,
-				lid * 100, lid * 100 * 100,
 				!CONTIGUOUS_EXTENTS,
 				LAYOUT_DESTROY, NULL,
-				!DUPLICATE_TEST,
-				!FAILURE_TEST,
+				!DUPLICATE_TEST, !FAILURE_TEST,
 				!LAYER_ADD_FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/* Add a layout object with COMPOSITE layout type. */
 	lid = 18022;
 	rc = test_add_composite(lid, &domain, 5, 25,
-				0, M0_BINDEX_MAX,
-				!CONTIGUOUS_EXTENTS,
+				CONTIGUOUS_EXTENTS,
 				LAYOUT_DESTROY, NULL,
-				!DUPLICATE_TEST,
-				!FAILURE_TEST,
+				!DUPLICATE_TEST, !FAILURE_TEST,
 				!LAYER_ADD_FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
@@ -2111,8 +1988,7 @@ static void test_add_failure(void)
 	rc = test_add_pdclust(lid, &domain,
 			      LIST_ENUM_ID, MORE_THAN_INLINE,
 			      LAYOUT_DESTROY, NULL,
-			      !DUPLICATE_TEST,
-			      FAILURE_TEST);
+			      !DUPLICATE_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == LO_ENCODE_ERR);
 
 	/*
@@ -2127,8 +2003,7 @@ static void test_add_failure(void)
 	rc = test_add_pdclust(lid, &domain,
 			      LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
 			      LAYOUT_DESTROY, NULL,
-			      DUPLICATE_TEST,
-			      !FAILURE_TEST);
+			      DUPLICATE_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EEXIST);
 
 	/*
@@ -2140,8 +2015,7 @@ static void test_add_failure(void)
 	rc = test_add_pdclust(lid, &domain,
 			      LIST_ENUM_ID, MORE_THAN_INLINE,
 			      LAYOUT_DESTROY, NULL,
-			      !DUPLICATE_TEST,
-			      FAILURE_TEST);
+			      !DUPLICATE_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOENT);
 
 	/*
@@ -2153,8 +2027,7 @@ static void test_add_failure(void)
 	rc = test_add_pdclust(lid, &domain,
 			      LIST_ENUM_ID, MORE_THAN_INLINE,
 			      LAYOUT_DESTROY, NULL,
-			      !DUPLICATE_TEST,
-			      FAILURE_TEST);
+			      !DUPLICATE_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOENT);
 
 	/*
@@ -2166,12 +2039,9 @@ static void test_add_failure(void)
 	 * DUPLICATE_TEST.
 	 */
 	lid = 19021;
-	rc = test_add_composite(lid, &domain, 4, 15,
-				lid * 100, lid * 100 * 100,
-				CONTIGUOUS_EXTENTS,
+	rc = test_add_composite(lid, &domain, 4, 15, CONTIGUOUS_EXTENTS,
 				LAYOUT_DESTROY, NULL,
-				DUPLICATE_TEST,
-				!FAILURE_TEST,
+				DUPLICATE_TEST, !FAILURE_TEST,
 				!LAYER_ADD_FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EEXIST);
 
@@ -2184,12 +2054,9 @@ static void test_add_failure(void)
 	m0_fi_enable_off_n_on_m("sublayout_id_indb_add", "table_insert_err",
 				1, 1);
 	lid = 19022;
-	rc = test_add_composite(lid, &domain, 4, 15,
-				lid * 100, lid * 100 * 100,
-				!CONTIGUOUS_EXTENTS,
+	rc = test_add_composite(lid, &domain, 4, 15, !CONTIGUOUS_EXTENTS,
 				LAYOUT_DESTROY, NULL,
-				!DUPLICATE_TEST,
-				!FAILURE_TEST,
+				!DUPLICATE_TEST, !FAILURE_TEST,
 				LAYER_ADD_FAILURE_TEST);
 	M0_UT_ASSERT(rc == L_TABLE_INSERT_ERR);
 	m0_fi_disable("sublayout_id_indb_add", "table_insert_err");
@@ -2213,8 +2080,7 @@ static void test_update(void)
 	lid = 20001;
 	rc = test_update_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 !EXISTING_TEST,
-				 !FAILURE_TEST);
+				 !EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -2224,8 +2090,7 @@ static void test_update(void)
 	lid = 20002;
 	rc = test_update_pdclust(lid, &domain,
 				 LIST_ENUM_ID, LESS_THAN_INLINE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -2236,8 +2101,7 @@ static void test_update(void)
 	lid = 20003;
 	rc = test_update_pdclust(lid, &domain,
 				 LIST_ENUM_ID, EXACT_INLINE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -2247,8 +2111,7 @@ static void test_update(void)
 	lid = 20004;
 	rc = test_update_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -2258,12 +2121,9 @@ static void test_update(void)
 	lid = 20005;
 	rc = test_update_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
-	//todo test_update_composite
-#if 1
 	/*
 	 * Update a layout object with COMPOSITE layout type, that does not
 	 * exist in the DB. This results into the layout being written newly
@@ -2271,23 +2131,17 @@ static void test_update(void)
 	 * See m0_layout_update().
 	 */
 	lid = 20006;
-	rc = test_update_composite(lid, &domain, 4, 15,
-				   lid * 100, lid * 100 * 100,
-				   !CONTIGUOUS_EXTENTS,
-				   !EXISTING_TEST,
-				   !FAILURE_TEST);
+	rc = test_update_composite(lid, &domain, 4, 15, !CONTIGUOUS_EXTENTS,
+				   !EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/* Update a layout object with COMPOSITE layout type. */
 	lid = 20007;
-	rc = test_update_composite(lid, &domain, 4, 15,
-				   lid * 100, lid * 100 * 100,
-				   !CONTIGUOUS_EXTENTS,
-				   EXISTING_TEST,
-				   !FAILURE_TEST);
+	rc = test_update_composite(lid, &domain, 4, 15, !CONTIGUOUS_EXTENTS,
+				   EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
-#endif
 
+	//todo Cover other combinations for composite
 	domain_ldb_available_set(&domain, false);
 }
 
@@ -2302,8 +2156,7 @@ static void test_update_failure(void)
 	m0_fi_enable_off_n_on_m("m0_layout_encode", "lo_encode_err", 1, 1);
 	rc = test_update_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 EXISTING_TEST,
-				 FAILURE_TEST);
+				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == LO_ENCODE_ERR);
 	m0_fi_disable("m0_layout_encode", "lo_encode_err");
 
@@ -2312,8 +2165,7 @@ static void test_update_failure(void)
 	m0_fi_enable_once("m0_layout_update", "table_update_err");
 	rc = test_update_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
-				 EXISTING_TEST,
-				 FAILURE_TEST);
+				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == L_TABLE_UPDATE_ERR);
 
 	domain_ldb_available_set(&domain, false);
@@ -2333,8 +2185,7 @@ static void test_delete(void)
 	lid = 22001;
 	rc = test_delete_pdclust(lid, &domain,
 				 LIST_ENUM_ID, LESS_THAN_INLINE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -2345,8 +2196,7 @@ static void test_delete(void)
 	lid = 22002;
 	rc = test_delete_pdclust(lid, &domain,
 				 LIST_ENUM_ID, EXACT_INLINE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -2356,8 +2206,7 @@ static void test_delete(void)
 	lid = 22003;
 	rc = test_delete_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -2367,16 +2216,13 @@ static void test_delete(void)
 	lid = 22004;
 	rc = test_delete_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
-				 EXISTING_TEST,
-				 !FAILURE_TEST);
+				 EXISTING_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/* Delete a layout object with COMPOSITE layout type. */
 	lid = 22021;
 	rc = test_delete_composite(lid, &domain, 4, 10,
-				   lid * 100, lid * 100 * 100,
-				   CONTIGUOUS_EXTENTS,
-				   !FAILURE_TEST);
+				   CONTIGUOUS_EXTENTS, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	//todo Cover other composite cases
@@ -2395,8 +2241,7 @@ static void test_delete_failure(void)
 	m0_fi_enable_off_n_on_m("m0_layout_encode", "lo_encode_err", 1, 1);
 	rc = test_delete_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
-				 EXISTING_TEST,
-				 FAILURE_TEST);
+				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == LO_ENCODE_ERR);
 	m0_fi_disable("m0_layout_encode", "lo_encode_err");
 
@@ -2408,8 +2253,7 @@ static void test_delete_failure(void)
 	lid = 23002;
 	rc = test_delete_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
-				 !EXISTING_TEST,
-				 FAILURE_TEST);
+				 !EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOENT);
 
 	/*
@@ -2420,8 +2264,7 @@ static void test_delete_failure(void)
 	m0_fi_enable_once("noninline_write", "cursor_get_err");
 	rc = test_delete_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 EXISTING_TEST,
-				 FAILURE_TEST);
+				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOENT);
 
 	/*
@@ -2432,8 +2275,7 @@ static void test_delete_failure(void)
 	m0_fi_enable_once("noninline_write", "cursor_del_err");
 	rc = test_delete_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
-				 EXISTING_TEST,
-				 FAILURE_TEST);
+				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 
 	/*
@@ -2445,8 +2287,7 @@ static void test_delete_failure(void)
 	m0_fi_enable_once("test_delete_pdclust", "nonzero_user_count_err");
 	rc = test_delete_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
-				 EXISTING_TEST,
-				 FAILURE_TEST);
+				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EPROTO);
 
 	domain_ldb_available_set(&domain, false);
-- 
1.8.3.2


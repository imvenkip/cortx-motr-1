From 4d71eb4d45bc6947ce8bba94d2f5aa4b875b78f2 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Fri, 15 Mar 2013 12:47:25 +0530
Subject: [PATCH 090/157] Covering a few error cases

---
 layout/composite.c    |  8 ++++--
 layout/layout_db.c    |  2 +-
 layout/layout_db.h    |  2 +-
 layout/ut/composite.c | 58 +++++++++++++++++++-------------------
 layout/ut/composite.h |  1 -
 layout/ut/layout.c    | 78 +++++++++++++++++++++++++++++++++++----------------
 6 files changed, 91 insertions(+), 58 deletions(-)

diff --git a/layout/composite.c b/layout/composite.c
index c39b6ab..ed15a2c 100644
--- a/layout/composite.c
+++ b/layout/composite.c
@@ -420,7 +420,9 @@ static int layer_inmem_add(struct m0_composite_layout *cl,
 		 (unsigned long long)sublayout->l_id,
 		 extlist, (unsigned long)ext_nr, is_user_count_adjust);
 
+	if (M0_FI_ENABLED("mem_err")) { layer = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(layer);
+err1_injected:
 	if (layer == NULL) {
 		m0_layout__log("layer_inmem_add",
 			       "failed to allocate composite layer",
@@ -508,8 +510,10 @@ static int composite_populate(struct m0_composite_layout *cl,
 
 	rc = layer_inmem_add(cl, sublayout, extlist, ext_nr,
 			     is_user_count_adjust, &layer);
-	M0_ASSERT(layer->clr_idx == 0);
-	m0_layout__populate(&cl->cl_base, user_count);
+	if (rc == 0) {
+		M0_ASSERT(layer->clr_idx == 0);
+		m0_layout__populate(&cl->cl_base, user_count);
+	}
 
 	M0_POST(ergo(rc == 0, composite_invariant(cl)));
 	M0_POST(ergo(rc != 0, composite_allocated_invariant(cl)));
diff --git a/layout/layout_db.c b/layout/layout_db.c
index c49a362..322eeb9 100644
--- a/layout/layout_db.c
+++ b/layout/layout_db.c
@@ -689,7 +689,7 @@ M0_INTERNAL int m0_layout_delete(struct m0_layout *l,
  *  c-indentation-style: "K&R"
  *  c-basic-offset: 8
  *  tab-width: 8
- *  fill-column: 79
+ *  fill-column: 80
  *  scroll-step: 1
  *  End:
  */
diff --git a/layout/layout_db.h b/layout/layout_db.h
index 7b6d7e8..c15f205 100644
--- a/layout/layout_db.h
+++ b/layout/layout_db.h
@@ -204,7 +204,7 @@ M0_INTERNAL int m0_layout_delete(struct m0_layout *l,
  *  c-indentation-style: "K&R"
  *  c-basic-offset: 8
  *  tab-width: 8
- *  fill-column: 79
+ *  fill-column: 80
  *  scroll-step: 1
  *  End:
  */
diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index 3a6cb81..2df5ec6 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -215,6 +215,7 @@ static void composite_layout_verify(struct m0_layout *l,
 
 	/* Verify the composite type specific data. */
 	m0_uint128_init(&seed, "sublayouts_build");
+	M0_UT_ASSERT(cl->cl_layers_nr == layers_nr);
 
 	/* Verify the layers */
 	i = 0;
@@ -351,10 +352,10 @@ static void composite_dump(const struct m0_composite_layout *cl)
 /* Builds a layout object with COMPOSITE layout type. */
 static int composite_build(uint64_t lid,
 			   struct m0_layout_domain *domain,
-			   uint32_t min_extents_nr,
+			   uint32_t extents_nr,
 			   bool if_contiguous_extents,
-			   struct m0_composite_layout **cl,
-			   bool failure_test)
+			   bool failure_test,
+			   struct m0_composite_layout **cl)
 {
 	struct m0_layout *sublayout;
 	uint64_t          sublayout_id;
@@ -367,27 +368,27 @@ static int composite_build(uint64_t lid,
 	sublayout_build(sublayout_id, domain, &sublayout);
 
 	/* Build an extent list to be associated with the sublayout. */
-	extentlist_build(&extents, min_extents_nr, if_contiguous_extents);
+	extentlist_build(&extents, extents_nr, if_contiguous_extents);
 
 	/* Build a composite layout. */
-	rc = m0_composite_build(domain, lid, sublayout,
-				&extents, min_extents_nr, cl);
+	rc = m0_composite_build(domain, lid, sublayout, &extents, extents_nr,
+				cl);
 	if (failure_test) {
 		M0_UT_ASSERT(rc == -ENOMEM);
 		extentlist_free(&extents);
 		sublayout_delete(domain, sublayout_id);
-		return rc;
-	}
-	M0_UT_ASSERT(rc == 0);
+	} else {
+		M0_UT_ASSERT(rc == 0);
 
-	/* Verify m0_cl_to_layout(). */
-	l_from_cl = m0_cl_to_layout(*cl);
-	M0_UT_ASSERT(l_from_cl == &(*cl)->cl_base);
+		/* Verify m0_cl_to_layout(). */
+		l_from_cl = m0_cl_to_layout(*cl);
+		M0_UT_ASSERT(l_from_cl == &(*cl)->cl_base);
 
-	/* Verify the composite layout object contents. */
-	composite_layout_verify(l_from_cl, lid, 1, min_extents_nr,
-				if_contiguous_extents);
-	return 0;
+		/* Verify the composite layout object contents. */
+		composite_layout_verify(l_from_cl, lid, 1, extents_nr,
+					if_contiguous_extents);
+	}
+	return rc;
 }
 
 /*
@@ -476,7 +477,11 @@ static int composite_build_and_layers_add(uint64_t lid,
 	int                rc;
 
 	rc = composite_build(lid, domain, min_extents_nr,
-			     if_contiguous_extents, cl, !FAILURE_TEST);
+			     if_contiguous_extents, failure_test, cl);
+	if (failure_test) {
+		M0_UT_ASSERT(rc == -ENOMEM);
+		return rc;
+	}
 	M0_UT_ASSERT(rc == 0);
 
 	if (is_add_to_db) {
@@ -535,15 +540,14 @@ static int composite_build_and_layers_add(uint64_t lid,
 }
 
 /*
- * Tests the APIs supported for layout object build and layout destruction
- * that happens using m0_layout_put(). Verifies that the newly built layout
+ * Tests the APIs supported for layout object build and 'layout destruction
+ * that happens using m0_layout_put()'. Verifies that the newly built layout
  * object is added to the list of layout objects maintained in the domain
  * object and that m0_layout_find() returns the same object.
  */
 int test_build_composite(uint64_t lid,
 			 struct m0_layout_domain *domain,
-			 uint32_t layers_nr,
-			 uint32_t min_extents_nr,
+			 uint32_t extents_nr,
 			 bool if_contiguous_extents,
 			 bool failure_test)
 {
@@ -551,12 +555,8 @@ int test_build_composite(uint64_t lid,
 	struct m0_layout           *l;
 	int                         rc;
 
-	rc = composite_build_and_layers_add(lid, domain, layers_nr,
-					    min_extents_nr,
-					    if_contiguous_extents,
-					    !ADD_TO_DB,
-					    failure_test,
-					    !LAYER_ADD_FAILURE_TEST, &cl);
+	rc = composite_build(lid, domain, extents_nr, if_contiguous_extents,
+			     failure_test, &cl);
 	if (failure_test)
 		M0_UT_ASSERT(rc == -ENOMEM);
 	else {
@@ -569,7 +569,7 @@ int test_build_composite(uint64_t lid,
 		M0_UT_ASSERT(l == &cl->cl_base);
 
 		/* Verify the layout object built earlier here. */
-		composite_layout_verify(l, lid, layers_nr, min_extents_nr,
+		composite_layout_verify(l, lid, 1, extents_nr,
 					if_contiguous_extents);
 
 		/* Reduce the reference acquired by m0_layout_find(). */
@@ -580,7 +580,7 @@ int test_build_composite(uint64_t lid,
 		M0_UT_ASSERT(m0_layout_find(domain, lid) == NULL);
 
 		/* Delete all the precreated sublayouts. */
-		sublayouts_delete(domain, lid, layers_nr);
+		sublayouts_delete(domain, lid, 1);
 	}
 	return rc;
 }
diff --git a/layout/ut/composite.h b/layout/ut/composite.h
index d4daa67..16c3038 100644
--- a/layout/ut/composite.h
+++ b/layout/ut/composite.h
@@ -41,7 +41,6 @@ enum {
 
 int test_build_composite(uint64_t lid,
 			 struct m0_layout_domain *domain,
-			 uint32_t sublayouts_nr,
 			 uint32_t min_extents_nr,
 			 bool if_contiguous_extents,
 			 bool failure_test);
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index 537f3c6..4008f83 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -342,8 +342,8 @@ static void test_reg_unreg_failure(void)
 	M0_UT_ASSERT(rc == 0);
 
 	/*
-	 * Try to register all the standard layout types and enum types by
-	 * injecting errors.
+	 * Try to register all the standard layout types and enum types
+	 * individually by injecting all the possible errors one by one.
 	 */
 	m0_fi_enable_once("m0_layout_type_register", "lto_reg_err");
 	rc = m0_layout_type_register(&t_domain, &m0_pdclust_layout_type);
@@ -355,6 +355,21 @@ static void test_reg_unreg_failure(void)
 	M0_UT_ASSERT(rc == LTO_REG_ERR);
 	confirm_nothing_is_registered(&t_domain);
 
+	m0_fi_enable_once("composite_register", "mem_err");
+	rc = m0_layout_type_register(&t_domain, &m0_composite_layout_type);
+	M0_UT_ASSERT(rc == -ENOMEM);
+	confirm_nothing_is_registered(&t_domain);
+
+	m0_fi_enable_once("composite_register", "table_init_err");
+	rc = m0_layout_type_register(&t_domain, &m0_composite_layout_type);
+	M0_UT_ASSERT(rc == -EEXIST);
+	confirm_nothing_is_registered(&t_domain);
+
+	m0_fi_enable_once("composite_register", "emap_init_err");
+	rc = m0_layout_type_register(&t_domain, &m0_composite_layout_type);
+	M0_UT_ASSERT(rc == -EEXIST);
+	confirm_nothing_is_registered(&t_domain);
+
 	m0_fi_enable_once("m0_layout_enum_type_register", "leto_reg_err");
 	rc = m0_layout_enum_type_register(&t_domain, &m0_list_enum_type);
 	M0_UT_ASSERT(rc == LETO_REG_ERR);
@@ -465,39 +480,30 @@ static void test_build(void)
 	M0_UT_ASSERT(rc == 0);
 
 	/*
-	 * Build a layout object with COMPOSITE layout type, such that no layer
-	 * is added explicitly to it, meaning with only 1 layer and destroy it.
+	 * Build a layout object with COMPOSITE layout type, with contiguous
+	 * extents in its zeroth layer and destroy it.
 	 */
 	lid = 1021;
-	rc = test_build_composite(lid, &domain, 1, 10,
-				  CONTIGUOUS_EXTENTS, !FAILURE_TEST);
+	rc = test_build_composite(lid, &domain, 5, CONTIGUOUS_EXTENTS,
+				  !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
-	 * Build a layout object with COMPOSITE layout type, such that its
-	 * layers contain only 1 single extent and destroy it.
+	 * Build a layout object with COMPOSITE layout type, with noncontiguous
+	 * extents in its zeroth layer and destroy it.
 	 */
 	lid = 1022;
-	rc = test_build_composite(lid, &domain, 2, 1,
-				  CONTIGUOUS_EXTENTS, !FAILURE_TEST);
+	rc = test_build_composite(lid, &domain, 10, !CONTIGUOUS_EXTENTS,
+				  !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
-	 * Build a layout object with COMPOSITE layout type, with contiguous
-	 * extents in its layers and destroy it.
-	 */
-	lid = 1023;
-	rc = test_build_composite(lid, &domain, 5, 10,
-				  CONTIGUOUS_EXTENTS, !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	/*
-	 * Build a layout object with COMPOSITE layout type, with noncontiguous
-	 * extents in its layers and destroy it.
+	 * Build a layout object with COMPOSITE layout type, such that its
+	 * zeroth layer contains only 1 single extent and destroy it.
 	 */
-	lid = 1024;
-	rc = test_build_composite(lid, &domain, 5, 11,
-				  !CONTIGUOUS_EXTENTS, !FAILURE_TEST);
+	lid = 1022;
+	rc = test_build_composite(lid, &domain, 1, CONTIGUOUS_EXTENTS,
+				  !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 }
 
@@ -584,6 +590,30 @@ static void test_build_failure(void)
 				FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EPROTO);
 
+	/*
+	 * Simulate memory allocation failure in composite_allocate() that is
+	 * in the path of m0_composite_build().
+	 */
+	lid = 2009;
+	m0_fi_enable_once("composite_allocate", "mem_err");
+	rc = test_build_composite(lid, &domain, 5, !CONTIGUOUS_EXTENTS,
+				  FAILURE_TEST);
+	M0_UT_ASSERT(rc == -ENOMEM);
+
+	/*
+	 * Simulate memory allocation failure in the first invokation of
+	 * layer_inmem_add() that is in the path of m0_composite_build().
+	 */
+	lid = 2010;
+	m0_fi_enable_once("layer_inmem_add", "mem_err");
+	rc = test_build_composite(lid, &domain, 5, !CONTIGUOUS_EXTENTS,
+				  FAILURE_TEST);
+	M0_UT_ASSERT(rc == -ENOMEM);
+	/*
+	 * todo Add such failure test for m0_composite_layer_add() by using:
+	 * m0_fi_enable_off_n_on_m("layer_inmem_add", "mem_err", 1, 1);
+	 */
+
 	/* todo Composite */
 }
 
-- 
1.8.3.2


From b341bfa5f7e7e9f54406be8dde14415e5ddd0f33 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Wed, 10 Oct 2012 16:23:06 +0530
Subject: [PATCH 001/157] Support for registration of composite layout type

---
 layout/composite.c | 18 ++++++++++--------
 layout/layout.c    | 10 ++++++++++
 layout/ut/layout.c | 35 +++++++++++++++++++++++++++++++++++
 3 files changed, 55 insertions(+), 8 deletions(-)

diff --git a/layout/composite.c b/layout/composite.c
index 7def221..626db2f 100644
--- a/layout/composite.c
+++ b/layout/composite.c
@@ -219,11 +219,12 @@ static int composite_encode(struct c2_layout *l,
 }
 
 static const struct c2_layout_ops composite_ops = {
-	.lo_fini    = composite_fini,
-	.lo_delete  = composite_delete,
-	.lo_recsize = composite_recsize,
-	.lo_decode  = composite_decode,
-	.lo_encode  = composite_encode
+	.lo_fini           = composite_fini,
+	.lo_delete         = composite_delete,
+	.lo_recsize        = composite_recsize,
+	.lo_instance_build = NULL, /* todo */
+	.lo_decode         = composite_decode,
+	.lo_encode         = composite_encode
 };
 
 static const struct c2_layout_type_ops composite_type_ops = {
@@ -233,10 +234,11 @@ static const struct c2_layout_type_ops composite_type_ops = {
 	.lto_allocate    = composite_allocate
 };
 
-
 const struct c2_layout_type c2_composite_layout_type = {
-	.lt_name = "composite",
-	.lt_id   = 1,
+	.lt_name      = "composite",
+	.lt_id        = 1,
+	.lt_ref_count = 0,
+	.lt_domain    = NULL,
 	.lt_ops  = &composite_type_ops
 };
 
diff --git a/layout/layout.c b/layout/layout.c
index 01001c9..502b4ed 100644
--- a/layout/layout.c
+++ b/layout/layout.c
@@ -72,6 +72,7 @@
 #include "layout/layout.h"
 
 extern struct c2_layout_type c2_pdclust_layout_type;
+extern struct c2_layout_type c2_composite_layout_type;
 extern struct c2_layout_enum_type c2_list_enum_type;
 extern struct c2_layout_enum_type c2_linear_enum_type;
 
@@ -737,15 +738,23 @@ int c2_layout_standard_types_register(struct c2_layout_domain *dom)
 	if (rc != 0)
 		return rc;
 
+	rc = c2_layout_type_register(dom, &c2_composite_layout_type);
+	if (rc != 0) {
+		c2_layout_type_unregister(dom, &c2_pdclust_layout_type);
+		return rc;
+	}
+
 	rc = c2_layout_enum_type_register(dom, &c2_list_enum_type);
 	if (rc != 0) {
 		c2_layout_type_unregister(dom, &c2_pdclust_layout_type);
+		c2_layout_type_unregister(dom, &c2_composite_layout_type);
 		return rc;
 	}
 
 	rc = c2_layout_enum_type_register(dom, &c2_linear_enum_type);
 	if (rc != 0) {
 		c2_layout_type_unregister(dom, &c2_pdclust_layout_type);
+		c2_layout_type_unregister(dom, &c2_composite_layout_type);
 		c2_layout_enum_type_unregister(dom, &c2_list_enum_type);
 		return rc;
 	}
@@ -759,6 +768,7 @@ void c2_layout_standard_types_unregister(struct c2_layout_domain *dom)
 
 	c2_layout_enum_type_unregister(dom, &c2_list_enum_type);
 	c2_layout_enum_type_unregister(dom, &c2_linear_enum_type);
+	c2_layout_type_unregister(dom, &c2_composite_layout_type);
 	c2_layout_type_unregister(dom, &c2_pdclust_layout_type);
 }
 
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index 016adc1..4cf2038 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -69,6 +69,7 @@ enum {
 };
 
 extern struct c2_layout_type c2_pdclust_layout_type;
+extern struct c2_layout_type c2_composite_layout_type;
 extern struct c2_layout_enum_type c2_list_enum_type;
 extern struct c2_layout_enum_type c2_linear_enum_type;
 
@@ -314,12 +315,15 @@ static void test_reg_unreg(void)
 		     &c2_linear_enum_type);
 	C2_UT_ASSERT(t_domain.ld_type[c2_pdclust_layout_type.lt_id] ==
 		     &c2_pdclust_layout_type);
+	C2_UT_ASSERT(t_domain.ld_type[c2_composite_layout_type.lt_id] ==
+		     &c2_composite_layout_type);
 
 	/* Unregister all the registered layout and enum types. */
 	c2_layout_standard_types_unregister(&t_domain);
 	C2_UT_ASSERT(t_domain.ld_enum[c2_list_enum_type.let_id] == NULL);
 	C2_UT_ASSERT(t_domain.ld_enum[c2_linear_enum_type.let_id] == NULL);
 	C2_UT_ASSERT(t_domain.ld_type[c2_pdclust_layout_type.lt_id] == NULL);
+	C2_UT_ASSERT(t_domain.ld_type[c2_composite_layout_type.lt_id] == NULL);
 
 	/*
 	 * Should be able to register all the available layout types and enum
@@ -333,12 +337,15 @@ static void test_reg_unreg(void)
 		     &c2_linear_enum_type);
 	C2_UT_ASSERT(t_domain.ld_type[c2_pdclust_layout_type.lt_id] ==
 		     &c2_pdclust_layout_type);
+	C2_UT_ASSERT(t_domain.ld_type[c2_composite_layout_type.lt_id] ==
+		     &c2_composite_layout_type);
 
 	/* Unregister all the registered layout and enum types. */
 	c2_layout_standard_types_unregister(&t_domain);
 	C2_UT_ASSERT(t_domain.ld_enum[c2_list_enum_type.let_id] == NULL);
 	C2_UT_ASSERT(t_domain.ld_enum[c2_linear_enum_type.let_id] == NULL);
 	C2_UT_ASSERT(t_domain.ld_type[c2_pdclust_layout_type.lt_id] == NULL);
+	C2_UT_ASSERT(t_domain.ld_type[c2_composite_layout_type.lt_id] == NULL);
 
 	/* Finalise the domain. */
 	c2_layout_domain_fini(&t_domain);
@@ -356,6 +363,14 @@ static void test_reg_unreg(void)
 	C2_LEAVE();
 }
 
+static void confirm_nothing_is_registered(struct c2_layout_domain *t_domain)
+{
+	C2_UT_ASSERT(t_domain->ld_enum[c2_list_enum_type.let_id] == NULL);
+	C2_UT_ASSERT(t_domain->ld_enum[c2_linear_enum_type.let_id] == NULL);
+	C2_UT_ASSERT(t_domain->ld_type[c2_pdclust_layout_type.lt_id] == NULL);
+	C2_UT_ASSERT(t_domain->ld_type[c2_composite_layout_type.lt_id] == NULL);
+}
+
 static void test_reg_unreg_failure(void)
 {
 	const char              t_db_name[] = "t4-layout";
@@ -388,22 +403,32 @@ static void test_reg_unreg_failure(void)
 	c2_fi_enable_once("c2_layout_type_register", "lto_reg_err");
 	rc = c2_layout_type_register(&t_domain, &c2_pdclust_layout_type);
 	C2_UT_ASSERT(rc == LTO_REG_ERR);
+	confirm_nothing_is_registered(&t_domain);
+
+	c2_fi_enable_once("c2_layout_type_register", "lto_reg_err");
+	rc = c2_layout_type_register(&t_domain, &c2_composite_layout_type);
+	C2_UT_ASSERT(rc == LTO_REG_ERR);
+	confirm_nothing_is_registered(&t_domain);
 
 	c2_fi_enable_once("c2_layout_enum_type_register", "leto_reg_err");
 	rc = c2_layout_enum_type_register(&t_domain, &c2_list_enum_type);
 	C2_UT_ASSERT(rc == LETO_REG_ERR);
+	confirm_nothing_is_registered(&t_domain);
 
 	c2_fi_enable_once("c2_layout_enum_type_register", "leto_reg_err");
 	rc = c2_layout_enum_type_register(&t_domain, &c2_linear_enum_type);
 	C2_UT_ASSERT(rc == LETO_REG_ERR);
+	confirm_nothing_is_registered(&t_domain);
 
 	c2_fi_enable_once("list_register", "mem_err");
 	rc = c2_layout_enum_type_register(&t_domain, &c2_list_enum_type);
 	C2_UT_ASSERT(rc == -ENOMEM);
+	confirm_nothing_is_registered(&t_domain);
 
 	c2_fi_enable_once("list_register", "table_init_err");
 	rc = c2_layout_enum_type_register(&t_domain, &c2_list_enum_type);
 	C2_UT_ASSERT(rc == -EEXIST);
+	confirm_nothing_is_registered(&t_domain);
 
 	/*
 	 * Now cover all the error cases from
@@ -412,15 +437,25 @@ static void test_reg_unreg_failure(void)
 	c2_fi_enable_once("c2_layout_type_register", "lto_reg_err");
 	rc = c2_layout_standard_types_register(&t_domain);
 	C2_UT_ASSERT(rc == LTO_REG_ERR);
+	confirm_nothing_is_registered(&t_domain);
+
+	c2_fi_enable_off_n_on_m("c2_layout_type_register", "lto_reg_err",
+				1, 1);
+	rc = c2_layout_standard_types_register(&t_domain);
+	C2_UT_ASSERT(rc == LTO_REG_ERR);
+	confirm_nothing_is_registered(&t_domain);
+	c2_fi_disable("c2_layout_type_register", "lto_reg_err");
 
 	c2_fi_enable_once("c2_layout_enum_type_register", "leto_reg_err");
 	rc = c2_layout_standard_types_register(&t_domain);
 	C2_UT_ASSERT(rc == LETO_REG_ERR);
+	confirm_nothing_is_registered(&t_domain);
 
 	c2_fi_enable_off_n_on_m("c2_layout_enum_type_register", "leto_reg_err",
 				1, 1);
 	rc = c2_layout_standard_types_register(&t_domain);
 	C2_UT_ASSERT(rc == LETO_REG_ERR);
+	confirm_nothing_is_registered(&t_domain);
 	c2_fi_disable("c2_layout_enum_type_register", "leto_reg_err");
 
 	c2_layout_domain_fini(&t_domain);
-- 
1.8.3.2


From 7986923ffac797cb2c5d2196274a84a687e33f83 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Thu, 23 May 2013 10:42:08 +0530
Subject: [PATCH 142/157] Optimising out parameters of
 m0_composite_layer_ext_lookup()

---
 layout/composite.c    | 19 ++++-------
 layout/composite.h    |  9 ++----
 layout/ut/composite.c | 88 ++++++++++++++++++++-------------------------------
 3 files changed, 43 insertions(+), 73 deletions(-)

diff --git a/layout/composite.c b/layout/composite.c
index 30ce6d3..29a6557 100644
--- a/layout/composite.c
+++ b/layout/composite.c
@@ -1161,9 +1161,8 @@ M0_INTERNAL int m0_composite_layer_ext_lookup(
 				struct m0_composite_layout *cl,
 				m0_bindex_t offset,
 				struct m0_ext *ext,
-				uint32_t *layer_idx,
 				enum m0_composite_layer_ext_state *ext_state,
-				struct m0_layout **sublayout)
+				struct m0_composite_layer **lr)
 {
 	struct m0_composite_layer        *layer;
 	struct m0_composite_layer_extent *lr_ext;
@@ -1173,8 +1172,7 @@ M0_INTERNAL int m0_composite_layer_ext_lookup(
 
 	M0_PRE(composite_invariant(cl));
 	M0_PRE(offset >= 0 && offset <= M0_BINDEX_MAX);
-	M0_PRE(ext != NULL && layer_idx != NULL && ext_state != NULL &&
-	       sublayout != NULL);
+	M0_PRE(ext != NULL && ext_state != NULL && lr != NULL);
 
 	M0_ENTRY("lid %llu, offset %llu", (unsigned long long)cl->cl_base.l_id,
 		 (unsigned long long)offset);
@@ -1182,9 +1180,8 @@ M0_INTERNAL int m0_composite_layer_ext_lookup(
 	/* Start the lookup with the top-most layer. */
 	layer = layers_tlist_tail(&cl->cl_layers);
 	M0_ASSERT(layer != NULL);
-	i = cl->cl_layers_nr - 1;
 	found = false;
-
+	i = cl->cl_layers_nr - 1;
 	while (layer != NULL) {
 		M0_ASSERT(layer->clr_idx == i);
 		m0_tl_for(ext, &layer->clr_extents, lr_ext) {
@@ -1203,22 +1200,18 @@ M0_INTERNAL int m0_composite_layer_ext_lookup(
 		layer = layers_tlist_prev(&cl->cl_layers, layer);
 		--i;
 	}
-
 	if (found == true) {
-		*layer_idx = layer->clr_idx;
 		*ext = lr_ext->cle_ext;
 		*ext_state = lr_ext->cle_state;
-		layer = layer_find(cl, *layer_idx);
-		*sublayout = layer->clr_sl;
+		*lr = layer;
 		rc = 0;
 	} else
 		rc = -ENOENT;
-
-
 	m0_mutex_unlock(&cl->cl_base.l_lock);
 	M0_LEAVE("lid %llu, offset %llu, rc %d, layer %lu, ext_state %llu",
 		 (unsigned long long)cl->cl_base.l_id,
-		 (unsigned long long)offset, rc, (unsigned long)*layer_idx,
+		 (unsigned long long)offset, rc,
+		 rc == 0 ? (unsigned long)layer->clr_idx : 0,
 		 (unsigned long long)*ext_state);
 	M0_POST(composite_invariant(cl));
 	return rc;
diff --git a/layout/composite.h b/layout/composite.h
index 07995b8..7f1a227 100644
--- a/layout/composite.h
+++ b/layout/composite.h
@@ -316,12 +316,10 @@ M0_INTERNAL void m0_composite_layer_delete(struct m0_composite_layout *cl);
  *
  * @param offset 'In' paramemer to specify the offset to be looked up.
  * @param ext 'Out' parameter to report back the extent the offset belongs to.
- * @param layer_idx 'Out' parameter to report back the layer the extent belongs
- *        to.
  * @param ext_state 'Out' parameter to report back the state of the extent
  *        being returned.
- * @param sublayout 'Out' parameter to report back the sublayout owned by the
- *        layer being returned.
+ * @param layer 'Out' parameter to report back the layer the extent belongs
+ *        to. It can be used to refer to the layer_idx and the sublayout.
  *
  * The lookup starts with the top-most layer and goes upto the bottom-most
  * layer. If an extent containing the offset is not found upto the bottom-most
@@ -331,9 +329,8 @@ M0_INTERNAL int m0_composite_layer_ext_lookup(
 				struct m0_composite_layout *cl,
 				m0_bindex_t offset,
 				struct m0_ext *ext,
-				uint32_t *layer_idx,
 				enum m0_composite_layer_ext_state *ext_state,
-				struct m0_layout **sublayout);
+				struct m0_composite_layer **layer);
 
 /**
  * Adds an extent with the specified state to the specified layer of the
diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index 343f6ac..5058272 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -1492,11 +1492,10 @@ static int ext_op_pre(enum extent_operation eop,
 		      enum m0_composite_layer_ext_state *ext_state_lookup,
 		      struct m0_layout **l_copy_orig)
 {
-	uint32_t          layer_id_lookup;
-	struct m0_ext     ext_lookup;
-	struct m0_layout *sublayout_lookup;
-	int               rc_tmp;
-	int               rc;
+	struct m0_ext              ext_lookup;
+	struct m0_composite_layer *layer;
+	int                        rc_tmp;
+	int                        rc;
 
 	M0_UT_ASSERT(M0_IN(eop, (EXTENT_LOOKUP, EXTENT_ADD, EXTENT_UPDATE,
 				 EXTENT_DELETE)));
@@ -1566,10 +1565,8 @@ static int ext_op_pre(enum extent_operation eop,
 	/* Initial lookup verifying that the result is as expected. */
 	rc = 0;
 	rc_tmp = m0_composite_layer_ext_lookup(*cl, *offset_to_operate,
-					       &ext_lookup,
-					       &layer_id_lookup,
-					       ext_state_lookup,
-					       &sublayout_lookup);
+					       &ext_lookup, ext_state_lookup,
+					       &layer);
 	if (extent_kind == NON_EXISTING ||
 	    (extent_kind == OVERLAPPING_LEFT && !is_contiguous_extents)) {
 		M0_UT_ASSERT(rc_tmp == -ENOENT);
@@ -1579,10 +1576,6 @@ static int ext_op_pre(enum extent_operation eop,
 		}
 	} else {
 		M0_UT_ASSERT(rc_tmp == 0);
-		M0_UT_ASSERT(layer_id_lookup == (*cl)->cl_layers_nr - 1);
-		M0_UT_ASSERT(*ext_state_lookup == M0_CLRES_VALID);
-		M0_UT_ASSERT(sublayout_lookup->l_id ==
-			     lid * 100 + layer_id_lookup);
 		if (extent_kind == EXACT_EXISTING) {
 			M0_UT_ASSERT(ext_to_operate->e_start ==
 				     ext_lookup.e_start &&
@@ -1592,6 +1585,10 @@ static int ext_op_pre(enum extent_operation eop,
 			M0_UT_ASSERT(ext_lookup.e_start <= *offset_to_operate);
 			M0_UT_ASSERT(ext_lookup.e_end > *offset_to_operate);
 		}
+		M0_UT_ASSERT(*ext_state_lookup == M0_CLRES_VALID);
+		M0_UT_ASSERT(layer->clr_idx == (*cl)->cl_layers_nr - 1);
+		M0_UT_ASSERT(layer->clr_sl->l_id ==
+			     lid * 100 + layer->clr_idx);
 	}
 	composite_layout_copy(m0_cl_to_layout(*cl), l_copy_orig);
 	return rc;
@@ -1653,10 +1650,9 @@ static int ext_add(struct m0_composite_layout *cl,
 		   enum m0_composite_layer_ext_state ext_state,
 		   bool failure_test)
 {
-	uint32_t                           layer_id_lookup;
 	struct m0_ext                      ext_lookup;
 	enum m0_composite_layer_ext_state  ext_state_lookup;
-	struct m0_layout                  *sublayout_lookup;
+	struct m0_composite_layer         *layer;
 	int                                rc;
 
 	/* Add the extent. */
@@ -1677,17 +1673,15 @@ static int ext_add(struct m0_composite_layout *cl,
 
 		rc = m0_composite_layer_ext_lookup(cl, offset_to_operate,
 						   &ext_lookup,
-						   &layer_id_lookup,
 						   &ext_state_lookup,
-						   &sublayout_lookup);
+						   &layer);
 		M0_UT_ASSERT(rc == 0);
-		M0_UT_ASSERT(layer_id_lookup == cl->cl_layers_nr - 1);
-		M0_UT_ASSERT(ext_state_lookup == ext_state);
 		M0_UT_ASSERT(ext_lookup.e_start <= offset_to_operate);
 		M0_UT_ASSERT(ext_lookup.e_end > offset_to_operate);
 		M0_UT_ASSERT(ext_state_lookup == ext_state);
-		M0_UT_ASSERT(sublayout_lookup->l_id ==
-			     cl->cl_base.l_id * 100 + layer_id_lookup);
+		M0_UT_ASSERT(layer->clr_idx == cl->cl_layers_nr - 1);
+		M0_UT_ASSERT(layer->clr_sl->l_id ==
+			     cl->cl_base.l_id * 100 + layer->clr_idx);
 	}
 	return rc;
 }
@@ -1701,10 +1695,9 @@ static int ext_update(struct m0_composite_layout *cl,
 		      enum m0_composite_layer_ext_state ext_state,
 		      bool failure_test)
 {
-	uint32_t                           layer_id_lookup;
 	struct m0_ext                      ext_lookup;
 	enum m0_composite_layer_ext_state  ext_state_lookup;
-	struct m0_layout                  *sublayout_lookup;
+	struct m0_composite_layer         *layer;
 	int                                rc;
 
 	rc = m0_composite_layer_ext_state_update(cl, cl->cl_layers_nr - 1,
@@ -1724,12 +1717,10 @@ static int ext_update(struct m0_composite_layout *cl,
 
 		rc = m0_composite_layer_ext_lookup(cl, offset_to_operate,
 						   &ext_lookup,
-						   &layer_id_lookup,
-						   &ext_state_lookup,
-						   &sublayout_lookup);
+						   &ext_state_lookup, &layer);
 		M0_UT_ASSERT(rc == 0);
-		M0_UT_ASSERT(layer_id_lookup == cl->cl_layers_nr - 1);
 		M0_UT_ASSERT(ext_state_lookup == ext_state);
+		M0_UT_ASSERT(layer->clr_idx == cl->cl_layers_nr - 1);
 	}
 	return rc;
 }
@@ -1743,10 +1734,9 @@ static int ext_delete(struct m0_composite_layout *cl,
 		      m0_bindex_t offset_to_operate,
 		      bool failure_test)
 {
-	uint32_t                           layer_id_lookup;
 	struct m0_ext                      ext_lookup;
 	enum m0_composite_layer_ext_state  ext_state_lookup;
-	struct m0_layout                  *sublayout_lookup;
+	struct m0_composite_layer         *layer;
 	int                                rc;
 
 	/* Delete the extent. */
@@ -1766,9 +1756,7 @@ static int ext_delete(struct m0_composite_layout *cl,
 
 		rc = m0_composite_layer_ext_lookup(cl, offset_to_operate,
 						   &ext_lookup,
-						   &layer_id_lookup,
-						   &ext_state_lookup,
-						   &sublayout_lookup);
+						   &ext_state_lookup, &layer);
 		if (extent_kind == NON_EXISTING ||
 		    (extent_kind == OVERLAPPING_LEFT &&
 		     !is_contiguous_extents)) {
@@ -1776,7 +1764,7 @@ static int ext_delete(struct m0_composite_layout *cl,
 			rc = 0;
 		} else {
 			M0_UT_ASSERT(rc == 0);
-			M0_UT_ASSERT(layer_id_lookup == cl->cl_layers_nr - 2);
+			M0_UT_ASSERT(layer->clr_idx == cl->cl_layers_nr - 2);
 		}
 	}
 	return rc;
@@ -1838,9 +1826,8 @@ int test_ext_lookup_depth(uint64_t lid,
 	struct m0_ext                      ext_to_operate;
 	m0_bindex_t                        offset_to_operate;
 	struct m0_ext                      ext_lookup;
-	uint32_t                           layer_id_lookup;
 	enum m0_composite_layer_ext_state  ext_state_lookup;
-	struct m0_layout                  *sublayout_lookup;
+	struct m0_composite_layer         *layer;
 	uint32_t                           i;
 	int                                rc;
 
@@ -1866,18 +1853,16 @@ int test_ext_lookup_depth(uint64_t lid,
 
 		rc = m0_composite_layer_ext_lookup(cl, offset_to_operate,
 						   &ext_lookup,
-						   &layer_id_lookup,
-						   &ext_state_lookup,
-						   &sublayout_lookup);
+						   &ext_state_lookup, &layer);
 		if (i > 0) {
 			M0_UT_ASSERT(rc == 0);
-			M0_UT_ASSERT(layer_id_lookup == i - 1);
-			M0_UT_ASSERT(ext_state_lookup == M0_CLRES_VALID);
-			M0_UT_ASSERT(sublayout_lookup->l_id ==
-				     lid * 100 + layer_id_lookup);
 			M0_UT_ASSERT(ext_to_operate.e_start ==
 				     ext_lookup.e_start &&
 				     ext_to_operate.e_end == ext_lookup.e_end);
+			M0_UT_ASSERT(ext_state_lookup == M0_CLRES_VALID);
+			M0_UT_ASSERT(layer->clr_idx == i - 1);
+			M0_UT_ASSERT(layer->clr_sl->l_id ==
+				     lid * 100 + layer->clr_idx);
 		} else {
 			M0_UT_ASSERT(rc == -ENOENT);
 			break;
@@ -2413,10 +2398,9 @@ int test_update_composite(uint64_t lid,
 	struct m0_layout                  *sublayout;
 	uint64_t                           sublayout_id;
 	struct m0_ext                      ext_to_operate;
-	uint32_t                           layer_id_lookup;
 	struct m0_ext                      ext_lookup;
 	enum m0_composite_layer_ext_state  ext_state_lookup;
-	struct m0_layout                  *sublayout_lookup;
+	struct m0_composite_layer         *layer;
 	uint32_t                           layers_to_add_nr = 8;
 	uint32_t                           layers_to_delete_nr = 3;
 	uint32_t                           i;
@@ -2455,17 +2439,15 @@ int test_update_composite(uint64_t lid,
 	extent_to_be_operated(cl, is_contiguous_extents, 1, 1,
 			      NON_EXISTING, &ext_to_operate);
 	rc = m0_composite_layer_ext_lookup(cl, ext_to_operate.e_start + 1,
-					   &ext_lookup, &layer_id_lookup,
-					   &ext_state_lookup,
-					   &sublayout_lookup);
+					   &ext_lookup, &ext_state_lookup,
+					   &layer);
 	M0_UT_ASSERT(rc == -ENOENT);
 	rc = m0_composite_layer_ext_add(cl, cl->cl_layers_nr - 1,
 					&ext_to_operate, M0_CLRES_FLATTENING);
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_composite_layer_ext_lookup(cl, ext_to_operate.e_start + 1,
-					   &ext_lookup, &layer_id_lookup,
-					   &ext_state_lookup,
-					   &sublayout_lookup);
+					   &ext_lookup, &ext_state_lookup,
+					   &layer);
 	M0_UT_ASSERT(rc == 0);
 	M0_UT_ASSERT(ext_state_lookup == M0_CLRES_FLATTENING);
 
@@ -2530,12 +2512,10 @@ int test_update_composite(uint64_t lid,
 		rc = m0_composite_layer_ext_lookup(cl,
 						   ext_to_operate.e_start + 1,
 						   &ext_lookup,
-						   &layer_id_lookup,
-						   &ext_state_lookup,
-						   &sublayout_lookup);
+						   &ext_state_lookup, &layer);
 		M0_UT_ASSERT(rc == 0);
-		M0_UT_ASSERT(layer_id_lookup == layers_nr - 1);
 		M0_UT_ASSERT(ext_state_lookup == M0_CLRES_FLATTENING);
+		M0_UT_ASSERT(layer->clr_idx == layers_nr - 1);
 
 		/*
 		 * Verify number of layers. This too is verified by comparing
-- 
1.8.3.2


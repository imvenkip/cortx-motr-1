From e7f353c71d897bf2f68f4690b908d53a9412cad4 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Mon, 25 Mar 2013 12:01:57 +0530
Subject: [PATCH 100/157] Additional test coverage

---
 layout/ut/composite.c | 13 ++++---------
 layout/ut/composite.h |  3 +--
 layout/ut/layout.c    | 53 ++++++++++++++++++++++++++++++++++++++++-----------
 3 files changed, 47 insertions(+), 22 deletions(-)

diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index 14c8ef5..4c273a9 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -2396,8 +2396,6 @@ int test_lookup_composite(uint64_t lid,
 	return rc;
 }
 
-/* todo this test shall not require layer_add_failure_test. layer failure
-is covered in layer ops test. */
 /* Tests the API m0_layout_add(), for the COMPOSITE layout type. */
 int test_add_composite(uint64_t lid,
 		       struct m0_layout_domain *domain,
@@ -2406,8 +2404,7 @@ int test_add_composite(uint64_t lid,
 		       bool if_contiguous_extents,
 		       bool layout_destroy, struct m0_layout **l_obj,
 		       bool duplicate_test,
-		       bool failure_test,
-		       bool layer_add_failure_test)
+		       bool failure_test)
 {
 	m0_bcount_t                 num_bytes;
 	void                       *area;
@@ -2420,8 +2417,6 @@ int test_add_composite(uint64_t lid,
 	M0_UT_ASSERT(ergo(layout_destroy, l_obj == NULL));
 	M0_UT_ASSERT(ergo(!layout_destroy, l_obj != NULL));
 	M0_UT_ASSERT(ergo(duplicate_test, !failure_test));
-	M0_UT_ASSERT(ergo(failure_test, !layer_add_failure_test));
-	M0_UT_ASSERT(ergo(layer_add_failure_test, !failure_test));
 
 	allocate_area(domain, ADDITIONAL_BYTES_NONE, &num_bytes, &area);
 
@@ -2441,9 +2436,9 @@ int test_add_composite(uint64_t lid,
 
 	rc = m0_layout_add(&cl->cl_base, &tx, &pair);
 	if (failure_test)
-		M0_UT_ASSERT(rc == LO_ENCODE_ERR || rc == L_EMAP_LOOKUP_ERR);
-	else if (layer_add_failure_test)
-		M0_UT_ASSERT(rc == L_TABLE_INSERT_ERR);
+		M0_UT_ASSERT(rc == LO_ENCODE_ERR || rc == L_EMAP_LOOKUP_ERR ||
+			     rc == L_TABLE_LOOKUP_ERR ||
+			     rc == L_TABLE_INSERT_ERR);
 	else
 		M0_UT_ASSERT(rc == 0);
 
diff --git a/layout/ut/composite.h b/layout/ut/composite.h
index e9e1159..9d5e268 100644
--- a/layout/ut/composite.h
+++ b/layout/ut/composite.h
@@ -83,8 +83,7 @@ int test_add_composite(uint64_t lid,
 		       bool if_contiguous_extents,
 		       bool layout_destroy, struct m0_layout **l_obj,
 		       bool duplicate_test,
-		       bool failure_test,
-		       bool layer_add_failure_test);
+		       bool failure_test);
 int test_update_composite(uint64_t lid,
 			  struct m0_layout_domain *domain,
 			  uint32_t sublayouts_nr,
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index c13e047..1a6e8b0 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -1772,8 +1772,7 @@ static void test_add(void)
 	rc = test_add_composite(lid, &domain, 7, 50,
 				!CONTIGUOUS_EXTENTS,
 				LAYOUT_DESTROY, NULL,
-				!DUPLICATE_TEST, !FAILURE_TEST,
-				!LAYER_ADD_FAILURE_TEST);
+				!DUPLICATE_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	/* Add a layout object with COMPOSITE layout type. */
@@ -1781,8 +1780,7 @@ static void test_add(void)
 	rc = test_add_composite(lid, &domain, 5, 25,
 				CONTIGUOUS_EXTENTS,
 				LAYOUT_DESTROY, NULL,
-				!DUPLICATE_TEST, !FAILURE_TEST,
-				!LAYER_ADD_FAILURE_TEST);
+				!DUPLICATE_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
 	domain_ldb_available_set(&domain, false);
@@ -1853,24 +1851,57 @@ static void test_add_failure(void)
 	lid = 21021;
 	rc = test_add_composite(lid, &domain, 4, 15, CONTIGUOUS_EXTENTS,
 				LAYOUT_DESTROY, NULL,
-				DUPLICATE_TEST, !FAILURE_TEST,
-				!LAYER_ADD_FAILURE_TEST);
+				DUPLICATE_TEST, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EEXIST);
 
 	/*
-	 * Simulate error while adding a layer to the DB to verify that
-	 * the in-memory layer gets deleted.
+	 * Simulate error while adding zeroth layer to the DB as a part
+	 * of the m0_layout_add() op.
+	 */
+	m0_fi_enable_once("sublayout_id_indb_add", "table_insert_err");
+	lid = 21022;
+	rc = test_add_composite(lid, &domain, 4, 15, !CONTIGUOUS_EXTENTS,
+				LAYOUT_DESTROY, NULL,
+				!DUPLICATE_TEST, FAILURE_TEST);
+	M0_UT_ASSERT(rc == L_TABLE_INSERT_ERR);
+
+	/*
+	 * Simulate error while adding a non-zeroth layer to the DB as a part
+	 * of the m0_layout_add() op.
 	 */
 	m0_fi_enable_off_n_on_m("sublayout_id_indb_add", "table_insert_err",
 				1, 1);
-	lid = 21022;
+	lid = 21023;
 	rc = test_add_composite(lid, &domain, 4, 15, !CONTIGUOUS_EXTENTS,
 				LAYOUT_DESTROY, NULL,
-				!DUPLICATE_TEST, !FAILURE_TEST,
-				LAYER_ADD_FAILURE_TEST);
+				!DUPLICATE_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == L_TABLE_INSERT_ERR);
 	m0_fi_disable("sublayout_id_indb_add", "table_insert_err");
 
+	/*
+	 * Simulate sublayout id lookup error while adding zeroth layer to the
+	 * DB as a part of the m0_layout_add op.
+	 */
+	m0_fi_enable_once("sublayout_id_indb_lookup", "table_lookup_err");
+	lid = 21024;
+	rc = test_add_composite(lid, &domain, 4, 15, !CONTIGUOUS_EXTENTS,
+				LAYOUT_DESTROY, NULL,
+				!DUPLICATE_TEST, FAILURE_TEST);
+	M0_UT_ASSERT(rc == L_TABLE_LOOKUP_ERR);
+
+	/*
+	 * Simulate sublayout id lookup error while adding a non-zeroth layer
+	 * to the DB as a part of the m0_layout_add() op.
+	 */
+	m0_fi_enable_off_n_on_m("sublayout_id_indb_lookup", "table_lookup_err",
+				1, 1);
+	lid = 21025;
+	rc = test_add_composite(lid, &domain, 4, 15, !CONTIGUOUS_EXTENTS,
+				LAYOUT_DESTROY, NULL,
+				!DUPLICATE_TEST, FAILURE_TEST);
+	M0_UT_ASSERT(rc == L_TABLE_LOOKUP_ERR);
+	m0_fi_disable("sublayout_id_indb_lookup", "table_lookup_err");
+
 	domain_ldb_available_set(&domain, false);
 }
 
-- 
1.8.3.2


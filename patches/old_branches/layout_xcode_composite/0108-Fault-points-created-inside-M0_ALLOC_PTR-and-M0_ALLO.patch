From 7967a8dfbe60b328d9266715e4338769dc77b6b2 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Wed, 3 Apr 2013 15:24:07 +0530
Subject: [PATCH 108/157] Fault points created inside M0_ALLOC_PTR() and
 M0_ALLOC_ARR()

---
 layout/composite.c    | 14 ++----------
 layout/linear_enum.c  |  2 --
 layout/list_enum.c    |  6 ------
 layout/pdclust.c      |  7 ------
 layout/ut/composite.c |  2 +-
 layout/ut/layout.c    | 59 +++++++++++++++++++++++++++------------------------
 lib/memory.h          | 23 ++++++++++++++++++--
 7 files changed, 55 insertions(+), 58 deletions(-)

diff --git a/layout/composite.c b/layout/composite.c
index a65a6d3..77d7ee7 100644
--- a/layout/composite.c
+++ b/layout/composite.c
@@ -279,9 +279,7 @@ static int composite_register(struct m0_layout_domain *dom,
 
 	M0_ENTRY("Layout_type_id %lu", (unsigned long)lt->lt_id);
 
-	if (M0_FI_ENABLED("mem_err")) { csd = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(csd);
-err1_injected:
 	if (csd == NULL) {
 		m0_layout__log("composite_register",
 			       "failed to allocate schema data",
@@ -356,9 +354,7 @@ static int composite_allocate(struct m0_layout_domain *dom,
 
 	M0_ENTRY("lid %llu", (unsigned long long)lid);
 
-	if (M0_FI_ENABLED("mem_err")) { cl = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(cl);
-err1_injected:
 	if (cl == NULL) {
 		m0_layout__log("composite_allocate",
 			       "failed to allocate composite layout",
@@ -420,9 +416,7 @@ static int layer_inmem_add(struct m0_composite_layout *cl,
 		 (unsigned long long)sublayout->l_id,
 		 extlist, (unsigned long)ext_nr, is_user_count_adjust);
 
-	if (M0_FI_ENABLED("mem_err")) { layer = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(layer);
-err1_injected:
 	if (layer == NULL) {
 		m0_layout__log("layer_inmem_add",
 			       "failed to allocate composite layer",
@@ -1243,9 +1237,7 @@ static int ext_inmem_add_internal(struct m0_composite_layer *layer,
 		 (adjacent_lr_ext == NULL) ? 0 :
 		 (unsigned long long)adjacent_lr_ext->cle_ext.e_end);
 
-	if (M0_FI_ENABLED("mem_err")) { lr_ext = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(lr_ext);
-err1_injected:
 	if (lr_ext == NULL) {
 		m0_layout__log("ext_inmem_add_internal",
 			       "failed to allocate composite extent",
@@ -2131,14 +2123,14 @@ static int ext_indb_write_internal(struct m0_emap_cursor *it,
 	 *
 	 * The sequence goes as follows:
 	 * 1) From the extent [2200700, 56668025), its left part that is
-	 *    [2200700, 56668023) is retained, using the extent_op CUT_RIGHT.
+	 *    [2200700, 56668023) is retained, using the extent_op CUT_LEFT.
 	 * 2) From the extent list, the extent [56668025, 111135350) is
 	 *    deleted using the extent_op DELETE.
 	 * 3) From the extent list, the extent [111135350, 165602675) is
 	 *    deleted using the extent_op DELETE.
 	 * 4) From the extent [165602675, 220070000), its right part that is
 	 *    [165602677, 220070000) is retained, using the extent_op
-	 *    CUT_LEFT.
+	 *    CUT_RIGHT.
 	 * 5) Finally, the complete extent [56668023, 165602677) is added.
 	 *
 	 * layer_invariant() is temporarily violated during these operations.
@@ -3146,9 +3138,7 @@ static int composite_instance_build(struct m0_layout *l,
 		 (unsigned long long)fid->f_container,
 		 (unsigned long long)fid->f_key);
 
-	if (M0_FI_ENABLED("mem_err")) { ci = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(ci);
-err1_injected:
 	if (ci == NULL) {
 		m0_layout__log("composite_instance_build",
 			       "failed to allocate composite instance",
diff --git a/layout/linear_enum.c b/layout/linear_enum.c
index 03605be..6a2b96e 100644
--- a/layout/linear_enum.c
+++ b/layout/linear_enum.c
@@ -83,9 +83,7 @@ static int linear_allocate(struct m0_layout_domain *dom,
 
 	M0_ENTRY();
 
-	if (M0_FI_ENABLED("mem_err")) { lin_enum = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(lin_enum);
-err1_injected:
 	if (lin_enum == NULL) {
 		m0_layout__log("linear_allocate", "M0_ALLOC_PTR() failed",
 			       M0_LAYOUT_ADDB_LOC_LIN_ALLOC, NULL,
diff --git a/layout/list_enum.c b/layout/list_enum.c
index 6b64ad9..0d566f2 100644
--- a/layout/list_enum.c
+++ b/layout/list_enum.c
@@ -135,9 +135,7 @@ static int list_allocate(struct m0_layout_domain *dom,
 
 	M0_ENTRY();
 
-	if (M0_FI_ENABLED("mem_err")) { list_enum = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(list_enum);
-err1_injected:
 	if (list_enum == NULL) {
 		m0_layout__log("list_allocate", "M0_ALLOC_PTR() failed",
 			       M0_LAYOUT_ADDB_LOC_LIST_ALLOC, NULL, LID_NONE,
@@ -269,9 +267,7 @@ static int list_register(struct m0_layout_domain *dom,
 
 	M0_ENTRY("Enum_type_id %lu", (unsigned long)et->let_id);
 
-	if (M0_FI_ENABLED("mem_err")) { lsd = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(lsd);
-err1_injected:
 	if (lsd == NULL) {
 		m0_layout__log("list_register", "M0_ALLOC_PTR() failed",
 			       M0_LAYOUT_ADDB_LOC_LIST_REG_1, NULL, LID_NONE,
@@ -427,9 +423,7 @@ static int list_decode(struct m0_layout_enum *e,
 			   lle_base, &list_bob);
 	M0_ASSERT(list_allocated_invariant(list_enum));
 
-	if (M0_FI_ENABLED("mem_err")) { cob_list = NULL; goto err1_injected; }
 	M0_ALLOC_ARR(cob_list, ce_header->ceh_nr);
-err1_injected:
 	if (cob_list == NULL) {
 		rc = -ENOMEM;
 		m0_layout__log("list_decode", "M0_ALLOC_ARR() failed",
diff --git a/layout/pdclust.c b/layout/pdclust.c
index a2e7b66..2e09523 100644
--- a/layout/pdclust.c
+++ b/layout/pdclust.c
@@ -210,9 +210,7 @@ static int pdclust_allocate(struct m0_layout_domain *dom,
 
 	M0_ENTRY("lid %llu", (unsigned long long)lid);
 
-	if (M0_FI_ENABLED("mem_err")) { pl = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(pl);
-err1_injected:
 	if (pl == NULL) {
 		m0_layout__log("pdclust_allocate", "M0_ALLOC_PTR() failed",
 			       M0_LAYOUT_ADDB_LOC_PDCLUST_ALLOC,
@@ -804,18 +802,13 @@ static int pdclust_instance_build(struct m0_layout           *l,
 	K  = pl->pl_attr.pa_K;
 	P  = pl->pl_attr.pa_P;
 
-	if (M0_FI_ENABLED("mem_err1")) { pi = NULL; goto err1_injected; }
 	M0_ALLOC_PTR(pi);
-err1_injected:
 	if (pi != NULL) {
 		tc = &pi->pi_tile_cache;
 
-		if (M0_FI_ENABLED("mem_err2"))
-			{ tc->tc_lcode = NULL; goto err2_injected; }
 		M0_ALLOC_ARR(tc->tc_lcode, P);
 		M0_ALLOC_ARR(tc->tc_permute, P);
 		M0_ALLOC_ARR(tc->tc_inverse, P);
-err2_injected:
 		if (tc->tc_lcode != NULL &&
 		    tc->tc_permute != NULL &&
 		    tc->tc_inverse != NULL) {
diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index 1260eb9..6d6af7b 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -2314,7 +2314,7 @@ void test_layer_ext_ops_composite_failure(uint64_t base_lid,
 
 	/* Simulate memory allocation error in the path of ext_inmem_add(). */
 	lid = base_lid + 22;
-	m0_fi_enable_once("ext_inmem_add_internal", "mem_err");
+	m0_fi_enable_once("ext_inmem_add_internal", "alloc_ptr_fail/lr_ext");
 	rc = test_ext_add(lid, domain, 3, 6,
 			  !CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
 			  M0_CLRES_VALID, FAILURE_TEST);
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index b9632d5..d43128b 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -354,7 +354,7 @@ static void test_reg_unreg_failure(void)
 	M0_UT_ASSERT(rc == LTO_REG_ERR);
 	confirm_nothing_is_registered(&t_domain);
 
-	m0_fi_enable_once("composite_register", "mem_err");
+	m0_fi_enable_once("composite_register", "alloc_ptr_fail/csd");
 	rc = m0_layout_type_register(&t_domain, &m0_composite_layout_type);
 	M0_UT_ASSERT(rc == -ENOMEM);
 	confirm_nothing_is_registered(&t_domain);
@@ -379,7 +379,7 @@ static void test_reg_unreg_failure(void)
 	M0_UT_ASSERT(rc == LETO_REG_ERR);
 	confirm_nothing_is_registered(&t_domain);
 
-	m0_fi_enable_once("list_register", "mem_err");
+	m0_fi_enable_once("list_register", "alloc_ptr_fail/lsd");
 	rc = m0_layout_enum_type_register(&t_domain, &m0_list_enum_type);
 	M0_UT_ASSERT(rc == -ENOMEM);
 	confirm_nothing_is_registered(&t_domain);
@@ -515,7 +515,7 @@ static void test_build_failure(void)
 	 * in the path of m0_pdclust_build().
 	 */
 	lid = 2001;
-	m0_fi_enable_once("pdclust_allocate", "mem_err");
+	m0_fi_enable_once("pdclust_allocate", "alloc_ptr_fail/pl");
 	rc = test_build_pdclust(lid, &domain,
 				LIST_ENUM_ID, MORE_THAN_INLINE,
 				FAILURE_TEST);
@@ -526,7 +526,7 @@ static void test_build_failure(void)
 	 * in the path of m0_pdclust_build().
 	 */
 	lid = 2002;
-	m0_fi_enable_once("pdclust_allocate", "mem_err");
+	m0_fi_enable_once("pdclust_allocate", "alloc_ptr_fail/pl");
 	rc = test_build_pdclust(lid, &domain,
 				LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
 				FAILURE_TEST);
@@ -548,7 +548,7 @@ static void test_build_failure(void)
 	 * in the path of m0_pdclust_build().
 	 */
 	lid = 2004;
-	m0_fi_enable_once("list_allocate", "mem_err");
+	m0_fi_enable_once("list_allocate", "alloc_ptr_fail/list_enum");
 	rc = test_build_pdclust(lid, &domain,
 				LIST_ENUM_ID, MORE_THAN_INLINE,
 				FAILURE_TEST);
@@ -559,7 +559,7 @@ static void test_build_failure(void)
 	 * in the path of m0_pdclust_build().
 	 */
 	lid = 2005;
-	m0_fi_enable_once("linear_allocate", "mem_err");
+	m0_fi_enable_once("linear_allocate", "alloc_ptr_fail/lin_enum");
 	rc = test_build_pdclust(lid, &domain,
 				LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
 				FAILURE_TEST);
@@ -594,7 +594,7 @@ static void test_build_failure(void)
 	 * in the path of m0_composite_build().
 	 */
 	lid = 2021;
-	m0_fi_enable_once("composite_allocate", "mem_err");
+	m0_fi_enable_once("composite_allocate", "alloc_ptr_fail/cl");
 	rc = test_build_composite(lid, &domain, 5, !CONTIGUOUS_EXTENTS,
 				  FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
@@ -604,7 +604,7 @@ static void test_build_failure(void)
 	 * layer_inmem_add() that is in the path of m0_composite_build().
 	 */
 	lid = 2022;
-	m0_fi_enable_once("layer_inmem_add", "mem_err");
+	m0_fi_enable_once("layer_inmem_add", "alloc_ptr_fail/layer");
 	rc = test_build_composite(lid, &domain, 5, !CONTIGUOUS_EXTENTS,
 				  FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
@@ -721,7 +721,7 @@ static void test_decode_failure(void)
 
 	/* Simulate memory allocation failure in list_decode(). */
 	lid = 4006;
-	m0_fi_enable_once("list_decode", "mem_err");
+	m0_fi_enable_once("list_decode", "alloc_arr_fail/cob_list");
 	rc = test_decode_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
 				 FAILURE_TEST);
@@ -737,7 +737,7 @@ static void test_decode_failure(void)
 
 	/* Simulate leto_allocate() failure in pdclust_decode(). */
 	lid = 4008;
-	m0_fi_enable_once("linear_allocate", "mem_err");
+	m0_fi_enable_once("linear_allocate", "alloc_ptr_fail/lin_enum");
 	rc = test_decode_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
 				 FAILURE_TEST);
@@ -776,7 +776,7 @@ static void test_decode_failure(void)
 	 * extlist_inbuf_read().
 	 */
 	lid = 4023;
-	m0_fi_enable_once("ext_inmem_add_internal", "mem_err");
+	m0_fi_enable_once("ext_inmem_add_internal", "alloc_ptr_fail/lr_ext");
 	rc = test_decode_composite(lid, &domain, 5, 6,
 				   !CONTIGUOUS_EXTENTS, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
@@ -788,18 +788,19 @@ static void test_decode_failure(void)
 	 * in the path of composite_populate()
 	 */
 	lid = 4024;
-	m0_fi_enable_once("layer_inmem_add", "mem_err");
+	m0_fi_enable_once("layer_inmem_add", "alloc_ptr_fail/layer");
 	rc = test_decode_composite(lid, &domain, 5, 6,
 				   !CONTIGUOUS_EXTENTS, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 
 	/* Simulate memory allocation failure for the first layer addition. */
 	lid = 4025;
-	m0_fi_enable_off_n_on_m("layer_inmem_add", "mem_err", 1, 1);
+	m0_fi_enable_off_n_on_m("layer_inmem_add", "alloc_ptr_fail/layer",
+				1, 1);
 	rc = test_decode_composite(lid, &domain, 5, 6,
 				   !CONTIGUOUS_EXTENTS, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
-	m0_fi_disable("layer_inmem_add", "mem_err");
+	m0_fi_disable("layer_inmem_add", "alloc_ptr_fail/layer");
 
 	/* Simulate sublayout find error while reading the zeroth layer. */
 	lid = 4026;
@@ -1325,7 +1326,7 @@ static void test_instance_failure(void)
 
 	/* Simulate memory allocation error in m0_pdclust_instance_build(). */
 	lid = 13001;
-	m0_fi_enable_once("pdclust_instance_build", "mem_err1");
+	m0_fi_enable_once("pdclust_instance_build", "alloc_ptr_fail/pi");
 	rc = test_instance_pdclust(lid, &domain,
 				   LIST_ENUM_ID, LESS_THAN_INLINE,
 				   FAILURE_TEST);
@@ -1333,7 +1334,8 @@ static void test_instance_failure(void)
 
 	/* Simulate memory allocation error in m0_pdclust_instance_build(). */
 	lid = 13002;
-	m0_fi_enable_once("pdclust_instance_build", "mem_err2");
+	m0_fi_enable_once("pdclust_instance_build",
+			  "alloc_arr_fail/tc->tc_lcode");
 	rc = test_instance_pdclust(lid, &domain,
 				   LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
 				   FAILURE_TEST);
@@ -1352,7 +1354,7 @@ static void test_instance_failure(void)
 
 	/* Simulate memory allocation error in m0_composite_instance_build(). */
 	lid = 13021;
-	m0_fi_enable_once("composite_instance_build", "mem_err");
+	m0_fi_enable_once("composite_instance_build", "alloc_ptr_fail/ci");
 	rc = test_instance_composite(lid, &domain, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 }
@@ -1380,12 +1382,13 @@ static void test_layer_ops_inmem_failure(void)
 
 	/* Simulate memory allocation error while adding a layer. */
 	lid = 15001;
-	m0_fi_enable_off_n_on_m("layer_inmem_add", "mem_err", 1, 1);
+	m0_fi_enable_off_n_on_m("layer_inmem_add", "alloc_ptr_fail/layer",
+				1, 1);
 	rc = test_layer_ops_composite(lid, &domain, 5, 8,
 				      LAYER_ADD_FAILURE_TEST,
 				      !LAYER_DEL_FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
-	m0_fi_disable("layer_inmem_add", "mem_err");
+	m0_fi_disable("layer_inmem_add", "alloc_ptr_fail/layer");
 
 	/* Simulate invalid extent list error while adding a layer. */
 	lid = 15002;
@@ -1587,12 +1590,12 @@ static void test_lookup_failure(void)
 
 	/* Simulate pdclust_allocate() failure in m0_layout_lookup(). */
 	lid = 19003;
-	m0_fi_enable_off_n_on_m("pdclust_allocate", "mem_err", 1, 1);
+	m0_fi_enable_off_n_on_m("pdclust_allocate", "alloc_ptr_fail/pl", 1, 1);
 	rc = test_lookup_pdclust(lid, &domain,
 				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
 				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
-	m0_fi_disable("pdclust_allocate", "mem_err");
+	m0_fi_disable("pdclust_allocate", "alloc_ptr_fail/pl");
 
 	/* Simulate m0_layout_decode() failure in m0_layout_lookup(). */
 	lid = 19004;
@@ -1651,43 +1654,43 @@ static void test_lookup_failure(void)
 	 * in the path of composite_decode().
 	 */
 	lid = 19021;
-	m0_fi_enable_off_n_on_m("layer_inmem_add", "mem_err",
+	m0_fi_enable_off_n_on_m("layer_inmem_add", "alloc_ptr_fail/layer",
 				4 /* Number of layers */, 1);
 	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
-	m0_fi_disable("layer_inmem_add", "mem_err");
+	m0_fi_disable("layer_inmem_add", "alloc_ptr_fail/layer");
 
 	/*
 	 * Simulate layer_inmem_add() failure for its second invokation that is
 	 * in the path of composite_decode().
 	 */
 	lid = 19022;
-	m0_fi_enable_off_n_on_m("layer_inmem_add", "mem_err",
+	m0_fi_enable_off_n_on_m("layer_inmem_add", "alloc_ptr_fail/layer",
 				5 /* Number of layers + 1 */, 1);
 	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
-	m0_fi_disable("layer_inmem_add", "mem_err");
+	m0_fi_disable("layer_inmem_add", "alloc_ptr_fail/layer");
 
 	/*
 	 * Simulate layer_inmem_add() failure for the last layer addition
 	 * that is in the path of composite_decode().
 	 */
 	lid = 19023;
-	m0_fi_enable_off_n_on_m("layer_inmem_add", "mem_err",
+	m0_fi_enable_off_n_on_m("layer_inmem_add", "alloc_ptr_fail/layer",
 				7 /* 2 * layers_nr - 1) */, 1);
 	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
-	m0_fi_disable("layer_inmem_add", "mem_err");
+	m0_fi_disable("layer_inmem_add", "alloc_ptr_fail/layer");
 
 	/*
 	 * Simulate memory allocation error in the path of
 	 * extentmap_indb_read().
 	 */
 	lid = 19024;
-	m0_fi_enable_once("ext_inmem_add_internal", "mem_err");
+	m0_fi_enable_once("ext_inmem_add_internal", "alloc_ptr_fail/lr_ext");
 	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
diff --git a/lib/memory.h b/lib/memory.h
index 7b2344a..1a855a2 100644
--- a/lib/memory.h
+++ b/lib/memory.h
@@ -24,6 +24,7 @@
 
 #include "lib/types.h"
 #include "lib/assert.h" /* M0_CASSERT */
+#include "lib/finject.h"
 #include "addb/addb.h"
 
 /**
@@ -42,8 +43,26 @@
  */
 void *m0_alloc(size_t size);
 
-#define M0_ALLOC_ARR(arr, nr)  ((arr) = m0_alloc((nr) * sizeof ((arr)[0])))
-#define M0_ALLOC_PTR(ptr)      M0_ALLOC_ARR(ptr, 1)
+#define M0_ALLOC_PTR(ptr)				\
+({							\
+	void *__allocated;				\
+	if (M0_FI_ENABLED("alloc_ptr_fail/" #ptr))	\
+		__allocated = NULL;			\
+	else						\
+		__allocated = m0_alloc(sizeof *(ptr));	\
+	(ptr) = __allocated;				\
+})
+
+#define M0_ALLOC_ARR(arr, nr)						\
+({									\
+	void *__allocated;						\
+	if (M0_FI_ENABLED("alloc_arr_fail/" #arr))			\
+		__allocated = NULL;					\
+	else								\
+		__allocated = m0_alloc((nr) * sizeof ((arr)[0]));	\
+	(arr) = __allocated;						\
+})
+
 
 /**
    Macro to allocate a specified size of memory and assign it to a pointer.
-- 
1.8.3.2


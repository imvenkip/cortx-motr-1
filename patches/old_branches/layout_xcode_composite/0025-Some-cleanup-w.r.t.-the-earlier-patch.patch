From d6fdf17cba1de0548463ab0144ec293852011af9 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Thu, 29 Nov 2012 17:33:06 +0530
Subject: [PATCH 025/157] Some cleanup w.r.t. the earlier patch.

---
 layout/composite.c    |  37 ++++++++-------
 layout/ut/composite.c | 127 ++++----------------------------------------------
 2 files changed, 29 insertions(+), 135 deletions(-)

diff --git a/layout/composite.c b/layout/composite.c
index 7305153..3fd670a 100644
--- a/layout/composite.c
+++ b/layout/composite.c
@@ -276,12 +276,11 @@ static void composite_delete(struct c2_layout *l)
 }
 
 /** Adds a layer to the inmemory version of the composite layout. */
-/* todo rename to layer_in_memory_add. */
-static int layer_entry_add(struct c2_composite_layout *cl,
-			   struct c2_layout *sublayout,
-			   struct c2_tl *extlist,
-			   uint32_t ext_nr,
-			   struct c2_composite_layer **lr)
+static int layer_in_memory_add(struct c2_composite_layout *cl,
+			       struct c2_layout *sublayout,
+			       struct c2_tl *extlist,
+			       uint32_t ext_nr,
+			       struct c2_composite_layer **lr)
 {
 	struct c2_composite_layer *layer;
 
@@ -312,7 +311,7 @@ static void composite_populate(struct c2_composite_layout *cl,
 	C2_ENTRY("lid %llu", (unsigned long long)cl->cl_base.l_id);
 	c2_layout__populate(&cl->cl_base, user_count);
 
-	rc = layer_entry_add(cl, oldlayout, NULL, 0, NULL);
+	rc = layer_in_memory_add(cl, oldlayout, NULL, 0, NULL);
 	C2_ASSERT(rc == 0); //todo Handle error, change ret type to int
 
 	C2_POST(composite_invariant(cl));
@@ -330,7 +329,7 @@ int c2_composite_build(struct c2_layout_domain *dom,
 	int                         rc;
 
 	C2_PRE(out != NULL);
-	C2_ENTRY("domain %p, lid %llu", dom,(unsigned long long)lid);
+	C2_ENTRY("domain %p, lid %llu", dom, (unsigned long long)lid);
 
 	rc = composite_allocate(dom, lid, &l);
 	if (rc == 0) {
@@ -380,10 +379,11 @@ static void composite_fini(struct c2_ref *ref)
 			c2_free(layer->clr_extents);
 		}
 		/*
-		 * Decrement the user count incremented by layer_entry_add().
+		 * Decrement the user count incremented by
+		 * layer_in_memory_add().
 		 */
 		c2_layout_user_count_dec(layer->clr_l);
-		/* Release the reference acquired by layer_entry_add(). */
+		/* Release the reference acquired by layer_in_memory_add(). */
 		c2_layout_put(layer->clr_l);
 		c2_layer_tlist_del(layer);
 		c2_layer_tlink_fini(layer);
@@ -686,7 +686,7 @@ static int layer_in_db_add(const struct c2_composite_layout *cl,
 				LRET_NONE);
 	C2_ASSERT(rc == 0 || rc == -EEXIST); //todo handle err
 	if (rc == -EEXIST)
-		return rc; //ADDB rec etc.
+		return rc; //todo ADDB rec etc.
 
 	rc = c2_emap_lookup(emap, tx, (struct c2_uint128 *)&prefix, 0, &it);
 	C2_ASSERT(rc == 0); //todo handle err
@@ -731,7 +731,7 @@ int c2_composite_layer_add(struct c2_composite_layout *cl,
 		return -EINVAL;
 	}
 
-	rc = layer_entry_add(cl, sublayout, extlist, ext_nr, &layer);
+	rc = layer_in_memory_add(cl, sublayout, extlist, ext_nr, &layer);
 	C2_ASSERT(rc == 0); //todo Handle error
 	C2_ASSERT(layer->clr_idx > 0);
 
@@ -895,8 +895,12 @@ static int composite_layout_in_db_read(struct c2_composite_layout *cl,
 		prefix_set(&prefix, cl->cl_base.l_id, i);
 		rc = c2_emap_lookup(emap, tx, (struct c2_uint128 *)&prefix,
 				    0, &it);
-		if (rc != 0) //todo Handle err
+		if (rc != 0) {//todo Handle err
+			rc = 0; //todo Change this once all the layers'
+				// extents are written to the DB OR when
+				// layers_nr is known in advance
 			break;
+		}
 
 		seg = c2_emap_seg_get(&it);
 		C2_ASSERT(!c2_ext_is_empty(&seg->ee_ext));
@@ -947,20 +951,19 @@ static int composite_layout_in_db_read(struct c2_composite_layout *cl,
 		c2_emap_close(&it);
 		C2_ASSERT(!c2_layer_extent_tlist_is_empty(extents));
 
-		rc = layer_entry_add(cl, sublayout, extents, extents_nr, NULL);
+		rc = layer_in_memory_add(cl, sublayout, extents, extents_nr,
+					 NULL);
 		C2_ASSERT(rc == 0); //todo Handle error
 
 		/*
 		 * Release the reference added by c2_layout_find().
-		 * layer_entry_add() has now added a reference on this
+		 * layer_in_memory_add() has now added a reference on this
 		 * sublayout.
 		 */
 		c2_layout_put(sublayout);
 
 		++i;
 	}
-
-	rc = 0; //todo Check
 	return rc;
 }
 
diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index 04d7851..4f9e56d 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -76,14 +76,7 @@ static void extentlist_build(struct c2_tl **extlist,
 	c2_layer_extent_tlist_init(extents);
 	C2_UT_ASSERT(c2_layer_extent_tlist_is_empty(extents));
 
-#if 0
-	C2_UT_ASSERT(min_start_offset == 0 &&
-		     approximate_end_offset == C2_BINDEX_MAX);
-	if_contiguous_extents = true;
-#endif
-
 	multiplier = if_contiguous_extents ? 1 : 2;
-	//delta = (approximate_end_offset - min_start_offset + 1) / extents_nr;
 	delta = (approximate_end_offset - min_start_offset) /
 		(extents_nr * multiplier);
 #ifndef __KERNEL__
@@ -99,61 +92,6 @@ static void extentlist_build(struct c2_tl **extlist,
 		extent->cle_ext.e_start = min_start_offset +
 					  (multiplier * i * delta);
 		extent->cle_ext.e_end = extent->cle_ext.e_start + delta - 1;
-
-/*
-		if (i == extents_nr - 1 &&
-		    extent->cle_ext.e_end != C2_BINDEX_MAX) {
-			C2_UT_ASSERT(((C2_BINDEX_MAX) -
-				      extent->cle_ext.e_end) < delta);
-			extent->cle_ext.e_end = C2_BINDEX_MAX;
-		}
-*/
-#ifndef __KERNEL__
-		printf("ext[%u]: start %llu, end %llu \n", i,
-			(unsigned long long)extent->cle_ext.e_start,
-			(unsigned long long)extent->cle_ext.e_end);
-#endif
-		c2_layer_extent_tlink_init_at_tail(extent, extents);
-	}
-	*extlist = extents;
-	C2_UT_ASSERT(!c2_layer_extent_tlist_is_empty(*extlist));
-}
-
-#if 0 //old
-static void extentlist_build(struct c2_tl **extlist,
-			     uint32_t extents_nr,
-			     c2_bindex_t min_start_offset,
-			     c2_bindex_t approximate_end_offset,
-			     bool if_contiguous_extents)
-{
-	struct c2_tl                     *extents;
-	struct c2_composite_layer_extent *extent;
-	c2_bindex_t                       delta;
-	c2_bindex_t                       multiplier;
-	uint32_t                          i;
-
-	/* Initialise a c2_tl for storing the extents. */
-	C2_ALLOC_PTR(extents);
-	C2_UT_ASSERT(extents != NULL);
-	c2_layer_extent_tlist_init(extents);
-	C2_UT_ASSERT(c2_layer_extent_tlist_is_empty(extents));
-
-	multiplier = if_contiguous_extents ? 1 : 2;
-	delta = (approximate_end_offset - min_start_offset + 1) /
-		(extents_nr * multiplier);
-#ifndef __KERNEL__
-		printf("min_extents_nr %lu, min_start_offset %llu, "
-		       "approximate_end_offset %llu\n",
-			(unsigned long)extents_nr,
-			(unsigned long long)min_start_offset,
-			(unsigned long long)approximate_end_offset);
-#endif
-	for (i = 0; i < extents_nr; ++i) {
-		C2_ALLOC_PTR(extent);
-		C2_UT_ASSERT(extent != NULL);
-		extent->cle_ext.e_start = min_start_offset +
-					  (multiplier * i * delta);
-		extent->cle_ext.e_end = extent->cle_ext.e_start + delta - 1;
 #ifndef __KERNEL__
 		printf("ext[%u]: start %llu, end %llu \n", i,
 			(unsigned long long)extent->cle_ext.e_start,
@@ -164,7 +102,6 @@ static void extentlist_build(struct c2_tl **extlist,
 	*extlist = extents;
 	C2_UT_ASSERT(!c2_layer_extent_tlist_is_empty(*extlist));
 }
-#endif
 
 /*
  * For the layer_nr number of layers to be added to a composite layout,
@@ -216,8 +153,8 @@ static void sublayouts_delete(struct c2_layout_domain *domain,
 			      uint64_t composite_lid,
 			      uint32_t layers_nr)
 {
-	uint64_t          sublayout_lid;
-	uint32_t          i;
+	uint64_t sublayout_lid;
+	uint32_t i;
 
 	for (i = 0; i < layers_nr; ++i) {
 		sublayout_lid = composite_lid * 100 + i;
@@ -286,14 +223,6 @@ static void composite_layout_verify(struct c2_layout *l,
 			j = 0;
 			delta = (approximate_end_offset - min_start_offset) /
 				(extents_nr * multiplier);
-#if 0
-
-			delta = (approximate_end_offset - min_start_offset
-				 + 1) /
-				(extents_nr * multiplier);
-			delta = (approximate_end_offset - min_start_offset) /
-				extents_nr;
-#endif
 			c2_tl_for(c2_layer_extent, layer->clr_extents,
 				  extent) {
 				/* todo Nov 27 Need to make c2...layer_add()
@@ -306,15 +235,6 @@ static void composite_layout_verify(struct c2_layout *l,
 				C2_UT_ASSERT(extent->cle_ext.e_end ==
 					     extent->cle_ext.e_start +
 					     delta - 1);
-#if 0
-				if (j < extents_nr - 1)
-					C2_UT_ASSERT(extent->cle_ext.e_end ==
-						     extent->cle_ext.e_start +
-						     delta - 1);
-				else
-					C2_UT_ASSERT(extent->cle_ext.e_end ==
-						     C2_BINDEX_MAX);
-#endif
 				++j;
 			} c2_tl_endfor;
 			C2_UT_ASSERT(j == extents_nr);
@@ -434,7 +354,6 @@ static int composite_build_and_layers_add(uint64_t lid,
 				  min_start_offset, approximate_end_offset,
 				  if_contiguous_extents, failure_test/* todo*/);
 	C2_UT_ASSERT(rc == 0);
-
 	return rc;
 }
 
@@ -565,29 +484,17 @@ static void composite_layout_buf_build(uint64_t composite_lid,
 
 		delta = (approximate_end_offset - min_start_offset) /
 			(extents_nr * multiplier);
-#if 0
-		delta = (approximate_end_offset - min_start_offset + 1) /
-			(extents_nr * multiplier);
-		delta = (approximate_end_offset - min_start_offset) /
-			extents_nr;
-#endif
 #ifndef __KERNEL__
 		printf("composite_layout_buf_build(): extents_nr %lu, "
 			"delta %llu\n",
 			(unsigned long)extents_nr,
 			(unsigned long long)delta);
 #endif
-	//todo Assert everywhere applicable that extents_nr >= 2
+		//todo Assert everywhere applicable that extents_nr >= 2
 		for (j = 0; j < layer_header.clh_extents_nr; ++j) {
 			ext.e_start = min_start_offset +
 				      multiplier * j * delta;
 			ext.e_end = ext.e_start + delta - 1;
-#if 0
-			if (j < layer_header.clh_extents_nr - 1)
-				ext.e_end = ext.e_start + delta - 1;
-			else
-				ext.e_end = C2_BINDEX_MAX;
-#endif
 			nbytes = c2_bufvec_cursor_copyto(dcur, &ext,
 							 sizeof ext);
 			C2_ASSERT(nbytes == sizeof ext);
@@ -730,25 +637,12 @@ static void composite_layout_buf_verify(uint64_t lid,
 			     layer_header->clh_extents_nr * sizeof ext);
 		delta = (approximate_end_offset - min_start_offset) /
 			(extents_nr * multiplier);
-#if 0
-		delta = (approximate_end_offset - min_start_offset + 1) /
-			(extents_nr * multiplier);
-		delta = (approximate_end_offset - min_start_offset) /
-			extents_nr;
-#endif
 		for (j = 0; j < layer_header->clh_extents_nr; ++j) {
 			ext = c2_bufvec_cursor_addr(cur);
 			c2_bufvec_cursor_move(cur, sizeof *ext);
 			C2_UT_ASSERT(ext->e_start == min_start_offset +
 						     multiplier * j * delta);
 			C2_UT_ASSERT(ext->e_end == ext->e_start + delta - 1);
-#if 0
-			if (j < layer_header->clh_extents_nr - 1)
-				C2_UT_ASSERT(ext->e_end ==
-					     ext->e_start + delta - 1);
-			else
-				C2_UT_ASSERT(ext->e_end == C2_BINDEX_MAX);
-#endif
 		}
 		++extents_nr;
 	}
@@ -1108,7 +1002,6 @@ int test_encode_decode_composite(uint64_t lid,
 				 c2_bindex_t min_start_offset,
 				 c2_bindex_t approximate_end_offset,
 				 bool if_contiguous_extents)
-
 {
 	struct c2_composite_layout *cl;
 	void                       *area;
@@ -1182,7 +1075,6 @@ int test_encode_decode_composite(uint64_t lid,
 }
 
 #ifndef __KERNEL__
-#if 1
 /* Tests the API c2_layout_lookup(), for the COMPOSITE layout type. */
 int test_lookup_composite(uint64_t lid,
 			  struct c2_layout_domain *domain,
@@ -1282,7 +1174,6 @@ int test_lookup_composite(uint64_t lid,
 	C2_LEAVE();
 	return rc;
 }
-#endif
 
 /* Tests the API c2_layout_add(), for the COMPOSITE layout type. */
 int test_add_composite(uint64_t lid,
@@ -1296,12 +1187,12 @@ int test_add_composite(uint64_t lid,
 		       bool duplicate_test,
 		       bool failure_test)
 {
-	c2_bcount_t                   num_bytes;
-	void                         *area;
-	struct c2_composite_layout   *cl;
-	struct c2_db_pair             pair;
-	struct c2_db_tx               tx;
-	int                           rc_tmp;
+	c2_bcount_t                 num_bytes;
+	void                       *area;
+	struct c2_composite_layout *cl;
+	struct c2_db_pair           pair;
+	struct c2_db_tx             tx;
+	int                         rc_tmp;
 
 	C2_ENTRY("lid %llu", (unsigned long long)lid);
 	C2_UT_ASSERT(ergo(layout_destroy, l_obj == NULL));
-- 
1.8.3.2


From 5c4f19951300f08a2f013157fa8c61ea4003216f Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Mon, 1 Apr 2013 15:23:54 +0530
Subject: [PATCH 105/157] More error case coverage

---
 layout/composite.c    |   3 +-
 layout/ut/composite.c | 170 ++++++++++++++++++++++++++++++++++----------------
 layout/ut/composite.h |   1 +
 layout/ut/layout.c    |  14 +++++
 4 files changed, 131 insertions(+), 57 deletions(-)

diff --git a/layout/composite.c b/layout/composite.c
index 03365ff..65fad4f 100644
--- a/layout/composite.c
+++ b/layout/composite.c
@@ -1749,10 +1749,9 @@ static int ext_inmem_write(struct m0_composite_layout *cl,
 
 			lr_ext_to_insert_into = lr_ext_next;
 			chunk = &lr_ext_to_insert_into->cle_ext;
-			if (lr_ext_to_insert_into == NULL)
-				break;
 		}
 	}
+	M0_ASSERT(m0_ext_is_empty(&ext0));
 
 	/*
 	 * Now that the deletion/trimming of the overlapping extents
diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index c10c0e2..b38860f 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -1552,8 +1552,8 @@ static void extent_to_be_operated(const struct m0_composite_layout *cl,
 		ext->e_end = ext_idx_plus_oneth.e_end;
 	} else if (extent_kind == OVERLAPPING_COMPLETE) {
 		if (if_contiguous_extents) {
-			ext->e_start = ext_idxth.e_start - 1;
-			ext->e_end = ext_idxth.e_end + 1;
+			ext->e_start = ext_idxth.e_start - 1; //todo 2
+			ext->e_end = ext_idxth.e_end + 1;	//todo 2
 		} else {
 			if ((i - 1) % 2 == 0) {
 				ext->e_start = ext_idxth.e_start - 1;
@@ -1605,14 +1605,14 @@ static int ext_op_pre(enum extent_operation eop,
 		      uint64_t *ext_state_lookup,
 		      struct m0_layout **l_copy_orig)
 {
-	bool                        is_add_to_db;
-	struct m0_db_tx            *txptr;
-	uint32_t                    layer_id_lookup;
-	struct m0_ext               ext_lookup;
-	struct m0_layout           *sublayout_lookup;
-	struct m0_db_tx             tx;
-	int                         rc_tmp;
-	int                         rc;
+	bool              is_add_to_db;
+	struct m0_db_tx  *txptr;
+	uint32_t          layer_id_lookup;
+	struct m0_ext     ext_lookup;
+	struct m0_layout *sublayout_lookup;
+	struct m0_db_tx   tx;
+	int               rc_tmp;
+	int               rc;
 
 	M0_UT_ASSERT(M0_IN(eop, (EXTENT_LOOKUP, EXTENT_ADD, EXTENT_UPDATE,
 				 EXTENT_DELETE)));
@@ -1647,9 +1647,8 @@ static int ext_op_pre(enum extent_operation eop,
 		txptr = NULL;
 
 	if (eop == EXTENT_LOOKUP)
-		my_console_printf("\nextlist dump before ext LOOKUP "
-				  "with ext_kind %u, offset %llu\n",
-				  extent_kind,
+		my_console_printf("\nextlist dump before ext LOOKUP with "
+				  "ext_kind %u, offset %llu\n", extent_kind,
 				  (unsigned long long)*offset_to_operate);
 	else
 		my_console_printf("\nextlist dump before ext "
@@ -1699,6 +1698,10 @@ static int ext_op_pre(enum extent_operation eop,
 	return rc;
 }
 
+/**
+ * Post-processes an extent operation by comparing the in-memory and the
+ * in-DB layout, if applicable, and by deleting the layout.
+ */
 static void ext_op_post(enum extent_operation eop,
 			uint64_t lid,
 			struct m0_layout_domain *domain,
@@ -1740,8 +1743,9 @@ static void ext_op_post(enum extent_operation eop,
 
 	if (l_copy_orig->l_dom->ld_is_db_available) {
 		/*
-		 * Read the layout from the DB and compare to verify that the
-		 * the DB version of the layout has been updated right.
+		 * Read the layout from the DB and compare it to the in-memory
+		 * layout to verify that the DB version of the layout has been
+		 * updated right.
 		 */
 		l_from_DB = NULL;
 		rc = layout_lookup(lid, domain, &m0_composite_layout_type,
@@ -1788,7 +1792,7 @@ static int ext_add(struct m0_composite_layout *cl,
 	rc = m0_composite_layer_ext_add(cl, cl->cl_layers_nr - 1,
 					ext_to_operate, ext_state, txptr);
 	if (failure_test) {
-		M0_UT_ASSERT(rc == -EINVAL);
+		M0_UT_ASSERT(rc == -EINVAL || rc == -EINVAL);
 		//todo print rc
 	} else {
 		M0_UT_ASSERT(rc == 0);
@@ -1911,27 +1915,31 @@ static int ext_delete(struct m0_composite_layout *cl,
 	rc = m0_composite_layer_ext_delete(cl, cl->cl_layers_nr - 1,
 					   ext_to_operate, txptr);
 	if (failure_test)
-		M0_UT_ASSERT(rc == -ENOENT);
-	else
-		M0_UT_ASSERT(rc == 0);
-	//todo cover err cases and in failure cases, print rc
-	my_console_printf("extlist dump after ext DELETE with ext_kind %u\n,"
-			  "\text [%llu, %llu) \n", extent_kind,
-			  (unsigned long long)ext_to_operate->e_start,
-			  (unsigned long long)ext_to_operate->e_end);
-	extlist_dump(cl, cl->cl_layers_nr - 1);
-
-	rc = m0_composite_layer_ext_lookup(cl, offset_to_operate, txptr,
-					   &ext_lookup, &layer_id_lookup,
-					   &ext_state_lookup,
-					   &sublayout_lookup);
-	if (extent_kind == NON_EXISTING ||
-	    (extent_kind == OVERLAPPING_LEFT && !if_contiguous_extents)) {
-		M0_UT_ASSERT(rc == -ENOENT);
-		rc = 0;
-	} else {
+		M0_UT_ASSERT(rc == -ENOENT || rc == -EINVAL);
+	else {
 		M0_UT_ASSERT(rc == 0);
-		M0_UT_ASSERT(layer_id_lookup == cl->cl_layers_nr - 2);
+		//todo cover err cases and in failure cases, print rc
+		my_console_printf("extlist dump after ext DELETE with "
+				  "ext_kind %u\n, \text [%llu, %llu) \n",
+				  extent_kind,
+				  (unsigned long long)ext_to_operate->e_start,
+				  (unsigned long long)ext_to_operate->e_end);
+		extlist_dump(cl, cl->cl_layers_nr - 1);
+
+		rc = m0_composite_layer_ext_lookup(cl, offset_to_operate, txptr,
+						   &ext_lookup,
+						   &layer_id_lookup,
+						   &ext_state_lookup,
+						   &sublayout_lookup);
+		if (extent_kind == NON_EXISTING ||
+		    (extent_kind == OVERLAPPING_LEFT &&
+		     !if_contiguous_extents)) {
+			M0_UT_ASSERT(rc == -ENOENT);
+			rc = 0;
+		} else {
+			M0_UT_ASSERT(rc == 0);
+			M0_UT_ASSERT(layer_id_lookup == cl->cl_layers_nr - 2);
+		}
 	}
 
 	//todo in failure case, compare the original in-mem layout
@@ -1968,13 +1976,12 @@ static int test_ext_lookup(uint64_t lid,
 		M0_UT_ASSERT(rc == 0);
 
 	/*
-	 * Nothing else to be done, lookup is performed as a part
-	 * of ext_op_pre() called above.
+	 * Nothing else to be done, lookup is performed as a part of
+	 * ext_op_pre() called above.
 	 */
 	my_console_printf("after LOOKUP for offset %llu: rc %d, state %llu\n",
 			  (unsigned long long)offset_to_operate, rc,
 			  (rc == 0) ? (unsigned long long)ext_state_lookup : 0);
-
 	ext_op_post(EXTENT_LOOKUP, cl->cl_base.l_id, domain, cl->cl_layers_nr,
 		    extent_kind, cl, l_copy_orig, failure_test /* todo */);
 	return rc;
@@ -2005,7 +2012,10 @@ static int test_ext_add(uint64_t lid,
 	rc = ext_add(cl, l_copy_orig, domain, extent_kind,
 		     &ext_to_operate, offset_to_operate, ext_state,
 		     failure_test);
-	M0_UT_ASSERT(rc == 0);
+	if (failure_test)
+		M0_UT_ASSERT(rc == -EINVAL);
+	else
+		M0_UT_ASSERT(rc == 0);
 
 	ext_op_post(EXTENT_ADD, cl->cl_base.l_id, domain, cl->cl_layers_nr,
 		    extent_kind, cl, l_copy_orig, failure_test);
@@ -2037,7 +2047,10 @@ static int test_ext_state_update(uint64_t lid,
 	rc = ext_update(cl, l_copy_orig, domain, extent_kind,
 			&ext_to_operate, offset_to_operate, ext_state,
 			failure_test);
-	M0_ASSERT(rc == 0);
+	if (failure_test)
+		M0_ASSERT(rc == -EINVAL);
+	else
+		M0_ASSERT(rc == 0);
 
 	ext_op_post(EXTENT_UPDATE, cl->cl_base.l_id, domain, cl->cl_layers_nr,
 		    extent_kind, cl, l_copy_orig, failure_test);
@@ -2057,6 +2070,7 @@ static int test_ext_delete(uint64_t lid,
 	struct m0_ext               ext_to_operate;
 	m0_bindex_t                 offset_to_operate;
 	uint64_t                    ext_state_lookup;
+	struct m0_ext               ext;
 	int                         rc;
 
 	rc = ext_op_pre(EXTENT_DELETE, lid, domain, layers_nr, min_extents_nr,
@@ -2065,11 +2079,25 @@ static int test_ext_delete(uint64_t lid,
 			&ext_state_lookup, &l_copy_orig);
 	M0_ASSERT(rc == 0);
 
+	if (M0_FI_ENABLED("ext_del_validation_err")) {
+		M0_UT_ASSERT(extent_kind == OVERLAPPING_COMPLETE);
+		ext.e_start = ext_to_operate.e_end - 1;
+		ext.e_end = ext_to_operate.e_end;
+		rc = m0_composite_layer_ext_state_update(cl,
+							 cl->cl_layers_nr - 1,								 &ext,
+							 M0_CLRES_FLATTENING,
+							 NULL/*todo for db */);
+		M0_UT_ASSERT(rc == 0);
+		/* Now that the layout is updated, update its copy. */
+		composite_layout_copy_delete(l_copy_orig);
+		composite_layout_copy(&cl->cl_base, &l_copy_orig);
+	}
+
 	rc = ext_delete(cl, l_copy_orig, domain, extent_kind,
 			if_contiguous_extents, &ext_to_operate,
 			offset_to_operate, failure_test);
 	if (failure_test)
-		M0_ASSERT(rc == -ENOENT);
+		M0_ASSERT(rc == -ENOENT || rc == -EINVAL);
 	else
 		M0_ASSERT(rc == 0);
 
@@ -2141,11 +2169,11 @@ static int ext_ops(uint64_t base_lid,
 	return rc;
 }
 
+//todo Make sure to test the ext ops for the zeroth layer and for the layer in-between. Follwing tests for the top-most layer
 void test_layer_ext_ops_composite(uint64_t base_lid,
 				  struct m0_layout_domain *domain)
 {
-	uint64_t lid;
-	int      rc;
+	int rc;
 
 	/* Test cases for extent lookup. */
 	rc = ext_ops(base_lid, domain, EXTENT_LOOKUP);
@@ -2157,8 +2185,7 @@ void test_layer_ext_ops_composite(uint64_t base_lid,
 
 	//todo Add extent with the flattening state
 	//todo Cover other cases with the flattening state addition
-	lid = base_lid + 60;
-	rc = test_ext_add(lid, domain, 4, 6,
+	rc = test_ext_add(base_lid + 60, domain, 4, 6,
 			  !CONTIGUOUS_EXTENTS, NON_EXISTING,
 			  M0_CLRES_FLATTENING, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
@@ -2180,7 +2207,40 @@ void test_layer_ext_ops_composite(uint64_t base_lid,
 void test_layer_ext_ops_composite_failure(uint64_t lid,
 					  struct m0_layout_domain *domain)
 {
+	int rc;
+
+	//todo Make ext_ops() accept state so that all extent_kinds can be tested for such failure
+	/*
+	 * Simulate extent validation error by trying to add an extent with
+	 * the M0_CLRES_FLATTENING state that overlaps with an existing extent
+	 * with the M0_CLRES_VALID state.
+	 */
+	rc = test_ext_add(lid, domain, 2, 6, CONTIGUOUS_EXTENTS, EXACT_EXISTING,
+			  M0_CLRES_FLATTENING, FAILURE_TEST);
+	M0_ASSERT(rc == -EINVAL);
 
+	/*
+	 * Simulate extent validation error by trying to update an extent with
+	 * the M0_CLRES_FLATTENING state that at least partially overlaps with
+	 * two existing extents - one with the M0_CLRES_INVALID state and the
+	 * other with M0_CLRES_VALID state..
+	 */
+	rc = test_ext_state_update(lid + 1, domain, 3, 6, !CONTIGUOUS_EXTENTS,
+				   OVERLAPPING_LEFT, M0_CLRES_FLATTENING,
+				   FAILURE_TEST);
+	M0_ASSERT(rc == -EINVAL);
+
+#if 0 //enable by intialising tx for the db case
+	/*
+	 * Simulate extent validation error by trying to delete an extent
+	 * that overlaps with multiple extents while at least two of those are
+	 * with two different states other than M0_CLRES_INVALID.
+	 */
+	m0_fi_enable_once("test_ext_delete", "ext_del_validation_err");
+	rc = test_ext_delete(lid + 2, domain, 2, 6, !CONTIGUOUS_EXTENTS,
+			     OVERLAPPING_COMPLETE, FAILURE_TEST);
+	M0_ASSERT(rc == -EINVAL);
+#endif
 }
 
 #ifndef __KERNEL__
@@ -2557,15 +2617,15 @@ int test_delete_composite(uint64_t lid,
 			  bool if_contiguous_extents,
 			  bool failure_test)
 {
-	m0_bcount_t                       num_bytes;
-	void                             *area;
-	struct m0_composite_layout       *cl;
-	struct m0_layout                 *l_lookup;
-	struct m0_db_pair                 pair;
-	struct m0_db_tx                   tx;
-	struct m0_composite_layer        *layer;
-	int                               rc_tmp;
-	int                               rc;
+	m0_bcount_t                 num_bytes;
+	void                       *area;
+	struct m0_composite_layout *cl;
+	struct m0_layout           *l_lookup;
+	struct m0_db_pair           pair;
+	struct m0_db_tx             tx;
+	struct m0_composite_layer  *layer;
+	int                         rc_tmp;
+	int                         rc;
 
 	allocate_area(domain, ADDITIONAL_BYTES_NONE, &num_bytes, &area);
 
diff --git a/layout/ut/composite.h b/layout/ut/composite.h
index 88474dc..f20f4ac 100644
--- a/layout/ut/composite.h
+++ b/layout/ut/composite.h
@@ -37,6 +37,7 @@ enum kind_of_extent {
 	OVERLAPPING_RIGHT     = 3,
 	OVERLAPPING_COMPLETE  = 4,
 	CONTAINED_WITHIN      = 5,
+	//todo Add OVERLAPPING_MULTIPLE
 
 	KIND_OF_EXTENT_NR
 };
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index 1dbc4e3..578641f 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -2378,6 +2378,18 @@ static void test_layer_ext_ops_indb(void)
 	domain_ldb_available_set(&domain, false);
 }
 
+static void test_layer_ext_ops_indb_failure(void)
+{
+	uint64_t lid;
+
+	domain_ldb_available_set(&domain, true);
+
+	lid = 29001;
+	test_layer_ext_ops_composite_failure(lid, &domain);
+
+	domain_ldb_available_set(&domain, false);
+}
+
 #endif /* __KERNEL__ */
 
 const struct m0_test_suite layout_ut = {
@@ -2426,6 +2438,8 @@ const struct m0_test_suite layout_ut = {
 		{ "layout-layer-ops-indb-failure",
 			test_layer_ops_indb_failure },
 		{ "layout-layer-ext-ops-indb", test_layer_ext_ops_indb },
+		{ "layout-layer-ext-ops-indb-failure",
+			test_layer_ext_ops_indb_failure },
 #endif
 		{ NULL, NULL }
 	}
-- 
1.8.3.2


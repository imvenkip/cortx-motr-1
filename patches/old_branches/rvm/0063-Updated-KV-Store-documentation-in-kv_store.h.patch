From e8f737e3cbfdd6a1f550c40eba0206d0023eb5fd Mon Sep 17 00:00:00 2001
From: Zishan Shaikh <zishan_shaikh@xyratex.com>
Date: Tue, 12 Mar 2013 03:24:40 -0700
Subject: [PATCH 063/121] Updated KV-Store documentation in kv_store.h

---
 be/kv_store.h | 93 ++++++++++++++++++++++++++++++++++++++++++-----------------
 1 file changed, 66 insertions(+), 27 deletions(-)

diff --git a/be/kv_store.h b/be/kv_store.h
index 37c199a..4730a31 100644
--- a/be/kv_store.h
+++ b/be/kv_store.h
@@ -64,16 +64,19 @@
             and match routines which return integer value.
 
        @code:
-       int function_match(void *, void *);
-       int function_compare(void *, void *);
-
-       struct m0_be_kv_store *handle;
-       struct m0_tl_descr    *list_descr;
-       struct m0_be_domain   *dom;
-       kv_key_cmp_t           cmp_routine;
-       kv_key_match_t         match_routine;
-       char                  *mode = "create" or "recover";
-       bool                   status;
+       int  function_match(void *, void *);
+       int  function_compare(void *, void *);
+       void init_callback(void *);
+
+       struct m0_be_kv_store    *handle;
+       struct m0_be_kv_store_cb *cb_info;
+       struct m0_tl_descr       *list_descr;
+       struct m0_be_domain      *dom;
+       kv_key_cmp_t              cmp_routine;
+       kv_key_match_t            match_routine;
+       char                     *mode = "create" or "recover";
+       bool                      status;
+       void                     *cb_data;
 
        cmp_routine   = &function_compare;
        match_routine = &function_match(void *, void *);
@@ -84,7 +87,10 @@
 
        sm_group = m0_be_domain_sm_group(kv_dom);
 
-       m0_be_ks_init(handle, "create");
+       cb_info->ksc_cbdata     = cb_data;
+       cb_info->ksc_cb         = init_callback;
+
+       m0_be_ks_init(handle, cb_info, "create");
        m0_be_wait(sm_group, &handle->ks_handle_heap.ksh_sm,
                   M0_BITS(M0_BEKS_DONE));
 
@@ -96,25 +102,39 @@
             on RVM.
 
        @code
-       int                     status;
-       struct foo             *object;
-       struct m0_be_reg       *region;
-       struct m0_be_reference *reference;
-       struct m0_be_tx        *tx;
+       void insert_callback(void *);
+
+       int                       status;
+       struct foo               *object;
+       struct m0_be_reg         *region;
+       struct m0_be_reference   *reference;
+       struct m0_be_tx          *tx;
+       struct m0_be_kv_store_cb *cb_info;
+       voif                     *cb_data;
 
        object = m0_be_ks_obj_malloc(region, &reference);
 
+       cb_info->ksc_cbdata     = cb_data;
+       cb_info->ksc_cb         = insert_callback;
+
        strcpy(object->key, "mero-rvm");
-       status = m0_be_ks_insert(handle, reference, tx);
+       status = m0_be_ks_insert(handle, cb_info, reference, tx);
        M0_ASSERT(status == BE_KV_SUCCESS);
        @endcode
 
    Search:
        @code:
-       struct foo *object;
-       char       *key;
+       void find_callback(void *);
 
-       object = m0_be_ks_find(handle, key);
+       struct foo               *object;
+       char                     *key;
+       void                     *cb_data;
+       struct m0_be_kv_store_cb *cb_info;
+
+       cb_info->ksc_cbdata     = cb_data;
+       cb_info->ksc_cb         = find_callback;
+
+       object = m0_be_ks_find(handle, cb_info, key);
        M0_ASSERT(object != NULL);
        @endcode
 
@@ -122,21 +142,40 @@
        PRE: Prepare and capture a region for the @object to be deleted.
 
        @code:
-       struct foo *object;
-       char       *key;
 
+       void find_callback(void *);
+       void delete_callback(void *);
+
+       struct foo               *object;
+       char                     *key;
+       void                     *cb_data;
+       struct m0_be_kv_store_cb *cb_info;
 
-       object = m0_be_ks_find(handle, key);
-       status = m0_be_ks_delete(handle, object, tx);
+       cb_info->ksc_cbdata     = cb_data;
+       cb_info->ksc_cb         = find_callback;
+
+       object = m0_be_ks_find(handle, cb_info, key);
+
+       cb_info->ksc_cbdata     = cb_data;
+       cb_info->ksc_cb         = delete_callback;
+
+       status = m0_be_ks_delete(handle, cb_info, object, tx);
        @endcode
 
    Fini:
        @param seg: segment that was used to allocate memory to object while
                    insertion
        @code:
+
+       void fini_callback(void *);
        struct m0_be_seg *seg;
 
-       m0_be_ks_fini(dom, seg);
+       struct m0_be_kv_store_cb *cb_info;
+
+       cb_info->ksc_cbdata     = cb_data;
+       cb_info->ksc_cb         = fini_callback;
+
+       m0_be_ks_fini(handle, cb_info, seg);
        @endcode
   @{
  */
@@ -286,9 +325,9 @@ M0_INTERNAL void m0_be_ks_init(struct m0_be_kv_store     *handle,
 
   @todo: as we have just segment now, segment parameter needed for now.
  */
-M0_INTERNAL void m0_be_ks_fini(struct m0_be_kv_store *handle,
+M0_INTERNAL void m0_be_ks_fini(struct m0_be_kv_store     *handle,
                                struct m0_be_kv_store_cb  *cb_info,
-                               struct m0_be_seg      *seg);
+                               struct m0_be_seg          *seg);
 /**
   Insert a key value pair in the tlist contained in @handle.
 
-- 
1.8.3.2


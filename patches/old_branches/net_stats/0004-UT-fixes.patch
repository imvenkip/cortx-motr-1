From 61e0beb64d4c57a5cbad47cab91b933f033f631e Mon Sep 17 00:00:00 2001
From: Nathan Rutman <nathan_rutman@xyratex.com>
Date: Fri, 17 Dec 2010 11:19:19 -0800
Subject: [PATCH 4/5] UT fixes

---
 c2t1fs/st/common.sh |  0
 c2t1fs/st/dbench.sh |  0
 c2t1fs/st/perf.sh   | 12 ++++++++----
 c2t1fs/st/test.sh   |  0
 net/net.h           |  2 +-
 net/net_utils.c     | 23 ++++++++++++-----------
 stob/ut/server.c    |  9 +++++++--
 7 files changed, 28 insertions(+), 18 deletions(-)
 mode change 100644 => 100755 c2t1fs/st/common.sh
 mode change 100644 => 100755 c2t1fs/st/dbench.sh
 mode change 100644 => 100755 c2t1fs/st/perf.sh
 mode change 100644 => 100755 c2t1fs/st/test.sh

diff --git a/c2t1fs/st/common.sh b/c2t1fs/st/common.sh
old mode 100644
new mode 100755
diff --git a/c2t1fs/st/dbench.sh b/c2t1fs/st/dbench.sh
old mode 100644
new mode 100755
diff --git a/c2t1fs/st/perf.sh b/c2t1fs/st/perf.sh
old mode 100644
new mode 100755
index b34c91d..5df19e0
--- a/c2t1fs/st/perf.sh
+++ b/c2t1fs/st/perf.sh
@@ -26,17 +26,21 @@ lsmod | grep -c "c2t1fs" || exit
 sleep 1
 mkdir -p /mnt/c2t1fs
 
-# 1024 * 1024 * 256 = 268435456
-mount -t c2t1fs -o objid=12345,objsize=268435456,ds=$IPAddr:$Port $IPAddr:$Port /mnt/c2t1fs
+# size of file to write, in MB
+MB=256
+
+mount -t c2t1fs -o objid=12345,objsize=$((MB * 1024 * 1024)),ds=$IPAddr:$Port $IPAddr:$Port /mnt/c2t1fs || exit 1
 
 echo "wwwwwwwwwwwwwwwww"
 for bs in 1 2 4 8 16 32 64 128 256 1024; do
-	dd if=/dev/zero of=/mnt/c2t1fs/12345 bs=${bs}k count=$((268435456 / bs / 1024 ))
+	echo "w block size ${bs}k"
+	dd if=/dev/zero of=/mnt/c2t1fs/12345 bs=${bs}k count=$((MB * 1024 / bs))
 done
 
 echo "rrrrrrrrrrrrrrrrr"
 for bs in 1024 512 256 128 64 32 16 8 4 2 1; do
-	dd of=/dev/null if=/mnt/c2t1fs/12345 bs=${bs}k count=$((268435456 / bs / 1024 ))
+	echo "r block size ${bs}k"
+	dd of=/dev/null if=/mnt/c2t1fs/12345 bs=${bs}k count=$((MB * 1024 / bs))
 done
 
 umount /mnt/c2t1fs
diff --git a/c2t1fs/st/test.sh b/c2t1fs/st/test.sh
old mode 100644
new mode 100755
diff --git a/net/net.h b/net/net.h
index ba9b052..531522b 100644
--- a/net/net.h
+++ b/net/net.h
@@ -159,7 +159,7 @@ void c2_net_domain_stats_collect(struct c2_net_domain *dom,
                                  bool *sleeping);
 /**
  Report the network loading rate for a direction (in/out).
- @returnval rate, in percent * 256 of maximum seen rate (e.g. 128 = 50%)
+ @returnval rate, in percent * 100 of maximum seen rate (e.g. 1234 = 12.34%)
  */
 int c2_net_domain_stats_get(struct c2_net_domain *dom,
                             enum c2_net_stats_direction dir);
diff --git a/net/net_utils.c b/net/net_utils.c
index b58b93d..6aad150 100644
--- a/net/net_utils.c
+++ b/net/net_utils.c
@@ -65,8 +65,8 @@ void c2_net_domain_stats_fini(struct c2_net_domain *dom)
 
 /**
  Collect some network loading stats
- */
-/** @todo fm_sizeof used in calls to here gives the size of a "top-most"
+
+ @todo fm_sizeof used in calls to here gives the size of a "top-most"
  in-memory fop struct.  All substructures pointed to from the
  top are allocated deep inside XDR bowels. E.g., for read or
  write this won't include data buffers size.
@@ -94,32 +94,33 @@ void c2_net_domain_stats_collect(struct c2_net_domain *dom,
   Report the network loading rate for a direction (in/out).
   Assume semi-regular calling of this function; timebase is simply the time
   between calls.
-  @returnval rate, in percent * 256 of maximum seen rate (e.g. 128 = 50%)
+  @returnval rate, in percent * 100 of maximum seen rate (e.g. 1234 = 12.34%)
  */
 int c2_net_domain_stats_get(struct c2_net_domain *dom,
                             enum c2_net_stats_direction dir)
 {
         uint64_t interval_usec, rate, max;
-        c2_time now;
+        c2_time now, interval;
         int rv;
 
         c2_time_now(&now);
 
         /* We lock here against other callers only -- stats are still being
-           collected while we are here. We therefore reset stats only after
-           we calclate the rate.  The rate may be slightly off because of the
-           ongoing collection. */
+           collected while we are here. We reset stats only after we calculate
+           the rate, and lock so that the rate calculation and reset is atomic.
+           The reported rate may be slightly off because of the ongoing
+           collection. */
         c2_rwlock_write_lock(&dom->nd_stats[dir].ns_lock);
 
-        now = c2_time_sub(&now, &dom->nd_stats[dir].ns_time);
-        interval_usec = c2_time_flatten(&now);
+        interval = c2_time_sub(&now, &dom->nd_stats[dir].ns_time);
+        interval_usec = c2_time_flatten(&interval);
         interval_usec = max64u(interval_usec, 1);
 
         /* Load based on data rate only, bytes/sec */
         rate = c2_atomic64_get(&dom->nd_stats[dir].ns_bytes) *
                           ONE_BILLION / interval_usec;
         max = max64u(dom->nd_stats[dir].ns_max, rate);
-        rv = rate << 8 / max;
+        rv = (int)((rate * 10000) / max);
 
         /* At start of world we might think any data rate is the max. Instead
            we can use threads_woken == reqs to calculate if we're not busy --
@@ -130,7 +131,7 @@ int c2_net_domain_stats_get(struct c2_net_domain *dom,
                 if (c2_atomic64_get(&dom->nd_stats[dir].ns_threads_woken) << 8 /
                     c2_atomic64_get(&dom->nd_stats[dir].ns_reqs) > 230)
                         /* at least 90% not busy, report "10% busy" */
-                        rv = 10 << 8 / 100;
+                        rv = (10 * 10000) / 100;
                 else
                         /* Once we get a little busy, start trusting max */
                         dom->nd_stats[dir].ns_got_busy = true;
diff --git a/stob/ut/server.c b/stob/ut/server.c
index 1023883..198fce2 100644
--- a/stob/ut/server.c
+++ b/stob/ut/server.c
@@ -382,6 +382,7 @@ int main(int argc, char **argv)
 	char        opath[64];
 	char        dpath[64];
 	int         port;
+        int         i = 0;
 
 	struct c2_stob_domain  *bdom;
 	struct c2_stob_id       backid;
@@ -495,8 +496,12 @@ int main(int argc, char **argv)
 
 	while (!stop) {
 		sleep(1);
-		//printf("allocated: %li\n", c2_allocated());
-	}
+                //printf("allocated: %li\n", c2_allocated());
+                if (i++ % 5 == 0)
+                        printf("busy: in=%5.2f out=%5.2f\n",
+                               (float)c2_net_domain_stats_get(&ndom, NS_STATS_IN) / 100,
+                               (float)c2_net_domain_stats_get(&ndom, NS_STATS_OUT) / 100);
+        }
 
 	c2_service_stop(&service);
 	c2_service_id_fini(&sid);
-- 
1.8.3.2


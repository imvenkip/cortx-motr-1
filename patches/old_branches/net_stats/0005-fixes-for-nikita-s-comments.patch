From 73b941527c3bcbdcad21291fe384ee1f0123cdb9 Mon Sep 17 00:00:00 2001
From: Nathan Rutman <nathan_rutman@xyratex.com>
Date: Thu, 13 Jan 2011 14:55:58 -0800
Subject: [PATCH 5/5] fixes for nikita's comments:  don't return structs  don't
 use typedef  rename time_.h to time.h  fix time_after for wrapping

---
 lib/Makefile.am         |  2 +-
 lib/linux_kernel/time.c | 15 ++++-----
 lib/linux_kernel/time.h |  4 ++-
 lib/time.h              | 79 +++++++++++++++++++++++++++++++++++++++++++++++
 lib/time_.c             | 42 ++++++++++++-------------
 lib/time_.h             | 81 -------------------------------------------------
 lib/user_space/time.c   | 18 +++++------
 lib/user_space/time.h   |  6 ++--
 lib/ut/time.c           | 18 +++++++----
 net/net.h               |  4 +--
 net/net_utils.c         |  6 ++--
 11 files changed, 138 insertions(+), 137 deletions(-)
 create mode 100644 lib/time.h
 delete mode 100644 lib/time_.h

diff --git a/lib/Makefile.am b/lib/Makefile.am
index 8cd96bb..93e4528 100644
--- a/lib/Makefile.am
+++ b/lib/Makefile.am
@@ -4,7 +4,7 @@ libc2dir             = $(includedir)/lib
 libc2_HEADERS        = adt.h atomic.h cond.h getopts.h misc.h refs.h trace.h \
                        ut.h arith.h cdefs.h errno.h list.h mutex.h rwlock.h \
                        types.h vec.h assert.h chan.h ext.h memory.h queue.h \
-                       thread.h time_.h ub.h
+                       thread.h time.h ub.h
 
 noinst_LTLIBRARIES   = libc2.la
 libc2_la_SOURCES     = libc2.c memory.c list.c refs.c rwlock.c \
diff --git a/lib/linux_kernel/time.c b/lib/linux_kernel/time.c
index ac5b006..73492b7 100644
--- a/lib/linux_kernel/time.c
+++ b/lib/linux_kernel/time.c
@@ -1,25 +1,22 @@
 /* -*- C -*- */
 
-#include "lib/time_.h"
+#include "lib/time.h"
+#include "lib/assert.h"  /* C2_CASSERT */
 #include <linux/module.h>
 #include <linux/time.h>
 
 /**
    @addtogroup time
 
-   <b>Implementation of c2_mutex on top of kernel struct timespec
+   <b>Implementation of c2_time on top of kernel struct timespec
 
    @{
 */
 
-c2_time c2_time_now(c2_time *time)
+void c2_time_now(struct c2_time *time)
 {
-        c2_time res;
-
-        res = current_kernel_time();
-	if (time != NULL)
-		*time = res;
-        return res;
+	C2_PRE(time != NULL);
+        time->ts = current_kernel_time();
 }
 
 /** @} end of time group */
diff --git a/lib/linux_kernel/time.h b/lib/linux_kernel/time.h
index 79d001f..fc83285 100644
--- a/lib/linux_kernel/time.h
+++ b/lib/linux_kernel/time.h
@@ -14,7 +14,9 @@
 
 /* kernel and userspace both happen to have a struct timespec, but defined in
  different headers */
-typedef struct timespec c2_time;
+struct c2_time {
+	struct timespec ts;
+};
 
 /** @} end of time group */
 
diff --git a/lib/time.h b/lib/time.h
new file mode 100644
index 0000000..bf90ab0
--- /dev/null
+++ b/lib/time.h
@@ -0,0 +1,79 @@
+/* -*- C -*- */
+
+#ifndef __COLIBRI_LIB_TIME_H__
+#define __COLIBRI_LIB_TIME_H__
+
+#include <lib/types.h>
+
+/**
+   @defgroup time Generic time manipulation
+
+   There is just one time structure in C2: struct c2_time.
+   It can be used for wall time, finding an interval, adding
+   times, ordering, etc.  It delivers resolution in nanoseconds,
+   and has (at least) the following members:
+   <sometype> tv_sec
+   long       tv_nsec
+
+   @{
+*/
+
+#ifndef __KERNEL__
+#include "lib/user_space/time.h"
+#else
+#include "lib/linux_kernel/time.h"
+#endif
+/** struct c2_time is defined by headers above. */
+
+
+#define ONE_BILLION 1000000000
+
+/** Get the current time.  This may or may not relate to wall time.
+
+    @param time [OUT] current time if pointer is non-NULL
+    @retval current time
+*/
+void c2_time_now(struct c2_time *time);
+
+/** Flatten a c2_time structure into a uint64
+    @retval time in nanoseconds
+ */
+uint64_t c2_time_flatten(const struct c2_time *time);
+
+/** Create a c2_time struct from seconds and ns
+ */
+void c2_time_set(struct c2_time *time, uint64_t secs, long ns);
+
+/** Add t2 to t1
+ */
+void c2_time_add(const struct c2_time *t1, const struct c2_time *t2,
+                 struct c2_time *res);
+
+/** Subtract t2 from t1
+ */
+void c2_time_sub(const struct c2_time *t1, const struct c2_time *t2,
+                 struct c2_time *res);
+
+/** Is time a after time b?
+ */
+bool c2_time_after(const struct c2_time *a, const struct c2_time *b);
+
+/** Is time a after or equal to time b?
+ */
+bool c2_time_after_eq(const struct c2_time *a, const struct c2_time *b);
+
+
+/** @} end of time group */
+
+/* __COLIBRI_LIB_TIME_H__ */
+#endif
+
+/*
+ *  Local variables:
+ *  c-indentation-style: "K&R"
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ *  fill-column: 80
+ *  scroll-step: 1
+ *  End:
+ */
diff --git a/lib/time_.c b/lib/time_.c
index 01ac29c..0790719 100644
--- a/lib/time_.c
+++ b/lib/time_.c
@@ -5,9 +5,7 @@
    with the local time.c there.
 */
 
-#include "lib/time_.h"
-
-
+#include "lib/time.h"
 
 /**
    @addtogroup time
@@ -19,55 +17,53 @@
 
 /** Create a c2_time struct from seconds and ns
  */
-void c2_time_set(c2_time *time, uint64_t secs, long ns)
+void c2_time_set(struct c2_time *time, uint64_t secs, long ns)
 {
-	time->tv_sec = secs;
-	time->tv_nsec = ns;
+	time->ts.tv_sec = secs;
+	time->ts.tv_nsec = ns;
 }
 
 /** Flatten a c2_time structure into a uint64
  This gives a limit of 585 years before we wrap. */
-uint64_t c2_time_flatten(c2_time *t)
+uint64_t c2_time_flatten(const struct c2_time *time)
 {
-        return ((uint64_t)t->tv_sec) * ONE_BILLION + t->tv_nsec;
+        return ((uint64_t)time->ts.tv_sec) * ONE_BILLION + time->ts.tv_nsec;
 }
 
 /** Add t2 to t1
  */
-c2_time c2_time_add(c2_time *t1, c2_time *t2)
+void c2_time_add(const struct c2_time *t1, const struct c2_time *t2,
+                 struct c2_time *res)
 {
-        c2_time res;
 	uint64_t sum;
 
         sum = c2_time_flatten(t1) + c2_time_flatten(t2);
-	res.tv_sec = sum / ONE_BILLION;
-	res.tv_nsec = sum % ONE_BILLION;
-        return res;
+	res->ts.tv_sec = sum / ONE_BILLION;
+	res->ts.tv_nsec = sum % ONE_BILLION;
 }
 
 /** Subtract t2 from t1
  */
-c2_time c2_time_sub(c2_time *t1, c2_time *t2)
+void c2_time_sub(const struct c2_time *t1, const struct c2_time *t2,
+                 struct c2_time *res)
 {
-        c2_time res;
 	int64_t diff;
 
         diff = c2_time_flatten(t1) - c2_time_flatten(t2);
-	res.tv_sec = diff / ONE_BILLION;
-	res.tv_nsec = diff % ONE_BILLION;
-        return res;
+	res->ts.tv_sec = diff / ONE_BILLION;
+	res->ts.tv_nsec = diff % ONE_BILLION;
 }
 
-/** Is t1 after t2
+/** Is time a after time b?
 */
-bool c2_time_after(c2_time *t1, c2_time *t2)
+bool c2_time_after(const struct c2_time *a, const struct c2_time *b)
 {
-        return c2_time_flatten(t1) > c2_time_flatten(t2);
+        return ((int64_t)c2_time_flatten(a) - (int64_t)c2_time_flatten(b)) > 0;
 }
 
-bool c2_time_after_eq(c2_time *t1, c2_time *t2)
+bool c2_time_after_eq(const struct c2_time *a, const struct c2_time *b)
 {
-        return c2_time_flatten(t1) >= c2_time_flatten(t2);
+        return ((int64_t)c2_time_flatten(a) - (int64_t)c2_time_flatten(b)) >= 0;
 }
 
 /** @} end of time group */
diff --git a/lib/time_.h b/lib/time_.h
deleted file mode 100644
index 93e95bf..0000000
--- a/lib/time_.h
+++ /dev/null
@@ -1,81 +0,0 @@
-/* -*- C -*- */
-
-/* Note: the filename time_.h is required because the include file
-   default search path for <time.h> must not find this file.
-*/
-
-#ifndef __COLIBRI_LIB_TIME_H__
-#define __COLIBRI_LIB_TIME_H__
-
-#include <lib/types.h>
-
-/**
-   @defgroup time Generic time manipulation
-
-   There is just one time structure in C2: struct c2_time.
-   It can be used for wall time, finding an interval, adding
-   times, ordering, etc.  It delivers resolution in nanoseconds,
-   and has (at least) the following members:
-   <sometype> tv_sec
-   long       tv_nsec
-
-   @{
-*/
-
-#ifndef __KERNEL__
-#include "lib/user_space/time.h"
-#else
-#include "lib/linux_kernel/time.h"
-#endif
-/** c2_time is defined by headers above. */
-
-
-#define ONE_BILLION 1000000000
-
-/** Get the current time.  This may or may not relate to wall time.
-
-    @param time [OUT] current time if pointer is non-NULL
-    @retval current time
-*/
-c2_time c2_time_now(c2_time *time);
-
-/** Flatten a c2_time structure into a uint64
-    @retval time in nanoseconds
- */
-uint64_t c2_time_flatten(c2_time *t);
-
-/** Create a c2_time struct from seconds and ns
- */
-void c2_time_set(c2_time *time, uint64_t secs, long ns);
-
-/** Add t2 to t1
- */
-c2_time c2_time_add(c2_time *t1, c2_time *t2);
-
-/** Subtract t2 from t1
- */
-c2_time c2_time_sub(c2_time *t1, c2_time *t2);
-
-/** Is t1 after t2
- */
-bool c2_time_after(c2_time *t1, c2_time *t2);
-
-/** Is t1 after or equal to t2
- */
-bool c2_time_after_eq(c2_time *t1, c2_time *t2);
-
-
-/** @} end of time group */
-
-/* __COLIBRI_LIB_TIME_H__ */
-#endif
-
-/*
- *  Local variables:
- *  c-indentation-style: "K&R"
- *  c-basic-offset: 8
- *  tab-width: 8
- *  fill-column: 80
- *  scroll-step: 1
- *  End:
- */
diff --git a/lib/user_space/time.c b/lib/user_space/time.c
index 7c187a6..4b2d972 100644
--- a/lib/user_space/time.c
+++ b/lib/user_space/time.c
@@ -1,7 +1,10 @@
 /* -*- C -*- */
 
-#include "lib/time_.h"
-#include <sys/time.h> /* gettimeofday */
+#include "lib/time.h"
+#include "lib/assert.h"  /* C2_CASSERT */
+#include <stddef.h>
+#include <sys/time.h>    /* gettimeofday */
+
 
 /**
    @addtogroup time
@@ -11,19 +14,16 @@
    @{
 */
 
-c2_time c2_time_now(c2_time *time)
+void c2_time_now(struct c2_time *time)
 {
-        c2_time res;
         struct timeval tv;
 
+        C2_PRE(time != NULL);
         /* We could use clock_gettime(CLOCK_REALTIME, time) for nanoseconds,
          but we would have to link librt... */
         gettimeofday(&tv, NULL);
-        res.tv_sec = tv.tv_sec;
-        res.tv_nsec = tv.tv_usec * 1000;
-	if (time != NULL)
-                *time = res;
-        return res;
+        time->ts.tv_sec = tv.tv_sec;
+        time->ts.tv_nsec = tv.tv_usec * 1000;
 }
 
 /** @} end of time group */
diff --git a/lib/user_space/time.h b/lib/user_space/time.h
index 92dd7fb..c9a2748 100644
--- a/lib/user_space/time.h
+++ b/lib/user_space/time.h
@@ -3,7 +3,7 @@
 #ifndef __COLIBRI_LIB_USER_SPACE_TIME_H__
 #define __COLIBRI_LIB_USER_SPACE_TIME_H__
 
-#include <time.h>
+#include_next <time.h>
 #include <sys/time.h>
 
 /**
@@ -13,7 +13,9 @@
    @{
 */
 
-typedef struct timespec c2_time;
+struct c2_time {
+        struct timespec ts;
+};
 
 /** @} end of time group */
 
diff --git a/lib/ut/time.c b/lib/ut/time.c
index 70f2b7a..d322370 100644
--- a/lib/ut/time.c
+++ b/lib/ut/time.c
@@ -1,14 +1,20 @@
 /* -*- C -*- */
 
 #include "lib/ut.h"
-#include "lib/time_.h"
+#include "lib/time.h"
 #include "lib/assert.h"
 
 void test_time(void)
 {
-	c2_time t1, t2, t3;
+	struct c2_time t1, t2, t3;
 
-	t2 = c2_time_now(&t1);
+        /* check wrapping: time "1" should be after time "very big" */
+        c2_time_set(&t1, 1, 0);
+        c2_time_set(&t2, (uint64_t)(-1), 0);
+	C2_UT_ASSERT(c2_time_after(&t1, &t2));
+
+	c2_time_now(&t1);
+        t2 = t1;
 	C2_UT_ASSERT(c2_time_flatten(&t1) != 0);
 	C2_UT_ASSERT(c2_time_flatten(&t2) == c2_time_flatten(&t1));
 
@@ -21,14 +27,14 @@ void test_time(void)
 	c2_time_set(&t2, 1235, 987654322);
 	C2_UT_ASSERT(c2_time_after(&t2, &t1));
 
-	t3 = c2_time_sub(&t2, &t1);
+	c2_time_sub(&t2, &t1, &t3);
 	C2_UT_ASSERT(c2_time_flatten(&t3) == 1000000001);
 
-	t3 = c2_time_sub(&t1, &t2);
+	c2_time_sub(&t1, &t2, &t3);
 	C2_UT_ASSERT(c2_time_flatten(&t3) == (uint64_t)(-1000000001));
 
 	c2_time_set(&t2, 1, 500000000);
-	t3 = c2_time_add(&t1, &t2);
+	c2_time_add(&t1, &t2, &t3);
 	C2_UT_ASSERT(c2_time_flatten(&t3) == 1236487654321);
 }
 
diff --git a/net/net.h b/net/net.h
index 531522b..be72762 100644
--- a/net/net.h
+++ b/net/net.h
@@ -12,7 +12,7 @@
 #include <lib/refs.h>
 #include <lib/chan.h>
 #include <lib/thread.h>
-#include <lib/time_.h>
+#include <lib/time.h>
 #include <addb/addb.h>
 
 /**
@@ -92,7 +92,7 @@ struct c2_net_stats {
          All counters are 64 bits wide and wrap naturally. We re-zero
          the counters every time we examine the stats so that we have a known
          timebase for rate calculations. */
-        c2_time            ns_time;
+        struct c2_time     ns_time;
         /** Counts how many FOPs have been seen by the service workers */
         struct c2_atomic64 ns_reqs;
         /** Bytes inside FOPs, as determined by fop type layout */
diff --git a/net/net_utils.c b/net/net_utils.c
index 6aad150..ffc2b44 100644
--- a/net/net_utils.c
+++ b/net/net_utils.c
@@ -36,7 +36,7 @@ bool c2_services_are_same(const struct c2_service_id *c1,
 
 void c2_net_domain_stats_init(struct c2_net_domain *dom)
 {
-        c2_time now;
+        struct c2_time now;
         int i;
 
         C2_SET0(&dom->nd_stats);
@@ -100,7 +100,7 @@ int c2_net_domain_stats_get(struct c2_net_domain *dom,
                             enum c2_net_stats_direction dir)
 {
         uint64_t interval_usec, rate, max;
-        c2_time now, interval;
+        struct c2_time now, interval;
         int rv;
 
         c2_time_now(&now);
@@ -112,7 +112,7 @@ int c2_net_domain_stats_get(struct c2_net_domain *dom,
            collection. */
         c2_rwlock_write_lock(&dom->nd_stats[dir].ns_lock);
 
-        interval = c2_time_sub(&now, &dom->nd_stats[dir].ns_time);
+        c2_time_sub(&now, &dom->nd_stats[dir].ns_time, &interval);
         interval_usec = c2_time_flatten(&interval);
         interval_usec = max64u(interval_usec, 1);
 
-- 
1.8.3.2


From bee102ece45372565246a0383416cbbfe0415a54 Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Mon, 21 Jan 2013 11:46:31 +0200
Subject: [PATCH] Added UT for kernel freeze demonstration using semaphores.
 Disabled all kernel UT except libm0-ut. See lib/ut/semaphore.c

---
 build_kernel_modules/Makefile.in |  2 +-
 lib/linux_kernel/main.c          |  2 +
 lib/ut/Makefile.sub              |  1 +
 lib/ut/main.c                    |  2 +
 lib/ut/semaphore.c               | 81 ++++++++++++++++++++++++++++++++++++++++
 utils/linux_kernel/main.c        |  2 +
 utils/linux_kernel/ut.sh.in      |  7 +++-
 7 files changed, 94 insertions(+), 3 deletions(-)
 create mode 100644 lib/ut/semaphore.c

diff --git a/build_kernel_modules/Makefile.in b/build_kernel_modules/Makefile.in
index 815fdb6..85470a5 100644
--- a/build_kernel_modules/Makefile.in
+++ b/build_kernel_modules/Makefile.in
@@ -140,7 +140,7 @@ lib_ut_SOURCES                  := rwlock.c bitmap.c tlist.c chan.c list.c  \
                                    mutex.c queue.c refs.c tlist.c time.c    \
                                    vec.c zerovec.c thread.c bob.c trace.c   \
                                    memory.c finject.c buf.c cookie.c misc.c \
-                                   uuid.c lockers.c
+                                   uuid.c lockers.c semaphore.c
 
 net_SOURCES                     := buf.c buffer_pool.c domain.c ep.c net.c \
                                    tm.c net_otw_types_xc.c tm_provision.c
diff --git a/lib/linux_kernel/main.c b/lib/linux_kernel/main.c
index 372d539..95edcd7 100644
--- a/lib/linux_kernel/main.c
+++ b/lib/linux_kernel/main.c
@@ -37,6 +37,7 @@ M0_INTERNAL void test_mutex(void);
 M0_INTERNAL void test_queue(void);
 M0_INTERNAL void test_refs(void);
 M0_INTERNAL void test_rw(void);
+M0_INTERNAL void m0_test_semaphore(void);
 M0_INTERNAL void test_thread(void);
 M0_INTERNAL void test_time(void);
 M0_INTERNAL void test_trace(void);
@@ -68,6 +69,7 @@ const struct m0_test_suite m0_klibm0_ut = {
 		{ "queue",     test_queue         },
 		{ "refs",      test_refs          },
 		{ "rwlock",    test_rw            },
+		{ "semaphore", m0_test_semaphore  },
 		{ "thread",    test_thread        },
 		{ "time",      test_time          },
 		{ "trace",     test_trace         },
diff --git a/lib/ut/Makefile.sub b/lib/ut/Makefile.sub
index 383ca69..8a2e328 100644
--- a/lib/ut/Makefile.sub
+++ b/lib/ut/Makefile.sub
@@ -16,6 +16,7 @@ ut_libmero_ut_la_SOURCES += lib/ut/main.c \
                                lib/ut/queue.c \
                                lib/ut/refs.c \
                                lib/ut/rwlock.c \
+			       lib/ut/semaphore.c \
                                lib/ut/thread.c \
                                lib/ut/time.c \
                                lib/ut/timer.c \
diff --git a/lib/ut/main.c b/lib/ut/main.c
index 48e738b..ca6f2f6 100644
--- a/lib/ut/main.c
+++ b/lib/ut/main.c
@@ -39,6 +39,7 @@ extern void test_processor(void);
 extern void test_queue(void);
 extern void test_refs(void);
 extern void test_rw(void);
+extern void m0_test_semaphore(void);
 extern void test_thread(void);
 extern void test_time(void);
 extern void test_timer(void);
@@ -71,6 +72,7 @@ const struct m0_test_suite libm0_ut = {
 		{ "processor", test_processor     },
 		{ "queue",     test_queue         },
 		{ "refs",      test_refs          },
+		{ "semaphore", m0_test_semaphore  },
 		{ "thread",    test_thread        },
 		{ "time",      test_time          },
 		{ "timer",     test_timer         },
diff --git a/lib/ut/semaphore.c b/lib/ut/semaphore.c
new file mode 100644
index 0000000..8c30ab9
--- /dev/null
+++ b/lib/ut/semaphore.c
@@ -0,0 +1,81 @@
+/* -*- C -*- */
+/*
+ * COPYRIGHT 2013 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Maxim Medved <max_medved@xyratex.com>
+ * Original creation date: 01/21/2013
+ */
+
+#include "lib/assert.h"		/* M0_ASSERT */
+#include "lib/semaphore.h"	/* m0_semaphore */
+#include "lib/thread.h"		/* m0_thread */
+#include "lib/time.h"		/* M0_MKTIME */
+
+enum {
+	THREAD_NR = 2,
+};
+
+struct sem_test {
+	struct m0_thread    st_thread;
+	struct m0_semaphore st_sem;
+};
+
+static struct sem_test sem_tests[THREAD_NR];
+
+static void sem_test_thread(struct sem_test *test)
+{
+	while (!m0_semaphore_timeddown(&test->st_sem, m0_time_now()))
+		;
+}
+
+void m0_test_semaphore(void)
+{
+	struct sem_test *test;
+	size_t		 i;
+	int		 rc;
+
+	/* start threads */
+	for (i = 0; i < ARRAY_SIZE(sem_tests); ++i) {
+		test = &sem_tests[i];
+		rc = M0_THREAD_INIT(&test->st_thread, struct sem_test *, NULL,
+				    &sem_test_thread,
+				    test, "#%dsem_thread", (int) i);
+		M0_ASSERT(rc == 0);
+		rc = m0_semaphore_init(&test->st_sem, 0);
+		M0_ASSERT(rc == 0);
+	}
+	/* up() all semaphores after 1s */
+	m0_nanosleep(M0_MKTIME(1, 0), NULL);
+	for (i = 0; i < ARRAY_SIZE(sem_tests); ++i)
+		m0_semaphore_up(&sem_tests[i].st_sem);
+	/* stop threads */
+	for (i = 0; i < ARRAY_SIZE(sem_tests); ++i) {
+		test = &sem_tests[i];
+		rc = m0_thread_join(&test->st_thread);
+		M0_ASSERT(rc == 0);
+		m0_thread_fini(&test->st_thread);
+		m0_semaphore_fini(&test->st_sem);
+	}
+}
+
+/*
+ *  Local variables:
+ *  c-indentation-style: "K&R"
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ *  fill-column: 79
+ *  scroll-step: 1
+ *  End:
+ */
diff --git a/utils/linux_kernel/main.c b/utils/linux_kernel/main.c
index e8c5367..491574f 100644
--- a/utils/linux_kernel/main.c
+++ b/utils/linux_kernel/main.c
@@ -61,6 +61,7 @@ static void run_kernel_ut(int ignored)
 	m0_uts_init();
 	/* sort test suites in alphabetic order */
 	m0_ut_add(&m0_klibm0_ut);  /* test lib first */
+#if 0
 	m0_ut_add(&m0_addb_ut);
 	m0_ut_add(&file_io_ut);
 	m0_ut_add(&buffer_pool_ut);
@@ -79,6 +80,7 @@ static void run_kernel_ut(int ignored)
 	m0_ut_add(&session_ut);
 	m0_ut_add(&sm_ut);
 	m0_ut_add(&xcode_ut);
+#endif
 
 	m0_ut_run();
 	m0_uts_fini();
diff --git a/utils/linux_kernel/ut.sh.in b/utils/linux_kernel/ut.sh.in
index c790af7..fde6f9a 100644
--- a/utils/linux_kernel/ut.sh.in
+++ b/utils/linux_kernel/ut.sh.in
@@ -14,8 +14,11 @@ NODE_UUID="12345678-90ab-cdef-fedc-ba0987654321"
 
 . @abs_top_srcdir@/m0t1fs/linux_kernel/st/common.sh
 
+# MODLIST="@abs_top_srcdir@/build_kernel_modules/m0mero.ko \
+#          @abs_top_srcdir@/build_kernel_modules/m0loop.ko   \
+#          @abs_top_srcdir@/utils/linux_kernel/m0ut.ko"
+
 MODLIST="@abs_top_srcdir@/build_kernel_modules/m0mero.ko \
-         @abs_top_srcdir@/build_kernel_modules/m0loop.ko   \
          @abs_top_srcdir@/utils/linux_kernel/m0ut.ko"
 
 log='/var/log/kern'
@@ -29,7 +32,7 @@ modload_galois
 # currently, kernel UT runs as part of loading m0ut module
 modload
 # LNet driver UT requires a user space helper
-@abs_top_srcdir@/net/lnet/ut/lut_helper
+# @abs_top_srcdir@/net/lnet/ut/lut_helper
 modunload
 modunload_galois
 
-- 
1.8.3.2


From 56ff34bdae512bd46b50bd01139ea83fcb099952 Mon Sep 17 00:00:00 2001
From: Nachiket Sahasrabuddhe <nachiket_sahasrabuddhe@xyratex.com>
Date: Mon, 6 May 2013 10:44:52 +0530
Subject: [PATCH 5/6] cookie_replacing_senderID

---
 rpc/conn.c         | 27 ++++++++++++---------------
 rpc/conn.h         |  2 +-
 rpc/session.c      | 13 ++-----------
 rpc/session_foms.c |  6 ++----
 rpc/session_fops.h | 28 +++++-----------------------
 rpc/slot.c         |  2 +-
 rpc/ut/conn.c      |  8 ++++----
 rpc/ut/session.c   | 17 ++---------------
 8 files changed, 29 insertions(+), 74 deletions(-)

diff --git a/rpc/conn.c b/rpc/conn.c
index e9bb1b1..81e3892 100644
--- a/rpc/conn.c
+++ b/rpc/conn.c
@@ -61,11 +61,11 @@ static int session_zero_attach(struct m0_rpc_conn *conn);
 static void session_zero_detach(struct m0_rpc_conn *conn);
 
 /**
-   Creates "/SESSIONS/SENDER_$sender_id/SESSION_ID_0/SLOT_0:0" in cob namespace.
+   Creates "/SESSIONS/SENDER_$gen_count/SESSION_ID_0/SLOT_0:0" in cob namespace.
    Returns corresponding references to cobs in out parameters.
  */
 static int conn_persistent_state_create(struct m0_cob_domain  *dom,
-					uint64_t              sender_id,
+					uint64_t              gen_count,
 					struct m0_cob       **conn_cob_out,
 					struct m0_cob       **session0_cob_out,
 					struct m0_cob       **slot0_cob_out,
@@ -314,7 +314,6 @@ static int __conn_init(struct m0_rpc_conn      *conn,
 	}
 
 	conn->c_rpc_machine = machine;
-	conn->c_sender_id   = SENDER_ID_INVALID;
 	conn->c_cob         = NULL;
 	conn->c_service     = NULL;
 	conn->c_nr_sessions = 0;
@@ -631,8 +630,8 @@ M0_INTERNAL int m0_rpc_conn_establish(struct m0_rpc_conn *conn)
 	session_0 = m0_rpc_conn_session0(conn);
 
 	fop_data = m0_fop_data(fop);
-	m0_cookie_new(&conn->c_sender_id);
-	m0_cookie_init(&fop_data->rce_cookie, &conn->c_sender_id);
+	m0_cookie_new(&conn->c_generation);
+	m0_cookie_init(&fop_data->rce_cookie, &conn->c_generation);
 
 	rc = m0_rpc__fop_post(fop, session_0, &conn_establish_item_ops);
 	if (rc == 0) {
@@ -704,7 +703,6 @@ M0_INTERNAL void m0_rpc_conn_establish_reply_received(struct m0_rpc_item *item)
 				conn->c_cookie = reply->rcer_cookie;
 				conn_state_set(conn, M0_RPC_CONN_ACTIVE);
 			} else {
-
 				rc = -EPROTO;
 			}
 		}
@@ -863,7 +861,7 @@ M0_INTERNAL void m0_rpc_conn_terminate_reply_received(struct m0_rpc_item *item)
 		if (rc == 0) {
 			conn_retrvd = m0_cookie_of(&reply->ctr_cookie,
 					           struct m0_rpc_conn,
-						   c_sender_id);
+						   c_generation);
 			if (conn == conn_retrvd)
 				conn_state_set(conn, M0_RPC_CONN_TERMINATED);
 			else
@@ -905,7 +903,7 @@ M0_INTERNAL int m0_rpc_conn_cob_lookup(struct m0_cob_domain *dom,
 }
 
 M0_INTERNAL int m0_rpc_conn_cob_create(struct m0_cob_domain *dom,
-				       uint64_t sender_id,
+				       uint64_t gen_count,
 				       struct m0_cob **out, struct m0_db_tx *tx)
 {
 	struct m0_cob *conn_cob;
@@ -916,7 +914,6 @@ M0_INTERNAL int m0_rpc_conn_cob_create(struct m0_cob_domain *dom,
 	M0_ENTRY("cob_dom: %p, sender_id: %llu", dom,
 		 (unsigned long long)sender_id);
 	M0_PRE(dom != NULL && out != NULL);
-	M0_PRE(sender_id != SENDER_ID_INVALID);
 
 	sprintf(name, conn_cob_name_fmt, (unsigned long)sender_id);
 	*out = NULL;
@@ -936,7 +933,7 @@ M0_INTERNAL int m0_rpc_conn_cob_create(struct m0_cob_domain *dom,
 }
 
 static int conn_persistent_state_create(struct m0_cob_domain *dom,
-					uint64_t              sender_id,
+					uint64_t              gen_count,
 					struct m0_cob       **conn_cob_out,
 					struct m0_cob       **session0_cob_out,
 					struct m0_cob       **slot0_cob_out,
@@ -951,7 +948,7 @@ static int conn_persistent_state_create(struct m0_cob_domain *dom,
 		 (unsigned long long)sender_id);
 	*conn_cob_out = *session0_cob_out = *slot0_cob_out = NULL;
 
-	rc = m0_rpc_conn_cob_create(dom, sender_id, &conn_cob, tx) ?:
+	rc = m0_rpc_conn_cob_create(dom, gen_count, &conn_cob, tx) ?:
 	     m0_rpc_session_cob_create(conn_cob, SESSION_ID_0,
 				       &session0_cob, tx)          ?:
 	     m0_rpc_slot_cob_create(session0_cob, 0 /*SLOT0*/, 0 /*SLOT_GEN*/,
@@ -970,7 +967,7 @@ static int conn_persistent_state_create(struct m0_cob_domain *dom,
 }
 
 static int conn_persistent_state_attach(struct m0_rpc_conn *conn,
-				        uint64_t            sender_id,
+				        uint64_t            gen_count,
 				        struct m0_db_tx    *tx)
 {
 	struct m0_rpc_session *session0;
@@ -987,7 +984,7 @@ static int conn_persistent_state_attach(struct m0_rpc_conn *conn,
 	       conn_state(conn) == M0_RPC_CONN_CONNECTING);
 
 	dom = conn->c_rpc_machine->rm_dom;
-	rc = conn_persistent_state_create(dom, sender_id,
+	rc = conn_persistent_state_create(dom, gen_count,
 					  &conn_cob, &session0_cob, &slot0_cob,
 					  tx);
 	if (rc != 0)
@@ -1037,7 +1034,7 @@ M0_INTERNAL int m0_rpc_rcv_conn_establish(struct m0_rpc_conn *conn)
 	}
 
 	if (rc == 0) {
-		conn->c_sender_id = gen_count;
+		conn->c_generation = gen_count;
 		conn_state_set(conn, M0_RPC_CONN_ACTIVE);
 	} else
 		conn_failed(conn, rc);
@@ -1168,7 +1165,7 @@ M0_INTERNAL int m0_rpc_machine_conn_list_print(struct m0_rpc_machine *machine,
 
 	m0_tl_for(rpc_conn, list, conn) {
 		printf("CONN: %p id %llu state %x\n", conn,
-				(unsigned long long)conn->c_sender_id,
+				(unsigned long long)conn->c_generation,
 				conn_state(conn));
 	} m0_tl_endfor;
 	return 0;
diff --git a/rpc/conn.h b/rpc/conn.h
index 89e33fd..0c8a241 100644
--- a/rpc/conn.h
+++ b/rpc/conn.h
@@ -254,7 +254,7 @@ struct m0_rpc_conn {
 	/** Cookie holding a reference to conn on other end */
 	struct m0_cookie          c_cookie;
 
-	uint64_t                  c_sender_id;
+	uint64_t                  c_generation;
 	/** Globally unique ID of rpc connection */
 	struct m0_rpc_sender_uuid c_uuid;
 
diff --git a/rpc/session.c b/rpc/session.c
index 73aee93..7236857 100644
--- a/rpc/session.c
+++ b/rpc/session.c
@@ -566,7 +566,6 @@ M0_INTERNAL int m0_rpc_session_establish(struct m0_rpc_session *session)
 	args = m0_fop_data(fop);
 	M0_ASSERT(args != NULL);
 
-	args->rse_sender_id = conn->c_sender_id;
 	args->rse_slot_cnt  = session->s_nr_slots;
 
 	session_0 = m0_rpc_conn_session0(conn);
@@ -621,7 +620,6 @@ M0_INTERNAL void m0_rpc_session_establish_reply_received(struct m0_rpc_item
 	struct m0_rpc_slot                      *slot;
 	struct m0_rpc_item                      *reply_item;
 	struct m0_fop                           *fop;
-	uint64_t                                 sender_id;
 	uint64_t                                 session_id;
 	int32_t                                  rc;
 	int                                      i;
@@ -655,19 +653,17 @@ M0_INTERNAL void m0_rpc_session_establish_reply_received(struct m0_rpc_item
 
 	reply = m0_fop_data(m0_rpc_item_to_fop(reply_item));
 
-	sender_id  = reply->rser_sender_id;
 	session_id = reply->rser_session_id;
 	rc         = reply->rser_rc;
 
 	if (rc == 0) {
 		if (session_id > SESSION_ID_MIN &&
-		    session_id < SESSION_ID_MAX &&
-		    sender_id != SENDER_ID_INVALID) {
+				session_id < SESSION_ID_MAX) {
 
 			session->s_session_id = session_id;
 			session_state_set(session, M0_RPC_SESSION_IDLE);
 
-			for (i = 0; i < session->s_nr_slots; i++) {
+			for (i = 0; i < session->s_nr_slots; ++i) {
 				slot = session->s_slot_table[i];
 				slot->sl_ops->so_slot_idle(slot);
 			}
@@ -774,7 +770,6 @@ M0_INTERNAL int m0_rpc_session_terminate(struct m0_rpc_session *session)
 	}
 
 	args                 = m0_fop_data(fop);
-	args->rst_sender_id  = conn->c_sender_id;
 	args->rst_session_id = session->s_session_id;
 
 	session_0 = m0_rpc_conn_session0(conn);
@@ -827,7 +822,6 @@ M0_INTERNAL void m0_rpc_session_terminate_reply_received(struct m0_rpc_item
 	struct m0_rpc_conn                      *conn;
 	struct m0_rpc_session                   *session;
 	struct m0_rpc_machine                   *machine;
-	uint64_t                                 sender_id;
 	uint64_t                                 session_id;
 	int32_t                                  rc;
 
@@ -851,11 +845,8 @@ M0_INTERNAL void m0_rpc_session_terminate_reply_received(struct m0_rpc_item
 
 	args = m0_fop_data(m0_rpc_item_to_fop(item));
 
-	sender_id  = args->rst_sender_id;
 	session_id = args->rst_session_id;
 
-	M0_ASSERT(sender_id == conn->c_sender_id);
-
 	session = m0_rpc_session_search(conn, session_id);
 	M0_ASSERT(m0_rpc_session_invariant(session) &&
 		  session_state(session) == M0_RPC_SESSION_TERMINATING);
diff --git a/rpc/session_foms.c b/rpc/session_foms.c
index 18d024c..76b5c89 100644
--- a/rpc/session_foms.c
+++ b/rpc/session_foms.c
@@ -216,11 +216,11 @@ M0_INTERNAL int m0_rpc_fom_conn_establish_tick(struct m0_fom *fom)
 	m0_rpc_machine_unlock(machine);
 
 	if (rc == 0) {
-		m0_cookie_init(&reply->rcer_cookie, &conn->c_sender_id);
+		m0_cookie_init(&reply->rcer_cookie, &conn->c_generation);
 		reply->rcer_rc = 0;
 
 		M0_LOG(M0_INFO, "Conn established: conn [%p] id [%lu]\n", conn,
-				(unsigned long)conn->c_sender_id);
+				(unsigned long)conn->c_generation);
 
 		m0_rpc_reply_post(&fop->f_item, &fop_rep->f_item);
 
@@ -341,7 +341,6 @@ M0_INTERNAL int m0_rpc_fom_session_establish_tick(struct m0_fom *fom)
 	m0_rpc_machine_unlock(machine);
 
 out:
-	reply->rser_sender_id = request->rse_sender_id;
 	reply->rser_rc        = rc;
 
 	if (rc != 0) {
@@ -395,7 +394,6 @@ M0_INTERNAL int m0_rpc_fom_session_terminate_tick(struct m0_fom *fom)
 	reply = m0_fop_data(fom->fo_rep_fop);
 	M0_ASSERT(reply != NULL);
 
-	reply->rstr_sender_id = request->rst_sender_id;
 	reply->rstr_session_id = session_id = request->rst_session_id;
 
 	item = &fom->fo_fop->f_item;
diff --git a/rpc/session_fops.h b/rpc/session_fops.h
index f22f5b3..e265374 100644
--- a/rpc/session_fops.h
+++ b/rpc/session_fops.h
@@ -110,7 +110,7 @@ struct m0_rpc_fop_conn_terminate {
  */
 struct  m0_rpc_fop_conn_terminate_rep {
 	/**
-	   sender_id of rpc-connection being terminated.
+	   cookie for rpc-connection being terminated.
 	 */
 	struct m0_cookie ctr_cookie;
 	/**
@@ -126,13 +126,9 @@ struct  m0_rpc_fop_conn_terminate_rep {
  */
 struct m0_rpc_fop_session_establish {
 	/**
-	   sender_id of rpc-connection in which a new session is to be created.
-	 */
-	uint64_t rse_sender_id;
-	/**
 	   Number of slots the new session should have.
 	 */
-	uint32_t rse_slot_cnt;
+	uint32_t	 rse_slot_cnt;
 } M0_XCA_RECORD;
 
 /**
@@ -144,11 +140,7 @@ struct m0_rpc_fop_session_establish_rep {
 	   session_id assigned by receiver to the newly created session.
 	   Has value SESSION_ID_INVALID if SESSION_ESTABLISH operation fails.
 	 */
-	uint64_t rser_session_id;
-	/**
-	   sender_id copied from m0_rpc_fop_session_establish.
-	 */
-	uint64_t rser_sender_id;
+	uint64_t	rser_session_id;
 	/**
 	   Contains 0 if SESSION_ESTABLISH operation is successful, error code
 	   otherwise.
@@ -161,14 +153,9 @@ struct m0_rpc_fop_session_establish_rep {
  */
 struct m0_rpc_fop_session_terminate {
 	/**
-	   sender_id of rpc-connection to which the session being terminated
-	   belongs.
-	 */
-	uint64_t rst_sender_id;
-	/**
 	   session_id of session being terminated.
 	 */
-	uint64_t rst_session_id;
+	uint64_t	 rst_session_id;
 } M0_XCA_RECORD;
 
 /**
@@ -178,12 +165,7 @@ struct m0_rpc_fop_session_terminate_rep {
 	/**
 	   session_id of the session being terminated.
 	 */
-	uint64_t rstr_session_id;
-	/**
-	   sender_id of rpc-connection to which the session being terminated
-	   belongs.
-	 */
-	uint64_t rstr_sender_id;
+	uint64_t	rstr_session_id;
 	/**
 	   Contains 0 if SESSION_TERMINATE operation is successful, error code
 	   otherwise.
diff --git a/rpc/slot.c b/rpc/slot.c
index 43f46a6..382c915 100644
--- a/rpc/slot.c
+++ b/rpc/slot.c
@@ -776,7 +776,7 @@ find_conn(const struct m0_rpc_machine *machine,
 	sref = &item->ri_slot_refs[0];
 	conn = m0_cookie_of(&sref->sr_ow.osr_cookie,
 			    struct m0_rpc_conn,
-			    c_sender_id);
+			    c_generation);
 	if (conn == NULL) {
 		m0_tl_for(rpc_conn, conn_list, conn) {
 			if (m0_rpc_sender_uuid_cmp(&conn->c_uuid,
diff --git a/rpc/ut/conn.c b/rpc/ut/conn.c
index c7473fc..2270a0a 100644
--- a/rpc/ut/conn.c
+++ b/rpc/ut/conn.c
@@ -134,8 +134,8 @@ static void conn_init_and_establish(void)
 
 	est_fop.f_item.ri_error             = 0;
 	est_reply.rcer_rc                   = 0;
-	est_reply.rcer_cookie.co_generation = conn.c_sender_id;
-	est_reply.rcer_cookie.co_addr       = (uint64_t)&conn.c_sender_id;
+	est_reply.rcer_cookie.co_generation = conn.c_generation;
+	est_reply.rcer_cookie.co_addr       = (uint64_t)&conn.c_generation;
 	est_fop_rep.f_data.fd_data          = &est_reply;
 
 }
@@ -256,8 +256,8 @@ static void conn_establish_reply_fail_test(void)
 	M0_UT_ASSERT(conn_state(&conn) == M0_RPC_CONN_FAILED);
 
 	m0_rpc_conn_fini(&conn);
-	est_reply.rcer_cookie.co_generation = conn.c_sender_id; /* restore */
-	est_reply.rcer_cookie.co_addr	    = (uint64_t)&conn.c_sender_id;
+	est_reply.rcer_cookie.co_generation = conn.c_generation; /* restore */
+	est_reply.rcer_cookie.co_addr	    = (uint64_t)&conn.c_generation;
 }
 
 static void conn_terminate_fail_test(void)
diff --git a/rpc/ut/session.c b/rpc/ut/session.c
index fbeae32..f35ae20 100644
--- a/rpc/ut/session.c
+++ b/rpc/ut/session.c
@@ -27,7 +27,7 @@
 #include "rpc/rpc_internal.h"
 
 enum {
-	SENDER_ID  = 1001,
+	GEN_COUNT  = 1001,
 	SESSION_ID = 101,
 	SLOTS_NR   = 1,
 };
@@ -64,7 +64,7 @@ static int session_ut_init(void)
 	int rc;
 
 	conn.c_rpc_machine = &machine;
-	conn.c_sender_id   = SENDER_ID;
+	conn.c_generation   = GEN_COUNT;
 	rpc_session_tlist_init(&conn.c_sessions);
 
 	m0_sm_group_init(&machine.rm_sm_grp);
@@ -119,7 +119,6 @@ static void prepare_fake_est_reply(void)
 	est_ctx.sec_fop.f_item.ri_error = 0;
 
 	est_reply.rser_session_id = SESSION_ID; /* session_id_allocate() */
-	est_reply.rser_sender_id  = SENDER_ID;  /* sender_id_allocate()  */
 	est_reply.rser_rc         = 0;
 
 	est_fop_rep.f_data.fd_data  = &est_reply;
@@ -153,11 +152,9 @@ static void prepare_fake_term_reply(void)
 {
 	term_fop.f_item.ri_error = 0;
 	term_fop.f_data.fd_data  = &term;
-	term.rst_sender_id       = SENDER_ID;
 	term.rst_session_id      = SESSION_ID;
 
 	term_reply.rstr_session_id = SESSION_ID;
-	term_reply.rstr_sender_id  = SENDER_ID;
 	term_reply.rstr_rc         = 0;
 
 	term_fop_rep.f_data.fd_data  = &term_reply;
@@ -274,16 +271,6 @@ static void session_establish_reply_fail_test(void)
 
 	m0_rpc_session_fini(&session);
 
-	/* Due to invalid sender id. */
-	session_init_and_establish();
-
-	est_reply.rser_sender_id = SENDER_ID_INVALID;
-	session_establish_reply(0);
-	M0_UT_ASSERT(session.s_sm.sm_rc == -EPROTO);
-	M0_UT_ASSERT(session_state(&session) == M0_RPC_SESSION_FAILED);
-
-	m0_rpc_session_fini(&session);
-
 	/* Due to error in establish reply fop. */
 	session_init_and_establish();
 
-- 
1.8.3.2


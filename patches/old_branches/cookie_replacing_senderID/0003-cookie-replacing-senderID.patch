From f2e4d174e576266165acfad8c1bbe64049bc3370 Mon Sep 17 00:00:00 2001
From: Nachiket Sahasrabuddhe <nachiket_sahasrabuddhe@xyratex.com>
Date: Wed, 20 Feb 2013 12:02:14 +0530
Subject: [PATCH 3/6] cookie-replacing-senderID

1. cookie_invalid is replaced with M0_COOKIE_NULL in cookie.[ch]
2. m0_cookie_is_invalid replaced with m0_cookie_is_null
3. Removed a field rce_rc from m0_rpc_fop_conn_establish.
---
 lib/cookie.c       |  8 ++++----
 lib/cookie.h       |  6 +++---
 rpc/conn.c         | 15 +++++++--------
 rpc/session_foms.c |  2 +-
 rpc/session_fops.h |  1 -
 rpc/ut/conn.c      |  2 +-
 rpc/ut/packet.c    |  2 +-
 7 files changed, 17 insertions(+), 19 deletions(-)

diff --git a/lib/cookie.c b/lib/cookie.c
index 731d99a..4e2acb9 100644
--- a/lib/cookie.c
+++ b/lib/cookie.c
@@ -54,7 +54,7 @@
 
 static uint64_t cookie_generation;
 
-const struct m0_cookie cookie_invalid = {
+const struct m0_cookie M0_COOKIE_NULL = {
 	.co_generation = 0xffff,
 	.co_addr       = 0,
 };
@@ -107,10 +107,10 @@ M0_INTERNAL int m0_cookie_dereference(const struct m0_cookie *cookie,
 		return -EPROTO;
 }
 
-M0_INTERNAL bool m0_cookie_is_invalid(struct m0_cookie cookie)
+M0_INTERNAL bool m0_cookie_is_null(struct m0_cookie cookie)
 {
-	return cookie.co_generation == cookie_invalid.co_generation &&
-		cookie.co_addr == cookie_invalid.co_addr;
+	return cookie.co_generation == M0_COOKIE_NULL.co_generation &&
+		cookie.co_addr == M0_COOKIE_NULL.co_addr;
 }
 
 M0_INTERNAL void m0_cookie_global_fini(void)
diff --git a/lib/cookie.h b/lib/cookie.h
index 93dfafb..1ce2a61 100644
--- a/lib/cookie.h
+++ b/lib/cookie.h
@@ -95,9 +95,9 @@ M0_INTERNAL bool m0_addr_is_sane(const uint64_t * addr);
 
 
 /**
- * Returns 'true' when cookie is invalid.
+ * Returns 'true' when cookie is NULL.
  */
-M0_INTERNAL bool m0_cookie_is_invalid(struct m0_cookie cookie);
+M0_INTERNAL bool m0_cookie_is_null(struct m0_cookie cookie);
 
 /**
  * A macro to retrive address of a parent structure, associated with an object
@@ -115,7 +115,7 @@ M0_INTERNAL bool m0_cookie_is_invalid(struct m0_cookie cookie);
 /*__M0_LIB_COOKIE_H__*/
 #endif
 
-extern const struct m0_cookie cookie_invalid;
+extern const struct m0_cookie M0_COOKIE_NULL;
 /*
  *  Local variables:
  *  c-indentation-style: "K&R"
diff --git a/rpc/conn.c b/rpc/conn.c
index dff2d8c..e9bb1b1 100644
--- a/rpc/conn.c
+++ b/rpc/conn.c
@@ -211,26 +211,26 @@ M0_INTERNAL bool m0_rpc_conn_invariant(const struct m0_rpc_conn *conn)
 
 	switch (conn_state(conn)) {
 	case M0_RPC_CONN_INITIALISED:
-		return	m0_cookie_is_invalid(conn->c_cookie) &&
+		return	m0_cookie_is_null(conn->c_cookie) &&
 			conn->c_nr_sessions == 1 &&
 			session_state(session0) == M0_RPC_SESSION_IDLE;
 
 	case M0_RPC_CONN_CONNECTING:
-		return  m0_cookie_is_invalid(conn->c_cookie) &&
+		return  m0_cookie_is_null(conn->c_cookie) &&
 			conn->c_nr_sessions == 1;
 
 	case M0_RPC_CONN_ACTIVE:
-		return  !m0_cookie_is_invalid(conn->c_cookie) &&
+		return  !m0_cookie_is_null(conn->c_cookie) &&
 			conn->c_nr_sessions >= 1 &&
 			ergo(recv_end, conn->c_cob != NULL);
 
 	case M0_RPC_CONN_TERMINATING:
 		return  conn->c_nr_sessions == 1 &&
-			!m0_cookie_is_invalid(conn->c_cookie);
+			!m0_cookie_is_null(conn->c_cookie);
 
 	case M0_RPC_CONN_TERMINATED:
 		return	conn->c_nr_sessions == 1 &&
-			!m0_cookie_is_invalid(conn->c_cookie)&&
+			!m0_cookie_is_null(conn->c_cookie)&&
 			conn->c_cob == NULL &&
 			conn->c_sm.sm_rc == 0;
 
@@ -318,7 +318,7 @@ static int __conn_init(struct m0_rpc_conn      *conn,
 	conn->c_cob         = NULL;
 	conn->c_service     = NULL;
 	conn->c_nr_sessions = 0;
-	conn->c_cookie      = cookie_invalid;
+	conn->c_cookie      = M0_COOKIE_NULL;
 
 	rpc_session_tlist_init(&conn->c_sessions);
 	rpc_conn_tlink_init(conn);
@@ -633,7 +633,6 @@ M0_INTERNAL int m0_rpc_conn_establish(struct m0_rpc_conn *conn)
 	fop_data = m0_fop_data(fop);
 	m0_cookie_new(&conn->c_sender_id);
 	m0_cookie_init(&fop_data->rce_cookie, &conn->c_sender_id);
-	fop_data->rce_rc = 0;
 
 	rc = m0_rpc__fop_post(fop, session_0, &conn_establish_item_ops);
 	if (rc == 0) {
@@ -701,7 +700,7 @@ M0_INTERNAL void m0_rpc_conn_establish_reply_received(struct m0_rpc_item *item)
 		reply     = m0_fop_data(reply_fop);
 		rc = reply->rcer_rc;
 		if (rc == 0) {
-			if (!m0_cookie_is_invalid(reply->rcer_cookie)) {
+			if (!m0_cookie_is_null(reply->rcer_cookie)) {
 				conn->c_cookie = reply->rcer_cookie;
 				conn_state_set(conn, M0_RPC_CONN_ACTIVE);
 			} else {
diff --git a/rpc/session_foms.c b/rpc/session_foms.c
index 669e1d6..18d024c 100644
--- a/rpc/session_foms.c
+++ b/rpc/session_foms.c
@@ -204,7 +204,7 @@ M0_INTERNAL int m0_rpc_fom_conn_establish_tick(struct m0_fom *fom)
 			item->ri_session = session0;
 			m0_rpc_slot_item_add_internal(slot, item);
 
-			if (request->rce_rc == 0)
+			if (!m0_cookie_is_null(request->rce_cookie))
 				conn->c_cookie = request->rce_cookie;
 			M0_ASSERT(conn_state(conn) == M0_RPC_CONN_ACTIVE);
 			M0_ASSERT(m0_rpc_conn_invariant(conn));
diff --git a/rpc/session_fops.h b/rpc/session_fops.h
index 532328c..f22f5b3 100644
--- a/rpc/session_fops.h
+++ b/rpc/session_fops.h
@@ -79,7 +79,6 @@ struct m0_rpc_fop_conn_establish_ctx {
 
 struct m0_rpc_fop_conn_establish {
 	struct m0_cookie rce_cookie;
-	uint32_t         rce_rc;
 } M0_XCA_RECORD;
 
 /**
diff --git a/rpc/ut/conn.c b/rpc/ut/conn.c
index a711665..c7473fc 100644
--- a/rpc/ut/conn.c
+++ b/rpc/ut/conn.c
@@ -248,7 +248,7 @@ static void conn_establish_reply_fail_test(void)
 	est_fop.f_item.ri_error = 0;
 	/* Due to invalid-cookie */
 	conn_init_and_establish();
-	est_reply.rcer_cookie = cookie_invalid;
+	est_reply.rcer_cookie = M0_COOKIE_NULL;
 	m0_rpc_machine_lock(&machine);
 	m0_rpc_conn_establish_reply_received(&est_fop.f_item);
 	M0_UT_ASSERT(conn.c_sm.sm_rc == -EPROTO);
diff --git a/rpc/ut/packet.c b/rpc/ut/packet.c
index 72d545f..e789db1 100644
--- a/rpc/ut/packet.c
+++ b/rpc/ut/packet.c
@@ -201,7 +201,7 @@ static void populate_item(struct m0_rpc_item *item)
 	item->ri_slot_refs[0].sr_ow = (struct m0_rpc_onwire_slot_ref) {
 		.osr_uuid.su_uuid = 9876,
 		.osr_session_id = 523,
-		.osr_cookie = cookie_invalid,
+		.osr_cookie = M0_COOKIE_NULL,
 		.osr_slot_id = 23,
 		.osr_verno = {
 			.vn_lsn = 7654,
-- 
1.8.3.2


From 4bba802446787e59297372ad59f598f955b453c2 Mon Sep 17 00:00:00 2001
From: Rajesh Bhalerao <Rajesh_Bhalerao@xyratex.com>
Date: Wed, 22 May 2013 13:09:07 +0530
Subject: [PATCH 23/25] Fixed defects reported in CINSP-PREUT.

---
 rm/file.c | 37 +++++++++++++++++++++++++------------
 1 file changed, 25 insertions(+), 12 deletions(-)

diff --git a/rm/file.c b/rm/file.c
index 1b0d7ce..814cdc9 100644
--- a/rm/file.c
+++ b/rm/file.c
@@ -21,6 +21,7 @@
 #undef M0_TRACE_SUBSYSTEM
 #define M0_TRACE_SUBSYSTEM M0_TRACE_SUBSYS_RM
 
+#include "lib/arith.h"
 #include "fid/fid_xc.h"
 #include "xcode/xcode.h"
 #include "rm/file.h"
@@ -305,10 +306,17 @@ static void file_lock_incoming_conflict(struct m0_rm_incoming *in)
 	return;
 }
 
+static bool file_lock_credit_invariant(const struct m0_rm_credit *file_cr)
+{
+	return M0_IN(file_cr->cr_datum, (0, RM_FILE_LOCK));
+}
+
 static bool file_lock_cr_intersects(const struct m0_rm_credit *this,
 				    const struct m0_rm_credit *c1)
 {
 	M0_ASSERT(c1 != NULL);
+	M0_PRE(file_lock_credit_invariant(this) &&
+	       file_lock_credit_invariant(c1));
 	return this->cr_datum == c1->cr_datum;
 }
 
@@ -318,6 +326,8 @@ static m0_bcount_t file_lock_cr_len(const struct m0_rm_credit *c0)
 	struct m0_xcode_ctx ctx;
 
 	M0_ASSERT(c0 != NULL);
+	M0_PRE(file_lock_credit_invariant(c0));
+
 	datumobj.xo_type = &M0_XT_U64;
 	datumobj.xo_ptr = (void *)&c0->cr_datum;
 	m0_xcode_ctx_init(&ctx, &datumobj);
@@ -341,42 +351,43 @@ static int file_lock_cr_copy(struct m0_rm_credit *dest,
 			     const struct m0_rm_credit *this)
 {
 	M0_ASSERT(dest != NULL);
+	M0_PRE(file_lock_credit_invariant(this));
 
 	dest->cr_datum = this->cr_datum;
 	dest->cr_owner = this->cr_owner;
 	dest->cr_ops = this->cr_ops;
+	M0_POST(file_lock_credit_invariant(dest));
 	return 0;
 }
 
 static int file_lock_cr_diff(struct m0_rm_credit *this,
 			     const struct m0_rm_credit *c1)
 {
-	int rc = 0;
 	M0_ASSERT(c1 != NULL);
+	M0_PRE(file_lock_credit_invariant(this) &&
+	       file_lock_credit_invariant(c1));
 
-	/*
-	 * Make sure that there is no diff of a valid credit against
-	 * the empty credit.
-	 */
-	if (this->cr_datum == 0 && c1->cr_datum == RM_FILE_LOCK)
-		rc = -1;
-	else
-		this->cr_datum -= c1->cr_datum;
-	return rc;
+	this->cr_datum = max64((int64_t)(this->cr_datum - c1->cr_datum), 0);
+	M0_POST(file_lock_credit_invariant(this));
+	return 0;
 }
 
 static bool file_lock_cr_conflicts(const struct m0_rm_credit *this,
 				   const struct m0_rm_credit *c1)
 {
 	M0_ASSERT(c1 != NULL);
+	M0_PRE(file_lock_credit_invariant(this) &&
+	       file_lock_credit_invariant(c1));
 
-	return this->cr_datum == RM_FILE_LOCK && this->cr_datum == c1->cr_datum;
+	return this->cr_datum & c1->cr_datum;
 }
 
 static bool file_lock_cr_is_subset(const struct m0_rm_credit *this,
 				   const struct m0_rm_credit *c1)
 {
-	return true;
+	M0_PRE(file_lock_credit_invariant(this) &&
+	       file_lock_credit_invariant(c1));
+	return this->cr_datum <= c1->cr_datum;
 }
 
 static int file_lock_cr_encdec(struct m0_rm_credit *this,
@@ -397,12 +408,14 @@ static int file_lock_cr_encdec(struct m0_rm_credit *this,
 static int file_lock_cr_encode(struct m0_rm_credit *this,
 			       struct m0_bufvec_cursor *cur)
 {
+	M0_PRE(file_lock_credit_invariant(this));
 	return file_lock_cr_encdec(this, cur, M0_BUFVEC_ENCODE);
 }
 
 static int file_lock_cr_decode(struct m0_rm_credit *this,
 			       struct m0_bufvec_cursor *cur)
 {
+	M0_PRE(file_lock_credit_invariant(this));
 	return file_lock_cr_encdec(this, cur, M0_BUFVEC_DECODE);
 }
 
-- 
1.8.3.2


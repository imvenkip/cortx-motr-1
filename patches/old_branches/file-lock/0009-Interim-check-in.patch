From 8f1c4bfaf8ea8165660bfeaf540385b1c0d61266 Mon Sep 17 00:00:00 2001
From: Rajesh Bhalerao <Rajesh_Bhalerao@xyratex.com>
Date: Fri, 5 Apr 2013 17:44:03 +0530
Subject: [PATCH 09/25] Interim check-in.

---
 rm/rm_fops.c     | 11 ++++----
 rm/ut/filelock.c | 79 ++++++++++++++++++++++++++++++++++++++++++++++++--------
 2 files changed, 74 insertions(+), 16 deletions(-)

diff --git a/rm/rm_fops.c b/rm/rm_fops.c
index 9c35d20..f054c71 100644
--- a/rm/rm_fops.c
+++ b/rm/rm_fops.c
@@ -87,7 +87,8 @@ extern const struct m0_sm_conf revoke_sm_conf;
  * Allocate and initialise remote request tracking structure.
  */
 static int rm_out_create(struct rm_out **out,
-			 struct m0_rm_incoming *in,
+			 enum m0_rm_outgoing_type otype,
+			 struct m0_rm_remote *creditor,
 			 struct m0_rm_credit *credit)
 {
 	struct rm_out *outreq;
@@ -102,14 +103,13 @@ static int rm_out_create(struct rm_out **out,
 		goto out;
 	}
 
-	rc = m0_rm_loan_init(&outreq->ou_req.rog_want, credit,
-			     in->rin_want.cr_owner->ro_creditor);
+	m0_rm_outgoing_init(&outreq->ou_req, otype);
+	rc = m0_rm_loan_init(&outreq->ou_req.rog_want, credit, creditor);
 	if (rc != 0) {
 		m0_free(outreq);
 		goto out;
 	}
 
-	m0_rm_outgoing_init(&outreq->ou_req, in->rin_type);
 	*out = outreq;
 
 out:
@@ -223,7 +223,8 @@ int m0_rm_request_out(enum m0_rm_outgoing_type otype,
 		 otype, in, credit->cr_datum);
 	M0_PRE(M0_IN(otype, (M0_ROT_BORROW, M0_ROT_REVOKE)));
 
-	rc = rm_out_create(&outreq, in, credit);
+	rc = rm_out_create(&outreq, otype, in->rin_want.cr_owner->ro_creditor,
+			   credit);
 	if (rc != 0)
 		goto out;
 
diff --git a/rm/ut/filelock.c b/rm/ut/filelock.c
index e9c053e..74f9a40 100644
--- a/rm/ut/filelock.c
+++ b/rm/ut/filelock.c
@@ -50,6 +50,13 @@ enum flock_tests {
 	TEST_NR,
 };
 
+enum {
+	CLNT_THR_NR = 20
+};
+
+static struct m0_thread clnt_thr[CLNT_THR_NR];
+static int clnt_counter;
+
 /* Maximum test servers for this testcase */
 static enum rm_server test_servers_nr;
 
@@ -178,9 +185,11 @@ void flock_srv_utdata_ops_set(struct rm_ut_data *data)
 	data->rd_ops = &fl_srv_ut_data_ops;
 }
 
-static void wait_lock(struct m0_rm_owner *owner, struct m0_rm_incoming *in)
+static void wait_lock(enum rm_server srv_id)
 {
-	int rc;
+	struct m0_rm_incoming *in    = &rm_ctx[srv_id].rc_test_data.rd_in;
+	struct m0_rm_owner    *owner = rm_ctx[srv_id].rc_test_data.rd_owner;
+	int		       rc;
 
 	m0_file_lock(owner, in);
 	m0_rm_owner_lock(owner);
@@ -218,13 +227,56 @@ static void test_verify(enum flock_tests test_id)
 	}
 }
 
+static void clnt_lock(int n)
+{
+	struct m0_rm_owner    *owner = rm_ctx[SERVER_1].rc_test_data.rd_owner;
+	struct m0_rm_incoming  req;
+	int		       rc;
+
+	M0_SET0(&req);
+	m0_file_lock(owner, &req);
+	m0_rm_owner_lock(owner);
+	if (incoming_state(&req) == RI_WAIT) {
+		rc = m0_sm_timedwait(&req.rin_sm,
+				     M0_BITS(RI_SUCCESS, RI_FAILURE),
+				     M0_TIME_NEVER);
+		M0_UT_ASSERT(rc == 0);
+	}
+	m0_rm_owner_unlock(owner);
+	M0_UT_ASSERT(req.rin_rc == 0);
+	clnt_counter += n;
+	loan_session_set(SERVER_2, SERVER_1);
+	m0_file_unlock(&req);
+}
+
+static void client_test3_run()
+{
+	int i;
+	int sum;
+	int rc;
+
+	/* Server-2 (server) is upward creditor for Server-1 (client) */
+	creditor_cookie_setup(SERVER_1, SERVER_2);
+
+	for (sum = i = 0; i < CLNT_THR_NR; ++i) {
+		rc = M0_THREAD_INIT(&clnt_thr[i], int, NULL,
+				    &clnt_lock, i, "clnt_lock");
+		M0_UT_ASSERT(rc == 0);
+		sum += i;
+	}
+
+	for (i = 0; i < CLNT_THR_NR; ++i) {
+		m0_thread_join(&clnt_thr[i]);
+		m0_thread_fini(&clnt_thr[i]);
+	}
+	M0_UT_ASSERT(clnt_counter == sum);
+}
+
 /* DLD - Test 3 */
 static void test2_run()
 {
-	struct m0_rm_incoming *in    = &rm_ctx[SERVER_2].rc_test_data.rd_in;
-	struct m0_rm_owner    *owner = rm_ctx[SERVER_2].rc_test_data.rd_owner;
-
-	wait_lock(owner, in);
+	/* Take a wait lock on server */
+	wait_lock(SERVER_2);
 }
 
 /* DLD - Test 2 */
@@ -256,13 +308,11 @@ static void testcase2_run()
 /* DLD - Test 1 */
 static void testcase1_run()
 {
-	struct m0_rm_incoming *in    = &rm_ctx[SERVER_1].rc_test_data.rd_in;
-	struct m0_rm_owner    *owner = rm_ctx[SERVER_1].rc_test_data.rd_owner;
-
-	/* Server-2 is upward creditor for Server-1 (client) */
+	/* Server-2 (server) is upward creditor for Server-1 (client) */
 	creditor_cookie_setup(SERVER_1, SERVER_2);
 
-	wait_lock(owner, in);
+	/* Take a wait lock on client */
+	wait_lock(SERVER_1);
 
 	/*
 	 * Set up session pointer on the server. So that this lock can be
@@ -283,8 +333,12 @@ static void client_tests(void)
 {
 	m0_chan_wait(&tests_clink[TEST1]);
 	test1_run();
+
 	/* Begin next test */
 	m0_chan_signal_lock(&flock_tests_chan);
+	m0_chan_wait(&tests_clink[TEST3]);
+
+	client_test3_run();
 }
 
 static void server_tests(void)
@@ -292,6 +346,9 @@ static void server_tests(void)
 	m0_chan_wait(&tests_clink[TEST2]);
 	test2_run();
 	test_verify(TEST2);
+
+	/* Begin next test */
+	m0_chan_signal_lock(&flock_tests_chan);
 }
 
 static void rm_server_start(const int tid)
-- 
1.8.3.2


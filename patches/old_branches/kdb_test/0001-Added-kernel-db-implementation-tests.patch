From 64773c52c5328cc47b6cc262d98358f98e3dc213 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoly_bilenko@us.xyratex.com>
Date: Tue, 1 Feb 2011 10:41:42 +0200
Subject: [PATCH] Added kernel db implementation tests

---
 c2t1fs/main.c               |  16 +++
 configure.ac                |  10 ++
 db/linux_kernel/Makefile.in |   2 +-
 db/linux_kernel/db.c        |   6 +-
 db/linux_kernel/db_impl.h   |   5 +
 db/linux_kernel/db_test.c   | 259 ++++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 294 insertions(+), 4 deletions(-)
 create mode 100644 db/linux_kernel/db_test.c

diff --git a/c2t1fs/main.c b/c2t1fs/main.c
index d012988..da18e55 100644
--- a/c2t1fs/main.c
+++ b/c2t1fs/main.c
@@ -1,3 +1,7 @@
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/mm.h>
@@ -14,12 +18,14 @@
 #include "lib/memory.h"
 #include "lib/errno.h"
 #include "fop/fop.h"
+#include "db/db.h"
 
 #include "c2t1fs.h"
 
 #include "io_k.h"
 #include "stob/ut/io_fop.h"
 
+
 #define DBG(fmt, args...) printk("%s:%d " fmt, __FUNCTION__, __LINE__, ##args)
 
 /**
@@ -1065,6 +1071,14 @@ static void c2t1fs_destroy_inodecache(void)
 	c2t1fs_inode_cachep = NULL;
 }
 
+/* add kernel tests to this function */
+static void ktest_run(void)
+{
+#ifdef ENABLE_KTEST
+	c2_db_kernel_test();
+#endif
+}
+
 int init_module(void)
 {
 	struct c2_net_domain *dom = &c2t1fs_domain;
@@ -1073,6 +1087,8 @@ int init_module(void)
         printk(KERN_INFO 
 	       "Colibri C2T1 File System (http://www.clusterstor.com)\n");
 
+	ktest_run();
+
 	rc = c2_net_xprt_init(&c2_net_ksunrpc_xprt);
 	if (rc)
 		return rc;
diff --git a/configure.ac b/configure.ac
index f4e6a2f..cfc93d2 100755
--- a/configure.ac
+++ b/configure.ac
@@ -8,6 +8,7 @@ AH_TEMPLATE([PACKAGE], [Package name.])
 AH_TEMPLATE([VERSION], [Version of the package.])
 AH_TEMPLATE([ENABLE_DEBUG], [Enable debug info.])
 AH_TEMPLATE([ENABLE_GSSRPC], [Enable gssrpc.])
+AH_TEMPLATE([ENABLE_KTEST], [Enable kernel tests on c2t1fs module load.])
 AH_TEMPLATE([HAVE_JOURNAL_ABORT], [Have journal_abort() function])
 AH_TEMPLATE([HAVE_FILE_READV], [Have fops->readv function])
 AH_TEMPLATE([HAVE_FILE_AIO_READ], [Have fops->aio_read function])
@@ -289,6 +290,11 @@ AC_ARG_ENABLE([db-o_direct],
         [enable_db_o_direct=no]
 )
 
+AC_ARG_ENABLE([run-ktest],
+        [AC_HELP_STRING([--disable-run-ktest], [disable running kernel tests on module startup])], [],
+        [enable_run_ktest=yes]
+)
+
 AC_MSG_CHECKING([for operating system])
 AC_MSG_RESULT([$host_os])
 case $host_os in
@@ -439,6 +445,10 @@ if test x$enable_gssrpc = xyes; then
         )
 fi
 
+if test x$enable_run_ktest = xyes; then
+        AC_DEFINE([ENABLE_KTEST])
+fi
+
 OLD_LIBS=$LIBS
 LIBS=""
 AC_SEARCH_LIBS([io_getevents], [c aio], [], [AC_MSG_ERROR([io_getevents cannot be found! Try install libaio-devel.])])
diff --git a/db/linux_kernel/Makefile.in b/db/linux_kernel/Makefile.in
index 5259e68..3ae170a 100644
--- a/db/linux_kernel/Makefile.in
+++ b/db/linux_kernel/Makefile.in
@@ -2,7 +2,7 @@ DB_SRCDIR = @SRCDIR@/db/linux_kernel
 
 obj-m       := kdb.o
 shared_src  := db_common.c
-kernel_src  := db.c
+kernel_src  := db.c db_test.c
 kdb-y       := $(shared_src:.c=.o) $(kernel_src:.c=.o)
 orig        := $(shared_src:%=../%)
 
diff --git a/db/linux_kernel/db.c b/db/linux_kernel/db.c
index 18002a1..2713dab 100644
--- a/db/linux_kernel/db.c
+++ b/db/linux_kernel/db.c
@@ -53,7 +53,7 @@ int c2_table_init(struct c2_table *table, struct c2_dbenv *env,
 }
 C2_EXPORTED(c2_table_init);
 
-static struct c2_db_kpair *kpair_extract(void *link)
+static struct c2_db_kpair *kpair_extract(struct c2_list_link *link)
 {
 	return container_of(link, struct c2_db_kpair, dk_linkage);
 }
@@ -65,7 +65,7 @@ void c2_table_fini(struct c2_table *table)
 	C2_ASSERT(ktable_invariant(table));
 
 	while (!c2_list_is_empty(&table->t_i.tk_pair)) {
-		kpair = kpair_extract(&table->t_i.tk_pair.l_head);
+		kpair = kpair_extract(table->t_i.tk_pair.l_head);
 		c2_list_del(&kpair->dk_linkage);
 		c2_free(kpair);
 	}
@@ -147,7 +147,7 @@ static struct c2_db_kpair *ktable_lookup(struct c2_db_pair *pair, int *out)
 			*out = 0;
 			/* fall through */
 		default:
-			break;
+			return scan;
 		}
 	}
 	return scan;
diff --git a/db/linux_kernel/db_impl.h b/db/linux_kernel/db_impl.h
index 4994195..62ca16a 100644
--- a/db/linux_kernel/db_impl.h
+++ b/db/linux_kernel/db_impl.h
@@ -48,6 +48,11 @@ struct c2_db_cursor_impl {
 	struct c2_db_kpair *ck_current;
 };
 
+/**
+   call on module initialisation to test db
+ */
+void c2_db_kernel_test(void);
+
 /** @} end of db group */
 
 /* __COLIBRI_DB_LINUX_KERNEL_DB_IMPL_H__ */
diff --git a/db/linux_kernel/db_test.c b/db/linux_kernel/db_test.c
new file mode 100644
index 0000000..b03b8ec
--- /dev/null
+++ b/db/linux_kernel/db_test.c
@@ -0,0 +1,259 @@
+/* -*- C -*- */
+
+#include "lib/arith.h"    /* C2_3WAY */
+#include "lib/types.h"
+#include "lib/assert.h"
+#include "db/db.h"
+#include "db/extmap.h"
+
+#define C2_UT_ASSERT(a)	C2_ASSERT(a)
+#define LAMBDA(T, ...) ({ T __lambda __VA_ARGS__; &__lambda; })
+
+static const char db_name[] = "ut-db";
+static const char test_table[] = "test-table";
+
+static void test_db_create(void) 
+{
+	struct c2_dbenv db;
+	int             result;
+
+	result = c2_dbenv_init(&db, db_name, 0);
+	C2_UT_ASSERT(result == 0);
+	c2_dbenv_fini(&db);
+}
+
+static int test_key_cmp(struct c2_table *table, 
+			const void *key0, const void *key1)
+{
+	const uint64_t *u0 = key0;
+	const uint64_t *u1 = key1;
+	return C2_3WAY(*u0, *u1);
+}
+
+static const struct c2_table_ops test_table_ops = {
+	.to = {
+		[TO_KEY] = { .max_size = 8 },
+		[TO_REC] = { .max_size = 8 }
+	},
+	.key_cmp = test_key_cmp
+};
+
+static void test_table_create(void) 
+{
+	struct c2_dbenv db;
+	struct c2_table table;
+	int             result;
+
+	result = c2_dbenv_init(&db, db_name, 0);
+	C2_UT_ASSERT(result == 0);
+
+	result = c2_table_init(&table, &db, test_table, 0, &test_table_ops);
+	C2_UT_ASSERT(result == 0);
+
+	c2_table_fini(&table);
+	c2_dbenv_fini(&db);
+}
+
+static void test_lookup(void) 
+{
+	struct c2_dbenv   db;
+	struct c2_db_tx   tx;
+	struct c2_table   table;
+	struct c2_db_pair cons;
+	int               result;
+	uint64_t          key;
+	uint64_t          rec;
+
+	result = c2_dbenv_init(&db, db_name, 0);
+	C2_UT_ASSERT(result == 0);
+
+	result = c2_table_init(&table, &db, test_table, 0, &test_table_ops);
+	C2_UT_ASSERT(result == 0);
+
+	result = c2_db_tx_init(&tx, &db, 0);
+	C2_UT_ASSERT(result == 0);
+
+	key = 42;
+	c2_db_pair_setup(&cons, &table, &key, sizeof key, &rec, sizeof rec);
+	result = c2_table_lookup(&tx, &cons);
+	C2_UT_ASSERT(result == -ENOENT);
+
+	c2_db_pair_fini(&cons);
+	result = c2_db_tx_commit(&tx);
+	C2_UT_ASSERT(result == 0);
+
+	c2_table_fini(&table);
+	c2_dbenv_fini(&db);
+}
+
+static void test_insert(void) 
+{
+	struct c2_dbenv   db;
+	struct c2_db_tx   tx;
+	struct c2_table   table;
+	struct c2_db_pair cons;
+	struct c2_db_pair cons1;
+	int               result;
+	uint64_t          key;
+	uint64_t          rec;
+	uint64_t          rec_out = 0;
+
+	result = c2_dbenv_init(&db, db_name, 0);
+	C2_UT_ASSERT(result == 0);
+
+	result = c2_table_init(&table, &db, test_table, 0, &test_table_ops);
+	C2_UT_ASSERT(result == 0);
+
+	result = c2_db_tx_init(&tx, &db, 0);
+	C2_UT_ASSERT(result == 0);
+
+	key = 42;
+	rec = 16;
+
+	c2_db_pair_setup(&cons, &table, &key, sizeof key, &rec, sizeof rec);
+
+	result = c2_table_insert(&tx, &cons);
+	C2_UT_ASSERT(result == 0);
+
+	c2_db_pair_setup(&cons1, &table, &key, sizeof key, 
+			 &rec_out, sizeof rec_out);
+
+	result = c2_table_lookup(&tx, &cons1);
+	C2_UT_ASSERT(result == 0);
+	C2_UT_ASSERT(rec_out == rec);
+
+	c2_db_pair_fini(&cons1);
+	c2_db_pair_fini(&cons);
+
+	result = c2_db_tx_commit(&tx);
+	C2_UT_ASSERT(result == 0);
+
+	c2_table_fini(&table);
+	c2_dbenv_fini(&db);
+}
+
+static void test_delete(void) 
+{
+	struct c2_dbenv   db;
+	struct c2_db_tx   tx;
+	struct c2_table   table;
+	struct c2_db_pair cons;
+	struct c2_db_pair cons1;
+	int               result;
+	uint64_t          key;
+	uint64_t          rec;
+	uint64_t          rec_out;
+
+	result = c2_dbenv_init(&db, db_name, 0);
+	C2_UT_ASSERT(result == 0);
+
+	result = c2_table_init(&table, &db, test_table, 0, &test_table_ops);
+	C2_UT_ASSERT(result == 0);
+
+	result = c2_db_tx_init(&tx, &db, 0);
+	C2_UT_ASSERT(result == 0);
+
+	key = 43;
+	rec = 17;
+
+	c2_db_pair_setup(&cons, &table, &key, sizeof key, &rec, sizeof rec);
+	c2_db_pair_setup(&cons1, &table, &key, sizeof key, 
+			 &rec_out, sizeof rec_out);
+
+	result = c2_table_insert(&tx, &cons);
+	C2_UT_ASSERT(result == 0);
+
+	result = c2_table_lookup(&tx, &cons1);
+	C2_UT_ASSERT(result == 0);
+	C2_UT_ASSERT(rec_out == rec);
+
+	c2_db_pair_release(&cons1);
+	c2_db_pair_release(&cons);
+
+	result = c2_table_delete(&tx, &cons);
+	C2_UT_ASSERT(result == 0);
+	result = c2_table_lookup(&tx, &cons1);
+	C2_UT_ASSERT(result == -ENOENT);
+
+	c2_db_pair_fini(&cons1);
+	c2_db_pair_fini(&cons);
+
+	result = c2_db_tx_commit(&tx);
+	C2_UT_ASSERT(result == 0);
+
+	c2_table_fini(&table);
+	c2_dbenv_fini(&db);
+}
+
+static void test_waiter(void) 
+{
+	struct c2_dbenv   db;
+	struct c2_db_tx   tx;
+	struct c2_table   table;
+	struct c2_db_pair cons;
+	int               result;
+	uint64_t          key;
+	uint64_t          rec;
+	int               wflag;
+
+	struct c2_db_tx_waiter wait;
+
+	result = c2_dbenv_init(&db, db_name, 0);
+	C2_UT_ASSERT(result == 0);
+
+	result = c2_table_init(&table, &db, test_table, 0, &test_table_ops);
+	C2_UT_ASSERT(result == 0);
+
+	result = c2_db_tx_init(&tx, &db, 0);
+	C2_UT_ASSERT(result == 0);
+
+	c2_db_pair_setup(&cons, &table, &key, sizeof key, &rec, sizeof rec);
+	result = c2_table_insert(&tx, &cons);
+	C2_UT_ASSERT(result == 0);
+
+	wflag = 0;
+	wait.tw_abort = LAMBDA(void, (struct c2_db_tx_waiter *w) {
+			C2_ASSERT(false);
+		});
+	wait.tw_commit = LAMBDA(void, (struct c2_db_tx_waiter *w) {
+			C2_ASSERT(w == &wait);
+			wflag = 1;
+		});
+	wait.tw_persistent = LAMBDA(void, (struct c2_db_tx_waiter *w) {
+			C2_ASSERT(false);
+		});
+	wait.tw_done = LAMBDA(void, (struct c2_db_tx_waiter *w) {
+			C2_ASSERT(wflag == 1);
+			wflag = 2;
+		});
+	c2_db_tx_waiter_add(&tx, &wait);
+	c2_db_pair_fini(&cons);
+
+	result = c2_db_tx_commit(&tx);
+	C2_UT_ASSERT(result == 0);
+
+	c2_table_fini(&table);	
+	c2_dbenv_fini(&db);
+	C2_UT_ASSERT(wflag == 2);
+}
+
+void c2_db_kernel_test(void)
+{
+	test_db_create();
+	test_table_create();
+	test_lookup();
+	test_insert();
+	test_delete();
+	test_waiter();
+}
+C2_EXPORTED(c2_db_kernel_test);
+
+/* 
+ *  Local variables:
+ *  c-indentation-style: "K&R"
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ *  fill-column: 80
+ *  scroll-step: 1
+ *  End:
+ */
-- 
1.8.3.2


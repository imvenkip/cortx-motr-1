From 3996275f80ab38ce1c343e31856aeff179f39c64 Mon Sep 17 00:00:00 2001
From: Rohan Puri <rohan_puri@xyratex.com>
Date: Mon, 22 Jul 2013 17:42:10 +0530
Subject: [PATCH 059/107] Addressed review comments - simple fom in m0t1fs for
 monitor summary records periodic posting

---
 addb/addb_monitor.c          | 113 +++++++++++++++++++++++++++----------------
 addb/addb_monitor.h          |  62 +++++++++++++++---------
 addb/addb_rec.c              |   2 +-
 addb/user_space/addb_pfom.c  |   2 +-
 m0t1fs/linux_kernel/m0t1fs.c |  19 ++++++++
 m0t1fs/m0t1fs_addb.h         |  28 +++++++++++
 6 files changed, 160 insertions(+), 66 deletions(-)

diff --git a/addb/addb_monitor.c b/addb/addb_monitor.c
index 109f4cb..5165ea2 100644
--- a/addb/addb_monitor.c
+++ b/addb/addb_monitor.c
@@ -49,8 +49,10 @@
 
    <hr>
    @section ADDB-MON-INFRA-DLD-def Definitions
-   @see @ref ADDB-MON-INFRA-DLD-ref-HLD "[0]" for definitions that apply to
-   this design.
+   - <b> Summary ADDB records</b> These are summary records that are generated
+   by ADDB monitor for a particular system metric.
+   - <b> ADDB monitor</b> These are objects present on every node in the cluster
+   (client or server), they generate summary records.
 
    <hr>
    @section ADDB-MON-INFRA-DLD-req Requirments
@@ -87,7 +89,8 @@
    also as addb records to the addb service if present on client or to the addb
    stob if present on server. This is done through enhancing the
    functionality of addb pfom @ref ADDB-DLD-SVC-pstats on the server and making
-   use of a simple fom on the client.
+   use of a simple fom on the client. This simple fom has the same states &
+   state transitions as of the addb pfom.
 
 
 		Global ADDB monitors list
@@ -161,46 +164,80 @@ M0_TL_DESCR_DEFINE(addb_mon, "addb monitors list", M0_INTERNAL,
 
 M0_TL_DEFINE(addb_mon, M0_INTERNAL, struct m0_addb_monitor);
 
+struct addb_monitor_entry {
+	int (*ame_init) (void);
+	void (*ame_fini) (void);
+	const char *ame_name;
+	bool status;
+};
+
+/**
+ * List of all monitor entries
+ * @todo: This should come from conf
+ */
+struct addb_monitor_entry monitors[] = {
+	{ NULL, NULL, NULL, false}
+};
+
 M0_INTERNAL int m0_addb_monitor_subsys_init(const struct m0_reqh *reqh,
 					    const char           *endpoint)
 {
+	int rc = 0;
+	int i;
+
 	M0_PRE(reqh != NULL);
 	M0_PRE(endpoint != NULL);
 
 	addb_mon_tlist_init(&monitor_global_ctx.amgc_list);
 
 	monitor_global_ctx.amgc_reqh = reqh;
+
 	/*
 	 * @todo: Establish connection with stats service
 	 */
-	return 0;
+
+	for (i = 0; i < ARRAY_SIZE(monitors); ++i) {
+		if (monitors[i].status == true)
+			rc = monitors[i].ame_init();
+			if (rc != 0)
+				goto fail;
+	}
+
+fail:
+	while (--i >= 0)
+		if (monitors[i].ame_fini != NULL)
+			monitors[i].ame_fini();
+
+	return rc;
 }
 
-M0_INTERNAL int m0_addb_monitor_init(struct m0_addb_monitor        *monitor,
-				     const struct m0_addb_rec_type *rtype,
-			  void (*am_watch) (const struct m0_addb_monitor *mon,
-					    const struct m0_addb_rec     *rec,
-					    const struct m0_reqh         *reqh),
-      struct m0_addb_sum_rec * (*am_sum_get) (const struct m0_addb_monitor *m,
-					      const struct m0_reqh *reqh),
-			  int (*am_sum_alloc) (const struct m0_addb_monitor *m,
-					       const struct m0_reqh *reqh,
-					       const struct m0_addb_rec_type *r))
+bool addb_monitor_invariant(struct m0_addb_monitor *mon)
+{
+	return ((mon != NULL) &&
+		(mon->am_ops != NULL) &&
+		(((mon->am_ops->am_sum_get != NULL) &&
+		 (mon->am_ops->am_sum_alloc != NULL)) ||
+	        ((mon->am_ops->am_sum_get == NULL) &&
+		 (mon->am_ops->am_sum_alloc == NULL))));
+}
+
+M0_INTERNAL int m0_addb_monitor_init(struct m0_addb_monitor           *monitor,
+				     const struct m0_addb_rec_type    *rtype,
+				     const struct m0_addb_monitor_ops *mon_ops)
 {
 	int rc = 0;
 
 	M0_PRE(monitor != NULL);
-	M0_PRE(am_watch != NULL);
-	M0_PRE(((am_sum_get != NULL) && (am_sum_alloc != NULL)) ||
-	       ((am_sum_get == NULL) && (am_sum_alloc == NULL)));
+	M0_PRE(rtype != NULL);
+	M0_PRE(mon_ops != NULL);
 
-	monitor->am_watch = am_watch;
+	monitor->am_ops = mon_ops;
+	M0_ASSERT(addb_monitor_invariant(monitor));
 
-	if (am_sum_get != NULL) {
-		monitor->am_sum_get = am_sum_get;
-		monitor->am_sum_alloc = am_sum_alloc;
-		rc = monitor->am_sum_alloc(monitor, monitor_global_ctx.amgc_reqh,
-					   rtype);
+	if (mon_ops->am_sum_alloc != NULL) {
+		rc = monitor->am_ops->am_sum_alloc(monitor,
+						 monitor_global_ctx.amgc_reqh,
+					         rtype);
 		if (rc != 0)
 			M0_RETURN(rc);
 	}
@@ -212,20 +249,12 @@ M0_INTERNAL int m0_addb_monitor_init(struct m0_addb_monitor        *monitor,
 
 static void addb_monitor_fini(struct m0_addb_monitor *monitor)
 {
-	M0_PRE(monitor != NULL);
+	M0_PRE(addb_monitor_invariant(monitor));
 
-	monitor->am_watch = NULL;
-	monitor->am_sum_get = NULL;
-	monitor->am_sum_alloc = NULL;
+	monitor->am_ops = NULL;
 	addb_mon_tlink_fini(monitor);
 }
 
-static bool addb_monitor_invariant(struct m0_addb_monitor *monitor)
-{
-	/** @todo: Add proper invariants */
-	return true;
-}
-
 M0_INTERNAL void m0_addb_monitor_add(struct m0_addb_monitor *monitor)
 {
 	M0_PRE(addb_monitor_invariant(monitor));
@@ -235,13 +264,13 @@ M0_INTERNAL void m0_addb_monitor_add(struct m0_addb_monitor *monitor)
 
 M0_INTERNAL void m0_addb_monitor_del(struct m0_addb_monitor *monitor)
 {
-	M0_PRE(monitor != NULL);
+	M0_PRE(addb_monitor_invariant(monitor));
 
 	addb_mon_tlist_del(monitor);
 
-	if (monitor->am_sum_get != NULL)
-		m0_free(monitor->am_sum_get(monitor,
-					    monitor_global_ctx.amgc_reqh));
+	if (monitor->am_ops->am_sum_get != NULL)
+		m0_free(monitor->am_ops->am_sum_get(monitor,
+						monitor_global_ctx.amgc_reqh));
 	addb_monitor_fini(monitor);
 }
 
@@ -261,7 +290,7 @@ M0_INTERNAL void m0_addb_monitor_subsys_fini(void)
 /** @todo: Calculate the correct len for this macro */
 #define ADDB_SUM_REC_ON_WIRE_LEN(sum) 0
 
-M0_INTERNAL int m0_addb_post_summaries(void)
+M0_INTERNAL int m0_addb_monitor_post_summaries(void)
 {
 	const struct m0_addb_monitor    *mon;
 	const struct m0_reqh            *reqh = monitor_global_ctx.amgc_reqh;
@@ -276,8 +305,8 @@ M0_INTERNAL int m0_addb_post_summaries(void)
 		M0_RETURN(-ENOMEM);
 
 	m0_tl_for(addb_mon, &monitor_global_ctx.amgc_list, mon) {
-		if (mon->am_sum_get != NULL) {
-			struct m0_addb_sum_rec *sum = mon->am_sum_get(mon,
+		if (mon->am_ops->am_sum_get != NULL) {
+			struct m0_addb_sum_rec *sum = mon->am_ops->am_sum_get(mon,
 						                      reqh);
 			m0_mutex_lock(&sum->asr_mutex);
 			if (sum->asr_dirty == true)
@@ -295,8 +324,8 @@ M0_INTERNAL int m0_addb_post_summaries(void)
 		M0_RETURN(-ENOMEM);
 
 	m0_tl_for(addb_mon, &monitor_global_ctx.amgc_list, mon) {
-		if (mon->am_sum_get != NULL) {
-			struct m0_addb_sum_rec *sum = mon->am_sum_get(mon,
+		if (mon->am_ops->am_sum_get != NULL) {
+			struct m0_addb_sum_rec *sum = mon->am_ops->am_sum_get(mon,
 								      reqh);
 			struct m0_addb_sum_rec_wire  *addb_sum_rec_on_wire;
 			size_t                        len;
diff --git a/addb/addb_monitor.h b/addb/addb_monitor.h
index 424e1f0..27ee483 100644
--- a/addb/addb_monitor.h
+++ b/addb/addb_monitor.h
@@ -141,12 +141,30 @@
 		m0_mutex_unlock(&sum1->asr_mutex);
 	}
 
-	// 7. init monitor
-	m0_addb_monitor_init(&module_struct->ms_mon, sum1_am_watch,
+	// 7. Define monitor entry in monitors array.
+	int sum1_ame_init(void)
+	{
+		m0_addb_monitor_init(&module_struct->ms_mon, sum1_am_watch,
 			     sum1_am_sum_get, sum1_am_sum_alloc, m0_addb_sum1_rec);
 
-	// 8. Add monitor to the mero system
-	m0_addb_monitor_add(&module_struct->ms_mon);
+		m0_addb_monitor_add(&module_struct->ms_mon);
+	}
+
+	void sum1_ame_fini(void)
+	{
+		m0_addb_monitor_del(&module_struct->ms_mon);
+	}
+
+	struct addb_monitor_entry monitors[] = {
+		.
+		.
+		.
+		{ sum1_ame_init, sum1_ame_fini, "sum1_mon", true },
+		.
+		.
+		.
+	};
+
 
    @endcode
 */
@@ -174,12 +192,7 @@ struct m0_addb_sum_rec {
 	struct m0_addb_sum_rec_wire *asr_rec;
 };
 
-struct m0_addb_monitor {
-	/**
-	 * Linkage to global monitors list in
-	 * m0_addb_monitor_global_ctx:amgc_list
-	 */
-	struct m0_tlink           am_linkage;
+struct m0_addb_monitor_ops {
 	/**
 	 * Any processing specific to monitor is done here
 	 * includes, updates to the m0_addb_sum_rec.
@@ -201,8 +214,18 @@ struct m0_addb_monitor {
 	int                     (*am_sum_alloc) (const struct m0_addb_monitor *m,
 					         const struct m0_reqh         *r,
 					         const struct m0_addb_rec_type *t);
+};
+
+struct m0_addb_monitor {
+	/**
+	 * Linkage to global monitors list in
+	 * m0_addb_monitor_global_ctx:amgc_list
+	 */
+	struct m0_tlink                   am_linkage;
+	/** ADDB monitor operations vector */
+	const struct m0_addb_monitor_ops *am_ops;
 	/* Magic needed for monitor's tlist */
-	uint64_t                  am_magic;
+	uint64_t                          am_magic;
 };
 
 struct stats_conn {
@@ -233,6 +256,7 @@ struct m0_addb_monitor_global_ctx {
  * @pre endpoint != NULL
  * @post m0_addb_monitor_global_ctx:amgc_list initialized
  * @post m0_addb_monitor_global_ctx:amgc_ex != NULL
+ * @todo: Replace substring "subsys" with some other appropriate name
  */
 M0_INTERNAL int m0_addb_monitor_subsys_init(const struct m0_reqh *reqh,
 					    const char           *endpoint);
@@ -248,16 +272,9 @@ M0_INTERNAL int m0_addb_monitor_subsys_init(const struct m0_reqh *reqh,
  * @post monitor:am_sum_alloc == @param (*am_sum_alloc) ()
  * @post monitor:am_sum_get == @param (*am_sum_get) ()
  */
-M0_INTERNAL int m0_addb_monitor_init(struct m0_addb_monitor  *monitor,
-				     const struct m0_addb_rec_type *rtype,
-			   void (*am_watch) (const struct m0_addb_monitor *mon,
-					     const struct m0_addb_rec *rec,
-					     const struct m0_reqh     *reqh),
-	struct m0_addb_sum_rec * (*am_sum_get) (const struct m0_addb_monitor *m,
-						const struct m0_reqh *reqh),
-			   int (*am_sum_alloc) (const struct m0_addb_monitor *m,
-					        const struct m0_reqh *reqh,
-						const struct m0_addb_rec_type *r));
+M0_INTERNAL int m0_addb_monitor_init(struct m0_addb_monitor           *monitor,
+				     const struct m0_addb_rec_type    *rtype,
+				     const struct m0_addb_monitor_ops *mon_ops);
 
 /**
  * Add a particular monitor with the ADDB monitoring sub-system
@@ -273,6 +290,7 @@ M0_INTERNAL void m0_addb_monitor_del(struct m0_addb_monitor *monitor);
 
 /**
  * Cleanup the ADDB monitoring sub-system
+ * @todo: Replace substring "subsys" with some other appropriate name
  */
 M0_INTERNAL void m0_addb_monitor_subsys_fini(void);
 
@@ -280,7 +298,7 @@ M0_INTERNAL void m0_addb_monitor_subsys_fini(void);
  * This sends all the dirtied addb summary records for the added monitors
  * to the stats service as a fop.
  */
-M0_INTERNAL int m0_addb_post_summaries(void);
+M0_INTERNAL int m0_addb_monitor_post_summaries(void);
 
 #endif /* __MERO_ADDB_ADDB_MONITOR_H__ */
 
diff --git a/addb/addb_rec.c b/addb/addb_rec.c
index 69b1247..5e3575d 100644
--- a/addb/addb_rec.c
+++ b/addb/addb_rec.c
@@ -150,7 +150,7 @@ static void addb_rec_post(struct m0_addb_mc *mc,
 
 	/* Invoke all the monitor's filters */
 	m0_tl_for(addb_mon, &monitor_global_ctx.amgc_list, mon) {
-		mon->am_watch(mon, rec, monitor_global_ctx.amgc_reqh);
+		mon->am_ops->am_watch(mon, rec, monitor_global_ctx.amgc_reqh);
 	} m0_tl_endfor;
 }
 
diff --git a/addb/user_space/addb_pfom.c b/addb/user_space/addb_pfom.c
index b340012..2b67f4b 100644
--- a/addb/user_space/addb_pfom.c
+++ b/addb/user_space/addb_pfom.c
@@ -250,7 +250,7 @@ static int addb_pfom_fo_tick(struct m0_fom *fom)
 		M0_LOG(M0_DEBUG, "post");
 		m0_reqh_stats_post_addb(reqh);
 
-		err = m0_addb_post_summaries();
+		err = m0_addb_monitor_post_summaries();
 
 		/**
 		 * In case of summaries posting failure, just log error.
diff --git a/m0t1fs/linux_kernel/m0t1fs.c b/m0t1fs/linux_kernel/m0t1fs.c
index cda3b19..df41c68 100644
--- a/m0t1fs/linux_kernel/m0t1fs.c
+++ b/m0t1fs/linux_kernel/m0t1fs.c
@@ -66,6 +66,21 @@ static void m0t1fs_reqh_services_stop(void);
 
 struct m0_addb_ctx m0t1fs_addb_ctx;
 
+
+/**
+ * ADDB monitor summary posting fom
+ */
+static struct m0t1fs_addb_monitor_pfom mam_pfom;
+
+static int m0t1fs_addb_monitor_pfom_tick(struct m0_fom *fom, void *data,
+					 int *substate)
+{
+	/**
+	 * @todo: Implement ADDB summary record posting logic.
+	 */
+	return 0;
+}
+
 static struct file_system_type m0t1fs_fs_type = {
 	.owner        = THIS_MODULE,
 	.name         = "m0t1fs",
@@ -144,6 +159,10 @@ M0_INTERNAL int m0t1fs_init(void)
 	if (rc != 0)
 		goto rpc_fini;
 
+	M0_FOM_SIMPLE_POST(&mam_pfom.pf_fom, &m0t1fs_globals.g_reqh,
+			   &m0t1fs_addb_monitor_pfom_tick,
+			   &mam_pfom, 1);
+
 	rc = m0t1fs_layout_init();
 	if (rc != 0)
 		goto mon_fini;
diff --git a/m0t1fs/m0t1fs_addb.h b/m0t1fs/m0t1fs_addb.h
index f9f892f..c071310 100644
--- a/m0t1fs/m0t1fs_addb.h
+++ b/m0t1fs/m0t1fs_addb.h
@@ -24,6 +24,9 @@
 
 #include "addb/addb.h"
 #include "addb/addb_monitor.h"
+#ifdef __KERNEL__
+#include "fop/fom_simple.h"
+#endif
 
 /*
  ******************************************************************************
@@ -149,6 +152,31 @@ M0_ADDB_RT_CNTR(m0_addb_rt_m0t1fs_dgiow_times,  M0T1FS_ADDB_RECID_DGIOW_TIMES,
 		uS(250), uS(500), uS(750), mS(1), mS(10), mS(50),
 		mS(100), mS(250), mS(500));
 
+#ifdef __KERNEL__
+struct m0t1fs_addb_monitor_pfom {
+	/** Periodicity of the ADDB summary stats post */
+	m0_time_t             pf_period;
+	/** Next post time */
+	m0_time_t             pf_next_post;
+	/** Shutdown/unmount request flag */
+	bool                  pf_shutdown;
+	/** The FOM timer */
+	struct m0_fom_timeout pf_timeout;
+	/** Simple FOM */
+	struct m0_fom_simple  pf_fom;
+};
+
+enum m0t1fs_addb_monitor_pfom_phase {
+	M0T1FS_PFOM_PHASE_CTO = M0_FOM_PHASE_NR,
+	M0T1FS_PFOM_PHASE_SLEEP,
+	M0T1FS_PFOM_PHASE_POST,
+};
+
+enum {
+	M0T1FS_PFOM_RET_SHUTDOWN = -1,
+};
+#endif /* __KERNEL__ */
+
 #endif /* __MERO_M0T1FS_M0T1FS_ADDB_H__ */
 
 /*
-- 
1.8.3.2


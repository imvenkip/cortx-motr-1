From 6825f76d3a8031ec5b7ab19fc8d0b109633f72c3 Mon Sep 17 00:00:00 2001
From: Anup Barve <anup_barve@xyratex.com>
Date: Thu, 16 May 2013 15:22:10 +0530
Subject: [PATCH] Fixed bug in cp send-recv phases which was reported when
 multiple buffers were associated with a copy packet.

---
 sns/cm/net.c    | 28 +++++++++++++++++++++++-----
 sns/cm/ut/net.c |  1 +
 2 files changed, 24 insertions(+), 5 deletions(-)

diff --git a/sns/cm/net.c b/sns/cm/net.c
index 009da2e..51f6fa7 100644
--- a/sns/cm/net.c
+++ b/sns/cm/net.c
@@ -174,6 +174,11 @@ static int snscp_to_snscpx(struct m0_sns_cm_cp *sns_cp,
         struct m0_net_buffer    *nbuf;
         struct m0_cm_cp         *cp;
         struct m0_cm            *cm;
+        struct m0_net_domain    *ndom;
+        struct m0_rpc_session   *session;
+        uint32_t                 nbuf_max_seg_nr;
+        uint32_t                 nbuf_seg_nr;
+        uint32_t                 tmp_seg_nr;
 	struct m0_cm_aggr_group *sw_lo_ag;
 	struct m0_cm_aggr_group *sw_hi_ag;
         uint32_t                 nb_idx = 0;
@@ -186,6 +191,8 @@ static int snscp_to_snscpx(struct m0_sns_cm_cp *sns_cp,
         M0_PRE(sns_cpx != NULL);
 
         cp = &sns_cp->sc_base;
+        session = &cp->c_cm_proxy->px_session;
+        ndom = session->s_conn->c_rpc_machine->rm_tm.ntm_dom;
 
         sns_cpx->scx_sid.f_container = sns_cp->sc_sid.si_bits.u_hi;
         sns_cpx->scx_sid.f_key = sns_cp->sc_sid.si_bits.u_lo;
@@ -205,17 +212,21 @@ static int snscp_to_snscpx(struct m0_sns_cm_cp *sns_cp,
                 goto out;
         }
 
+        tmp_seg_nr = cp->c_data_seg_nr;
+        nbuf_max_seg_nr = m0_net_domain_get_max_buffer_segments(ndom);
+
         m0_tl_for(cp_data_buf, &cp->c_buffers, nbuf) {
+                nbuf_seg_nr = min32(nbuf_max_seg_nr, tmp_seg_nr);
+                tmp_seg_nr -= nbuf_seg_nr;
                 rc = indexvec_prepare(&sns_cpx->scx_ivecs.
                                                cis_ivecs[nb_idx],
                                                offset,
-                                               cp->c_data_seg_nr,
+                                               nbuf_seg_nr,
                                                nbuf->nb_pool->nbp_seg_size);
                 if (rc != 0 )
                         goto cleanup;
 
-                offset += cp->c_data_seg_nr *
-                          nbuf->nb_pool->nbp_seg_size;
+                offset += nbuf_seg_nr * nbuf->nb_pool->nbp_seg_size;
                 M0_CNT_INC(nb_idx);
         } m0_tl_endfor;
         sns_cpx->scx_ivecs.cis_nr = nb_idx;
@@ -293,6 +304,9 @@ M0_INTERNAL int m0_sns_cm_cp_send(struct m0_cm_cp *cp)
         struct m0_rpc_bulk_buf *rbuf;
         struct m0_net_domain   *ndom;
         struct m0_net_buffer   *nbuf;
+	uint32_t                nbuf_max_seg_nr;
+	uint32_t                nbuf_seg_nr;
+	uint32_t                tmp_seg_nr;
         struct m0_rpc_session  *session;
 	struct m0_cm_cp_fop    *cp_fop;
         struct m0_fop          *fop;
@@ -329,14 +343,18 @@ M0_INTERNAL int m0_sns_cm_cp_send(struct m0_cm_cp *cp)
 	m0_mutex_unlock(&cp->c_cm_proxy->px_mutex);
 
         offset = sns_cp->sc_index;
+	tmp_seg_nr = cp->c_data_seg_nr;
+	nbuf_max_seg_nr = m0_net_domain_get_max_buffer_segments(ndom);
         m0_tl_for(cp_data_buf, &cp->c_buffers, nbuf) {
+		nbuf_seg_nr = min32(nbuf_max_seg_nr, tmp_seg_nr);
+		tmp_seg_nr -= nbuf_seg_nr;
                 rc = m0_rpc_bulk_buf_add(&cp->c_bulk,
-                                         cp->c_data_seg_nr,
+                                         nbuf_seg_nr,
                                          ndom, NULL, &rbuf);
                 if (rc != 0 || rbuf == NULL)
                         goto out;
 
-                for (i = 0; i < cp->c_data_seg_nr; ++i) {
+                for (i = 0; i < nbuf_seg_nr; ++i) {
                         rc = m0_rpc_bulk_buf_databuf_add(rbuf,
                                         nbuf->nb_buffer.ov_buf[i],
                                         nbuf->nb_buffer.ov_vec.v_count[i],
diff --git a/sns/cm/ut/net.c b/sns/cm/ut/net.c
index 3bd4294..5c3f685 100644
--- a/sns/cm/ut/net.c
+++ b/sns/cm/ut/net.c
@@ -774,6 +774,7 @@ static void test_cp_send_recv_verify()
         s_sns_cp.sc_base.c_cm_proxy = &sender_cm_proxy;
         s_sns_cp.sc_sid = sid;
         s_sns_cp.sc_index = 0;
+	s_sns_cp.sc_base.c_data_seg_nr = SEG_NR * BUF_NR;
 	/* Assume this as accumulator copy packet to be sent on remote side. */
 	s_sns_cp.sc_base.c_ag_cp_idx = ~0;
 	m0_cm_lock(&sender_cm);
-- 
1.8.3.2


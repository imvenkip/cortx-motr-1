From b235058102f36bf6afc09ef6e43ae78ed474468f Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Mon, 4 Nov 2013 17:56:55 +0200
Subject: [PATCH 1/2] testing: jenkins test script copied

---
 tmp/mero_testing.pl | 307 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 307 insertions(+)
 create mode 100644 tmp/mero_testing.pl

diff --git a/tmp/mero_testing.pl b/tmp/mero_testing.pl
new file mode 100644
index 0000000..38ccee2
--- /dev/null
+++ b/tmp/mero_testing.pl
@@ -0,0 +1,307 @@
+#!/usr/bin/env perl 
+#===============================================================================
+#
+#         FILE: colibri_testing.pl
+#        USAGE: ./colibri_testing.pl
+#
+#  DESCRIPTION: Execute remote tests for colibri and control execution
+# ORGANIZATION: Xyratex
+#      CREATED: 07/22/2012 07:23:33 PM
+#===============================================================================
+
+use strict;
+use warnings;
+use utf8;
+
+use Log::Log4perl qw(:easy);
+use Data::Dumper;
+use Carp;
+use Cwd qw(chdir);
+use File::chdir;
+use Utils;
+use Error qw(try finally except otherwise);
+
+use Xperior::Xception;
+use Xperior::Node;
+$| = 1;
+####################################
+my $starttimeout = 20 * 60;
+
+#my $cnode        = 'sjt00-c2';
+
+#'10.76.50.163';
+#my $cipmi           = '10.76.50.164';
+my @suitelist       = ('mero-single');
+my $sessionrandomid = int( rand(9999999999) );
+my $xtestconfig     = "/tmp/xperior.1node.it.config.$sessionrandomid";
+#####################################
+#
+
+my $cnode = $ENV{CNODE};
+
+confess "Node is not defined"
+  unless defined $cnode;
+
+my $XPERIORHOME = '/opt/xyratex/xperior';
+if ( defined( $ENV{XPERIOR} ) ) {
+    $XPERIORHOME = $ENV{XPERIOR};
+}
+
+my $multiplier = '';
+if ( defined( $ENV{MULTIPLIER} ) ) {
+    $multiplier = '--multiplier=' . $ENV{MULTIPLIER} . ' ';
+}
+
+my $moreparams = '';
+if ( defined( $ENV{MOREPARAMS} ) ) {
+    $moreparams = $ENV{MOREPARAMS} ;
+}
+
+my $tag  = $ENV{'TAG'};
+my $burl = $ENV{'BUILD_URL'};
+
+my $loglevel = ' --info ';
+
+my $nodetype = 'impi';
+if ( defined( $ENV{NODETYPE} ) ) {
+    $nodetype = $ENV{NODETYPE};
+}
+
+my $builddir = $ENV{BUILDDIR};
+confess "BUILDDIR is not set"
+  unless defined $ENV{BUILDDIR};
+
+my $OVERRIDEROLES = $ENV{'ROLES'};
+
+#########################################
+#if ( defined $ENV{'DEBUG'} ) {
+Log::Log4perl->easy_init($DEBUG);
+$loglevel = ' --debug ';
+
+#}
+#else {
+#    Log::Log4perl->easy_init($INFO);
+#}
+#
+my $continue = ' --continue ';
+
+#######################################
+#runExternalApp("rm -rf workdir");
+
+my $wd = $CWD;
+
+my $node;
+if ( $nodetype eq 'ipmi' ) {
+    my $cipmi = $ENV{CNODEIPMI};
+    confess "IPMI is not set"
+      unless defined $cipmi;
+    $node = Xperior::Node->new(
+        ipmi => $cipmi,
+        ip   => $cnode,
+
+        id   => 'colibribuild',
+        user => 'root',
+
+        #nodetype => 'BasicNode'
+        nodetype => 'IPMINode'
+    );
+    INFO "IPMI node created";
+}
+elsif ( $nodetype eq 'kvm' ) {
+    my $kvmconsole = $ENV{'KVMCONSOLE'};
+    confess "KVMCONSOLE is not set"
+      unless $ENV{'KVMCONSOLE'};
+
+    $node = Xperior::Node->new(
+        ip => $cnode,
+
+        id   => 'colibricoverage',
+        user => 'root',
+
+        kvmdomain     => $cnode,
+        kvmimage      => $kvmconsole,
+        restoretimeot => 600,
+
+        #nodetype => 'BasicNode'
+        nodetype => 'KVMNode'
+    );
+    INFO "KVN node created";
+}
+else {
+    confess "Unsupported node type";
+}
+
+#preventive restart, could be  disabled as agreed in MRP-586
+if ( defined( $ENV{PRERUN_REBOOT} )
+    and ( $ENV{PRERUN_REBOOT} eq 'yes' ) )
+{
+    if ( $node->isAlive ) {
+        $node->halt;
+
+        #    $node->waitDown
+        #        or confess "Cannot stop build node";
+        #}
+        #
+    }
+}
+
+unless ( $node->isAlive ) {
+    $node->start;
+    unless ( defined( $node->waitUp($starttimeout) ) ) {
+        confess "Node down";
+    }
+    INFO "Node started";
+}
+
+$node->run("sysctl -w kernel.randomize_va_space=0");
+
+#create  configuration
+my $config = <<"CFG";
+---
+Nodes:
+   - id           : colibri
+     ip           : $cnode
+     ctrlproto    : ssh
+     user         : root
+     console      : /tmp/serial_${cnode}_out 
+
+LustreObjects:
+   - id          : allinnode_mds
+     device      : /tmp/lustre-mdt1    
+     node        : colibri 
+     type        : mds 
+
+   - id          : allinnode
+     node        : colibri
+     type        : client
+     master      : yes 
+
+
+#Variables
+client_mount_point      : /tmp/mnt/lustre
+#benchmark_tests_file   : testfile
+tempdir                 : / 
+builddir                : $builddir
+
+CFG
+
+open CFG, " > $xtestconfig "
+  or confess "Cannot write config [$xtestconfig]: $!";
+print CFG $config;
+close CFG;
+
+runExternalApp("rm -rf $wd/workdir");
+mkdir "$wd/workdir";
+runExternalApp("rm -rf '$wd/junit'");
+
+INFO "Running suites: ", join( ", ", @suitelist );
+
+foreach my $suite (@suitelist) {
+    INFO "Processing suite: [$suite]";
+    my $ilist = "/tmp/ilist.1vm.it.$sessionrandomid";
+    my $sl    = <<"ILIST";
+
+${suite}/.* #run only one suite
+
+ILIST
+
+    #mkdir 'tests';
+    #my $excludelist = $EXCLUDELIST if defined $EXCLUDELIST;
+    run( "rm -rf $wd/tmpwd && mkdir $wd/tmpwd",                             1 );
+    run( "cp $wd/scripts/colibritests/colibri-single_tests.yaml $wd/tmpwd", 1 );
+    if ( defined($OVERRIDEROLES) ) {
+        WARN "Applying roles [$OVERRIDEROLES]";
+        $CWD = $XPERIORHOME;
+        runExternalApp( "bin/fixyaml.pl --dir='$wd/tmpwd' "
+              . " --chkey=roles --value='$OVERRIDEROLES'" );
+    }
+    run( "cp $wd/scripts/colibritests/tags.yaml $wd/tmpwd", 1 );
+
+    open IL, " > $ilist "
+      or confess "Cannot write include list  [$ilist]: $!";
+
+    print IL $sl;
+    close IL;
+
+    my $res          = 1;
+    my $restarts     = 0;
+    my $stime        = time;
+    my $connectcrash = 0;
+    while ( $res != 0 ) {
+
+        $CWD = $XPERIORHOME;
+        $res = runExternalApp(
+                "bin/runtest.pl --workdir='$wd/workdir' --testdir='$wd/tmpwd'  "
+              . "--config=$xtestconfig "
+              . "--includelist=$ilist  "
+
+              #. "--excludelist=$excludelist   --action=run "
+              . " --extopt=sessionstarttime:$stime "
+
+              #. " --extopt=branch:$tag "
+              . " --extopt=executiontype:IT "
+
+              #. " --extopt=release:2.1 "
+              . " --extopt=configuration:1hwnode" . " --extopt=buildurl:$burl"
+
+              #. " --extopt=ofed:builtin"
+              . " --extopt=distr:SL61" . " --extopt=arch:x86_64"
+
+              #. " --extopt=type:full"
+              . " $loglevel  $continue $multiplier $moreparams"
+
+        );
+        WARN "runtest exited with status $res";
+        if (   ( $res == 2816 )
+            or ( $res == 2560 )
+            or ( $res == 0xc00 )
+            or ( ( $res == 4864 ) and ( $connectcrash < 10 ) ) )
+        {
+            if ( $res == 4864 ) {
+                $connectcrash++;
+                WARN "Connection problem number <$res> detected";
+            }
+            WARN "Restarting Node";
+            $node->halt;
+            $node->waitDown;
+            sleep 5;
+            $node->start;
+            sleep 30;
+            unless ( defined( $node->waitUp($starttimeout) ) ) {
+                confess "Node down after $starttimeout] sec";
+                last;
+            }
+
+            confess "Node [$cnode] is not up after start/stop after "
+              . "test crash for [$starttimeout]"
+              unless defined $node->waitUp($starttimeout);
+
+            confess "Max restarts detected" if $restarts > 3;
+            $restarts++;
+            
+            $node->run("sysctl -w kernel.randomize_va_space=0");
+        }
+        elsif ( $res == 0 ) {
+            WARN "Test execution completed";
+            last;
+        }
+        else {
+            confess "runtest exited with unknown code $res";
+        }
+    }
+
+    #convert xtest results to junit for jenkins report
+    #my @suitelist = qw(sanity );
+    $CWD = $wd;
+
+    #runExternalApp("rm -rf '$wd/junit'");
+    #foreach my $suite (@suitelist){
+    runExternalApp("mkdir -p '$wd/junit'");
+    runExternalApp( "perl scripts/xtest2junit.pl "
+          . " $suite '$wd/workdir/$suite' '$wd/junit' "
+          . "> '$wd/junit/$suite.junit'" );
+}
+
+$node->getFile( "$builddir/custom_history.txt", "$wd/custom_history.txt" );
+runExternalApp("cp $wd/custom_history.txt $wd/build_id.txt");
+
-- 
1.8.3.2


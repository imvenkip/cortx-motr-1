From aeb0f4855dd4ec491123a8e00770d3283050bfcb Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Mon, 17 Jun 2013 21:54:29 +0800
Subject: [PATCH 10/12] re-factored the pool machine version number checking
 and device state checking into a common function.

---
 ioservice/cob_foms.c    | 41 ++++++--------------------
 ioservice/cob_foms.h    |  2 +-
 ioservice/io_foms.c     | 76 ++++++++++++++++++++++++++++++-------------------
 ioservice/ut/cob_foms.c |  4 +--
 4 files changed, 57 insertions(+), 66 deletions(-)

diff --git a/ioservice/cob_foms.c b/ioservice/cob_foms.c
index 63c45a2..34e2c2e 100644
--- a/ioservice/cob_foms.c
+++ b/ioservice/cob_foms.c
@@ -217,6 +217,11 @@ static void cob_fom_populate(struct m0_fom *fom)
 	cfom->fco_cob_idx = common->c_cob_idx;
 }
 
+/* defined in io_foms.c */
+extern int ios__poolmach_check(struct m0_poolmach *poolmach,
+			       struct m0_pool_version_numbers *cliv,
+			       struct m0_fid *cob_fid);
+
 static int cob_ops_fom_tick(struct m0_fom *fom)
 {
 	int                             rc;
@@ -227,7 +232,6 @@ static int cob_ops_fom_tick(struct m0_fom *fom)
 	struct m0_fop_cob_common       *common;
 	bool                            fop_is_create;
 	const char                     *ops;
-	enum m0_pool_nd_state           device_state = 0;
 
 	M0_PRE(fom != NULL);
 	M0_PRE(fom->fo_ops != NULL);
@@ -250,42 +254,13 @@ static int cob_ops_fom_tick(struct m0_fom *fom)
 	switch (m0_fom_phase(fom)) {
 	case M0_FOPH_COB_OPS_PREPARE: {
 		struct m0_pool_version_numbers *cliv;
-		struct m0_pool_version_numbers  curr;
 
 		M0_LOG(M0_DEBUG, "Cob %s operation prepare", ops);
 		cliv = (struct m0_pool_version_numbers*)&common->c_version;
-		m0_poolmach_current_version_get(poolmach, &curr);
-
-		/* Check the client version and server version before any
-		 * processing
-		 */
-		if (m0_poolmach_version_before(cliv, &curr)) {
-			rc = M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH;
-			m0_fom_phase_move(fom,
-				  M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH,
-				  M0_FOPH_FAILURE);
-			M0_LOG(M0_DEBUG, "VERSION MISMATCH!");
-			m0_poolmach_version_dump(cliv);
-			m0_poolmach_version_dump(&curr);
-			m0_poolmach_event_list_dump(poolmach);
-			m0_poolmach_device_state_dump(poolmach);
-			goto pack;
-		}
 
-		rc = m0_poolmach_device_state(poolmach,
-					      common->c_cobfid.f_container,
-					      &device_state);
-		if ((rc != 0) || (device_state != M0_PNDS_ONLINE &&
-				  device_state != M0_PNDS_SNS_REPAIRED &&
-				  device_state != M0_PNDS_SNS_REBALANCED)) {
-			m0_fom_phase_move(fom, -EIO,
-					  M0_FOPH_FAILURE);
-			M0_LOG(M0_ERROR, "%s cob %lu:%lu on failed device: "
-					 "state = %d rc=%d",
-					 ops,
-					 common->c_cobfid.f_container,
-					 common->c_cobfid.f_key,
-					 device_state, rc);
+		rc = ios__poolmach_check(poolmach, cliv, &common->c_cobfid);
+		if (rc != 0) {
+			m0_fom_phase_move(fom, rc, M0_FOPH_FAILURE);
 			goto pack;
 		}
 
diff --git a/ioservice/cob_foms.h b/ioservice/cob_foms.h
index 0e2e564..b0b1964 100644
--- a/ioservice/cob_foms.h
+++ b/ioservice/cob_foms.h
@@ -29,7 +29,7 @@
 enum m0_fom_cob_operations_phases {
 	M0_FOPH_COB_OPS_PREPARE = M0_FOPH_NR + 1,
 	/**
-	 * Internally creates/delete a stob, a cob and adds/removes a record to
+	 * Internally creates/deletes a stob, a cob and adds/removes a record to
 	 * or from auxiliary database.
 	 */
 	M0_FOPH_COB_OPS_CREATE_DELETE
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index eaf78d9..fa8b524 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -1054,6 +1054,49 @@ static int m0_io_fom_cob_rw_create(struct m0_fop *fop, struct m0_fom **out,
         return rc;
 }
 
+/**
+ * Checks client and server pool machine version numbers.
+ * Checks target device state for cob fid.
+ */
+int ios__poolmach_check(struct m0_poolmach *poolmach,
+			struct m0_pool_version_numbers *cliv,
+			struct m0_fid *cob_fid)
+{
+	struct m0_pool_version_numbers curr;
+	enum m0_pool_nd_state          device_state = 0;
+	int                            rc;
+	M0_ENTRY();
+
+	m0_poolmach_current_version_get(poolmach, &curr);
+
+	/* Check the client version and server version before any processing */
+	if (m0_poolmach_version_before(cliv, &curr)) {
+		M0_LOG(M0_DEBUG, "VERSION MISMATCH! poolmach = %p", poolmach);
+
+		m0_poolmach_version_dump(cliv);
+		m0_poolmach_version_dump(&curr);
+		m0_poolmach_event_list_dump(poolmach);
+		m0_poolmach_device_state_dump(poolmach);
+		M0_RETURN(M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH);
+	}
+
+	rc = m0_poolmach_device_state(poolmach, cob_fid->f_container,
+				      &device_state);
+	if ((rc != 0) || (device_state != M0_PNDS_ONLINE &&
+			  device_state != M0_PNDS_SNS_REPAIRED &&
+			  device_state != M0_PNDS_SNS_REBALANCED)) {
+		if (rc == 0) {
+			M0_LOG(M0_ERROR, "IO @ %lu:%lu on failed device: "
+					 "state = %d",
+					 cob_fid->f_container,
+					 cob_fid->f_key,
+					 device_state);
+			rc = -EIO;
+		}
+	}
+	M0_RETURN(rc);
+}
+
 static int io_prepare(struct m0_fom *fom)
 {
 	struct m0_fop_cob_rw           *rwfop;
@@ -1061,13 +1104,10 @@ static int io_prepare(struct m0_fom *fom)
 	struct m0_reqh                 *reqh;
 	struct m0_fop_cob_rw_reply     *rwrep;
 	struct m0_pool_version_numbers *cliv;
-	struct m0_pool_version_numbers  curr;
-	enum m0_pool_nd_state           device_state = 0;
 	int                             rc;
 
 	reqh = m0_fom_reqh(fom);
 	poolmach = m0_ios_poolmach_get(reqh);
-	m0_poolmach_current_version_get(poolmach, &curr);
 	rwfop = io_rw_get(fom->fo_fop);
 	rwrep = io_rw_rep_get(fom->fo_rep_fop);
 	cliv = (struct m0_pool_version_numbers*)(&rwfop->crw_version);
@@ -1085,33 +1125,9 @@ static int io_prepare(struct m0_fom *fom)
 	rwrep->rwr_repair_done = m0_sns_cm_fid_repair_done(&rwfop->crw_gfid,
 							   reqh);
 
-	/* Check the client version and server version before any processing */
-	if (m0_poolmach_version_before(cliv, &curr)) {
-		m0_fom_phase_move(fom,
-				  M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH,
-				  M0_FOPH_FAILURE);
-		M0_LOG(M0_DEBUG, "VERSION MISMATCH! poolmach = %p", poolmach);
-
-		m0_poolmach_version_dump(cliv);
-		m0_poolmach_version_dump(&curr);
-		m0_poolmach_event_list_dump(poolmach);
-		m0_poolmach_device_state_dump(poolmach);
-		return M0_FSO_AGAIN;
-	}
-
-	rc = m0_poolmach_device_state(poolmach, rwfop->crw_fid.f_container,
-				      &device_state);
-	if ((rc != 0) || (device_state != M0_PNDS_ONLINE &&
-			  device_state != M0_PNDS_SNS_REPAIRED &&
-			  device_state != M0_PNDS_SNS_REBALANCED)) {
-		m0_fom_phase_move(fom, -EIO,
-				  M0_FOPH_FAILURE);
-		M0_LOG(M0_ERROR, "%s IO @ %lu:%lu on failed device: state = %d",
-				 m0_is_read_fop(fom->fo_fop)? "Read": "Write",
-				 rwfop->crw_fid.f_container,
-				 rwfop->crw_fid.f_key,
-				 device_state);
-	}
+	rc = ios__poolmach_check(poolmach, cliv, &rwfop->crw_fid);
+	if (rc != 0)
+		m0_fom_phase_move(fom, rc, M0_FOPH_FAILURE);
 
 	return M0_FSO_AGAIN;
 }
diff --git a/ioservice/ut/cob_foms.c b/ioservice/ut/cob_foms.c
index a7988c9..f6c1df7 100644
--- a/ioservice/ut/cob_foms.c
+++ b/ioservice/ut/cob_foms.c
@@ -792,9 +792,9 @@ static void cc_fom_state_test(void)
 	rc = m0_db_tx_init(&dfom->fo_tx.tx_dbtx, dbenv, 0);
 	M0_UT_ASSERT(rc == 0);
 
-	rc = cob_ops_fom_tick(dfom);
+	rc = cob_ops_fom_tick(dfom); /* for M0_FOPH_COB_OPS_PREPARE */
 	M0_UT_ASSERT(rc == M0_FSO_AGAIN);
-	rc = cob_ops_fom_tick(dfom);
+	rc = cob_ops_fom_tick(dfom); /* for M0_FOPH_COB_OPS_CREATE_DELETE */
 	M0_UT_ASSERT(rc == M0_FSO_AGAIN);
 	M0_UT_ASSERT(m0_fom_phase(dfom) == M0_FOPH_SUCCESS);
 
-- 
1.8.3.2


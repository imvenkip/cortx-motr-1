From c78d271c83a92db90fa6cd329f7e9f264454110a Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Fri, 7 Jun 2013 14:03:00 +0800
Subject: [PATCH 03/12] cob create and cob delete now use the same tick
 function. st passed.

---
 ioservice/cob_foms.c    | 158 ++++++++++++++----------------------------------
 ioservice/cob_foms.h    |  23 ++-----
 ioservice/io_foms.c     |   3 +-
 ioservice/io_fops.c     |  14 ++---
 ioservice/ut/cob_foms.c |  28 ++++-----
 5 files changed, 72 insertions(+), 154 deletions(-)

diff --git a/ioservice/cob_foms.c b/ioservice/cob_foms.c
index 0876d89..e8d8bdf 100644
--- a/ioservice/cob_foms.c
+++ b/ioservice/cob_foms.c
@@ -43,13 +43,12 @@
 
 /* Forward Declarations. */
 static void cc_fom_fini(struct m0_fom *fom);
-static int  cc_fom_tick(struct m0_fom *fom);
+static int  cob_ops_fom_tick(struct m0_fom *fom);
 static void cc_fom_addb_init(struct m0_fom *fom, struct m0_addb_mc *mc);
 static int  cc_stob_create(struct m0_fom *fom, struct m0_fom_cob_op *cc);
 static int  cc_cob_create(struct m0_fom *fom, struct m0_fom_cob_op *cc);
 
 static void cd_fom_fini(struct m0_fom *fom);
-static int  cd_fom_tick(struct m0_fom *fom);
 static void cd_fom_addb_init(struct m0_fom *fom, struct m0_addb_mc *mc);
 static int  cd_cob_delete(struct m0_fom *fom, struct m0_fom_cob_op *cd);
 static int  cd_stob_delete(struct m0_fom *fom, struct m0_fom_cob_op *cd);
@@ -65,48 +64,29 @@ enum {
 	CD_FOM_STOBIO_LAST_REFS = 1,
 };
 
-struct m0_sm_state_descr cc_phases[] = {
-	[M0_FOPH_CC_PREPARE] = {
-		.sd_name      = "COB Create Prepare",
-		.sd_allowed   = M0_BITS(M0_FOPH_CC_COB_CREATE,
+struct m0_sm_state_descr cob_ops_phases[] = {
+	[M0_FOPH_COB_OPS_PREPARE] = {
+		.sd_name      = "COB Create/Delete Prepare",
+		.sd_allowed   = M0_BITS(M0_FOPH_COB_OPS_CREATE_DELETE,
 					M0_FOPH_FAILURE)
 	},
-	[M0_FOPH_CC_COB_CREATE] = {
-		.sd_name      = "COB Create",
+	[M0_FOPH_COB_OPS_CREATE_DELETE] = {
+		.sd_name      = "COB Create/Delete",
 		.sd_allowed   = M0_BITS(M0_FOPH_SUCCESS,
 					M0_FOPH_FAILURE)
 	}
 };
 
-struct m0_sm_conf cc_conf = {
+struct m0_sm_conf cob_ops_conf = {
 	.scf_name      = "COB create phases",
-	.scf_nr_states = ARRAY_SIZE(cc_phases),
-	.scf_state     = cc_phases
-};
-
-struct m0_sm_state_descr cd_phases[] = {
-	[M0_FOPH_CD_PREPARE] = {
-		.sd_name      = "COB Delete Prepare",
-		.sd_allowed   = M0_BITS(M0_FOPH_CD_COB_DEL,
-					M0_FOPH_FAILURE)
-	},
-	[M0_FOPH_CD_COB_DEL] = {
-		.sd_name      = "COB Delete",
-		.sd_allowed   = M0_BITS(M0_FOPH_SUCCESS,
-					M0_FOPH_FAILURE)
-	}
-};
-
-struct m0_sm_conf cd_conf = {
-	.scf_name      = "COB delete phases",
-	.scf_nr_states = ARRAY_SIZE(cd_phases),
-	.scf_state     = cd_phases
+	.scf_nr_states = ARRAY_SIZE(cob_ops_phases),
+	.scf_state     = cob_ops_phases
 };
 
 /** Cob create fom ops. */
 static const struct m0_fom_ops cc_fom_ops = {
 	.fo_fini	  = cc_fom_fini,
-	.fo_tick	  = cc_fom_tick,
+	.fo_tick	  = cob_ops_fom_tick,
 	.fo_home_locality = cob_fom_locality_get,
 	.fo_addb_init     = cc_fom_addb_init
 };
@@ -119,7 +99,7 @@ const struct m0_fom_type_ops cob_fom_type_ops = {
 /** Cob delete fom ops. */
 static const struct m0_fom_ops cd_fom_ops = {
 	.fo_fini	  = cd_fom_fini,
-	.fo_tick	  = cd_fom_tick,
+	.fo_tick	  = cob_ops_fom_tick,
 	.fo_home_locality = cob_fom_locality_get,
 	.fo_addb_init     = cd_fom_addb_init
 };
@@ -239,16 +219,18 @@ static void cob_fom_populate(struct m0_fom *fom)
 	cfom->fco_cob_idx = common->c_cob_idx;
 }
 
-static int cc_fom_tick(struct m0_fom *fom)
+static int cob_ops_fom_tick(struct m0_fom *fom)
 {
 	int                             rc;
-	struct m0_fom_cob_op           *cc;
+	struct m0_fom_cob_op           *cob_op;
 	struct m0_fop_cob_op_reply     *reply;
 	struct m0_poolmach             *poolmach;
 	struct m0_reqh                 *reqh;
 	struct m0_pool_version_numbers *cliv;
 	struct m0_pool_version_numbers  curr;
-	struct m0_fop_cob_create       *fop;
+	struct m0_fop_cob_common       *cc_common;
+	bool                            fop_is_create;
+	const char                     *ops;
 
 	M0_PRE(fom != NULL);
 	M0_PRE(fom->fo_ops != NULL);
@@ -259,11 +241,23 @@ static int cc_fom_tick(struct m0_fom *fom)
 		return rc;
 	}
 
-	fop  = m0_fop_data(fom->fo_fop);
+	fop_is_create = fom->fo_fop->f_type == &m0_fop_cob_create_fopt;
+	if (fop_is_create) {
+		struct m0_fop_cob_create *fop;
+		ops = "Create";
+		fop = m0_fop_data(fom->fo_fop);
+		cc_common = &fop->cc_common;
+	} else {
+		struct m0_fop_cob_delete *fop;
+		ops = "Delete";
+		fop = m0_fop_data(fom->fo_fop);
+		cc_common = &fop->cd_common;
+	}
+
 	reqh = m0_fom_reqh(fom);
 	poolmach = m0_ios_poolmach_get(reqh);
 	m0_poolmach_current_version_get(poolmach, &curr);
-	cliv = (struct m0_pool_version_numbers*)&fop->cc_common.c_version;
+	cliv = (struct m0_pool_version_numbers*)&cc_common->c_version;
 
 	/* Check the client version and server version before any processing */
 	if (m0_poolmach_version_before(cliv, &curr)) {
@@ -279,23 +273,28 @@ static int cc_fom_tick(struct m0_fom *fom)
 	}
 
 	switch (m0_fom_phase(fom)) {
-	case M0_FOPH_CC_PREPARE:
-        	M0_LOG(M0_FATAL, "Cob create operation prepare");
-//		m0_fom_phase_set(fom, M0_FOPH_CC_COB_CREATE);
+	case M0_FOPH_COB_OPS_PREPARE:
+		M0_LOG(M0_DEBUG, "Cob %s operation prepare", ops);
 		rc = M0_FSO_AGAIN;
-	case M0_FOPH_CC_COB_CREATE:
-        	M0_LOG(M0_DEBUG, "Cob create operation started");
-		cc = cob_fom_get(fom);
-		rc = cc_stob_create(fom, cc) ?: cc_cob_create(fom, cc);
+	case M0_FOPH_COB_OPS_CREATE_DELETE:
+		M0_LOG(M0_DEBUG, "Cob %s operation started", ops);
+		cob_op = cob_fom_get(fom);
+		if(fop_is_create) {
+			rc = cc_stob_create(fom, cob_op) ?:
+					cc_cob_create(fom, cob_op);
+		} else {
+			rc = cd_cob_delete(fom, cob_op) ?:
+					cd_stob_delete(fom, cob_op);
+		}
 		m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
 		reply = m0_fop_data(fom->fo_rep_fop);
 		reply->cor_rc = rc;
 
 		m0_ios_poolmach_version_updates_pack(poolmach,
-						     &fop->cc_common.c_version,
+						     &cc_common->c_version,
 						     &reply->cor_fv_version,
 						     &reply->cor_fv_updates);
-	        M0_LOG(M0_DEBUG, "Cob operation finished with %d", rc);
+	        M0_LOG(M0_DEBUG, "Cob %s operation finished with %d", ops, rc);
 		break;
 	default:
 		M0_IMPOSSIBLE("Invalid phase for cob create fom.");
@@ -456,73 +455,6 @@ static void cd_fom_fini(struct m0_fom *fom)
 	m0_free(cfom);
 }
 
-static int cd_fom_tick(struct m0_fom *fom)
-{
-	int                             rc;
-	struct m0_fom_cob_op           *cd;
-	struct m0_fop_cob_op_reply     *reply;
-	struct m0_poolmach             *poolmach;
-	struct m0_reqh                 *reqh;
-	struct m0_pool_version_numbers *cliv;
-	struct m0_pool_version_numbers  curr;
-	struct m0_fop_cob_delete       *fop;
-
-	M0_PRE(fom != NULL);
-	M0_PRE(fom->fo_ops != NULL);
-	M0_PRE(fom->fo_type != NULL);
-
-	if (m0_fom_phase(fom) < M0_FOPH_NR) {
-		rc = m0_fom_tick_generic(fom);
-		return rc;
-	}
-
-	fop  = m0_fop_data(fom->fo_fop);
-	reqh = m0_fom_reqh(fom);
-	poolmach = m0_ios_poolmach_get(reqh);
-	m0_poolmach_current_version_get(poolmach, &curr);
-	cliv = (struct m0_pool_version_numbers*)&fop->cd_common.c_version;
-
-	/* Check the client version and server version before any processing */
-	if (m0_poolmach_version_before(cliv, &curr)) {
-		m0_fom_phase_move(fom,
-				  M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH,
-				  M0_FOPH_FAILURE);
-		M0_LOG(M0_DEBUG, "VERSION MISMATCH!");
-		m0_poolmach_version_dump(cliv);
-		m0_poolmach_version_dump(&curr);
-		m0_poolmach_event_list_dump(poolmach);
-		m0_poolmach_device_state_dump(poolmach);
-		goto out;
-	}
-
-	switch (m0_fom_phase(fom)) {
-	case M0_FOPH_CD_PREPARE:
-        	M0_LOG(M0_FATAL, "Cob delete operation prepare");
-//		m0_fom_phase_set(fom, M0_FOPH_CD_COB_DEL);
-		rc = M0_FSO_AGAIN;
-	case M0_FOPH_CD_COB_DEL:
-        	M0_LOG(M0_DEBUG, "Cob delete operation started");
-		cd = cob_fom_get(fom);
-		rc = cd_cob_delete(fom, cd) ?: cd_stob_delete(fom, cd);
-		m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
-		reply = m0_fop_data(fom->fo_rep_fop);
-		reply->cor_rc = rc;
-
-		m0_ios_poolmach_version_updates_pack(poolmach,
-						     &fop->cd_common.c_version,
-						     &reply->cor_fv_version,
-						     &reply->cor_fv_updates);
-	        M0_LOG(M0_DEBUG, "Cob operation finished with %d", rc);
-		break;
-	default:
-		M0_IMPOSSIBLE("Invalid phase for cob delete fom.");
-		rc = -EINVAL;
-		m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
-	}
-
-out:
-	return M0_FSO_AGAIN;
-}
 
 static void cd_fom_addb_init(struct m0_fom *fom, struct m0_addb_mc *mc)
 {
diff --git a/ioservice/cob_foms.h b/ioservice/cob_foms.h
index 73f44d0..0e2e564 100644
--- a/ioservice/cob_foms.h
+++ b/ioservice/cob_foms.h
@@ -24,15 +24,15 @@
 #define __MERO_IOSERVICE_COB_FOMS_H__
 
 /**
- * Phases of m0_fom_cob_create state machine.
+ * Phases of cob create/delete state machine.
  */
-enum m0_fom_cob_create_phases {
-	M0_FOPH_CC_PREPARE = M0_FOPH_NR + 1,
+enum m0_fom_cob_operations_phases {
+	M0_FOPH_COB_OPS_PREPARE = M0_FOPH_NR + 1,
 	/**
-	 * Internally creates a stob, a cob and adds a record to
-	 * auxiliary database.
+	 * Internally creates/delete a stob, a cob and adds/removes a record to
+	 * or from auxiliary database.
 	 */
-	M0_FOPH_CC_COB_CREATE
+	M0_FOPH_COB_OPS_CREATE_DELETE
 };
 
 /**
@@ -54,17 +54,6 @@ struct m0_fom_cob_op {
 	struct m0_fol_rec_part   fco_fol_rec_part;
 };
 
-/**
- * Phases of m0_fom_cob_delete state machine.
- */
-enum m0_fom_cob_delete_phases {
-	M0_FOPH_CD_PREPARE = M0_FOPH_NR + 1,
-	/**
-	 * Internally deletes the cob, stob and removes the corresponding
-	 * record from auxiliary database.
-	 */
-	M0_FOPH_CD_COB_DEL,
-};
 
 M0_INTERNAL int m0_cob_fom_create(struct m0_fop *fop, struct m0_fom **out,
 				  struct m0_reqh *reqh);
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index dc39106..a72fda0 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -1056,7 +1056,8 @@ static int m0_io_fom_cob_rw_create(struct m0_fop *fop, struct m0_fom **out,
 
 static int io_prepare(struct m0_fom *fom)
 {
-	M0_LOG(M0_FATAL, "Preparing IO");
+	M0_LOG(M0_DEBUG, "Preparing %s IO",
+			 m0_is_read_fop(fom->fo_fop)? "Read": "Write");
 
         return M0_FSO_AGAIN;
 }
diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index 04a4191..e9dac0b 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -201,10 +201,8 @@ extern const struct m0_fom_type_ops io_fom_type_ops;
 
 extern struct m0_sm_conf io_conf;
 extern struct m0_sm_state_descr io_phases[];
-extern struct m0_sm_conf cc_conf;
-extern struct m0_sm_state_descr cc_phases[];
-extern struct m0_sm_conf cd_conf;
-extern struct m0_sm_state_descr cd_phases[];
+extern struct m0_sm_conf cob_ops_conf;
+extern struct m0_sm_state_descr cob_ops_phases[];
 
 M0_INTERNAL int m0_ioservice_fop_init(void)
 {
@@ -218,9 +216,7 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 #ifndef __KERNEL__
 	m0_sm_conf_extend(m0_generic_conf.scf_state, io_phases,
 			  m0_generic_conf.scf_nr_states);
-	m0_sm_conf_extend(m0_generic_conf.scf_state, cc_phases,
-			  m0_generic_conf.scf_nr_states);
-	m0_sm_conf_extend(m0_generic_conf.scf_state, cd_phases,
+	m0_sm_conf_extend(m0_generic_conf.scf_state, cob_ops_phases,
 			  m0_generic_conf.scf_nr_states);
 #endif
 	return  M0_FOP_TYPE_INIT(&m0_fop_cob_readv_fopt,
@@ -266,7 +262,7 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 				 .fop_ops   = &io_fop_cd_ops,
 #ifndef __KERNEL__
 				 .fom_ops   = &cob_fom_type_ops,
-				 .sm        = &cc_conf,
+				 .sm        = &cob_ops_conf,
 				 .svc_type  = &m0_ios_type,
 #endif
 				 .sm        = &m0_generic_conf) ?:
@@ -278,7 +274,7 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 				 .fop_ops   = &io_fop_cd_ops,
 #ifndef __KERNEL__
 				 .fom_ops   = &cob_fom_type_ops,
-				 .sm        = &cd_conf,
+				 .sm        = &cob_ops_conf,
 				 .svc_type  = &m0_ios_type,
 #endif
 				 .sm        = &m0_generic_conf) ?:
diff --git a/ioservice/ut/cob_foms.c b/ioservice/ut/cob_foms.c
index 499d18b..df64b63 100644
--- a/ioservice/ut/cob_foms.c
+++ b/ioservice/ut/cob_foms.c
@@ -575,7 +575,7 @@ static struct m0_fom *cc_fom_alloc()
 	fop_alloc(fom, COB_CREATE);
 	M0_UT_ASSERT(fom->fo_fop != NULL);
 	cob_fom_populate(fom);
-	m0_fom_phase_set(fom, M0_FOPH_CC_COB_CREATE);
+	m0_fom_phase_set(fom, M0_FOPH_COB_OPS_CREATE_DELETE);
 	return fom;
 }
 
@@ -618,7 +618,7 @@ static void cc_stob_create_test()
 	cc = cob_fom_get(fom);
 
 	rc = cc_stob_create(fom, cc);
-	M0_UT_ASSERT(m0_fom_phase(fom) == M0_FOPH_CC_COB_CREATE);
+	M0_UT_ASSERT(m0_fom_phase(fom) == M0_FOPH_COB_OPS_CREATE_DELETE);
 
 	M0_UT_ASSERT(rc == 0);
 	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_hi == COB_TEST_ID);
@@ -701,7 +701,7 @@ static void cc_cob_create_test()
 	rc = cc_cob_create(fom, cc);
 	m0_db_tx_commit(&fom->fo_tx.tx_dbtx);
 
-	M0_UT_ASSERT(m0_fom_phase(fom) == M0_FOPH_CC_COB_CREATE);
+	M0_UT_ASSERT(m0_fom_phase(fom) == M0_FOPH_COB_OPS_CREATE_DELETE);
 	M0_UT_ASSERT(rc == 0);
 
 	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_hi == COB_TEST_ID);
@@ -739,7 +739,7 @@ static void cc_cob_create_test()
 }
 
 /*
- * Test function for cc_fom_tick().
+ * Test function for create.
  */
 static void cc_fom_state_test(void)
 {
@@ -755,7 +755,7 @@ static void cc_fom_state_test(void)
 	dbenv = m0_fom_reqh(cfom)->rh_dbenv;
 	rc = m0_db_tx_init(&cfom->fo_tx.tx_dbtx, dbenv, 0);
 	M0_UT_ASSERT(rc == 0);
-	rc = cc_fom_tick(cfom);
+	rc = cob_ops_fom_tick(cfom);
 	m0_db_tx_commit(&cfom->fo_tx.tx_dbtx);
 
 	M0_UT_ASSERT(rc == M0_FSO_AGAIN);
@@ -779,7 +779,7 @@ static void cc_fom_state_test(void)
 	rc = m0_db_tx_init(&dfom->fo_tx.tx_dbtx, dbenv, 0);
 	M0_UT_ASSERT(rc == 0);
 
-	rc = cd_fom_tick(dfom);
+	rc = cob_ops_fom_tick(dfom);
 	M0_UT_ASSERT(rc == M0_FSO_AGAIN);
 	M0_UT_ASSERT(m0_fom_phase(dfom) == M0_FOPH_SUCCESS);
 
@@ -835,7 +835,7 @@ static struct m0_fom *cd_fom_alloc()
 	fop_alloc(fom, COB_DELETE);
 	M0_UT_ASSERT(fom->fo_fop != NULL);
 	cob_fom_populate(fom);
-	m0_fom_phase_set(fom, M0_FOPH_CD_COB_DEL);
+	m0_fom_phase_set(fom, M0_FOPH_COB_OPS_CREATE_DELETE);
 
 	return fom;
 }
@@ -903,7 +903,7 @@ static struct m0_fom *cob_testdata_create()
 	rc = m0_db_tx_init(&fom->fo_tx.tx_dbtx, dbenv, 0);
 	M0_UT_ASSERT(rc == 0);
 
-	rc = cc_fom_tick(fom);
+	rc = cob_ops_fom_tick(fom);
 	m0_db_tx_commit(&fom->fo_tx.tx_dbtx);
 
 	M0_UT_ASSERT(rc == M0_FSO_AGAIN);
@@ -943,7 +943,7 @@ static void cd_stob_delete_test()
 
 	cd = cob_fom_get(dfom);
 	rc = cd_stob_delete(dfom, cd);
-	M0_UT_ASSERT(m0_fom_phase(dfom) == M0_FOPH_CD_COB_DEL);
+	M0_UT_ASSERT(m0_fom_phase(dfom) == M0_FOPH_COB_OPS_CREATE_DELETE);
 	M0_ASSERT(rc == 0);
 
 	cd_fom_dealloc(dfom);
@@ -978,7 +978,7 @@ static void cd_cob_delete_test()
 	rc = cd_cob_delete(dfom, cd);
 	m0_db_tx_commit(&dfom->fo_tx.tx_dbtx);
 
-	M0_UT_ASSERT(m0_fom_phase(dfom) == M0_FOPH_CD_COB_DEL);
+	M0_UT_ASSERT(m0_fom_phase(dfom) == M0_FOPH_COB_OPS_CREATE_DELETE);
 	M0_UT_ASSERT(rc == 0);
 
 	/*
@@ -1010,7 +1010,7 @@ static void cd_cob_delete_test()
 }
 
 /*
- * Test function for cd_fom_tick()
+ * Test function for cob_ops_fom_tick()
  */
 static void cd_fom_state_test(void)
 {
@@ -1029,7 +1029,7 @@ static void cd_fom_state_test(void)
 	rc = m0_db_tx_init(&dfom->fo_tx.tx_dbtx, dbenv, 0);
 	M0_UT_ASSERT(rc == 0);
 
-	rc = cd_fom_tick(dfom);
+	rc = cob_ops_fom_tick(dfom);
 	m0_db_tx_commit(&dfom->fo_tx.tx_dbtx);
 
 	M0_UT_ASSERT(m0_fom_phase(dfom) == M0_FOPH_SUCCESS);
@@ -1075,7 +1075,7 @@ static void cob_create_api_test(void)
 	/* Test cc_cob_create() */
 	cc_cob_create_test();
 
-	/* Test for cc_fom_tick() */
+	/* Test for cob_ops_fom_tick() */
 	cc_fom_state_test();
 
 	m0_sm_group_unlock(&dummy_loc.fl_group);
@@ -1103,7 +1103,7 @@ static void cob_delete_api_test(void)
 	/* Test cd_cob_delete() */
 	cd_cob_delete_test();
 
-	/* Test for cd_fom_tick() */
+	/* Test for cob_ops_fom_tick() */
 	cd_fom_state_test();
 
 	m0_sm_group_unlock(&dummy_loc.fl_group);
-- 
1.8.3.2


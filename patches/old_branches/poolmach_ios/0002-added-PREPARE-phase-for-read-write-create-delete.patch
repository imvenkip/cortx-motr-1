From 38701725d9cc072edeffbfb4f0fafec6d1146ddb Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Fri, 7 Jun 2013 12:29:45 +0800
Subject: [PATCH 02/12] added PREPARE phase for read/write/create/delete.
 re-organise cob create/delete tick function.

---
 ioservice/cob_foms.c | 114 +++++++++++++++++++++++++++++++++++++--------------
 ioservice/cob_foms.h |   6 ++-
 ioservice/io_foms.c  |  18 ++++++++
 ioservice/io_foms.h  |   3 +-
 ioservice/io_fops.c  |  10 +++++
 5 files changed, 118 insertions(+), 33 deletions(-)

diff --git a/ioservice/cob_foms.c b/ioservice/cob_foms.c
index e3b42d6..0876d89 100644
--- a/ioservice/cob_foms.c
+++ b/ioservice/cob_foms.c
@@ -65,6 +65,44 @@ enum {
 	CD_FOM_STOBIO_LAST_REFS = 1,
 };
 
+struct m0_sm_state_descr cc_phases[] = {
+	[M0_FOPH_CC_PREPARE] = {
+		.sd_name      = "COB Create Prepare",
+		.sd_allowed   = M0_BITS(M0_FOPH_CC_COB_CREATE,
+					M0_FOPH_FAILURE)
+	},
+	[M0_FOPH_CC_COB_CREATE] = {
+		.sd_name      = "COB Create",
+		.sd_allowed   = M0_BITS(M0_FOPH_SUCCESS,
+					M0_FOPH_FAILURE)
+	}
+};
+
+struct m0_sm_conf cc_conf = {
+	.scf_name      = "COB create phases",
+	.scf_nr_states = ARRAY_SIZE(cc_phases),
+	.scf_state     = cc_phases
+};
+
+struct m0_sm_state_descr cd_phases[] = {
+	[M0_FOPH_CD_PREPARE] = {
+		.sd_name      = "COB Delete Prepare",
+		.sd_allowed   = M0_BITS(M0_FOPH_CD_COB_DEL,
+					M0_FOPH_FAILURE)
+	},
+	[M0_FOPH_CD_COB_DEL] = {
+		.sd_name      = "COB Delete",
+		.sd_allowed   = M0_BITS(M0_FOPH_SUCCESS,
+					M0_FOPH_FAILURE)
+	}
+};
+
+struct m0_sm_conf cd_conf = {
+	.scf_name      = "COB delete phases",
+	.scf_nr_states = ARRAY_SIZE(cd_phases),
+	.scf_state     = cd_phases
+};
+
 /** Cob create fom ops. */
 static const struct m0_fom_ops cc_fom_ops = {
 	.fo_fini	  = cc_fom_fini,
@@ -229,7 +267,9 @@ static int cc_fom_tick(struct m0_fom *fom)
 
 	/* Check the client version and server version before any processing */
 	if (m0_poolmach_version_before(cliv, &curr)) {
-		rc = M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH;
+		m0_fom_phase_move(fom,
+				  M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH,
+				  M0_FOPH_FAILURE);
 		M0_LOG(M0_DEBUG, "VERSION MISMATCH!");
 		m0_poolmach_version_dump(cliv);
 		m0_poolmach_version_dump(&curr);
@@ -238,27 +278,32 @@ static int cc_fom_tick(struct m0_fom *fom)
 		goto out;
 	}
 
-        M0_LOG(M0_DEBUG, "Cob operation started");
-	if (m0_fom_phase(fom) == M0_FOPH_CC_COB_CREATE) {
+	switch (m0_fom_phase(fom)) {
+	case M0_FOPH_CC_PREPARE:
+        	M0_LOG(M0_FATAL, "Cob create operation prepare");
+//		m0_fom_phase_set(fom, M0_FOPH_CC_COB_CREATE);
+		rc = M0_FSO_AGAIN;
+	case M0_FOPH_CC_COB_CREATE:
+        	M0_LOG(M0_DEBUG, "Cob create operation started");
 		cc = cob_fom_get(fom);
-
 		rc = cc_stob_create(fom, cc) ?: cc_cob_create(fom, cc);
-	} else {
-		rc = -EINVAL;
+		m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
+		reply = m0_fop_data(fom->fo_rep_fop);
+		reply->cor_rc = rc;
+
+		m0_ios_poolmach_version_updates_pack(poolmach,
+						     &fop->cc_common.c_version,
+						     &reply->cor_fv_version,
+						     &reply->cor_fv_updates);
+	        M0_LOG(M0_DEBUG, "Cob operation finished with %d", rc);
+		break;
+	default:
 		M0_IMPOSSIBLE("Invalid phase for cob create fom.");
+		rc = -EINVAL;
+		m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
 	}
 
 out:
-        M0_LOG(M0_DEBUG, "Cob operation finished with %d", rc);
-	reply = m0_fop_data(fom->fo_rep_fop);
-	reply->cor_rc = rc;
-
-	m0_ios_poolmach_version_updates_pack(poolmach,
-					     &fop->cc_common.c_version,
-					     &reply->cor_fv_version,
-					     &reply->cor_fv_updates);
-
-	m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
 	return M0_FSO_AGAIN;
 }
 
@@ -439,7 +484,9 @@ static int cd_fom_tick(struct m0_fom *fom)
 
 	/* Check the client version and server version before any processing */
 	if (m0_poolmach_version_before(cliv, &curr)) {
-		rc = M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH;
+		m0_fom_phase_move(fom,
+				  M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH,
+				  M0_FOPH_FAILURE);
 		M0_LOG(M0_DEBUG, "VERSION MISMATCH!");
 		m0_poolmach_version_dump(cliv);
 		m0_poolmach_version_dump(&curr);
@@ -448,25 +495,32 @@ static int cd_fom_tick(struct m0_fom *fom)
 		goto out;
 	}
 
-	if (m0_fom_phase(fom) == M0_FOPH_CD_COB_DEL) {
+	switch (m0_fom_phase(fom)) {
+	case M0_FOPH_CD_PREPARE:
+        	M0_LOG(M0_FATAL, "Cob delete operation prepare");
+//		m0_fom_phase_set(fom, M0_FOPH_CD_COB_DEL);
+		rc = M0_FSO_AGAIN;
+	case M0_FOPH_CD_COB_DEL:
+        	M0_LOG(M0_DEBUG, "Cob delete operation started");
 		cd = cob_fom_get(fom);
-
 		rc = cd_cob_delete(fom, cd) ?: cd_stob_delete(fom, cd);
-	} else {
-		rc = -EINVAL;
+		m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
+		reply = m0_fop_data(fom->fo_rep_fop);
+		reply->cor_rc = rc;
+
+		m0_ios_poolmach_version_updates_pack(poolmach,
+						     &fop->cd_common.c_version,
+						     &reply->cor_fv_version,
+						     &reply->cor_fv_updates);
+	        M0_LOG(M0_DEBUG, "Cob operation finished with %d", rc);
+		break;
+	default:
 		M0_IMPOSSIBLE("Invalid phase for cob delete fom.");
+		rc = -EINVAL;
+		m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
 	}
 
 out:
-	reply = m0_fop_data(fom->fo_rep_fop);
-	reply->cor_rc = rc;
-
-	m0_ios_poolmach_version_updates_pack(poolmach,
-					     &fop->cd_common.c_version,
-					     &reply->cor_fv_version,
-					     &reply->cor_fv_updates);
-
-	m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
 	return M0_FSO_AGAIN;
 }
 
diff --git a/ioservice/cob_foms.h b/ioservice/cob_foms.h
index d0b36e0..73f44d0 100644
--- a/ioservice/cob_foms.h
+++ b/ioservice/cob_foms.h
@@ -27,11 +27,12 @@
  * Phases of m0_fom_cob_create state machine.
  */
 enum m0_fom_cob_create_phases {
+	M0_FOPH_CC_PREPARE = M0_FOPH_NR + 1,
 	/**
 	 * Internally creates a stob, a cob and adds a record to
 	 * auxiliary database.
 	 */
-	M0_FOPH_CC_COB_CREATE = M0_FOPH_NR + 1,
+	M0_FOPH_CC_COB_CREATE
 };
 
 /**
@@ -57,11 +58,12 @@ struct m0_fom_cob_op {
  * Phases of m0_fom_cob_delete state machine.
  */
 enum m0_fom_cob_delete_phases {
+	M0_FOPH_CD_PREPARE = M0_FOPH_NR + 1,
 	/**
 	 * Internally deletes the cob, stob and removes the corresponding
 	 * record from auxiliary database.
 	 */
-	M0_FOPH_CD_COB_DEL = M0_FOPH_NR + 1,
+	M0_FOPH_CD_COB_DEL,
 };
 
 M0_INTERNAL int m0_cob_fom_create(struct m0_fop *fop, struct m0_fom **out,
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index e1320b8..dc39106 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -595,6 +595,7 @@ M0_INTERNAL const char *m0_io_fom_cob_rw_service_name(struct m0_fom *fom);
 static bool m0_io_fom_cob_rw_invariant(const struct m0_io_fom_cob_rw *io);
 
 static int net_buffer_acquire(struct m0_fom *);
+static int io_prepare(struct m0_fom *);
 static int io_launch(struct m0_fom *);
 static int io_finish(struct m0_fom *);
 static int zero_copy_initiate(struct m0_fom *);
@@ -625,6 +626,9 @@ const struct m0_fom_type_ops io_fom_type_ops = {
  * @see DLD-bulk-server-lspec-state
  */
 static struct m0_io_fom_cob_rw_state_transition io_fom_read_st[] = {
+[M0_FOPH_IO_FOM_PREPARE] =
+{ M0_FOPH_IO_FOM_PREPARE, &io_prepare,
+  M0_FOPH_IO_FOM_BUFFER_ACQUIRE, 0, "io preparation", },
 
 [M0_FOPH_IO_FOM_BUFFER_ACQUIRE] =
 { M0_FOPH_IO_FOM_BUFFER_ACQUIRE, &net_buffer_acquire,
@@ -660,6 +664,9 @@ static struct m0_io_fom_cob_rw_state_transition io_fom_read_st[] = {
  * @see DLD-bulk-server-lspec-state
  */
 static const struct m0_io_fom_cob_rw_state_transition io_fom_write_st[] = {
+[M0_FOPH_IO_FOM_PREPARE] =
+{ M0_FOPH_IO_FOM_PREPARE, &io_prepare,
+  M0_FOPH_IO_FOM_BUFFER_ACQUIRE, 0, "io preparation", },
 
 [M0_FOPH_IO_FOM_BUFFER_ACQUIRE] =
 { M0_FOPH_IO_FOM_BUFFER_ACQUIRE, &net_buffer_acquire,
@@ -693,6 +700,11 @@ static const struct m0_io_fom_cob_rw_state_transition io_fom_write_st[] = {
 };
 
 struct m0_sm_state_descr io_phases[] = {
+	[M0_FOPH_IO_FOM_PREPARE] = {
+		.sd_name      = "IO Prepare",
+		.sd_allowed   = M0_BITS(M0_FOPH_IO_FOM_BUFFER_ACQUIRE,
+					M0_FOPH_FAILURE)
+	},
 	[M0_FOPH_IO_FOM_BUFFER_ACQUIRE] = {
 		.sd_name      = "Network buffer acquire",
 		.sd_allowed   = M0_BITS(M0_FOPH_IO_STOB_INIT,
@@ -1042,6 +1054,12 @@ static int m0_io_fom_cob_rw_create(struct m0_fop *fop, struct m0_fom **out,
         return rc;
 }
 
+static int io_prepare(struct m0_fom *fom)
+{
+	M0_LOG(M0_FATAL, "Preparing IO");
+
+        return M0_FSO_AGAIN;
+}
 /**
  * Acquire network buffers.
  * Gets as many network buffer as it can to process io request.
diff --git a/ioservice/io_foms.h b/ioservice/io_foms.h
index 873ca6f..f43be5b 100644
--- a/ioservice/io_foms.h
+++ b/ioservice/io_foms.h
@@ -215,7 +215,8 @@ struct m0_io_fom_cob_rw {
  * complete FOM and reqh infrastructure is in place.
  */
 enum m0_io_fom_cob_rw_phases {
-        M0_FOPH_IO_FOM_BUFFER_ACQUIRE = M0_FOPH_NR + 1,
+        M0_FOPH_IO_FOM_PREPARE = M0_FOPH_NR + 1,
+        M0_FOPH_IO_FOM_BUFFER_ACQUIRE,
         M0_FOPH_IO_FOM_BUFFER_WAIT,
         M0_FOPH_IO_STOB_INIT,
         M0_FOPH_IO_STOB_WAIT,
diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index eef00a2..04a4191 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -201,6 +201,10 @@ extern const struct m0_fom_type_ops io_fom_type_ops;
 
 extern struct m0_sm_conf io_conf;
 extern struct m0_sm_state_descr io_phases[];
+extern struct m0_sm_conf cc_conf;
+extern struct m0_sm_state_descr cc_phases[];
+extern struct m0_sm_conf cd_conf;
+extern struct m0_sm_state_descr cd_phases[];
 
 M0_INTERNAL int m0_ioservice_fop_init(void)
 {
@@ -214,6 +218,10 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 #ifndef __KERNEL__
 	m0_sm_conf_extend(m0_generic_conf.scf_state, io_phases,
 			  m0_generic_conf.scf_nr_states);
+	m0_sm_conf_extend(m0_generic_conf.scf_state, cc_phases,
+			  m0_generic_conf.scf_nr_states);
+	m0_sm_conf_extend(m0_generic_conf.scf_state, cd_phases,
+			  m0_generic_conf.scf_nr_states);
 #endif
 	return  M0_FOP_TYPE_INIT(&m0_fop_cob_readv_fopt,
 				 .name      = "Read request",
@@ -258,6 +266,7 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 				 .fop_ops   = &io_fop_cd_ops,
 #ifndef __KERNEL__
 				 .fom_ops   = &cob_fom_type_ops,
+				 .sm        = &cc_conf,
 				 .svc_type  = &m0_ios_type,
 #endif
 				 .sm        = &m0_generic_conf) ?:
@@ -269,6 +278,7 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 				 .fop_ops   = &io_fop_cd_ops,
 #ifndef __KERNEL__
 				 .fom_ops   = &cob_fom_type_ops,
+				 .sm        = &cd_conf,
 				 .svc_type  = &m0_ios_type,
 #endif
 				 .sm        = &m0_generic_conf) ?:
-- 
1.8.3.2


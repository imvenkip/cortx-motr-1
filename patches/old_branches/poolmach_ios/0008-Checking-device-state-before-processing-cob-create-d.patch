From 5199197c515fd169ba100fd0cae631c4aa8ad6d1 Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Thu, 13 Jun 2013 18:53:31 +0800
Subject: [PATCH 08/12] Checking device state before processing cob
 create/delete request. Pass valid fid to cob create/delete operation in UT.

---
 ioservice/cob_foms.c    | 26 ++++++++++++++++++++++---
 ioservice/ut/cob_foms.c | 51 ++++++++++++++++++++++++++-----------------------
 2 files changed, 50 insertions(+), 27 deletions(-)

diff --git a/ioservice/cob_foms.c b/ioservice/cob_foms.c
index 84d46e8..65bbc93 100644
--- a/ioservice/cob_foms.c
+++ b/ioservice/cob_foms.c
@@ -227,6 +227,7 @@ static int cob_ops_fom_tick(struct m0_fom *fom)
 	struct m0_fop_cob_common       *common;
 	bool                            fop_is_create;
 	const char                     *ops;
+	enum m0_pool_nd_state           device_state = 0;
 
 	M0_PRE(fom != NULL);
 	M0_PRE(fom->fo_ops != NULL);
@@ -255,12 +256,14 @@ static int cob_ops_fom_tick(struct m0_fom *fom)
 		cliv = (struct m0_pool_version_numbers*)&common->c_version;
 		m0_poolmach_current_version_get(poolmach, &curr);
 
-		/* Check the client version and server version before any processing */
+		/* Check the client version and server version before any
+		 * processing
+		 */
 		if (m0_poolmach_version_before(cliv, &curr)) {
 			rc = M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH;
 			m0_fom_phase_move(fom,
-					  M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH,
-					  M0_FOPH_FAILURE);
+				  M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH,
+				  M0_FOPH_FAILURE);
 			M0_LOG(M0_DEBUG, "VERSION MISMATCH!");
 			m0_poolmach_version_dump(cliv);
 			m0_poolmach_version_dump(&curr);
@@ -269,6 +272,23 @@ static int cob_ops_fom_tick(struct m0_fom *fom)
 			goto pack;
 		}
 
+		rc = m0_poolmach_device_state(poolmach,
+					      common->c_cobfid.f_container,
+					      &device_state);
+		if ((rc != 0) || (device_state != M0_PNDS_ONLINE &&
+				  device_state != M0_PNDS_SNS_REPAIRED &&
+				  device_state != M0_PNDS_SNS_REBALANCED)) {
+			m0_fom_phase_move(fom, -EIO,
+					  M0_FOPH_FAILURE);
+			M0_LOG(M0_ERROR, "%s cob %lu:%lu on failed device: "
+					 "state = %d rc=%d",
+					 fop_is_create? "Create": "Delete",
+					 common->c_cobfid.f_container,
+					 common->c_cobfid.f_key,
+					 device_state, rc);
+			goto pack;
+		}
+
 		m0_fom_phase_set(fom, M0_FOPH_COB_OPS_CREATE_DELETE);
 		goto out;
 	}
diff --git a/ioservice/ut/cob_foms.c b/ioservice/ut/cob_foms.c
index 2329237..a7988c9 100644
--- a/ioservice/ut/cob_foms.c
+++ b/ioservice/ut/cob_foms.c
@@ -62,7 +62,9 @@ enum {
 	GOB_FID_KEY_ID            = 5678,
 	COB_FOP_SINGLE            = 1,
 	COB_FOP_NR                = 10,
-	COB_TEST_ID               = 111,
+	POOL_WIDTH                = 10,
+	COB_TEST_KEY              = 111,
+	COB_TEST_CONTAINER        = 1 + COB_TEST_KEY % POOL_WIDTH,
 };
 
 #define SERVER_EP_ADDR              "0@lo:12345:34:123"
@@ -95,10 +97,11 @@ struct cobthread_arg {
 	int                 ca_rc;
 };
 
+
 static char *server_args[] = {
 	"m0d", "-r", "-p", "-T", "Linux", "-D", "cobfoms_ut.db", "-S",
 	"cobfoms_ut_stob", "-A", "cobfoms_ut_addb_stob", "-e", SERVER_ENDP,
-	"-s", "ioservice", "-w", "10"
+	"-s", "ioservice", "-w", "10"/* =POOL_WIDTH */,
 };
 
 static void cobfoms_utinit(void)
@@ -169,7 +172,7 @@ static void cobfoms_utfini(void)
 	cut = NULL;
 }
 
-static void cobfops_populate_internal(struct m0_fop *fop, uint64_t index)
+static void cobfops_populate_internal(struct m0_fop *fop, uint64_t gob_fid_key)
 {
 	struct m0_fop_cob_common *common;
 
@@ -177,10 +180,10 @@ static void cobfops_populate_internal(struct m0_fop *fop, uint64_t index)
 	M0_UT_ASSERT(fop->f_type != NULL);
 
 	common = m0_cobfop_common_get(fop);
-	m0_fid_set(&common->c_gobfid, GOB_FID_CONTAINER_ID + index,
-		   GOB_FID_KEY_ID + index);
-	m0_fid_set(&common->c_cobfid, GOB_FID_CONTAINER_ID + index,
-		   GOB_FID_KEY_ID + index);
+	m0_fid_set(&common->c_gobfid, 0,
+		   GOB_FID_KEY_ID + gob_fid_key);
+	m0_fid_set(&common->c_cobfid, 1 + gob_fid_key % POOL_WIDTH,
+		   GOB_FID_KEY_ID + gob_fid_key);
 }
 
 static void cobfops_populate(uint64_t index)
@@ -489,9 +492,9 @@ static void fop_alloc(struct m0_fom *fom, enum cob_fom_type fomtype)
 		break;
 	}
 	c = m0_cobfop_common_get(base_fop);
-	m0_fid_set(&c->c_gobfid, COB_TEST_ID, COB_TEST_ID);
-	m0_fid_set(&c->c_cobfid, COB_TEST_ID, COB_TEST_ID);
-	c->c_cob_idx = COB_TEST_ID;
+	m0_fid_set(&c->c_gobfid, 0, COB_TEST_KEY);
+	m0_fid_set(&c->c_cobfid, COB_TEST_CONTAINER, COB_TEST_KEY);
+	c->c_cob_idx = COB_TEST_CONTAINER;
 	fom->fo_fop = base_fop;
 	fom->fo_type = &base_fop->f_type->ft_fom_type;
 
@@ -623,8 +626,8 @@ static void cc_stob_create_test()
 	M0_UT_ASSERT(m0_fom_phase(fom) == M0_FOPH_COB_OPS_PREPARE);
 
 	M0_UT_ASSERT(rc == 0);
-	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_hi == COB_TEST_ID);
-	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_lo == COB_TEST_ID);
+	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_hi == COB_TEST_CONTAINER);
+	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_lo == COB_TEST_KEY);
 
 	m0_fom_phase_set(fom, M0_FOPH_COB_OPS_CREATE_DELETE);
 	m0_fom_phase_set(fom, M0_FOPH_SUCCESS);
@@ -642,10 +645,10 @@ static void cob_verify(struct m0_fom *fom, const bool exists)
 	struct m0_cob_domain *cobdom;
 	struct m0_cob_nskey  *nskey;
 	struct m0_dbenv	     *dbenv;
-	struct m0_fid         fid = {COB_TEST_ID, COB_TEST_ID};
+	struct m0_fid         fid = {0, COB_TEST_KEY};
         char                  nskey_bs[UINT32_MAX_STR_LEN];
         uint32_t              nskey_bs_len;
-	uint32_t              cob_idx = COB_TEST_ID;
+	uint32_t              cob_idx = COB_TEST_CONTAINER;
 
 	rc = m0_ios_cdom_get(m0_fom_reqh(fom), &cobdom);
 	M0_UT_ASSERT(rc == 0);
@@ -709,8 +712,8 @@ static void cc_cob_create_test()
 	M0_UT_ASSERT(m0_fom_phase(fom) == M0_FOPH_COB_OPS_PREPARE);
 	M0_UT_ASSERT(rc == 0);
 
-	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_hi == COB_TEST_ID);
-	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_lo == COB_TEST_ID);
+	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_hi == COB_TEST_CONTAINER);
+	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_lo == COB_TEST_KEY);
 
 	/*
 	 * Test-case 1 - Verify COB creation
@@ -772,8 +775,8 @@ static void cc_fom_state_test(void)
 	M0_UT_ASSERT(m0_fom_phase(cfom) == M0_FOPH_SUCCESS);
 
 	cc = cob_fom_get(cfom);
-	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_hi == COB_TEST_ID);
-	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_lo == COB_TEST_ID);
+	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_hi == COB_TEST_CONTAINER);
+	M0_UT_ASSERT(cc->fco_stobid.si_bits.u_lo == COB_TEST_KEY);
 
 	rc = m0_db_tx_init(&cfom->fo_tx.tx_dbtx, dbenv, 0);
 	M0_UT_ASSERT(rc == 0);
@@ -813,8 +816,8 @@ static void cc_fom_populate_test()
 	M0_UT_ASSERT(fom != NULL);
 
 	cc = cob_fom_get(fom);
-	M0_UT_ASSERT(cc->fco_cfid.f_container == COB_TEST_ID);
-	M0_UT_ASSERT(cc->fco_cfid.f_key == COB_TEST_ID);
+	M0_UT_ASSERT(cc->fco_cfid.f_container == COB_TEST_CONTAINER);
+	M0_UT_ASSERT(cc->fco_cfid.f_key == COB_TEST_KEY);
 	m0_fom_phase_set(fom, M0_FOPH_COB_OPS_CREATE_DELETE);
 	m0_fom_phase_set(fom, M0_FOPH_SUCCESS);
 	cc_fom_dealloc(fom);
@@ -890,10 +893,10 @@ static void cd_fom_populate_test()
 	M0_UT_ASSERT(fom != NULL);
 
 	cd = cob_fom_get(fom);
-	M0_UT_ASSERT(cd->fco_cfid.f_container == COB_TEST_ID);
-	M0_UT_ASSERT(cd->fco_cfid.f_key == COB_TEST_ID);
-	M0_UT_ASSERT(cd->fco_stobid.si_bits.u_hi == COB_TEST_ID);
-	M0_UT_ASSERT(cd->fco_stobid.si_bits.u_lo == COB_TEST_ID);
+	M0_UT_ASSERT(cd->fco_cfid.f_container == COB_TEST_CONTAINER);
+	M0_UT_ASSERT(cd->fco_cfid.f_key == COB_TEST_KEY);
+	M0_UT_ASSERT(cd->fco_stobid.si_bits.u_hi == COB_TEST_CONTAINER);
+	M0_UT_ASSERT(cd->fco_stobid.si_bits.u_lo == COB_TEST_KEY);
 	m0_fom_phase_set(fom, M0_FOPH_COB_OPS_CREATE_DELETE);
 	m0_fom_phase_set(fom, M0_FOPH_SUCCESS);
 	cd_fom_dealloc(fom);
-- 
1.8.3.2


From af2ffe3db5fa59b3dab5474997d154417da223ef Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Fri, 7 Jun 2013 19:02:52 +0800
Subject: [PATCH 04/12] make ut pass

---
 ioservice/cob_foms.c     | 43 +++++++++++++++++++++----------------------
 ioservice/io_fops.c      | 12 ++++++++----
 ioservice/ut/bulkio_ut.c | 11 +++++++++--
 ioservice/ut/cob_foms.c  | 13 +++++++++----
 lib/trace.h              |  3 ++-
 5 files changed, 49 insertions(+), 33 deletions(-)

diff --git a/ioservice/cob_foms.c b/ioservice/cob_foms.c
index e8d8bdf..1d48606 100644
--- a/ioservice/cob_foms.c
+++ b/ioservice/cob_foms.c
@@ -78,7 +78,7 @@ struct m0_sm_state_descr cob_ops_phases[] = {
 };
 
 struct m0_sm_conf cob_ops_conf = {
-	.scf_name      = "COB create phases",
+	.scf_name      = "COB create/delete phases",
 	.scf_nr_states = ARRAY_SIZE(cob_ops_phases),
 	.scf_state     = cob_ops_phases
 };
@@ -228,7 +228,7 @@ static int cob_ops_fom_tick(struct m0_fom *fom)
 	struct m0_reqh                 *reqh;
 	struct m0_pool_version_numbers *cliv;
 	struct m0_pool_version_numbers  curr;
-	struct m0_fop_cob_common       *cc_common;
+	struct m0_fop_cob_common       *common;
 	bool                            fop_is_create;
 	const char                     *ops;
 
@@ -242,25 +242,20 @@ static int cob_ops_fom_tick(struct m0_fom *fom)
 	}
 
 	fop_is_create = fom->fo_fop->f_type == &m0_fop_cob_create_fopt;
-	if (fop_is_create) {
-		struct m0_fop_cob_create *fop;
+	common = m0_cobfop_common_get(fom->fo_fop);
+	if (fop_is_create)
 		ops = "Create";
-		fop = m0_fop_data(fom->fo_fop);
-		cc_common = &fop->cc_common;
-	} else {
-		struct m0_fop_cob_delete *fop;
+	else
 		ops = "Delete";
-		fop = m0_fop_data(fom->fo_fop);
-		cc_common = &fop->cd_common;
-	}
 
 	reqh = m0_fom_reqh(fom);
 	poolmach = m0_ios_poolmach_get(reqh);
 	m0_poolmach_current_version_get(poolmach, &curr);
-	cliv = (struct m0_pool_version_numbers*)&cc_common->c_version;
+	cliv = (struct m0_pool_version_numbers*)&common->c_version;
 
 	/* Check the client version and server version before any processing */
 	if (m0_poolmach_version_before(cliv, &curr)) {
+		rc = M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH;
 		m0_fom_phase_move(fom,
 				  M0_IOP_ERROR_FAILURE_VECTOR_VER_MISMATCH,
 				  M0_FOPH_FAILURE);
@@ -269,13 +264,16 @@ static int cob_ops_fom_tick(struct m0_fom *fom)
 		m0_poolmach_version_dump(&curr);
 		m0_poolmach_event_list_dump(poolmach);
 		m0_poolmach_device_state_dump(poolmach);
-		goto out;
+		goto pack;
 	}
 
 	switch (m0_fom_phase(fom)) {
-	case M0_FOPH_COB_OPS_PREPARE:
+	case M0_FOPH_COB_OPS_PREPARE: {
 		M0_LOG(M0_DEBUG, "Cob %s operation prepare", ops);
-		rc = M0_FSO_AGAIN;
+		rc = 0;
+		m0_fom_phase_set(fom, M0_FOPH_COB_OPS_CREATE_DELETE);
+		goto out;
+	}
 	case M0_FOPH_COB_OPS_CREATE_DELETE:
 		M0_LOG(M0_DEBUG, "Cob %s operation started", ops);
 		cob_op = cob_fom_get(fom);
@@ -287,13 +285,6 @@ static int cob_ops_fom_tick(struct m0_fom *fom)
 					cd_stob_delete(fom, cob_op);
 		}
 		m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
-		reply = m0_fop_data(fom->fo_rep_fop);
-		reply->cor_rc = rc;
-
-		m0_ios_poolmach_version_updates_pack(poolmach,
-						     &cc_common->c_version,
-						     &reply->cor_fv_version,
-						     &reply->cor_fv_updates);
 	        M0_LOG(M0_DEBUG, "Cob %s operation finished with %d", ops, rc);
 		break;
 	default:
@@ -302,6 +293,14 @@ static int cob_ops_fom_tick(struct m0_fom *fom)
 		m0_fom_phase_moveif(fom, rc, M0_FOPH_SUCCESS, M0_FOPH_FAILURE);
 	}
 
+pack:
+	reply = m0_fop_data(fom->fo_rep_fop);
+	reply->cor_rc = rc;
+
+	m0_ios_poolmach_version_updates_pack(poolmach,
+					     &common->c_version,
+					     &reply->cor_fv_version,
+					     &reply->cor_fv_updates);
 out:
 	return M0_FSO_AGAIN;
 }
diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index e9dac0b..7be459b 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -206,6 +206,12 @@ extern struct m0_sm_state_descr cob_ops_phases[];
 
 M0_INTERNAL int m0_ioservice_fop_init(void)
 {
+	struct m0_sm_conf *p_cob_ops_conf;
+#ifndef __KERNEL__
+	p_cob_ops_conf = &cob_ops_conf;
+#else
+	p_cob_ops_conf = &m0_generic_conf;
+#endif
 	m0_addb_ctx_type_register(&m0_addb_ct_ios_mod);
 	M0_ADDB_CTX_INIT(&m0_addb_gmc, &m0_ios_addb_ctx, &m0_addb_ct_ios_mod,
 			 &m0_addb_proc_ctx);
@@ -262,10 +268,9 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 				 .fop_ops   = &io_fop_cd_ops,
 #ifndef __KERNEL__
 				 .fom_ops   = &cob_fom_type_ops,
-				 .sm        = &cob_ops_conf,
 				 .svc_type  = &m0_ios_type,
 #endif
-				 .sm        = &m0_generic_conf) ?:
+				 .sm        = p_cob_ops_conf) ?:
 		M0_FOP_TYPE_INIT(&m0_fop_cob_delete_fopt,
 				 .name      = "Cob delete request",
 				 .opcode    = M0_IOSERVICE_COB_DELETE_OPCODE,
@@ -274,10 +279,9 @@ M0_INTERNAL int m0_ioservice_fop_init(void)
 				 .fop_ops   = &io_fop_cd_ops,
 #ifndef __KERNEL__
 				 .fom_ops   = &cob_fom_type_ops,
-				 .sm        = &cob_ops_conf,
 				 .svc_type  = &m0_ios_type,
 #endif
-				 .sm        = &m0_generic_conf) ?:
+				 .sm        = p_cob_ops_conf) ?:
 		M0_FOP_TYPE_INIT(&m0_fop_cob_op_reply_fopt,
 				 .name      = "Cob create or delete reply",
 				 .opcode    =  M0_IOSERVICE_COB_OP_REPLY_OPCODE,
diff --git a/ioservice/ut/bulkio_ut.c b/ioservice/ut/bulkio_ut.c
index b8c67fd..1d3579b 100644
--- a/ioservice/ut/bulkio_ut.c
+++ b/ioservice/ut/bulkio_ut.c
@@ -258,7 +258,8 @@ static void ut_io_fom_cob_rw_addb_init(struct m0_fom *fom,
 }
 
 enum fom_state_transition_tests {
-        TEST01 = M0_FOPH_IO_FOM_BUFFER_ACQUIRE,
+        TEST00 = M0_FOPH_IO_FOM_PREPARE,
+        TEST01,
         TEST02,
         TEST03,
         TEST07,
@@ -269,7 +270,7 @@ enum fom_state_transition_tests {
 static int                    i = 0;
 static struct m0_net_buffer  *nb_list[64];
 static struct m0_net_buffer_pool *buf_pool;
-static int next_test = TEST01;
+static int next_test = TEST00;
 
 static void empty_buffers_pool(uint32_t colour)
 {
@@ -376,6 +377,9 @@ static int check_write_fom_tick(struct m0_fom *fom)
                  */
                 rc = m0_io_fom_cob_rw_tick(fom);
 		next_test = m0_fom_phase(fom);
+        } else if (next_test == TEST00) {
+                rc = m0_io_fom_cob_rw_tick(fom);
+		next_test = TEST01;
         } else if (next_test == TEST01) {
                 /* Acquire all buffer pool buffer test some of cases. */
                 if (fom_obj->fcrw_bp == NULL)
@@ -724,6 +728,9 @@ static int check_read_fom_tick(struct m0_fom *fom)
                  */
                 rc = m0_io_fom_cob_rw_tick(fom);
 		next_test = m0_fom_phase(fom);
+        } else if (next_test == TEST00) {
+                rc = m0_io_fom_cob_rw_tick(fom);
+		next_test = TEST01;
         } else if (next_test == TEST01) {
                 /* Acquire all buffer pool buffer test some of cases. */
                 if (fom_obj->fcrw_bp == NULL)
diff --git a/ioservice/ut/cob_foms.c b/ioservice/ut/cob_foms.c
index df64b63..88fd3ae 100644
--- a/ioservice/ut/cob_foms.c
+++ b/ioservice/ut/cob_foms.c
@@ -411,6 +411,7 @@ static void cobfoms_del_nonexist_cob(void)
 			      COB_FOP_SINGLE);
 }
 
+extern struct m0_sm_conf cob_ops_conf;
 /*
  * Create COB FOMs - create or delete
  */
@@ -425,7 +426,7 @@ static void fom_create(struct m0_fom **fom, enum cob_fom_type fomtype)
 	M0_UT_ASSERT(rc == 0);
 
 	base_fom = *fom;
-	m0_fom_type_init(&ft, NULL, &m0_ios_type, &m0_generic_conf);
+	m0_fom_type_init(&ft, NULL, &m0_ios_type, &cob_ops_conf);
 
 	reqh = m0_cs_reqh_get(&cut->cu_sctx.rsx_mero_ctx, "ioservice");
 	M0_UT_ASSERT(reqh != NULL);
@@ -557,6 +558,8 @@ static void fom_create_test(enum cob_fom_type fomtype)
  */
 static void cc_fom_dealloc(struct m0_fom *fom)
 {
+	if (m0_fom_phase(fom) != M0_FOPH_SUCCESS)
+		m0_ut_fom_phase_set(fom, M0_FOPH_SUCCESS);
 	m0_ut_fom_phase_set(fom, M0_FOPH_FINISH);
 	fom_fop_put_norpc(fom);
 	cc_fom_fini(fom);
@@ -575,7 +578,8 @@ static struct m0_fom *cc_fom_alloc()
 	fop_alloc(fom, COB_CREATE);
 	M0_UT_ASSERT(fom->fo_fop != NULL);
 	cob_fom_populate(fom);
-	m0_fom_phase_set(fom, M0_FOPH_COB_OPS_CREATE_DELETE);
+	fom->fo_sm_phase.sm_state = M0_FOPH_COB_OPS_CREATE_DELETE;
+
 	return fom;
 }
 
@@ -817,6 +821,8 @@ static void cc_fom_populate_test()
  */
 static void cd_fom_dealloc(struct m0_fom *fom)
 {
+	if (m0_fom_phase(fom) != M0_FOPH_SUCCESS)
+		m0_ut_fom_phase_set(fom, M0_FOPH_SUCCESS);
 	m0_ut_fom_phase_set(fom, M0_FOPH_FINISH);
 	fom_fop_put_norpc(fom);
 	cd_fom_fini(fom);
@@ -835,7 +841,7 @@ static struct m0_fom *cd_fom_alloc()
 	fop_alloc(fom, COB_DELETE);
 	M0_UT_ASSERT(fom->fo_fop != NULL);
 	cob_fom_populate(fom);
-	m0_fom_phase_set(fom, M0_FOPH_COB_OPS_CREATE_DELETE);
+	fom->fo_sm_phase.sm_state = M0_FOPH_COB_OPS_CREATE_DELETE;
 
 	return fom;
 }
@@ -1054,7 +1060,6 @@ static void cob_create_api_test(void)
 {
 	/* Dummy locality setup */
 	dummy_locality_setup();
-
 	m0_sm_group_lock(&dummy_loc.fl_group);
 
 	/* Test for cc_fom_create() */
diff --git a/lib/trace.h b/lib/trace.h
index 6cd54cf..a7c4724 100644
--- a/lib/trace.h
+++ b/lib/trace.h
@@ -218,7 +218,8 @@ M0_INTERNAL void m0_trace_fini(void);
   M0_TRACE_SUBSYS(RPC,       20) \
   M0_TRACE_SUBSYS(SNS,       21) \
   M0_TRACE_SUBSYS(SNSCM,     22) \
-  M0_TRACE_SUBSYS(STOB,      23)
+  M0_TRACE_SUBSYS(STOB,      23) \
+  M0_TRACE_SUBSYS(SM,        24)
 
 #define M0_TRACE_SUBSYS(name, value) M0_TRACE_SUBSYS_ ## name = (1 << value),
 /** The subsystem bitmask definitions */
-- 
1.8.3.2


From 622d0cf69d478aeb100658da2f65784844c32c03 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Sat, 17 Aug 2013 23:52:15 +0530
Subject: [PATCH 3/7] be: create be/linux_kernel/stubs.c

Let the kernel module compile without warnings.
---
 Kbuild.in               |   1 +
 Makefile.am             |   1 +
 be/Kbuild.sub           |   1 +
 be/linux_kernel/stubs.c | 154 ++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 157 insertions(+)
 create mode 100644 be/Kbuild.sub
 create mode 100644 be/linux_kernel/stubs.c

diff --git a/Kbuild.in b/Kbuild.in
index 593eb91..45fc02c 100644
--- a/Kbuild.in
+++ b/Kbuild.in
@@ -59,6 +59,7 @@ include $(src)/mero/Kbuild.sub
 include $(src)/m0t1fs/Kbuild.sub
 
 include $(src)/addb/Kbuild.sub
+include $(src)/be/Kbuild.sub
 include $(src)/cob/Kbuild.sub
 include $(src)/conf/Kbuild.sub
 include $(src)/db/Kbuild.sub
diff --git a/Makefile.am b/Makefile.am
index 306a7fc..14fcd28 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1033,6 +1033,7 @@ help:
 
 EXTRA_DIST += addb/Kbuild.sub \
               addb/ut/Kbuild.sub \
+              be/Kbuild.sub \
               cob/Kbuild.sub \
               conf/Kbuild.sub \
               db/Kbuild.sub \
diff --git a/be/Kbuild.sub b/be/Kbuild.sub
new file mode 100644
index 0000000..7e37f86
--- /dev/null
+++ b/be/Kbuild.sub
@@ -0,0 +1 @@
+m0mero_objects += be/linux_kernel/stubs.o
diff --git a/be/linux_kernel/stubs.c b/be/linux_kernel/stubs.c
new file mode 100644
index 0000000..cd94953
--- /dev/null
+++ b/be/linux_kernel/stubs.c
@@ -0,0 +1,154 @@
+/*
+ * COPYRIGHT 2013 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
+ * Original creation date: 17-Aug-2013
+ */
+
+#include "be/op.h"  /* m0_be_op_state */
+#include "be/tx.h"  /* m0_be_tx_state */
+
+struct m0_be_btree;
+struct m0_be_btree_kv_ops;
+struct m0_be_btree_cursor;
+
+M0_INTERNAL void m0_be_btree_init(struct m0_be_btree *tree,
+				  struct m0_be_seg *seg,
+				  const struct m0_be_btree_kv_ops *ops)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL void m0_be_btree_fini(struct m0_be_btree *tree)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL bool m0_be_btree_is_empty(struct m0_be_btree *tree)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+	return true;
+}
+
+M0_INTERNAL void m0_be_btree_create_credit(const struct m0_be_btree *tree,
+					   m0_bcount_t nr,
+					   struct m0_be_tx_credit *accum)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL void m0_be_btree_create(struct m0_be_btree *tree,
+				    struct m0_be_tx *tx,
+				    struct m0_be_op *op)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL void m0_be_btree_destroy_credit(struct m0_be_btree *tree,
+					    m0_bcount_t nr,
+					    struct m0_be_tx_credit *accum)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL void m0_be_btree_destroy(struct m0_be_btree *tree,
+				     struct m0_be_tx *tx,
+				     struct m0_be_op *op)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL void m0_be_btree_insert_credit(const struct m0_be_btree *tree,
+					   m0_bcount_t nr,
+					   m0_bcount_t ksize,
+					   m0_bcount_t vsize,
+					   struct m0_be_tx_credit *accum)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL void m0_be_btree_insert(struct m0_be_btree *tree,
+				    struct m0_be_tx *tx,
+				    struct m0_be_op *op,
+				    const struct m0_buf *key,
+				    const struct m0_buf *value)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+
+M0_INTERNAL void m0_be_btree_cursor_init(struct m0_be_btree_cursor *cursor,
+					 struct m0_be_btree *tree)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL void m0_be_btree_cursor_fini(struct m0_be_btree_cursor *cursor)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL int m0_be_btree_cursor_get_sync(struct m0_be_btree_cursor *cur,
+					    const struct m0_buf *key,
+					    bool slant)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+	return -1;
+}
+
+M0_INTERNAL int m0_be_btree_cursor_last_sync(struct m0_be_btree_cursor *cur)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+	return -1;
+}
+
+M0_INTERNAL void m0_be_btree_cursor_kv_get(struct m0_be_btree_cursor *cur,
+					   struct m0_buf *key,
+					   struct m0_buf *val)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL void m0_be_btree_cursor_put(struct m0_be_btree_cursor *cursor)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL void m0_be_op_init(struct m0_be_op *op)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL void m0_be_op_fini(struct m0_be_op *op)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL int m0_be_op_wait(struct m0_be_op *op)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
+
+M0_INTERNAL enum m0_be_tx_state m0_be_tx_state(const struct m0_be_tx *tx)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+	return -1;
+}
+
+M0_INTERNAL void
+m0_be_op_state_set(struct m0_be_op *op, enum m0_be_op_state state)
+{
+	M0_IMPOSSIBLE("XXX Not implemented");
+}
-- 
1.8.3.2


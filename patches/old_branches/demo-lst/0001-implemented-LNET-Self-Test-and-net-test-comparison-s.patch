From fa682b56b757e1c1b19d08075fe804fb16c2eaa0 Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Sun, 5 May 2013 22:30:09 +0300
Subject: [PATCH] implemented LNET Self-Test and net-test comparison script

---
 net/test/demo-lst/.gitignore           |    2 +
 net/test/demo-lst/demo-lst-plot.sh     |  361 +++++++++++
 net/test/demo-lst/demo-lst-table.sh    |  180 ++++++
 net/test/demo-lst/demo-lst-test-run.sh |   61 ++
 net/test/demo-lst/demo-lst.sh          | 1029 ++++++++++++++++++++++++++++++++
 net/test/demo/demo-list-nids.sh        |    5 +-
 net/test/demo/demo.sh                  |   35 +-
 7 files changed, 1648 insertions(+), 25 deletions(-)
 create mode 100644 net/test/demo-lst/.gitignore
 create mode 100755 net/test/demo-lst/demo-lst-plot.sh
 create mode 100755 net/test/demo-lst/demo-lst-table.sh
 create mode 100755 net/test/demo-lst/demo-lst-test-run.sh
 create mode 100755 net/test/demo-lst/demo-lst.sh

diff --git a/net/test/demo-lst/.gitignore b/net/test/demo-lst/.gitignore
new file mode 100644
index 0000000..b566c09
--- /dev/null
+++ b/net/test/demo-lst/.gitignore
@@ -0,0 +1,2 @@
+setup/
+result/
diff --git a/net/test/demo-lst/demo-lst-plot.sh b/net/test/demo-lst/demo-lst-plot.sh
new file mode 100755
index 0000000..bcd57c9
--- /dev/null
+++ b/net/test/demo-lst/demo-lst-plot.sh
@@ -0,0 +1,361 @@
+#!/bin/bash
+
+declare -A measurement_axis_label
+measurement_axis_label["SIZE"]="Test message size"
+measurement_axis_label["CONCURRENCY"]="Concurrency"
+measurement_axis_label["Bandwidth"]="Bandwidth"
+measurement_axis_label["MPS"]="Messages per second"
+measurement_axis_label["RTT"]="Round-trip time"
+measurement_axis_label["Percent"]="Relative value, %"
+
+declare -A measurement_format
+measurement_format["SIZE"]="%.2b %BB"
+measurement_format["CONCURRENCY"]="%.0f"
+measurement_format["Bandwidth"]="%.2b %BB/s"
+measurement_format["MPS"]="%.0f"
+measurement_format["RTT"]="%.0s %cs"
+measurement_format["Percent"]="%.0f%%"
+
+declare -A measurement_levels
+measurement_levels[Bandwidth]=""	# see plot_init()
+measurement_levels[RTT]="1E-4,3E-4,7E-4,1E-3,5E-3"
+measurement_levels[MPS]="1E+3,3E+3,1E+4,3E+4,1E+5"
+measurement_levels[Percent]="10,50,75,95,100,125,200"
+
+declare -A axis_tics
+axis_tics[x]="nomirror rotate by -45 font \",8\""
+axis_tics[y]=""
+axis_tics[z]="set ztics font \",8\""
+
+declare -A axis_logscale_measurement
+axis_logscale_measurement["SIZE"]="false"
+axis_logscale_measurement["CONCURRENCY"]="false"
+axis_logscale_measurement["Bandwidth"]="true"
+axis_logscale_measurement["MPS"]="true"
+axis_logscale_measurement["RTT"]="true"
+axis_logscale_measurement["Percent"]="false"
+
+declare -A title_prefix
+title_prefix["Bandwidth"]="Bandwidth"
+title_prefix["RTT"]="Round-trip time"
+title_prefix["MPS"]="Messages per Second"
+title_prefix["Percent"]="Relative values"
+
+declare -a SIZE_ARRAY
+declare -a CONCURRENCY_ARRAY
+
+plot_init()
+{
+	local net_bandwidth_max="$1"
+	local msg_size_list="$2"
+	local concurrency_list="$3"
+	local percent
+	local bandwidth=""
+	local bandwidth1
+
+	SIZE_ARRAY=( ${msg_size_list// / } )
+	CONCURRENCY_ARRAY=( ${concurrency_list// / } )
+	for percent in 10 50 90 98; do
+		bandwidth1=$(printf %.1f $(echo "scale=3; \
+			$percent / 100.000 * $net_bandwidth_max" | bc))
+		bandwidth="$bandwidth,$bandwidth1"
+	done
+	measurement_levels[Bandwidth]="$(echo $bandwidth | sed s/^.//)"
+}
+
+plot_header()
+{
+	local title="$1"
+	local img_file="$2"
+
+	cat << EOF
+reset
+set timestamp
+set title "$title"
+set terminal png
+set out "$img_file"
+EOF
+}
+
+plot_header_2d()
+{
+	cat << EOF
+set key noenhanced
+set style data linespoints
+EOF
+}
+
+plot_header_3d()
+{
+	cat << EOF
+set contour both
+EOF
+}
+
+plot_axis_label()
+{
+	local axis="$1"
+	local measurement="$2"
+	cat << EOF
+set ${axis}label "${measurement_axis_label[$measurement]}"
+EOF
+}
+
+plot_axis_tics_param()
+{
+	local axis="$1"
+
+	if [ "${axis_tics[$axis]}" != "" ]; then
+		cat << EOF
+set ${axis}tics ${axis_tics[$axis]}
+EOF
+	fi
+}
+
+plot_axis_format()
+{
+	local dimensions="$1"
+	local axis="$2"
+	local measurement="$3"
+
+	if [ "$dimensions" == "3d" ] && [ "$axis" == "x" ]; then
+		return
+	fi
+	cat << EOF
+set format $axis "${measurement_format[$measurement]}"
+EOF
+}
+
+plot_axis_logscale()
+{
+	local axis="$1"
+	local measurement="$2"
+
+	if [ "${axis_logscale_measurement[$measurement]}" == "true" ]; then
+		cat << EOF
+set logscale $axis
+EOF
+	fi
+}
+
+plot_ticks_bcount_IEC()
+{
+	local size="$1"
+
+	if [ $size -lt 1024 ]; then
+		$ECHO_N "${size}B"
+	elif [ $size -lt $(expr 1024 "*" 1024) ]; then
+		$ECHO_N "$(expr $size / 1024)KiB"
+	else
+		$ECHO_N "$(expr $size / 1024 / 1024)MiB"
+	fi
+}
+
+plot_tics_x()
+{
+	local ticks=""
+	local skip="$1"
+	local i=0
+	local msg_size
+
+	for msg_size in ${SIZE_ARRAY[@]}; do
+		[ $i -ne 0 ] && ticks="$ticks, "
+		if [ $(expr $i % $skip) -eq 0 ]; then
+			ticks="$ticks\"$(plot_ticks_bcount_IEC $msg_size)\" $i"
+		else
+			ticks="$ticks\"\" $i"
+		fi
+		((i++)) || true
+	done
+	$ECHO_N "$ticks"
+}
+
+plot_tics_y()
+{
+	local ticks=""
+	local skip="$1"
+	local i=0
+	local concurrency
+
+	for concurrency in ${CONCURRENCY_ARRAY[@]}; do
+		[ $i -ne 0 ] && ticks="$ticks, "
+		if [ $(expr $i % $skip) -eq 0 ]; then
+			ticks="$ticks\"$concurrency\" $i"
+		else
+			ticks="$ticks\"\" $i"
+		fi
+		((i++)) || true
+	done
+	$ECHO_N "$ticks"
+}
+
+plot_tics()
+{
+	local dimensions="$1"
+	local axis="$2"
+	local measurement="$3"
+	local skip="${4-1}"
+
+	if [ "$dimensions" == "3d" ] && [ "$measurement" != "Percent" ]; then
+		cat << EOF
+set ${axis}tics font ",9" ($(plot_tics_${axis} $skip))
+EOF
+	fi
+}
+
+plot_axis()
+{
+	plot_axis_label "${@:2}"
+	plot_axis_tics_param "${@:2}"
+	plot_tics "$@"
+	plot_axis_format "$@"
+	plot_axis_logscale "${@:2}"
+}
+
+plot_cntrparam()
+{
+	local measurement="$1"
+
+	cat << EOF
+set cntrparam levels discrete ${measurement_levels[$measurement]}
+EOF
+}
+
+plot_clabel()
+{
+	local measurement="$1"
+
+	cat << EOF
+set clabel "${measurement_format[$measurement]}"
+EOF
+}
+
+plot_key()
+{
+	local pm3d="$1"
+
+	if [ "$pm3d" != "pm3d" ]; then
+		return
+	fi
+	cat << EOF
+set key bmargin center noautotitle maxrows 2
+EOF
+}
+
+plot_grid()
+{
+	local dimension="$1"
+
+	if [ "$dimension" == "pm3d" ]; then
+		return
+	fi
+	cat << EOF
+set grid
+EOF
+}
+
+plot_pm3d()
+{
+	local pm3d="$1"
+	local measurement="$2"
+
+	if [ "$pm3d" != "pm3d" ]; then
+		return
+	fi
+	cat << EOF
+set pm3d at bstbst map
+set cbtics format "${measurement_format[$measurement]}" font ",8"
+EOF
+	if [ "$measurement" != "RTT" ]; then
+		cat << EOF
+set palette
+EOF
+	else
+		cat << EOF
+set palette negative
+set logscale cb
+EOF
+	fi
+}
+
+plot_file_2d()
+{
+	local data_file="$1"
+	local NF=$(head -n 1 "$data_file" | awk '{print NF}')
+
+	cat << EOF
+plot '$data_file' using 2:xtic(1) title columnheader(2),	\\
+for [i=3:$NF] '' using i title columnheader(i)
+EOF
+}
+
+plot_file_3d()
+{
+	local pm3d="$1"
+	local data_file="$2"
+	local data_title="$3"
+	local title=""
+
+	if [ "$pm3d" == "3d" ]; then
+		title=" title \"$data_title\""
+	fi
+	cat << EOF
+splot "$data_file" matrix with lines$title
+EOF
+}
+
+plot_script_title_get()
+{
+	local title_suffix="$1"
+	local axis_measurement="$2"	# 0Y (2D) / 0Z (3D) actual axis
+	local measurement="$3"		# Bandwidth/MPS/RTT
+	local title="${title_prefix[$measurement]}.\n$title_suffix"
+
+	if [ "$axis_measurement" == "Percent" ]; then
+		title="${title_prefix[$axis_measurement]}, $title"
+	fi
+	echo "$title"
+}
+
+plot_script_2d()
+{
+	local title_suffix="$1"
+	local data_file="$2"
+	local img_file="$3"
+	local ox="$4"
+	local oy="$5"
+	local measurement="$6"
+	local title="$(plot_script_title_get "$title_suffix" "$oy" "$measurement")"
+
+	plot_header "$title" "$img_file"
+	plot_header_2d
+	plot_grid "2d"
+	plot_axis "2d" "x" "$ox"
+	plot_axis "2d" "y" "$oy"
+	plot_file_2d "$data_file"
+}
+
+plot_script_3d()
+{
+	local title_suffix="$1"
+	local data_file="$2"
+	local img_file="$3"
+	local oz="$4"
+	local measurement="$5"
+	local data_title="$6"
+	local pm3d="$7"
+	local title="$(plot_script_title_get "$title_suffix" "$oz" "$measurement")"
+
+	plot_header "$title" "$img_file"
+	plot_header_3d
+	plot_grid "$pm3d"
+	plot_key "$pm3d"
+	plot_axis "3d" "x" "SIZE" "2"
+	plot_axis "3d" "y" "CONCURRENCY" "3"
+	plot_axis_format "3d" "z" "$oz"
+	plot_axis_logscale "z" "$oz"
+	plot_cntrparam "$oz"
+	plot_clabel "$oz"
+	plot_pm3d "$pm3d" "$oz"
+	plot_file_3d "$pm3d" "$data_file" "$data_title"
+}
diff --git a/net/test/demo-lst/demo-lst-table.sh b/net/test/demo-lst/demo-lst-table.sh
new file mode 100755
index 0000000..8e40229
--- /dev/null
+++ b/net/test/demo-lst/demo-lst-table.sh
@@ -0,0 +1,180 @@
+#!/bin/bash
+set -eux
+export PS4='+ ${FUNCNAME[0]:+${FUNCNAME[0]}():}line ${LINENO}: '
+
+# Table with results
+# See table_*() functions
+declare -A RESULT_TABLE
+
+ECHO="echo -e"
+ECHO_N="echo -n"
+
+table_cell_index()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local measurement="$4"
+	local m_type="$5"
+	local subsystem="$6"
+
+	$ECHO_N "${test_type}_${concurrency}_${size}_"
+	$ECHO_N "${measurement}_${m_type}_${subsystem}"
+}
+
+table_cell_index_raw()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local direction="$4"
+	local group="$5"
+	local measurement="$6"
+	local rw="$7"
+	local m_type="$8"
+
+	$ECHO_N "raw_${test_type}_${concurrency}_${size}_"
+	$ECHO_N "${direction}_${group}_${measurement}_${m_type}_${rw}"
+}
+
+table_reset()
+{
+	RESULT_TABLE=( )
+}
+
+table_set()
+{
+	local new_value="$7"
+	local index="$(table_cell_index $@)"
+
+	RESULT_TABLE[$index]="$new_value"
+}
+
+table_get()
+{
+	$ECHO_N "${RESULT_TABLE[$(table_cell_index $@)]}"
+}
+
+table_set_raw()
+{
+	local new_value="$9"
+	local index="$(table_cell_index_raw $@)"
+
+	RESULT_TABLE[$index]="$new_value"
+}
+
+table_get_raw()
+{
+	$ECHO_N "${RESULT_TABLE[$(table_cell_index_raw $@)]}"
+}
+
+table_load()
+{
+	local filename="$1"
+
+	table_reset
+	eval RESULT_TABLE=( $(cat "$filename") )
+}
+
+table_save()
+{
+	local filename="$1"
+	local index
+
+	for index in "${!RESULT_TABLE[@]}"; do
+		$ECHO "[\"$index\"]=\"${RESULT_TABLE[$index]}\""
+	done > "$filename"
+}
+
+# {ping,bulk}-{user,kernel}-{user,kernel}-{Bandwidth,MPS,RTT}-\
+# {min,max,avg,stddev}
+# RTT and stddev is not used because LNET Self-Test can't measure RTT or stddev
+for_each_net_test_table()
+{
+	local func="$1"
+	shift 1
+	local test_type
+	local space_clients
+	local space_servers
+	local measurement
+	local m_type
+
+	for test_type in "ping" "bulk"; do
+	    for space_clients in "user" "kernel"; do
+		for space_servers in "user" "kernel"; do
+		    for measurement in "Bandwidth" "MPS"; do
+			for m_type in "min" "max" "avg"; do
+			    $func "$test_type" "$space_clients" \
+				    "$space_servers" "$measurement" "$m_type" \
+				    "$@"
+			done
+		    done
+		done
+	    done
+	done
+}
+
+declare -A translate_space
+translate_space[user]="U"
+translate_space[kernel]="K"
+
+# header -> msg_size
+#   v
+# concurrency
+table_load_net_test()
+{
+	local test_type="$1"
+	local space_client="$2"
+	local space_server="$3"
+	local measurement="$4"
+	local m_type="$5"
+	local path="$6"
+	local file
+	local subsystem="m0_net_"
+	local msg_size
+	local msg_size_list
+	declare -a msg_size_arr
+	local concurrency
+	local i
+	local file_line
+	declare -a file_line_arr
+	local sample
+	local first_line=0
+
+	subsystem+="${translate_space[$space_client]}_"
+	subsystem+="${translate_space[$space_server]}"
+	file="$path/$test_type-$space_client-$space_server-$measurement-$m_type"
+	msg_size_list="$(head -n 1 $file | cut -d\  -f2-)"
+	msg_size_arr=(${msg_size_list// / })
+	# WARNING: dependency from demo-lst.sh
+	progress_log "Loading net-test table $file"
+	while read; do
+		if [ $first_line -eq 0 ]; then
+			first_line=1
+			continue
+		fi
+		concurrency=$(echo $REPLY | awk '{print $1}')
+		file_line=$(echo $REPLY | cut -d\  -f2-)
+		file_line_arr=(${file_line// / })
+		for i in ${!msg_size_arr[@]}; do
+			msg_size=${msg_size_arr[$i]}
+			sample=${file_line_arr[$i]}
+			# Bandwidth and MPS in net-test results are doubled
+			# (because it is in+out result). But LNET Self-Test
+			# performs bulk transfer in one direction.
+			if [ "$measurement" == "Bandwidth" ] ||
+			   [ "$measurement" == "MPS" ]; then
+				   sample="$(echo $sample / 2 | bc)"
+			fi
+			table_set "$test_type" "$concurrency" "$msg_size" \
+				"$measurement" "$m_type" "$subsystem" "$sample"
+		done
+	done < "$file"
+}
+
+tables_load_net_test()
+{
+	local path="$1"
+
+	for_each_net_test_table table_load_net_test "$path"
+}
diff --git a/net/test/demo-lst/demo-lst-test-run.sh b/net/test/demo-lst/demo-lst-test-run.sh
new file mode 100755
index 0000000..d061c37
--- /dev/null
+++ b/net/test/demo-lst/demo-lst-test-run.sh
@@ -0,0 +1,61 @@
+#!/bin/bash
+set -eux
+export PS4='+ ${FUNCNAME[0]:+${FUNCNAME[0]}():}line ${LINENO}: '
+
+CLIENT_NIDS="$1"
+SERVER_NIDS="$2"
+FILE_PDSH_HOSTS="$3"
+FILE_RESULT="$4"
+TEST_TYPE="$5"
+CONCURRENCY="$6"
+SIZE="$7"
+DIRECTION="$8"
+
+LST_TEST_PARAMS="$TEST_TYPE --concurrency $CONCURRENCY"
+[ "$TEST_TYPE" == "brw" ] && LST_TEST_PARAMS+=" $DIRECTION size=$SIZE"
+MOD_LNET_SELFTEST="lnet_selftest"
+
+PDSH="pdsh"
+SUDO="sudo"
+ECHO="echo"
+BASH="bash"
+MV="mv"
+
+script_status=
+
+pdsh_sudo()
+{
+	WCOLL="$FILE_PDSH_HOSTS" $PDSH $SUDO "$@"
+}
+
+pdsh_sudo modprobe $MOD_LNET_SELFTEST
+
+# why "cat" is here: if disk is full then SIGPIPE will be sent to 'sudo' program
+$SUDO $BASH << EOF 2>&1 | cat > "$FILE_RESULT.tmp"
+set -eu
+
+export LST_SESSION=$$
+lst new_session session_name
+lst add_group clients $CLIENT_NIDS
+lst add_group servers $SERVER_NIDS
+lst add_batch batch_name
+lst add_test --batch batch_name --from clients --to servers $LST_TEST_PARAMS
+
+lst run batch_name
+
+lst stat --bw --rate --read --write --max --min --avg clients servers \
+	    --delay 5 & sleep 6; kill \$!
+lst stop batch_name
+
+lst end_session
+EOF
+script_status=${PIPESTATUS[0]}
+# XXX TODO kill all sessions
+
+pdsh_sudo rmmod $MOD_LNET_SELFTEST
+if [ "$script_status" -ne 0 ]; then
+	$ECHO "Error $script_status while running $0"
+	$ECHO "Parameters: $@"
+	exit $script_status
+fi
+$MV "$FILE_RESULT.tmp" "$FILE_RESULT"
diff --git a/net/test/demo-lst/demo-lst.sh b/net/test/demo-lst/demo-lst.sh
new file mode 100755
index 0000000..8031d8c
--- /dev/null
+++ b/net/test/demo-lst/demo-lst.sh
@@ -0,0 +1,1029 @@
+#!/bin/bash
+set -eux
+export PS4='+ ${FUNCNAME[0]:+${FUNCNAME[0]}():}line ${LINENO}: '
+
+# Execution environment
+# On each host:
+#   1. bash v4.x
+#   2. lnet_selftest.ko module should be installed on each client and server.
+#      It should be possible to load this module using "modprobe lnet_selftest".
+# On main host (from which this script will be executed):
+#   0. All from 'on each host' list.
+#   1. gnuplot v4.6.1
+#   2. pdsh
+#   3. demo-lst-*.sh set of scripts
+#   4. net/test/demo/results/ dir with net-test results for the same
+#      concurrency/size list.
+
+# Directory structure
+DIR_SCRIPT="$(readlink -f ${0%/*})"
+#	directory with this script
+DIR_SETUP="$DIR_SCRIPT/setup"
+DIR_RESULT="$DIR_SCRIPT/result"
+DIR_RESULT_RAW="$DIR_RESULT/raw"
+DIR_PLOT_SCRIPTS="$DIR_RESULT/gnuplot-scripts"
+DIR_NETTEST_DEMO="$DIR_SCRIPT/../demo"
+DIR_NETTEST_TABLES="$DIR_NETTEST_DEMO/result/tables"
+DIR_IMG="$DIR_RESULT"
+
+# Scripts
+SCRIPT_LIST_NIDS="$DIR_NETTEST_DEMO/demo-list-nids.sh"
+SCRIPT_TEST_RUN="$DIR_SCRIPT/demo-lst-test-run.sh"
+SCRIPT_TABLE="$DIR_SCRIPT/demo-lst-table.sh"
+SCRIPT_PLOT="$DIR_SCRIPT/demo-lst-plot.sh"
+# Files
+FILE_SIZE="$DIR_SETUP/size"
+FILE_CONCURRENCY="$DIR_SETUP/concurrency"
+FILE_CLIENT_NIDS="$DIR_SETUP/client-nids"
+FILE_SERVER_NIDS="$DIR_SETUP/server-nids"
+FILE_PDSH_HOSTS="$DIR_SETUP/pdsh-host-list"
+FILE_RESULT_TABLE="$DIR_RESULT/result-table"
+
+# User-supplied list of ssh credentials for test nodes and test console
+declare -a CLIENTS
+declare -a SERVERS
+CONSOLE=
+
+# Parameters
+# Verbose mode
+VERBOSE=0
+
+# Resume execution after ^C interrupt
+RESUME=0
+RESUME2=0
+
+NET_TYPE="o2ib"
+
+# Message size for LNET Self-Test ping test
+# This value can't be set but using measurement results it can be estimated.
+# Ping test with concurrency=256 in one of tests had
+# rate 117561 and 17.94 MiB/s bandwidth which give ~160B ping message size.
+LST_PING_MSG_SIZE=128
+
+# Maximum network speed for IB switch. Used in graphs. Info from 'lspci':
+# 08:00.0 InfiniBand: Mellanox Technologies MT26428
+# [ConnectX VPI PCIe 2.0 5GT/s - IB QDR / 10GigE] (rev b0)
+# XXX may be inaccurate
+NET_BANDWIDTH_MAX_ONE_DIRECTION=$(expr 2 "*" 1024 "*" 1024 "*" 1024)
+
+# List of parameters to test
+SIZE_LIST="64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 \
+262144 524288 1048576"
+CONCURRENCY_LIST="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 20 22 24 \
+26 28 30 32 40 48 56 64 80 96 112 128 160 192 224 256"
+TYPE_LIST="ping bulk"
+MEASUREMENT_LIST="Bandwidth MPS"
+M_TYPE_LIST="min max avg"
+SUBSYSTEM_LNET_PING_LIST="LNET"
+SUBSYSTEM_LNET_BULK_LIST="$(echo LNET_{read,write})"
+SUBSYSTEM_M0_NET_LIST="$(echo m0_net_{U,K}_{U,K})"
+SUBSYSTEM_LIST=""
+declare -a SIZE_ARR=(${SIZE_LIST// / })
+declare -a CONCURRENCY_ARR=(${CONCURRENCY_LIST// / })
+declare -a TYPE_ARR=(${TYPE_LIST// / })
+declare -a MEASUREMENT_ARR=(${MEASUREMENT_LIST// / })
+declare -a M_TYPE_ARR=(${M_TYPE_LIST// / })
+
+DIRECTION_LIST_RAW="read write"
+GROUP_LIST_RAW="clients servers"
+MEASUREMENT_LIST_RAW="Bandwidth Rates"
+RW_LIST_RAW="R W"
+M_TYPE_LIST_RAW="Min Max Avg"
+declare -a DIRECTION_ARR_RAW=(${DIRECTION_LIST_RAW// / })
+declare -a GROUP_ARR_RAW=(${GROUP_LIST_RAW// / })
+declare -a MEASUREMENT_ARR_RAW=(${MEASUREMENT_LIST_RAW// / })
+declare -a RW_ARR_RAW=(${RW_LIST_RAW// / })
+declare -a M_TYPE_ARR_RAW=(${M_TYPE_LIST_RAW// / })
+
+MKDIR="mkdir -p"
+ECHO="echo -e"
+ECHO_N="echo -n"
+RM_RF="rm -rf"
+SUDO="sudo"
+MV="mv"
+# Tested with v4.6.1
+GNUPLOT="gnuplot"
+
+main()
+{
+	source "$SCRIPT_TABLE"
+	source "$SCRIPT_PLOT"
+	cmdline_parse "$@"
+	dirs_create
+	if [ $RESUME -eq 0 ]; then
+		nids_get
+		config_store
+	fi
+	config_load
+	if [ $RESUME2 -eq 0 ]; then
+		for_each_test test_run
+		tests_output_parse
+	fi
+	graphs_draw
+}
+
+cmdline_help()
+{
+	$ECHO "-?"
+	$ECHO "-h\tPrint help and exit"
+	$ECHO "-v\tVerbose output"
+	$ECHO "-d\tRemove all produced files and results"
+	$ECHO "-c\tComma-separated list of clients"
+	$ECHO "-s\tComma-separated list of servers"
+	$ECHO "-r\tResume script execution after ^C"
+}
+
+cmdline_parse()
+{
+	OPTIND=1
+	local IFS_SAVE="$IFS"
+	while getopts "?hvdc:s:e:rR" opt; do
+		case "$opt" in
+		h|\?)	cmdline_help
+			exit 0 ;;
+		v)	VERBOSE=1 ;;
+		d)	dirs_remove
+			exit 0 ;;
+		c)	IFS=","
+			read -a CLIENTS <<< "$OPTARG" ;;
+		s)	IFS=","
+			read -a SERVERS <<< "$OPTARG" ;;
+		e)	CONSOLE="$OPTARG" ;;
+		r)	RESUME=1 ;;
+		R)	RESUME=1; RESUME2=1 ;;
+		esac
+	done
+	IFS="$IFS_SAVE"
+}
+
+progress_log()
+{
+	timestamp="$(date +%H:%M:%S.%N)"
+	$ECHO "$timestamp $@"
+}
+
+file_clear()
+{
+	local filename="$1"
+
+	:> "$filename"
+}
+
+dirs_create()
+{
+	$MKDIR "$DIR_SETUP" "$DIR_RESULT" "$DIR_RESULT_RAW" "$DIR_PLOT_SCRIPTS"
+}
+
+dirs_remove()
+{
+	$RM_RF "$DIR_PLOT_SCRIPTS" "$DIR_RESULT_RAW" "$DIR_RESULT" "$DIR_SETUP"
+}
+
+config_load()
+{
+	SIZE_LIST=$(cat $FILE_SIZE)
+	SIZE_ARR=(${SIZE_LIST// / })
+	CONCURRENCY_LIST=$(cat $FILE_CONCURRENCY)
+	CONCURRENCY_ARR=(${CONCURRENCY_LIST// / })
+
+	graph_header_2d[CONCURRENCY]="$CONCURRENCY_LIST"
+	graph_header_2d[SIZE]="$SIZE_LIST"
+}
+
+config_store()
+{
+	$ECHO "$SIZE_LIST" > "$FILE_SIZE"
+	$ECHO "$CONCURRENCY_LIST" > "$FILE_CONCURRENCY"
+}
+
+for_each_test()
+{
+	local func="$1"
+	shift 1
+	local concurrency
+	local size
+	local direction
+
+	for concurrency in ${CONCURRENCY_ARR[@]}; do
+		$func "ping" $concurrency "NONE" "NONE" "$@"
+	done
+	for concurrency in ${CONCURRENCY_ARR[@]}; do
+		for size in ${SIZE_ARR[@]}; do
+			for direction in ${DIRECTION_ARR_RAW[@]}; do
+				$func "brw" $concurrency $size $direction "$@"
+			done
+		done
+	done
+}
+
+for_each_sample_raw()
+{
+	local func="$1"
+	shift 1
+	local group
+	local measurement
+	local rw
+	local m_type
+
+	for group in ${GROUP_ARR_RAW[@]}; do
+	    for measurement in ${MEASUREMENT_ARR_RAW[@]}; do
+		for rw in ${RW_ARR_RAW[@]}; do
+		    for m_type in ${M_TYPE_ARR_RAW[@]}; do
+			progress_log "Parsing LNET Self-Test data: " \
+				"$group $measurement $rw $m_type"
+			for_each_test "$func" $group $measurement $rw $m_type
+		    done
+		done
+	    done
+	done
+}
+
+for_each_sample()
+{
+	local func="$1"
+	local description="${2-}"
+	shift 2
+	local test_type
+	local concurrency
+	local size
+	local measurement
+	local m_type
+	local subsystem
+
+	for measurement in ${MEASUREMENT_ARR[@]}; do
+	    for m_type in ${M_TYPE_ARR[@]}; do
+		progress_log "${description}$measurement-$m_type"
+		for concurrency in ${CONCURRENCY_ARR[@]}; do
+		    $func "ping" $concurrency "NONE" $measurement $m_type "LNET"
+		    for size in ${SIZE_ARR[@]}; do
+			for subsystem in "LNET_read" "LNET_write"; do
+			    $func "bulk" $concurrency $size \
+				    $measurement $m_type $subsystem "$@"
+			done
+		    done
+		done
+	    done
+	done
+}
+
+test_filename_prefix()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local direction="$4"
+
+	$ECHO_N "$test_type-$concurrency-$size-$direction"
+}
+
+test_filename_result()
+{
+	$ECHO_N "$DIR_RESULT_RAW/$(test_filename_prefix $@).raw"
+}
+
+# @todo Copy-paste from net/test/demo/demo.sh
+nid_filter()
+{
+	local addr="$1"
+	local net_type="$2"
+	local NID_SELECT="{ if (!(x[\$1]++) && \$2 ~ /$net_type\$/) print \$0 }"
+	awk "$NID_SELECT" | grep "^$addr" | head -n 1 | awk '{print $2}'
+}
+
+# @todo reduce copy-paste
+nids_get()
+{
+	local addr
+
+	# get all nids
+	for addr in "${CLIENTS[@]}"; do
+		echo "$addr"
+	done | "$SCRIPT_LIST_NIDS" > "$FILE_CLIENT_NIDS.all"
+	for addr in "${SERVERS[@]}"; do
+		echo "$addr"
+	done | "$SCRIPT_LIST_NIDS" > "$FILE_SERVER_NIDS.all"
+	# filter nids
+	file_clear "$FILE_CLIENT_NIDS"
+	file_clear "$FILE_SERVER_NIDS"
+	for addr in "${CLIENTS[@]}"; do
+		cat "$FILE_CLIENT_NIDS.all" | \
+			nid_filter "$addr" "$NET_TYPE"
+	done | tr "\n" "," | sed s'/.$//' >> "$FILE_CLIENT_NIDS"
+	for addr in "${SERVERS[@]}"; do
+		cat "$FILE_SERVER_NIDS.all" | \
+			nid_filter "$addr" "$NET_TYPE"
+	done | tr "\n" "," | sed s'/.$//' >> "$FILE_SERVER_NIDS"
+	# create host list for pdsh
+	file_clear "$FILE_PDSH_HOSTS"
+	for addr in "${CLIENTS[@]}" "${SERVERS[@]}"; do
+		echo "$addr"
+	done >> "$FILE_PDSH_HOSTS"
+}
+
+test_run()
+{
+	local file_result="$(test_filename_result $@)"
+
+	# skip already finished test
+	if [ -f "$file_result" ]; then
+		return
+	fi
+	"$SCRIPT_TEST_RUN" "$(cat $FILE_CLIENT_NIDS)" \
+			   "$(cat $FILE_SERVER_NIDS)" \
+			   "$FILE_PDSH_HOSTS" "$file_result" "$@"
+}
+
+# Sample file with results
+#
+# SESSION: session_name TIMEOUT: 300 FORCE: No
+# 192.168.251.129@tcp are added to session
+# 192.168.251.130@tcp are added to session
+# Test was added successfully
+# batch_name is running now
+# [LNet Rates of clients]
+# [R] Avg: 5784     RPC/s Min: 5784     RPC/s Max: 5784     RPC/s
+# [W] Avg: 5784     RPC/s Min: 5784     RPC/s Max: 5784     RPC/s
+# [LNet Bandwidth of clients]
+# [R] Avg: 0.88     MB/s  Min: 0.88     MB/s  Max: 0.88     MB/s
+# [W] Avg: 0.88     MB/s  Min: 0.88     MB/s  Max: 0.88     MB/s
+# [LNet Rates of servers]
+# [R] Avg: 5783     RPC/s Min: 5783     RPC/s Max: 5783     RPC/s
+# [W] Avg: 5783     RPC/s Min: 5783     RPC/s Max: 5783     RPC/s
+# [LNet Bandwidth of servers]
+# [R] Avg: 0.88     MB/s  Min: 0.88     MB/s  Max: 0.88     MB/s
+# [W] Avg: 0.88     MB/s  Min: 0.88     MB/s  Max: 0.88     MB/s
+# 1 batch in stopping
+# Batch is stopped
+# bash: line 13:  4487 Terminated              lst stat --bw
+# --rate --read --write --max --min --avg clients servers --delay 5
+# session is ended
+
+test_parse_sample_get()
+{
+	local filename="$1"
+	local group="$2"	# "clients" or "servers"
+	local measurement="$3"	# "Bandwidth" or "Rates"
+	local rw="$4"		# "R" or "W"
+	local m_type="$5"	# "Avg", "Min", "Max"
+	local AWK_SCRIPT="{
+		for (i = 1; i <= NF; ++i)
+			if (\$i == \"$m_type:\") {
+				print \$(i+1);
+				break;
+			}
+	}"
+
+
+	grep -A 2 "^\[LNet $measurement of $group\]" "$filename" | tail -n 3 | \
+		grep "^\[$rw\]" | awk "$AWK_SCRIPT"
+}
+
+test_parse_sample_raw()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local direction="$4"
+	local group="$5"
+	local measurement="$6"
+	local rw="$7"
+	local m_type="$8"
+	local file_result="$(test_filename_result $@)"
+	local sample_raw
+
+	sample_raw=$(test_parse_sample_get "$file_result" \
+		     $group $measurement $rw $m_type)
+	table_set_raw "${@:1:8}" "$sample_raw"
+}
+
+declare -A raw_translate_measurement
+raw_translate_measurement["Bandwidth"]="Bandwidth"
+raw_translate_measurement["MPS"]="Rates"
+declare -A raw_translate_m_type
+raw_translate_m_type["avg"]="Avg"
+raw_translate_m_type["min"]="Min"
+raw_translate_m_type["max"]="Max"
+declare -A raw_translate_direction
+raw_translate_direction["LNET"]="NONE"
+raw_translate_direction["LNET_read"]="read"
+raw_translate_direction["LNET_write"]="write"
+
+# Set of all possible samples from LNET Self-Test is interpreted here.
+# Bandwidth and MPS are taken from:
+# - for ping test: received on the test clients bandwidth/MPS
+# - for brw read test: received on the test clients (bandwidth|MPS / 2)
+# - for brw write test: sent from the test clients (bandwidth|MPS / 2)
+test_sample_translate_from_raw()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local measurement="$4"
+	local m_type="$5"
+	local subsystem="$6"
+	local t_measurement=${raw_translate_measurement[$measurement]}
+	local t_m_type=${raw_translate_m_type[$m_type]}
+	local direction=${raw_translate_direction[$subsystem]}
+	local group
+	local rw
+	local sample
+
+	if [ "$test_type" == "ping" ]; then
+		sample="$(table_get_raw ping $concurrency NONE NONE clients \
+			  $t_measurement R $t_m_type)"
+		size="$LST_PING_MSG_SIZE"
+		if [ "$subsystem" != "LNET" ]; then
+			echo "Invalid subsystem $subsystem"
+			exit 1
+		fi
+	else
+		# Note: "raw_translate_*" array isn't used here because
+		# it isn't just plain translation but it's a decision
+		# what values should be shown here
+		# XXX investigate unequal number of sent/received messages
+		# on the test servers and test clients in bulk test
+		group=clients
+		if [ "$subsystem" == "LNET_read" ]; then
+			rw="R"
+		elif [ "$subsystem" == "LNET_write" ]; then
+			rw="W"
+		else
+			echo "Invalid subsystem $subsystem"
+			exit 1
+		fi
+		sample="$(table_get_raw brw $concurrency $size $direction \
+			  clients $t_measurement $rw $t_m_type)"
+		if [ "$measurement" == "MPS" ]; then
+			sample="$(echo $sample / 2 | bc)"
+		fi
+	fi
+	if [ "$measurement" == "Bandwidth" ]; then
+		# LNET Self-Test gives values in MiB/s
+		# See <lustre sources>/lnet/utils/lst.c:lst_cal_lnet_stat()
+		sample=$(printf %.0f $(echo "$sample * 1024 * 1024" | bc))
+	fi
+	table_set "$test_type" "$concurrency" "$size" "$measurement" "$m_type" \
+			"$subsystem" "$sample"
+}
+
+tests_output_parse()
+{
+	table_reset
+	for_each_sample_raw test_parse_sample_raw
+	# table_load "$FILE_RESULT_TABLE"
+	for_each_sample test_sample_translate_from_raw "Translating samples: "
+	tables_load_net_test "$DIR_NETTEST_TABLES"
+	table_save "$FILE_RESULT_TABLE"
+}
+
+graph_filename_root()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local measurement="$4"
+	local m_type="$5"
+	local subsystem="$6"
+
+	$ECHO_N "$test_type-$concurrency-$size-$measurement-$m_type-$subsystem"
+}
+
+index_replace()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local measurement="$4"
+	local m_type="$5"
+	local subsystem="$6"
+	local name="$7"
+	local new_value="$8"
+
+	case "$name" in
+	"TYPE")		test_type="$new_value"	 ;;
+	"CONCURRENCY")	concurrency="$new_value" ;;
+	"SIZE")		size="$new_value"	 ;;
+	"MEASUREMENT")	measurement="$new_value" ;;
+	"M_TYPE")	m_type="$new_value"	 ;;
+	"SUBSYSTEM")	subsystem="$new_value"	 ;;
+	esac
+	$ECHO_N "$test_type" "$concurrency" "$size" " "
+	$ECHO_N "$measurement" "$m_type" "$subsystem"
+}
+
+# [SIZE] and [CONCURRENCY] values will be replaced in config_load()
+declare -A graph_header_2d
+graph_header_2d[TYPE]="$TYPE_LIST"
+graph_header_2d[CONCURRENCY]="$CONCURRENCY_LIST"
+graph_header_2d[SIZE]="$SIZE_LIST"
+graph_header_2d[MEASUREMENT]="$MEASUREMENT_LIST"
+graph_header_2d[M_TYPE]="$M_TYPE_LIST"
+graph_header_2d[SUBSYSTEM]="$SUBSYSTEM_LIST"
+
+# TYPE CONCURRENCY SIZE MEASUREMENT M_TYPE SUBSYSTEM
+graph_data_table_build()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local measurement="$4"
+	local m_type="$5"
+	local subsystem="$6"
+	local rows="$7"	# CONCURRENCY or SIZE
+	local cols="$8"
+	local row_list_name="${rows}_LIST"
+	local row_list="${!row_list_name}"
+	declare -a row_arr=(${row_list// / })
+	local col_list_name="${cols}_LIST"
+	local col_list="${!col_list_name}"
+	declare -a col_arr=(${col_list// / })
+	local ping_subsystem_list=""
+	local bulk_subsystem_list=""
+	local subsystem_list_name
+	local subsystem_list
+	local type_list="$test_type"
+	declare -a type_arr
+	declare -a subsystem_arr
+	local graph_header
+	local row
+	local col
+	local index
+	local index1
+	local test_type1
+	local subsystem1
+
+	# handle SAMPLES in test_type and/or in subsystem
+	if [ "$subsystem" == "SAMPLES" ] || [ "$subsystem" == "LNET" ]; then
+			if [ "$size" == "$LST_PING_MSG_SIZE" ]; then
+				ping_subsystem_list="$SUBSYSTEM_LNET_PING_LIST"
+			fi
+			bulk_subsystem_list="$SUBSYSTEM_LNET_BULK_LIST"
+	fi
+	if [ "$subsystem" == "SAMPLES" ] || [ "$subsystem" == "M0_NET" ]; then
+			ping_subsystem_list+=" $SUBSYSTEM_M0_NET_LIST"
+			bulk_subsystem_list+=" $SUBSYSTEM_M0_NET_LIST"
+	fi
+	if [ "$test_type" == "SAMPLES" ]; then
+		type_list="$TYPE_LIST"
+	fi
+	type_arr=(${type_list// / })
+	graph_header=" ${graph_header_2d[$cols]}"
+	if [ "$test_type" == "SAMPLES" ] || [ "$subsystem" == "SAMPLES" ]; then
+		graph_header=""
+		for test_type1 in ${type_arr[@]}; do
+			subsystem_list_name=${test_type1}_subsystem_list
+			subsystem_list="${!subsystem_list_name}"
+			subsystem_arr=(${subsystem_list// / })
+			for subsystem1 in ${subsystem_arr[@]}; do
+				graph_header+=" $test_type1-$subsystem1"
+			done
+		done
+	fi
+	$ECHO "HEADER $graph_header"
+	for row in "${row_arr[@]}"; do
+		$ECHO_N "$row"
+		if [ "$test_type" == "SAMPLES" ] ||
+		   [ "$subsystem" == "SAMPLES" ]; then
+			# To reduce copy-paste here it is possible to create
+			# two functions with very large number of arguments
+			# and pass these function names to some kind of
+			# iterating function.
+			for test_type1 in ${type_arr[@]}; do
+				subsystem_list_name=${test_type1}_subsystem_list
+				subsystem_list="${!subsystem_list_name}"
+				subsystem_arr=(${subsystem_list// / })
+				for subsystem1 in ${subsystem_arr[@]}; do
+					index="$(index_replace $test_type1 \
+						 $concurrency $size \
+						 $measurement $m_type \
+						 $subsystem1 $rows $row)"
+					$ECHO_N " $(table_get $index)"
+				done
+			done
+		else
+			for col in "${col_arr[@]}"; do
+				index1="$(index_replace ${@:1:6} $rows $row)"
+				index="$(index_replace $index1 $cols $col)"
+				$ECHO_N " $(table_get $index)"
+			done
+		fi
+		$ECHO
+	done
+}
+
+graph_param_search()
+{
+	local value="$1"
+	shift 1
+	local param
+	local index=0
+	local name="UNKNOWN"
+
+	for param in "${@}"; do
+		index=$(expr $index + 1)
+		if [ "$param" == "$value" ]; then
+			break
+		fi
+	done
+	case $index in
+	1) name="TYPE" ;;
+	2) name="CONCURRENCY" ;;
+	3) name="SIZE" ;;
+	4) name="MEASUREMENT" ;;
+	5) name="M_TYPE" ;;
+	6) name="SUBSYSTEM" ;;
+	esac
+	$ECHO_N "$name"
+}
+
+# TYPE CONCURRENCY SIZE MEASUREMENT M_TYPE SUBSYSTEM
+# TYPE \in $TYPE_LIST
+# CONCURRENCY \in ($CONCURRENCY_LIST, 0X, SAMPLES)
+# SIZE \in ($SIZE_LIST, 0X, SAMPLES)
+# MEASUREMENT \in $MEASUREMENT_LIST
+# M_TYPE \in ($M_TYPE_LIST, SAMPLES)
+# SUBSYSTEM \in ($SUBSYSTEM_LIST, SAMPLES)
+#
+# ergo(TYPE == ping, SIZE == $LST_PING_MSG_SIZE)
+# One of this should be 0X and another one or two should be SAMPLES
+graph_build_2d()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local measurement="$4"
+	local m_type="$5"
+	local subsystem="$6"
+	local title_suffix="$7"
+	local filename_root="2d-$(graph_filename_root $@)"
+	local filename_prefix="$DIR_PLOT_SCRIPTS/$filename_root"
+	local filename_data="${filename_prefix}.txt"
+	local filename_script="${filename_prefix}.gnu"
+	local filename_img="$DIR_IMG/$filename_root.png"
+	local ox="$(graph_param_search 0X $@)"	# 0Y == measurement
+	local samples="$(graph_param_search SAMPLES $@)"
+
+	progress_log "Building graph $filename_root"
+	graph_data_table_build "${@:1:6}" "$ox" "$samples" > "$filename_data"
+	plot_script_2d "$title_suffix" "$filename_data" "$filename_img" \
+		       "$ox" "$measurement" "$measurement" > "$filename_script"
+}
+
+graphs_build_2d()
+{
+	local measurement
+	local size
+	local concurrency
+	local title_suffix
+
+	for measurement in ${MEASUREMENT_ARR[@]}; do
+		title_suffix="subsystem = LNET"
+		graph_build_2d "ping" "0X" "$LST_PING_MSG_SIZE" \
+			"$measurement" "SAMPLES" "LNET" "$title_suffix"
+		title_suffix="test type = ping"
+		graph_build_2d "ping" "0X" "$LST_PING_MSG_SIZE" \
+			"$measurement" "avg" "SAMPLES" "$title_suffix"
+		title_suffix="test type = bulk"
+		graph_build_2d "bulk" "0X" "$LST_PING_MSG_SIZE" \
+			"$measurement" "avg" "SAMPLES" "$title_suffix"
+		title_suffix=""
+		graph_build_2d "SAMPLES" "0X" "$LST_PING_MSG_SIZE" \
+			"$measurement" "avg" "SAMPLES" "$title_suffix"
+		for size in ${SIZE_ARR[@]}; do
+			title_suffix="msg size = $size"
+			graph_build_2d "SAMPLES" "0X" "$size" \
+				"$measurement" "avg" "SAMPLES" "$title_suffix"
+			title_suffix="test type = bulk, $title_suffix"
+			graph_build_2d "bulk" "0X" "$size" \
+				"$measurement" "avg" "SAMPLES" "$title_suffix"
+		done
+		for concurrency in ${CONCURRENCY_ARR[@]}; do
+			title_suffix="concurrency = $concurrency"
+			graph_build_2d "SAMPLES" "$concurrency" "0X" \
+				"$measurement" "avg" "SAMPLES" "$title_suffix"
+			title_suffix="test type = bulk, $title_suffix"
+			graph_build_2d "bulk" "$concurrency" "0X" \
+				"$measurement" "avg" "SAMPLES" "$title_suffix"
+		done
+	done
+}
+
+graph_data_table_build_3d()
+{
+	local test_type="$1"
+	local measurement="$4"
+	local m_type="$5"
+	local subsystem="$6"
+	local concurrency
+	local size
+	local line
+
+	for concurrency in ${CONCURRENCY_ARR[@]}; do
+		line=""
+		for size in ${SIZE_ARR[@]}; do
+			line+=" $(table_get $test_type $concurrency $size \
+				  $measurement $m_type $subsystem)"
+		done
+		$ECHO "$(echo $line | sed s/^.//)"
+	done
+}
+
+graph_build_3d()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local measurement="$4"
+	local m_type="$5"
+	local subsystem="$6"
+	local title_suffix="$7"
+	local pm3d="$8"
+	local filename_root="$pm3d-$(graph_filename_root $@)"
+	local filename_prefix="$DIR_PLOT_SCRIPTS/$filename_root"
+	local filename_data="${filename_prefix}.txt"
+	local filename_script="${filename_prefix}.gnu"
+	local filename_img="$DIR_IMG/$filename_root.png"
+	local data_title="$measurement-$m_type"
+	local oz="$measurement"
+
+	progress_log "Building graph $filename_root"
+	graph_data_table_build_3d "${@:1:6}" "$oz" > "$filename_data"
+	plot_script_3d "$title_suffix" "$filename_data" "$filename_img" \
+		       "$oz" "$measurement" "$data_title" "$pm3d" \
+		       > "$filename_script"
+}
+
+graphs_build_3d()
+{
+	local test_type
+	local subsystem
+	local subsystem_list
+	local title_suffix
+	local pm3d
+	declare -a subsystem_arr
+
+	for test_type in "ping" "bulk"; do
+	    subsystem_list="$SUBSYSTEM_M0_NET_LIST"
+	    subsystem_list=""
+	    if [ "$test_type" == "bulk" ]; then
+		subsystem_list+=" $SUBSYSTEM_LNET_BULK_LIST"
+	    fi
+	    subsystem_arr=( ${subsystem_list// / } )
+	    for subsystem in ${subsystem_arr[@]:-}; do
+		for measurement in ${MEASUREMENT_ARR[@]}; do
+		    title_suffix="$test_type test, $subsystem subsystem"
+		    for pm3d in "3d" "pm3d"; do
+			graph_build_3d "$test_type" "0Y" "0X" "$measurement" \
+				   "avg" "$subsystem" "$title_suffix" "$pm3d"
+		    done
+		done
+	    done
+	done
+}
+
+graph_data_cmp()
+{
+	local base="$1"
+	local sample="$2"
+	local awk_script="BEGIN {
+		if ($base == 0.) {
+			print 0
+		} else {
+			print $sample * 100 / $base
+		}
+	}"
+
+	$ECHO_N $(printf %.3f $(awk "$awk_script"))
+}
+
+graph_data_table_cmp()
+{
+	local test_type2="$7"
+	local subsystem2="$8"
+	local base
+	local sample
+
+	base="$(table_get ${@:1:6})"
+	sample="$(table_get $test_type2 ${@:2:4} $subsystem2)"
+	graph_data_cmp "$base" "$sample"
+}
+
+graph_data_table_build_cmp()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local measurement="$4"
+	local m_type="$5"
+	local subsystem="$6"
+	local ox="$7"
+	shift 7
+	local row_list_name="${ox}_LIST"
+	local row_list="${!row_list_name}"
+	declare -a row_arr=(${row_list// / })
+	local test_type_list="$test_type"
+	local subsystem_list="$subsystem"
+	declare -a test_type_arr
+	declare -a subsystem_arr
+	local header="${subsystem}-${test_type}"
+	local i
+	local index
+
+	# Read all parameters. They come in pairs: TEST_TYPE and SUBSYSTEM
+	while [ -n "${1:-}" ]; do
+		test_type_list+=" $1"
+		subsystem_list+=" $2"
+		header+=" $2-$1"
+		shift 2
+	done
+	test_type_arr=(${test_type_list// / })
+	subsystem_arr=(${subsystem_list// / })
+	$ECHO "HEADER $header"
+	for row in "${row_arr[@]}"; do
+		$ECHO_N "$row"
+		for i in ${!test_type_arr[@]}; do
+			index="$(index_replace $test_type $concurrency $size \
+				 $measurement $m_type $subsystem $ox $row)"
+			$ECHO_N " $(graph_data_table_cmp $index \
+				    ${test_type_arr[$i]} ${subsystem_arr[$i]})"
+		done
+		$ECHO
+	done
+}
+
+graph_build_2d_cmp()
+{
+	# base values
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local measurement="$4"
+	local m_type="$5"
+	local subsystem="$6"
+	local title_suffix="$7"
+	local filename_suffix="$8"
+	local filename_root="2d-cmp-$(graph_filename_root $@)"
+	if [ "$filename_suffix" != "" ]; then
+		filename_root+=-${filename_suffix}
+	fi
+	local filename_prefix="$DIR_PLOT_SCRIPTS/$filename_root"
+	local filename_data="${filename_prefix}.txt"
+	local filename_script="${filename_prefix}.gnu"
+	local filename_img="$DIR_IMG/$filename_root.png"
+	local ox="$(graph_param_search 0X $@)"
+	local oy="Percent"
+
+	progress_log "Building graph $filename_root"
+	graph_data_table_build_cmp "${@:1:6}" "$ox" "${@:9}" > "$filename_data"
+	plot_script_2d "$title_suffix" "$filename_data" \
+			"$filename_img" "$ox" "$oy" "$measurement" \
+			> "$filename_script"
+}
+
+other_subsystem_get()
+{
+	local subsystem="$1"
+
+	if [ "$subsystem" == "LNET_read" ]; then
+		$ECHO_N "LNET_write"
+	else
+		$ECHO_N "LNET_read"
+	fi
+}
+
+graphs_build_2d_cmp()
+{
+	local measurement
+	local size
+	local concurrency
+	local title_suffix
+	local test_type
+	local subsystem
+	local other_subsystems
+
+	for measurement in ${MEASUREMENT_ARR[@]}; do
+		title_suffix="test type = ping, base subsystem = LNET"
+		for test_type in ${TYPE_ARR[@]}; do
+			graph_build_2d_cmp "ping" "0X" "$LST_PING_MSG_SIZE" \
+				"$measurement" "avg" "LNET" "$title_suffix" \
+				"m0_net_$test_type" \
+				$(echo $test_type" "m0_net_{U,K}_{U,K})
+		done
+		for subsystem in $(echo m0_net_{U,K}_{U,K}); do
+			graph_build_2d_cmp "ping" "0X" "$LST_PING_MSG_SIZE" \
+				"$measurement" "avg" "LNET" "$title_suffix" \
+				"$subsystem" \
+				$(echo {ping,bulk}" "$subsystem)
+		done
+		for subsystem in ${SUBSYSTEM_LNET_BULK_LIST[@]}; do
+		    title_suffix="test_type = bulk, "
+		    title_suffix+="base subsystem = $subsystem"
+		    other_subsystems="bulk $(other_subsystem_get $subsystem)"
+		    other_subsystems+=" $(echo bulk\ m0_net_{U,K}_{U,K})"
+		    for concurrency in ${CONCURRENCY_ARR[@]}; do
+			graph_build_2d_cmp "bulk" "$concurrency" "0X" \
+			"$measurement" "avg" "$subsystem" \
+			"$title_suffix, concurrency = $concurrency" \
+			"" $other_subsystems
+		    done
+		    for size in ${SIZE_ARR[@]}; do
+			graph_build_2d_cmp "bulk" "0X" "$size" \
+			"$measurement" "avg" "$subsystem" \
+			"$title_suffix, size = $size" \
+			"" $other_subsystems
+		    done
+		done
+	done
+}
+
+graph_data_table_build_3d_cmp()
+{
+	local test_type="$1"
+	local measurement="$4"
+	local m_type="$5"
+	local base_subsystem="$6"
+	local subsystem="$7"
+	local concurrency
+	local size
+	local line
+
+	for concurrency in ${CONCURRENCY_ARR[@]}; do
+		line=""
+		for size in ${SIZE_ARR[@]}; do
+			line+=" $(graph_data_table_cmp $test_type \
+				  $concurrency $size $measurement $m_type \
+				  $base_subsystem $test_type $subsystem)"
+		done
+		$ECHO "$(echo $line | sed s/^.//)"
+	done
+}
+
+graph_build_3d_cmp()
+{
+	local test_type="$1"
+	local concurrency="$2"
+	local size="$3"
+	local measurement="$4"
+	local m_type="$5"
+	local base_subsystem="$6"
+	local subsystem="$7"
+	local title_suffix="$8"
+	local pm3d="$9"
+	local filename_root="$pm3d-cmp-$(graph_filename_root $@)-$subsystem"
+	local filename_prefix="$DIR_PLOT_SCRIPTS/$filename_root"
+	local filename_data="${filename_prefix}.txt"
+	local filename_script="${filename_prefix}.gnu"
+	local filename_img="$DIR_IMG/$filename_root.png"
+	local data_title="$measurement-$m_type"
+	local oz="Percent"
+
+	progress_log "Building graph $filename_root"
+	graph_data_table_build_3d_cmp "${@:1:7}" > "$filename_data"
+	plot_script_3d "$title_suffix" "$filename_data" "$filename_img" \
+		"$oz" "$measurement" "$data_title" "$pm3d" > "$filename_script"
+}
+
+graphs_build_3d_cmp()
+{
+	local measurement
+	local base_subsystem
+	local other_subsystems
+	local subsystem
+	local pm3d
+	local title_suffix
+
+	for measurement in ${MEASUREMENT_ARR[@]}; do
+	    for base_subsystem in ${SUBSYSTEM_LNET_BULK_LIST[@]}; do
+		other_subsystems="$(other_subsystem_get $base_subsystem)"
+		other_subsystems+=" $SUBSYSTEM_M0_NET_LIST"
+		for subsystem in ${other_subsystems[@]}; do
+		    title_suffix="base subsystem = $base_subsystem, "
+		    title_suffix+="subsystem to compare = $subsystem"
+		    for pm3d in "3d" "pm3d"; do
+			graph_build_3d_cmp "bulk" "0Y" "0X" "$measurement" \
+				"avg" "$base_subsystem" "$subsystem" \
+				"$title_suffix" "$pm3d"
+		    done
+		done
+	    done
+	done
+}
+
+graphs_plot()
+{
+	find "$DIR_PLOT_SCRIPTS" -name "*.gnu" | xargs -L1 $GNUPLOT
+}
+
+graphs_draw()
+{
+	plot_init "$NET_BANDWIDTH_MAX_ONE_DIRECTION" "$SIZE_LIST" \
+		"$CONCURRENCY_LIST"
+	table_load "$FILE_RESULT_TABLE"
+	graphs_build_2d
+	graphs_build_3d
+	graphs_build_2d_cmp
+	graphs_build_3d_cmp
+	graphs_plot
+}
+
+main "$@"
diff --git a/net/test/demo/demo-list-nids.sh b/net/test/demo/demo-list-nids.sh
index 12670fd..e2fee8d 100755
--- a/net/test/demo/demo-list-nids.sh
+++ b/net/test/demo/demo-list-nids.sh
@@ -1,10 +1,12 @@
 #!/bin/bash
 # set -eux
+# export PS4='+ ${FUNCNAME[0]:+${FUNCNAME[0]}():}line ${LINENO}: '
 
 SSH="ssh"
 
 main()
 {
+	local addr
 	while read addr; do
 		ssh_get_nids $addr | awk "{print \"$addr \" \$0}"
 	done
@@ -15,7 +17,8 @@ ssh_sudo()
 	addr=$1
 	shift 1
 
-	$SSH "$addr" sudo "$@"
+	# -n option prevents early breaking of "while" loop in main()
+	$SSH -n "$addr" sudo "$@"
 }
 
 ssh_get_nids()
diff --git a/net/test/demo/demo.sh b/net/test/demo/demo.sh
index cb5b088..d7170fb 100755
--- a/net/test/demo/demo.sh
+++ b/net/test/demo/demo.sh
@@ -101,11 +101,12 @@ CONCURRENCY_CLIENT_LIST="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 20 22 24 \
 26 28 30 32 40 48 56 64 80 96 112 128 160 192 224 256"
 MEASUREMENT_LIST="Bandwidth RTT MPS"
 M_TYPE_LIST="min max avg stddev"
+DIR_NAME_LIST="$(echo {ping,bulk}-{user,kernel}-{user,kernel})"
 declare -a MSG_SIZE_ARR=(${MSG_SIZE_LIST// / })
 declare -a CONCURRENCY_CLIENT_ARR=(${CONCURRENCY_CLIENT_LIST// / })
 declare -a MEASUREMENT_ARR=(${MEASUREMENT_LIST// / })
 declare -a M_TYPE_ARR=(${M_TYPE_LIST// / })
-declare -a DIR_NAME_ARR=
+declare -a DIR_NAME_ARR=(${DIR_NAME_LIST// / })
 declare -A MSG_SIZE_REVERSE
 
 # Used by script
@@ -142,7 +143,6 @@ GNUPLOT="gnuplot"
 main()
 {
 	. "$SCRIPT_CONFIG"
-	script_init_once
 	script_init
 	cmdline_parse "$@"
 	if [ $RESUME -eq 0 ]; then
@@ -210,22 +210,6 @@ script_init()
 	done
 }
 
-script_init_once()
-{
-	local test_type
-	local space_c
-	local space_s
-
-	for test_type in "ping" "bulk"; do
-		for space_c in "user" "kernel"; do
-			for space_s in "user" "kernel"; do
-				DIR_NAME_ARR=("${DIR_NAME_ARR[@]}" \
-					      "$test_type-$space_c-$space_s")
-			done
-		done
-	done
-}
-
 # Setter and getter for node associative array
 # $1 - node index in array
 # $2 - parameter name
@@ -401,21 +385,24 @@ nids_get()
 	ssh_list_type "console" | $SCRIPT_LIST_NIDS > $FILE_CONSOLE_NID
 	ssh_list_type "client"	| $SCRIPT_LIST_NIDS > $FILE_CLIENTS_NID
 	ssh_list_type "server"	| $SCRIPT_LIST_NIDS > $FILE_SERVERS_NID
-	CONSOLE_NID=$(cat $FILE_CONSOLE_NID | nid_filter)
+	CONSOLE_NID=$(cat $FILE_CONSOLE_NID | nid_filter "$CONSOLE" "$NET_TYPE")
 }
 
+# awk script: select first NID for each host
+# @todo make only one call to this script
 nid_filter()
 {
-	# awk script: select first NID for each host
-	# @todo make only one call to this script
-	local NID_SELECT="{ if (!(x[\$1]++) && \$2 ~ /$NET_TYPE\$/) print \$0 }"
-	awk "$NID_SELECT" | head -n 1 | awk '{print $2}'
+	local addr="$1"
+	local net_type="$2"
+	local NID_SELECT="{ if (!(x[\$1]++) && \$2 ~ /$net_type\$/) print \$0 }"
+	awk "$NID_SELECT" | grep "^$addr" | head -n 1 | awk '{print $2}'
 }
 
 node_nid_select()
 {
 	local index=$1
 	local role=$(node_get $index "role")
+	local ssh_addr=$(node_get $index "ssh_addr")
 	local file
 	local nid
 
@@ -423,7 +410,7 @@ node_nid_select()
 	client)	file=$FILE_CLIENTS_NID ;;
 	server)	file=$FILE_SERVERS_NID ;;
 	esac
-	nid=$(cat $file | nid_filter)
+	nid=$(cat $file | nid_filter "$ssh_addr" "$NET_TYPE")
 	node_set $index "nid" $nid
 }
 
-- 
1.8.3.2


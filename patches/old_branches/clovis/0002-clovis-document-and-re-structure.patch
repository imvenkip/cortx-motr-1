From 890db26f71f6de4f60dd4f1b55c727c38ad5a8de Mon Sep 17 00:00:00 2001
From: Nikita Danilov <nikita_danilov@xyratex.com>
Date: Fri, 8 Feb 2013 09:51:57 -0800
Subject: [PATCH 2/7] clovis: document and re-structure

    - add "overview" top-level comment;

    - enumerate object, container and operation states;

    - drop redundant "m0_clovis_dtx_wait()" entry point;

    - introduce m0_clovis_common structure containing parameters shared by
      domains, objects and containers;

    - add checksum (csg_chk) vector to m0_clovis_sgsl;

    - add struct m0_clovis_op with parameters common to object and container
      operations;

    - replace individual "start operation" entry points with m0_clovis_obj_op()
      and m0_clovis_bag_op().
---
 clovis/clovis.h | 142 +++++++++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 114 insertions(+), 28 deletions(-)

diff --git a/clovis/clovis.h b/clovis/clovis.h
index 357070f..718e88f 100644
--- a/clovis/clovis.h
+++ b/clovis/clovis.h
@@ -28,6 +28,57 @@
 /**
  * @defgroup clovis
  *
+ * Clovis overview.
+ *
+ * Clovis is *the* interface exported by Mero for use by Mero
+ * applications. Examples of Mero applications are:
+ *
+ *     - Mero file system client (m0t1fs);
+ *
+ *     - Lustre osd-mero module;
+ *
+ *     - Mero-based block device.
+ *
+ * Note that FDMI plugins use a separate interface.
+ *
+ * Clovis provides the following abstractions:
+ *
+ *     - object (m0_clovis_obj) is an array of fixed-size blocks;
+ *
+ *     - container (m0_clovis_bag) is a key-value store;
+ *
+ *     - domain is a collection of objects and containers with a specified
+ *       access discipline and certain guaranteed fault-tolerance
+ *       characteristics. There are different types of domains, specified by the
+ *       enum m0_clovis_domain_type. Initially clovis supports only domains of
+ *       M0_CLOVIS_DOMAIN_TYPE_EXCL. Such domains have, at any given moment, at
+ *       most one application accessing the domain. This application is called
+ *       "domain owner".
+ *
+ *     - operation (m0_clovis_obj_op, m0_clovis_bag_op) is a process of querying
+ *       or updating object or container;
+ *
+ *     - transaction (m0_clovis_dtx) is a collection of operations atomic in the
+ *       face of failures. All operations from a transaction belong to the same
+ *       domain.
+ *
+ * Objects, containers, domains (and internally transactions) have unique
+ * identifiers (m0_clovis_id) from disjoint name-spaces (that is, an object, a
+ * container and a domain might have the same identifier). Identifier management
+ * is up to the application, except for the single reserved identifier for
+ * "domain0", see below and for transaction identifiers, which are assigned by
+ * the clovis implementation.
+ *
+ * All clovis entry points are non-blocking: a structure representing object,
+ * container, domain, transaction or operation contains an embedded state
+ * machine (m0_sm). A call to a clovis function would, if necessary, change the
+ * state machine state, initiate some asynchronous activity and immediately
+ * return without waiting for the activity to complete. The caller is expected
+ * to wait for the state machine state changes using m0_sm interface. Errors are
+ * returned through m0_sm::sm_rc.
+ *
+ * @see https://docs.google.com/a/xyratex.com/document/d/sHUAUkByacMNkDBRAd8-AbA
+ *
  * @{
  */
 
@@ -41,8 +92,9 @@
 struct m0_clovis_domain;
 struct m0_clovis_dtx;
 struct m0_clovis_obj;
+struct m0_clovis_obj_attr;
 struct m0_clovis_bag;
-struct m0_clovis_bag_conf;
+struct m0_clovis_bag_attr;
 struct m0_clovis_id;
 struct m0_clovis_sgsl;
 struct m0_clovis_op;
@@ -51,15 +103,29 @@ struct m0_clovis_id {
 	struct m0_uint128 cid_128;
 };
 
+struct m0_clovis_common {
+	struct m0_sm        com_sm;
+	struct m0_clovis_is com_id;
+};
+
+enum m0_clovis_state {
+	M0_CS_INIT = 1,
+	M0_CS_OPENING,
+	M0_CS_CREATING,
+	M0_CS_DELETING,
+	M0_CS_CLOSING,
+	M0_CS_ACTIVE,
+	M0_CS_FAILED
+};
+
 enum m0_clovis_domain_type {
 	M0_CLOVIS_DOMAIN_TYPE_EXCL = 0,
 	M0_CLOVIS_DOMAIN_TYPE_NR
 };
 
 struct m0_clovis_domain {
-	struct m0_sm               cdo_sm;
+	struct m0_clovis_common    cdo_com;
 	enum m0_clovis_domain_type cdo_type;
-	struct m0_clovis_id        cdo_id;
 };
 
 struct m0_clovis_dtx {
@@ -67,36 +133,64 @@ struct m0_clovis_dtx {
 };
 
 struct m0_clovis_obj {
-	struct m0_sm        cob_sm;
-	struct m0_clovis_id cob_id;
+	struct m0_clovis_common   cob_com;
+	struct m0_clovis_obj_attr cob_attr;
+};
+
+struct m0_clovis_obj_attr {
 };
 
 struct m0_clovis_bag {
-	struct m0_sm              cco_sm;
-	struct m0_clovis_id       cco_id;
-	struct m0_clovis_bag_conf cco_conf;
+	struct m0_clovis_common   cba_com;
+	struct m0_clovis_bag_attr cba_attr;
 };
 
-struct m0_clovis_bag_conf {
+struct m0_clovis_bag_attr {
 };
 
 struct m0_clovis_sgsl {
 	struct m0_indexvec csg_ext;
 	struct m0_bufvec   csg_buf;
+	struct m0_bufvec   csg_chk;
+};
+
+enum m0_clovis_op_state {
+	M0_CO_INIT = 1,
+	M0_CO_ONGOING,
+	M0_CO_FAILED,
+	M0_CO_COMPLETE
+};
+
+struct m0_clovis_op {
+	unsigned              co_type;
+	struct m0_sm          co_sm;
+	struct m0_clovis_obj *co_obj;
+	struct m0_clovis_dtx *co_dx;
+};
+
+enum m0_clovis_obj_op_type {
+	M0_COOT_READ,
+	M0_COOT_WRITE,
+	M0_COOT_FREE,
+	M0_COOT_ALLOC
 };
 
 struct m0_clovis_obj_op {
-	struct m0_sm                 cio_sm;
-	struct m0_clovis_obj        *cio_obj;
-	struct m0_clovis_dtx        *cio_dx;
-	const struct m0_clovis_sgsl  cio_data;
+	struct m0_clovis_op         cio_op;
+	const struct m0_clovis_sgsl cio_data;
+};
+
+enum m0_clovis_bag_op_type {
+	M0_CBOT_LOOKUP,
+	M0_CBOT_INSERT,
+	M0_CBOT_DELETE,
+	M0_CBOT_UPDATE,
+	M0_CBOT_CURSOR
 };
 
 struct m0_clovis_bag_op {
-	struct m0_sm          ckv_sm;
-	struct m0_clovis_bag *ckv_bag;
-	struct m0_clovis_dtx *ckv_dx;
-	struct m0_clovis_rec  ckv_rec;
+	struct m0_clovis_op  cbo_op;
+	struct m0_clovis_rec cbo_rec;
 };
 
 M0_EXTERN const struct m0_clovis_id M0_CLOVIS_DOMAIN0_ID;
@@ -112,7 +206,7 @@ void m0_clovis_domain_delete(struct m0_clovis_domain *dom, struct m0_clovis_dtx
 
 void m0_clovis_dtx_open (struct m0_clovis_dtx *dx, struct m0_clovis_domain *dom);
 void m0_clovis_dtx_close(struct m0_clovis_dtx *dx);
-void m0_clovis_dtx_wait (struct m0_clovis_dtx *dx);
+void m0_clovis_dtx_add  (struct m0_clovis_dtx *dx, struct m0_clovis_op *op);
 void m0_clovis_dtx_force(struct m0_clovis_dtx *dx);
 
 void m0_clovis_obj_init  (struct m0_clovis_obj *obj, const struct m0_clovis_id *id);
@@ -122,10 +216,7 @@ void m0_clovis_obj_open  (struct m0_clovis_obj *obj);
 void m0_clovis_obj_close (struct m0_clovis_obj *obj);
 void m0_clovis_obj_delete(struct m0_clovis_obj *obj, struct m0_clovis_dtx *dx);
 
-void m0_clovis_obj_read  (struct m0_clovis_obj_op *op);
-void m0_clovis_obj_write (struct m0_clovis_obj_op *op);
-void m0_clovis_obj_free  (struct m0_clovis_obj_op *op);
-void m0_clovis_obj_alloc (struct m0_clovis_obj_op *op);
+void m0_clovis_obj_op    (struct m0_clovis_obj_op *op);
 
 void m0_clovis_bag_init  (struct m0_clovis_bag *bag, const struct m0_clovis_id *id);
 void m0_clovis_bag_fini  (struct m0_clovis_bag *bag);
@@ -134,12 +225,7 @@ void m0_clovis_bag_open  (struct m0_clovis_bag *bag);
 void m0_clovis_bag_close (struct m0_clovis_bag *bag);
 void m0_clovis_bag_delete(struct m0_clovis_bag *bag, struct m0_clovis_dtx *dx);
 
-void m0_clovis_bag_lookup(struct m0_clovis_bag_op *op);
-void m0_clovis_bag_insert(struct m0_clovis_bag_op *op);
-void m0_clovis_bag_delete(struct m0_clovis_bag_op *op);
-void m0_clovis_bag_update(struct m0_clovis_bag_op *op);
-
-void m0_clovis_cur_open  (struct m0_clovis_bag_op *op);
+void m0_clovis_bag_op    (struct m0_clovis_bag_op *op);
 void m0_clovis_cur_next  (struct m0_clovis_bag_op *op);
 void m0_clovis_cur_close (struct m0_clovis_bag_op *op);
 
-- 
1.8.3.2


From f29203bb8344088b02d2259a325fa723443bd74b Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Mon, 17 Mar 2014 11:54:15 +0800
Subject: [PATCH 23/26] remove "struct m0t1fs_globals" and embed its members
 directly into super block.

---
 ioservice/io_fops.c           |   2 +-
 m0t1fs/linux_kernel/dir.c     |   4 +-
 m0t1fs/linux_kernel/file.c    |   2 +-
 m0t1fs/linux_kernel/inode.c   |   4 +-
 m0t1fs/linux_kernel/m0t1fs.h  |  40 ++++++-------
 m0t1fs/linux_kernel/super.c   | 128 +++++++++++++++++++-----------------------
 m0t1fs/linux_kernel/ut/file.c |  10 ++--
 7 files changed, 87 insertions(+), 103 deletions(-)

diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index c683dd3..75a6749 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -1255,7 +1255,7 @@ static int io_fop_di_prepare(struct m0_fop *fop)
 	rw = io_rw_get(fop);
 	io_info = &rw->crw_ivecs;
 	sb = m0_fop_to_sb(fop);
-	rdom = m0t1fs_rmsvc_domain_get(&sb->csb_m0t1fs_globals.g_reqh);
+	rdom = m0t1fs_rmsvc_domain_get(&sb->csb_reqh);
 	file = m0_resource_to_file(&rw->crw_gfid, rdom->rd_types[M0_RM_FLOCK_RT]);
 	if (file->fi_di_ops->do_out_shift(file) == 0)
 		return 0;
diff --git a/m0t1fs/linux_kernel/dir.c b/m0t1fs/linux_kernel/dir.c
index 4f3c885..69ec63b 100644
--- a/m0t1fs/linux_kernel/dir.c
+++ b/m0t1fs/linux_kernel/dir.c
@@ -1083,7 +1083,7 @@ static int m0t1fs_mds_cob_fop_populate(struct m0t1fs_sb         *csb,
 			 * for any type of layout.
 			 */
 			layout->l_buf.b_count = m0_layout_max_recsize(
-						&csb->csb_m0t1fs_globals.g_layout_dom);
+						&csb->csb_layout_dom);
 			layout->l_buf.b_addr = m0_alloc(layout->l_buf.b_count);
 			if (layout->l_buf.b_addr == NULL) {
 				rc = -ENOMEM;
@@ -1298,7 +1298,7 @@ int m0t1fs_layout_op(struct m0t1fs_sb *csb, enum m0_layout_opcode op,
 	struct m0_fop_layout_rep *rep = NULL;
 	int                       rc;
 	struct m0_layout         *layout = NULL;
-	struct m0_layout_domain  *ldom = &csb->csb_m0t1fs_globals.g_layout_dom;
+	struct m0_layout_domain  *ldom = &csb->csb_layout_dom;
 
 	M0_ENTRY();
 
diff --git a/m0t1fs/linux_kernel/file.c b/m0t1fs/linux_kernel/file.c
index 5085ff8..ac66010 100644
--- a/m0t1fs/linux_kernel/file.c
+++ b/m0t1fs/linux_kernel/file.c
@@ -4871,7 +4871,7 @@ static uint32_t io_di_size(const struct io_request *req)
 	struct m0_rm_domain *rdom;
 
 	sb = file_to_sb(req->ir_file);
-	rdom = m0t1fs_rmsvc_domain_get(&sb->csb_m0t1fs_globals.g_reqh);
+	rdom = m0t1fs_rmsvc_domain_get(&sb->csb_reqh);
 	file = m0_resource_to_file(file_to_fid(req->ir_file), rdom->rd_types[M0_RM_FLOCK_RT]);
 	if (file->fi_di_ops->do_out_shift(file) == 0)
 		return 0;
diff --git a/m0t1fs/linux_kernel/inode.c b/m0t1fs/linux_kernel/inode.c
index ca38a59..83ed85d 100644
--- a/m0t1fs/linux_kernel/inode.c
+++ b/m0t1fs/linux_kernel/inode.c
@@ -119,7 +119,7 @@ M0_INTERNAL void m0t1fs_file_lock_init(struct m0t1fs_inode    *ci,
 	M0_ENTRY();
 
 	M0_LOG(M0_INFO, FID_F, FID_P(fid));
-	rdom = m0t1fs_rmsvc_domain_get(&csb->csb_m0t1fs_globals.g_reqh);
+	rdom = m0t1fs_rmsvc_domain_get(&csb->csb_reqh);
 	M0_ASSERT(rdom != NULL);
 	/**
 	 * @todo Get di type from configuration.
@@ -424,7 +424,7 @@ static int m0t1fs_build_layout_instance(struct m0t1fs_sb           *csb,
 	M0_PRE(fid != NULL);
 	M0_PRE(linst != NULL);
 
-	layout = m0_layout_find(&csb->csb_m0t1fs_globals.g_layout_dom, layout_id);
+	layout = m0_layout_find(&csb->csb_layout_dom, layout_id);
 	if (layout == NULL) {
 		rc = m0t1fs_layout_op(csb, M0_LAYOUT_OP_LOOKUP,
 				      layout_id, &layout);
diff --git a/m0t1fs/linux_kernel/m0t1fs.h b/m0t1fs/linux_kernel/m0t1fs.h
index a4ef94c..b57810b 100644
--- a/m0t1fs/linux_kernel/m0t1fs.h
+++ b/m0t1fs/linux_kernel/m0t1fs.h
@@ -425,28 +425,6 @@ extern char *local_addr;
 extern uint32_t tm_recv_queue_min_len;
 extern uint32_t max_rpc_msg_size;
 
-/** Anything that is global to m0t1fs module goes in this singleton structure.
-    There is only one, global, instance of this type. */
-struct m0t1fs_globals {
-	struct m0_net_xprt                     *g_xprt;
-	/** local endpoint address module parameter */
-	char                                   *g_laddr;
-	char                                   *g_db_name;
-	struct m0_net_domain                    g_ndom;
-	struct m0_rpc_machine                   g_rpc_machine;
-	struct m0_reqh                          g_reqh;
-	struct m0_dbenv                         g_dbenv;
-	struct m0_fol                           g_fol;
-	struct m0_net_buffer_pool               g_buffer_pool;
-	struct m0_layout_domain                 g_layout_dom;
-
-	struct m0_addb_monitor                  g_addb_mon_rw_io_size;
-	uint32_t                                g_addb_mon_rw_io_size_key;
-	struct m0t1fs_addb_mon_sum_data_io_size g_addb_mon_sum_data_rw_io_size;
-	struct m0_be_ut_backend                 g_ut_be;
-	struct m0_be_ut_seg                     g_ut_seg;
-};
-
 /**
    For each <mounted_fs, target_service> pair, there is one instance of
    m0t1fs_service_context.
@@ -566,7 +544,23 @@ struct m0t1fs_sb {
 	/** Degraded mode Read[0] and write[1] I/O request statistics */
 	struct m0_addb_io_stats       csb_dgio_stats[2];
 
-	struct m0t1fs_globals         csb_m0t1fs_globals;
+	struct m0_net_xprt                     *csb_xprt;
+	/** local endpoint address module parameter */
+	char                                   *csb_laddr;
+	char                                   *csb_db_name;
+	struct m0_net_domain                    csb_ndom;
+	struct m0_rpc_machine                   csb_rpc_machine;
+	struct m0_reqh                          csb_reqh;
+	struct m0_dbenv                         csb_dbenv;
+	struct m0_fol                           csb_fol;
+	struct m0_net_buffer_pool               csb_buffer_pool;
+	struct m0_layout_domain                 csb_layout_dom;
+
+	struct m0_addb_monitor                  csb_addb_mon_rw_io_size;
+	uint32_t                                csb_addb_mon_rw_io_size_key;
+	struct m0t1fs_addb_mon_sum_data_io_size csb_addb_mon_sum_data_rw_io_size;
+	struct m0_be_ut_backend                 csb_ut_be;
+	struct m0_be_ut_seg                     csb_ut_seg;
 
 	/** lnet tmid for client ep */
 	size_t                        csb_tmid;
diff --git a/m0t1fs/linux_kernel/super.c b/m0t1fs/linux_kernel/super.c
index 3b131fa..1b2587a 100644
--- a/m0t1fs/linux_kernel/super.c
+++ b/m0t1fs/linux_kernel/super.c
@@ -501,7 +501,7 @@ static int connect_to_service(const char *addr, enum m0_conf_service_type type,
 
 	m0t1fs_service_context_init(ctx, csb, type);
 	rc = m0_rpc_client_connect(&ctx->sc_conn, &ctx->sc_session,
-				   &csb->csb_m0t1fs_globals.g_rpc_machine, addr,
+				   &csb->csb_rpc_machine, addr,
 				   M0T1FS_MAX_NR_RPC_IN_FLIGHT,
 				   M0T1FS_NR_SLOTS_PER_SESSION);
 	if (rc == 0) {
@@ -602,8 +602,8 @@ static int configure_addb_rpc_sink(struct m0t1fs_sb *csb,
 
 	if (!m0_addb_mc_has_rpc_sink(addb_mc)) {
 		int rc = m0_addb_mc_configure_rpc_sink(addb_mc,
-						&csb->csb_m0t1fs_globals.g_rpc_machine,
-						&csb->csb_m0t1fs_globals.g_reqh,
+						&csb->csb_rpc_machine,
+						&csb->csb_reqh,
 						M0_ADDB_RPCSINK_TS_INIT_PAGES,
 						M0_ADDB_RPCSINK_TS_MAX_PAGES,
 						M0_ADDB_RPCSINK_TS_PAGE_SIZE);
@@ -829,7 +829,7 @@ static int m0t1fs_layout_build(struct m0t1fs_sb      *csb,
 	m0_uint128_init(&pl_attr.pa_seed, "upjumpandpumpim,");
 
 	*layout = NULL;
-	rc = m0_pdclust_build(&csb->csb_m0t1fs_globals.g_layout_dom,
+	rc = m0_pdclust_build(&csb->csb_layout_dom,
 			      layout_id, &pl_attr, le,
 			      &pdlayout);
 	if (rc == 0)
@@ -859,7 +859,7 @@ static int m0t1fs_cob_id_enum_build(struct m0t1fs_sb *csb,
 	};
 
 	*lay_enum = NULL;
-	rc = m0_linear_enum_build(&csb->csb_m0t1fs_globals.g_layout_dom,
+	rc = m0_linear_enum_build(&csb->csb_layout_dom,
 				  &lin_attr, &lle);
 	if (rc == 0)
 		*lay_enum = &lle->lle_base;
@@ -976,7 +976,7 @@ static int m0t1fs_service_start(const char *sname, struct m0_reqh *reqh)
 
 int m0t1fs_reqh_services_start(struct m0t1fs_sb *csb)
 {
-	struct m0_reqh *reqh = &csb->csb_m0t1fs_globals.g_reqh;
+	struct m0_reqh *reqh = &csb->csb_reqh;
 	int rc;
 
 	rc = m0t1fs_service_start(M0_ADDB_SVC_NAME, reqh);
@@ -1001,7 +1001,7 @@ int m0t1fs_net_init(struct m0t1fs_sb *csb)
 	M0_ENTRY();
 	laddr = m0_alloc(M0_NET_LNET_NIDSTR_SIZE * 2);
 
-	csb->csb_m0t1fs_globals.g_xprt  = &m0_net_lnet_xprt;;
+	csb->csb_xprt  = &m0_net_lnet_xprt;;
 	m0_mutex_lock(&m0t1fs_mutex);
 	csb->csb_tmid = m0_bitmap_ffz(&m0t1fs_client_ep_tmid);
 	if (csb->csb_tmid < 0) {
@@ -1014,9 +1014,9 @@ int m0t1fs_net_init(struct m0t1fs_sb *csb)
 	snprintf(laddr, M0_NET_LNET_NIDSTR_SIZE * 2,
 		 "%s%d", local_addr, (int)csb->csb_tmid);
 	M0_LOG(M0_DEBUG, "local ep is %s", laddr);
-	csb->csb_m0t1fs_globals.g_laddr = laddr;
-	xprt =  csb->csb_m0t1fs_globals.g_xprt;
-	ndom = &csb->csb_m0t1fs_globals.g_ndom;
+	csb->csb_laddr = laddr;
+	xprt =  csb->csb_xprt;
+	ndom = &csb->csb_ndom;
 
 	rc = m0_net_xprt_init(xprt);
 	if (rc != 0)
@@ -1035,9 +1035,9 @@ void m0t1fs_net_fini(struct m0t1fs_sb *csb)
 {
 	M0_ENTRY();
 
-	m0_net_domain_fini(&csb->csb_m0t1fs_globals.g_ndom);
-	m0_net_xprt_fini(csb->csb_m0t1fs_globals.g_xprt);
-	m0_free(csb->csb_m0t1fs_globals.g_laddr);
+	m0_net_domain_fini(&csb->csb_ndom);
+	m0_net_xprt_fini(csb->csb_xprt);
+	m0_free(csb->csb_laddr);
 	m0_mutex_lock(&m0t1fs_mutex);
 	m0_bitmap_set(&m0t1fs_client_ep_tmid, csb->csb_tmid, false);
 	m0_mutex_unlock(&m0t1fs_mutex);
@@ -1047,14 +1047,14 @@ void m0t1fs_net_fini(struct m0t1fs_sb *csb)
 
 int m0t1fs_rpc_init(struct m0t1fs_sb *csb)
 {
-	struct m0_dbenv           *dbenv       = &csb->csb_m0t1fs_globals.g_dbenv;
-	char                      *db_name     =  csb->csb_m0t1fs_globals.g_db_name;
-	struct m0_rpc_machine     *rpc_machine = &csb->csb_m0t1fs_globals.g_rpc_machine;
-	struct m0_reqh            *reqh        = &csb->csb_m0t1fs_globals.g_reqh;
-	struct m0_net_domain      *ndom        = &csb->csb_m0t1fs_globals.g_ndom;
-	const char                *laddr       =  csb->csb_m0t1fs_globals.g_laddr;
-	struct m0_net_buffer_pool *buffer_pool = &csb->csb_m0t1fs_globals.g_buffer_pool;
-	struct m0_fol             *fol         = &csb->csb_m0t1fs_globals.g_fol;
+	struct m0_dbenv           *dbenv       = &csb->csb_dbenv;
+	char                      *db_name     =  csb->csb_db_name;
+	struct m0_rpc_machine     *rpc_machine = &csb->csb_rpc_machine;
+	struct m0_reqh            *reqh        = &csb->csb_reqh;
+	struct m0_net_domain      *ndom        = &csb->csb_ndom;
+	const char                *laddr       =  csb->csb_laddr;
+	struct m0_net_buffer_pool *buffer_pool = &csb->csb_buffer_pool;
+	struct m0_fol             *fol         = &csb->csb_fol;
 	struct m0_net_transfer_mc *tm;
 	int                        rc;
 	uint32_t		   bufs_nr;
@@ -1063,11 +1063,11 @@ int m0t1fs_rpc_init(struct m0t1fs_sb *csb)
 	M0_ENTRY();
 
 	/* Init BE. */
-	m0_be_ut_backend_init(&csb->csb_m0t1fs_globals.g_ut_be);
-	m0_be_ut_seg_init(&csb->csb_m0t1fs_globals.g_ut_seg,
-			  &csb->csb_m0t1fs_globals.g_ut_be, 1ULL << 24);
-	m0_be_ut_seg_allocator_init(&csb->csb_m0t1fs_globals.g_ut_seg,
-				    &csb->csb_m0t1fs_globals.g_ut_be);
+	m0_be_ut_backend_init(&csb->csb_ut_be);
+	m0_be_ut_seg_init(&csb->csb_ut_seg,
+			  &csb->csb_ut_be, 1ULL << 24);
+	m0_be_ut_seg_allocator_init(&csb->csb_ut_seg,
+				    &csb->csb_ut_be);
 
 	tms_nr	 = 1;
 	bufs_nr  = m0_rpc_bufs_nr(tm_recv_queue_min_len, tms_nr);
@@ -1083,7 +1083,7 @@ int m0t1fs_rpc_init(struct m0t1fs_sb *csb)
 
 	rc = M0_REQH_INIT(reqh,
 			  .rhia_dtm = (void*)1,
-			  .rhia_db = &csb->csb_m0t1fs_globals.g_ut_seg.bus_seg,
+			  .rhia_db = &csb->csb_ut_seg.bus_seg,
 			  .rhia_mdstore = (void*)1,
 			  .rhia_fol = fol,
 			  .rhia_svc = (void*)1);
@@ -1109,28 +1109,18 @@ dbenv_fini:
 	m0_dbenv_fini(dbenv);
 pool_fini:
 	m0_rpc_net_buffer_pool_cleanup(buffer_pool);
-	m0_be_ut_seg_allocator_fini(&csb->csb_m0t1fs_globals.g_ut_seg,
-				    &csb->csb_m0t1fs_globals.g_ut_be);
-	m0_be_ut_seg_fini(&csb->csb_m0t1fs_globals.g_ut_seg);
-	m0_be_ut_backend_fini(&csb->csb_m0t1fs_globals.g_ut_be);
+	m0_be_ut_seg_allocator_fini(&csb->csb_ut_seg,
+				    &csb->csb_ut_be);
+	m0_be_ut_seg_fini(&csb->csb_ut_seg);
+	m0_be_ut_backend_fini(&csb->csb_ut_be);
 	M0_LEAVE("rc: %d", rc);
 	M0_ASSERT(rc != 0);
 	return rc;
 }
 
-static struct m0t1fs_globals *reqh2globals(struct m0_reqh *reqh)
-{
-	return container_of(reqh, struct m0t1fs_globals, g_reqh);
-}
-
-static struct m0t1fs_sb *globals2sb(struct m0t1fs_globals *globals)
-{
-	return container_of(globals, struct m0t1fs_sb, csb_m0t1fs_globals);
-}
-
 struct m0t1fs_sb *reqh2sb(struct m0_reqh *reqh)
 {
-	return globals2sb(reqh2globals(reqh));
+	return container_of(reqh, struct m0t1fs_sb, csb_reqh);
 }
 
 static void m0t1fs_mon_rw_io_watch(const struct m0_addb_monitor *mon,
@@ -1139,7 +1129,7 @@ static void m0t1fs_mon_rw_io_watch(const struct m0_addb_monitor *mon,
 {
 	struct m0_addb_sum_rec                  *sum_rec;
 	struct m0t1fs_addb_mon_sum_data_io_size *sum_data =
-				&reqh2globals(reqh)->g_addb_mon_sum_data_rw_io_size;
+				&reqh2sb(reqh)->csb_addb_mon_sum_data_rw_io_size;
 
 	if (m0_addb_rec_rid_make(M0_ADDB_BRT_DP, M0T1FS_ADDB_RECID_IO_FINISH)
 	    == rec->ar_rid) {
@@ -1182,17 +1172,17 @@ const struct m0_addb_monitor_ops m0t1fs_addb_mon_rw_io_ops = {
 int m0t1fs_addb_mon_total_io_size_init(struct m0t1fs_sb *csb)
 {
 	struct m0_addb_sum_rec *sum_rec;
-	struct m0_reqh         *reqh = &csb->csb_m0t1fs_globals.g_reqh;
+	struct m0_reqh         *reqh = &csb->csb_reqh;
 	uint64_t               *sum_data =
-		     (uint64_t *)&csb->csb_m0t1fs_globals.g_addb_mon_sum_data_rw_io_size;
+		     (uint64_t *)&csb->csb_addb_mon_sum_data_rw_io_size;
 	uint32_t                sum_rec_nr =
-		     sizeof (csb->csb_m0t1fs_globals.g_addb_mon_sum_data_rw_io_size) /
+		     sizeof (csb->csb_addb_mon_sum_data_rw_io_size) /
 					     sizeof (uint64_t);
 	M0_ALLOC_PTR(sum_rec);
 	if (sum_rec == NULL)
 		M0_RETURN(-ENOMEM);
 
-	m0_addb_monitor_init(&csb->csb_m0t1fs_globals.g_addb_mon_rw_io_size,
+	m0_addb_monitor_init(&csb->csb_addb_mon_rw_io_size,
 			     &m0t1fs_addb_mon_rw_io_ops);
 
 	m0_addb_monitor_sum_rec_init(sum_rec, &m0_addb_rt_m0t1fs_mon_io_size,
@@ -1202,7 +1192,7 @@ int m0t1fs_addb_mon_total_io_size_init(struct m0t1fs_sb *csb)
 	m0_reqh_lockers_set(reqh, m0t1fs_addb_mon_rw_io_size_key, sum_rec);
 	m0_rwlock_write_unlock(&reqh->rh_rwlock);
 
-	m0_addb_monitor_add(reqh, &csb->csb_m0t1fs_globals.g_addb_mon_rw_io_size);
+	m0_addb_monitor_add(reqh, &csb->csb_addb_mon_rw_io_size);
 
 	return 0;
 }
@@ -1210,10 +1200,10 @@ int m0t1fs_addb_mon_total_io_size_init(struct m0t1fs_sb *csb)
 void m0t1fs_addb_mon_total_io_size_fini(struct m0t1fs_sb *csb)
 {
 	struct m0_addb_sum_rec *sum_rec;
-	struct m0_addb_monitor *mon = &csb->csb_m0t1fs_globals.g_addb_mon_rw_io_size;
-	struct m0_reqh         *reqh = &csb->csb_m0t1fs_globals.g_reqh;
+	struct m0_addb_monitor *mon = &csb->csb_addb_mon_rw_io_size;
+	struct m0_reqh         *reqh = &csb->csb_reqh;
 
-	sum_rec = mon->am_ops->amo_sum_rec(mon, &csb->csb_m0t1fs_globals.g_reqh);
+	sum_rec = mon->am_ops->amo_sum_rec(mon, &csb->csb_reqh);
 
 	m0_addb_monitor_del(reqh, mon);
 
@@ -1229,16 +1219,16 @@ void m0t1fs_rpc_fini(struct m0t1fs_sb *csb)
 {
 	M0_ENTRY();
 
-	m0_reqh_services_terminate(&csb->csb_m0t1fs_globals.g_reqh);
-	m0_reqh_rpc_mach_tlink_del_fini(&csb->csb_m0t1fs_globals.g_rpc_machine);
-	m0_rpc_machine_fini(&csb->csb_m0t1fs_globals.g_rpc_machine);
-	m0_reqh_fini(&csb->csb_m0t1fs_globals.g_reqh);
-	m0_dbenv_fini(&csb->csb_m0t1fs_globals.g_dbenv);
-	m0_rpc_net_buffer_pool_cleanup(&csb->csb_m0t1fs_globals.g_buffer_pool);
-	m0_be_ut_seg_allocator_fini(&csb->csb_m0t1fs_globals.g_ut_seg,
-				    &csb->csb_m0t1fs_globals.g_ut_be);
-	m0_be_ut_seg_fini(&csb->csb_m0t1fs_globals.g_ut_seg);
-	m0_be_ut_backend_fini(&csb->csb_m0t1fs_globals.g_ut_be);
+	m0_reqh_services_terminate(&csb->csb_reqh);
+	m0_reqh_rpc_mach_tlink_del_fini(&csb->csb_rpc_machine);
+	m0_rpc_machine_fini(&csb->csb_rpc_machine);
+	m0_reqh_fini(&csb->csb_reqh);
+	m0_dbenv_fini(&csb->csb_dbenv);
+	m0_rpc_net_buffer_pool_cleanup(&csb->csb_buffer_pool);
+	m0_be_ut_seg_allocator_fini(&csb->csb_ut_seg,
+				    &csb->csb_ut_be);
+	m0_be_ut_seg_fini(&csb->csb_ut_seg);
+	m0_be_ut_backend_fini(&csb->csb_ut_be);
 
 	M0_LEAVE();
 }
@@ -1249,13 +1239,13 @@ int m0t1fs_layout_init(struct m0t1fs_sb *csb)
 
 	M0_ENTRY();
 
-	rc = m0_layout_domain_init(&csb->csb_m0t1fs_globals.g_layout_dom,
-				   &csb->csb_m0t1fs_globals.g_dbenv);
+	rc = m0_layout_domain_init(&csb->csb_layout_dom,
+				   &csb->csb_dbenv);
 	if (rc == 0) {
 		rc = m0_layout_standard_types_register(
-						&csb->csb_m0t1fs_globals.g_layout_dom);
+						&csb->csb_layout_dom);
 		if (rc != 0)
-			m0_layout_domain_fini(&csb->csb_m0t1fs_globals.g_layout_dom);
+			m0_layout_domain_fini(&csb->csb_layout_dom);
 	}
 
 	M0_RETURN(rc);
@@ -1265,8 +1255,8 @@ void m0t1fs_layout_fini(struct m0t1fs_sb *csb)
 {
 	M0_ENTRY();
 
-	m0_layout_standard_types_unregister(&csb->csb_m0t1fs_globals.g_layout_dom);
-	m0_layout_domain_fini(&csb->csb_m0t1fs_globals.g_layout_dom);
+	m0_layout_standard_types_unregister(&csb->csb_layout_dom);
+	m0_layout_domain_fini(&csb->csb_layout_dom);
 
 	M0_LEAVE();
 }
@@ -1306,7 +1296,7 @@ static int m0t1fs_setup(struct m0t1fs_sb *csb, const struct mount_opts *mops)
 
 	rc = m0_confc_init(&confc, &csb->csb_iogroup,
 			   &M0_BUF_INITS(mops->mo_profile),
-			   mops->mo_confd, &csb->csb_m0t1fs_globals.g_rpc_machine,
+			   mops->mo_confd, &csb->csb_rpc_machine,
 			   mops->mo_local_conf);
 	if (rc == 0) {
 		int rc2 = 0;
@@ -1324,7 +1314,7 @@ static int m0t1fs_setup(struct m0t1fs_sb *csb, const struct mount_opts *mops)
 			} m0_tlist_endfor;
 			if (stats_svc_is_provided) {
 				ep_addr = ctx->sc_conn.c_rpcchan->rc_destep->nep_addr;
-				m0_addb_monitor_setup(&csb->csb_m0t1fs_globals.g_reqh, &ctx->sc_conn, ep_addr);
+				m0_addb_monitor_setup(&csb->csb_reqh, &ctx->sc_conn, ep_addr);
 				M0_LOG(M0_DEBUG, "Stats service connected");
 			} else
 				M0_LOG(M0_WARN, "Stats service not connected");
diff --git a/m0t1fs/linux_kernel/ut/file.c b/m0t1fs/linux_kernel/ut/file.c
index d946796..b4d6eb0 100644
--- a/m0t1fs/linux_kernel/ut/file.c
+++ b/m0t1fs/linux_kernel/ut/file.c
@@ -134,7 +134,7 @@ static int file_io_ut_init(void)
                 .lla_B  = ATTR_B_CONST,
         };
         llenum = NULL;
-        rc = m0_linear_enum_build(&csb.csb_m0t1fs_globals.g_layout_dom, &llattr,
+        rc = m0_linear_enum_build(&csb.csb_layout_dom, &llattr,
 			          &llenum);
         M0_ASSERT(rc == 0);
 
@@ -148,7 +148,7 @@ static int file_io_ut_init(void)
 
         };
         m0_uint128_init(&pdattr.pa_seed, "upjumpandpumpim,");
-        rc = m0_pdclust_build(&csb.csb_m0t1fs_globals.g_layout_dom, csb.csb_layout_id,
+        rc = m0_pdclust_build(&csb.csb_layout_dom, csb.csb_layout_id,
 			      &pdattr, &llenum->lle_base, &pdlay);
         M0_ASSERT(rc == 0);
         M0_ASSERT(pdlay != NULL);
@@ -742,7 +742,7 @@ static void target_ioreq_test(void)
 	size = IOVEC_NR * PAGE_CACHE_SIZE;
 	req.ir_sm.sm_state = IRS_READING;
 
-	conn.c_rpc_machine = &csb.csb_m0t1fs_globals.g_rpc_machine;
+	conn.c_rpc_machine = &csb.csb_rpc_machine;
 	session.s_conn = &conn;
 
 	aligned_buf = m0_alloc_aligned(M0_0VEC_ALIGN, M0_0VEC_SHIFT);
@@ -937,8 +937,8 @@ static void dgmode_readio_test(void)
 	M0_ALLOC_PTR(conn);
 	M0_UT_ASSERT(conn != NULL);
 	session->s_conn = conn;
-	conn->c_rpc_machine = &csb.csb_m0t1fs_globals.g_rpc_machine;
-	conn->c_rpc_machine->rm_tm.ntm_dom = &csb.csb_m0t1fs_globals.g_ndom;
+	conn->c_rpc_machine = &csb.csb_rpc_machine;
+	conn->c_rpc_machine->rm_tm.ntm_dom = &csb.csb_ndom;
 	ti->ti_session = session;
 
 	/* Creates IO fops from pages. */
-- 
1.8.3.2


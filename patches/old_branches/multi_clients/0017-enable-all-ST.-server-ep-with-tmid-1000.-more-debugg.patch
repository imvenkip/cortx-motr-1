From 773190c3263220fb73e686e11fd2bda17090142c Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Sun, 9 Mar 2014 15:17:22 +0800
Subject: [PATCH 17/26] enable all ST. server ep with tmid > 1000. more
 debugging for connections. correct error handling for conf parse and
 connection.

---
 m0t1fs/linux_kernel/st/st   |  6 +++---
 m0t1fs/linux_kernel/super.c | 17 +++++++++++------
 rpc/it/st.sh                |  1 -
 scripts/m0                  |  8 ++++----
 4 files changed, 18 insertions(+), 14 deletions(-)

diff --git a/m0t1fs/linux_kernel/st/st b/m0t1fs/linux_kernel/st/st
index 33f92cb..b09db13 100755
--- a/m0t1fs/linux_kernel/st/st
+++ b/m0t1fs/linux_kernel/st/st
@@ -27,9 +27,9 @@ export_lnet_nid_endpoints() {
     ##
     ## The PID value of 12345 is used by Lustre in the kernel and is
     ## the only value currently supported.
-    export M0T1FS_ENDPOINT="$LNET_NID:12345:34:6"
-    export IOS0_ENDPOINT="$LNET_NID:12345:34:1"
-    export IOS1_ENDPOINT="$LNET_NID:12345:34:2"
+    export M0T1FS_ENDPOINT="$LNET_NID:12345:34:"
+    export IOS0_ENDPOINT="$LNET_NID:12345:34:1001"
+    export IOS1_ENDPOINT="$LNET_NID:12345:34:1002"
     export MDS_ENDPOINT="$IOS0_ENDPOINT"
     export RMS_ENDPOINT="$IOS0_ENDPOINT"
     export CONFD_ENDPOINT="$IOS0_ENDPOINT"
diff --git a/m0t1fs/linux_kernel/super.c b/m0t1fs/linux_kernel/super.c
index a6f42fc..7a2a215 100644
--- a/m0t1fs/linux_kernel/super.c
+++ b/m0t1fs/linux_kernel/super.c
@@ -113,6 +113,8 @@ m0t1fs_container_id_to_session(const struct m0t1fs_sb *csb,
 
 	M0_ENTRY();
 	M0_PRE(container_id <= csb->csb_nr_containers);
+	M0_LOG(M0_DEBUG, "container_id=%llu csb->csb_nr_containers=%u",
+			 container_id, csb->csb_nr_containers);
 
 	ctx = csb->csb_cl_map.clm_map[container_id];
 	M0_ASSERT(ctx != NULL);
@@ -757,6 +759,8 @@ static int cl_map_build(struct m0t1fs_sb       *csb,
 	if (nr_data_containers % nr_ios != 0)
 		++nr_cont_per_svc;
 	M0_LOG(M0_DEBUG, "nr_cont_per_svc = %d", nr_cont_per_svc);
+	M0_LOG(M0_DEBUG, "%d active contexts. csb_nr_containers = %d",
+		         csb->csb_nr_active_contexts, csb->csb_nr_containers);
 
 	M0_SET0(map);
 
@@ -772,8 +776,9 @@ static int cl_map_build(struct m0t1fs_sb       *csb,
 		case M0_CST_IOS:
 			for (i = 0;
 			     i < nr_cont_per_svc && cur <= nr_data_containers;
-			     ++i, ++cur)
+			     ++i, ++cur) {
 				map->clm_map[cur] = ctx;
+			}
 			break;
 
 		case M0_CST_MGS:
@@ -1227,6 +1232,7 @@ static void m0t1fs_rpc_fini(struct m0t1fs_sb *csb)
 {
 	M0_ENTRY();
 
+	m0_reqh_services_terminate(&csb->csb_m0t1fs_globals.g_reqh);
 	m0_reqh_rpc_mach_tlink_del_fini(&csb->csb_m0t1fs_globals.g_rpc_machine);
 	m0_rpc_machine_fini(&csb->csb_m0t1fs_globals.g_rpc_machine);
 	m0_reqh_fini(&csb->csb_m0t1fs_globals.g_reqh);
@@ -1328,8 +1334,10 @@ static int m0t1fs_setup(struct m0t1fs_sb *csb, const struct mount_opts *mops)
 			m0_confc_close(fs);
 		}
 		m0_confc_fini(&confc);
-		if (rc2 != 0)
+		if (rc2 != 0) {
+			rc = rc2;
 			goto err_disconnect;
+		}
 	}
 	if (rc != 0)
 		goto err_layout_fini;
@@ -1359,11 +1367,9 @@ static int m0t1fs_setup(struct m0t1fs_sb *csb, const struct mount_opts *mops)
 
 	rc = m0t1fs_sb_layout_init(csb, &fs_params);
 	if (rc != 0)
-		goto err_service_terminate;
+		goto err_poolmach_destroy;
 	M0_RETURN(0);
 
-err_service_terminate:
-	m0_reqh_services_terminate(&csb->csb_m0t1fs_globals.g_reqh);
 err_poolmach_destroy:
 	m0t1fs_poolmach_destroy(csb->csb_pool.po_mach);
 err_pool_fini:
@@ -1397,7 +1403,6 @@ static void m0t1fs_teardown(struct m0t1fs_sb *csb)
 	disconnect_from_services(csb);
 	m0t1fs_layout_fini(csb);
 	m0t1fs_addb_mon_total_io_size_fini(csb);
-	m0_reqh_services_terminate(&csb->csb_m0t1fs_globals.g_reqh);
 	m0t1fs_rpc_fini(csb);
 	m0t1fs_net_fini(csb);
 }
diff --git a/rpc/it/st.sh b/rpc/it/st.sh
index b27bd59..1b5463d 100755
--- a/rpc/it/st.sh
+++ b/rpc/it/st.sh
@@ -1,5 +1,4 @@
 #!/bin/bash
-
 CWD=$(cd "$( dirname "$0")" && pwd)
 SRC="$CWD/../.."
 
diff --git a/scripts/m0 b/scripts/m0
index a85303a..9d969db 100755
--- a/scripts/m0
+++ b/scripts/m0
@@ -61,20 +61,20 @@ run_kut() {
 
 run_st() {
     run_init
-#    $SUDO "$SRC/net/test/st/st.sh"
+    $SUDO "$SRC/net/test/st/st.sh"
 
     ## rpc ping
-#    "$SRC/rpc/it/st.sh"
+    "$SRC/rpc/it/st.sh"
 
     ## conf ST
-#    $SUDO SANDBOX_DIR=${RUNDIR}/_m0-sandbox "$SRC/m0t1fs/linux_kernel/st/st"
+    $SUDO SANDBOX_DIR=${RUNDIR}/_m0-sandbox "$SRC/m0t1fs/linux_kernel/st/st"
 
     ## other ST
     $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_test.sh"
 
     ## multi-clients support ST
     $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_multi_clients.sh"
-    return
+
     ## Pool machine query/set testing.
     $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_poolmach.sh"
 
-- 
1.8.3.2


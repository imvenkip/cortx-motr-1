From 64e7884a3964e70e31fb87e57838df6059f0745c Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Wed, 12 Mar 2014 19:47:10 +0800
Subject: [PATCH 19/26] fixing ut and kut, after moving global variables into
 superblock.

---
 addb/addb_rec.c               |  2 --
 ioservice/io_fops.c           |  3 +++
 ioservice/ut/bulkio_client.c  |  4 ++++
 m0t1fs/linux_kernel/super.c   | 18 ++++++++---------
 m0t1fs/linux_kernel/ut/file.c | 46 +++++++++++++++++++++++++++++++++----------
 stats/stats_srv.c             |  2 --
 6 files changed, 52 insertions(+), 23 deletions(-)

diff --git a/addb/addb_rec.c b/addb/addb_rec.c
index 9c9c656..409893b 100644
--- a/addb/addb_rec.c
+++ b/addb/addb_rec.c
@@ -157,7 +157,6 @@ static void addb_rec_post(struct m0_addb_mc *mc,
 	 * @todo: Find a way to remove this condition and instead assert
 	 * on not NULL.
 	 */
-#if 0
 	if (mc->am_reqh != NULL &&
 	    m0_addb_mon_ctx_invariant(&mc->am_reqh->rh_addb_monitoring_ctx)) {
 		struct m0_addb_monitor *mon;
@@ -170,7 +169,6 @@ static void addb_rec_post(struct m0_addb_mc *mc,
 		} m0_tl_endfor;
 		m0_mutex_unlock(&mc->am_reqh->rh_addb_monitoring_ctx.amc_mutex);
 	}
-#endif
 }
 
 #ifndef __KERNEL__
diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index 35e31ad..c683dd3 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -41,6 +41,7 @@
 #include "fop/fom_generic.h"
 #include "ioservice/cob_foms.h"
 #include "file/file.h"
+#include "lib/finject.h"
 #ifdef __KERNEL__
   #undef M0_ADDB_CT_CREATE_DEFINITION
   #include "m0t1fs/linux_kernel/m0t1fs.h"
@@ -1244,6 +1245,8 @@ static int io_fop_di_prepare(struct m0_fop *fop)
 	struct m0t1fs_sb          *sb;
 	struct m0_rm_domain       *rdom;
 
+	if (M0_FI_ENABLED("skip_di_for_ut"))
+		return 0;
 	M0_PRE(fop != NULL);
 
 	rbulk = m0_fop_to_rpcbulk(fop);
diff --git a/ioservice/ut/bulkio_client.c b/ioservice/ut/bulkio_client.c
index 1d307ee..bad350e 100644
--- a/ioservice/ut/bulkio_client.c
+++ b/ioservice/ut/bulkio_client.c
@@ -26,6 +26,7 @@
 #include "rpc/rpc.h"		/* m0_rpc_bulk, m0_rpc_bulk_buf */
 #include "net/lnet/lnet.h"
 #include "file/file.h"
+#include "lib/finject.h"
 
 #ifdef __KERNEL__
 #include "m0t1fs/linux_kernel/m0t1fs.h"
@@ -263,6 +264,9 @@ static void bulkclient_test(void)
 	M0_UT_ASSERT(!rbuf1->bb_flags & M0_RPC_BULK_NETBUF_ALLOCATED);
 
 	M0_UT_ASSERT(rbuf->bb_nbuf != NULL);
+	/* In normal code path, an io_request is allocated. io_request embeds io_fop.
+	 * In this UT, only io_fop is allocated here. So, skip di_prepare here. */
+	m0_fi_enable("io_fop_di_prepare", "skip_di_for_ut");
 	rc = m0_io_fop_prepare(&iofop->if_fop);
 	M0_UT_ASSERT(rc == 0);
 	rw = io_rw_get(&iofop->if_fop);
diff --git a/m0t1fs/linux_kernel/super.c b/m0t1fs/linux_kernel/super.c
index 7a2a215..c35e5a8 100644
--- a/m0t1fs/linux_kernel/super.c
+++ b/m0t1fs/linux_kernel/super.c
@@ -973,7 +973,7 @@ static int m0t1fs_service_start(const char *sname, struct m0_reqh *reqh)
 	M0_RETURN(rc);
 }
 
-static int m0t1fs_reqh_services_start(struct m0t1fs_sb *csb)
+int m0t1fs_reqh_services_start(struct m0t1fs_sb *csb)
 {
 	struct m0_reqh *reqh = &csb->csb_m0t1fs_globals.g_reqh;
 	int rc;
@@ -990,7 +990,7 @@ err:
 	M0_RETURN(rc);
 }
 
-static int m0t1fs_net_init(struct m0t1fs_sb *csb)
+int m0t1fs_net_init(struct m0t1fs_sb *csb)
 {
 	struct m0_net_xprt   *xprt;
 	struct m0_net_domain *ndom;
@@ -1030,7 +1030,7 @@ out:
 	return rc;
 }
 
-static void m0t1fs_net_fini(struct m0t1fs_sb *csb)
+void m0t1fs_net_fini(struct m0t1fs_sb *csb)
 {
 	M0_ENTRY();
 
@@ -1044,7 +1044,7 @@ static void m0t1fs_net_fini(struct m0t1fs_sb *csb)
 	M0_LEAVE();
 }
 
-static int m0t1fs_rpc_init(struct m0t1fs_sb *csb)
+int m0t1fs_rpc_init(struct m0t1fs_sb *csb)
 {
 	struct m0_dbenv           *dbenv       = &csb->csb_m0t1fs_globals.g_dbenv;
 	char                      *db_name     =  csb->csb_m0t1fs_globals.g_db_name;
@@ -1179,7 +1179,7 @@ const struct m0_addb_monitor_ops m0t1fs_addb_mon_rw_io_ops = {
 	.amo_sum_rec = m0t1fs_mon_rw_io_sum_rec
 };
 
-static int m0t1fs_addb_mon_total_io_size_init(struct m0t1fs_sb *csb)
+int m0t1fs_addb_mon_total_io_size_init(struct m0t1fs_sb *csb)
 {
 	struct m0_addb_sum_rec *sum_rec;
 	struct m0_reqh         *reqh = &csb->csb_m0t1fs_globals.g_reqh;
@@ -1210,7 +1210,7 @@ static int m0t1fs_addb_mon_total_io_size_init(struct m0t1fs_sb *csb)
 	return 0;
 }
 
-static void m0t1fs_addb_mon_total_io_size_fini(struct m0t1fs_sb *csb)
+void m0t1fs_addb_mon_total_io_size_fini(struct m0t1fs_sb *csb)
 {
 	struct m0_addb_sum_rec *sum_rec;
 	struct m0_addb_monitor *mon = &csb->csb_m0t1fs_globals.g_addb_mon_rw_io_size;
@@ -1228,7 +1228,7 @@ static void m0t1fs_addb_mon_total_io_size_fini(struct m0t1fs_sb *csb)
 	m0_addb_monitor_fini(mon);
 }
 
-static void m0t1fs_rpc_fini(struct m0t1fs_sb *csb)
+void m0t1fs_rpc_fini(struct m0t1fs_sb *csb)
 {
 	M0_ENTRY();
 
@@ -1246,7 +1246,7 @@ static void m0t1fs_rpc_fini(struct m0t1fs_sb *csb)
 	M0_LEAVE();
 }
 
-static int m0t1fs_layout_init(struct m0t1fs_sb *csb)
+int m0t1fs_layout_init(struct m0t1fs_sb *csb)
 {
 	int rc;
 
@@ -1264,7 +1264,7 @@ static int m0t1fs_layout_init(struct m0t1fs_sb *csb)
 	M0_RETURN(rc);
 }
 
-static void m0t1fs_layout_fini(struct m0t1fs_sb *csb)
+void m0t1fs_layout_fini(struct m0t1fs_sb *csb)
 {
 	M0_ENTRY();
 
diff --git a/m0t1fs/linux_kernel/ut/file.c b/m0t1fs/linux_kernel/ut/file.c
index 8cb5187..d946796 100644
--- a/m0t1fs/linux_kernel/ut/file.c
+++ b/m0t1fs/linux_kernel/ut/file.c
@@ -84,13 +84,16 @@ static struct m0t1fs_service_context ctx;
 static struct m0_poolmach            poolmach;
 static struct m0_rm_remote           creditor;
 static struct m0t1fs_service_context msc;
-static struct m0_layout_domain       g_layout_dom;
-static struct m0_net_domain          g_ndom;
-static struct m0_rpc_machine         g_rpc_machine;
 
 M0_TL_DESCR_DECLARE(rpcbulk, M0_EXTERN);
 M0_TL_DECLARE(rpcbulk, M0_INTERNAL, struct m0_rpc_bulk_buf);
 
+int m0t1fs_layout_init(struct m0t1fs_sb *csb);
+int m0t1fs_addb_mon_total_io_size_init(struct m0t1fs_sb *csb);
+int m0t1fs_rpc_init(struct m0t1fs_sb *csb);
+int m0t1fs_net_init(struct m0t1fs_sb *csb);
+int m0t1fs_reqh_services_start(struct m0t1fs_sb *csb);
+
 static int file_io_ut_init(void)
 {
         int		  rc;
@@ -110,6 +113,20 @@ static int file_io_ut_init(void)
         m0_atomic64_set(&csb.csb_pending_io_nr, 0);
         io_bob_tlists_init();
 
+        rc = m0t1fs_net_init(&csb);
+        M0_ASSERT(rc == 0);
+
+        rc = m0t1fs_rpc_init(&csb);
+        M0_ASSERT(rc == 0);
+
+        rc = m0t1fs_addb_mon_total_io_size_init(&csb);
+        M0_ASSERT(rc == 0);
+
+        rc = m0t1fs_layout_init(&csb);
+        M0_ASSERT(rc == 0);
+        rc = m0t1fs_reqh_services_start(&csb);
+        M0_ASSERT(rc == 0);
+
         /* Tries to build a layout. */
         llattr = (struct m0_layout_linear_attr) {
                 .lla_nr = LAY_N + 2 * LAY_K,
@@ -117,7 +134,7 @@ static int file_io_ut_init(void)
                 .lla_B  = ATTR_B_CONST,
         };
         llenum = NULL;
-        rc = m0_linear_enum_build(&g_layout_dom, &llattr,
+        rc = m0_linear_enum_build(&csb.csb_m0t1fs_globals.g_layout_dom, &llattr,
 			          &llenum);
         M0_ASSERT(rc == 0);
 
@@ -131,7 +148,7 @@ static int file_io_ut_init(void)
 
         };
         m0_uint128_init(&pdattr.pa_seed, "upjumpandpumpim,");
-        rc = m0_pdclust_build(&g_layout_dom, csb.csb_layout_id,
+        rc = m0_pdclust_build(&csb.csb_m0t1fs_globals.g_layout_dom, csb.csb_layout_id,
 			      &pdattr, &llenum->lle_base, &pdlay);
         M0_ASSERT(rc == 0);
         M0_ASSERT(pdlay != NULL);
@@ -672,6 +689,11 @@ static void nw_xfer_ops_test(void)
 	m0_indexvec_free(&ivec);
 }
 
+void m0t1fs_layout_fini(struct m0t1fs_sb *csb);
+void m0t1fs_addb_mon_total_io_size_fini(struct m0t1fs_sb *csb);
+void m0t1fs_rpc_fini(struct m0t1fs_sb *csb);
+void m0t1fs_net_fini(struct m0t1fs_sb *csb);
+
 static int file_io_ut_fini(void)
 {
 	m0t1fs_file_lock_fini(&ci);
@@ -685,6 +707,12 @@ static int file_io_ut_fini(void)
 	/* Finalizes the m0_pdclust_layout type. */
 	m0_layout_put(&pdlay->pl_base.sl_base);
 	m0_poolmach_fini(csb.csb_pool.po_mach);
+
+	m0t1fs_layout_fini(&csb);
+	m0t1fs_addb_mon_total_io_size_fini(&csb);
+	m0t1fs_rpc_fini(&csb);
+	m0t1fs_net_fini(&csb);
+
 	return 0;
 }
 
@@ -700,7 +728,6 @@ static void target_ioreq_test(void)
 	int		           cnt;
 	int                        rc;
 	void		          *aligned_buf;
-	struct m0_net_domain      *ndom;
 	struct iovec               iovec_arr[IOVEC_NR];
 	struct m0_indexvec        *ivec;
 	struct pargrp_iomap       *map;
@@ -715,8 +742,7 @@ static void target_ioreq_test(void)
 	size = IOVEC_NR * PAGE_CACHE_SIZE;
 	req.ir_sm.sm_state = IRS_READING;
 
-	ndom = &g_ndom;
-	conn.c_rpc_machine = &g_rpc_machine;
+	conn.c_rpc_machine = &csb.csb_m0t1fs_globals.g_rpc_machine;
 	session.s_conn = &conn;
 
 	aligned_buf = m0_alloc_aligned(M0_0VEC_ALIGN, M0_0VEC_SHIFT);
@@ -911,8 +937,8 @@ static void dgmode_readio_test(void)
 	M0_ALLOC_PTR(conn);
 	M0_UT_ASSERT(conn != NULL);
 	session->s_conn = conn;
-	conn->c_rpc_machine = &g_rpc_machine;
-	conn->c_rpc_machine->rm_tm.ntm_dom = &g_ndom;
+	conn->c_rpc_machine = &csb.csb_m0t1fs_globals.g_rpc_machine;
+	conn->c_rpc_machine->rm_tm.ntm_dom = &csb.csb_m0t1fs_globals.g_ndom;
 	ti->ti_session = session;
 
 	/* Creates IO fops from pages. */
diff --git a/stats/stats_srv.c b/stats/stats_srv.c
index 527d876..9c3c602 100644
--- a/stats/stats_srv.c
+++ b/stats/stats_srv.c
@@ -208,8 +208,6 @@ const struct m0_fom_type_ops stats_query_fom_type_ops;
 struct m0_sm_conf stats_update_fom_sm_conf;
 struct m0_sm_conf stats_query_fom_sm_conf;
 
-static int stats_add(struct m0_tl *stats_list, struct m0_stats_sum *sum);
-
 #define SUM_DATA_SIZE(sum_data) (sum_data->ss_data.au64s_nr * sizeof(uint64_t))
 
 /*
-- 
1.8.3.2


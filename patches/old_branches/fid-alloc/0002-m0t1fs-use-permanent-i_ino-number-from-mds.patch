From ec8f8960133a27aae00215f9d3b7ccc0957c9211 Mon Sep 17 00:00:00 2001
From: Alexander Gattin <alexander_gattin@xyratex.com>
Date: Mon, 18 Mar 2013 13:13:07 +0200
Subject: [PATCH 02/15] m0t1fs: use permanent i_ino number from mds

* take i_ino from m0_dirent.d_ino in m0t1fs_readdir() function
* fill i_ino from b/l/g_tfid.f_key (via m0t1fs_inode_update()
  function): affects m0t1fs_inode_read(), m0t1fs_getattr(),
  m0t1fs_iget(), m0t1fs_lookup()
---
 m0t1fs/linux_kernel/dir.c   | 7 ++-----
 m0t1fs/linux_kernel/inode.c | 2 ++
 2 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/m0t1fs/linux_kernel/dir.c b/m0t1fs/linux_kernel/dir.c
index 8173b1d..07f0215 100644
--- a/m0t1fs/linux_kernel/dir.c
+++ b/m0t1fs/linux_kernel/dir.c
@@ -535,11 +535,8 @@ static int m0t1fs_readdir(struct file *f,
 				ino = parent_ino(dentry);
 				type = DT_DIR;
 			} else {
-				/**
-				 * TODO: Entry type is unknown and ino is
-				 * pretty random, should be fixed later.
-				 */
-				ino = ++i;
+				 /* TODO: Entry type is unknown. */
+				ino = ent->d_ino;
 				type = DT_UNKNOWN;
 			}
 
diff --git a/m0t1fs/linux_kernel/inode.c b/m0t1fs/linux_kernel/inode.c
index 4951101..7db50de 100644
--- a/m0t1fs/linux_kernel/inode.c
+++ b/m0t1fs/linux_kernel/inode.c
@@ -255,6 +255,8 @@ M0_INTERNAL int m0t1fs_inode_update(struct inode *inode,
 		inode->i_nlink = body->b_nlink;
 	if (body->b_valid & M0_COB_MODE)
 		inode->i_mode = body->b_mode;
+	if (body->b_valid & M0_COB_TFID)
+		inode->i_ino = body->b_tfid.f_key;
 
 	M0_LEAVE("rc: %d", rc);
 	return rc;
-- 
1.8.3.2


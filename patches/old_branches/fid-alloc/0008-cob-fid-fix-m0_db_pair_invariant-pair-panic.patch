From a29bb90ab551786f3a3fdde111b2eabb0c1cd34f Mon Sep 17 00:00:00 2001
From: Alexander Gattin <alexander_gattin@xyratex.com>
Date: Fri, 29 Mar 2013 17:57:37 +0200
Subject: [PATCH 08/15] cob/fid: fix m0_db_pair_invariant(pair) panic

* m0_cob_locate(): do not assert when FID == {0, 0}, it's a valid
  condition when we want cob to allocate new f_key for us
* m0_cob_alloc_tfkey():
  - add fid2 local variable to shorten some expressions
  - do m0_db_pair_setup() between m0_db_cursor_get() and
    m0_db_cursor_prev()
* m0_cob_create(): nsrec->cnr_fid may == {0, 0}, do not assert
---
 cob/cob.c | 55 ++++++++++++++++++++++++++++++++++++-------------------
 1 file changed, 36 insertions(+), 19 deletions(-)

diff --git a/cob/cob.c b/cob/cob.c
index 7c17e5b..0af31f1 100644
--- a/cob/cob.c
+++ b/cob/cob.c
@@ -934,7 +934,8 @@ M0_INTERNAL int m0_cob_locate(struct m0_cob_domain *dom,
 	struct m0_cob *cob;
 	int rc;
 
-	M0_PRE(m0_fid_is_set(&oikey->cok_fid));
+	if (!m0_fid_is_set(&oikey->cok_fid))
+		return -ENOENT;
 
 	/*
 	 * Zero out "out" just in case that if we fail here, it is
@@ -1109,6 +1110,7 @@ M0_INTERNAL int m0_cob_alloc_fkey(struct m0_cob_domain *dom,
 	struct m0_db_pair     pair;
 	struct m0_cob_fabkey  fabkey;
 	struct m0_cob_fabkey *fabkey2;
+	struct m0_fid        *fid2;
 	struct m0_db_cursor   cursor;
 	int                   rc;
 
@@ -1117,8 +1119,7 @@ M0_INTERNAL int m0_cob_alloc_fkey(struct m0_cob_domain *dom,
 	M0_ENTRY("[%llx:%llx]", (long long unsigned)fid->f_container,
 		 (long long unsigned)fid->f_key);
 
-	rc = m0_db_cursor_init(&cursor,
-			       &dom->cd_fileattr_basic, tx, 0);
+	rc = m0_db_cursor_init(&cursor, &dom->cd_fileattr_basic, tx, 0);
 	if (rc != 0)
 		goto leave;
 	/*
@@ -1127,34 +1128,49 @@ M0_INTERNAL int m0_cob_alloc_fkey(struct m0_cob_domain *dom,
 	 */
 	fabkey.cfb_fid.f_container = fid->f_container;
 	fabkey.cfb_fid.f_key       = ~0ULL;
-
 	m0_db_pair_setup(&pair, &dom->cd_fileattr_basic,
 			 &fabkey, sizeof fabkey, NULL, 0);
-	/* Look for FAB key >= {f_container, ~0ULL}. */
 	rc = m0_db_cursor_get(&cursor, &pair);
 	if (rc == 0) {
+		/* 
+		 * Most probably got some {f_container2, ...} key,
+		 * where f_container2 > f_container...
+		 */
 		fabkey2 = (struct m0_cob_fabkey *) pair.dp_key.db_buf.b_addr;
-		if (fabkey2->cfb_fid.f_container == fid->f_container &&
-		    fabkey2->cfb_fid.f_key == ~0ULL) {
+		fid2 = &fabkey2->cfb_fid;
+		if (fid2->f_container == fid->f_container &&
+		    fid2->f_key == ~0ULL) {
 			/* Cannot allocate any more keys in the container. */
 			rc = -ENOSPC;
 			goto out;
 		}
-		M0_ASSERT(fabkey2->cfb_fid.f_container != fid->f_container);
+		M0_ASSERT(fid2->f_container != fid->f_container);
 	}
-	if (rc == -ENOENT || rc == 0)
+	if (rc == -ENOENT || rc == 0) {
+		/*
+		 * XXX: m0_db_cursor_prev() fails with "panic:
+		 * m0_db_pair_invariant(pair) pair_done() (db/db.c:657)"
+		 * unless we redo the m0_db_pair_setup().
+		 */
+		m0_db_pair_release(&pair);
+		m0_db_pair_fini(&pair);
+		m0_db_pair_setup(&pair, &dom->cd_fileattr_basic,
+				 &fabkey, sizeof fabkey, NULL, 0);
 		rc = m0_db_cursor_prev(&cursor, &pair);
+	}
 	if (rc == 0) {
 		fabkey2 = (struct m0_cob_fabkey *) pair.dp_key.db_buf.b_addr;
-		M0_LOG(M0_DEBUG, "max fid: [%llx, %llx]",
-		       (long long unsigned)fabkey2->cfb_fid.f_container,
-		       (long long unsigned)fabkey2->cfb_fid.f_key);
-		if (fabkey2->cfb_fid.f_container == fid->f_container)
-			fid->f_key = fabkey2->cfb_fid.f_key + 1;
-		else
-			fid->f_key = 1;
+		fid2 = &fabkey2->cfb_fid;
+		if (fid2->f_container == fid->f_container) {
+			M0_LOG(M0_DEBUG, "max fid in [%llx:*]: [%llx:%llx]",
+			       (long long unsigned)fid->f_container,
+			       (long long unsigned)fid2->f_container,
+			       (long long unsigned)fid2->f_key);
+			fid->f_key = fid2->f_key + 1;
+		} else
+			fid->f_key = 4;
 	} else if (rc == -ENOENT) {
-		fid->f_key = 1;
+		fid->f_key = 4;
 		rc = 0;
 	}
 out:
@@ -1184,10 +1200,11 @@ M0_INTERNAL int m0_cob_create(struct m0_cob *cob,
 	M0_PRE(nsrec != NULL);
 	M0_PRE(fabrec != NULL);
 	M0_PRE(omgrec != NULL);
-	M0_PRE(m0_fid_is_set(&nsrec->cnr_fid));
 	M0_PRE(m0_fid_is_set(&nskey->cnk_pfid));
 
-	M0_ENTRY("[%llx:%llx]/%.*s",
+	M0_ENTRY("[%llx:%llx]<-[%llx:%llx]/%.*s",
+		 (long long unsigned)nsrec->cnr_fid.f_container,
+		 (long long unsigned)nsrec->cnr_fid.f_key,
 		 (long long unsigned)nskey->cnk_pfid.f_container,
 		 (long long unsigned)nskey->cnk_pfid.f_key,
 		 m0_bitstring_len_get(&nskey->cnk_name),
-- 
1.8.3.2


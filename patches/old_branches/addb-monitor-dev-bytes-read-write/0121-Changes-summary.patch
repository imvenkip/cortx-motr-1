From 9807c41d0a207c54980f7c4c47e5ab1fd4621e6f Mon Sep 17 00:00:00 2001
From: Rohan Puri <rohan_puri@xyratex.com>
Date: Thu, 14 Nov 2013 14:33:41 +0530
Subject: [PATCH 121/121] Changes summary : - 1. Fixed BUG: - If
 addb_monitor_del() is called from reqh_fini(), then by this time    addb
 service is already cleaned up, so do not have to set the last accessed
 monitor    as NULL, in non-existent memory. 2. Fixed BUG: - Correct the api
 name of addb summary record init in header file. 3. Implemention of the total
 io size count addb monitor. (NOTE: Its end to end testing is    done. This
 will be part of ST & demo).

These changes were part of ST & demo of addb monitoring.
---
 addb/addb_monitor.c          |  12 ++---
 addb/addb_monitor.h          |  16 +++----
 doc/addb-ids                 |   1 +
 m0t1fs/linux_kernel/m0t1fs.c | 101 ++++++++++++++++++++++++++++++++++++++++++-
 m0t1fs/linux_kernel/m0t1fs.h |  27 +++++++-----
 m0t1fs/m0t1fs_addb.h         |   5 +++
 6 files changed, 138 insertions(+), 24 deletions(-)

diff --git a/addb/addb_monitor.c b/addb/addb_monitor.c
index 5ae0b77..2342f5f 100644
--- a/addb/addb_monitor.c
+++ b/addb/addb_monitor.c
@@ -335,13 +335,15 @@ M0_INTERNAL void m0_addb_monitor_del(struct m0_reqh         *reqh,
 	M0_PRE(m0_addb_monitor_invariant(monitor));
 
 	svc = m0_reqh_service_find(&m0_addb_svc_type, reqh);
-	M0_ASSERT(svc != NULL);
-	addb_svc = bob_of(svc, struct addb_svc, as_reqhs, &addb_svc_bob);
+	if (svc != NULL) {
+		addb_svc = bob_of(svc, struct addb_svc, as_reqhs,
+				  &addb_svc_bob);
 
-	m0_mutex_lock(&reqh->rh_addb_monitoring_ctx.amc_mutex);
-	if (addb_svc->as_pfom.pf_mon == monitor) {
-		addb_svc->as_pfom.pf_mon = NULL;
+		if (addb_svc->as_pfom.pf_mon == monitor) {
+			addb_svc->as_pfom.pf_mon = NULL;
+		}
 	}
+	m0_mutex_lock(&reqh->rh_addb_monitoring_ctx.amc_mutex);
 	addb_mon_tlist_del(monitor);
 	m0_mutex_unlock(&reqh->rh_addb_monitoring_ctx.amc_mutex);
 }
diff --git a/addb/addb_monitor.h b/addb/addb_monitor.h
index a6f3e66..01a21fd 100644
--- a/addb/addb_monitor.h
+++ b/addb/addb_monitor.h
@@ -300,15 +300,15 @@ M0_INTERNAL void m0_addb_monitor_init(struct m0_addb_monitor           *monitor,
 
 /**
  * Init m0_addb_sum_rec (Generic summary record structure)
- * @param sum_rec ADDB summary record to init
- * @param rtype   ADDB record type that this monitor would produce
- * @param mon_data uint64_t array of monitor specific data
- * @param nr No of uint64_t words.
+ * @param rec ADDB summary record to init
+ * @param rt  ADDB record type that this monitor would produce
+ * @param md  uint64_t array of monitor specific data
+ * @param nr  No of uint64_t words.
  */
-M0_INTERNAL void m0_addb_sum_rec_init(struct m0_addb_sum_rec        *sum_rec,
-				      const struct m0_addb_rec_type *rtype,
-				      uint64_t                      *mon_data,
-				      size_t                         nr);
+M0_INTERNAL void m0_addb_monitor_sum_rec_init(struct m0_addb_sum_rec        *rec,
+					      const struct m0_addb_rec_type *rt,
+					      uint64_t                      *md,
+					      size_t                         nr);
 
 /**
  * Fini m0_addb_sum_rec (Generic summary record structure)
diff --git a/doc/addb-ids b/doc/addb-ids
index 471f97f..2cea18f 100644
--- a/doc/addb-ids
+++ b/doc/addb-ids
@@ -147,6 +147,7 @@ value            enum                 variable name         file
    508 M0T1FS_ADDB_RECID_DGIOW_SIZES     m0_addb_rt_m0t1fs_dgiow_sizes
    509 M0T1FS_ADDB_RECID_DGIOR_TIMES     m0_addb_rt_m0t1fs_dgior_times
    510 M0T1FS_ADDB_RECID_DGIOW_TIMES     m0_addb_rt_m0t1fs_dgiow_times
+   511 M0T1FS_ADDB_RECID_MON_IO_SIZE     m0_addb_rt_m0t1fs_mon_io_size
 600-699                                                            layout/layout_addb.h
 800-899                                                            mdstore/mdstore_addb.h
 900-999                                                            cm/cm_addb.h
diff --git a/m0t1fs/linux_kernel/m0t1fs.c b/m0t1fs/linux_kernel/m0t1fs.c
index c207d99..16f9087 100644
--- a/m0t1fs/linux_kernel/m0t1fs.c
+++ b/m0t1fs/linux_kernel/m0t1fs.c
@@ -58,6 +58,9 @@ static void m0t1fs_net_fini(void);
 static int  m0t1fs_rpc_init(void);
 static void m0t1fs_rpc_fini(void);
 
+static int  m0t1fs_addb_mon_init(void);
+static void m0t1fs_addb_mon_fini(void);
+
 static int  m0t1fs_layout_init(void);
 static void m0t1fs_layout_fini(void);
 
@@ -111,6 +114,7 @@ M0_INTERNAL int m0t1fs_init(void)
 	RT_REG(dgiow_sizes);
 	RT_REG(dgior_times);
 	RT_REG(dgiow_times);
+	RT_REG(mon_io_size);
 #undef RT_REG
 
 	m0t1fs_globals.g_laddr = local_addr;
@@ -139,10 +143,14 @@ M0_INTERNAL int m0t1fs_init(void)
 	if (rc != 0)
 		goto net_fini;
 
-	rc = m0t1fs_layout_init();
+	rc = m0t1fs_addb_mon_init();
 	if (rc != 0)
 		goto rpc_fini;
 
+	rc = m0t1fs_layout_init();
+	if (rc != 0)
+		goto addb_mon_fini;
+
 	rc = register_filesystem(&m0t1fs_fs_type);
 	if (rc != 0)
 		goto layout_fini;
@@ -152,6 +160,8 @@ M0_INTERNAL int m0t1fs_init(void)
 
 layout_fini:
 	m0t1fs_layout_fini();
+addb_mon_fini:
+	m0t1fs_addb_mon_fini();
 rpc_fini:
 	m0t1fs_rpc_fini();
 net_fini:
@@ -292,6 +302,95 @@ pool_fini:
 	return rc;
 }
 
+static void m0t1fs_mon_rw_io_watch(const struct m0_addb_monitor *mon,
+				   const struct m0_addb_rec     *rec,
+				   struct m0_reqh               *reqh)
+{
+	struct m0_addb_sum_rec                  *sum_rec;
+	struct m0t1fs_addb_mon_sum_data_io_size *sum_data =
+				&m0t1fs_globals.g_addb_mon_sum_data_rw_io_size;
+
+	if (m0_addb_rec_rid_make(M0_ADDB_BRT_DP, M0T1FS_ADDB_RECID_IO_FINISH)
+	    == rec->ar_rid) {
+		sum_rec = mon->am_ops->amo_sum_rec(mon, reqh);
+		M0_ASSERT(sum_rec != NULL);
+
+		m0_mutex_lock(&sum_rec->asr_mutex);
+		sum_data->sd_io += rec->ar_data.au64s_data[0];
+		sum_rec->asr_dirty = true;
+		m0_mutex_unlock(&sum_rec->asr_mutex);
+
+	}
+}
+
+static struct m0_addb_sum_rec *
+m0t1fs_mon_rw_io_sum_rec(const struct m0_addb_monitor *mon,
+		         struct m0_reqh               *reqh)
+{
+	struct m0_addb_sum_rec *sum_rec;
+
+	m0_rwlock_read_lock(&reqh->rh_rwlock);
+	sum_rec = m0_reqh_lockers_get(reqh,
+			m0t1fs_globals.g_addb_mon_rw_io_size_key);
+	m0_rwlock_read_unlock(&reqh->rh_rwlock);
+
+	return sum_rec;
+}
+
+const struct m0_addb_monitor_ops m0t1fs_addb_mon_rw_io_ops = {
+	.amo_watch   = m0t1fs_mon_rw_io_watch,
+	.amo_sum_rec = m0t1fs_mon_rw_io_sum_rec
+};
+
+static int m0t1fs_addb_mon_init(void)
+{
+	struct m0_addb_sum_rec *sum_rec;
+	struct m0_reqh         *reqh = &m0t1fs_globals.g_reqh;
+	uint32_t               *key = &m0t1fs_globals.g_addb_mon_rw_io_size_key;
+	uint64_t               *sum_data =
+		     (uint64_t *)&m0t1fs_globals.g_addb_mon_sum_data_rw_io_size;
+	uint32_t                sum_rec_nr =
+		     sizeof (m0t1fs_globals.g_addb_mon_sum_data_rw_io_size) /
+					     sizeof (uint64_t);
+	M0_ALLOC_PTR(sum_rec);
+	if (sum_rec == NULL)
+		M0_RETURN(-ENOMEM);
+
+	m0_addb_monitor_init(&m0t1fs_globals.g_addb_mon_rw_io_size,
+			     &m0t1fs_addb_mon_rw_io_ops);
+
+	m0_addb_monitor_sum_rec_init(sum_rec, &m0_addb_rt_m0t1fs_mon_io_size,
+				     sum_data, sum_rec_nr);
+
+	*key = m0_reqh_lockers_allot();
+
+	m0_rwlock_write_lock(&reqh->rh_rwlock);
+	m0_reqh_lockers_set(reqh, *key, sum_rec);
+	m0_rwlock_write_unlock(&reqh->rh_rwlock);
+
+	m0_addb_monitor_add(reqh, &m0t1fs_globals.g_addb_mon_rw_io_size);
+
+	return 0;
+}
+
+static void m0t1fs_addb_mon_fini(void)
+{
+	struct m0_addb_sum_rec *sum_rec;
+	struct m0_addb_monitor *mon = &m0t1fs_globals.g_addb_mon_rw_io_size;
+	struct m0_reqh         *reqh = &m0t1fs_globals.g_reqh;
+
+	sum_rec = mon->am_ops->amo_sum_rec(mon, &m0t1fs_globals.g_reqh);
+
+	m0_addb_monitor_del(reqh, mon);
+
+	m0_rwlock_write_lock(&reqh->rh_rwlock);
+	m0_reqh_lockers_clear(reqh, m0t1fs_globals.g_addb_mon_rw_io_size_key);
+	m0_rwlock_write_unlock(&reqh->rh_rwlock);
+	m0_addb_monitor_sum_rec_fini(sum_rec);
+	m0_free(sum_rec);
+	m0_addb_monitor_fini(mon);
+}
+
 static void m0t1fs_rpc_fini(void)
 {
 	M0_ENTRY();
diff --git a/m0t1fs/linux_kernel/m0t1fs.h b/m0t1fs/linux_kernel/m0t1fs.h
index 4a93a47..83672a5 100644
--- a/m0t1fs/linux_kernel/m0t1fs.h
+++ b/m0t1fs/linux_kernel/m0t1fs.h
@@ -408,20 +408,27 @@ enum {
 	M0T1FS_COB_ID_STRLEN            = 34,
 };
 
+struct m0t1fs_addb_mon_sum_data_io_size {
+	uint64_t sd_io;
+};
+
 /** Anything that is global to m0t1fs module goes in this singleton structure.
     There is only one, global, instance of this type. */
 struct m0t1fs_globals {
-	struct m0_net_xprt       *g_xprt;
+	struct m0_net_xprt                     *g_xprt;
 	/** local endpoint address module parameter */
-	const char               *g_laddr;
-	char                     *g_db_name;
-	struct m0_net_domain      g_ndom;
-	struct m0_rpc_machine     g_rpc_machine;
-	struct m0_reqh            g_reqh;
-	struct m0_dbenv           g_dbenv;
-	struct m0_fol             g_fol;
-	struct m0_net_buffer_pool g_buffer_pool;
-	struct m0_layout_domain   g_layout_dom;
+	const char                             *g_laddr;
+	char                                   *g_db_name;
+	struct m0_net_domain                    g_ndom;
+	struct m0_rpc_machine                   g_rpc_machine;
+	struct m0_reqh                          g_reqh;
+	struct m0_dbenv                         g_dbenv;
+	struct m0_fol                           g_fol;
+	struct m0_net_buffer_pool               g_buffer_pool;
+	struct m0_layout_domain                 g_layout_dom;
+	struct m0_addb_monitor                  g_addb_mon_rw_io_size;
+	uint32_t                                g_addb_mon_rw_io_size_key;
+	struct m0t1fs_addb_mon_sum_data_io_size g_addb_mon_sum_data_rw_io_size;
 };
 
 extern struct m0t1fs_globals m0t1fs_globals;
diff --git a/m0t1fs/m0t1fs_addb.h b/m0t1fs/m0t1fs_addb.h
index c071310..c4c0c37 100644
--- a/m0t1fs/m0t1fs_addb.h
+++ b/m0t1fs/m0t1fs_addb.h
@@ -104,6 +104,7 @@ enum {
 	M0T1FS_ADDB_RECID_DGIOW_SIZES           = 508,
 	M0T1FS_ADDB_RECID_DGIOR_TIMES           = 509,
 	M0T1FS_ADDB_RECID_DGIOW_TIMES           = 510,
+	M0T1FS_ADDB_RECID_MON_IO_SIZE           = 511,
 };
 
 /* Total time required and size for IO */
@@ -115,6 +116,10 @@ M0_ADDB_RT_DP(m0_addb_rt_m0t1fs_cob_io_finish, M0T1FS_ADDB_RECID_COB_IO_FINISH,
 	      "cob_container", "cob_key",
 	      "io_size" /* in bytes (data + parity) */, "time_ns");
 
+/* Number of bytes read, written from this client instance (m0t1fs) */
+M0_ADDB_RT_DP(m0_addb_rt_m0t1fs_mon_io_size, M0T1FS_ADDB_RECID_MON_IO_SIZE,
+	      "total_io_size");
+
 /* m0t1fs root cob */
 M0_ADDB_RT_DP(m0_addb_rt_m0t1fs_root_cob, M0T1FS_ADDB_RECID_ROOT_COB,
 	      "cob_container", "cob_key");
-- 
1.8.3.2


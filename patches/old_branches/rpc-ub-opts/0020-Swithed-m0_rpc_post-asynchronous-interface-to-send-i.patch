From 3e9f6e5d3aacce34f9ab8cc52bd4b955f7716ba2 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Wed, 13 Mar 2013 18:11:42 +0200
Subject: [PATCH 20/24] Swithed m0_rpc_post() asynchronous interface to send
 items.

---
 rpc/ub/ub.c | 104 +++++++++++++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 85 insertions(+), 19 deletions(-)

diff --git a/rpc/ub/ub.c b/rpc/ub/ub.c
index a588b52..45791a4 100644
--- a/rpc/ub/ub.c
+++ b/rpc/ub/ub.c
@@ -20,31 +20,48 @@
  */
 
 #include "lib/ub.h"         /* m0_ub_set */
+#include "lib/misc.h"       /* M0_IN, M0_BITS */
 #include "lib/string.h"     /* strlen, strdup */
 #include "fop/fop.h"        /* m0_fop_alloc */
 #include "net/net.h"        /* m0_net_xprt_init */
 #include "net/bulk_mem.h"   /* m0_net_bulk_mem_xprt */
+#include "net/lnet/lnet.h"  /* m0_net_lnet_xprt */
 #include "ut/cs_service.h"  /* m0_cs_default_stypes */
 #include "rpc/rpclib.h"     /* m0_rpc_server_ctx, m0_rpc_client_ctx */
+#include "rpc/session.h"    /* m0_rpc_session_timedwait */
 #include "rpc/ub/rpc_ub_fops.h"
 
 /* ----------------------------------------------------------------
  * Client and Server definitions
  * ---------------------------------------------------------------- */
 
+#if 0
 #define CLIENT_ENDPOINT_ADDR "127.0.0.1:12345"
 #define SERVER_ENDPOINT_ADDR CLIENT_ENDPOINT_ADDR
 #define SERVER_ENDPOINT      "bulk-mem:" SERVER_ENDPOINT_ADDR
+static struct m0_net_xprt  *g_xprt = &m0_net_bulk_mem_xprt;
+#else
+#define CLIENT_ENDPOINT_ADDR    "0@lo:12345:34:*"
+#define SERVER_ENDPOINT_ADDR    "0@lo:12345:34:1"
+#define SERVER_ENDPOINT         "lnet:" SERVER_ENDPOINT_ADDR
+static struct m0_net_xprt *g_xprt = &m0_net_lnet_xprt;
+#endif
 
 enum {
 	CLIENT_COB_DOM_ID  = 16,
 	SESSION_SLOTS      = 15,
 	MAX_RPCS_IN_FLIGHT = 1,
-	CONNECT_TIMEOUT    = 5,
+	CONNECT_TIMEOUT    = 50,
 	MAX_RETRIES        = 5
 };
 
-static struct m0_net_xprt  *g_xprt = &m0_net_bulk_mem_xprt;
+/* @todo:
+   - move g_cctx, client_net_dom, client_dbenv, client_cob_dom,
+     etc, all client related stuff into a single structure.
+   - Check that slots are really utilized.
+   - define rpc client interface such that it can represent multiple clients.
+ */
+
 static struct m0_net_domain client_net_dom;
 static struct m0_dbenv      client_dbenv;
 static struct m0_cob_domain client_cob_dom;
@@ -52,13 +69,14 @@ static struct m0_cob_domain client_cob_dom;
 #define NAME(ext) "rpc-ub" ext
 static struct m0_rpc_client_ctx g_cctx = {
 	.rcx_net_dom               = &client_net_dom,
-	.rcx_local_addr            = CLIENT_ENDPOINT_ADDR,
-	.rcx_remote_addr           = SERVER_ENDPOINT_ADDR,
-	.rcx_db_name               = NAME(".client-db"),
-	.rcx_dbenv                 = &client_dbenv,
-	.rcx_cob_dom_id            = CLIENT_COB_DOM_ID,
 	.rcx_cob_dom               = &client_cob_dom,
+	.rcx_cob_dom_id            = CLIENT_COB_DOM_ID,
+	.rcx_dbenv                 = &client_dbenv,
+	.rcx_db_name               = NAME(".client-db"),
 	.rcx_nr_slots              = SESSION_SLOTS,
+	/* @todo: the following fields can be used as a prototype: */
+	.rcx_local_addr            = CLIENT_ENDPOINT_ADDR,
+	.rcx_remote_addr           = SERVER_ENDPOINT_ADDR,
 	.rcx_timeout_s             = CONNECT_TIMEOUT,
 	.rcx_max_rpcs_in_flight    = MAX_RPCS_IN_FLIGHT,
 	.rcx_recv_queue_min_length = M0_NET_TM_RECV_QUEUE_DEF_LEN
@@ -81,6 +99,12 @@ static struct m0_rpc_server_ctx g_sctx = {
 };
 #undef NAME
 
+static void ub_item_replied(struct m0_rpc_item *item);
+
+static const struct m0_rpc_item_ops ub_item_ops = {
+	.rio_replied = ub_item_replied
+};
+
 /* ----------------------------------------------------------------
  * RPC Server and Client initialisation
  *
@@ -119,13 +143,45 @@ static void _stop(void)
 	m0_rpc_ub_fops_fini();
 }
 
-static void fop_send(struct m0_rpc_session *session)
+static void ub_item_replied(struct m0_rpc_item *item)
+{
+	struct ub_resp *resp;
+	struct ub_req  *req;
+
+	M0_UB_ASSERT(item->ri_error == 0);
+	M0_UB_ASSERT(item->ri_reply != 0);
+
+	req  = m0_fop_data(m0_rpc_item_to_fop(item));
+	resp = m0_fop_data(m0_rpc_item_to_fop(item->ri_reply));
+	M0_UB_ASSERT(resp->ur_seqn == req->ur_seqn);
+	M0_UB_ASSERT(m0_buf_eq(&resp->ur_data, &req->ur_data));
+}
+
+static int client_post(struct m0_fop *fop, struct m0_rpc_session *session)
+{
+	/* @todo: parametrise this to test resend after timeout ??? */
+	int                 deadline = 0;
+	struct m0_rpc_item *item;
+
+	M0_PRE(fop != NULL);
+	M0_PRE(session != NULL);
+
+	item              = &fop->f_item;
+	item->ri_ops      = &ub_item_ops;
+	item->ri_session  = session;
+	item->ri_deadline = deadline;
+	/* @todo: parametrise this for tests */
+	item->ri_prio     = M0_RPC_ITEM_PRIO_MID;
+
+	return m0_rpc_post(item);
+}
+
+static void fop_send(struct m0_rpc_session *session, size_t seqn)
 {
 	int             rc;
 	const char     *data = "RPC UB data";
 	struct m0_fop  *fop;
 	struct ub_req  *req;
-	struct ub_resp *resp;
 
 	fop = m0_fop_alloc(&m0_rpc_ub_req_fopt, NULL);
 	M0_UB_ASSERT(fop != NULL);
@@ -135,17 +191,10 @@ static void fop_send(struct m0_rpc_session *session)
 	m0_buf_init(&req->ur_data, strdup(data), strlen(data));
 
 	fop->f_item.ri_nr_sent_max = MAX_RETRIES;
-	rc = m0_rpc_client_call(fop, session, NULL, 0);
-
+	rc = client_post(fop, session);
 	M0_UB_ASSERT(rc == 0);
-	M0_UB_ASSERT(fop->f_item.ri_error == 0);
-	M0_UB_ASSERT(fop->f_item.ri_reply != 0);
 
-	resp = m0_fop_data(m0_rpc_item_to_fop(fop->f_item.ri_reply));
-	M0_UB_ASSERT(resp->ur_seqn == req->ur_seqn);
-	M0_UB_ASSERT(m0_buf_eq(&resp->ur_data, &req->ur_data));
-
-	m0_fop_put(fop);
+	/* m0_fop_put(fop); */
 }
 
 /* ----------------------------------------------------------------
@@ -154,7 +203,24 @@ static void fop_send(struct m0_rpc_session *session)
 
 static void XXX_name_me(int iter M0_UNUSED)
 {
-	fop_send(&g_cctx.rcx_session);
+	int rc;
+	size_t i;
+	struct m0_rpc_session *session = &g_cctx.rcx_session;
+
+	/* @todo: For some reason the followng error may occur here:
+	   mero: NOTICE : [rpc/slot.c:584:m0_rpc_slot_reply_received] < rc=-71.
+	   Needs investigation!
+	 */
+	for (i = 0; i < 5; ++i)
+		fop_send(session, i);
+
+	rc = m0_rpc_session_timedwait(session, M0_BITS(M0_RPC_SESSION_IDLE,
+						       M0_RPC_SESSION_FAILED),
+				      M0_TIME_NEVER);
+
+	M0_UB_ASSERT(M0_IN(session->s_sm.sm_state, (M0_RPC_SESSION_IDLE,
+						    M0_RPC_SESSION_FAILED)) &&
+		     rc == 0);
 }
 
 struct m0_ub_set m0_rpc_ub = {
-- 
1.8.3.2


From 6fbc1c3b2ae9e05385d874b48120a12064bdc648 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Fri, 15 Mar 2013 12:38:08 +0200
Subject: [PATCH 24/24] Updated lib/ub to parse the options of given set.

---
 lib/ub.c        | 11 ++++++++++
 lib/ub.h        | 19 +++++++++++-----
 rpc/ub/ub.c     | 12 +++++++++++
 utils/ub_main.c | 67 ++++++++++++++++++++++++++++++++++++---------------------
 4 files changed, 79 insertions(+), 30 deletions(-)

diff --git a/lib/ub.c b/lib/ub.c
index 025d0b3..6c7986e 100644
--- a/lib/ub.c
+++ b/lib/ub.c
@@ -48,6 +48,17 @@ M0_INTERNAL void m0_ub_set_print(void)
 		printf("%s\n", set->us_name);
 }
 
+M0_INTERNAL struct m0_ub_set *m0_ub_set_lookup(const char *name)
+{
+	struct m0_ub_set *set;
+
+	for (set = last; set != NULL; set = set->us_prev)
+		if (strcmp(set->us_name, name) == 0)
+			break;
+
+	return set;
+}
+
 M0_INTERNAL int m0_ub_set_select(const char *name)
 {
 	struct m0_ub_set *set;
diff --git a/lib/ub.h b/lib/ub.h
index b24d944..3a5f2e5 100644
--- a/lib/ub.h
+++ b/lib/ub.h
@@ -25,6 +25,7 @@
 #include "lib/types.h"
 #include "lib/cdefs.h"
 #include "lib/assert.h"
+#include "lib/getopts.h"
 
 /**
    @defgroup ub Unit Benchmarking.
@@ -67,14 +68,17 @@ struct m0_ub_bench {
  */
 struct m0_ub_set {
 	/** Name of a set, has to be unique. */
-	const char        *us_name;
+	const char            *us_name;
 	/** Function to prepare tests in set. */
-	void             (*us_init)(void);
+	void                 (*us_init)(void);
 	/** Function to free tests in set. */
-	void             (*us_fini)(void);
-	struct m0_ub_set  *us_prev;
+	void                 (*us_fini)(void);
+	struct m0_ub_set      *us_prev;
+	/** Benchmark options */
+	const
+	struct m0_getopts_opt *us_options;
 	/** Benchmarks in the set. */
-	struct m0_ub_bench us_run[];
+	struct m0_ub_bench     us_run[];
 };
 
 /**
@@ -93,6 +97,11 @@ M0_INTERNAL void m0_ub_set_print(void);
 M0_INTERNAL int m0_ub_set_select(const char *name);
 
 /**
+ * @todo: doc.
+ */
+M0_INTERNAL struct m0_ub_set *m0_ub_set_lookup(const char *name);
+
+/**
  * Adds given unit set into the unit benchmark.
  */
 M0_INTERNAL void m0_ub_set_add(struct m0_ub_set *set);
diff --git a/rpc/ub/ub.c b/rpc/ub/ub.c
index 0a14cab..ed13bea 100644
--- a/rpc/ub/ub.c
+++ b/rpc/ub/ub.c
@@ -271,10 +271,22 @@ static void XXX_name_me(int iter M0_UNUSED)
 		     rc == 0);
 }
 
+static void parse(void)
+{
+	printf("parsed\n");
+}
+
+static const struct m0_getopts_opt ub_options[] =
+{
+	M0_VOIDARG('X', "XXX options", parse),
+	M0_VOIDARG('.', NULL, NULL)
+};
+
 struct m0_ub_set m0_rpc_ub = {
 	.us_name = "rpc-ub",
 	.us_init = _start,
 	.us_fini = _stop,
+	.us_options = ub_options,
 	.us_run  = {
 		{ .ub_name  = "XXX",
 		  .ub_iter  = 1,
diff --git a/utils/ub_main.c b/utils/ub_main.c
index 1ad7296..f19068e 100644
--- a/utils/ub_main.c
+++ b/utils/ub_main.c
@@ -52,41 +52,57 @@ struct ub_args {
 	bool        ua_ub_list;
 	uint32_t    ua_rounds;
 	char       *ua_name;
-	char       *ua_args;
 };
 
 static void ub_args_fini(struct ub_args *args)
 {
-	m0_free(args->ua_args);
 	m0_free(args->ua_name);
 }
 
 static int ub_args_parse(int argc, char *argv[], struct ub_args *out)
 {
+	int i;
+	int rc;
+	struct m0_ub_set *set;
+	struct m0_getopts_opt options[64];
+	const struct m0_getopts_opt suite_opts[] = {
+		M0_HELPARG('h'),
+		M0_NUMBERARG('r', "Number of rounds UB has to be run",
+			     LAMBDA(void, (int64_t rounds) {
+					     out->ua_rounds = rounds;
+				     })),
+		M0_VOIDARG('l', "List available benchmark tests",
+			   LAMBDA(void, (void) {
+					   out->ua_ub_list = true;
+				   })),
+		M0_STRINGARG('t', "Benchmark test name to run, "
+			     "the only one test selection is possible",
+			     LAMBDA(void, (const char *str) {
+					     out->ua_name = strdup(str);
+				     }))
+	};
+
+	M0_CASSERT(ARRAY_SIZE(suite_opts) < ARRAY_SIZE(options));
+
 	out->ua_rounds = 1;
 	out->ua_name = NULL;
-	out->ua_args = NULL;
 	out->ua_ub_list = false;
 
-	return M0_GETOPTS("ub", argc, argv,
-		  M0_HELPARG('h'),
-		  M0_NUMBERARG('r', "Number of rounds UB has to be run",
-			       LAMBDA(void, (int64_t rounds) {
-					       out->ua_rounds = rounds;
-				       })),
-		  M0_VOIDARG('l', "List available benchmark tests",
-			     LAMBDA(void, (void) {
-					     out->ua_ub_list = true;
-				     })),
-		  M0_STRINGARG('t', "Benchmark test name to run",
-			       LAMBDA(void, (const char *str) {
-					       out->ua_name = strdup(str);
-				       })),
-		  M0_STRINGARG('a', "Benchmark test args",
-			       LAMBDA(void, (const char *str) {
-					       out->ua_args = strdup(str);
-				       }))
-		);
+	/* @todo: Noisy output on stderr occurs here; ask for a silent getopt? */
+	rc = m0_getopts("ub", argc, argv, suite_opts, ARRAY_SIZE(suite_opts));
+	set = out->ua_name == NULL ? NULL : m0_ub_set_lookup(out->ua_name);
+	if (set == NULL || set->us_options == NULL)
+		return rc;
+
+	for (i = 0; i < ARRAY_SIZE(suite_opts); ++i)
+		options[i] = suite_opts[i];
+
+	for (i = 0; set->us_options[i].go_desc != NULL; ++i) {
+		M0_ASSERT(i+ARRAY_SIZE(suite_opts) < ARRAY_SIZE(options));
+		options[i+ARRAY_SIZE(suite_opts)] = set->us_options[i];
+	}
+
+	return m0_getopts("ub", argc, argv, options, i+ARRAY_SIZE(suite_opts));
 }
 
 static void ub_add(const struct ub_args *args)
@@ -133,11 +149,12 @@ int main(int argc, char *argv[])
 	if (rc != 0)
 		return rc;
 
+	ub_add(&args);
 	rc = ub_args_parse(argc, argv, &args);
-	if (rc == 0) {
-		ub_add(&args);
+
+	if (rc == 0)
 		ub_run(&args);
-	}
+
 	ub_args_fini(&args);
 	unit_end(UB_SANDBOX, false);
 
-- 
1.8.3.2


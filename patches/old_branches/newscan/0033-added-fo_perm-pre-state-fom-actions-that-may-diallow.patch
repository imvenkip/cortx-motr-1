From 8358adec7be874ae95510325cf38acbf6b117389 Mon Sep 17 00:00:00 2001
From: Yuriy Umanets <yuriy_umanets@xyratex.com>
Date: Wed, 30 Mar 2011 07:43:06 -0600
Subject: [PATCH 033/158] - added ->fo_perm() - pre-state fom actions that may
 diallow doing fo_state (metadata ops permissions). This allows to do this
 once and handle errors in reqh instead of doing it again and again in
 fo_state; - added ->fo_fini() - free memory assosiated with fom. This is
 called from reqh again and does not need fo_state doing this. It is also used
 in reqh errors handling; - killed dummy_reqh(); - related changes in
 mdservice and ioservice.

---
 fop/fom.h           |  13 +++--
 ioservice/io_foms.c |  41 ----------------
 ioservice/io_foms.h |  16 ++----
 ioservice/io_fops.c |   9 ++--
 ioservice/io_fops.h |   7 ++-
 mdservice/md_foms.c | 137 +++++++++++++++++++---------------------------------
 reqh/reqh.c         |   9 ++++
 stob/ut/server.c    |  14 ++----
 8 files changed, 88 insertions(+), 158 deletions(-)

diff --git a/fop/fom.h b/fop/fom.h
index b88b372..dcaff34 100644
--- a/fop/fom.h
+++ b/fop/fom.h
@@ -245,13 +245,20 @@ struct c2_fom_type_ops {
 
 /** Fom operations vector. */
 struct c2_fom_ops {
-	/** Finalise this fom. */
-	void (*fo_fini)(struct c2_fom *fom);
+        /**
+           Execute fom fini actions. Free memory if needed.
+        */
+        void (*fo_fini)(struct c2_fom *fom);
+        /**
+           Execute pre-state actions. Operation permissions check
+           may be done this way in reqh and errors handled.
+        */
+        int  (*fo_perm)(struct c2_fom *fom);
 	/**
 	    Execute the next state transition.
 
 	    Returns value of enum c2_fom_state_outcome or error code.
-	 */
+	*/
 	int  (*fo_state)(struct c2_fom *fom);
 };
 
diff --git a/ioservice/io_foms.c b/ioservice/io_foms.c
index 35b9d9c..62f72f1 100644
--- a/ioservice/io_foms.c
+++ b/ioservice/io_foms.c
@@ -344,7 +344,6 @@ int c2_fom_cob_rwv_state(struct c2_fom *fom)
 
 	/* This goes into DONE phase */
 	fom_obj->fcrw_gen.fo_phase = FOPH_DONE;
-	c2_fom_cob_rwv_fini(&fom_obj->fcrw_gen);
 	return FSO_AGAIN;
 }
 
@@ -357,46 +356,6 @@ void c2_fom_cob_rwv_fini(struct c2_fom *fom)
 	c2_free(fom_ctx);
 }
 
-/**
- * A dummy request handler API to handle incoming FOPs.
- * Actual reqh will be used in future.
- */
-int c2_dummy_req_handler(struct c2_service *s, struct c2_fop *fop,
-			 void *cookie, struct c2_fol *fol, 
-			 struct c2_stob_domain *dom)
-{
-	struct c2_fop_ctx 	ctx;
-	int			result;
-	struct c2_fom	       *fom = NULL;
-
-	ctx.ft_service = s;
-	ctx.fc_cookie  = cookie;
-
-	/*
-	 * Reqh generic phases will be run here that will do 
-	 * the standard actions like authentication, authorization,
-	 * resource allocation, locking &c.
-	 */
-
-	/* 
-	 * This init function will allocate memory for a c2_fom_cob_rwv
-	 * structure. 
-	 * It will find out the respective c2_fom_type object
-	 * for the given c2_fop_type object using a mapping function
-	 * and will embed the c2_fom_type object in c2_fop_type object.
-	 * It will populate respective fields and do the necessary
-	 * associations with fop and fom.
-	 */
-	result = fop->f_type->ft_ops->fto_fom_init(fop, &fom);
-	C2_ASSERT(fom != NULL);
-
-	fom->fo_fop_ctx = &ctx;
-
-	/* 
-	 * Start the FOM.
-	 */
-	return fom->fo_ops->fo_state(fom);
-}
 #endif
 
 /** @} end of io_foms */
diff --git a/ioservice/io_foms.h b/ioservice/io_foms.h
index 7a2504b..7e82eb7 100644
--- a/ioservice/io_foms.h
+++ b/ioservice/io_foms.h
@@ -83,6 +83,11 @@ struct c2_fom_cob_rwv {
  */
 int c2_fom_cob_rwv_state(struct c2_fom *fom); 
 
+/**
+   Free memory in passed @fom.
+*/
+void c2_fom_cob_rwv_fini(struct c2_fom *fom);
+
 /** 
  * The various phases for readv FOM. 
  * Not used as of now. Will be used once the 
@@ -109,17 +114,6 @@ extern struct c2_fom_type c2_fom_cob_readv_mopt;
 extern struct c2_fom_type c2_fom_cob_writev_mopt;
 extern struct c2_fom_type *fom_types[];
 
-#ifndef __KERNEL__
-/**
- * A dummy request handler API to handle incoming FOPs.
- * Actual reqh will be used in future.
- */
-int c2_dummy_req_handler(struct c2_service *s, struct c2_fop *fop,
-			 void *cookie, struct c2_fol *fol, 
-			 struct c2_stob_domain *dom);
-#endif
-
-
 /** @} end of io_foms */
 
 /* __COLIBRI_FOP_FOM_OPERATIONS_H__ */
diff --git a/ioservice/io_fops.c b/ioservice/io_fops.c
index d5a1b8b..0a85e48 100644
--- a/ioservice/io_fops.c
+++ b/ioservice/io_fops.c
@@ -55,21 +55,18 @@ struct c2_fom;
 
 /** Generic ops object for c2_fop_cob_writev */
 struct c2_fom_ops c2_fom_write_ops = {
-	.fo_fini = NULL,
 	.fo_state = c2_fom_cob_rwv_state,
+	.fo_fini  = c2_fom_cob_rwv_fini
 };
 
 /** Generic ops object for c2_fop_cob_readv */
 struct c2_fom_ops c2_fom_read_ops = {
-	.fo_fini = NULL,
 	.fo_state = c2_fom_cob_rwv_state,
+	.fo_fini  = c2_fom_cob_rwv_fini
 };
 
 /** Generic ops object for readv and writev reply FOPs */
-struct c2_fom_ops c2_fom_io_rep = {
-	.fo_fini = NULL,
-	.fo_state = NULL,
-};
+struct c2_fom_ops c2_fom_io_rep = {0,};
 
 #else /* #ifdef __KERNEL__ */
 
diff --git a/ioservice/io_fops.h b/ioservice/io_fops.h
index 4f0864c..8168f70 100644
--- a/ioservice/io_fops.h
+++ b/ioservice/io_fops.h
@@ -59,11 +59,16 @@ int c2_fop_cob_writev_fom_init(struct c2_fop *fop, struct c2_fom **fom);
 int c2_fop_cob_io_rep_fom_init(struct c2_fop *fop, struct c2_fom **fom);
 
 /** 
- * State handler function for writev and readv FOPs.
+   State handler function for writev and readv FOPs.
  */
 int c2_fom_cob_rwv_state(struct c2_fom *fom);
 
 /**
+   Free memory on passed @fom.
+*/
+void c2_fom_cob_rwv_fini(struct c2_fom *fom);
+
+/**
  * Placeholder declarations for c2t1fs code.
  */
 #ifndef __KERNEL__
diff --git a/mdservice/md_foms.c b/mdservice/md_foms.c
index b207192..67a7c89 100644
--- a/mdservice/md_foms.c
+++ b/mdservice/md_foms.c
@@ -21,8 +21,6 @@
 
 #include "mdstore/mdstore.h"
 
-void c2_md_req_fom_fini(struct c2_fom *fom);
-
 /**
    Make in-memory fid from wire fid (wid).
 */
@@ -58,13 +56,12 @@ void c2_md_make_oikey(struct c2_cob_oikey *oikey, struct c2_fop_fid *fid,
         oikey->cok_linkno = linkno;
 }
 
-static int c2_md_create_permissions(struct c2_fop_create *req, 
-                                    struct c2_fop_ctx *ctx)
+static int c2_md_create_fom_perm(struct c2_fom *fom)
 {
         return 0;
 }
 
-static int c2_md_fom_create_state(struct c2_fom *fom)
+static int c2_md_create_fom_state(struct c2_fom *fom)
 {
         struct c2_site           *site;
         struct c2_cob            *cob;
@@ -97,26 +94,19 @@ static int c2_md_fom_create_state(struct c2_fom *fom)
         req = c2_fop_data(fop);
         rep = c2_fop_data(fop_rep);
 
-        rc = c2_md_create_permissions(req, ctx);
-        if (rc) {
-                c2_cob_put(cob);
-                goto out;
-        }
         rc = c2_md_store_create(site->s_mdstore, cob, req, rep, ctx);
         c2_cob_put(cob);
 out:
 	fom->fo_phase = rc ? FOPH_FAILED : FOPH_DONE;
-	c2_md_req_fom_fini(fom);
         return FSO_AGAIN;
 }
 
-static int c2_md_link_permissions(struct c2_fop_link *req, 
-                                  struct c2_fop_ctx *ctx)
+static int c2_md_link_fom_perm(struct c2_fom *fom)
 {
         return 0;
 }
 
-static int c2_md_fom_link_state(struct c2_fom *fom)
+static int c2_md_link_fom_state(struct c2_fom *fom)
 {
         struct c2_fop_cob        *body;
         struct c2_site           *site;
@@ -147,10 +137,6 @@ static int c2_md_fom_link_state(struct c2_fom *fom)
         req = c2_fop_data(fop);
         body = &req->l_body;
 
-        rc = c2_md_link_permissions(req, ctx);
-        if (rc)
-                goto out;
-
         c2_md_make_fid(&fid, &body->b_tfid);
 
         rc = c2_md_store_locate(site->s_mdstore, &fid, &cob, 
@@ -165,17 +151,15 @@ static int c2_md_fom_link_state(struct c2_fom *fom)
         c2_cob_put(cob);
 out:
 	fom->fo_phase = rc ? FOPH_FAILED : FOPH_DONE;
-	c2_md_req_fom_fini(fom);
         return FSO_AGAIN;
 }
 
-static int c2_md_unlink_permissions(struct c2_fop_unlink *req, 
-                                    struct c2_fop_ctx *ctx)
+static int c2_md_unlink_fom_perm(struct c2_fom *fom)
 {
         return 0;
 }
 
-static int c2_md_fom_unlink_state(struct c2_fom *fom)
+static int c2_md_unlink_fom_state(struct c2_fom *fom)
 {
         struct c2_fop_cob        *body;
         struct c2_site           *site;
@@ -206,10 +190,6 @@ static int c2_md_fom_unlink_state(struct c2_fom *fom)
         req = c2_fop_data(fop);
         body = &req->u_body;
 
-        rc = c2_md_unlink_permissions(req, ctx);
-        if (rc)
-                goto out;
-
         c2_md_make_fid(&fid, &body->b_tfid);
 
         rc = c2_md_store_locate(site->s_mdstore, &fid, &cob, 
@@ -224,17 +204,15 @@ static int c2_md_fom_unlink_state(struct c2_fom *fom)
         c2_cob_put(cob);
 out:
 	fom->fo_phase = rc ? FOPH_FAILED : FOPH_DONE;
-	c2_md_req_fom_fini(fom);
         return FSO_AGAIN;
 }
 
-static int c2_md_rename_permissions(struct c2_fop_rename *req, 
-                                    struct c2_fop_ctx *ctx)
+static int c2_md_rename_fom_perm(struct c2_fom *fom)
 {
         return 0;
 }
 
-static int c2_md_fom_rename_state(struct c2_fom *fom)
+static int c2_md_rename_fom_state(struct c2_fom *fom)
 {
         struct c2_fop_cob        *body;
         struct c2_site           *site;
@@ -265,10 +243,6 @@ static int c2_md_fom_rename_state(struct c2_fom *fom)
         req = c2_fop_data(fop);
         body = &req->r_sbody;
 
-        rc = c2_md_rename_permissions(req, ctx);
-        if (rc)
-                goto out;
-
         c2_md_make_fid(&fid, &body->b_tfid);
 
         rc = c2_md_store_locate(site->s_mdstore, &fid, &cob, 
@@ -283,17 +257,15 @@ static int c2_md_fom_rename_state(struct c2_fom *fom)
         c2_cob_put(cob);
 out:
 	fom->fo_phase = rc ? FOPH_FAILED : FOPH_DONE;
-	c2_md_req_fom_fini(fom);
         return FSO_AGAIN;
 }
 
-static int c2_md_open_permissions(struct c2_fop_open *req, 
-                                  struct c2_fop_ctx *ctx)
+static int c2_md_open_fom_perm(struct c2_fom *fom)
 {
         return 0;
 }
 
-static int c2_md_fom_open_state(struct c2_fom *fom)
+static int c2_md_open_fom_state(struct c2_fom *fom)
 {
         struct c2_fop_cob        *body;
         struct c2_site           *site;
@@ -324,10 +296,6 @@ static int c2_md_fom_open_state(struct c2_fom *fom)
         req = c2_fop_data(fop);
         body = &req->o_body;
 
-        rc = c2_md_open_permissions(req, ctx);
-        if (rc)
-                goto out;
-
         c2_md_make_fid(&fid, &body->b_tfid);
 
         rc = c2_md_store_locate(site->s_mdstore, &fid, &cob, 
@@ -347,11 +315,10 @@ static int c2_md_fom_open_state(struct c2_fom *fom)
         c2_cob_put(cob);
 out:
 	fom->fo_phase = rc ? FOPH_FAILED : FOPH_DONE;
-	c2_md_req_fom_fini(fom);
         return FSO_AGAIN;
 }
 
-static int c2_md_fom_close_state(struct c2_fom *fom)
+static int c2_md_close_fom_state(struct c2_fom *fom)
 {
         struct c2_fop_cob        *body;
         struct c2_site           *site;
@@ -395,17 +362,15 @@ static int c2_md_fom_close_state(struct c2_fom *fom)
         c2_cob_put(cob);
 out:
 	fom->fo_phase = rc ? FOPH_FAILED : FOPH_DONE;
-	c2_md_req_fom_fini(fom);
         return FSO_AGAIN;
 }
 
-static int c2_md_setattr_permissions(struct c2_fop_setattr *req, 
-                                     struct c2_fop_ctx *ctx)
+static int c2_md_setattr_fom_perm(struct c2_fom *fom)
 {
         return 0;
 }
 
-static int c2_md_fom_setattr_state(struct c2_fom *fom)
+static int c2_md_setattr_fom_state(struct c2_fom *fom)
 {
         struct c2_fop_cob        *body;
         struct c2_site           *site;
@@ -436,10 +401,6 @@ static int c2_md_fom_setattr_state(struct c2_fom *fom)
         req = c2_fop_data(fop);
         body = &req->s_body;
 
-        rc = c2_md_setattr_permissions(req, ctx);
-        if (rc)
-                goto out;
-
         c2_md_make_fid(&fid, &body->b_tfid);
 
         rc = c2_md_store_locate(site->s_mdstore, &fid, &cob, 
@@ -454,17 +415,15 @@ static int c2_md_fom_setattr_state(struct c2_fom *fom)
         c2_cob_put(cob);
 out:
 	fom->fo_phase = rc ? FOPH_FAILED : FOPH_DONE;
-	c2_md_req_fom_fini(fom);
         return FSO_AGAIN;
 }
 
-static int c2_md_getattr_permissions(struct c2_fop_getattr *req, 
-                                     struct c2_fop_ctx *ctx)
+static int c2_md_getattr_fom_perm(struct c2_fom *fom)
 {
         return 0;
 }
 
-static int c2_md_fom_getattr_state(struct c2_fom *fom)
+static int c2_md_getattr_fom_state(struct c2_fom *fom)
 {
         struct c2_fop_cob        *body;
         struct c2_site           *site;
@@ -495,10 +454,6 @@ static int c2_md_fom_getattr_state(struct c2_fom *fom)
         req = c2_fop_data(fop);
         body = &req->g_body;
 
-        rc = c2_md_getattr_permissions(req, ctx);
-        if (rc)
-                goto out;
-
         c2_md_make_fid(&fid, &body->b_tfid);
 
         rc = c2_md_store_locate(site->s_mdstore, &fid, &cob, 
@@ -513,17 +468,15 @@ static int c2_md_fom_getattr_state(struct c2_fom *fom)
         c2_cob_put(cob);
 out:
 	fom->fo_phase = rc ? FOPH_FAILED : FOPH_DONE;
-	c2_md_req_fom_fini(fom);
         return FSO_AGAIN;
 }
 
-static int c2_md_readdir_permissions(struct c2_fop_readdir *req, 
-                                     struct c2_fop_ctx *ctx)
+static int c2_md_readdir_fom_perm(struct c2_fom *fom)
 {
         return 0;
 }
 
-static int c2_md_fom_readdir_state(struct c2_fom *fom)
+static int c2_md_readdir_fom_state(struct c2_fom *fom)
 {
         struct c2_fop_cob        *body;
         struct c2_site           *site;
@@ -554,10 +507,6 @@ static int c2_md_fom_readdir_state(struct c2_fom *fom)
         req = c2_fop_data(fop);
         body = &req->r_body;
 
-        rc = c2_md_readdir_permissions(req, ctx);
-        if (rc)
-                goto out;
-
         c2_md_make_fid(&fid, &body->b_tfid);
 
         rc = c2_md_store_locate(site->s_mdstore, &fid, &cob, 
@@ -572,44 +521,68 @@ static int c2_md_fom_readdir_state(struct c2_fom *fom)
         c2_cob_put(cob);
 out:
 	fom->fo_phase = rc ? FOPH_FAILED : FOPH_DONE;
-	c2_md_req_fom_fini(fom);
         return FSO_AGAIN;
 }
 
+static void c2_md_req_fom_fini(struct c2_fom *fom)
+{
+        struct c2_fom_md *fom_obj;
+        
+        fom_obj = container_of(fom, struct c2_fom_md, fm_fom);
+        c2_free(fom_obj);
+}
+
 static struct c2_fom_ops c2_md_fom_create_ops = {
-	.fo_state = c2_md_fom_create_state
+	.fo_state = c2_md_create_fom_state,
+	.fo_perm  = c2_md_create_fom_perm,
+	.fo_fini  = c2_md_req_fom_fini
 };
 
 static struct c2_fom_ops c2_md_fom_link_ops = {
-	.fo_state = c2_md_fom_link_state
+	.fo_state = c2_md_link_fom_state,
+	.fo_perm  = c2_md_link_fom_perm,
+	.fo_fini  = c2_md_req_fom_fini
 };
 
 static struct c2_fom_ops c2_md_fom_unlink_ops = {
-	.fo_state = c2_md_fom_unlink_state
+	.fo_state = c2_md_unlink_fom_state,
+	.fo_perm  = c2_md_unlink_fom_perm,
+	.fo_fini  = c2_md_req_fom_fini
 };
 
 static struct c2_fom_ops c2_md_fom_rename_ops = {
-	.fo_state = c2_md_fom_rename_state
+	.fo_state = c2_md_rename_fom_state,
+	.fo_perm  = c2_md_rename_fom_perm,
+	.fo_fini  = c2_md_req_fom_fini
 };
 
 static struct c2_fom_ops c2_md_fom_open_ops = {
-	.fo_state = c2_md_fom_open_state
+	.fo_state = c2_md_open_fom_state,
+	.fo_perm  = c2_md_open_fom_perm,
+	.fo_fini  = c2_md_req_fom_fini
 };
 
 static struct c2_fom_ops c2_md_fom_close_ops = {
-	.fo_state = c2_md_fom_close_state
+	.fo_state = c2_md_close_fom_state,
+	.fo_fini  = c2_md_req_fom_fini
 };
 
 static struct c2_fom_ops c2_md_fom_setattr_ops = {
-	.fo_state = c2_md_fom_setattr_state
+	.fo_state = c2_md_setattr_fom_state,
+	.fo_perm  = c2_md_setattr_fom_perm,
+	.fo_fini  = c2_md_req_fom_fini
 };
 
 static struct c2_fom_ops c2_md_fom_getattr_ops = {
-	.fo_state = c2_md_fom_getattr_state
+	.fo_state = c2_md_getattr_fom_state,
+	.fo_perm  = c2_md_getattr_fom_perm,
+	.fo_fini  = c2_md_req_fom_fini
 };
 
 static struct c2_fom_ops c2_md_fom_readdir_ops = {
-	.fo_state = c2_md_fom_readdir_state
+	.fo_state = c2_md_readdir_fom_state,
+	.fo_perm  = c2_md_readdir_fom_perm,
+	.fo_fini  = c2_md_req_fom_fini
 };
 
 static struct c2_fom_type c2_md_fom_type_pch = {0,};
@@ -619,14 +592,6 @@ int c2_md_rep_fom_init(struct c2_fop *fop, struct c2_fom **m)
         return 0;
 }
 
-void c2_md_req_fom_fini(struct c2_fom *fom)
-{
-        struct c2_fom_md *fom_obj;
-        
-        fom_obj = container_of(fom, struct c2_fom_md, fm_fom);
-        c2_free(fom_obj);
-}
-
 int c2_md_req_fom_init(struct c2_fop *fop, struct c2_fom **m)
 {
 	struct c2_fom           *fom;
diff --git a/reqh/reqh.c b/reqh/reqh.c
index e52b058..5ee89ae 100644
--- a/reqh/reqh.c
+++ b/reqh/reqh.c
@@ -74,11 +74,20 @@ int c2_reqh_fop_handle(struct c2_reqh *reqh, struct c2_fop *fop)
 	C2_ASSERT(fom != NULL);
 	fom->fo_fop_ctx = &ctx;
 
+        if (fom->fo_ops->fo_perm) {
+                result = fom->fo_ops->fo_perm(fom);
+                if (result)
+                        goto out_fini;
+        }
+
 	/* 
 	 * Start the FOM.
 	 */
 	result = fom->fo_ops->fo_state(fom);
 
+out_fini:
+        if (fom->fo_ops->fo_fini)
+                fom->fo_ops->fo_fini(fom);
 out:
         if (result)
                 c2_db_tx_abort(&tx.tx_dbtx);
diff --git a/stob/ut/server.c b/stob/ut/server.c
index 042ff22..d0b398c 100644
--- a/stob/ut/server.c
+++ b/stob/ut/server.c
@@ -303,18 +303,12 @@ static int io_handler(struct c2_service *service, struct c2_fop *fop,
 	/* 
 	 * FOMs are implemented only for read and write operations 
 	 */
-	if((fop->f_type->ft_code >= c2_io_service_readv_opcode))
-	{
-	        result = c2_reqh_fop_handle(NULL/*reqh*/, fop);
-//		result = c2_dummy_req_handler(service, fop, cookie, &fol, dom);
+	if ((fop->f_type->ft_code >= c2_io_service_readv_opcode)) {
+	        result = c2_reqh_fop_handle(NULL/*service->reqh*/, fop);
 		return result;
+	} else {
+	        result = fop->f_type->ft_ops->fto_execute(fop, &ctx);
 	}
-	else
-/*
-	printf("Got fop: code = %d, name = %s\n",
-			 fop->f_type->ft_code, fop->f_type->ft_name);
-*/
-	result = fop->f_type->ft_ops->fto_execute(fop, &ctx);
 	SERVER_ADDB_ADD("io_handler", result);
 	return result;
 }
-- 
1.8.3.2


From 628af0703cfe08267e29009fe1aa512add58982c Mon Sep 17 00:00:00 2001
From: Yuriy Umanets <yuriy_umanets@xyratex.com>
Date: Tue, 1 Mar 2011 09:21:10 -0700
Subject: [PATCH 018/158] - cob and mdstore should use fids, not stobids; -
 some cleanups in mdstore to use conversion functions.

---
 cob/cob.c         |  98 ++++++++++++++++++++----------------
 cob/cob.h         |  16 +++---
 cob/ut/cob.c      |  33 ++++++-------
 fid/fid.c         |  24 +++++++++
 fid/fid.h         |   2 +
 mdstore/mdstore.c | 145 +++++++++++++++++++++++++++++-------------------------
 mdstore/mdstore.h |   3 +-
 7 files changed, 186 insertions(+), 135 deletions(-)

diff --git a/cob/cob.c b/cob/cob.c
index 94560e5..b3b7219 100644
--- a/cob/cob.c
+++ b/cob/cob.c
@@ -29,20 +29,31 @@ static const struct c2_addb_loc cob_addb_loc = {
 	.al_name = "cob"
 };
 
-/** 
-   Namespace table definition 
-*/
-static int ns_cmp(struct c2_table *table, const void *key0, const void *key1)
+int c2_cob_nskey_cmp(const struct c2_cob_nskey *k0, 
+                     const struct c2_cob_nskey *k1)
 {
-	const struct c2_cob_nskey *cnk0 = key0;
-	const struct c2_cob_nskey *cnk1 = key1;
         int rc;
 
-        C2_PRE(c2_stob_id_is_set(&cnk0->cnk_pfid));
-        C2_PRE(c2_stob_id_is_set(&cnk1->cnk_pfid));
+        C2_PRE(c2_fid_is_set(&k0->cnk_pfid));
+        C2_PRE(c2_fid_is_set(&k1->cnk_pfid));
+
+        rc = c2_fid_cmp(&k0->cnk_pfid, &k1->cnk_pfid);
+        return rc ?: c2_bitstring_cmp(&k0->cnk_name, &k1->cnk_name);
+}
 
-        rc = c2_stob_id_cmp(&cnk0->cnk_pfid, &cnk1->cnk_pfid);
-        return rc ?: c2_bitstring_cmp(&cnk0->cnk_name, &cnk1->cnk_name);
+int c2_cob_nskey_size(const struct c2_cob_nskey *cnk)
+{
+        return (sizeof(*cnk) +
+                c2_bitstring_len_get(&cnk->cnk_name));
+}
+
+/** 
+   Namespace table definition
+*/
+static int ns_cmp(struct c2_table *table, const void *key0, const void *key1)
+{
+        return c2_cob_nskey_cmp((const struct c2_cob_nskey *)key0, 
+                                (const struct c2_cob_nskey *)key1);
 }
 
 static const struct c2_table_ops cob_ns_ops = {
@@ -57,12 +68,6 @@ static const struct c2_table_ops cob_ns_ops = {
 	.key_cmp = ns_cmp
 };
 
-int c2_cob_nskey_size(const struct c2_cob_nskey *cnk)
-{
-        return (sizeof(*cnk) +
-                c2_bitstring_len_get(&cnk->cnk_name));
-}
-
 /** 
    Object index table definition. 
 */
@@ -70,12 +75,12 @@ static int oi_cmp(struct c2_table *table, const void *key0, const void *key1)
 {
 	const struct c2_cob_oikey *cok0 = key0;
 	const struct c2_cob_oikey *cok1 = key1;
-        int rc;
+        int                        rc;
 
-        C2_PRE(c2_stob_id_is_set(&cok0->cok_stobid));
-        C2_PRE(c2_stob_id_is_set(&cok1->cok_stobid));
+        C2_PRE(c2_fid_is_set(&cok0->cok_fid));
+        C2_PRE(c2_fid_is_set(&cok1->cok_fid));
 
-        rc = c2_stob_id_cmp(&cok0->cok_stobid, &cok1->cok_stobid);
+        rc = c2_fid_cmp(&cok0->cok_fid, &cok1->cok_fid);
         return rc ?: C2_3WAY(cok0->cok_linkno, cok1->cok_linkno);
 }
 
@@ -94,7 +99,7 @@ static const struct c2_table_ops cob_oi_ops = {
 static const struct c2_table_ops cob_fab_ops = {
 	.to = {
 		[TO_KEY] = {
-			.max_size = sizeof(struct c2_stob_id)
+			.max_size = sizeof(struct c2_cob_oikey)
 		},
 		[TO_REC] = {
                         .max_size = sizeof(struct c2_cob_fabrec)
@@ -170,7 +175,7 @@ static void cob_init(struct c2_cob_domain *dom, struct c2_cob *cob)
 {
         cob->co_dom = dom;
 	c2_ref_init(&cob->co_ref, 1, cob_free_cb);
-	C2_SET0(&cob->co_stobid);
+	C2_SET0(&cob->co_fid);
         c2_rwlock_init(&cob->co_guard);
         cob->co_valid = 0;
 	c2_addb_ctx_init(&cob->co_addb, &c2_cob_addb, &dom->cd_addb);
@@ -256,7 +261,7 @@ static int cob_ns_lookup(struct c2_cob *cob, struct c2_db_tx *tx)
 
         if (rc == 0) {
                 cob->co_valid |= CA_NSREC;
-                C2_POST(c2_stob_id_is_set(&cob->co_stobid));
+                C2_POST(c2_fid_is_set(&cob->co_fid));
         }
 
         return rc;
@@ -323,14 +328,17 @@ static int cob_oi_lookup(struct c2_cob *cob, struct c2_db_tx *tx)
  */
 static int cob_fab_lookup(struct c2_cob *cob, struct c2_db_tx *tx)
 {
-        struct c2_db_pair pair;
-        int rc;
+        struct c2_cob_oikey  oikey;
+        struct c2_db_pair    pair;
+        int                  rc;
 
         if (cob->co_valid & CA_FABREC)
                 return 0;
 
+        oikey.cok_fid = cob->co_fid;
+        oikey.cok_linkno = 0;
         c2_db_pair_setup(&pair, &cob->co_dom->cd_fileattr_basic,
-			 &cob->co_stobid, sizeof cob->co_stobid,
+			 &oikey, sizeof oikey,
 			 &cob->co_fabrec, sizeof cob->co_fabrec);
         rc = c2_table_lookup(tx, &pair);
         c2_db_pair_release(&pair);
@@ -338,6 +346,8 @@ static int cob_fab_lookup(struct c2_cob *cob, struct c2_db_tx *tx)
 
         if (rc == 0)
                 cob->co_valid |= CA_FABREC;
+        else
+                cob->co_valid &= ~CA_FABREC;
 
         return rc;
 }
@@ -450,7 +460,7 @@ int c2_cob_locate(struct c2_cob_domain *dom, struct c2_cob_oikey *oikey,
         struct c2_cob *cob;
         int rc;
 
-        C2_PRE(c2_stob_id_is_set(&oikey->cok_stobid));
+        C2_PRE(c2_fid_is_set(&oikey->cok_fid));
 
         rc = cob_cache_oicheck(dom, oikey, out);
         if (rc == 0)
@@ -490,7 +500,7 @@ C2_ADDB_EV_DEFINE(cob_setattr, "md_setattr", 0x8, C2_ADDB_FLAG);
 */
 static bool c2_cob_is_valid(struct c2_cob *cob)
 {
-        return c2_stob_id_is_set(&cob->co_stobid);
+        return c2_fid_is_set(&cob->co_fid);
 }
 
 /**
@@ -509,15 +519,16 @@ int c2_cob_create(struct c2_cob_domain *dom,
                   struct c2_cob       **out,
                   struct c2_db_tx      *tx)
 {
-        struct c2_cob      *cob;
-        struct c2_db_pair   pair;
-	int                 rc;
+        struct c2_cob       *cob;
+        struct c2_db_pair    pair;
+        struct c2_cob_oikey  oikey;
+	int                  rc;
 
         C2_PRE(fabrec != NULL);
         C2_PRE(nskey != NULL);
         C2_PRE(nsrec != NULL);
-	C2_PRE(c2_stob_id_is_set(&nsrec->cnr_stobid));
-        C2_PRE(c2_stob_id_is_set(&nskey->cnk_pfid));
+	C2_PRE(c2_fid_is_set(&nsrec->cnr_fid));
+        C2_PRE(c2_fid_is_set(&nskey->cnk_pfid));
 
         rc = cob_alloc(dom, &cob);
         if (rc) {
@@ -552,12 +563,15 @@ int c2_cob_create(struct c2_cob_domain *dom,
          */
         cob->co_fabrec = *fabrec;
         cob->co_valid |= CA_FABREC;
+        
+        oikey.cok_fid = cob->co_fid;
+        oikey.cok_linkno = 0;
 
         /* 
          * Add to fileattr-basic table. 
          */
         c2_db_pair_setup(&pair, &dom->cd_fileattr_basic,
-			 &cob->co_stobid, sizeof cob->co_stobid,
+			 &oikey, sizeof oikey,
 			 &cob->co_fabrec, sizeof cob->co_fabrec);
 
         rc = c2_table_insert(tx, &pair);
@@ -590,12 +604,11 @@ int c2_cob_delete(struct c2_cob *cob, struct c2_db_tx *tx)
         /* 
          * Remove from the object index table. 
          */
-        oikey.cok_stobid = cob->co_stobid;
+        oikey.cok_fid = cob->co_fid;
         oikey.cok_linkno = 0;
         
         c2_db_pair_setup(&pair, &cob->co_dom->cd_object_index,
-			 &oikey, sizeof oikey,
-			 NULL, 0);
+			 &oikey, sizeof oikey, NULL, 0);
         rc = c2_table_delete(tx, &pair);
         c2_db_pair_release(&pair);
 	c2_db_pair_fini(&pair);
@@ -618,8 +631,7 @@ int c2_cob_delete(struct c2_cob *cob, struct c2_db_tx *tx)
          * Remove from the fileattr_basic table. 
          */
         c2_db_pair_setup(&pair, &cob->co_dom->cd_fileattr_basic,
-			 &cob->co_stobid, sizeof cob->co_stobid,
-			 NULL, 0);
+			 &oikey, sizeof oikey, NULL, 0);
         
         /* 
          * Ignore errors; it's a dangling table entry but causes no harm. 
@@ -675,7 +687,7 @@ int c2_cob_add_name(struct c2_cob        *cob,
 
         C2_PRE(cob != NULL);
         C2_PRE(nskey != NULL);
-        C2_PRE(c2_stob_id_is_set(&nskey->cnk_pfid));
+        C2_PRE(c2_fid_is_set(&nskey->cnk_pfid));
         C2_PRE(c2_cob_is_valid(cob));
 
         /*
@@ -688,7 +700,7 @@ int c2_cob_add_name(struct c2_cob        *cob,
          * Linkno for new name is number of links in statdata - 1
          */
         nsrec.cnr_linkno = cob->co_nsrec.cnr_nlink;
-        oikey.cok_stobid = cob->co_nsrec.cnr_stobid;
+        oikey.cok_fid = cob->co_nsrec.cnr_fid;
 
         /* 
          * Use _old_ nlink value for the key in object index.
@@ -769,7 +781,7 @@ int c2_cob_del_name(struct c2_cob        *cob,
         /*
          * Let's also kill object index entry.
          */
-        oikey.cok_stobid = cob->co_stobid;
+        oikey.cok_fid = cob->co_fid;
         oikey.cok_linkno = cob->co_nsrec.cnr_nlink;
 
         c2_db_pair_setup(&pair, &cob->co_dom->cd_object_index,
@@ -847,7 +859,7 @@ int c2_cob_update_name(struct c2_cob        *cob,
         
 
         /* Update object index */
-        oikey.cok_stobid = cob->co_stobid;
+        oikey.cok_fid = cob->co_fid;
         oikey.cok_linkno = nsrec.cnr_linkno;
 
         c2_db_pair_setup(&pair, &cob->co_dom->cd_object_index,
diff --git a/cob/cob.h b/cob/cob.h
index f6f12d7..c8ebd64 100644
--- a/cob/cob.h
+++ b/cob/cob.h
@@ -11,6 +11,7 @@
 #include "lib/adt.h"
 #include "addb/addb.h"
 #include "db/db.h"
+#include "fid/fid.h"
 #include "stob/stob.h"
 #include "dtm/verno.h"
 
@@ -91,14 +92,17 @@ void c2_cob_domain_fini(struct c2_cob_domain *dom);
    For data objects, pfid = cfid and name = ""
  */
 struct c2_cob_nskey {
-        struct c2_stob_id   cnk_pfid;
+        struct c2_fid       cnk_pfid;
         struct c2_bitstring cnk_name;
 };
 
-int c2_cob_nskey_size(const struct c2_cob_nskey *);
+int c2_cob_nskey_size(const struct c2_cob_nskey *nskey);
+
+int c2_cob_nskey_cmp(const struct c2_cob_nskey *k0, 
+                     const struct c2_cob_nskey *k1);
 
 struct c2_cob_nsrec {
-        struct c2_stob_id cnr_stobid;
+        struct c2_fid     cnr_fid;
         uint32_t          cnr_linkno;  /**< number of link for the name */
 
         uint64_t          cnr_ino;     /**< inode number. */
@@ -116,12 +120,12 @@ struct c2_cob_nsrec {
 
 /** Object index table */
 struct c2_cob_oikey {
-        struct c2_stob_id cok_stobid;
+        struct c2_fid     cok_fid;
         uint32_t          cok_linkno;  /**< hardlink ordinal index */
 };
 
 /** 
-   Fileattr_basic table key is stobid
+   Fileattr_basic table key is fid
 
    @note version change at every ns manipulation and data write.
    If version and mtime/ctime both change frequently, at the same time,
@@ -198,7 +202,7 @@ struct c2_cob {
 	struct c2_addb_ctx     co_addb;
 };
 
-#define co_stobid co_nsrec.cnr_stobid
+#define co_fid co_nsrec.cnr_fid
 
 /** 
    Cob flags and valid attributes 
diff --git a/cob/ut/cob.c b/cob/ut/cob.c
index ad4a975..f194ccc 100644
--- a/cob/ut/cob.c
+++ b/cob/ut/cob.c
@@ -46,8 +46,8 @@ static void make_nskey(struct c2_cob_nskey **keyh, uint64_t hi, uint64_t lo,
         struct c2_cob_nskey *key;
 
         key = c2_alloc(sizeof(*key) + strlen(name));
-        key->cnk_pfid.si_bits.u_hi = hi;
-        key->cnk_pfid.si_bits.u_lo = lo;
+        key->cnk_pfid.f_container = hi;
+        key->cnk_pfid.f_key = lo;
         memcpy(c2_bitstring_buf_get(&key->cnk_name), name, strlen(name));
         c2_bitstring_len_set(&key->cnk_name, strlen(name));
         *keyh = key;
@@ -63,8 +63,8 @@ static void test_create(void)
         /* pfid, filename */
         make_nskey(&key, 0x123, 0x456, "hello world");
 
-        nsrec.cnr_stobid.si_bits.u_hi = 0xabc;
-        nsrec.cnr_stobid.si_bits.u_lo = 0xdef;
+        nsrec.cnr_fid.f_container = 0xabc;
+        nsrec.cnr_fid.f_key = 0xdef;
         nsrec.cnr_nlink = 1;
 
         c2_db_tx_init(&tx, dom.cd_dbenv, 0);
@@ -102,8 +102,8 @@ static void test_lookup(void)
         C2_UT_ASSERT(cob != NULL);
         C2_UT_ASSERT(cob->co_dom == &dom);
         C2_UT_ASSERT(cob->co_valid & CA_NSREC);
-        C2_UT_ASSERT(cob->co_nsrec.cnr_stobid.si_bits.u_hi == 0xabc);
-        C2_UT_ASSERT(cob->co_nsrec.cnr_stobid.si_bits.u_lo == 0xdef);
+        C2_UT_ASSERT(cob->co_nsrec.cnr_fid.f_container == 0xabc);
+        C2_UT_ASSERT(cob->co_nsrec.cnr_fid.f_key == 0xdef);
 
         /* We should have cached the key also, unless oom */
         C2_UT_ASSERT(cob->co_valid & CA_NSKEY);
@@ -115,14 +115,13 @@ static void test_lookup(void)
 static int test_locate_internal(void)
 {
         struct c2_db_tx      tx;
-        struct c2_stob_id    sid;
+        struct c2_fid        fid;
         struct c2_cob_oikey  oikey;
 
-        /* stob fid */
-        sid.si_bits.u_hi = 0xabc;
-        sid.si_bits.u_lo = 0xdef;
+        fid.f_container = 0xabc;
+        fid.f_key = 0xdef;
         
-        oikey.cok_stobid = sid;
+        oikey.cok_fid = fid;
         oikey.cok_linkno = 0;
 
         c2_db_tx_init(&tx, dom.cd_dbenv, 0);
@@ -142,8 +141,8 @@ static void test_locate(void)
 
         /* We should have saved the NSKEY */
         C2_UT_ASSERT(cob->co_valid & CA_NSKEY);
-        C2_UT_ASSERT(cob->co_nskey->cnk_pfid.si_bits.u_hi == 0x123);
-        C2_UT_ASSERT(cob->co_nskey->cnk_pfid.si_bits.u_lo == 0x456);
+        C2_UT_ASSERT(cob->co_nskey->cnk_pfid.f_container == 0x123);
+        C2_UT_ASSERT(cob->co_nskey->cnk_pfid.f_key == 0x456);
 
         /* Assuming we looked up the NSREC at the same time */
         C2_UT_ASSERT(cob->co_valid & CA_NSREC);
@@ -238,8 +237,8 @@ static void ub_create(int i)
            uniquely in the namespace by {pfid, ""} */
         make_nskey(&key, 0xAA, i, "");
 
-        nsrec.cnr_stobid.si_bits.u_hi = 0xAA;
-        nsrec.cnr_stobid.si_bits.u_lo = i;
+        nsrec.cnr_fid.f_container = 0xAA;
+        nsrec.cnr_fid.f_key = i;
         nsrec.cnr_nlink = 1;
 
 	rc = c2_cob_create(&dom, key, &nsrec, &fabrec, CA_NSKEY_FREE, &cob,
@@ -263,8 +262,8 @@ static void ub_lookup(int i)
         C2_UB_ASSERT(cob->co_dom == &dom);
 
         C2_UB_ASSERT(cob->co_valid & CA_NSREC);
-        C2_UB_ASSERT(cob->co_nsrec.cnr_stobid.si_bits.u_hi == 0xAA);
-        C2_UB_ASSERT(cob->co_nsrec.cnr_stobid.si_bits.u_lo == i);
+        C2_UB_ASSERT(cob->co_nsrec.cnr_fid.f_container == 0xAA);
+        C2_UB_ASSERT(cob->co_nsrec.cnr_fid.f_key == i);
 
         /* We should be holding the nskey until the final put */
         C2_UB_ASSERT(cob->co_valid & CA_NSKEY);
diff --git a/fid/fid.c b/fid/fid.c
index 270533c..df67389 100644
--- a/fid/fid.c
+++ b/fid/fid.c
@@ -15,11 +15,35 @@ bool c2_fid_is_valid(const struct c2_fid *fid)
 	return true;
 }
 
+bool c2_fid_is_set(const struct c2_fid *fid)
+{
+	static const struct c2_fid zero = {
+	        .f_container = 0,
+	        .f_key = 0
+	};
+	return !c2_fid_eq(fid, &zero);
+}
+
 bool c2_fid_eq(const struct c2_fid *fid0, const struct c2_fid *fid1)
 {
 	return memcmp(fid0, fid1, sizeof *fid0) == 0;
 }
 
+int c2_fid_cmp(const struct c2_fid *fid0, const struct c2_fid *fid1)
+{
+        const struct c2_uint128 u0 = {
+                .u_hi = fid0->f_container,
+                .u_lo = fid0->f_key
+        };
+
+        const struct c2_uint128 u1 = {
+                .u_hi = fid1->f_container,
+                .u_lo = fid1->f_key
+        };
+        
+        return c2_uint128_cmp(&u0, &u1);
+}
+
 /** @} end of fid group */
 
 /* 
diff --git a/fid/fid.h b/fid/fid.h
index ebfce8d..7810112 100644
--- a/fid/fid.h
+++ b/fid/fid.h
@@ -20,8 +20,10 @@ struct c2_fid {
 	uint64_t f_key;
 };
 
+bool c2_fid_is_set(const struct c2_fid *fid);
 bool c2_fid_is_valid(const struct c2_fid *fid);
 bool c2_fid_eq(const struct c2_fid *fid0, const struct c2_fid *fid1);
+int c2_fid_cmp(const struct c2_fid *fid0, const struct c2_fid *fid1);
 
 /** @} end of fid group */
 
diff --git a/mdstore/mdstore.c b/mdstore/mdstore.c
index 861dec1..c504c01 100644
--- a/mdstore/mdstore.c
+++ b/mdstore/mdstore.c
@@ -11,22 +11,48 @@
 #include "lib/bitstring.h"
 #include "lib/rwlock.h"
 
+#include "fid/fid.h"
 #include "addb/addb.h"
 #include "db/db.h"
 #include "fop/fop.h"
 #include "cob/cob.h"
 
 #include "mdstore/md_u.h"
+#include "mdstore/mdstore.h"
 
-#include "mdstore.h"
-
-static const struct c2_stob_id C2_MD_ROOTID = {
-        .si_bits = {
-                .u_hi = 1024, 
-                .u_lo = 1
-        }
+static const struct c2_fid C2_MD_ROOTID = {
+        .f_container = 1024ULL, 
+        .f_key       = 1ULL
 };
 
+static void md_store_make_fid(struct c2_fid *fid, struct c2_fop_fid *ffid)
+{
+        fid->f_container = ffid->f_seq;
+        fid->f_key = ffid->f_oid;
+}
+
+static void md_store_make_nskey(struct c2_cob_nskey **keyh, 
+                                struct c2_fop_fid *fid, 
+                                struct c2_fop_name *name)
+{
+        struct c2_cob_nskey *key;
+
+        key = c2_alloc(sizeof(*key) + name->n_count);
+        md_store_make_fid(&key->cnk_pfid, fid);
+        memcpy(c2_bitstring_buf_get(&key->cnk_name), 
+               name->n_name, name->n_count);
+        c2_bitstring_len_set(&key->cnk_name, name->n_count);
+        *keyh = key;
+}
+
+static void md_store_make_oikey(struct c2_cob_oikey *oikey,
+                                struct c2_fop_fid *fid,
+                                int linkno)
+{
+        md_store_make_fid(&oikey->cok_fid, fid);
+        oikey->cok_linkno = 0;
+}
+
 int c2_md_store_init(struct c2_md_store *md, struct c2_cob_domain_id *id,
                      struct c2_dbenv *db)
 {
@@ -45,25 +71,6 @@ void c2_md_store_fini(struct c2_md_store *md)
         c2_cob_domain_fini(&md->md_cob);
 }
 
-static void fid2stobid(struct c2_stob_id *id, struct c2_fop_fid *fid)
-{
-        id->si_bits.u_hi = fid->f_seq;
-        id->si_bits.u_lo = fid->f_oid;
-}
-
-static void make_nskey(struct c2_cob_nskey **keyh, struct c2_fop_fid *fid, 
-                       struct c2_fop_name *name)
-{
-        struct c2_cob_nskey *key;
-
-        key = c2_alloc(sizeof(*key) + name->n_count);
-        fid2stobid(&key->cnk_pfid, fid);
-        memcpy(c2_bitstring_buf_get(&key->cnk_name), 
-               name->n_name, name->n_count);
-        c2_bitstring_len_set(&key->cnk_name, name->n_count);
-        *keyh = key;
-}
-
 static int c2_md_store_check_perm(struct c2_md_store *md, struct c2_fop *fop, 
                                   struct c2_fop_ctx *ctx)
 {
@@ -89,8 +96,8 @@ int c2_md_store_create(struct c2_md_store *md, struct c2_fop *fop,
         if (rc)
                 return rc;
 
-        make_nskey(&key, &body->b_pfid, &create->c_name);
-        fid2stobid(&nsrec.cnr_stobid, &body->b_tfid);
+        md_store_make_nskey(&key, &body->b_pfid, &create->c_name);
+        md_store_make_fid(&nsrec.cnr_fid, &body->b_tfid);
 
         /*
          * Create case, nlink == 0, will be bumped by c2_cob_create()
@@ -165,9 +172,7 @@ int c2_md_store_link(struct c2_md_store *md, struct c2_fop *fop,
         /*
          * Let's find stat data cob first.
          */
-        fid2stobid(&oikey.cok_stobid, &body->b_tfid);
-        oikey.cok_linkno = 0;
-
+        md_store_make_oikey(&oikey, &body->b_tfid, 0);
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
         if (rc)
                 return rc;
@@ -175,7 +180,7 @@ int c2_md_store_link(struct c2_md_store *md, struct c2_fop *fop,
         /*
          * Link @nskey to a file described with @cob
          */        
-        make_nskey(&nskey, &body->b_pfid, &link->l_name);
+        md_store_make_nskey(&nskey, &body->b_pfid, &link->l_name);
         rc = c2_cob_add_name(cob, nskey, ctx->ft_tx);
         if (rc)
                 goto out;
@@ -205,10 +210,8 @@ int c2_md_store_unlink(struct c2_md_store *md, struct c2_fop *fop,
         if (rc)
                 return rc;
         
-        make_nskey(&nskey, &body->b_pfid, &unlink->u_name);
-
-        fid2stobid(&oikey.cok_stobid, &body->b_tfid);
-        oikey.cok_linkno = 0;
+        md_store_make_nskey(&nskey, &body->b_pfid, &unlink->u_name);
+        md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
         /*
          * Lookup for stat data cob.
@@ -239,8 +242,7 @@ int c2_md_store_unlink(struct c2_md_store *md, struct c2_fop *fop,
          * Check if we're trying to kill stata data entry. We need to
          * move stat data to next name if so.
          */
-        if (c2_cob_nskey_size(nskey) == c2_cob_nskey_size(cob->co_nskey) &&
-            !memcmp(cob->co_nskey, nskey, c2_cob_nskey_size(nskey))) {
+        if (c2_cob_nskey_cmp(nskey, cob->co_nskey) == 0) {
                 /*
                  * Let's re-use cob variable to make this function
                  * even shorter.
@@ -289,8 +291,7 @@ int c2_md_store_open(struct c2_md_store *md, struct c2_fop *fop,
         if (rc)
                 return rc;
         
-        fid2stobid(&oikey.cok_stobid, &body->b_tfid);
-        oikey.cok_linkno = 0;
+        md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
         if (rc == -ENOENT) {
@@ -318,8 +319,7 @@ int c2_md_store_close(struct c2_md_store *md, struct c2_fop *fop,
         if (rc)
                 return rc;
         
-        fid2stobid(&oikey.cok_stobid, &body->b_tfid);
-        oikey.cok_linkno = 0;
+        md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
         if (rc)
@@ -340,13 +340,13 @@ static int c2_md_store_rename_sanity(struct c2_md_store *md,
                                      struct c2_fop_ctx *ctx)
 {
         struct c2_cob_oikey  oikey;
-        struct c2_stob_id    tgtid;
-        struct c2_stob_id    srcid;
+        struct c2_fid        tgtfid;
+        struct c2_fid        srcfid;
         struct c2_cob       *tgt;
-        int                  rc = 0;
+        int                  rc;
 
-        fid2stobid(&srcid, &rename->r_sbody.b_tfid);
-        fid2stobid(&tgtid, &rename->r_tbody.b_tfid);
+        md_store_make_fid(&srcfid, &rename->r_sbody.b_tfid);
+        md_store_make_fid(&tgtfid, &rename->r_tbody.b_tfid);
         
         /*
          * Going up from the target starting point until root is
@@ -354,13 +354,13 @@ static int c2_md_store_rename_sanity(struct c2_md_store *md,
          */
         do {
                 /* Is root reached? */
-                if (c2_stob_id_eq(&md->md_rootid, &tgtid))
+                if (c2_fid_eq(&md->md_rootid, &tgtfid))
                         return 0;
                 
                 /*
                  * Let's lookup for a target cob.
                  */
-                oikey.cok_stobid = tgtid;
+                oikey.cok_fid = tgtfid;
                 oikey.cok_linkno = 0;
 
                 rc = c2_cob_locate(&md->md_cob, &oikey, &tgt, ctx->ft_tx);
@@ -371,11 +371,15 @@ static int c2_md_store_rename_sanity(struct c2_md_store *md,
                  * If we found the same id then source is paent of tgt,
                  * which means sanity did not pass.
                  */
-                if (c2_stob_id_eq(&tgt->co_nskey->cnk_pfid, &srcid)) {
+                if (c2_fid_eq(&tgt->co_nskey->cnk_pfid, &srcfid)) {
                         c2_cob_put(tgt);
                         return -EINVAL;
                 }
-                tgtid = tgt->co_nskey->cnk_pfid;
+
+                /*
+                 * Get parent fid and repeat.
+                 */
+                tgtfid = tgt->co_nskey->cnk_pfid;
                 c2_cob_put(tgt);
         } while (1);
 
@@ -409,16 +413,21 @@ int c2_md_store_rename(struct c2_md_store *md, struct c2_fop *fop,
         if (rc)
                 return rc;
 
-        fid2stobid(&oikey.cok_stobid, &sbody->b_tfid);
-        oikey.cok_linkno = 0;
-
-        make_nskey(&srckey, &sbody->b_pfid, &rename->r_sname);
-        make_nskey(&tgtkey, &tbody->b_pfid, &rename->r_tname);
+        /*
+         * Get stat data cob.
+         */
+        md_store_make_oikey(&oikey, &sbody->b_tfid, 0);
 
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
         if (rc)
                 return rc;
-                
+
+        /*
+         * Prepare src and dst keys.
+         */                
+        md_store_make_nskey(&srckey, &sbody->b_pfid, &rename->r_sname);
+        md_store_make_nskey(&tgtkey, &tbody->b_pfid, &rename->r_tname);
+
         rc = c2_cob_update_name(cob, srckey, tgtkey, ctx->ft_tx);
         c2_cob_put(cob);
         c2_free(srckey);
@@ -442,8 +451,7 @@ int c2_md_store_setattr(struct c2_md_store *md, struct c2_fop *fop,
         if (rc)
                 return rc;
 
-        fid2stobid(&oikey.cok_stobid, &body->b_tfid);
-        oikey.cok_linkno = 0;
+        md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
         if (rc)
@@ -456,11 +464,14 @@ int c2_md_store_setattr(struct c2_md_store *md, struct c2_fop *fop,
          * in create time.
          */
         nsrec = cob->co_nsrec;
-        nsrec.cnr_atime = 0;
-        nsrec.cnr_mtime = 0;
-        nsrec.cnr_ctime = 0;
-
-        /* @todo: Update fabrec version. */
+        if (0/* flags & ATIME */)
+                nsrec.cnr_atime = body->b_atime;
+        if (0/* flags & MTIME */)
+                nsrec.cnr_mtime = body->b_mtime;
+        if (0/* flags & CTIME */)
+            nsrec.cnr_ctime = body->b_ctime;
+
+        /* @todo: Update fabrec version? */
         fabrec = cob->co_fabrec;
         fabrec.cfb_sid = body->b_sid;
         fabrec.cfb_nid = body->b_nid;
@@ -484,8 +495,7 @@ int c2_md_store_getattr(struct c2_md_store *md, struct c2_fop *fop,
         if (rc)
                 return rc;
         
-        fid2stobid(&oikey.cok_stobid, &body->b_tfid);
-        oikey.cok_linkno = 0;
+        md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
         if (rc)
@@ -513,8 +523,7 @@ int c2_md_store_readdir(struct c2_md_store *md, struct c2_fop *fop,
         if (rc)
                 return rc;
         
-        fid2stobid(&oikey.cok_stobid, &body->b_tfid);
-        oikey.cok_linkno = 0;
+        md_store_make_oikey(&oikey, &body->b_tfid, 0);
 
         rc = c2_cob_locate(&md->md_cob, &oikey, &cob, ctx->ft_tx);
         if (rc)
diff --git a/mdstore/mdstore.h b/mdstore/mdstore.h
index 03676fb..f37727e 100644
--- a/mdstore/mdstore.h
+++ b/mdstore/mdstore.h
@@ -8,11 +8,12 @@ struct c2_cob_domain;
 struct c2_stob_id;
 struct c2_fop_ctx;
 struct c2_dbenv;
+struct c2_fid;
 struct c2_fop;
 
 struct c2_md_store {
         struct c2_cob_domain  md_cob;
-        struct c2_stob_id     md_rootid;
+        struct c2_fid         md_rootid;
 };
 
 int c2_md_store_init(struct c2_md_store *md, struct c2_cob_domain_id *id,
-- 
1.8.3.2


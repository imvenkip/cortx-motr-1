From 32f4c0aea8b3a13756c28f52d728fe5b09957ee8 Mon Sep 17 00:00:00 2001
From: Yuriy Umanets <yuriy_umanets@xyratex.com>
Date: Thu, 31 Mar 2011 06:21:35 -0600
Subject: [PATCH 035/158] - renamed ONE_BILLION to C2_ONE_BILLION to avoid
 collisions with lustre headers; - added cookie to nrs API.

---
 lib/time.c      | 16 ++++++++--------
 lib/time.h      |  2 +-
 net/net_utils.c |  2 +-
 nrs/nrs.c       | 38 +++++++++++++++++++-------------------
 nrs/nrs.h       | 24 ++++++++++++------------
 5 files changed, 41 insertions(+), 41 deletions(-)

diff --git a/lib/time.c b/lib/time.c
index 562ea10..25c66b2 100644
--- a/lib/time.c
+++ b/lib/time.c
@@ -16,9 +16,9 @@
  */
 struct c2_time *c2_time_set(struct c2_time *time, uint64_t secs, long ns)
 {
-	uint64_t nanos = secs * ONE_BILLION + ns;
-	time->ts.tv_sec = nanos / ONE_BILLION;
-	time->ts.tv_nsec = nanos % ONE_BILLION;
+	uint64_t nanos = secs * C2_ONE_BILLION + ns;
+	time->ts.tv_sec = nanos / C2_ONE_BILLION;
+	time->ts.tv_nsec = nanos % C2_ONE_BILLION;
 	return time;
 }
 C2_EXPORTED(c2_time_set);
@@ -30,7 +30,7 @@ C2_EXPORTED(c2_time_set);
 */
 uint64_t c2_time_flatten(const struct c2_time *time)
 {
-        return ((uint64_t)time->ts.tv_sec) * ONE_BILLION + time->ts.tv_nsec;
+        return ((uint64_t)time->ts.tv_sec) * C2_ONE_BILLION + time->ts.tv_nsec;
 }
 C2_EXPORTED(c2_time_flatten);
 
@@ -43,8 +43,8 @@ struct c2_time *c2_time_add(const struct c2_time *t1, const struct c2_time *t2,
 	uint64_t sum;
 
         sum = c2_time_flatten(t1) + c2_time_flatten(t2);
-	res->ts.tv_sec = sum / ONE_BILLION;
-	res->ts.tv_nsec = sum % ONE_BILLION;
+	res->ts.tv_sec = sum / C2_ONE_BILLION;
+	res->ts.tv_nsec = sum % C2_ONE_BILLION;
 	return res;
 }
 C2_EXPORTED(c2_time_add);
@@ -58,8 +58,8 @@ struct c2_time *c2_time_sub(const struct c2_time *t1, const struct c2_time *t2,
 	int64_t diff;
 
         diff = c2_time_flatten(t1) - c2_time_flatten(t2);
-	res->ts.tv_sec = diff / ONE_BILLION;
-	res->ts.tv_nsec = diff % ONE_BILLION;
+	res->ts.tv_sec = diff / C2_ONE_BILLION;
+	res->ts.tv_nsec = diff % C2_ONE_BILLION;
 	return res;
 }
 C2_EXPORTED(c2_time_sub);
diff --git a/lib/time.h b/lib/time.h
index 755c528..ed4c31a 100644
--- a/lib/time.h
+++ b/lib/time.h
@@ -27,7 +27,7 @@
 
 
 enum {
-	ONE_BILLION = 1000000000ULL
+        C2_ONE_BILLION = 1000000000ULL
 };
 
 /**
diff --git a/net/net_utils.c b/net/net_utils.c
index 80c6b22..1850c64 100644
--- a/net/net_utils.c
+++ b/net/net_utils.c
@@ -106,7 +106,7 @@ int c2_net_domain_stats_get(struct c2_net_domain *dom,
 
         /* Load based on data rate only, bytes/sec */
         rate = c2_atomic64_get(&dom->nd_stats[dir].ns_bytes) *
-                          ONE_BILLION / interval_usec;
+                          C2_ONE_BILLION / interval_usec;
         max = max64u(dom->nd_stats[dir].ns_max, rate);
         rv = (int)((rate * 10000) / max);
 
diff --git a/nrs/nrs.c b/nrs/nrs.c
index 81946cd..80ee516 100644
--- a/nrs/nrs.c
+++ b/nrs/nrs.c
@@ -35,38 +35,38 @@ int  c2_nrs_init(struct c2_nrs *nrs, struct c2_nrs_policy *pol,
         int rc;
         
         C2_SET0(nrs);        
-        c2_mutex_init(&nrs->n_guard);
-	c2_cond_init(&nrs->n_gotwork);
-        c2_queue_init(&nrs->n_queue);
-        nrs->n_shutdown = false;
-	nrs->n_reqh = reqh;
-	nrs->n_pol = pol;
+        c2_mutex_init(&nrs->s_guard);
+	c2_cond_init(&nrs->s_gotwork);
+        c2_queue_init(&nrs->s_queue);
+        nrs->s_shutdown = false;
+	nrs->s_reqh = reqh;
+	nrs->s_pol = pol;
 
-        rc = C2_THREAD_INIT(&nrs->n_thread, struct c2_nrs *,
-                            pol->np_thread_init, pol->np_thread_main, 
+        rc = C2_THREAD_INIT(&nrs->s_thread, struct c2_nrs *,
+                            pol->sp_thread_init, pol->sp_thread_main, 
                             nrs);
 	return rc;
 }
 
 void c2_nrs_fini(struct c2_nrs *nrs)
 {
-	c2_mutex_lock(&nrs->n_guard);
-	nrs->n_shutdown = true;
-	c2_mutex_unlock(&nrs->n_guard);
+	c2_mutex_lock(&nrs->s_guard);
+	nrs->s_shutdown = true;
+	c2_mutex_unlock(&nrs->s_guard);
 
-        if (nrs->n_thread.t_func != NULL) {
-                c2_thread_join(&nrs->n_thread);
-                c2_thread_fini(&nrs->n_thread);
+        if (nrs->s_thread.t_func != NULL) {
+                c2_thread_join(&nrs->s_thread);
+                c2_thread_fini(&nrs->s_thread);
         }
-        nrs->n_reqh = NULL;
-        nrs->n_pol = NULL;
+        nrs->s_reqh = NULL;
+        nrs->s_pol = NULL;
 }
 
-void c2_nrs_enqueue(struct c2_nrs *nrs, struct c2_fop *fop)
+void c2_nrs_enqueue(struct c2_nrs *nrs, struct c2_fop *fop, void *cookie)
 {
-	C2_ASSERT(nrs->n_pol != NULL);
+	C2_ASSERT(nrs->s_pol != NULL);
 	C2_ADDB_ADD(&fop->f_addb, &nrs_addb, sns_addb_enqueue);
-	nrs->n_pol->np_enqueue(nrs, fop);
+	nrs->s_pol->sp_enqueue(nrs, fop, cookie);
 }
 
 /** @} end of nrs group */
diff --git a/nrs/nrs.h b/nrs/nrs.h
index d26ee6b..809a54e 100644
--- a/nrs/nrs.h
+++ b/nrs/nrs.h
@@ -20,33 +20,33 @@ struct c2_nrs_policy;
 
 struct c2_nrs {
         /** Scheduler request handler. */
-	struct c2_reqh       *n_reqh;
+	struct c2_reqh       *s_reqh;
 	/** Queue processing thread. */
-        struct c2_thread      n_thread;
+        struct c2_thread      s_thread;
         /** Requests queue being processed by the thread. */
-        struct c2_queue       n_queue;
+        struct c2_queue       s_queue;
         /** Queue and ->shutdown guard. */
-	struct c2_mutex       n_guard;
+	struct c2_mutex       s_guard;
         /** More work condition. */
-	struct c2_cond        n_gotwork;
+	struct c2_cond        s_gotwork;
 	/** Nrs policy passed in init time. */
-	struct c2_nrs_policy *n_pol;
+	struct c2_nrs_policy *s_pol;
         /** The thread shutdown flag. */
-        bool                  n_shutdown;
+        bool                  s_shutdown;
 };
 
 struct c2_nrs_policy {
-        char  *np_name;
-        int  (*np_thread_init)(struct c2_nrs *);
-        void (*np_thread_main)(struct c2_nrs *);
-        int  (*np_enqueue) (struct c2_nrs *, struct c2_fop *);
+        char  *sp_name;
+        int  (*sp_thread_init)(struct c2_nrs *);
+        void (*sp_thread_main)(struct c2_nrs *);
+        int  (*sp_enqueue) (struct c2_nrs *, struct c2_fop *, void *);
 };
 
 int  c2_nrs_init(struct c2_nrs *nrs, struct c2_nrs_policy *pol, 
                  struct c2_reqh *reqh);
 void c2_nrs_fini(struct c2_nrs *nrs);
 
-void c2_nrs_enqueue(struct c2_nrs *nrs, struct c2_fop *fop);
+void c2_nrs_enqueue(struct c2_nrs *nrs, struct c2_fop *fop, void *cookie);
 
 /** @} end of nrs group */
 
-- 
1.8.3.2


From 612548c686719704885a6a0a2fc41936e83f1416 Mon Sep 17 00:00:00 2001
From: Andrew Perepechko <anserper@ya.ru>
Date: Mon, 6 Jun 2011 23:40:33 +0400
Subject: [PATCH 104/158] serialize names as well

---
 mdservice/md_fops.c | 98 ++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 97 insertions(+), 1 deletion(-)

diff --git a/mdservice/md_fops.c b/mdservice/md_fops.c
index ed89443..1a5e5cf 100644
--- a/mdservice/md_fops.c
+++ b/mdservice/md_fops.c
@@ -11,8 +11,104 @@
 #include "mdservice/md_foms.h"
 #include "mdservice/md_fops.h"
 
+static size_t md_fol_pack_size(struct c2_fol_rec_desc *desc)
+{
+	struct c2_fop *fop = desc->rd_type_private;
+	size_t len = fop->f_type->ft_fmt->ftf_layout->fm_sizeof;
+	void *data = c2_fop_data(fop);
+
+	switch (fop->f_type->ft_code) {
+	case C2_FOP_CREATE:  len += ((struct c2_fop_create *)data)->c_name.n_len;
+			     break;
+	case C2_FOP_LINK:    len += ((struct c2_fop_link *)data)->l_name.n_len;
+			     break;
+	case C2_FOP_UNLINK:  len += ((struct c2_fop_unlink *)data)->u_name.n_len;
+			     break;
+	case C2_FOP_RENAME:  len += ((struct c2_fop_rename *)data)->r_sname.n_len;
+			     len += ((struct c2_fop_rename *)data)->r_tname.n_len;
+			     break;
+	case C2_FOP_SETATTR: break; /* we need a name for setattr for Replicator too */
+	}
+
+	return (len + 7) & ~7;
+}
+
+static void md_fol_pack(struct c2_fol_rec_desc *desc, void *buf)
+{
+	struct c2_fop *fop = desc->rd_type_private;
+	char *data = c2_fop_data(fop), *name, *ptr;
+	size_t size = fop->f_type->ft_fmt->ftf_layout->fm_sizeof;
+
+	memcpy(buf, data, size);
+	ptr = (char *)buf + size;
+
+	switch (fop->f_type->ft_code) {
+	case C2_FOP_CREATE:  size = ((struct c2_fop_create *)data)->c_name.n_len;
+			     name = ((struct c2_fop_create *)data)->c_name.n_name;
+			     memcpy(ptr, name, size);
+			     break;
+	case C2_FOP_LINK:    size = ((struct c2_fop_link *)data)->l_name.n_len;
+			     name = ((struct c2_fop_link *)data)->l_name.n_name;
+			     memcpy(ptr, name, size);
+			     break;
+	case C2_FOP_UNLINK:  size = ((struct c2_fop_unlink *)data)->u_name.n_len;
+			     name = ((struct c2_fop_unlink *)data)->u_name.n_name;
+			     memcpy(ptr, name, size);
+			     break;
+	case C2_FOP_RENAME:  size = ((struct c2_fop_rename *)data)->r_sname.n_len;
+			     name = ((struct c2_fop_rename *)data)->r_sname.n_name;
+			     memcpy(ptr, name, size);
+			     ptr += size;
+			     size = ((struct c2_fop_rename *)data)->r_tname.n_len;
+			     name = ((struct c2_fop_rename *)data)->r_tname.n_name;
+			     memcpy(ptr, name, size);
+			     break;
+	case C2_FOP_SETATTR: break; /* we need a name for setattr for Replicator too */
+	}
+}
+
+static int md_fol_open(const struct c2_fol_rec_type *type,
+                       struct c2_fol_rec_desc *desc)
+{
+	void *data = desc->rd_data;
+	char **name;
+
+	switch (type->rt_opcode) {
+	case C2_FOP_CREATE:  name = &((struct c2_fop_create *)data)->c_name.n_name;
+			     *name = (char *)(((struct c2_fop_create *)data) + 1);
+			     break;
+	case C2_FOP_LINK:    name = &((struct c2_fop_link *)data)->l_name.n_name;
+			     *name = (char *)(((struct c2_fop_link *)data) + 1);
+			     break;
+	case C2_FOP_UNLINK:  name = &((struct c2_fop_unlink *)data)->u_name.n_name;
+			     *name = (char *)(((struct c2_fop_unlink *)data) + 1);
+			     break;
+	case C2_FOP_RENAME:  name = &((struct c2_fop_rename *)data)->r_sname.n_name;
+			     *name = (char *)(((struct c2_fop_rename *)data) + 1);
+			     name = &((struct c2_fop_rename *)data)->r_tname.n_name;
+			     *name = ((struct c2_fop_rename *)data)->r_sname.n_name +
+			             ((struct c2_fop_rename *)data)->r_sname.n_len;
+			     break;
+	case C2_FOP_SETATTR: break; /* we need a name for setattr for Replicator too */
+	}
+
+	return 0;
+}
+
+static const struct c2_fol_rec_type_ops c2_md_fop_fol_ops = {
+	.rto_commit     = NULL,
+	.rto_abort      = NULL,
+	.rto_persistent = NULL,
+	.rto_cull       = NULL,
+	.rto_open       = md_fol_open,
+	.rto_fini       = NULL,
+	.rto_pack_size  = md_fol_pack_size,
+	.rto_pack       = md_fol_pack
+};
+
 static struct c2_fop_type_ops c2_md_req_ops = {
-        .fto_fom_init = c2_md_req_fom_init
+        .fto_fom_init = c2_md_req_fom_init,
+        .fto_rec_ops = &c2_md_fop_fol_ops
 };
 
 static struct c2_fop_type_ops c2_md_rep_ops = {
-- 
1.8.3.2


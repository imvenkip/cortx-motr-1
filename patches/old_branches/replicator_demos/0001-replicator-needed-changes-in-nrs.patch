From ef10446a34c91ccbd7e71f4f309e9e927e7eb7f0 Mon Sep 17 00:00:00 2001
From: Yuriy Umanets <yuriy_umanets@xyratex.com>
Date: Wed, 12 Jan 2011 06:38:37 -0700
Subject: [PATCH 01/91] - replicator needed changes in nrs:   - pass
 2_nrs_policy with queue handling methods

---
 nrs/nrs.c | 34 +++++++++++++++++++++++++++++++---
 nrs/nrs.h | 31 +++++++++++++++++++++++++++++--
 2 files changed, 60 insertions(+), 5 deletions(-)

diff --git a/nrs/nrs.c b/nrs/nrs.c
index ca89eb3..f33a3d0 100644
--- a/nrs/nrs.c
+++ b/nrs/nrs.c
@@ -4,6 +4,10 @@
 #  include <config.h>
 #endif
 
+#include "lib/thread.h"
+#include "lib/queue.h"
+#include "lib/memory.h"
+#include "lib/cond.h"
 #include "addb/addb.h"
 #include "reqh/reqh.h"
 #include "fop/fop.h"
@@ -24,20 +28,44 @@ static const struct c2_addb_loc nrs_addb = {
 
 C2_ADDB_EV_DEFINE(sns_addb_enqueue, "enqueue", 0x10, C2_ADDB_STAMP);
 
-int c2_nrs_init(struct c2_nrs *nrs, struct c2_reqh *reqh)
+int  c2_nrs_init(struct c2_nrs *nrs, struct c2_nrs_policy *pol, 
+                 struct c2_reqh *reqh)
 {
+        int rc;
+        
+        memset(nrs, 0, sizeof(*nrs));        
+        c2_mutex_init(&nrs->n_guard);
+	c2_cond_init(&nrs->n_gotwork);
+        c2_queue_init(&nrs->n_queue);
+        nrs->n_shutdown = false;
 	nrs->n_reqh = reqh;
-	return 0;
+	nrs->n_pol = pol;
+
+        rc = C2_THREAD_INIT(&nrs->n_thread, struct c2_nrs *,
+                            pol->np_thread_init, pol->np_thread_main, 
+                            nrs);
+	return rc;
 }
 
 void c2_nrs_fini(struct c2_nrs *nrs)
 {
+	c2_mutex_lock(&nrs->n_guard);
+	nrs->n_shutdown = true;
+	c2_mutex_unlock(&nrs->n_guard);
+
+        if (nrs->n_thread.t_func != NULL) {
+                c2_thread_join(&nrs->n_thread);
+                c2_thread_fini(&nrs->n_thread);
+        }
+        nrs->n_reqh = NULL;
+        nrs->n_pol = NULL;
 }
 
 void c2_nrs_enqueue(struct c2_nrs *nrs, struct c2_fop *fop)
 {
+	C2_ASSERT(nrs->n_pol != NULL);
 	C2_ADDB_ADD(&fop->f_addb, &nrs_addb, sns_addb_enqueue);
-	c2_reqh_fop_handle(nrs->n_reqh, fop);
+	nrs->n_pol->np_enqueue(nrs, fop);
 }
 
 /** @} end of nrs group */
diff --git a/nrs/nrs.h b/nrs/nrs.h
index 14590ad..d26ee6b 100644
--- a/nrs/nrs.h
+++ b/nrs/nrs.h
@@ -11,12 +11,39 @@
 /* import */
 struct c2_fop;
 struct c2_reqh;
+struct c2_cond;
+struct c2_mutex;
+struct c2_thread;
+struct c2_queue;
+
+struct c2_nrs_policy;
 
 struct c2_nrs {
-	struct c2_reqh *n_reqh;
+        /** Scheduler request handler. */
+	struct c2_reqh       *n_reqh;
+	/** Queue processing thread. */
+        struct c2_thread      n_thread;
+        /** Requests queue being processed by the thread. */
+        struct c2_queue       n_queue;
+        /** Queue and ->shutdown guard. */
+	struct c2_mutex       n_guard;
+        /** More work condition. */
+	struct c2_cond        n_gotwork;
+	/** Nrs policy passed in init time. */
+	struct c2_nrs_policy *n_pol;
+        /** The thread shutdown flag. */
+        bool                  n_shutdown;
+};
+
+struct c2_nrs_policy {
+        char  *np_name;
+        int  (*np_thread_init)(struct c2_nrs *);
+        void (*np_thread_main)(struct c2_nrs *);
+        int  (*np_enqueue) (struct c2_nrs *, struct c2_fop *);
 };
 
-int  c2_nrs_init(struct c2_nrs *nrs, struct c2_reqh *reqh);
+int  c2_nrs_init(struct c2_nrs *nrs, struct c2_nrs_policy *pol, 
+                 struct c2_reqh *reqh);
 void c2_nrs_fini(struct c2_nrs *nrs);
 
 void c2_nrs_enqueue(struct c2_nrs *nrs, struct c2_fop *fop);
-- 
1.8.3.2


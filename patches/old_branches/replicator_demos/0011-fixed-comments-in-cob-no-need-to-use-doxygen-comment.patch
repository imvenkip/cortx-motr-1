From d403ef00a124239784bf33172db0644c0694460a Mon Sep 17 00:00:00 2001
From: Yuriy Umanets <yuriy_umanets@xyratex.com>
Date: Thu, 24 Feb 2011 12:15:03 -0700
Subject: [PATCH 11/91] - fixed comments in cob (no need to use doxygen
 comments in functions); - get back c2_cob_delete(), it may be useful. Still
 it is used for last link unlink casel - using fop2c in *.am files without sh;

---
 cob/cob.c           | 296 +++++++++++++++++++++++++++-------------------------
 cob/cob.h           |   7 ++
 configure.ac        |   3 +-
 fop/ut/Makefile.am  |   2 +-
 mdstore/Makefile.am |   2 +-
 mdstore/mdstore.c   |  78 +++++++-------
 net/ut/Makefile.am  |   2 +-
 stob/ut/Makefile.am |   2 +-
 8 files changed, 205 insertions(+), 187 deletions(-)

diff --git a/cob/cob.c b/cob/cob.c
index 54358ac..4055f88 100644
--- a/cob/cob.c
+++ b/cob/cob.c
@@ -15,7 +15,7 @@
 /**
    @addtogroup cob
    @{
- */
+*/
 
 static const struct c2_addb_ctx_type c2_cob_domain_addb = {
 	.act_name = "cob-domain"
@@ -29,7 +29,9 @@ static const struct c2_addb_loc cob_addb_loc = {
 	.al_name = "cob"
 };
 
-/** Namespace table definition */
+/** 
+   Namespace table definition 
+*/
 static int ns_cmp(struct c2_table *table, const void *key0, const void *key1)
 {
 	const struct c2_cob_nskey *cnk0 = key0;
@@ -61,7 +63,9 @@ int c2_cob_nskey_size(const struct c2_cob_nskey *cnk)
                 c2_bitstring_len_get(&cnk->cnk_name));
 }
 
-/** Object index table definition */
+/** 
+   Object index table definition. 
+*/
 static int oi_cmp(struct c2_table *table, const void *key0, const void *key1)
 {
 	const struct c2_cob_oikey *cok0 = key0;
@@ -124,7 +128,7 @@ int c2_cob_domain_init(struct c2_cob_domain *dom, struct c2_dbenv *env,
 	c2_rwlock_init(&dom->cd_guard);
         dom->cd_dbenv = env;
 
-        /* locate table based on domain id */
+        /* Locate table based on domain id */
         rc = c2_table_init(&dom->cd_namespace, dom->cd_dbenv,
                                cob_dom_id_make(table, &dom->cd_id, "ns"),
                                0, &cob_ns_ops);
@@ -269,18 +273,18 @@ static int cob_oi_lookup(struct c2_cob *cob, struct c2_db_tx *tx)
         struct c2_cob_oikey oikey;
         int rc;
 
-        /** Don't need to lookup anything if nskey is already here. */
+        /* Don't need to lookup anything if nskey is already here. */
         if (cob->co_valid & CA_NSKEY)
                 return 0;
 
         oikey.cok_stobid = cob->co_stobid;
         oikey.cok_linkno = 0;
 
-        /** 
-           Find the name from the object index table. Note the key buffer
-           is out of scope outside of this function, but the record is good
-           until c2_db_pair_fini. 
-        */
+        /* 
+         * Find the name from the object index table. Note the key buffer
+         * is out of scope outside of this function, but the record is good
+         * until c2_db_pair_fini. 
+         */
         c2_db_pair_setup(&cob->co_oipair, &cob->co_dom->cd_object_index,
 			 &oikey, sizeof oikey, NULL, 0);
         rc = c2_table_lookup(tx, &cob->co_oipair);
@@ -336,10 +340,10 @@ static int cob_cache_nscheck(struct c2_cob_domain *dom,
                              const struct c2_cob_nskey *nskey,
                              struct c2_cob **out)
 {
-        /** 
-           @todo implement a cache for cobs and check if the cob with
-           this nskey is in the cache. 
-        */
+        /* 
+         * @todo: implement a cache for cobs and check if the cob with
+         * this nskey is in the cache. 
+         */
         return -ENOENT;
 }
 
@@ -364,10 +368,10 @@ int c2_cob_lookup(struct c2_cob_domain *dom, struct c2_cob_nskey *nskey,
 
         rc = cob_cache_nscheck(dom, nskey, out);
         if (rc == 0) {
-                /** 
-                   Cached, we took ref above. But we do need to free nskey
-                   if they asked. 
-                */
+                /*
+                 * Cached, we took ref above. But we do need to free nskey
+                 * if they asked. 
+                 */
                 if (need & CA_NSKEY_FREE)
                         c2_free(nskey);
                 return 0;
@@ -384,13 +388,13 @@ int c2_cob_lookup(struct c2_cob_domain *dom, struct c2_cob_nskey *nskey,
                 return rc;
         }
 
-        /** Otherwise we can't assume NSKEY will stick around */
+        /* Otherwise we can't assume NSKEY will stick around */
         if (need & CA_NSKEY_FREE)
                 cob->co_valid |= CA_NSKEY | CA_NSKEY_FREE;
 
-        /** 
-           Get the fabrec here too if needed.  co_valid will be set
-           correctly inside the call so we can ignore the return code. 
+        /*
+         * Get the fabrec here too if needed.  co_valid will be set
+         * correctly inside the call so we can ignore the return code. 
         */
         if (need & CA_FABREC)
                 cob_fab_lookup(cob, tx);
@@ -408,9 +412,9 @@ int c2_cob_lookup(struct c2_cob_domain *dom, struct c2_cob_nskey *nskey,
 static int cob_cache_oicheck(struct c2_cob_domain *dom,
                              const struct c2_stob_id *id, struct c2_cob **out)
 {
-        /** 
-           @todo: implement a cache for cobs and check if the cob with this
-           oi is in the cache. 
+        /* 
+         * @todo: implement a cache for cobs and check if the cob with this
+         * oi is in the cache. 
         */
         return -ENOENT;
 }
@@ -435,7 +439,7 @@ int c2_cob_locate(struct c2_cob_domain *dom, const struct c2_stob_id *id,
         if (rc == 0) /* cached, took ref */
                 return 0;
 
-        /** Get cob memory. */
+        /* Get cob memory. */
         rc = cob_alloc(dom, &cob);
         if (rc)
                 return rc;
@@ -447,7 +451,7 @@ int c2_cob_locate(struct c2_cob_domain *dom, const struct c2_stob_id *id,
                 return rc;
         }
 
-        /** Let's assume we want to lookup these up as well. */
+        /* Let's assume we want to lookup these up as well. */
         cob_ns_lookup(cob, tx);
         cob_fab_lookup(cob, tx);
 
@@ -488,37 +492,37 @@ int c2_cob_link(struct c2_cob_domain *dom,
 
         cob->co_nskey = nskey;
 
-        /** Take over nskey memory management from caller. */
+        /* Take over nskey memory management from caller. */
         if (need & CA_NSKEY_FREE)
                 cob->co_valid |= CA_NSKEY | CA_NSKEY_FREE;
 
-        /** 
-           Check if this create case (no "zero" statdaat cob exists) 
-        */
+        /* 
+         * Check if this create case (no "zero" statdaat cob exists) 
+         */
         if (nsrec->cnr_nlink > 0) {
-                /** 
-                   Let's find zero statdata, we will need it. 
-                */
+                /*
+                 * Let's find zero statdata, we will need it. 
+                 */
                 rc = c2_cob_locate(dom, &nsrec->cnr_stobid, &cob0, tx);
                 if (rc)
                         goto out_free;
 
-                /** 
-                   This is one more name for an existing file, its linkno
-                   is the same as number of links before bumping it. 
-                */
+                /*
+                 * This is one more name for an existing file, its linkno
+                 * is the same as number of links before bumping it. 
+                 */
                 nsrec->cnr_linkno = cob0->co_nsrec.cnr_nlink;
 
-                /** 
-                   Bump ->cnr_nlink and use _old_ value for the key in object
-                   index later.
-                */
+                /* 
+                 * Bump ->cnr_nlink and use _old_ value for the key in object
+                 * index later.
+                 */
                 nlink = cob0->co_nsrec.cnr_nlink++;
                 
-                /** 
-                   Now let's update cob0 stat data on storage with new nlink
-                   value.
-                */
+                /* 
+                 * Now let's update cob0 stat data on storage with new nlink
+                 * value.
+                 */
                 c2_db_pair_setup(&pair, &cob0->co_dom->cd_namespace,
 			         cob0->co_nskey, c2_cob_nskey_size(cob0->co_nskey),
 			         &cob0->co_nsrec, sizeof cob0->co_nsrec);
@@ -529,32 +533,32 @@ int c2_cob_link(struct c2_cob_domain *dom,
 	        if (rc)
 	                goto out_free;
 	} else {
-	        /** 
-	           Zero nlink for zero statdata key and +1 nlink for 
-	           statdata itself.
-	        */
+	        /* 
+	         * Zero nlink for zero statdata key and +1 nlink for 
+	         * statdata itself.
+	         */
 	        nlink = nsrec->cnr_nlink++;
 
-                /**
-                   This is first name, its linkno == 0. 
-                */
+                /*
+                 * This is first name, its linkno == 0. 
+                 */
                 nsrec->cnr_linkno = 0;
 	}
 
-        /** 
-           We use child stobid for a key. 
-        */
+        /*
+         * We use child stobid for a key. 
+         */
         oikey.cok_stobid = nsrec->cnr_stobid;
         
-        /** 
-           Use new nlink value for the key in object index. 
-        */
+        /*
+         * Use new nlink value for the key in object index. 
+         */
         oikey.cok_linkno = nlink;
 
-        /** 
-           Add to object index table. Table insert should fail if
-           already exists. 
-        */
+        /*
+         * Add to object index table. Table insert should fail if
+         * already exists. 
+         */
         c2_db_pair_setup(&pair, &dom->cd_object_index,
 			 &oikey, sizeof oikey, cob->co_nskey, 
 			 c2_cob_nskey_size(cob->co_nskey));
@@ -565,15 +569,15 @@ int c2_cob_link(struct c2_cob_domain *dom,
 	if (rc)
                 goto out_free;
 
-        /** Cache the nsrec. */
+        /* Cache the nsrec. */
         cob->co_nsrec = *nsrec;
         cob->co_valid |= CA_NSREC;
 
-        /** 
-           Add to namespace table. Content of ->co_nsrec is not important
-           with only exception for stobid. Meaningful statdata is stored
-           in "zero" namespace entry.
-        */
+        /*
+         * Add to namespace table. Content of ->co_nsrec is not important
+         * with only exception for stobid. Meaningful statdata is stored
+         * in "zero" namespace entry.
+         */
         c2_db_pair_setup(&pair, &dom->cd_namespace,
 			 cob->co_nskey, c2_cob_nskey_size(cob->co_nskey),
 			 &cob->co_nsrec, sizeof cob->co_nsrec);
@@ -615,25 +619,25 @@ int c2_cob_create(struct c2_cob_domain *dom,
 
         C2_PRE(fabrec != NULL);
         
-        /** 
-           No first statdata exists, nlink should be 0! 
-        */
+        /*
+         * No first statdata exists, nlink should be 0! 
+         */
         C2_PRE(nsrec->cnr_nlink == 0);
 
-        /**
-           Let's create name, statdata and object index.
-        */
+        /*
+         * Let's create name, statdata and object index.
+         */
         rc = c2_cob_link(dom, nskey, nsrec, need, &cob, tx);
         if (rc)
                 return rc;
 
-        /** 
-           Now let's update file attributes. Cache the fabrec. 
-        */
+        /* 
+         * Now let's update file attributes. Cache the fabrec. 
+         */
         cob->co_fabrec = *fabrec;
         cob->co_valid |= CA_FABREC;
 
-        /** Add to filattr-basic table. */
+        /* Add to filattr-basic table. */
         c2_db_pair_setup(&pair, &dom->cd_fileattr_basic,
 			 &cob->co_stobid, sizeof cob->co_stobid,
 			 &cob->co_fabrec, sizeof cob->co_fabrec);
@@ -653,7 +657,7 @@ out_free:
         return rc;
 }
 
-/** For assertions only */
+/* For assertions only */
 static bool c2_cob_is_valid(struct c2_cob *cob)
 {
         return c2_stob_id_is_set(&cob->co_stobid);
@@ -664,15 +668,23 @@ C2_ADDB_EV_DEFINE(cob_delete, "md_delete", 0x2, C2_ADDB_FLAG);
 /**
    Unlink last link, kill statdata, file attrs, etc.
  */
-static int c2_cob_unlink_last(struct c2_cob *cob, struct c2_db_tx *tx)
+int c2_cob_delete(struct c2_cob *cob, struct c2_db_tx *tx)
 {
         struct c2_cob_oikey oikey;
         struct c2_db_pair   pair;
         int                  rc;
 
-        /** 
-           Remove from the object index table. 
-        */
+        /*
+         * We need the name key. 
+         */
+        rc = cob_oi_lookup(cob, tx);
+        if (rc)
+                return rc;
+        C2_POST(cob->co_valid & CA_NSKEY);
+
+        /* 
+         * Remove from the object index table. 
+         */
         oikey.cok_stobid = cob->co_stobid;
         oikey.cok_linkno = 0;
         
@@ -685,9 +697,9 @@ static int c2_cob_unlink_last(struct c2_cob *cob, struct c2_db_tx *tx)
         if (rc)
                 return rc;
 
-        /** 
-           Remove from the namespace table. 
-        */
+        /*
+         * Remove from the namespace table. 
+         */
         c2_db_pair_setup(&pair, &cob->co_dom->cd_namespace,
 			 cob->co_nskey, c2_cob_nskey_size(cob->co_nskey),
 			 NULL, 0);
@@ -695,16 +707,16 @@ static int c2_cob_unlink_last(struct c2_cob *cob, struct c2_db_tx *tx)
         c2_db_pair_release(&pair);
 	c2_db_pair_fini(&pair);
 
-        /** 
-           Remove from the fileattr_basic table. 
-        */
+        /* 
+         * Remove from the fileattr_basic table. 
+         */
         c2_db_pair_setup(&pair, &cob->co_dom->cd_fileattr_basic,
 			 &cob->co_stobid, sizeof cob->co_stobid,
 			 NULL, 0);
         
-        /** 
-           Ignore errors; it's a dangling table entry but causes no harm. 
-        */
+        /* 
+         * Ignore errors; it's a dangling table entry but causes no harm. 
+         */
         c2_table_delete(tx, &pair);
         c2_db_pair_release(&pair);
 	c2_db_pair_fini(&pair);
@@ -732,33 +744,33 @@ int c2_cob_unlink(struct c2_cob        *cob,
 
         C2_PRE(c2_cob_is_valid(cob));
 
-        /** 
-           We need the name key. 
-        */
+        /*
+         * We need the name key. 
+         */
         rc = cob_oi_lookup(cob, tx);
         if (rc)
                 goto out;
         C2_POST(cob->co_valid & CA_NSKEY);
 
-        /**
-           Passed cob is zero name holding statdata one. Let's check 
-           its nlink.
-        */
+        /*
+         * Passed cob is zero name holding statdata one. Let's check 
+         * its nlink.
+         */
         C2_PRE(cob->co_nsrec.cnr_nlink > 0);
         nlink = cob->co_nsrec.cnr_nlink--;
 
-        /** 
-           Last nlink, let's all everything. 
-        */
+        /* 
+         * Last nlink, let's all everything. 
+         */
         if (nlink == 0) {
-                rc = c2_cob_unlink_last(cob, tx);
+                rc = c2_cob_delete(cob, tx);
                 goto out;
         }
                 
-        /**
-           Lookup name that will be killed in namespace to check if 
-           this is statdata one or not. 
-        */
+        /*
+         * Lookup name that will be killed in namespace to check if 
+         * this is statdata one or not. 
+         */
         c2_db_pair_setup(&pair, &cob->co_dom->cd_namespace,
 	                 nskey, c2_cob_nskey_size(nskey),
 		         &nsrec, sizeof nsrec);
@@ -768,15 +780,15 @@ int c2_cob_unlink(struct c2_cob        *cob,
         if (rc)
                 goto out;
 
-        /** 
-           Statdata name should always have linkno == 0. Other names
-           have linkno > 0.
-        */
+        /*
+         * Statdata name should always have linkno == 0. Other names
+         * have linkno > 0.
+         */
         if (nsrec.cnr_linkno == 0) {
-                /** 
-                   This is first enrty, let's move statdata to next 
-                   existing name. Let's find a name. 
-                */
+                /*
+                 * This is first enrty, let's move statdata to next 
+                 * existing name. Let's find a name. 
+                 */
                 rc = c2_db_cursor_init(&cursor, 
                                        &cob->co_dom->cd_object_index, tx);
                 if (rc)
@@ -784,11 +796,11 @@ int c2_cob_unlink(struct c2_cob        *cob,
 
                 oikey.cok_stobid = cob->co_stobid;
                         
-                /** 
-                   We want to move statdata to next name, this is 
-                   something with linkno > 0. Let's put 1 and cursor
-                   will find closest one.
-                */
+                /*
+                 * We want to move statdata to next name, this is 
+                 * something with linkno > 0. Let's put 1 and cursor
+                 * will find closest one.
+                 */
                 oikey.cok_linkno = 1;
 
                 c2_db_pair_setup(&pair, &cob->co_dom->cd_object_index,
@@ -800,11 +812,11 @@ int c2_cob_unlink(struct c2_cob        *cob,
 
                 c2_db_cursor_fini(&cursor);
 
-                /**
-                   Now let's move statdata itself using found namespace
-                   key and nsrec from cob. Note that nlink-- is realdy
-                   done above.
-                */
+                /*
+                 * Now let's move statdata itself using found namespace
+                 * key and nsrec from cob. Note that nlink-- is realdy
+                 * done above.
+                 */
                 c2_db_pair_setup(&pair, &cob->co_dom->cd_namespace,
 		                 &nkey, sizeof nkey, &cob->co_nsrec, 
 		                 sizeof cob->co_nsrec);
@@ -814,9 +826,9 @@ int c2_cob_unlink(struct c2_cob        *cob,
                 if (rc)
                         goto out;
 
-                /**
-                   Time to kill the name whatever it was.
-                */
+                /*
+                 * Time to kill the name whatever it was.
+                 */
                 c2_db_pair_setup(&pair, &cob->co_dom->cd_namespace,
 	                         nskey, c2_cob_nskey_size(nskey),
 		                 NULL, 0);
@@ -826,10 +838,10 @@ int c2_cob_unlink(struct c2_cob        *cob,
                 if (rc)
                         goto out;
 
-                /** 
-                   Let's also kill object index entry. Note that we use
-                   nsrec.linkno from nsrec found by name key. This allows
-                   to kill object index entry without a loop.
+                /*
+                 * Let's also kill object index entry. Note that we use
+                 * nsrec.linkno from nsrec found by name key. This allows
+                 * to kill object index entry without a loop.
                 */
                 oikey.cok_stobid = cob->co_stobid;
                 oikey.cok_linkno = nsrec.cnr_linkno;
@@ -840,25 +852,23 @@ int c2_cob_unlink(struct c2_cob        *cob,
                 c2_db_pair_release(&pair);
                 c2_db_pair_fini(&pair);
         } else {
-                /**
-                   Let's update statdata on storage to make sure that
-                   nlink-- is there.
-                */
+                /*
+                 * Let's update statdata on storage to make sure that
+                 * nlink-- is there.
+                 */
                 c2_db_pair_setup(&pair, &cob->co_dom->cd_namespace,
 	                         cob->co_nskey, c2_cob_nskey_size(cob->co_nskey),
 	                         &cob->co_nsrec, sizeof cob->co_nsrec);
                 rc = c2_table_update(tx, &pair);
                 c2_db_pair_release(&pair);
                 c2_db_pair_fini(&pair);
-                if (rc)
-                        goto out;
         }
                 
 out:
-        /** 
-           If the op failed, assume we're not going to do anything else about
-           it, so log and drop in all cases. 
-        */
+        /*
+         * If the op failed, assume we're not going to do anything else about
+         * it, so log and drop in all cases. 
+         */
         C2_ADDB_ADD(&cob->co_dom->cd_addb, &cob_addb_loc, cob_delete, rc == 0);
         c2_cob_put(cob);
         return rc;
diff --git a/cob/cob.h b/cob/cob.h
index 6ce8215..dd35bd4 100644
--- a/cob/cob.h
+++ b/cob/cob.h
@@ -279,6 +279,13 @@ int c2_cob_unlink(struct c2_cob       *cob,
                   struct c2_db_tx     *tx);
 
 /**
+   Delete name with statdata, entry in object index and file
+   attributes.
+*/
+int c2_cob_delete(struct c2_cob *cob, 
+                  struct c2_db_tx *tx);
+
+/**
    Acquires an additional reference on the object.
 
    @see c2_cob_put()
diff --git a/configure.ac b/configure.ac
index 4c86f69..cc771eb 100755
--- a/configure.ac
+++ b/configure.ac
@@ -540,7 +540,8 @@ AC_OUTPUT
 #
 # Set up execute bit on our "compiler" generated from fop2c.in above.
 #
-chmod +x fop/fop2c
+sync
+chmod +x $SRCDIR/fop/fop2c
 
 echo ""
 echo "CFLAGS :  \"$CFLAGS\""
diff --git a/fop/ut/Makefile.am b/fop/ut/Makefile.am
index cff1ad3..92d9104 100644
--- a/fop/ut/Makefile.am
+++ b/fop/ut/Makefile.am
@@ -7,7 +7,7 @@ test_format_u.h test_format_u.c test_format_k.h test_format_k.c: \
                                      test_format.ff \
                                      $(top_builddir)/fop/libfop2c.la \
                                      $(top_builddir)/fop/fop2c 
-	sh $(top_builddir)/fop/fop2c -ku $<
+	$(top_builddir)/fop/fop2c -ku $<
 
 libfop_ut_la_SOURCES = test_format_u.h test_format_u.c fmt_test.c
 
diff --git a/mdstore/Makefile.am b/mdstore/Makefile.am
index 379ef67..62826b4 100644
--- a/mdstore/Makefile.am
+++ b/mdstore/Makefile.am
@@ -6,7 +6,7 @@ mdstore_HEADERS                = mdstore.h
 md_u.h md_u.c: md.ff \
                   $(top_builddir)/fop/libfop2c.la \
                   $(top_builddir)/fop/fop2c 
-	sh $(top_builddir)/fop/fop2c -ku $<
+	$(top_builddir)/fop/fop2c -ku $<
 
 
 noinst_LTLIBRARIES             = libcolibri-mdstore.la
diff --git a/mdstore/mdstore.c b/mdstore/mdstore.c
index d055f57..4a07172 100644
--- a/mdstore/mdstore.c
+++ b/mdstore/mdstore.c
@@ -57,10 +57,10 @@ static void make_nskey(struct c2_cob_nskey **keyh, struct c2_fop_fid *fid,
 static int c2_md_store_check_perm(struct c2_md_store *md, struct c2_fop *fop, 
                                   struct c2_fop_ctx *ctx)
 {
-        /** 
-           @todo: this to check permissions for operation described by 
-           fop and ctx.
-        */
+        /* 
+         * @todo: this to check permissions for operation described by 
+         * fop and ctx.
+         */
         return 0;
 }
 
@@ -82,51 +82,51 @@ int c2_md_store_create(struct c2_md_store *md, struct c2_fop *fop,
         make_nskey(&key, &body->b_pfid, &create->c_name);
         fid2stobid(&nsrec.cnr_stobid, &body->b_tfid);
 
-        /**
-           Create case, nlink == 0, will be bumped by c2_cob_create()
-           where needed.
-        */
+        /*
+         * Create case, nlink == 0, will be bumped by c2_cob_create()
+         * where needed.
+         */
         nsrec.cnr_nlink = 0;
         nsrec.cnr_ino = 0;//c2_fid_flatten(&body->b_tfid);
         
-        /** 
-           @todo: to be later handled in another way according to
-           metadata scheme. Apparently omgid should be allocated
-           here and set to ->cnr_omgid for reference.
-        */
+        /* 
+         * @todo: to be later handled in another way according to
+         * metadata scheme. Apparently omgid should be allocated
+         * here and set to ->cnr_omgid for reference.
+         */
         nsrec.cnr_omgid = 0;
 
         /*nsrec.cnr_uid = body->b_uid;
         nsrec.cnr_gid = body->b_gid;
         nsrec.cnr_mode = body->b_mode;*/
 
-        /** 
-           @todo: do we need rdev support for specil files in
-           replicator? 
-        */
+        /* 
+         * @todo: do we need rdev support for specil files in
+         * replicator? 
+         */
         nsrec.cnr_rdev = 0;
         
-        /** 
-           @todo: these need to be fixed. Before data replication
-           we don't need them.
-        */
+        /*
+         * @todo: these need to be fixed. Before data replication
+         * we don't need them.
+         */
         nsrec.cnr_size = 0;
         nsrec.cnr_blksize = 0;
         nsrec.cnr_blocks = 0;
 
-        /** 
-           @todo: these need to be fixed. We do have 64 bit time
-           stamp in changelog rec and can use it. Still it may be
-           not needed as on target fs these fields may be updated
-           in create time.
-        */
+        /* 
+         * @todo: these need to be fixed. We do have 64 bit time
+         * stamp in changelog rec and can use it. Still it may be
+         * not needed as on target fs these fields may be updated
+         * in create time.
+         */
         nsrec.cnr_atime = 0;
         nsrec.cnr_mtime = 0;
         nsrec.cnr_ctime = 0;
 
         C2_SET0(&fabrec);
         
-        /** @todo: Update fabrec version. */
+        /* @todo: Update fabrec version. */
         fabrec.cfb_sid = body->b_sid;
         fabrec.cfb_nid = body->b_nid;
 
@@ -152,12 +152,12 @@ int c2_md_store_link(struct c2_md_store *md, struct c2_fop *fop,
         if (rc)
                 return rc;
 
-        /**
-           Let's zero out statdata. We don't need it, moreover,
-           ->nlink should be 0 for links, this is how unlink
-           can understand if it tries to kill link or statdata
-           itself. In latter case it needs to be move statdata
-           to en existing name of the file.
+        /*
+         * Let's zero out statdata. We don't need it, moreover,
+         * ->nlink should be 0 for links, this is how unlink
+         * can understand if it tries to kill link or statdata
+         * itself. In latter case it needs to be move statdata
+         * to en existing name of the file.
         */
         C2_SET0(&nsrec);
         make_nskey(&key, &body->b_pfid, &link->l_name);
@@ -235,11 +235,11 @@ int c2_md_store_close(struct c2_md_store *md, struct c2_fop *fop,
         if (rc)
                 return rc;
     
-        /**
-           @todo:
-             - orphans handling?
-             - quota handling?
-        */
+        /*
+         * @todo:
+         *   - orphans handling?
+         *   - quota handling?
+         */
         
         c2_cob_put(cob);
         return rc;
diff --git a/net/ut/Makefile.am b/net/ut/Makefile.am
index 171b3a8..4accaf2 100644
--- a/net/ut/Makefile.am
+++ b/net/ut/Makefile.am
@@ -6,7 +6,7 @@ INCLUDES        	= -I. -I$(top_srcdir) -I$(top_srcdir)/include -I../
 net_u.h net_u.c: net.ff \
                   $(top_builddir)/fop/libfop2c.la \
                   $(top_builddir)/fop/fop2c 
-	sh $(top_builddir)/fop/fop2c -uk $<
+	$(top_builddir)/fop/fop2c -uk $<
 
 libnet_ut_la_SOURCES	= net_u.h net_u.c client.c net_fop_init.c net_fop.h 
 libnet_ut_la_LIBADD 	= $(top_builddir)/colibri/libcolibri.la
diff --git a/stob/ut/Makefile.am b/stob/ut/Makefile.am
index 7650f10..7be66d3 100644
--- a/stob/ut/Makefile.am
+++ b/stob/ut/Makefile.am
@@ -8,7 +8,7 @@ noinst_PROGRAMS       = server client
 io_u.h io_u.c: io.ff \
                   $(top_builddir)/fop/libfop2c.la \
                   $(top_builddir)/fop/fop2c 
-	sh $(top_builddir)/fop/fop2c -uk $<
+	$(top_builddir)/fop/fop2c -uk $<
 
 server_SOURCES   = io_u.h io_u.c server.c io_fop_init.c io_fop.h
 server_LDFLAGS   = -pthread
-- 
1.8.3.2


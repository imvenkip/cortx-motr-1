From 3f48c8a85b9726c3ed4b0ab3fbf9f7cb0f260c77 Mon Sep 17 00:00:00 2001
From: Mandar Sawant <mandar_sawant@xyratex.com>
Date: Fri, 27 Dec 2013 10:42:20 +0530
Subject: [PATCH 7/7] be.conv.conf, - Address inspection comments.

---
 conf/db.c     |  4 ++--
 conf/ut/db.c  |  6 ++----
 xcode/xcode.c | 49 +++++++++++++++++++++----------------------------
 xcode/xcode.h |  4 ----
 4 files changed, 25 insertions(+), 38 deletions(-)

diff --git a/conf/db.c b/conf/db.c
index b587f89..cab74fe 100644
--- a/conf/db.c
+++ b/conf/db.c
@@ -63,8 +63,8 @@ static int confx_to_xcode_obj(struct m0_confx_obj *xobj,
 	M0_PRE(xobj != NULL && out != NULL);
 
 	switch(xobj_type(xobj)) {
-#define _CASE(type, abbrev)                                                        \
-	case type:                                                                 \
+#define _CASE(type, abbrev)                                                         \
+	case type:                                                                  \
 		*out =  M0_XCODE_OBJ(m0_confx_ ## abbrev ## _xc,                    \
 				     decode ? NULL : &xobj->o_conf.u.u_ ## abbrev); \
 		break
diff --git a/conf/ut/db.c b/conf/ut/db.c
index b6261c9..be600ba 100644
--- a/conf/ut/db.c
+++ b/conf/ut/db.c
@@ -208,8 +208,8 @@ void test_confdb(void)
 {
 	struct m0_confx        *enc;
 	struct m0_confx        *dec;
-	struct m0_be_tx_credit  accum;
-	struct m0_be_tx         tx;
+	struct m0_be_tx_credit  accum = {};
+	struct m0_be_tx         tx = {};
 	int                     i;
 	int                     rc;
 	char                    buf[1024] = {0};
@@ -229,8 +229,6 @@ void test_confdb(void)
 
 	cleanup();
 
-	M0_SET0(&accum);
-	M0_SET0(&tx);
 	rc = m0_ut_file_read(M0_CONF_UT_PATH("conf_xc.txt"), buf, sizeof buf);
 	M0_UT_ASSERT(rc == 0);
 
diff --git a/xcode/xcode.c b/xcode/xcode.c
index eb96c5d..526df11 100644
--- a/xcode/xcode.c
+++ b/xcode/xcode.c
@@ -133,16 +133,16 @@ enum xcode_op {
 	XO_NR
 };
 
-M0_INTERNAL bool m0_xcode_at_array(const struct m0_xcode_cursor       *it,
-			           const struct m0_xcode_cursor_frame *prev,
-			           const struct m0_xcode_obj          *par)
+static bool at_array(const struct m0_xcode_cursor       *it,
+		     const struct m0_xcode_cursor_frame *prev,
+		     const struct m0_xcode_obj          *par)
 {
 	return it->xcu_depth > 0 && par->xo_type->xct_aggr == M0_XA_SEQUENCE &&
 	       prev->s_fieldno == 1 && prev->s_elno == 0 &&
 	       m0_xcode_tag(par) > 0;
 }
 
-M0_INTERNAL void **m0_xcode_allocp(struct m0_xcode_cursor *it, size_t *out)
+static void **allocp(struct m0_xcode_cursor *it, size_t *out)
 {
 	const struct m0_xcode_cursor_frame *prev;
 	const struct m0_xcode_obj          *par;
@@ -190,7 +190,7 @@ M0_INTERNAL void **m0_xcode_allocp(struct m0_xcode_cursor *it, size_t *out)
 		nob = size;
 		slot = &obj->xo_ptr;
 	} else {
-		if (m0_xcode_at_array(it, prev, par))
+		if (at_array(it, prev, par))
 			/* allocate array */
 			nob = m0_xcode_tag(par) * size;
 		else if (pt->xct_child[prev->s_fieldno].xf_type == &M0_XT_OPAQUE)
@@ -222,7 +222,7 @@ m0_xcode_alloc_obj(struct m0_xcode_cursor *it,
 
 	obj = &m0_xcode_cursor_top(it)->s_obj;  /* an object being decoded */
 
-	slot = m0_xcode_allocp(it, &nob);
+	slot = allocp(it, &nob);
 	if (nob != 0 && *slot == NULL) {
 		M0_ASSERT(obj->xo_ptr == NULL);
 
@@ -292,7 +292,7 @@ static int ctx_walk(struct m0_xcode_ctx *ctx, enum xcode_op op)
 		} else if (xt->xct_aggr == M0_XA_ATOM) {
 			struct m0_xcode_cursor_frame *prev = top - 1;
 			struct m0_xcode_obj          *par  = &prev->s_obj;
-			bool array = m0_xcode_at_array(it, prev, par) &&
+			bool array = at_array(it, prev, par) &&
 				m0_xcode_is_byte_array(par->xo_type);
 
 			size = xt->xct_sizeof;
@@ -409,13 +409,13 @@ M0_INTERNAL void m0_xcode_free(struct m0_xcode_obj *obj)
 			struct m0_xcode_cursor_frame *prev =  top -1;
 			struct m0_xcode_obj          *par  = &prev->s_obj;
 
-			slot = m0_xcode_allocp(&it, &nob);
+			slot = allocp(&it, &nob);
 			if (top->s_datum != 0) {
 				m0_free((void *) top->s_datum);
 				top->s_datum = 0;
 			}
 
-			if (m0_xcode_at_array(&it, prev, par))
+			if (at_array(&it, prev, par))
 				prev->s_datum = (uint64_t)*slot;
 			else if (nob != 0)
 				m0_free(*slot);
@@ -423,23 +423,19 @@ M0_INTERNAL void m0_xcode_free(struct m0_xcode_obj *obj)
 	}
 }
 
-static int xcode_be_alloc(struct m0_be_seg *seg, struct m0_be_tx *tx,
-			  struct m0_xcode_obj *xobj, struct m0_xcode_cursor *it,
-			  size_t *size)
+static void xcode_be_alloc(struct m0_be_seg *seg, struct m0_be_tx *tx,
+			   struct m0_xcode_obj *xobj, struct m0_xcode_cursor *it,
+			   size_t *size)
 {
-	int    rc = 0;
 	void **slot;
 
-	slot = m0_xcode_allocp(it, size);
+	M0_PRE(xobj->xo_ptr == NULL);
+
+	slot = allocp(it, size);
 	if (*size != 0 && *slot == NULL) {
-		M0_ASSERT(xobj->xo_ptr == NULL);
 		M0_BE_ALLOC_ARR_SYNC(*slot, *size, seg, tx);
 		xobj->xo_ptr = *slot;
-		if (xobj->xo_ptr == NULL)
-			rc = -ENOMEM;
 	}
-
-	return rc;
 }
 
 static bool is_xcode_cursor_at(struct m0_xcode_cursor *it,
@@ -456,7 +452,7 @@ static void iff_at_array_xcode_cursor_skip(struct m0_xcode_cursor *it)
 {
 	struct m0_xcode_cursor_frame *prev = m0_xcode_cursor_top(it) - 1;
 	struct m0_xcode_obj          *par  = &prev->s_obj;
-	bool array = m0_xcode_at_array(it, prev, par) &&
+	bool array = at_array(it, prev, par) &&
 		m0_xcode_is_byte_array(par->xo_type);
 
 	if (array) {
@@ -474,7 +470,6 @@ M0_INTERNAL int m0_xcode_be_dup(struct m0_xcode_obj *dest,
 	struct m0_xcode_obj    *src_obj;
 	struct m0_xcode_obj    *dest_obj;
 	int                     result;
-	int                     rc;
 
 	M0_PRE(dest->xo_type == src->xo_type);
 
@@ -499,19 +494,17 @@ M0_INTERNAL int m0_xcode_be_dup(struct m0_xcode_obj *dest,
 		xt = sobj->xo_type;
 		M0_ASSERT(xt == dobj->xo_type);
 		if (is_xcode_cursor_at(&sit, M0_XCODE_CURSOR_PRE, M0_XA_ATOM)) {
-			rc = xcode_be_alloc(seg, tx, dobj, &dit, &nob);
-			M0_ASSERT(rc == 0);
-			if (nob == 0)
+			if (dobj->xo_ptr == NULL )
+				xcode_be_alloc(seg, tx, dobj, &dit, &nob);
+			else
 				nob = sobj->xo_type->xct_sizeof;
 			memcpy(dobj->xo_ptr, sobj->xo_ptr, nob);
 			iff_at_array_xcode_cursor_skip(&sit);
 			iff_at_array_xcode_cursor_skip(&dit);
 		} else if (is_xcode_cursor_at(&sit, M0_XCODE_CURSOR_PRE,
 					      M0_XA_SEQUENCE) &&
-			   dobj->xo_ptr == NULL) {
-			rc = xcode_be_alloc(seg, tx, dobj, &dit, &nob);
-			M0_ASSERT(rc == 0);
-		}
+			   dobj->xo_ptr == NULL)
+			xcode_be_alloc(seg, tx, dobj, &dit, &nob);
 	}
 
 	dest_obj = &dit.xcu_stack[0].s_obj;
diff --git a/xcode/xcode.h b/xcode/xcode.h
index 056638c..79ba55e 100644
--- a/xcode/xcode.h
+++ b/xcode/xcode.h
@@ -567,15 +567,11 @@ M0_INTERNAL int m0_xcode_data_size(struct m0_xcode_ctx *ctx,
 				   const struct m0_xcode_obj *obj);
 
 M0_INTERNAL void *m0_xcode_alloc(struct m0_xcode_cursor *it, size_t nob);
-M0_INTERNAL void **m0_xcode_allocp(struct m0_xcode_cursor *it, size_t *out);
 
 /**
    True iff "xt" is an array of bytes.
  */
 M0_INTERNAL bool m0_xcode_is_byte_array(const struct m0_xcode_type *xt);
-M0_INTERNAL bool m0_xcode_at_array(const struct m0_xcode_cursor       *it,
-                                   const struct m0_xcode_cursor_frame *prev,
-                                   const struct m0_xcode_obj          *par);
 
 /**
    Handles memory allocation during decoding.
-- 
1.8.3.2


From d8050c90aa1470ee77bf6327deaf2b2acd282844 Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Fri, 28 Dec 2012 21:31:32 +0800
Subject: [PATCH 01/24] add m0_rpc_client_ctx into ios service, and store it as
 a reqh key. Init this m0_rpc_client_ctx in service start.

---
 ioservice/io_service.c | 65 +++++++++++++++++++++++++++++++++++++++++++++++++-
 ioservice/io_service.h | 18 ++++++++++----
 2 files changed, 78 insertions(+), 5 deletions(-)

diff --git a/ioservice/io_service.c b/ioservice/io_service.c
index a53563f..3b0e770 100644
--- a/ioservice/io_service.c
+++ b/ioservice/io_service.c
@@ -30,6 +30,8 @@
 #include "lib/memory.h"
 #include "lib/tlist.h"
 #include "mero/magic.h"
+#include "rpc/rpc.h"
+#include "rpc/rpclib.h"
 #include "net/buffer_pool.h"
 #include "reqh/reqh_service.h"
 #include "reqh/reqh.h"
@@ -443,6 +445,9 @@ static int ios_start(struct m0_reqh_service *service)
 	if (rc != 0)
 		return rc;
 
+	serv_obj = container_of(service, struct m0_reqh_io_service, rios_gen);
+	serv_obj->rios_cdom = *cdom;
+
 	rc = ios_create_buffer_pool(service);
 	if (rc != 0) {
 		/* Cleanup required for already created buffer pools. */
@@ -450,8 +455,59 @@ static int ios_start(struct m0_reqh_service *service)
 		return rc;
 	}
 
-	rc = m0_ios_poolmach_init(service->rs_reqh);
+	serv_obj->rios_mds_rpc_ctx_key = m0_reqh_key_init();
+	serv_obj->rios_mds_rpc_ctx = m0_reqh_key_find(service->rs_reqh,
+					serv_obj->rios_mds_rpc_ctx_key,
+					sizeof(struct m0_rpc_client_ctx));
+	if (serv_obj->rios_mds_rpc_ctx == NULL) {
+		ios_delete_buffer_pool(service);
+		return -ENOMEM;
+	}
+
+	/* Init serv_obj->rios_mds_rpc_ctx here */
+	/*
+	m0_net_domain_init(&cl_ndom, &m0_net_lnet_xprt);
+	serv_obj->rios_mds_rpc_ctx->rcx_net_dom            = &cl_ndom;
+	serv_obj->rios_mds_rpc_ctx->rcx_local_addr         = cl_ep_addr;
+	serv_obj->rios_mds_rpc_ctx->rcx_remote_addr        = srv_ep_addr;
+	serv_obj->rios_mds_rpc_ctx->rcx_db_name            = dbname;
+	serv_obj->rios_mds_rpc_ctx->rcx_dbenv              = &cl_dbenv;
+	serv_obj->rios_mds_rpc_ctx->rcx_cob_dom_id         = cl_cdom_id;
+	serv_obj->rios_mds_rpc_ctx->rcx_cob_dom            = &cl_cdom;
+	serv_obj->rios_mds_rpc_ctx->rcx_nr_slots           = MAX_RPC_SLOTS_NR;
+	serv_obj->rios_mds_rpc_ctx->rcx_timeout_s          = RPC_TIMEOUTS;
+	serv_obj->rios_mds_rpc_ctx->rcx_max_rpcs_in_flight = MAX_RPCS_IN_FLIGHT;
+	*/
+	/* And then init client */
+	rc = m0_rpc_client_start(serv_obj->rios_mds_rpc_ctx);
+	if (rc != 0) {
+		m0_reqh_key_fini(service->rs_reqh,
+				 serv_obj->rios_mds_rpc_ctx_key);
+		ios_delete_buffer_pool(service);
+		return rc;
+	}
 
+	/* When necessary, we can send rpc to mds to get layout and other
+	 * file attributes.
+	 */
+	/* This is an example to send a request to mds, e.g. getattr, layout_get
+	fop = m0_fop_alloc(some_fop_fopt, NULL);
+	req = m0_fop_data(fop);
+	rc = m0_rpc_client_call(fop, &serv_obj->rios_mds_rpc_ctx->rcx_session,
+				NULL,
+				0,
+				m0_time_from_now(60, 0));
+	rep = m0_rpc_item_to_fop(fop->f_item.ri_reply);
+	m0_fop_put(fop);
+	*/
+
+	rc = m0_ios_poolmach_init(service->rs_reqh);
+	if (rc != 0) {
+		m0_rpc_client_stop(serv_obj->rios_mds_rpc_ctx);
+		m0_reqh_key_fini(service->rs_reqh,
+				 serv_obj->rios_mds_rpc_ctx_key);
+		ios_delete_buffer_pool(service);
+	}
 	return rc;
 }
 
@@ -466,7 +522,14 @@ static int ios_start(struct m0_reqh_service *service)
  */
 static void ios_stop(struct m0_reqh_service *service)
 {
+	struct m0_reqh_io_service *serv_obj;
 	M0_PRE(service != NULL);
+
+	serv_obj = container_of(service, struct m0_reqh_io_service, rios_gen);
+
+	m0_rpc_client_stop(serv_obj->rios_mds_rpc_ctx);
+	m0_reqh_key_fini(service->rs_reqh, serv_obj->rios_mds_rpc_ctx_key);
+
 	m0_ios_poolmach_fini(service->rs_reqh);
 	ios_delete_buffer_pool(service);
 	m0_ios_cdom_fini(service->rs_reqh);
diff --git a/ioservice/io_service.h b/ioservice/io_service.h
index 93b9803..c86a584 100644
--- a/ioservice/io_service.h
+++ b/ioservice/io_service.h
@@ -90,15 +90,25 @@ struct m0_ios_rwfom_stats {
  */
 struct m0_reqh_io_service {
         /** Generic reqh service object */
-        struct m0_reqh_service     rios_gen;
+        struct m0_reqh_service       rios_gen;
         /** Buffer pools belongs to this services */
-        struct m0_tl               rios_buffer_pools;
+        struct m0_tl                 rios_buffer_pools;
 	/** Read[0] and write[1] I/O FOM statistics */
 	struct m0_ios_rwfom_stats  rios_rwfom_stats[2];
 	/** Cob domain for ioservice. */
-	struct m0_cob_domain      *rios_cdom;
+	struct m0_cob_domain      rios_cdom;
+        struct m0_tl                 rios_buffer_pools;
+
+	/** rpc client to metadata & management service.
+	 * This is stored in reqh as a key. So other services, like "sns_repair"
+	 * can also use this to contact mds to get layout for files, get
+	 * attributes for files, etc.
+	 */
+	struct m0_rpc_client_ctx    *rios_mds_rpc_ctx;
+	unsigned                     rios_mds_rpc_ctx_key;
+
         /** magic to check io service object */
-        uint64_t                   rios_magic;
+        uint64_t                     rios_magic;
 };
 
 M0_INTERNAL bool m0_reqh_io_service_invariant(const struct m0_reqh_io_service
-- 
1.8.3.2


From 833f3e327f4d47b1d4c98b6b9db40d441ae602b2 Mon Sep 17 00:00:00 2001
From: Hua Huang <hua_huang@xyratex.com>
Date: Sat, 29 Dec 2012 08:21:39 +0800
Subject: [PATCH 10/10] call poolmach_fini in cm_setup_ut() adding more debug
 messsage in poolmach init, get and fini assert reqh key is valid

---
 cm/ut/cm.c            | 2 ++
 ioservice/io_device.c | 8 +++++++-
 reqh/reqh.c           | 1 +
 3 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/cm/ut/cm.c b/cm/ut/cm.c
index 1bead31..cd3575d 100644
--- a/cm/ut/cm.c
+++ b/cm/ut/cm.c
@@ -210,6 +210,7 @@ static void cm_setup_ut(void)
 	M0_UT_ASSERT(rc == 0);
 
 	rc = m0_ios_poolmach_init(service->rs_reqh);
+	M0_UT_ASSERT(rc == 0);
 
 	/* Checks if the restructuring process is started successfully. */
 	rc = m0_cm_start(&cm_ut);
@@ -219,6 +220,7 @@ static void cm_setup_ut(void)
 	rc = m0_cm_stop(&cm_ut);
 	M0_UT_ASSERT(rc == 0);
 	cm_ut_service_cleanup();
+	m0_ios_poolmach_fini(service->rs_reqh);
 }
 
 static void cm_init_failure_ut(void)
diff --git a/ioservice/io_device.c b/ioservice/io_device.c
index 70143d2..5d0b558 100644
--- a/ioservice/io_device.c
+++ b/ioservice/io_device.c
@@ -227,6 +227,8 @@
 #include "config.h"
 #endif
 
+#define M0_TRACE_SUBSYSTEM M0_TRACE_SUBSYS_IOSERVICE
+#include "lib/trace.h"
 #include "lib/errno.h"
 #include "lib/memory.h"
 #include "ioservice/io_device.h"
@@ -248,6 +250,7 @@ M0_INTERNAL int m0_ios_poolmach_init(struct m0_reqh *reqh)
 	int                 rc;
 	struct m0_poolmach *poolmach;
 
+	M0_LOG(M0_DEBUG, "key init for reqh=%p, key=%d\n", reqh, poolmach_key);
 	M0_PRE(reqh != NULL);
 	M0_PRE(!poolmach_is_initialised);
 
@@ -267,7 +270,7 @@ M0_INTERNAL int m0_ios_poolmach_init(struct m0_reqh *reqh)
 		goto out;
 	}
 	poolmach_is_initialised = true;
-
+	M0_LOG(M0_DEBUG, "key init for reqh=%p, key=%d", reqh, poolmach_key);
 out:
 	m0_rwlock_write_unlock(&reqh->rh_rwlock);
 	return rc;
@@ -277,6 +280,7 @@ M0_INTERNAL struct m0_poolmach *m0_ios_poolmach_get(struct m0_reqh *reqh)
 {
 	struct m0_poolmach *pm;
 
+	M0_LOG(M0_DEBUG, "key get for reqh=%p, key=%d", reqh, poolmach_key);
 	M0_PRE(reqh != NULL);
 	M0_PRE(poolmach_is_initialised);
 	M0_PRE(poolmach_key != 0);
@@ -291,6 +295,7 @@ M0_INTERNAL void m0_ios_poolmach_fini(struct m0_reqh *reqh)
 	struct m0_poolmach *pm;
 	M0_PRE(reqh != NULL);
 
+	M0_LOG(M0_DEBUG, "key fini for reqh=%p, key=%d", reqh, poolmach_key);
 	m0_rwlock_write_lock(&reqh->rh_rwlock);
 	pm = m0_reqh_key_find(reqh, poolmach_key, sizeof *pm);
 	m0_poolmach_fini(pm);
@@ -362,6 +367,7 @@ out:
 
 }
 
+#undef M0_TRACE_SUBSYSTEM
 /** @} */ /* end of io_calls_params_dldDFS */
 
 /*
diff --git a/reqh/reqh.c b/reqh/reqh.c
index 2c3e330..921d7ce 100644
--- a/reqh/reqh.c
+++ b/reqh/reqh.c
@@ -208,6 +208,7 @@ M0_INTERNAL void *m0_reqh_key_find(struct m0_reqh *reqh, unsigned key,
 	void **data;
 
 	M0_PRE(IS_IN_ARRAY(key, reqh->rh_key) && reqh != NULL && size > 0);
+	M0_PRE(key <= keymax);
 
 	data = &reqh->rh_key[key];
 	if (*data == NULL)
-- 
1.8.3.2


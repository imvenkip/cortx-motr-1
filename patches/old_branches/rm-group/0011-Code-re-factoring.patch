From b176cdab71c04ffa9ed20520eebdf81f44b35c55 Mon Sep 17 00:00:00 2001
From: Rajesh Bhalerao <Rajesh_Bhalerao@xyratex.com>
Date: Tue, 27 Aug 2013 11:00:18 +0530
Subject: [PATCH 11/24] Code re-factoring.

---
 rm/ut/file.c     | 21 +++++++++------------
 rm/ut/group.c    | 23 ++++++++++-------------
 rm/ut/rcredits.c | 25 +++++++++++--------------
 rm/ut/rmut.c     |  2 ++
 rm/ut/rmut.h     |  3 +++
 5 files changed, 35 insertions(+), 39 deletions(-)

diff --git a/rm/ut/file.c b/rm/ut/file.c
index 690a14e..620e893 100644
--- a/rm/ut/file.c
+++ b/rm/ut/file.c
@@ -55,11 +55,8 @@ static int clnt_counter;
 static int srv_counter;
 
 /* Maximum test servers for this testcase */
-static enum rm_server test_servers_nr;
-
-static struct m0_chan flock_tests_chan;
+static enum rm_server  test_servers_nr;
 static struct m0_clink tests_clink[LOCK_TESTS_NR];
-static struct m0_mutex flock_tests_chan_mutex;
 
 /*
  * m0_file_lock_type_register registers a single type
@@ -393,7 +390,7 @@ static void client_tests(void)
 	client_lock_test();
 
 	/* Begin next test */
-	m0_chan_signal_lock(&flock_tests_chan);
+	m0_chan_signal_lock(&rm_ut_tests_chan);
 	m0_chan_wait(&tests_clink[DISTRIBUTED_LOCK_TEST]);
 
 	client_dlock_run();
@@ -406,7 +403,7 @@ static void server_tests(void)
 	test_verify(LOCK_ON_SERVER_TEST);
 
 	/* Begin next test */
-	m0_chan_signal_lock(&flock_tests_chan);
+	m0_chan_signal_lock(&rm_ut_tests_chan);
 	srv_dlock_run();
 }
 
@@ -455,12 +452,12 @@ static void flock_utinit(void)
 		rm_ctx_config(i);
 
 	server_hier_config();
-	m0_mutex_init(&flock_tests_chan_mutex);
-	m0_chan_init(&flock_tests_chan, &flock_tests_chan_mutex);
+	m0_mutex_init(&rm_ut_tests_chan_mutex);
+	m0_chan_init(&rm_ut_tests_chan, &rm_ut_tests_chan_mutex);
 	/* Set up test sync points */
 	for (i = 0; i < LOCK_TESTS_NR; ++i) {
 		m0_clink_init(&tests_clink[i], NULL);
-		m0_clink_add_lock(&flock_tests_chan, &tests_clink[i]);
+		m0_clink_add_lock(&rm_ut_tests_chan, &tests_clink[i]);
 	}
 }
 
@@ -492,8 +489,8 @@ static void flock_utfini(void)
 		m0_clink_del_lock(&tests_clink[i]);
 		m0_clink_fini(&tests_clink[i]);
 	}
-	m0_chan_fini_lock(&flock_tests_chan);
-	m0_mutex_fini(&flock_tests_chan_mutex);
+	m0_chan_fini_lock(&rm_ut_tests_chan);
+	m0_mutex_fini(&rm_ut_tests_chan_mutex);
 }
 
 void flock_test(void)
@@ -510,7 +507,7 @@ void flock_test(void)
 	}
 
 	/* Now start the tests - wait till all the servers are ready */
-	m0_chan_signal_lock(&flock_tests_chan);
+	m0_chan_signal_lock(&rm_ut_tests_chan);
 	for (i = 0; i < test_servers_nr; ++i) {
 		m0_thread_join(&rm_ctx[i].rc_thr);
 		m0_thread_fini(&rm_ctx[i].rc_thr);
diff --git a/rm/ut/group.c b/rm/ut/group.c
index d4ecd8d..5e871b8 100644
--- a/rm/ut/group.c
+++ b/rm/ut/group.c
@@ -25,11 +25,8 @@
 #include "rm/ut/rings.h"
 
 /* Maximum test servers for this testcase */
-static enum rm_server test_servers_nr;
-
-static struct m0_chan    group_tests_chan;
-static struct m0_clink   group_tests_clink[GROUP_TESTS_NR];
-static struct m0_mutex   group_tests_chan_mutex;
+static enum rm_server  test_servers_nr;
+static struct m0_clink group_tests_clink[GROUP_TESTS_NR];
 
 static void rmg_in_complete(struct m0_rm_incoming *in, int32_t rc)
 {
@@ -141,7 +138,7 @@ static void server1_tests(void)
 	group_borrow_verify(SERVER_1);
 
 	/* Begin next test */
-	m0_chan_signal_lock(&group_tests_chan);
+	m0_chan_signal_lock(&rm_ut_tests_chan);
 }
 
 static void server2_tests(void)
@@ -151,7 +148,7 @@ static void server2_tests(void)
 	group_borrow_verify(SERVER_2);
 
 	/* Begin next test */
-	m0_chan_signal_lock(&group_tests_chan);
+	m0_chan_signal_lock(&rm_ut_tests_chan);
 
 }
 
@@ -220,13 +217,13 @@ static void rm_group_utinit(void)
 		rm_ctx_config(i);
 
 	server_hier_config();
-	m0_mutex_init(&group_tests_chan_mutex);
-	m0_chan_init(&group_tests_chan, &group_tests_chan_mutex);
+	m0_mutex_init(&rm_ut_tests_chan_mutex);
+	m0_chan_init(&rm_ut_tests_chan, &rm_ut_tests_chan_mutex);
 
 	/* Set up test sync points */
 	for (i = 0; i < GROUP_TESTS_NR; ++i) {
 		m0_clink_init(&group_tests_clink[i], NULL);
-		m0_clink_add_lock(&group_tests_chan, &group_tests_clink[i]);
+		m0_clink_add_lock(&rm_ut_tests_chan, &group_tests_clink[i]);
 	}
 }
 
@@ -254,8 +251,8 @@ static void rm_group_utfini(void)
 		m0_clink_del_lock(&group_tests_clink[i]);
 		m0_clink_fini(&group_tests_clink[i]);
 	}
-	m0_chan_fini_lock(&group_tests_chan);
-	m0_mutex_fini(&group_tests_chan_mutex);
+	m0_chan_fini_lock(&rm_ut_tests_chan);
+	m0_mutex_fini(&rm_ut_tests_chan_mutex);
 }
 
 void rm_group_test(void)
@@ -272,7 +269,7 @@ void rm_group_test(void)
 	}
 
 	/* Now start the tests - wait till all the servers are ready */
-	m0_chan_signal_lock(&group_tests_chan);
+	m0_chan_signal_lock(&rm_ut_tests_chan);
 	for (i = 0; i < test_servers_nr; ++i) {
 		m0_thread_join(&rm_ctx[i].rc_thr);
 		m0_thread_fini(&rm_ctx[i].rc_thr);
diff --git a/rm/ut/rcredits.c b/rm/ut/rcredits.c
index 2068b7a..c2510f2 100644
--- a/rm/ut/rcredits.c
+++ b/rm/ut/rcredits.c
@@ -25,11 +25,8 @@
 #include "rm/ut/rings.h"
 
 /* Maximum test servers for this testcase */
-static enum rm_server test_servers_nr;
-
-struct m0_chan    rr_tests_chan;
-struct m0_clink   tests_clink[TEST_NR];
-struct m0_mutex   rr_tests_chan_mutex;
+static enum rm_server  test_servers_nr;
+static struct m0_clink tests_clink[TEST_NR];
 
 static void server1_in_complete(struct m0_rm_incoming *in, int32_t rc)
 {
@@ -141,7 +138,7 @@ static void server1_tests(void)
 	test2_verify();
 	m0_clink_del_lock(&rm_ctx[SERVER_1].rc_clink);
 
-	m0_chan_signal_lock(&rr_tests_chan);
+	m0_chan_signal_lock(&rm_ut_tests_chan);
 }
 
 static void test3_verify(void)
@@ -242,7 +239,7 @@ static void server2_tests(void)
 	test1_verify();
 
 	/* Begin next test */
-	m0_chan_signal_lock(&rr_tests_chan);
+	m0_chan_signal_lock(&rm_ut_tests_chan);
 
 	m0_chan_wait(&tests_clink[TEST3]);
 	test3_run();
@@ -250,7 +247,7 @@ static void server2_tests(void)
 	m0_clink_del_lock(&rm_ctx[SERVER_2].rc_clink);
 
 	/* Begin next test */
-	m0_chan_signal_lock(&rr_tests_chan);
+	m0_chan_signal_lock(&rm_ut_tests_chan);
 }
 
 static void test4_run(void)
@@ -334,12 +331,12 @@ static void remote_credits_utinit(void)
 		rm_ctx_config(i);
 
 	server_hier_config();
-	m0_mutex_init(&rr_tests_chan_mutex);
-	m0_chan_init(&rr_tests_chan, &rr_tests_chan_mutex);
+	m0_mutex_init(&rm_ut_tests_chan_mutex);
+	m0_chan_init(&rm_ut_tests_chan, &rm_ut_tests_chan_mutex);
 	/* Set up test sync points */
 	for (i = 0; i < TEST_NR; ++i) {
 		m0_clink_init(&tests_clink[i], NULL);
-		m0_clink_add_lock(&rr_tests_chan, &tests_clink[i]);
+		m0_clink_add_lock(&rm_ut_tests_chan, &tests_clink[i]);
 	}
 }
 
@@ -367,8 +364,8 @@ static void remote_credits_utfini(void)
 		m0_clink_del_lock(&tests_clink[i]);
 		m0_clink_fini(&tests_clink[i]);
 	}
-	m0_chan_fini_lock(&rr_tests_chan);
-	m0_mutex_fini(&rr_tests_chan_mutex);
+	m0_chan_fini_lock(&rm_ut_tests_chan);
+	m0_mutex_fini(&rm_ut_tests_chan_mutex);
 }
 
 void remote_credits_test(void)
@@ -385,7 +382,7 @@ void remote_credits_test(void)
 	}
 
 	/* Now start the tests - wait till all the servers are ready */
-	m0_chan_signal_lock(&rr_tests_chan);
+	m0_chan_signal_lock(&rm_ut_tests_chan);
 	for (i = 0; i < test_servers_nr; ++i) {
 		m0_thread_join(&rm_ctx[i].rc_thr);
 		m0_thread_fini(&rm_ctx[i].rc_thr);
diff --git a/rm/ut/rmut.c b/rm/ut/rmut.c
index ab0c3b5..2d1c1f6 100644
--- a/rm/ut/rmut.c
+++ b/rm/ut/rmut.c
@@ -46,6 +46,8 @@ const int cob_ids[] = { 20, 30, 40 };
  */
 struct rm_ut_data rm_test_data;
 struct rm_context rm_ctx[SERVER_NR];
+struct m0_chan    rm_ut_tests_chan;
+struct m0_mutex   rm_ut_tests_chan_mutex;
 
 extern void rm_api_test(void);
 extern void local_credits_test(void);
diff --git a/rm/ut/rmut.h b/rm/ut/rmut.h
index 4faf5db..92ed0f2 100644
--- a/rm/ut/rmut.h
+++ b/rm/ut/rmut.h
@@ -134,6 +134,9 @@ M0_EXTERN struct rm_context  rm_ctx[];
 M0_EXTERN const char        *serv_addr[];
 M0_EXTERN const int          cob_ids[];
 M0_EXTERN const char        *db_name[];
+M0_EXTERN struct m0_chan     rm_ut_tests_chan;
+M0_EXTERN struct m0_mutex    rm_ut_tests_chan_mutex;
+M0_EXTERN const char        *db_name[];
 
 void rm_utdata_init(struct rm_ut_data *data, enum obj_type type);
 void rm_utdata_fini(struct rm_ut_data *data, enum obj_type type);
-- 
1.8.3.2


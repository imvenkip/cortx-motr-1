From 2a9e3d453fc7d9c27d5c058bf7c0ac25edd5426c Mon Sep 17 00:00:00 2001
From: Manish Honap <manish_honap@xyratex.com>
Date: Thu, 19 Sep 2013 15:33:26 +0530
Subject: [PATCH 24/24] [rm-group] Change addb counter and timing function

* Log timing for LOCAL request also
* Reorganise code
---
 doc/addb-ids    | 12 +++++++-----
 rm/rm.c         | 43 +++++++++++++++++++++----------------------
 rm/rm.h         | 47 +++++++++++++++++++++++++----------------------
 rm/rm_addb.h    | 31 ++++++++++++++++++++++++-------
 rm/rm_service.c |  2 ++
 5 files changed, 79 insertions(+), 56 deletions(-)

diff --git a/doc/addb-ids b/doc/addb-ids
index 5ad4a97..d0f61aa 100644
--- a/doc/addb-ids
+++ b/doc/addb-ids
@@ -162,8 +162,10 @@ value            enum                 variable name         file
 1400-1499							   fop/fop_addb.h
 1500-1599                                                          mgmt/mgmt_addb.h
 1600-1699                                                          rm/rm_addb.h
-  1600 M0_ADDB_RECID_RM_BORROW_RATE      m0_addb_rt_rm_borrow_rate
-  1601 M0_ADDB_RECID_RM_REVOKE_RATE      m0_addb_rt_rm_revoke_rate
-  1602 M0_ADDB_RECID_RM_BORROW_TIMES     m0_addb_rt_rm_borrow_times
-  1603 M0_ADDB_RECID_RM_REVOKE_TIMES     m0_addb_rt_rm_revoke_times
-  1604 M0_ADDB_RECID_RM_CREDIT_TIMES     m0_addb_rt_rm_credit_times
+  1600 M0_ADDB_RECID_RM_LOCAL_RATE       m0_addb_rt_rm_local_rate
+  1601 M0_ADDB_RECID_RM_BORROW_RATE      m0_addb_rt_rm_borrow_rate
+  1602 M0_ADDB_RECID_RM_REVOKE_RATE      m0_addb_rt_rm_revoke_rate
+  1603 M0_ADDB_RECID_RM_LOCAL_TIMES      m0_addb_rt_rm_local_times
+  1604 M0_ADDB_RECID_RM_BORROW_TIMES     m0_addb_rt_rm_borrow_times
+  1605 M0_ADDB_RECID_RM_REVOKE_TIMES     m0_addb_rt_rm_revoke_times
+  1606 M0_ADDB_RECID_RM_CREDIT_TIMES     m0_addb_rt_rm_credit_times
diff --git a/rm/rm.c b/rm/rm.c
index 3ddbcc7..ea5937b 100644
--- a/rm/rm.c
+++ b/rm/rm.c
@@ -190,15 +190,15 @@ static m0_time_t   rm_addb_update_interval =
 	M0_MKTIME(M0_ADDB_DEF_STAT_PERIOD_S, 0);
 const struct m0_uint128 m0_rm_no_group = M0_UINT128(0, 0);
 
-static struct m0_addb_rec_type *rm_cntr_rts[] = {
+enum {CNT_NR, CNT_TIME, CNT_LAST};
+
+static struct m0_addb_rec_type *rm_cntr_rts[M0_RIT_NR][CNT_LAST] = {
+	/* local request */
+	{ &m0_addb_rt_rm_local_rate, &m0_addb_rt_rm_local_times },
 	/* borrow */
-	&m0_addb_rt_rm_borrow_rate,
-	&m0_addb_rt_rm_borrow_times,
+	{ &m0_addb_rt_rm_borrow_rate, &m0_addb_rt_rm_borrow_times },
 	/* revoke */
-	&m0_addb_rt_rm_revoke_rate,
-	&m0_addb_rt_rm_revoke_times,
-	/* credit */
-	&m0_addb_rt_rm_credit_times
+	{ &m0_addb_rt_rm_revoke_rate, &m0_addb_rt_rm_revoke_times }
 };
 
 M0_INTERNAL void m0_rm_domain_init(struct m0_rm_domain *dom)
@@ -248,7 +248,6 @@ M0_INTERNAL int m0_rm_type_register(struct m0_rm_domain        *dom,
 				    struct m0_rm_resource_type *rt)
 {
 	int i;
-	int j;
 	int rc;
 
 	M0_ENTRY("resource type: %s", rt->rt_name);
@@ -273,14 +272,15 @@ M0_INTERNAL int m0_rm_type_register(struct m0_rm_domain        *dom,
 	M0_POST(resource_type_invariant(rt));
 	m0_mutex_unlock(&dom->rd_lock);
 
-	for (i = 0, j = 0; i < ARRAY_SIZE(rt->rt_addb_stats.as_req); ++i) {
-		rt->rt_addb_stats.as_req[i].rs_count = 0;
-		m0_addb_counter_init(&rt->rt_addb_stats.as_req[i].rs_nr,
-				     rm_cntr_rts[j++]);
-		m0_addb_counter_init(&rt->rt_addb_stats.as_req[i].rs_time,
-				     rm_cntr_rts[j++]);
+	for (i = 0; i < ARRAY_SIZE(rt->rt_addb_stats.as_req); ++i) {
+		struct rm_addb_req_stats *req = &rt->rt_addb_stats.as_req[i];
+
+		req->rs_count = 0;
+		m0_addb_counter_init(&req->rs_nr, rm_cntr_rts[i][CNT_NR]);
+		m0_addb_counter_init(&req->rs_time, rm_cntr_rts[i][CNT_TIME]);
 	}
-	m0_addb_counter_init(&rt->rt_addb_stats.as_credit_time, rm_cntr_rts[j]);
+	m0_addb_counter_init(&rt->rt_addb_stats.as_credit_time,
+			     &m0_addb_rt_rm_credit_times);
 
 	M0_POST(dom->rd_types[rt->rt_id] == rt);
 	M0_POST(rt->rt_dom == dom);
@@ -301,11 +301,12 @@ M0_INTERNAL void m0_rm_type_deregister(struct m0_rm_resource_type *rt)
 
 	m0_addb_counter_fini(&rt->rt_addb_stats.as_credit_time);
 	for (i = 0; i < ARRAY_SIZE(rt->rt_addb_stats.as_req); ++i) {
-		m0_addb_counter_fini(&rt->rt_addb_stats.as_req[i].rs_time);
-		m0_addb_counter_fini(&rt->rt_addb_stats.as_req[i].rs_nr);
-		rt->rt_addb_stats.as_req[i].rs_count = 0;
-	}
+		struct rm_addb_req_stats *req = &rt->rt_addb_stats.as_req[i];
 
+		m0_addb_counter_fini(&req->rs_time);
+		m0_addb_counter_fini(&req->rs_nr);
+		req->rs_count = 0;
+	}
 	m0_mutex_lock(&dom->rd_lock);
 	M0_PRE(IS_IN_ARRAY(rt->rt_id, dom->rd_types));
 	M0_PRE(dom->rd_types[rt->rt_id] == rt);
@@ -1258,7 +1259,6 @@ rem_incoming_to_resource_type(struct m0_rm_remote_incoming *rem_in) {
 static void rm_addb_req_counter_update(enum m0_rm_incoming_type      type,
 				       struct m0_rm_remote_incoming *rem_in)
 {
-	int                         index;
 	struct m0_rm_resource_type *rt;
 	struct rm_addb_req_stats   *rs;
 	static m0_time_t            next_update;
@@ -1266,8 +1266,7 @@ static void rm_addb_req_counter_update(enum m0_rm_incoming_type      type,
 
 	rt = rem_incoming_to_resource_type(rem_in);
 	M0_ASSERT(rt != NULL);
-	index = type == M0_RIT_BORROW ? 0 : 1;
-	rs = &rt->rt_addb_stats.as_req[index];
+	rs = &rt->rt_addb_stats.as_req[type];
 
 	++rs->rs_count;
 	if (now >= next_update || next_update == 0) {
diff --git a/rm/rm.h b/rm/rm.h
index 2974416..ed721a3 100644
--- a/rm/rm.h
+++ b/rm/rm.h
@@ -232,6 +232,28 @@ enum {
 	M0_RM_RESOURCE_TYPE_ID_INVALID = ~0
 };
 
+/**
+ * Types of an incoming usage credit request.
+ */
+enum m0_rm_incoming_type {
+	/**
+	 * A request for a usage credit from a local user. When the request
+	 * succeeds, the credit is held by the owner.
+	 */
+	M0_RIT_LOCAL,
+	/**
+	 * A request to loan a usage (credit) to a remote owner. Fulfillment of
+	 * this request might cause further outgoing requests to be sent, e.g.,
+	 * to revoke credits sub-let to remote owner.
+	 */
+	M0_RIT_BORROW,
+	/**
+	 * A request to return a usage credit previously sub-let to this owner.
+	 */
+	M0_RIT_REVOKE,
+	M0_RIT_NR
+};
+
 extern const struct m0_uint128 m0_rm_no_group;
 
 /**
@@ -317,6 +339,8 @@ enum m0_res_type_id {
 	M0_RM_FLOCK_RT = 1
 };
 
+/* ADDB statistics for incoming requests */
+
 struct rm_addb_req_stats {
 	/**
 	 * Number of borrow/revoke requests till
@@ -336,7 +360,7 @@ struct rm_addb_req_stats {
 };
 
 struct rm_addb_stats {
-	struct rm_addb_req_stats as_req[2];
+	struct rm_addb_req_stats as_req[M0_RIT_NR];
 	/**
 	 * Time for which credit was held
 	 * (Time between credit_get and credit_put)
@@ -1068,27 +1092,6 @@ enum m0_rm_incoming_state {
 };
 
 /**
- * Types of an incoming usage credit request.
- */
-enum m0_rm_incoming_type {
-	/**
-	 * A request for a usage credit from a local user. When the request
-	 * succeeds, the credit is held by the owner.
-	 */
-	M0_RIT_LOCAL,
-	/**
-	 * A request to loan a usage (credit) to a remote owner. Fulfillment of
-	 * this request might cause further outgoing requests to be sent, e.g.,
-	 * to revoke credits sub-let to remote owner.
-	 */
-	M0_RIT_BORROW,
-	/**
-	 * A request to return a usage credit previously sub-let to this owner.
-	 */
-	M0_RIT_REVOKE
-};
-
-/**
  * Some universal (i.e., not depending on a resource type) granting policies.
  */
 enum m0_rm_incoming_policy {
diff --git a/rm/rm_addb.h b/rm/rm_addb.h
index 8908194..a51fe82 100644
--- a/rm/rm_addb.h
+++ b/rm/rm_addb.h
@@ -80,27 +80,44 @@ enum {
 	M0_RM_ADDB_LOC_RESOURCE_LOCATE_FAIL = 34,
 
 	/* Resource manager record identifiers */
-	M0_ADDB_RECID_RM_BORROW_RATE        = 1600,
-	M0_ADDB_RECID_RM_REVOKE_RATE        = 1601,
-	M0_ADDB_RECID_RM_BORROW_TIMES       = 1602,
-	M0_ADDB_RECID_RM_REVOKE_TIMES       = 1603,
-	M0_ADDB_RECID_RM_CREDIT_TIMES       = 1604,
+	M0_ADDB_RECID_RM_LOCAL_RATE         = 1600,
+	M0_ADDB_RECID_RM_BORROW_RATE        = 1601,
+	M0_ADDB_RECID_RM_REVOKE_RATE        = 1602,
+	M0_ADDB_RECID_RM_LOCAL_TIMES        = 1603,
+	M0_ADDB_RECID_RM_BORROW_TIMES       = 1604,
+	M0_ADDB_RECID_RM_REVOKE_TIMES       = 1605,
+	M0_ADDB_RECID_RM_CREDIT_TIMES       = 1606,
 };
 
-/* Counter for Number of borrows and revokes */
+/**
+ * @todo local_rate and local_time counters are only initialised,
+ * update them appropriately.
+ */
+
+/* Counter for Number of local requests, borrows and revokes */
+M0_ADDB_RT_CNTR(m0_addb_rt_rm_local_rate, M0_ADDB_RECID_RM_LOCAL_RATE,
+		100, 200, 300, 400, 500, 600, 700, 800, 900);
+
 M0_ADDB_RT_CNTR(m0_addb_rt_rm_borrow_rate, M0_ADDB_RECID_RM_BORROW_RATE,
 		100, 200, 300, 400, 500, 600, 700, 800, 900);
 
 M0_ADDB_RT_CNTR(m0_addb_rt_rm_revoke_rate, M0_ADDB_RECID_RM_REVOKE_RATE,
 		100, 200, 300, 400, 500, 600, 700, 800, 900);
 
-/* Counter for timing required to perform borrow or revokes */
+/* Counter for timing required to perform local requests, borrow or revokes */
+M0_ADDB_RT_CNTR(m0_addb_rt_rm_local_times,  M0_ADDB_RECID_RM_LOCAL_TIMES,
+		100, 200, 300, 400, 500, 600, 700, 800, 900);
+
 M0_ADDB_RT_CNTR(m0_addb_rt_rm_borrow_times,  M0_ADDB_RECID_RM_BORROW_TIMES,
 		100, 200, 300, 400, 500, 600, 700, 800, 900);
 
 M0_ADDB_RT_CNTR(m0_addb_rt_rm_revoke_times,  M0_ADDB_RECID_RM_REVOKE_TIMES,
 		100, 200, 300, 400, 500, 600, 700, 800, 900);
 
+/**
+ * Time for which credit was held
+ * T(m0_rm_credit_put) - T(m0_rm_credit_get)
+ */
 M0_ADDB_RT_CNTR(m0_addb_rt_rm_credit_times,  M0_ADDB_RECID_RM_CREDIT_TIMES,
 		100, 200, 300, 400, 500, 600, 700, 800, 900);
 
diff --git a/rm/rm_service.c b/rm/rm_service.c
index 8ce2eb6..a9776f0 100644
--- a/rm/rm_service.c
+++ b/rm/rm_service.c
@@ -102,8 +102,10 @@ M0_INTERNAL int m0_rms_register(void)
 
 #undef RT_REG
 #define RT_REG(n) m0_addb_rec_type_register(&m0_addb_rt_rm_##n)
+	RT_REG(local_rate);
 	RT_REG(borrow_rate);
 	RT_REG(revoke_rate);
+	RT_REG(local_times);
 	RT_REG(borrow_times);
 	RT_REG(revoke_times);
 	RT_REG(credit_times);
-- 
1.8.3.2


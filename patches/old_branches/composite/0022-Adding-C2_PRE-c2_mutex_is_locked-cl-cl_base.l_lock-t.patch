From 3bbb0fcd43fb8ec6eda912e66f6ad4c60b3a5aa2 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Tue, 20 Nov 2012 16:44:42 +0530
Subject: [PATCH 022/172] Adding
 C2_PRE(c2_mutex_is_locked(&cl->cl_base.l_lock)) to c2_composite_layer_add

---
 layout/composite.c    | 51 +++++++++++++++++++++++++--------------------------
 layout/composite.h    | 13 +++++++++++++
 layout/ut/composite.c | 15 +++++++++------
 3 files changed, 47 insertions(+), 32 deletions(-)

diff --git a/layout/composite.c b/layout/composite.c
index 9b2d558..2a62438 100644
--- a/layout/composite.c
+++ b/layout/composite.c
@@ -108,11 +108,11 @@ static bool composite_invariant(const struct c2_composite_layout *cl)
 		c2_layout__invariant(&cl->cl_base) &&
 		cl->cl_layers != NULL &&
 		cl->cl_layers_nr == c2_layer_tlist_length(cl->cl_layers) &&
-		c2_tl_forall(c2_layer, sl, cl->cl_layers,
-			     c2_layout__invariant(sl->clr_l) &&
-			     sl->clr_extents != NULL &&
-			     sl->clr_extents_nr ==
-			     c2_layer_extent_tlist_length(sl->clr_extents));
+		c2_tl_forall(c2_layer, layer, cl->cl_layers,
+			     c2_layout__invariant(layer->clr_l) &&
+			     layer->clr_extents != NULL &&
+			     layer->clr_extents_nr ==
+			     c2_layer_extent_tlist_length(layer->clr_extents));
 }
 
 static const struct c2_layout_ops composite_ops;
@@ -266,9 +266,10 @@ int c2_composite_layer_add(struct c2_composite_layout *cl,
 			   struct c2_tl *extlist,
 			   uint32_t ext_nr)
 {
-	struct c2_composite_layer *sl;
+	struct c2_composite_layer *layer;
 
 	C2_PRE(composite_invariant(cl));
+	C2_PRE(c2_mutex_is_locked(&cl->cl_base.l_lock));
 	C2_PRE(c2_layout__invariant(l));
 	C2_PRE(extlist != NULL);
 
@@ -278,18 +279,16 @@ int c2_composite_layer_add(struct c2_composite_layout *cl,
 		return -EINVAL;
 	}
 
-	//todo Lock cl, l as appropriate
+	C2_ALLOC_PTR(layer);
+	C2_ASSERT(layer != NULL); //todo handle error
 
-	C2_ALLOC_PTR(sl);
-	C2_ASSERT(sl != NULL); //todo handle error
-
-	sl->clr_l = l;
-	sl->clr_extents = extlist;
-	sl->clr_extents_nr = ext_nr;
-	c2_layout_get(sl->clr_l);
-	c2_layout_user_count_inc(sl->clr_l);
-	c2_layer_tlink_init_at_tail(sl, cl->cl_layers);
-	++cl->cl_layers_nr;
+	layer->clr_l = l;
+	layer->clr_idx = cl->cl_layers_nr++;
+	layer->clr_extents = extlist;
+	layer->clr_extents_nr = ext_nr;
+	c2_layout_get(layer->clr_l);
+	c2_layout_user_count_inc(layer->clr_l);
+	c2_layer_tlink_init_at_tail(layer, cl->cl_layers);
 
 	//todo This op has to sync up the on-disk db
 
@@ -389,7 +388,7 @@ static int sublayouts_read(struct c2_composite_layout *cl,
 			   struct c2_tl *sub_layouts, uint32_t *nr,
 			   struct c2_db_tx *tx)
 {
-	struct c2_composite_layer      *layer; //todo sl replaced by layer
+	struct c2_composite_layer      *layer;
 	struct composite_schema_data   *csd;
 	struct c2_emap                 *emap;
 	struct c2_emap_cursor           it;
@@ -582,7 +581,7 @@ static int sublayouts_write(struct c2_layout *l,
 			    enum c2_layout_xcode_op op,
 			    struct c2_db_tx *tx)
 {
-	struct c2_composite_layer      *layer; //todo sl replaced by layer
+	struct c2_composite_layer      *layer;
 	struct composite_schema_data   *csd;
 	struct c2_emap                 *emap;
 	struct c2_emap_cursor           it;
@@ -621,17 +620,17 @@ static int sublayouts_write(struct c2_layout *l,
 		C2_LOG(C2_DEBUG, "Composite lid %llu, layer: ",
 		       (unsigned long long)l->l_id);
 
-		c2_tl_for(c2_layer, cl->cl_layers, sl) {
+		c2_tl_for(c2_layer, cl->cl_layers, layer) {
 			C2_LOG(C2_DEBUG, "Sub-layout[%lu]: lid %llu, "
 			       "e_start %llu, e_end %llu",
 			       (unsigned long)sublayouts_nr,
-			       (unsigned long long)sl->clr_l->l_id,
-			       (unsigned long long)sl->clr_ext.e_start,
-			       (unsigned long long)sl->clr_ext.e_end);
+			       (unsigned long long)layer->clr_l->l_id,
+			       (unsigned long long)layer->clr_ext.e_start,
+			       (unsigned long long)layer->clr_ext.e_end);
 
-			len[sublayouts_nr] = sl->clr_ext.e_end -
-					     sl->clr_ext.e_start + 1;
-			val[sublayouts_nr] = sl->clr_l->l_id;
+			len[sublayouts_nr] = layer->clr_ext.e_end -
+					     layer->clr_ext.e_start + 1;
+			val[sublayouts_nr] = layer->clr_l->l_id;
 			total              = total + len[sublayouts_nr];
 			++sublayouts_nr;
 		} c2_tl_endfor;
diff --git a/layout/composite.h b/layout/composite.h
index ea684a2..c410db5 100644
--- a/layout/composite.h
+++ b/layout/composite.h
@@ -70,6 +70,16 @@ struct c2_composite_layer {
 	/** Composite Layout this layer is part of. */
 	struct c2_layout *clr_l;
 
+	/**
+	 * Index of this layer into its owner composite layout.
+	 *
+	 * @note Since 'a layer once added to a composite layout' never gets
+	 * deleted, index of any layer is a monotonically increasing number per
+	 * composite layout and is managed using
+	 * c2_composite_layout::cl_layers_nr.
+	 */
+	uint32_t          clr_idx;
+
 	/** Number of extents in this layer. */
 	uint32_t          clr_extents_nr;
 
@@ -118,6 +128,9 @@ C2_TL_DECLARE(c2_layer_extent, extern, struct c2_composite_layer_extent);
  * by setting its initial ref count to 1. It does not contain any layer by
  * default and the multiple layers can be added by explicitly using the API
  * c2_composite_layer_add().
+ *
+ * @pre c2_mutex_is_locked(&cl->cl_base.l_lock)
+ *
  * @post ergo(rc == 0, composite_invariant(*out) && c2_ref_read(l->l_ref) == 1)
  *
  * @note The layout object built by this API is to be finalised by releasing
diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index 55ed7af..21189d7 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -142,7 +142,7 @@ static void composite_layout_verify(struct c2_layout *l,
 	i = 0;
 	extents_nr = min_extents_nr;
         c2_tl_for(c2_layer, cl->cl_layers, layer) {
-		/* Verify the layer. */
+		/* Verify the sublayout. */
 		sublayout_lid = composite_lid * 100 + i;
 		enum_id = sublayout_lid % 2 ? LIST_ENUM_ID : LINEAR_ENUM_ID;
 		inline_test = sublayout_lid % 5 ? LESS_THAN_INLINE :
@@ -153,6 +153,7 @@ static void composite_layout_verify(struct c2_layout *l,
 				      USER_COUNT_INCREMENTED);
 		C2_UT_ASSERT(layer->clr_l->l_user_count == 1);
 
+		C2_UT_ASSERT(layer->clr_idx == i);
 		C2_UT_ASSERT(layer->clr_extents_nr == extents_nr);
 
 		/* Verify the extents. */
@@ -190,7 +191,7 @@ int composite_layout_build(uint64_t lid,
 			   bool if_contiguous_extents,
 			   bool failure_test)
 {
-	struct c2_layout *sl;
+	struct c2_layout *sl; /* sublayout */
 	struct c2_layout *l_from_cl;
 	uint64_t          sublayout_lid;
 	struct c2_tl     *extents;
@@ -216,6 +217,7 @@ int composite_layout_build(uint64_t lid,
 				if_contiguous_extents);
 
 	/* Add layers to the composite layout. */
+	c2_mutex_lock(&(*cl)->cl_base.l_lock);
 	extents_nr = min_extents_nr;
 	for (i = 0; i < layers_nr; ++i, ++extents_nr) {
 		sublayout_lid = lid * 100 + i;
@@ -242,6 +244,7 @@ int composite_layout_build(uint64_t lid,
 					approximate_end_offset,
 					if_contiguous_extents);
 	}
+	c2_mutex_unlock(&(*cl)->cl_base.l_lock);
 	return rc;
 }
 
@@ -393,7 +396,7 @@ int test_decode_composite(uint64_t lid,
 	struct c2_layout        *l;
 	struct c2_layout_type   *lt;
 	uint64_t                 sublayout_lid;
-	struct c2_layout        *sl;
+	struct c2_layout        *sl; /* sublayout */
 	uint32_t                 i;
 
 	C2_ENTRY();
@@ -655,7 +658,7 @@ int test_decode_encode_composite(uint64_t lid,
 	struct c2_layout        *l;
 	struct c2_layout_type   *lt;
 	uint64_t                 sublayout_lid;
-	struct c2_layout        *sl;
+	struct c2_layout        *sl; /* sublayout */
 	uint32_t                 i;
 
 	C2_ENTRY();
@@ -875,7 +878,7 @@ int test_encode_decode_composite(uint64_t lid,
 	struct c2_layout           *l_copy;
 	struct c2_layout_type      *lt;
 	uint64_t                    sublayout_lid;
-	struct c2_layout           *sl;
+	struct c2_layout           *sl; /* sublayout */
 	uint32_t                    i;
 
 	C2_ENTRY("lid %llu", (unsigned long long)lid);
@@ -901,7 +904,7 @@ int test_encode_decode_composite(uint64_t lid,
 
 	/*
 	 * todo tempo until sublayouts are created separately in advance:
-	 * Add a reference to the sub-layouts so that don't get destoryed
+	 * Add a reference to the sub-layouts so that don't get destroyed
 	 * while the composite layout is destroyed and are available for the
 	 * subsequent c2_layout_decode()..
 	 */
-- 
1.8.3.2


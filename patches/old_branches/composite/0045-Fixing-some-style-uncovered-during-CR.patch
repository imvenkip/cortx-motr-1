From 62e6c2209d086b7cc26f45db217fc71259d04e1d Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Thu, 10 Jan 2013 16:50:17 +0530
Subject: [PATCH 045/172] Fixing some style uncovered during CR

---
 layout/composite.c    | 131 ++++++++++++++++++++++++++++----------------------
 layout/layout.c       |   4 +-
 layout/pdclust.c      |   4 +-
 layout/ut/composite.c |   5 ++
 layout/ut/layout.c    |   2 +-
 5 files changed, 84 insertions(+), 62 deletions(-)

diff --git a/layout/composite.c b/layout/composite.c
index 348d747..9097689 100644
--- a/layout/composite.c
+++ b/layout/composite.c
@@ -235,7 +235,8 @@ static int composite_register(struct m0_layout_domain *dom,
 	M0_ALLOC_PTR(csd);
 err1_injected:
 	if (csd == NULL) {
-		m0_layout__log("composite_register", "M0_ALLOC_PTR() failed",
+		m0_layout__log("composite_register",
+			       "failed to allocate schema data",
 			       &m0_addb_oom, &layout_global_ctx, LID_NONE,
 			       -ENOMEM);
 		return -ENOMEM;
@@ -248,7 +249,8 @@ err1_injected:
 			   &composite_table_ops);
 err2_injected:
 	if (rc != 0) {
-		m0_layout__log("composite_register", "m0_table_init() failed",
+		m0_layout__log("composite_register",
+			       "failed to initialise layer_sublayout table",
 			       &m0_addb_func_fail, &layout_global_ctx,
 			       LID_NONE, rc);
 		m0_free(csd);
@@ -261,7 +263,8 @@ err2_injected:
 			  "layer_ext_map");
 err3_injected:
 	if (rc != 0) {
-		m0_layout__log("composite_register", "m0_emap_init() failed",
+		m0_layout__log("composite_register",
+			       "failed to initialise layer_ext_map emap",
 			       &m0_addb_func_fail, &layout_global_ctx,
 			       LID_NONE, rc);
 		m0_table_fini(&csd->csd_layer_sublayout);
@@ -310,14 +313,16 @@ static int composite_allocate(struct m0_layout_domain *dom,
 	M0_ALLOC_PTR(cl);
 err1_injected:
 	if (cl == NULL) {
-		m0_layout__log("composite_allocate", "M0_ALLOC_PTR() failed",
+		m0_layout__log("composite_allocate",
+			       "failed to allocate composite layout",
 			       &m0_addb_oom, &layout_global_ctx, lid, -ENOMEM);
 		return -ENOMEM;
 	}
 
 	M0_ALLOC_PTR(cl->cl_layers);
 	if (cl->cl_layers == NULL) {
-		m0_layout__log("composite_allocate", "M0_ALLOC_PTR() failed",
+		m0_layout__log("composite_allocate",
+			       "failed to allocate composite layers list",
 			       &m0_addb_oom, &layout_global_ctx, lid, -ENOMEM);
 		return -ENOMEM;
 	}
@@ -377,19 +382,21 @@ static int layer_in_memory_add(struct m0_composite_layout *cl,
 		 extlist, (unsigned long)ext_nr);
 	M0_ALLOC_PTR(layer);
 	if (layer == NULL) {
-		m0_layout__log("layer_in_memory_add", "M0_ALLOC_PTR() failed",
+		m0_layout__log("layer_in_memory_add",
+			       "failed to allocate composite layer",
 			       &m0_addb_oom, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, -ENOMEM);
 		return -ENOMEM;
 	}
 
 	layer->clr_l = sublayout;
-	layer->clr_idx = cl->cl_layers_nr++;
+	layer->clr_idx = cl->cl_layers_nr;
 	layer->clr_extents_nr = ext_nr;
 	layer->clr_extents = (struct m0_tl *)extlist;
 	m0_layout_get(layer->clr_l);
 	m0_layout_user_count_inc(layer->clr_l);
 	m0_layer_tlink_init_at_tail(layer, cl->cl_layers);
+	M0_CNT_INC(cl->cl_layers_nr);
 	*lr = layer;
 	M0_POST(composite_invariant(cl));
 	M0_POST(ergo(ext_nr == 0, cl->cl_layers_nr == 1));
@@ -419,13 +426,12 @@ static void layer_in_memory_delete(struct m0_composite_layout *cl,
 	m0_layer_tlink_del_fini(layer);
 	m0_layout_user_count_dec(layer->clr_l);
 	m0_layout_put(layer->clr_l);
-	--cl->cl_layers_nr;
+	M0_CNT_DEC(cl->cl_layers_nr);
 	M0_POST(composite_invariant(cl));
 	M0_POST(layer->clr_idx == cl->cl_layers_nr);
 	M0_LEAVE();
 }
 
-
 static int composite_populate(struct m0_composite_layout *cl,
 			      uint32_t user_count,
 			      struct m0_layout *oldlayout)
@@ -475,7 +481,7 @@ M0_INTERNAL int m0_composite_build(struct m0_layout_domain *dom,
 	}
 
 	M0_POST(ergo(rc == 0, composite_invariant(*out) &&
-			      m0_mutex_is_not_locked(&l->l_lock)));
+		     m0_mutex_is_not_locked(&l->l_lock)));
 	M0_LEAVE("domain %p, lid %llu, cl %p, rc %d",
 		 dom, (unsigned long long)lid, *out, rc);
 	return rc;
@@ -615,7 +621,8 @@ static int ext_in_memory_add(struct m0_composite_layer *layer,
 
 	M0_ALLOC_PTR(ext_to_insert);
 	if (ext_to_insert == NULL) {
-		m0_layout__log("ext_in_memory_add", "M0_ALLOC_PTR() failed",
+		m0_layout__log("ext_in_memory_add",
+			       "failed to allocate composite layer extent",
 			       &m0_addb_oom, &layer->clr_l->l_addb,
 			       layer->clr_l->l_id, -ENOMEM);
 		return -ENOMEM;
@@ -631,7 +638,7 @@ static int ext_in_memory_add(struct m0_composite_layer *layer,
 	else if (ext_to_insert_before != NULL)
 		m0_layer_extent_tlist_add_before(ext_to_insert_before,
 						 ext_to_insert);
-	++layer->clr_extents_nr;
+	M0_CNT_INC(layer->clr_extents_nr);
 	M0_RETURN(0);
 }
 
@@ -667,7 +674,7 @@ static int ext_in_memory_delete(struct m0_composite_layer *layer,
 		m0_layer_extent_tlist_del(lr_ext_to_delete);
 		m0_layer_extent_tlink_fini(lr_ext_to_delete);
 		m0_free(lr_ext_to_delete);
-		--layer->clr_extents_nr;
+		M0_CNT_DEC(layer->clr_extents_nr);
 		M0_RETURN(0);
 	} else
 		M0_RETURN(-ENOENT);
@@ -679,7 +686,8 @@ static int ext_in_memory_find(struct m0_composite_layer *layer,
 			      struct m0_composite_layer_extent **lr_ext_out)
 {
 	struct m0_composite_layer_extent *lr_ext;
-	bool                              ext_found = false;
+	bool                              ext_found;
+	int                               rc;
 
 	M0_ENTRY("lid %llu, layer %lu, e_start %llu, e_end %llu, "
 		 "expected_e_state %llu",
@@ -689,6 +697,7 @@ static int ext_in_memory_find(struct m0_composite_layer *layer,
 		 (unsigned long long)ext->e_end,
 		 (unsigned long long)expected_ext_state);
 
+	ext_found = false;
 	m0_tl_for(m0_layer_extent, layer->clr_extents, lr_ext) {
 		if (lr_ext->cle_ext.e_end <= ext->e_start)
 			continue;
@@ -701,11 +710,13 @@ static int ext_in_memory_find(struct m0_composite_layer *layer,
 	} m0_tl_endfor;
 
 	if (ext_found) {
+		rc = 0;
 		if (lr_ext != NULL)
 			*lr_ext_out = lr_ext;
-		M0_RETURN(0);
 	} else
-		M0_RETURN(-ENOENT);
+		rc = -ENOENT;
+
+	M0_RETURN(rc);
 }
 
 static int ext_in_memory_trim(struct m0_composite_layer *layer,
@@ -768,14 +779,13 @@ static int ext_in_memory_adjust(struct m0_composite_layer *layer,
 	 * in-memory list of the extents. Hence, return right away.
 	 */
 	if (seg->ee_val == M0_CLRES_INVALID)
-		return 0;
+		M0_RETURN(0);
 
 	if (extent_op == DELETE) {
 		/*
 		 * The extent seg->ee_ext is replaced by some newer extent.
 		 * Hence, seg->ee_ext is asked to be deleted.
 		 */
-
 		rc = ext_in_memory_delete(layer, &seg->ee_ext, seg->ee_val);
 	} else {
 		M0_ASSERT(M0_IN(extent_op, (CUT_LEFT, CUT_RIGHT)));
@@ -878,9 +888,9 @@ static int ext_in_db_write(struct m0_emap_cursor *it,
 			/* Extent deletion. */
 			if (in_memory_list_update) {
 				rc_cb = rc_cb ?: ext_in_memory_adjust(layer,
-								     DELETE,
-								     seg,
-								     NULL);
+								      DELETE,
+								      seg,
+								      NULL);
 			}
 		}),
 		LAMBDA(void, (struct m0_emap_seg *seg,
@@ -889,9 +899,9 @@ static int ext_in_db_write(struct m0_emap_cursor *it,
 			/* Cut left. */
 			if (in_memory_list_update) {
 				rc_cb = rc_cb ?: ext_in_memory_adjust(layer,
-								     CUT_LEFT,
-								     seg,
-								     extent);
+								      CUT_LEFT,
+								      seg,
+								      extent);
 			}
 		}),
 		LAMBDA(void, (struct m0_emap_seg *seg,
@@ -900,9 +910,9 @@ static int ext_in_db_write(struct m0_emap_cursor *it,
 			/* Cut right. */
 			if (in_memory_list_update) {
 				rc_cb = rc_cb ?: ext_in_memory_adjust(layer,
-								     CUT_RIGHT,
-								     seg,
-								     extent);
+								      CUT_RIGHT,
+								      seg,
+								      extent);
 			}
 		}));
 
@@ -928,6 +938,7 @@ static int ext_in_db_write(struct m0_emap_cursor *it,
 	}
 	M0_RETURN(rc);
 #else
+	/* This function is not expected to be invoked in the kernel mode. */
 	M0_ASSERT(0);
 	return -EPROTO;
 #endif /* __KERNEL__ */
@@ -959,7 +970,8 @@ static int sublayout_id_in_db_read(struct m0_composite_layout *cl,
 			 &key, sizeof key, &rec, sizeof rec);
 	rc = m0_table_lookup(tx, &pair);
 	if (rc != 0)
-		m0_layout__log("m0_layout_lookup", "m0_table_lookup() failed",
+		m0_layout__log("m0_layout_lookup",
+			       "failed to lookup into layer_sublayout table",
 			       &m0_addb_func_fail, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, rc);
 	else
@@ -1028,7 +1040,7 @@ static int sublayout_id_in_db_add(struct m0_composite_layout *cl,
 err1_injected:
 	if (rc != 0)
 		m0_layout__log("sublayout_id_in_db_add",
-			       "m0_table_insert() failed",
+			       "failed to insert into layer_sublayout table",
 			       &m0_addb_func_fail, &layer->clr_l->l_addb,
 			       layer->clr_l->l_id, rc);
 	m0_db_pair_fini(&pair);
@@ -1060,7 +1072,7 @@ static int sublayout_id_in_db_delete(const struct m0_composite_layout *cl,
 	rc = m0_table_delete(tx, &pair);
 	if (rc != 0)
 		m0_layout__log("sublayout_id_in_db_delete",
-			       "m0_table_delete() failed",
+			       "failed to delete from layer_sublayout table",
 			       &m0_addb_func_fail, &layer->clr_l->l_addb,
 			       layer->clr_l->l_id, rc);
 	m0_db_pair_fini(&pair);
@@ -1097,7 +1109,7 @@ static int extmap_in_db_add(struct m0_composite_layout *cl,
 				M0_CLRES_INVALID);
 	if (rc != 0) {
 		m0_layout__log("extmap_in_db_add",
-			       "m0_emap_obj_insert() failed",
+			       "failed to insert into layer_ext_map emap",
 			       &m0_addb_func_fail, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, rc);
 		return rc;
@@ -1106,7 +1118,7 @@ static int extmap_in_db_add(struct m0_composite_layout *cl,
 	rc = m0_emap_lookup(emap, tx, (struct m0_uint128 *)&prefix, 0, &it);
 	if (rc != 0) {
 		m0_layout__log("extmap_in_db_add",
-			       "m0_emap_lookup() failed",
+			       "failed to lookup into layer_ext_map emap",
 			       &m0_addb_func_fail, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, rc);
 		m0_emap_obj_delete(emap, tx, (struct m0_uint128 *)&prefix);
@@ -1130,7 +1142,7 @@ static int extmap_in_db_add(struct m0_composite_layout *cl,
 				     lr_ext->cle_state, false);
 		if (rc != 0) {
 			M0_LOG(M0_ERROR, "lid %llu, layer %lu, "
-			       "ext_in_db_write() failed, rc %d",
+			       "failed to write extent in DB, rc %d",
 			       (unsigned long long)cl->cl_base.l_id,
 			       (unsigned long)layer->clr_idx, rc);
 			m0_emap_close(&it);
@@ -1275,7 +1287,7 @@ static int extlist_in_buf_read(struct m0_composite_layout *cl,
 	M0_ALLOC_PTR(extlist);
 	if (extlist == NULL) {
 		m0_layout__log("extlist_in_buf_read",
-			       "M0_ALLOC_PTR() failed",
+			       "failed to allocate composite extent list",
 			       &m0_addb_oom, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, -ENOMEM);
 		return -ENOMEM;
@@ -1287,7 +1299,7 @@ static int extlist_in_buf_read(struct m0_composite_layout *cl,
 		M0_ALLOC_PTR(lr_ext);
 		if (lr_ext == NULL) {
 			m0_layout__log("extlist_in_buf_read",
-				       "M0_ALLOC_PTR() failed",
+				       "failed to allocate composite extent",
 				       &m0_addb_oom, &cl->cl_base.l_addb,
 				       cl->cl_base.l_id, -ENOMEM);
 			extlist_free(extlist);
@@ -1318,7 +1330,7 @@ static int comp_layout_in_buf_read(struct m0_composite_layout *cl,
 	struct m0_layout              *sublayout;
 	struct m0_tl                  *extlist;
 	uint32_t                       i;
-	int                            rc;
+	int                            rc = 0; /* To keep the compiler happy. */
 
 	M0_PRE(composite_allocated_invariant(cl));
 	M0_PRE(cur != NULL);
@@ -1396,7 +1408,8 @@ static int extentmap_in_db_read(struct m0_composite_layout *cl,
 	prefix_set(&prefix, cl->cl_base.l_id, layer_idx);
 	rc = m0_emap_lookup(emap, tx, (struct m0_uint128 *)&prefix, 0, &it);
 	if (rc != 0) {
-		m0_layout__log("m0_layout_lookup", "m0_emap_lookup() failed",
+		m0_layout__log("m0_layout_lookup",
+			       "failed to lookup into layer_ext_map emap",
 			       &m0_addb_func_fail, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, rc);
 		return rc;
@@ -1404,7 +1417,8 @@ static int extentmap_in_db_read(struct m0_composite_layout *cl,
 
 	M0_ALLOC_PTR(*extlist);
 	if (*extlist == NULL) {
-		m0_layout__log("extentmap_in_db_read", "M0_ALLOC_PTR() failed",
+		m0_layout__log("extentmap_in_db_read",
+			       "failed to allocate composite extent list",
 			       &m0_addb_oom, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, -ENOMEM);
 		m0_emap_close(&it);
@@ -1423,7 +1437,7 @@ static int extentmap_in_db_read(struct m0_composite_layout *cl,
 		M0_ALLOC_PTR(lr_ext);
 		if (lr_ext == NULL) {
 			m0_layout__log("extentmap_in_db_read",
-				       "M0_ALLOC_PTR() failed",
+				       "failed to allocate composite extent",
 				       &m0_addb_oom,
 				       &cl->cl_base.l_addb,
 				       cl->cl_base.l_id, -ENOMEM);
@@ -1443,7 +1457,7 @@ static int extentmap_in_db_read(struct m0_composite_layout *cl,
 
 		if (seg->ee_val != M0_CLRES_INVALID) {
 			m0_layer_extent_tlink_init_at_tail(lr_ext, *extlist);
-			++*extents_nr;
+			M0_CNT_INC(*extents_nr);
 		}
 		if (m0_emap_ext_is_last(&seg->ee_ext))
 			break;
@@ -1473,6 +1487,7 @@ static int layers_in_db_read(struct m0_composite_layout *cl,
 
 	M0_ENTRY("lid %llu", (unsigned long long)cl->cl_base.l_id);
 
+	//todo Optimise the number of return statements
 	i = 1;
 	while (1) {
 		/* Read 'the sublayout id for this layer' from the DB. */
@@ -1554,6 +1569,7 @@ static int comp_layout_in_db_read(struct m0_composite_layout *cl,
 
 	M0_ENTRY("lid %llu", (unsigned long long)cl->cl_base.l_id);
 
+	//todo Optimise no of return statements
 	rc = sublayout_id_in_db_read(cl, 0, tx, &sublayout_id);
 	if (rc != 0) {
 		M0_LOG(M0_ERROR, "lid %llu, layer 0, sublayout id could not "
@@ -1573,8 +1589,8 @@ static int comp_layout_in_db_read(struct m0_composite_layout *cl,
 
 	rc = composite_populate(cl, user_count, sublayout);
 	if (rc != 0) {
-		M0_LOG(M0_ERROR, "lid %llu, composite_populate() failed",
-		       (unsigned long long)cl->cl_base.l_id);
+		M0_LOG(M0_ERROR, "lid %llu, failed to populate composite "
+		       "layout", (unsigned long long)cl->cl_base.l_id);
 		/* Release the reference added by m0_layout_find(). */
 		m0_layout_put(sublayout);
 		return rc;
@@ -1589,8 +1605,8 @@ static int comp_layout_in_db_read(struct m0_composite_layout *cl,
 	/* Now, proceed to read the subsequent layers from the DB. */
 	rc = layers_in_db_read(cl, tx);
 	if (rc != 0)
-		M0_LOG(M0_ERROR, "lid %llu, layers could not be read form the "
-		       "DB", (unsigned long long)cl->cl_base.l_id);
+		M0_LOG(M0_ERROR, "lid %llu, failed to read layers from the DB",
+		       (unsigned long long)cl->cl_base.l_id);
 	M0_RETURN(rc);
 }
 
@@ -1619,14 +1635,14 @@ static int composite_decode(struct m0_layout *l,
 	if (op == M0_LXO_BUFFER_OP) {
 		rc = comp_layout_in_buf_read(cl, cur, user_count);
 		if (rc != 0)
-			M0_LOG(M0_ERROR, "lid %llu, The layout could not be "
-			       "read from the buffer",
+			M0_LOG(M0_ERROR, "lid %llu, failed to read layout from"
+			       "the buffer",
 			       (unsigned long long)cl->cl_base.l_id);
 	} else {
 		rc = comp_layout_in_db_read(cl, tx, user_count);
 		if (rc != 0)
-			M0_LOG(M0_ERROR, "lid %llu, The layout could not be "
-			       "read from the DB",
+			M0_LOG(M0_ERROR, "lid %llu, failed to read layout from"
+			       "the DB",
 			       (unsigned long long)cl->cl_base.l_id);
 	}
 
@@ -1659,7 +1675,7 @@ static int comp_layout_in_db_delete(struct m0_composite_layout *cl,
 				    struct m0_db_tx *tx)
 {
 	struct m0_composite_layer *layer;
-	int                        rc;
+	int                        rc = 0; /* To keep the compiler happy. */
 
 	M0_ENTRY("lid %llu", (unsigned long long)cl->cl_base.l_id);
 
@@ -1853,7 +1869,8 @@ M0_INTERNAL int m0_composite_layer_ext_lookup(struct m0_composite_layout *cl,
 				    offset, &it);
 		if (rc != 0) {
 			m0_layout__log("m0_composite_layer_ext_lookup",
-				       "m0_emap_lookup() failed",
+				       "failed to lookup into layer_ext_map "
+				       "emap",
 				       &m0_addb_func_fail, &cl->cl_base.l_addb,
 				       cl->cl_base.l_id, rc);
 			m0_mutex_unlock(&cl->cl_base.l_lock);
@@ -1925,7 +1942,7 @@ M0_INTERNAL int m0_composite_layer_ext_add(struct m0_composite_layout *cl,
 			    ext->e_start, &it);
 	if (rc != 0) {
 		m0_layout__log("m0_composite_layer_ext_add",
-			       "m0_emap_lookup() failed",
+			       "failed to lookup into layer_ext_map emap",
 			       &m0_addb_func_fail, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, rc);
 		m0_mutex_unlock(&cl->cl_base.l_lock);
@@ -1952,7 +1969,7 @@ M0_INTERNAL int m0_composite_layer_ext_add(struct m0_composite_layout *cl,
 	rc = ext_in_db_write(&it, layer, ext, M0_CLRES_VALID, true);
 	if (rc != 0)
 		m0_layout__log("m0_composite_layer_ext_add",
-			       "ext_in_db_write() failed",
+			       "failed to write extent in DB",
 			       &comp_ext_op_fail, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, rc);
 	m0_emap_close(&it);
@@ -1998,7 +2015,7 @@ M0_INTERNAL int m0_composite_layer_ext_state_update(
 			    ext->e_start, &it);
 	if (rc != 0) {
 		m0_layout__log("m0_composite_layer_ext_state_update",
-			       "m0_emap_lookup() failed",
+			       "failed to lookup into layer_ext_map emap",
 			       &m0_addb_func_fail, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, rc);
 		m0_mutex_unlock(&cl->cl_base.l_lock);
@@ -2046,7 +2063,7 @@ M0_INTERNAL int m0_composite_layer_ext_state_update(
 	rc = ext_in_db_write(&it, layer, ext, ext_state, true);
 	if (rc != 0)
 		m0_layout__log("m0_composite_layer_ext_state_update",
-			       "ext_in_db_write() failed",
+			       "failed to write extent in DB",
 			       &comp_ext_op_fail, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, rc);
 	m0_emap_close(&it);
@@ -2085,7 +2102,7 @@ M0_INTERNAL int m0_composite_layer_ext_delete(struct m0_composite_layout *cl,
 			    ext->e_start, &it);
 	if (rc != 0) {
 		m0_layout__log("m0_composite_layer_ext_delete",
-			       "m0_emap_lookup() failed",
+			       "failed to lookup into layer_ext_map emap",
 			       &m0_addb_func_fail, &cl->cl_base.l_addb,
 			       cl->cl_base.l_id, rc);
 		m0_mutex_unlock(&cl->cl_base.l_lock);
@@ -2136,7 +2153,7 @@ M0_INTERNAL void composite_instance_fini(struct m0_layout_instance *li);
  * an additional reference on that layout.
  * @pre composite_invariant(pl)
  * @post ergo(rc == 0, composite_instance_invariant(*out) &&
- *		       m0_ref_read(&l->l_ref) > 1))
+ *            m0_ref_read(&l->l_ref) > 1))
  */
 static int composite_instance_build(struct m0_layout *l,
 				    const struct m0_fid *fid,
@@ -2159,7 +2176,7 @@ static int composite_instance_build(struct m0_layout *l,
 err1_injected:
 	if (ci == NULL) {
 		m0_layout__log("composite_instance_build",
-			       "M0_ALLOC() failed",
+			       "failed to allocate composite instance",
 			       &m0_addb_oom, &l->l_addb, l->l_id, -ENOMEM);
 		return -ENOMEM;
 	}
diff --git a/layout/layout.c b/layout/layout.c
index 2190fd0..d45e9b9 100644
--- a/layout/layout.c
+++ b/layout/layout.c
@@ -946,7 +946,7 @@ M0_INTERNAL struct m0_layout *m0_layout_find(struct m0_layout_domain *dom,
 	m0_mutex_unlock(&dom->ld_lock);
 
 	M0_POST(ergo(l != NULL, m0_layout__invariant(l) &&
-				m0_ref_read(&l->l_ref) > 1));
+		     m0_ref_read(&l->l_ref) > 1));
 	M0_LEAVE("lid %llu, l_pointer %p", (unsigned long long)lid, l);
 	return l;
 }
@@ -1066,7 +1066,7 @@ err1_injected:
 			       l->l_id, rc);
 
 	M0_POST(ergo(rc == 0, m0_layout__invariant(l) &&
-			      list_lookup(l->l_dom, l->l_id) == l));
+		     list_lookup(l->l_dom, l->l_id) == l));
 	M0_POST(ergo(rc != 0, m0_layout__allocated_invariant(l)));
 	M0_POST(m0_mutex_is_locked(&l->l_lock));
 	M0_LEAVE("lid %llu, rc %d", (unsigned long long)l->l_id, rc);
diff --git a/layout/pdclust.c b/layout/pdclust.c
index 77db520..cf01a14 100644
--- a/layout/pdclust.c
+++ b/layout/pdclust.c
@@ -322,7 +322,7 @@ M0_INTERNAL int m0_pdclust_build(struct m0_layout_domain *dom,
 	}
 
 	M0_POST(ergo(rc == 0, pdclust_invariant(*out) &&
-			      m0_mutex_is_not_locked(&l->l_lock)));
+		     m0_mutex_is_not_locked(&l->l_lock)));
 	M0_LEAVE("domain %p, lid %llu, pl %p, rc %d",
 		 dom, (unsigned long long)lid, *out, rc);
 	return rc;
@@ -778,7 +778,7 @@ M0_INTERNAL void pdclust_instance_fini(struct m0_layout_instance *li);
  * additional reference on that layout.
  * @pre pdclust_invariant(pl)
  * @post ergo(rc == 0, pdclust_instance_invariant(*out) &&
-		       m0_ref_read(&l->l_ref) > 1))
+ *            m0_ref_read(&l->l_ref) > 1))
  */
 static int pdclust_instance_build(struct m0_layout           *l,
 				  const struct m0_fid        *fid,
diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index 9af3ada..7aabb89 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -1527,6 +1527,10 @@ static void extent_to_be_operated(const struct m0_composite_layout *cl,
 			  layer->clr_extents_nr >= extent_idx + 1));
 
 	i = 0;
+	ext_idxth.e_start = 0; /* To keep the compiler happy. */
+	ext_idxth.e_end = 0;
+	ext_idx_plus_oneth.e_start = 0;
+	ext_idx_plus_oneth.e_end = 0;
 	m0_tl_for(m0_layer_extent, layer->clr_extents, extent) {
 		if (i == extent_idx) {
 			ext_idxth = extent->cle_ext;
@@ -1815,6 +1819,7 @@ int ext_operate(enum extent_op eop,
 #if 1
 	/* todo This part seems to have significant mem leak. */
 	/* Read the layout from the DB and compare. */
+	l_from_DB = NULL;
 	rc = layout_lookup(lid, domain, !FAILURE_TEST, &l_from_DB);
 	M0_UT_ASSERT(rc == 0);
 	composite_layout_compare(l_from_DB, l_copy_updated, false);
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index da74175..105f0e9 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -4217,9 +4217,9 @@ const struct m0_test_suite layout_ut = {
 		{ "layout-max-recsize", test_max_recsize },
 		{ "layout-recsize", test_recsize },
 		{ "layout-pdclust-instance", test_pdclust_instance },
-		{ "layout-composite-instance", test_composite_instance },
 		{ "layout-pdclust-instance-failure",
 					test_pdclust_instance_failure },
+		{ "layout-composite-instance", test_composite_instance },
 #ifndef __KERNEL__
 		{ "layout-lookup", test_lookup },
 		{ "layout-lookup-failure", test_lookup_failure },
-- 
1.8.3.2


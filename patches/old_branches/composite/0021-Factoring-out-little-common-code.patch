From e7b3f66ba748c73dca06ee962f8af2d087be0adb Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Mon, 19 Nov 2012 22:56:20 +0530
Subject: [PATCH 021/172] Factoring out little common code.

---
 layout/ut/composite.c | 21 ++-------------------
 layout/ut/layout.c    | 49 ++++++++++++++++++++++++++++++++-----------------
 layout/ut/layout.h    |  5 +++++
 3 files changed, 39 insertions(+), 36 deletions(-)

diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index d2d6448..55ed7af 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -748,19 +748,8 @@ static void composite_layout_compare(const struct c2_layout *l1,
 
 	C2_UT_ASSERT(l1 != NULL && l2 != NULL);
 
-	/* todo Factor out this common code. */
 	/* Compare generic part of the layout objects. */
-	C2_UT_ASSERT(l1->l_id == l2->l_id);
-	C2_UT_ASSERT(l1->l_type == l2->l_type);
-	C2_UT_ASSERT(l1->l_dom == l2->l_dom);
-	if (l2_ref_elevated)
-		C2_UT_ASSERT(c2_ref_read(&l1->l_ref) ==
-			     c2_ref_read(&l2->l_ref) - 1);
-	else
-		C2_UT_ASSERT(c2_ref_read(&l1->l_ref) ==
-			     c2_ref_read(&l2->l_ref));
-	C2_UT_ASSERT(l1->l_user_count == l2->l_user_count);
-	C2_UT_ASSERT(l1->l_ops == l2->l_ops);
+	layout_compare(l1, l2, l2_ref_elevated);
 
 	/* Compare COMPOSITE layout type specific part of the layout objects. */
 	cl1 = container_of(l1, struct c2_composite_layout, cl_base);
@@ -804,14 +793,8 @@ static void composite_layout_copy(const struct c2_layout *l_src,
 	C2_UT_ASSERT(cl_dest != NULL);
 	*l_dest = &cl_dest->cl_base;
 
-	// todo Factor out this common code.
 	/* Copy generic part of the layout object. */
-	(*l_dest)->l_id         = l_src->l_id;
-	(*l_dest)->l_type       = l_src->l_type;
-	(*l_dest)->l_dom        = l_src->l_dom;
-	(*l_dest)->l_user_count = l_src->l_user_count;
-	(*l_dest)->l_ops        = l_src->l_ops;
-	c2_ref_init(&(*l_dest)->l_ref, 1, l_src->l_ops->lo_fini);
+	layout_copy(l_src, *l_dest);
 
 	/* Copy COMPOSITE layout type specific part of the layout objects. */
 	cl_dest->cl_layers_nr = cl_src->cl_layers_nr;
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index 00390e2..c6497e3 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -1759,6 +1759,24 @@ static void test_decode_encode(void)
 	C2_UT_ASSERT(rc == 0);
 }
 
+/* Compares generic part of the layout objects. */
+void layout_compare(const struct c2_layout *l1,
+		    const struct c2_layout *l2,
+		    bool l2_ref_elevated)
+{
+	C2_UT_ASSERT(l1->l_id == l2->l_id);
+	C2_UT_ASSERT(l1->l_type == l2->l_type);
+	C2_UT_ASSERT(l1->l_dom == l2->l_dom);
+	if (l2_ref_elevated)
+		C2_UT_ASSERT(c2_ref_read(&l1->l_ref) ==
+			     c2_ref_read(&l2->l_ref) - 1);
+	else
+		C2_UT_ASSERT(c2_ref_read(&l1->l_ref) ==
+			     c2_ref_read(&l2->l_ref));
+	C2_UT_ASSERT(l1->l_user_count == l2->l_user_count);
+	C2_UT_ASSERT(l1->l_ops == l2->l_ops);
+}
+
 /*
  * Compares two layout objects with PDCLUST layout type, provided as input
  * arguments.
@@ -1780,17 +1798,7 @@ static void pdclust_layout_compare(uint32_t enum_id,
 	C2_UT_ASSERT(enum_id == LIST_ENUM_ID || enum_id == LINEAR_ENUM_ID);
 
 	/* Compare generic part of the layout objects. */
-	C2_UT_ASSERT(l1->l_id == l2->l_id);
-	C2_UT_ASSERT(l1->l_type == l2->l_type);
-	C2_UT_ASSERT(l1->l_dom == l2->l_dom);
-	if (l2_ref_elevated)
-		C2_UT_ASSERT(c2_ref_read(&l1->l_ref) ==
-			     c2_ref_read(&l2->l_ref) - 1);
-	else
-		C2_UT_ASSERT(c2_ref_read(&l1->l_ref) ==
-			     c2_ref_read(&l2->l_ref));
-	C2_UT_ASSERT(l1->l_user_count == l2->l_user_count);
-	C2_UT_ASSERT(l1->l_ops == l2->l_ops);
+	layout_compare(l1, l2, l2_ref_elevated);
 
 	/* Compare PDCLUST layout type specific part of the layout objects. */
 	pl1 = container_of(l1, struct c2_pdclust_layout, pl_base.sl_base);
@@ -1836,6 +1844,18 @@ static void pdclust_layout_compare(uint32_t enum_id,
 	}
 }
 
+/* Copies generic part of the layout object. */
+void layout_copy(const struct c2_layout *l_src,
+		 struct c2_layout *l_dest)
+{
+	l_dest->l_id         = l_src->l_id;
+	l_dest->l_type       = l_src->l_type;
+	l_dest->l_dom        = l_src->l_dom;
+	l_dest->l_user_count = l_src->l_user_count;
+	l_dest->l_ops        = l_src->l_ops;
+	c2_ref_init(&l_dest->l_ref, 1, l_src->l_ops->lo_fini);
+}
+
 /* Copies contents of one layout object to the other. */
 static void pdclust_layout_copy(uint32_t enum_id,
 				const struct c2_layout *l_src,
@@ -1858,12 +1878,7 @@ static void pdclust_layout_copy(uint32_t enum_id,
 	*l_dest = &pl_dest->pl_base.sl_base;
 
 	/* Copy generic part of the layout object. */
-	(*l_dest)->l_id         = l_src->l_id;
-	(*l_dest)->l_type       = l_src->l_type;
-	(*l_dest)->l_dom        = l_src->l_dom;
-	(*l_dest)->l_user_count = l_src->l_user_count;
-	(*l_dest)->l_ops        = l_src->l_ops;
-	c2_ref_init(&(*l_dest)->l_ref, 1, l_src->l_ops->lo_fini);
+	layout_copy(l_src, *l_dest);
 
 	/* Copy PDCLUST layout type specific part of the layout objects. */
 	pl_dest->pl_attr = pl_src->pl_attr;
diff --git a/layout/ut/layout.h b/layout/ut/layout.h
index 5c2396f..8f9733a 100644
--- a/layout/ut/layout.h
+++ b/layout/ut/layout.h
@@ -79,6 +79,11 @@ void lbuf_verify(struct c2_bufvec_cursor *cur, uint32_t *lt_id);
 
 void lbuf_compare(struct c2_bufvec_cursor *cur1,
 		  struct c2_bufvec_cursor *cur2);
+void layout_compare(const struct c2_layout *l1,
+		    const struct c2_layout *l2,
+		    bool l2_ref_elevated);
+void layout_copy(const struct c2_layout *l_src,
+		 struct c2_layout *l_dest);
 
 void generic_buf_build(uint32_t lt_id, struct c2_bufvec_cursor *dcur);
 struct c2_layout *list_lookup(uint64_t lid);
-- 
1.8.3.2


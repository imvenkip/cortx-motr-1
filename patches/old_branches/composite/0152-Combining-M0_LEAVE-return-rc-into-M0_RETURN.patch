From 32e11a3b6547734190fa353008b0bf61ed74fe35 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Thu, 13 Jun 2013 18:26:56 +0530
Subject: [PATCH 152/172] Combining M0_LEAVE() + return rc into M0_RETURN.

M0_LEAVE() in such cases was used to to print lid which was thought to be
useful in debugging multithreaded issues. It is now pointed out that the
"stack" column in m0_trace_parse() output is present to indicate thread info.
Hence, getting ird of printing lid at the time of exiting from functions.
---
 layout/composite.c   | 137 +++++++++++++++++----------------------------------
 layout/layout_addb.h |  29 ++++++-----
 2 files changed, 59 insertions(+), 107 deletions(-)

diff --git a/layout/composite.c b/layout/composite.c
index ea8c3d1..4d64b87 100644
--- a/layout/composite.c
+++ b/layout/composite.c
@@ -269,8 +269,7 @@ static int composite_allocate(struct m0_layout_domain *dom,
 	*out = &cl->cl_base;
 	M0_POST(m0_layout__allocated_invariant(&cl->cl_base));
 	M0_POST(cl->cl_layers_nr == 0);
-	M0_LEAVE("lid %llu, cl pointer %p", (unsigned long long)lid, cl);
-	return 0;
+	M0_RETURN(0);
 }
 
 /** Implementation of lo_delete for COMPOSITE layout type. */
@@ -354,8 +353,6 @@ static int layer_add_internal(struct m0_composite_layout *cl,
 
 	*lr = layer;
 	M0_POST(composite_invariant(cl));
-	M0_LEAVE("lid %llu, layer %lu", (unsigned long long)cl->cl_base.l_id,
-		 (unsigned long)layer->clr_idx);
 	M0_RETURN(0);
 }
 
@@ -393,7 +390,7 @@ static void layer_delete(struct m0_composite_layout *cl,
 	extlist_free(&layer->clr_extents, EXTLIST_FINI);
 	M0_POST(layer->clr_idx == cl->cl_layers_nr);
 	m0_free(layer);
-	M0_LEAVE("lid %llu", (unsigned long long)cl->cl_base.l_id);
+	M0_LEAVE();
 }
 
 /** Populates an allocated layout. */
@@ -419,8 +416,7 @@ static int composite_populate(struct m0_composite_layout *cl,
 
 	M0_POST(ergo(rc == 0, composite_invariant(cl)));
 	M0_POST(m0_mutex_is_locked(&cl->cl_base.l_lock));
-	M0_LEAVE("lid %llu, rc %d", (unsigned long long)cl->cl_base.l_id, rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 /** Required only in case of error handling. */
@@ -464,9 +460,7 @@ M0_INTERNAL int m0_composite_build(struct m0_layout_domain *dom,
 	M0_POST(ergo(rc == 0, composite_invariant(*out) &&
 		     cl->cl_layers_nr == 1 &&
 		     m0_mutex_is_not_locked(&l->l_lock)));
-	M0_LEAVE("domain %p, lid %llu, cl %p, rc %d",
-		 dom, (unsigned long long)lid, *out, rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 /** Deletes all the layers from an in-memory layout. */
@@ -533,8 +527,7 @@ M0_INTERNAL int m0_composite_layer_add(struct m0_composite_layout *cl,
 	m0_mutex_unlock(&cl->cl_base.l_lock);
 	M0_POST(composite_invariant(cl));
 	M0_POST(ergo(rc == 0, layer->clr_idx > 0 && cl->cl_layers_nr > 1));
-	M0_LEAVE("lid %llu, rc %d", (unsigned long long)cl->cl_base.l_id, rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 /** Finds a layer with the given layer index. */
@@ -661,10 +654,7 @@ static int sublayout_ids_inbuf_read(struct m0_composite_layout *cl,
 
 	*sl_id_list = sublayout_id_list;
 	M0_POST(*layers_nr > 0);
-	M0_LEAVE("lid %llu, layers_nr %lu",
-		 (unsigned long long)cl->cl_base.l_id,
-		 (unsigned long)*layers_nr);
-	return 0;
+	M0_RETURN(0);
 }
 
 static void ext_del(struct m0_composite_layer *layer,
@@ -712,16 +702,14 @@ static int extents_inbuf_read(struct m0_composite_layout *cl,
 	m0_bufvec_cursor_move(cur, sizeof *header);
 	M0_ASSERT(header->clh_idx == layer->clr_idx);
 	if (header->clh_extents_nr == 0) {
-		M0_LOG(M0_ERROR, "lid %llu, layer %lu, No extent is "
-		       "present in the buffer",
-		       (unsigned long long)cl->cl_base.l_id,
+		M0_LOG(M0_ERROR, "lid %llu, layer %lu, No extent is present "
+		       "in the buffer", (unsigned long long)cl->cl_base.l_id,
 		       (unsigned long)layer->clr_idx);
-		return -EINVAL;;
+		return -EINVAL;
 	}
 
 	M0_PRE(m0_bufvec_cursor_step(cur) >=
 	       header->clh_extents_nr * sizeof *buf_ext);
-
 	for (i = 0; i < header->clh_extents_nr; ++i) {
 		buf_ext = m0_bufvec_cursor_addr(cur);
 		m0_bufvec_cursor_move(cur, sizeof *buf_ext);
@@ -729,20 +717,20 @@ static int extents_inbuf_read(struct m0_composite_layout *cl,
 		if (m0_ext_is_empty(&buf_ext->lbe_ext) ||
 		    !M0_IN(buf_ext->lbe_state, (M0_CLRES_HOLE, M0_CLRES_VALID,
 						M0_CLRES_FLATTENING))) {
-			m0_layout__log("extents_inbuf_read",
-				       "Invalid extent found in the buffer",
-				       M0_LAYOUT_ADDB_LOC_COMP_ELIST_READ,
-				       &cl->cl_base.l_addb_ctx,
-				       cl->cl_base.l_id, -ENOMEM);
+			M0_LOG(M0_ERROR, "lid %llu, layer %lu, Invalid extent "
+			       "found in the buffer",
+			       (unsigned long long)cl->cl_base.l_id,
+			       (unsigned long)layer->clr_idx);
 			return -EINVAL;
 		}
 		rc = ext_add(&layer->clr_extents, &cl->cl_base,
 			     &buf_ext->lbe_ext, buf_ext->lbe_state,
 			     ADD_AT_TAIL, NULL);
 		if (rc != 0) {
-			M0_LOG(M0_ERROR, "lid %llu, Extent could not be "
-			       "added to the list",
-			       (unsigned long long)cl->cl_base.l_id);
+			M0_LOG(M0_ERROR, "lid %llu, layer %lu, Extent could "
+			       "not be added to the list",
+			       (unsigned long long)cl->cl_base.l_id,
+			       (unsigned long)layer->clr_idx);
 			return rc;
 		}
 	}
@@ -894,8 +882,7 @@ static int composite_decode(struct m0_layout *l,
 	M0_POST(ergo(rc != 0 && cl->cl_layers_nr == 0,
 		     m0_layout__allocated_invariant(&cl->cl_base)));
 	M0_POST(m0_mutex_is_locked(&cl->cl_base.l_lock));
-	M0_LEAVE("lid %llu, rc %d", (unsigned long long)l->l_id, rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 /** Writes layers into the buffer. */
@@ -922,13 +909,12 @@ static void layers_inbuf_write(const struct m0_composite_layout *cl,
 		m0_tl_for(ext, &layer->clr_extents, ext1) {
 			buf_ext.lbe_ext = ext1->cle_ext;
 			buf_ext.lbe_state = ext1->cle_state;
-			nbytes = m0_bufvec_cursor_copyto(out,
-							 &buf_ext,
+			nbytes = m0_bufvec_cursor_copyto(out, &buf_ext,
 							 sizeof buf_ext);
 			M0_ASSERT(nbytes == sizeof buf_ext);
 		} m0_tl_endfor;
 	} m0_tl_endfor;
-	M0_LEAVE("lid %llu", (unsigned long long)cl->cl_base.l_id);
+	M0_LEAVE();
 }
 
 /** Implementation of lo_encode() for composite layout type. */
@@ -1007,8 +993,7 @@ static int composite_encode(struct m0_layout *l,
 			       "deleted from the DB",
 			       (unsigned long long)cl->cl_base.l_id);
 	}
-	M0_LEAVE("lid %llu, rc %d", (unsigned long long)l->l_id, rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 /**
@@ -1173,13 +1158,13 @@ M0_INTERNAL int m0_composite_layer_ext_lookup(
 	} else
 		rc = -ENOENT;
 	m0_mutex_unlock(&cl->cl_base.l_lock);
-	M0_LEAVE("lid %llu, offset %llu, rc %d, layer %lu, state %llu",
-		 (unsigned long long)cl->cl_base.l_id,
-		 (unsigned long long)offset, rc,
-		 rc == 0 ? (unsigned long)layer->clr_idx : 0,
-		 (unsigned long long)*state);
+	M0_LOG(M0_DEBUG, "lid %llu, offset %llu, rc %d, layer %lu, state %llu",
+	       (unsigned long long)cl->cl_base.l_id,
+	       (unsigned long long)offset, rc,
+	       rc == 0 ? (unsigned long)layer->clr_idx : 0,
+	       (unsigned long long)*state);
 	M0_POST(composite_invariant(cl));
-	return rc;
+	M0_RETURN(rc);
 }
 
 /** Deletes an extent from the extent list associated with the given layer. */
@@ -1296,7 +1281,8 @@ static int ext_validate(struct m0_composite_layout *cl,
 		       (unsigned long long)layer->clr_cl->l_id,
 		       (unsigned long)layer->clr_idx,
 		       ext_validation_kind == EXT_MERGE_VALIDATION ?
-		       "merged" : "deleted", (unsigned long long)e->e_start,
+		       "overwritten" : "deleted",
+		       (unsigned long long)e->e_start,
 		       (unsigned long long)e->e_end,
 		       (unsigned long long)new_state,
 		       (unsigned long long)ext1->cle_ext.e_start,
@@ -1510,17 +1496,13 @@ static int ext_write(struct m0_composite_layout *cl,
 		 (unsigned long long)target->cle_ext.e_end);
 	if (m0_ext_equal(&target->cle_ext, e)) {
 		target->cle_state = new_state;
-		M0_LEAVE("lid %llu, layer %lu, rc 0", (unsigned long long)lid,
-			 (unsigned long)layer->clr_idx);
-		return 0;
+		M0_RETURN(0);
 	}
 	rc = ext_paste(cl, layer, e, new_state, target);
 	/* In case of success, the extent has to be present in the list. */
 	M0_POST(ergo(rc == 0, ext_find(layer, e, new_state, NULL) == 0));
 	M0_POST(composite_invariant(cl));
-	M0_LEAVE("lid %llu, layer %lu, rc %d", (unsigned long long)lid,
-		 (unsigned long)layer->clr_idx, rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 M0_INTERNAL int m0_composite_layer_ext_add(
@@ -1552,12 +1534,7 @@ M0_INTERNAL int m0_composite_layer_ext_add(
 			       &cl->cl_base.l_addb_ctx, cl->cl_base.l_id, rc);
 	m0_mutex_unlock(&cl->cl_base.l_lock);
 	M0_POST(composite_invariant(cl));
-	M0_LEAVE("lid %llu, layer %lu, e_start %llu, e_end %llu, "
-		 "e_state %llu, rc %d", (unsigned long long)cl->cl_base.l_id,
-		 (unsigned long)layer_idx, (unsigned long long)e->e_start,
-		 (unsigned long long)e->e_end, (unsigned long long)state,
-		 rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 M0_INTERNAL int m0_composite_layer_ext_state_update(
@@ -1588,12 +1565,7 @@ M0_INTERNAL int m0_composite_layer_ext_state_update(
 			       &cl->cl_base.l_addb_ctx, cl->cl_base.l_id, rc);
 	m0_mutex_unlock(&cl->cl_base.l_lock);
 	M0_POST(composite_invariant(cl));
-	M0_LEAVE("lid %llu, layer %lu, e_start %llu, e_end %llu, "
-		 "e_state %llu, rc %d", (unsigned long long)cl->cl_base.l_id,
-		 (unsigned long)layer_idx, (unsigned long long)e->e_start,
-		 (unsigned long long)e->e_end, (unsigned long long)new_state,
-		 rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 M0_INTERNAL int m0_composite_layer_ext_delete(struct m0_composite_layout *cl,
@@ -1621,11 +1593,7 @@ M0_INTERNAL int m0_composite_layer_ext_delete(struct m0_composite_layout *cl,
 			       &cl->cl_base.l_addb_ctx, cl->cl_base.l_id, rc);
 	m0_mutex_unlock(&cl->cl_base.l_lock);
 	M0_POST(composite_invariant(cl));
-	M0_LEAVE("lid %llu, layer %lu, e_start %llu, e_end %llu, rc %d",
-		 (unsigned long long)cl->cl_base.l_id, (unsigned long)layer_idx,
-		 (unsigned long long)e->e_start,(unsigned long long)e->e_end,
-		 rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 /** Implementation of lo_recsize() for COMPOSITE layout type. */
@@ -1817,10 +1785,7 @@ err1_injected:
 		 * likely that m0_emap_obj_delete() too would fail. Hence,
 		 * ignoring its status.
 		 */
-		M0_LEAVE("lid %llu, layer %lu, rc %d",
-			 (unsigned long long)cl->cl_base.l_id,
-			 (unsigned long)layer->clr_idx, rc);
-		return rc;
+		M0_RETURN(rc);
 	}
 
 	seg = m0_emap_seg_get(&it);
@@ -1835,8 +1800,8 @@ err1_injected:
 		rc = ext_indb_write(&it, layer, &ext1->cle_ext,
 				    ext1->cle_state);
 		if (rc != 0) {
-			M0_LOG(M0_ERROR, "lid %llu, layer %lu, "
-			       "failed to write extent, rc %d",
+			M0_LOG(M0_ERROR, "lid %llu, layer %lu, failed to "
+			       "write extent, rc %d",
 			       (unsigned long long)cl->cl_base.l_id,
 			       (unsigned long)layer->clr_idx, rc);
 			break;
@@ -1872,12 +1837,9 @@ static int extents_indb_read(struct m0_composite_layout *cl,
 	l = &cl->cl_base;
 	emap = emap_from_cl(cl);
 	rc = emap_iterator_set(cl, emap, layer->clr_idx, 0, tx, &it);
-	if (rc != 0) {
-		M0_LEAVE("lid %llu, layer %lu, rc %d",
-			 (unsigned long long)l->l_id,
-			 (unsigned long)layer->clr_idx, rc);
-		return rc;
-	}
+	if (rc != 0)
+		M0_RETURN(rc);
+
 	seg = m0_emap_seg_get(&it);
 	while (1) {
 		M0_ASSERT(seg != NULL);
@@ -1927,8 +1889,7 @@ static int layers_indb_add(struct m0_composite_layout *cl,
 			break;
 
 	} m0_tl_endfor;
-	M0_LEAVE("lid %llu, rc %d", (unsigned long long)cl->cl_base.l_id, rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 /**
@@ -2004,12 +1965,8 @@ static int layer_indb_delete_verify(struct m0_composite_layout *cl,
 		 (unsigned long)layer_idx);
 	rc = 0;
 	rc = emap_iterator_set(cl, emap, layer_idx, 0, tx, &it);
-	if (rc != 0) {
-		M0_LEAVE("lid %llu, layer_idx %lu, rc %d",
-			 (unsigned long long)cl->cl_base.l_id,
-			 (unsigned long)layer_idx, rc);
-		return rc;
-	}
+	if (rc != 0)
+		M0_RETURN(rc);
 
 	seg = m0_emap_seg_get(&it);
 	while (1) {
@@ -2114,10 +2071,7 @@ err1_injected:
 			       "failed to delete from layer_emap",
 			       M0_LAYOUT_ADDB_LOC_COMP_LAYER_INDB_DEL_2,
 			       &cl->cl_base.l_addb_ctx, cl->cl_base.l_id, rc);
-	M0_LEAVE("lid %llu, layer_idx %lu, rc %d",
-		 (unsigned long long)cl->cl_base.l_id,
-		 (unsigned long)layer_idx, rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 /**
@@ -2228,8 +2182,7 @@ static int layers_indb_delete(struct m0_composite_layout *cl,
 		} m0_tl_endfor;
 	}
 	M0_POST(composite_invariant(cl));
-	M0_LEAVE("lid %llu, rc %d", (unsigned long long)cl->cl_base.l_id, rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 M0_INTERNAL struct m0_composite_layout *m0_layout_to_cl(
diff --git a/layout/layout_addb.h b/layout/layout_addb.h
index 0a99731..ce60df0 100644
--- a/layout/layout_addb.h
+++ b/layout/layout_addb.h
@@ -92,21 +92,20 @@ enum {
 	M0_LAYOUT_ADDB_LOC_COMP_LAYER_EXT_ALLOC    = 230,
 	M0_LAYOUT_ADDB_LOC_COMP_LAYER_ADD          = 240,
 	M0_LAYOUT_ADDB_LOC_COMP_SUBLAYOUT_READ     = 250,
-	M0_LAYOUT_ADDB_LOC_COMP_ELIST_READ         = 260,
-	M0_LAYOUT_ADDB_LOC_COMP_EXT_ADD_INTERNAL   = 270,
-	M0_LAYOUT_ADDB_LOC_COMP_EXT_ADD            = 380,
-	M0_LAYOUT_ADDB_LOC_COMP_EXT_UPDATE         = 390,
-	M0_LAYOUT_ADDB_LOC_COMP_EXT_DELETE         = 400,
-	M0_LAYOUT_ADDB_LOC_COMP_EXT_PASTE_1        = 410,
-	M0_LAYOUT_ADDB_LOC_COMP_EXT_PASTE_2        = 411,
-	M0_LAYOUT_ADDB_LOC_COMP_EXT_PASTE_3        = 412,
-	M0_LAYOUT_ADDB_LOC_COMP_LAYER_EMAP_ADD     = 420,
-	M0_LAYOUT_ADDB_LOC_COMP_EMAP_LOOKUP        = 430,
-	M0_LAYOUT_ADDB_LOC_COMP_EMAP_READ          = 440,
-	M0_LAYOUT_ADDB_LOC_COMP_LAYER_INDB_DEL_1   = 450,
-	M0_LAYOUT_ADDB_LOC_COMP_LAYER_INDB_DEL_2   = 451,
-	M0_LAYOUT_ADDB_LOC_COMP_EMAP_IT_SET        = 460,
-	M0_LAYOUT_ADDB_LOC_COMP_INST_BUILD         = 470,
+	M0_LAYOUT_ADDB_LOC_COMP_EXT_ADD_INTERNAL   = 260,
+	M0_LAYOUT_ADDB_LOC_COMP_EXT_ADD            = 270,
+	M0_LAYOUT_ADDB_LOC_COMP_EXT_UPDATE         = 280,
+	M0_LAYOUT_ADDB_LOC_COMP_EXT_DELETE         = 290,
+	M0_LAYOUT_ADDB_LOC_COMP_EXT_PASTE_1        = 300,
+	M0_LAYOUT_ADDB_LOC_COMP_EXT_PASTE_2        = 301,
+	M0_LAYOUT_ADDB_LOC_COMP_EXT_PASTE_3        = 302,
+	M0_LAYOUT_ADDB_LOC_COMP_LAYER_EMAP_ADD     = 310,
+	M0_LAYOUT_ADDB_LOC_COMP_EMAP_LOOKUP        = 320,
+	M0_LAYOUT_ADDB_LOC_COMP_EMAP_READ          = 330,
+	M0_LAYOUT_ADDB_LOC_COMP_LAYER_INDB_DEL_1   = 340,
+	M0_LAYOUT_ADDB_LOC_COMP_LAYER_INDB_DEL_2   = 341,
+	M0_LAYOUT_ADDB_LOC_COMP_EMAP_IT_SET        = 350,
+	M0_LAYOUT_ADDB_LOC_COMP_INST_BUILD         = 360,
 
 	M0_LAYOUT_ADDB_LOC_NR
 };
-- 
1.8.3.2


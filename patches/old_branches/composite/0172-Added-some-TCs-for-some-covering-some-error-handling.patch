From 0ac66992dacbfe8e6487fb7b635f3a57d11c958c Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Fri, 16 Aug 2013 09:45:15 +0530
Subject: [PATCH 172/172] Added some TCs for some covering some error handling
 cases

---
 layout/layout_addb.h       |  1 +
 layout/layout_db.c         | 20 ++++++-----
 layout/linear_enum.c       |  6 +++-
 layout/list_enum.c         |  6 +++-
 layout/pdclust.c           |  3 +-
 layout/ut/layout.c         | 85 ++++++++++++++++++++++++++++++++++++++++------
 layout/ut/layout_generic.c |  3 +-
 layout/ut/pdclust.c        |  3 +-
 8 files changed, 104 insertions(+), 23 deletions(-)

diff --git a/layout/layout_addb.h b/layout/layout_addb.h
index 29512a5..72c9fe3 100644
--- a/layout/layout_addb.h
+++ b/layout/layout_addb.h
@@ -92,6 +92,7 @@ enum {
 	M0_LAYOUT_ADDB_LOC_PDCLUST_ENC             = 210,
 	M0_LAYOUT_ADDB_LOC_UPDATE_1                = 220,
 	M0_LAYOUT_ADDB_LOC_UPDATE_2                = 221,
+	M0_LAYOUT_ADDB_LOC_UPDATE_3                = 222,
 	M0_LAYOUT_ADDB_LOC_COMP_REG_1              = 230,
 	M0_LAYOUT_ADDB_LOC_COMP_REG_2              = 231,
 	M0_LAYOUT_ADDB_LOC_COMP_ALLOC              = 240,
diff --git a/layout/layout_db.c b/layout/layout_db.c
index 0ce99b2..fa8cf33 100644
--- a/layout/layout_db.c
+++ b/layout/layout_db.c
@@ -90,7 +90,7 @@
  * - It provides support for storing composite layout maps.
  * - It is required that for adding a layout type or layout enumeration type,
  *   central layout.h should not require modifications.
- * - It is assumed that the problem of coruption is going to be attacked
+ * - It is assumed that the problem of corruption is going to be attacked
  *   generically at the lower layers (db and fop) transparently, instead of
  *   adding magic numbers and check-sums in every module. Thus the input to
  *   Layout DB APIs which is either a layout or a FOP buffer in most of the
@@ -608,36 +608,40 @@ M0_INTERNAL int m0_layout_update(struct m0_layout *l,
 	/* First verify that the layout does exist in the DB. */
 	rc = pair_init(pair, l, tx, M0_LXO_DB_LOOKUP, recsize);
 	M0_ASSERT(rc == 0);
+
+	if (M0_FI_ENABLED("table_lookup_err"))
+		{ rc = L_TABLE_LOOKUP_ERR; goto err1_injected; }
 	rc = m0_table_lookup(tx, pair);
+err1_injected:
 	M0_ASSERT(rc != -ENOENT);
 	if (rc != 0) {
 		m0_layout__log("m0_layout_update",
 			       "m0_table_lookup() failed",
 			       M0_LAYOUT_ADDB_LOC_UPDATE_1,
 			       &l->l_addb_ctx, l->l_id, rc);
-		M0_RETURN(rc);
+		goto out;
 	}
 
 	rc = pair_init(pair, l, tx, M0_LXO_DB_UPDATE, recsize);
 	if (rc == 0) {
 		if (M0_FI_ENABLED("table_update_err"))
-			{ rc = L_TABLE_UPDATE_ERR; goto err1_injected; }
+			{ rc = L_TABLE_UPDATE_ERR; goto err2_injected; }
 		rc = m0_table_update(tx, pair);
-err1_injected:
+err2_injected:
 		if (rc != 0)
 			m0_layout__log("m0_layout_update",
 				       "m0_table_update() failed",
-				       M0_LAYOUT_ADDB_LOC_UPDATE_1,
+				       M0_LAYOUT_ADDB_LOC_UPDATE_2,
 				       &l->l_addb_ctx, l->l_id, rc);
 		m0_db_pair_fini(pair);
 	} else
 		m0_layout__log("m0_layout_update",
 			       "pair_init() failed",
-			       M0_LAYOUT_ADDB_LOC_UPDATE_2,
+			       M0_LAYOUT_ADDB_LOC_UPDATE_3,
 			       &l->l_addb_ctx, l->l_id, rc);
+out:
 	m0_mutex_unlock(&l->l_lock);
-	M0_LEAVE("lid %llu, rc %d", (unsigned long long)l->l_id, rc);
-	return rc;
+	M0_RETURN(rc);
 }
 
 M0_INTERNAL int m0_layout_delete(struct m0_layout *l,
diff --git a/layout/linear_enum.c b/layout/linear_enum.c
index 247ee47..cbd247f 100644
--- a/layout/linear_enum.c
+++ b/layout/linear_enum.c
@@ -215,7 +215,11 @@ static m0_bcount_t linear_max_recsize(void)
 	return sizeof(struct m0_layout_linear_attr);
 }
 
-/** Implementation of leo_decode() for linear enumeration type. */
+/**
+ * Implementation of leo_decode() for linear enumeration type.
+ *
+ * This is used only for the DB operation, that is, through m0_layout_lookup().
+ */
 static int linear_decode(struct m0_layout_enum *e,
 			 struct m0_bufvec_cursor *cur,
 			 struct m0_db_tx *tx,
diff --git a/layout/list_enum.c b/layout/list_enum.c
index d32277b..fd9edc6 100644
--- a/layout/list_enum.c
+++ b/layout/list_enum.c
@@ -399,7 +399,11 @@ out:
 	M0_RETURN(rc);
 }
 
-/** Implementation of leo_decode() for LIST enumeration type. */
+/**
+ * Implementation of leo_decode() for LIST enumeration type.
+ *
+ * This is used only for the DB operation, that is, through m0_layout_lookup().
+ */
 static int list_decode(struct m0_layout_enum *e,
 		       struct m0_bufvec_cursor *cur,
 		       struct m0_db_tx *tx,
diff --git a/layout/pdclust.c b/layout/pdclust.c
index b23e2a2..3527c18 100644
--- a/layout/pdclust.c
+++ b/layout/pdclust.c
@@ -542,7 +542,8 @@ static int pdclust_copy_to_onwire(struct m0_pdclust_layout *pl,
 		if (rc == 0) {
 			onwire->po_let_id = let_id;
 			*pl_onwire = onwire;
-		}
+		} else
+			m0_free(onwire);
 	} else {
 		rc = -ENOMEM;
 		m0_layout__log("pdclust_copy_to_onwire",
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index ffc7de4..61890fe 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -867,6 +867,11 @@ static void test_encode_failure(void)
 				 FAILURE_TEST);
 	M0_UT_ASSERT(rc == LO_ENCODE_ERR);
 
+	/* todo Aug 12 Continue from here.
+	 * Simulate memory allocation error in pdclust_copy_to_onwire() that is
+	 * in the path of pdclust_encode().
+	 */
+
 	/* Simulate memory allocation failure in list_copy_to_onwire(). */
 	lid = 6003;
 	m0_fi_enable_once("list_copy_to_onwire", "alloc_ptr_fail/onwire");
@@ -884,6 +889,14 @@ static void test_encode_failure(void)
 				 FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 
+	/* Simulate memory allocation failure in linear_copy_to_onwire(). */
+	lid = 6005;
+	m0_fi_enable_once("linear_copy_to_onwire", "alloc_ptr_fail/onwire");
+	rc = test_encode_pdclust(lid, &domain,
+				 LINEAR_ENUM_ID, INLINE_NOT_APPLICABLE,
+				 FAILURE_TEST);
+	M0_UT_ASSERT(rc == -ENOMEM);
+
 	/* Simulate m0_layout_encode() failure. */
 	lid = 6021;
 	m0_fi_enable_once("m0_layout_encode", "lo_encode_err");
@@ -1592,8 +1605,53 @@ static void test_lookup_failure(void)
 				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EPROTO);
 
-	/* Simulate memory allocation failure in list_decode(). */
+	/* Simulate invalid attributes error in m0_layout_decode(). */
 	lid = 19009;
+	m0_fi_enable_once("m0_layout_decode", "attr_err");
+	rc = test_lookup_pdclust(lid, &domain,
+				 LIST_ENUM_ID, MORE_THAN_INLINE,
+				 EXISTING_TEST, FAILURE_TEST);
+	M0_UT_ASSERT(rc == -EPROTO);
+
+	/* Simulate invalid attributes error in pdclust_decode(). */
+	lid = 19010;
+	m0_fi_enable_once("pdclust_decode", "attr_err1");
+	rc = test_lookup_pdclust(lid, &domain,
+				 LIST_ENUM_ID, MORE_THAN_INLINE,
+				 EXISTING_TEST, FAILURE_TEST);
+	M0_UT_ASSERT(rc == -EPROTO);
+
+	/* Simulate invalid attributes error in pdclust_decode(). */
+	lid = 19011;
+	m0_fi_enable_once("pdclust_decode", "attr_err2");
+	rc = test_lookup_pdclust(lid, &domain,
+				 LIST_ENUM_ID, MORE_THAN_INLINE,
+				 EXISTING_TEST, FAILURE_TEST);
+	M0_UT_ASSERT(rc == -EPROTO);
+
+	/* Simulate invalid attributes error in pdclust_decode(). */
+	lid = 19012;
+	m0_fi_enable_once("pdclust_decode", "attr_err3");
+	rc = test_lookup_pdclust(lid, &domain,
+				 LIST_ENUM_ID, MORE_THAN_INLINE,
+				 EXISTING_TEST, FAILURE_TEST);
+	M0_UT_ASSERT(rc == -EPROTO);
+
+	/*
+	 * Simulate memory allocation error in leto_allocate() that is in
+	 * the path of pdclust_decode().
+	 */
+	lid = 19013;
+	m0_fi_enable_off_n_on_m("list_allocate", "alloc_ptr_fail/list_enum",
+				1, 1);
+	rc = test_lookup_pdclust(lid, &domain,
+				 LIST_ENUM_ID, MORE_THAN_INLINE,
+				 EXISTING_TEST, FAILURE_TEST);
+	M0_UT_ASSERT(rc == -ENOMEM);
+	m0_fi_disable("list_allocate", "alloc_ptr_fail/list_enum");
+
+	/* Simulate memory allocation failure in list_decode(). */
+	lid = 19014;
 	m0_fi_enable_once("list_decode", "alloc_arr_fail/cob_list");
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
@@ -1601,7 +1659,7 @@ static void test_lookup_failure(void)
 	M0_UT_ASSERT(rc == -ENOMEM);
 
 	/* Simulate fid invalid error in list_decode(). */
-	lid = 19010;
+	lid = 19015;
 	m0_fi_enable_once("list_decode", "fid_invalid_err");
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
@@ -1609,7 +1667,7 @@ static void test_lookup_failure(void)
 	M0_UT_ASSERT(rc == -EPROTO);
 
 	/* Simulate invalid attributes error in list_populate(). */
-	lid = 19011;
+	lid = 19016;
 	m0_fi_enable_once("list_decode", "attr_err");
 	rc = test_lookup_pdclust(lid, &domain,
 				 LIST_ENUM_ID, MORE_THAN_INLINE,
@@ -1622,7 +1680,7 @@ static void test_lookup_failure(void)
 	 */
 	lid = 19021;
 	m0_fi_enable_off_n_on_m("layer_add_internal", "alloc_ptr_fail/layer",
-				6 /* layers_nr + composite_sublayouts nr */, 1);
+				6 /* layers_nr + 2 */, 1);
 	rc = test_lookup_composite(lid, &domain, 4, 5, EXISTING_TEST,
 				   FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
@@ -1915,7 +1973,7 @@ static void test_update(void)
 	M0_UT_ASSERT(rc == 0);
 
 	/* Update a layout object with COMPOSITE layout type. */
-	lid = 22022;
+	lid = 22021;
 	rc = test_update_composite(lid, &domain, 4, 15, !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 }
@@ -1932,8 +1990,15 @@ static void test_update_failure(void)
 	M0_UT_ASSERT(rc == LO_ENCODE_ERR);
 	m0_fi_disable("m0_layout_encode", "lo_encode_err");
 
-	/* Simulate m0_table_update() failure in m0_layout_update(). */
+	/* Simulate m0_table_lookup() failure in m0_layout_update(). */
 	lid = 23002;
+	m0_fi_enable_once("m0_layout_update", "table_lookup_err");
+	rc = test_update_pdclust(lid, &domain, LINEAR_ENUM_ID,
+				 INLINE_NOT_APPLICABLE, FAILURE_TEST);
+	M0_UT_ASSERT(rc == L_TABLE_LOOKUP_ERR);
+
+	/* Simulate m0_table_update() failure in m0_layout_update(). */
+	lid = 23003;
 	m0_fi_enable_once("m0_layout_update", "table_update_err");
 	rc = test_update_pdclust(lid, &domain, LINEAR_ENUM_ID,
 				 INLINE_NOT_APPLICABLE, FAILURE_TEST);
@@ -1943,7 +2008,7 @@ static void test_update_failure(void)
 	 * Simulate error during extents_indb_delete() that is in the path of
 	 * updating a layout.
 	 */
-	lid = 23003;
+	lid = 23021;
 	m0_fi_enable_once("single_ext_indb_write", "emap_lookup_err");
 	rc = test_update_composite(lid, &domain, 4, 7, FAILURE_TEST);
 	M0_UT_ASSERT(rc == L_EMAP_LOOKUP_ERR);
@@ -1952,13 +2017,13 @@ static void test_update_failure(void)
 	 * Simulate error during extents_indb_delete() that is in the path of
 	 * updating a layout.
 	 */
-	lid = 23004;
+	lid = 23022;
 	m0_fi_enable_once("single_ext_indb_write", "emap_paste_err");
 	rc = test_update_composite(lid, &domain, 4, 7, FAILURE_TEST);
 	M0_UT_ASSERT(rc == L_EMAP_PASTE_ERR);
 
 	/* Simulate emap paste error while adding a non-zeroth layer. */
-	lid = 23005;
+	lid = 23023;
 	m0_fi_enable_off_n_on_m("ext_indb_write", "emap_paste_err",
 				16 /* layer_nr * extents_nr + 1 */, 1);
 	rc = test_update_composite(lid, &domain, 3, 5, FAILURE_TEST);
@@ -1969,7 +2034,7 @@ static void test_update_failure(void)
 	 * Simulate layout find error in the path of layer deletion that
 	 * happens through the update path.
 	 */
-	lid = 25006;
+	lid = 25024;
 	m0_fi_enable_once("layout_find", "layout_find_err");
 	rc = test_update_composite(lid, &domain, 3, 5, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EINVAL);
diff --git a/layout/ut/layout_generic.c b/layout/ut/layout_generic.c
index 7871f5c..b2f02e7 100644
--- a/layout/ut/layout_generic.c
+++ b/layout/ut/layout_generic.c
@@ -325,7 +325,8 @@ int layout_update(struct m0_layout *l, bool failure_test)
 	M0_UT_ASSERT(rc == 0);
 	rc = m0_layout_update(l, &tx, &pair);
 	if (rc != 0) {
-		M0_UT_ASSERT(rc == LO_ENCODE_ERR || rc == L_TABLE_UPDATE_ERR ||
+		M0_UT_ASSERT(rc == LO_ENCODE_ERR || rc == L_TABLE_LOOKUP_ERR ||
+			     rc == L_TABLE_UPDATE_ERR ||
 			     rc == L_TABLE_INSERT_ERR || rc == -EINVAL ||
 			     rc == L_EMAP_LOOKUP_ERR || rc == L_EMAP_PASTE_ERR);
 		rc_tmp = m0_db_tx_abort(&tx);
diff --git a/layout/ut/pdclust.c b/layout/ut/pdclust.c
index 30042e7..724b5ac 100644
--- a/layout/ut/pdclust.c
+++ b/layout/ut/pdclust.c
@@ -1534,7 +1534,8 @@ int test_update_pdclust(uint64_t lid, struct m0_layout_domain *domain,
 	/* Update the layout object in the DB. */
 	rc = layout_update(l, failure_test);
 	if (failure_test)
-		M0_UT_ASSERT(rc == LO_ENCODE_ERR || rc == L_TABLE_UPDATE_ERR);
+		M0_UT_ASSERT(rc == LO_ENCODE_ERR || rc == L_TABLE_LOOKUP_ERR ||
+			     rc == L_TABLE_UPDATE_ERR);
 	else {
 		M0_UT_ASSERT(rc == 0);
 		pdclust_layout_copy(enum_id, l, &l_changed_copy);
-- 
1.8.3.2


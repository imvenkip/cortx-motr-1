From 25a51f3459492600263442fbc4c53ceb5d7666d0 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Thu, 25 Jul 2013 18:27:50 +0530
Subject: [PATCH 161/172] Modifying some tests to necessarily have
 noncontiguous extents

---
 layout/ut/layout.c | 37 +++++++++++--------------------------
 1 file changed, 11 insertions(+), 26 deletions(-)

diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index 0d42a7e..8276937 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -697,7 +697,6 @@ static void test_decode_failure(void)
 				 FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EPROTO);
 
-	//todo The test needs a change - induce invalid attribute while building the buffer
 	/* Simulate invalid attributes error in pdclust_decode(). */
 	lid = 4002;
 	m0_fi_enable_once("pdclust_decode", "attr_err1");
@@ -802,7 +801,7 @@ static void test_decode_failure(void)
 	 */
 	lid = 4025;
 	m0_fi_enable_off_n_on_m("layer_add_internal", "alloc_ptr_fail/layer",
-				2 /* composite_sublayouts nr */, 1);
+				2, 1);
 	rc = test_decode_composite(lid, &domain, 5, 6,
 				   !CONTIGUOUS_EXTENTS, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
@@ -811,7 +810,7 @@ static void test_decode_failure(void)
 	/* Simulate memory allocation failure for the first layer addition. */
 	lid = 4026;
 	m0_fi_enable_off_n_on_m("layer_add_internal", "alloc_ptr_fail/layer",
-				3 /* 1 + composite_sublayouts nr */, 1);
+				3, 1);
 	rc = test_decode_composite(lid, &domain, 5, 6,
 				   !CONTIGUOUS_EXTENTS, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
@@ -1664,7 +1663,6 @@ static void test_lookup_failure(void)
 				 EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EPROTO);
 
-#if 0 //todo jul 25 Modify this for !CONTI..
 	/*
 	 * Simulate layer_add_internal() failure for its first invokation that
 	 * is in the path of composite_decode().
@@ -1672,13 +1670,11 @@ static void test_lookup_failure(void)
 	lid = 19021;
 	m0_fi_enable_off_n_on_m("layer_add_internal", "alloc_ptr_fail/layer",
 				6 /* layers_nr + composite_sublayouts nr */, 1);
-	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
+	rc = test_lookup_composite(lid, &domain, 4, 5, !CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 	m0_fi_disable("layer_add_internal", "alloc_ptr_fail/layer");
-#endif
 
-#if 0 //todo jul 25 Modify this for !CONTI..
 	/*
 	 * Simulate layer_add_internal() failure for its second invokation
 	 * that is in the path of composite_decode().
@@ -1687,13 +1683,11 @@ static void test_lookup_failure(void)
 	m0_fi_enable_off_n_on_m("layer_add_internal", "alloc_ptr_fail/layer",
 				7 /* layers_nr + 1 + composite_sublayouts nr */,
 				1);
-	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
+	rc = test_lookup_composite(lid, &domain, 4, 5, !CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 	m0_fi_disable("layer_add_internal", "alloc_ptr_fail/layer");
-#endif
 
-#if 0 //todo jul 25 Modify this for !CONTI..
 	/*
 	 * Simulate layer_add_internal() failure for the last layer addition
 	 * that is in the path of composite_decode().
@@ -1701,13 +1695,11 @@ static void test_lookup_failure(void)
 	lid = 19023;
 	m0_fi_enable_off_n_on_m("layer_add_internal", "alloc_ptr_fail/layer",
 				7 /* 2 * layers_nr - 1) */, 1);
-	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
+	rc = test_lookup_composite(lid, &domain, 4, 5, !CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 	m0_fi_disable("layer_add_internal", "alloc_ptr_fail/layer");
-#endif
 
-#if 0 //todo jul 25 Modify this for !CONTI..
 	/*
 	 * Simulate memory allocation error in the path of
 	 * extents_indb_read().
@@ -1716,20 +1708,18 @@ static void test_lookup_failure(void)
 	m0_fi_enable_off_n_on_m("ext_add", "alloc_ptr_fail/ext",
 				//80 /* layers_nr * extents_nr * 4 */, 1);
 				16 /* todo layers_nr * extents_nr * 4 */, 1);
-	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
+	rc = test_lookup_composite(lid, &domain, 4, 5, !CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
 	m0_fi_disable("ext_add", "alloc_ptr_fail/ext");
-#endif
 
-#if 0 //todo jul 25 Modify this for !CONTI..
 	/*
 	 * Simulate invalid extent state error in the path of
 	 * extents_indb_read().
 	 */
 	lid = 19025;
 	m0_fi_enable_once("extents_indb_read", "invalid_state_err");
-	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
+	rc = test_lookup_composite(lid, &domain, 4, 5, !CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EINVAL);
 
@@ -1738,7 +1728,7 @@ static void test_lookup_failure(void)
 	lid = 19026;
 	m0_fi_enable_off_n_on_m("emap_iterator_set", "emap_lookup_err",
 				5 /* layers_nr + 1 */, 1);
-	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
+	rc = test_lookup_composite(lid, &domain, 4, 5, !CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == L_EMAP_LOOKUP_ERR);
 	m0_fi_disable("emap_iterator_set", "emap_lookup_err");
@@ -1753,30 +1743,25 @@ static void test_lookup_failure(void)
 	//todo zeroth layer?
 	lid = 19029;
 	m0_fi_enable_off_n_on_m("layout_find", "layout_find_err", 3, 1);
-	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
+	rc = test_lookup_composite(lid, &domain, 4, 5, !CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EINVAL);
 	m0_fi_disable("layout_find", "layout_find_err");
-#endif
 
-#if 0
 	/* Simulate sublayout find error while reading a non-zeroth layer. */
 	lid = 19030;
 	m0_fi_enable_off_n_on_m("layout_find", "layout_find_err", 2, 1);
-	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
+	rc = test_lookup_composite(lid, &domain, 4, 5, !CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -EINVAL);
 	m0_fi_disable("layout_find", "layout_find_err");
-#endif
 
-#if 0 //todo jul 25 Modify this for !CONTI..
 	/* Simulate sublayout read error while reading a layer. */
 	lid = 19031;
 	m0_fi_enable_once("sublayout_ids_read", "alloc_arr_fail/sl_id_list");
-	rc = test_lookup_composite(lid, &domain, 4, 5, CONTIGUOUS_EXTENTS,
+	rc = test_lookup_composite(lid, &domain, 4, 5, !CONTIGUOUS_EXTENTS,
 				   EXISTING_TEST, FAILURE_TEST);
 	M0_UT_ASSERT(rc == -ENOMEM);
-#endif
 }
 
 /** Tests the API m0_layout_add(). */
-- 
1.8.3.2


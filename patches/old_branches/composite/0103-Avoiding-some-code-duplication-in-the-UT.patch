From 460f8c2c398fad24a6af7e9f4653e2a9b49f73b5 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Wed, 27 Mar 2013 15:04:52 +0530
Subject: [PATCH 103/172] Avoiding some code duplication in the UT

---
 layout/ut/composite.c | 559 +++++++++++---------------------------------------
 layout/ut/composite.h |  16 +-
 2 files changed, 126 insertions(+), 449 deletions(-)

diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index 55c397f..0886957 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -21,7 +21,7 @@
 #include "lib/ut.h"                 /* M0_UT_ASSERT() */
 #include "lib/memory.h"             /* M0_ALLOC_PTR() */
 #include "lib/misc.h"               /* M0_IN() */
-#include "lib/trace.h"              /* m0_console_printf() */
+#include "lib/trace.h"              /* m0_console_vprintf() */
 #include "lib/finject.h"
 
 #include "layout/layout.h"
@@ -1492,7 +1492,7 @@ static void extent_to_be_operated(const struct m0_composite_layout *cl,
 				  bool if_contiguous_extents,
 				  uint32_t layer_idx,
 				  uint64_t extent_idx,
-				  uint32_t kind_of_extent_to_operate,
+				  uint32_t extent_kind,
 				  struct m0_ext *ext)
 {
 	struct m0_composite_layer        *layer;
@@ -1502,18 +1502,16 @@ static void extent_to_be_operated(const struct m0_composite_layout *cl,
 	int                               i;
 
 	M0_UT_ASSERT(layer_idx > 0);
-	M0_UT_ASSERT(M0_IN(kind_of_extent_to_operate, (EXACT_EXISTING,
-						       NON_EXISTING,
-						       OVERLAPPING_LEFT,
-						       OVERLAPPING_RIGHT,
-						       OVERLAPPING_COMPLETE,
-						       CONTAINED_WITHIN)));
+	M0_UT_ASSERT(M0_IN(extent_kind, (EXACT_EXISTING, NON_EXISTING,
+					 OVERLAPPING_LEFT, OVERLAPPING_RIGHT,
+					 OVERLAPPING_COMPLETE,
+					 CONTAINED_WITHIN)));
 	layer = layer_find(cl, layer_idx);
-	M0_UT_ASSERT(ergo(kind_of_extent_to_operate == EXACT_EXISTING,
+	M0_UT_ASSERT(ergo(extent_kind == EXACT_EXISTING,
 			  extent_idx < layer->clr_extents_nr));
-	M0_UT_ASSERT(ergo(kind_of_extent_to_operate == NON_EXISTING,
+	M0_UT_ASSERT(ergo(extent_kind == NON_EXISTING,
 			  if_contiguous_extents == false));
-	M0_UT_ASSERT(ergo(kind_of_extent_to_operate != EXACT_EXISTING,
+	M0_UT_ASSERT(ergo(extent_kind != EXACT_EXISTING,
 			  layer->clr_extents_nr >= 3 &&
 			  layer->clr_extents_nr >= extent_idx + 1));
 	i = 0;
@@ -1532,7 +1530,7 @@ static void extent_to_be_operated(const struct m0_composite_layout *cl,
 	} m0_tl_endfor;
 	M0_UT_ASSERT(ext_idxth.e_end == ext_idx_plus_oneth.e_start);
 
-	if (kind_of_extent_to_operate == EXACT_EXISTING) {
+	if (extent_kind == EXACT_EXISTING) {
 		if (if_contiguous_extents)
 			*ext = ext_idxth;
 		else {
@@ -1541,19 +1539,19 @@ static void extent_to_be_operated(const struct m0_composite_layout *cl,
 			else
 				*ext = ext_idx_plus_oneth;
 		}
-	} else if (kind_of_extent_to_operate == NON_EXISTING) {
+	} else if (extent_kind == NON_EXISTING) {
 		M0_UT_ASSERT(!if_contiguous_extents);
 		if ((i - 1) % 2 == 0)
 			*ext = ext_idx_plus_oneth;
 		else
 			*ext = ext_idxth;
-	} else if (kind_of_extent_to_operate == OVERLAPPING_LEFT) {
+	} else if (extent_kind == OVERLAPPING_LEFT) {
 		ext->e_start = ext_idxth.e_start;
 		ext->e_end = ext_idx_plus_oneth.e_start + 1;
-	} else if (kind_of_extent_to_operate == OVERLAPPING_RIGHT) {
+	} else if (extent_kind == OVERLAPPING_RIGHT) {
 		ext->e_start = ext_idxth.e_end - 1;
 		ext->e_end = ext_idx_plus_oneth.e_end;
-	} else if (kind_of_extent_to_operate == OVERLAPPING_COMPLETE) {
+	} else if (extent_kind == OVERLAPPING_COMPLETE) {
 		if (if_contiguous_extents) {
 			ext->e_start = ext_idxth.e_start - 1;
 			ext->e_end = ext_idxth.e_end + 1;
@@ -1566,7 +1564,7 @@ static void extent_to_be_operated(const struct m0_composite_layout *cl,
 				ext->e_end = ext_idx_plus_oneth.e_end + 1;
 			}
 		}
-	} else if (kind_of_extent_to_operate == CONTAINED_WITHIN) {
+	} else if (extent_kind == CONTAINED_WITHIN) {
 		if (if_contiguous_extents) {
 			ext->e_start = ext_idxth.e_start + 2;
 			ext->e_end = ext_idxth.e_end - 2;
@@ -1595,7 +1593,7 @@ static int ext_operate(enum extent_operation eop,
 		       uint32_t layers_nr,
 		       uint32_t min_extents_nr,
 		       bool if_contiguous_extents,
-		       uint32_t kind_of_extent_to_operate,
+		       uint32_t extent_kind,
 		       uint64_t ext_state,
 		       bool failure_test)
 {
@@ -1631,18 +1629,15 @@ static int ext_operate(enum extent_operation eop,
 
 	/* Define an extent to be operated. */
 	extent_to_be_operated(cl, if_contiguous_extents, 1, 1,
-			      kind_of_extent_to_operate, &ext_to_operate);
+			      extent_kind, &ext_to_operate);
 
 	/* Define the offset to be operated. */
-	if (M0_IN(kind_of_extent_to_operate, (NON_EXISTING,
-					      EXACT_EXISTING,
-					      OVERLAPPING_LEFT,
-					      OVERLAPPING_COMPLETE,
-					      CONTAINED_WITHIN)))
+	if (M0_IN(extent_kind, (NON_EXISTING, EXACT_EXISTING,
+				OVERLAPPING_LEFT, OVERLAPPING_COMPLETE,
+				CONTAINED_WITHIN)))
 		offset_to_operate = ext_to_operate.e_start + 1;
 	else {
-		M0_UT_ASSERT(kind_of_extent_to_operate ==
-			     OVERLAPPING_RIGHT);
+		M0_UT_ASSERT(extent_kind == OVERLAPPING_RIGHT);
 		offset_to_operate = ext_to_operate.e_end - 1;
 	}
 
@@ -1655,12 +1650,14 @@ static int ext_operate(enum extent_operation eop,
 
 	if (eop == EXTENT_LOOKUP)
 		my_console_printf("\nextlist dump before ext LOOKUP "
-				  "with offset %llu\n",
+				  "with ext_kind %u, offset %llu\n",
+				  extent_kind,
 				  (unsigned long long)offset_to_operate);
 	else
 		my_console_printf("\nextlist dump before ext "
-				  "ADD/STATE_UPDATE/DELETE with \n"
+				  "ADD/STATE_UPDATE/DELETE with ext_kind %u,\n"
 				  "\text [%llu, %llu), e_state %llu\n",
+				  extent_kind,
 				  (unsigned long long)ext_to_operate.e_start,
 				  (unsigned long long)ext_to_operate.e_end,
 				  (unsigned long long)ext_state);
@@ -1672,9 +1669,8 @@ static int ext_operate(enum extent_operation eop,
 					   &layer_id_lookup,
 					   &ext_state_lookup,
 					   &sublayout_lookup);
-	if (kind_of_extent_to_operate == NON_EXISTING ||
-	    (kind_of_extent_to_operate == OVERLAPPING_LEFT &&
-	     !if_contiguous_extents))
+	if (extent_kind == NON_EXISTING || (extent_kind == OVERLAPPING_LEFT &&
+					    !if_contiguous_extents))
 		M0_UT_ASSERT(rc == -ENOENT);
 	else {
 		M0_UT_ASSERT(rc == 0);
@@ -1682,7 +1678,7 @@ static int ext_operate(enum extent_operation eop,
 		M0_UT_ASSERT(ext_state_lookup == M0_CLRES_VALID);
 		M0_UT_ASSERT(sublayout_lookup->l_id ==
 			     lid * 100 + layer_id_lookup);
-		if (kind_of_extent_to_operate == EXACT_EXISTING) {
+		if (extent_kind == EXACT_EXISTING) {
 			M0_UT_ASSERT(ext_to_operate.e_start ==
 				     ext_lookup.e_start &&
 				     ext_to_operate.e_end ==
@@ -1709,11 +1705,13 @@ static int ext_operate(enum extent_operation eop,
 						ext_state, txptr);
 		if (failure_test)
 			M0_UT_ASSERT(rc == -EINVAL);
+			//todo print rc
 		else {
 			M0_UT_ASSERT(rc == 0);
-			my_console_printf("extlist dump after ext ADD with\n"
+			my_console_printf("extlist dump after ext ADD with "
+					  "ext_kind, %u\n"
 					  "\text [%llu, %llu), "
-					  "ext_state %llu\n",
+					  "ext_state %llu\n", extent_kind,
 					  (unsigned long long)
 						ext_to_operate.e_start,
 					  (unsigned long long)
@@ -1743,11 +1741,13 @@ static int ext_operate(enum extent_operation eop,
 							 ext_state, txptr);
 		if (failure_test)
 			M0_UT_ASSERT(rc == -EINVAL);
+			//todo print rc
 		else {
 			M0_UT_ASSERT(rc == 0);
-			my_console_printf("extlist dump after ext UPDATE with\n"
+			my_console_printf("extlist dump after ext UPDATE with "
+					  "ext_kind %u\n,"
 					  "\text [%llu, %llu), "
-					  "ext_state %llu\n",
+					  "ext_state %llu\n", extent_kind,
 					  (unsigned long long)
 						ext_to_operate.e_start,
 					  (unsigned long long)
@@ -1770,8 +1770,10 @@ static int ext_operate(enum extent_operation eop,
 		rc = m0_composite_layer_ext_delete(cl, cl->cl_layers_nr - 1,
 						   &ext_to_operate, txptr);
 		M0_UT_ASSERT(rc == 0);
-		my_console_printf("extlist dump after ext DELETE with\n"
-				  " ext [%llu, %llu) \n",
+		//todo cover err cases and in failure cases, print rc
+		my_console_printf("extlist dump after ext DELETE with "
+				  "ext_kind %u\n,"
+				  "\text [%llu, %llu) \n", extent_kind,
 				  (unsigned long long)ext_to_operate.e_start,
 				  (unsigned long long)ext_to_operate.e_end);
 		extlist_dump(cl, cl->cl_layers_nr - 1);
@@ -1781,9 +1783,8 @@ static int ext_operate(enum extent_operation eop,
 						   &layer_id_lookup,
 						   &ext_state_lookup,
 						   &sublayout_lookup);
-		if (kind_of_extent_to_operate == NON_EXISTING ||
-		    (kind_of_extent_to_operate == OVERLAPPING_LEFT &&
-		     !if_contiguous_extents))
+		if (extent_kind == NON_EXISTING ||
+		    (extent_kind == OVERLAPPING_LEFT && !if_contiguous_extents))
 			M0_UT_ASSERT(rc == -ENOENT);
 		else {
 			M0_UT_ASSERT(rc == 0);
@@ -1791,6 +1792,7 @@ static int ext_operate(enum extent_operation eop,
 		}
 	}
 
+	//todo in failure case, compare the original in-mem layout
 	if (domain->ld_is_db_available) {
 		rc_tmp = m0_db_tx_commit(&tx);
 		M0_UT_ASSERT(rc_tmp == 0);
@@ -1803,11 +1805,9 @@ static int ext_operate(enum extent_operation eop,
 		composite_layout_compare(l_copy_orig, l_copy_updated, false);
 	else if (eop == EXTENT_LOOKUP)
 		composite_layout_compare(l_copy_orig, l_copy_updated, false);
-	else if (eop == EXTENT_ADD &&
-		 kind_of_extent_to_operate == EXACT_EXISTING)
+	else if (eop == EXTENT_ADD && extent_kind == EXACT_EXISTING)
 		composite_layout_compare(l_copy_orig, l_copy_updated, false);
-	else if (eop == EXTENT_DELETE &&
-		 kind_of_extent_to_operate == NON_EXISTING)
+	else if (eop == EXTENT_DELETE && extent_kind == NON_EXISTING)
 		composite_layout_compare(l_copy_orig, l_copy_updated, false);
 	else {
 		/* The following fails as expected. */
@@ -1847,13 +1847,12 @@ int test_ext_lookup_composite(uint64_t lid,
 			      uint32_t layers_nr,
 			      uint32_t min_extents_nr,
 			      bool if_contiguous_extents,
-			      uint32_t kind_of_extent_to_operate,
+			      uint32_t extent_kind,
 			      bool failure_test)
 {
 	return ext_operate(EXTENT_LOOKUP, lid, domain,
 			   layers_nr, min_extents_nr, if_contiguous_extents,
-			   kind_of_extent_to_operate, M0_CLRES_INVALID,
-			   failure_test);
+			   extent_kind, M0_CLRES_INVALID, failure_test);
 }
 
 int test_ext_add_composite(uint64_t lid,
@@ -1861,14 +1860,13 @@ int test_ext_add_composite(uint64_t lid,
 			   uint32_t layers_nr,
 			   uint32_t min_extents_nr,
 			   bool if_contiguous_extents,
-			   uint32_t kind_of_extent_to_operate,
+			   uint32_t extent_kind,
 			   uint64_t ext_state,
 			   bool failure_test)
 {
 	return ext_operate(EXTENT_ADD, lid, domain,
 			   layers_nr, min_extents_nr, if_contiguous_extents,
-			   kind_of_extent_to_operate, ext_state,
-			   failure_test);
+			   extent_kind, ext_state, failure_test);
 }
 
 int test_ext_state_update_composite(uint64_t lid,
@@ -1876,14 +1874,13 @@ int test_ext_state_update_composite(uint64_t lid,
 				    uint32_t layers_nr,
 				    uint32_t min_extents_nr,
 				    bool if_contiguous_extents,
-				    uint32_t kind_of_extent_to_operate,
+				    uint32_t extent_kind,
 				    uint64_t ext_state,
 				    bool failure_test)
 {
 	return ext_operate(EXTENT_UPDATE, lid, domain,
 			   layers_nr, min_extents_nr, if_contiguous_extents,
-			   kind_of_extent_to_operate, ext_state,
-			   failure_test);
+			   extent_kind, ext_state, failure_test);
 }
 
 int test_ext_delete_composite(uint64_t lid,
@@ -1891,427 +1888,105 @@ int test_ext_delete_composite(uint64_t lid,
 			      uint32_t layers_nr,
 			      uint32_t min_extents_nr,
 			      bool if_contiguous_extents,
-			      uint32_t kind_of_extent_to_operate,
+			      uint32_t extent_kind,
 			      bool failure_test)
 {
 	return ext_operate(EXTENT_DELETE, lid, domain,
 			   layers_nr, min_extents_nr, if_contiguous_extents,
-			   kind_of_extent_to_operate, M0_CLRES_INVALID,
-			   failure_test);
+			   extent_kind, M0_CLRES_INVALID, failure_test);
 }
 
-void test_layer_ext_ops_composite(uint64_t base_lid,
-				  struct m0_layout_domain *domain)
+static int ext_ops(uint64_t base_lid,
+		   struct m0_layout_domain *domain,
+		   enum extent_operation eop)
 {
-	uint64_t lid;
-	int      rc;
 
-	/* Test cases for extent lookup. */
-	lid = base_lid + 1;
-	rc = test_ext_lookup_composite(lid, domain, 3, 4,
-				       !CONTIGUOUS_EXTENTS, NON_EXISTING,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 2;
-	rc = test_ext_lookup_composite(lid, domain, 3, 5,
-				       CONTIGUOUS_EXTENTS, EXACT_EXISTING,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
+	uint64_t            lid;
+	bool                is_contiguous;
+	enum kind_of_extent extent_kind;
+	enum kind_of_extent extent_kind_it; /* iterator */
+	uint32_t            i;
+	int                 rc;
 
-	lid = base_lid + 3;
-	rc = test_ext_lookup_composite(lid, domain, 3, 6,
-				       !CONTIGUOUS_EXTENTS, EXACT_EXISTING,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 4;
-	rc = test_ext_lookup_composite(lid, domain, 3, 7,
-				       CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 5;
-	rc = test_ext_lookup_composite(lid, domain, 3, 8,
-				       !CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 6;
-	rc = test_ext_lookup_composite(lid, domain, 3, 9,
-				       CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 7;
-	rc = test_ext_lookup_composite(lid, domain, 4, 4,
-				       !CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
+	M0_UT_ASSERT(M0_IN(eop, (EXTENT_LOOKUP, EXTENT_ADD, EXTENT_UPDATE,
+				 EXTENT_DELETE)));
+	extent_kind_it = NON_EXISTING;
+	for (i = 0; i < KIND_OF_EXTENT_NR * 2; ++i) {
+		lid = base_lid + i;
+		is_contiguous = i % 2 ? false : true;
+		extent_kind = extent_kind_it;
 
-	lid = base_lid + 8;
-	rc = test_ext_lookup_composite(lid, domain, 4, 5,
-				       CONTIGUOUS_EXTENTS,
-				       OVERLAPPING_COMPLETE,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
+		if (i != 0 && i % 2)
+			++extent_kind_it;
 
-	lid = base_lid + 9;
-	rc = test_ext_lookup_composite(lid, domain, 4, 6,
-				       !CONTIGUOUS_EXTENTS,
-				       OVERLAPPING_COMPLETE,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
+		if (is_contiguous == true && extent_kind == NON_EXISTING)
+			/* Not a valid combination. */
+			continue;
+		if (eop == EXTENT_LOOKUP)
+			rc = test_ext_lookup_composite(lid, domain, 3, 4,
+						       is_contiguous,
+						       extent_kind,
+						       !FAILURE_TEST);
+		else if (eop == EXTENT_ADD)
+			rc = test_ext_add_composite(lid, domain, 4, 7,
+						    is_contiguous,
+						    extent_kind,
+						    M0_CLRES_VALID, //todo
+						    !FAILURE_TEST);
+		else if (eop == EXTENT_UPDATE)
+			//todo Take out composite from such fn names
+			rc = test_ext_state_update_composite(lid, domain, 5, 4,
+							     is_contiguous,
+							     extent_kind,
+							     M0_CLRES_VALID,//todo
+							     !FAILURE_TEST);
+			/* todo For failure test, use M0_CLRES_FLATTENING. And
+			 * in that case, the only success case is
+			 * !CONTIGUOUS_EXTENTS, NON_EXISTING. */
+		else if (eop == EXTENT_DELETE)
+			rc = test_ext_delete_composite(lid, domain, 4, 4,
+						       is_contiguous,
+						       extent_kind,
+						       !FAILURE_TEST);
+		M0_UT_ASSERT(rc == 0);
+	}
+	return rc;
+}
 
-	lid = base_lid + 10;
-	rc = test_ext_lookup_composite(lid, domain, 4, 7,
-				       CONTIGUOUS_EXTENTS,
-				       CONTAINED_WITHIN,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
+void test_layer_ext_ops_composite(uint64_t base_lid,
+				  struct m0_layout_domain *domain)
+{
+	uint64_t lid;
+	int      rc;
 
-	lid = base_lid + 11;
-	rc = test_ext_lookup_composite(lid, domain, 4, 8,
-				       !CONTIGUOUS_EXTENTS,
-				       CONTAINED_WITHIN,
-				       !FAILURE_TEST);
+	/* Test cases for extent lookup. */
+	rc = ext_ops(base_lid, domain, EXTENT_LOOKUP);
 	M0_UT_ASSERT(rc == 0);
 
 	/* Test cases for extent addition. */
-	lid = base_lid + 21;
-	rc = test_ext_add_composite(lid, domain, 4, 7,
-				    !CONTIGUOUS_EXTENTS, NON_EXISTING,
-				    M0_CLRES_VALID,
-				    !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 22;
-	rc = test_ext_add_composite(lid, domain, 4, 8,
-				    CONTIGUOUS_EXTENTS, EXACT_EXISTING,
-				    M0_CLRES_VALID,
-				    !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 23;
-	rc = test_ext_add_composite(lid, domain, 4, 4,
-				    !CONTIGUOUS_EXTENTS, EXACT_EXISTING,
-				    M0_CLRES_VALID,
-				    !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 24;
-	rc = test_ext_add_composite(lid, domain, 4, 5,
-				    CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
-				    M0_CLRES_VALID,
-				    !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 25;
-	rc = test_ext_add_composite(lid, domain, 4, 6,
-				    !CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
-				    M0_CLRES_VALID,
-				    !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 26;
-	rc = test_ext_add_composite(lid, domain, 4, 7,
-				    CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
-				    M0_CLRES_VALID,
-				    !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 27;
-	rc = test_ext_add_composite(lid, domain, 4, 8,
-				    CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
-				    M0_CLRES_VALID,
-				    !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 28;
-	rc = test_ext_add_composite(lid, domain, 4, 4,
-				    CONTIGUOUS_EXTENTS, OVERLAPPING_COMPLETE,
-				    M0_CLRES_VALID,
-				    !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 29;
-	rc = test_ext_add_composite(lid, domain, 4, 5,
-				    !CONTIGUOUS_EXTENTS, OVERLAPPING_COMPLETE,
-				    M0_CLRES_VALID,
-				    !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 30;
-	rc = test_ext_add_composite(lid, domain, 4, 6,
-				    CONTIGUOUS_EXTENTS, CONTAINED_WITHIN,
-				    M0_CLRES_VALID,
-				    !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 31;
-	rc = test_ext_add_composite(lid, domain, 4, 6,
-				    !CONTIGUOUS_EXTENTS, CONTAINED_WITHIN,
-				    M0_CLRES_VALID,
-				    !FAILURE_TEST);
+	rc = ext_ops(base_lid + 41, domain, EXTENT_ADD);
 	M0_UT_ASSERT(rc == 0);
 
 	//todo Add extent with the flattening state
 	//todo Cover other cases with the flattening state addition
-	lid = base_lid + 32;
+	lid = base_lid + 60;
 	rc = test_ext_add_composite(lid, domain, 4, 6,
 				    !CONTIGUOUS_EXTENTS, NON_EXISTING,
 				    M0_CLRES_FLATTENING,
 				    !FAILURE_TEST);
 	M0_UT_ASSERT(rc == 0);
 
-
 	/* Test cases for extent updation. */
-	lid = base_lid + 41;
-	rc = test_ext_state_update_composite(lid, domain, 5, 4,
-					     !CONTIGUOUS_EXTENTS,
-					     NON_EXISTING,
-					     M0_CLRES_VALID,
-					     !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 42;
-	rc = test_ext_state_update_composite(lid, domain, 5, 5,
-					     CONTIGUOUS_EXTENTS,
-					     EXACT_EXISTING,
-					     M0_CLRES_VALID,
-					     !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 43;
-	rc = test_ext_state_update_composite(lid, domain, 5, 6,
-					     !CONTIGUOUS_EXTENTS,
-					     EXACT_EXISTING,
-					     M0_CLRES_VALID,
-					     !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 44;
-	rc = test_ext_state_update_composite(lid, domain, 5, 7,
-					     CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_LEFT,
-					     M0_CLRES_VALID,
-					     !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 45;
-	rc = test_ext_state_update_composite(lid, domain, 5, 8,
-					     !CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_LEFT,
-					     M0_CLRES_VALID,
-					     !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 46;
-	rc = test_ext_state_update_composite(lid, domain, 4, 4,
-					     CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_RIGHT,
-					     M0_CLRES_VALID,
-					     !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 47;
-	rc = test_ext_state_update_composite(lid, domain, 4, 5,
-					     !CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_RIGHT,
-					     M0_CLRES_VALID,
-					     !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 48;
-	rc = test_ext_state_update_composite(lid, domain, 4, 6,
-					     CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_COMPLETE,
-					     M0_CLRES_VALID,
-					     !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 49;
-	rc = test_ext_state_update_composite(lid, domain, 4, 7,
-					     !CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_COMPLETE,
-					     M0_CLRES_VALID,
-					     !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 50;
-	rc = test_ext_state_update_composite(lid, domain, 4, 6,
-					     CONTIGUOUS_EXTENTS,
-					     CONTAINED_WITHIN,
-					     M0_CLRES_VALID,
-					     !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 51;
-	rc = test_ext_state_update_composite(lid, domain, 4, 6,
-					     !CONTIGUOUS_EXTENTS,
-					     CONTAINED_WITHIN,
-					     M0_CLRES_VALID,
-					     !FAILURE_TEST);
+	rc = ext_ops(base_lid + 81, domain, EXTENT_UPDATE);
 	M0_UT_ASSERT(rc == 0);
 
 	//todo Update extent to have the flattening state
-	lid = base_lid + 61;
-	rc = test_ext_state_update_composite(lid, domain, 5, 4,
-					     !CONTIGUOUS_EXTENTS,
-					     NON_EXISTING,
-					     M0_CLRES_FLATTENING,
-					     !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 62;
-	rc = test_ext_state_update_composite(lid, domain, 5, 5,
-					     CONTIGUOUS_EXTENTS,
-					     EXACT_EXISTING,
-					     M0_CLRES_FLATTENING,
-					     FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 63;
-	rc = test_ext_state_update_composite(lid, domain, 5, 6,
-					     !CONTIGUOUS_EXTENTS,
-					     EXACT_EXISTING,
-					     M0_CLRES_FLATTENING,
-					     FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 64;
-	rc = test_ext_state_update_composite(lid, domain, 5, 7,
-					     CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_LEFT,
-					     M0_CLRES_FLATTENING,
-					     FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 65;
-	rc = test_ext_state_update_composite(lid, domain, 5, 8,
-					     !CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_LEFT,
-					     M0_CLRES_FLATTENING,
-					     FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 66;
-	rc = test_ext_state_update_composite(lid, domain, 4, 4,
-					     CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_RIGHT,
-					     M0_CLRES_FLATTENING,
-					     FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 67;
-	rc = test_ext_state_update_composite(lid, domain, 4, 5,
-					     !CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_RIGHT,
-					     M0_CLRES_FLATTENING,
-					     FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 68;
-	rc = test_ext_state_update_composite(lid, domain, 4, 6,
-					     CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_COMPLETE,
-					     M0_CLRES_FLATTENING,
-					     FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 69;
-	rc = test_ext_state_update_composite(lid, domain, 4, 7,
-					     !CONTIGUOUS_EXTENTS,
-					     OVERLAPPING_COMPLETE,
-					     M0_CLRES_FLATTENING,
-					     FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 70;
-	rc = test_ext_state_update_composite(lid, domain, 4, 6,
-					     CONTIGUOUS_EXTENTS,
-					     CONTAINED_WITHIN,
-					     M0_CLRES_FLATTENING,
-					     FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 71;
-	rc = test_ext_state_update_composite(lid, domain, 4, 6,
-					     !CONTIGUOUS_EXTENTS,
-					     CONTAINED_WITHIN,
-					     M0_CLRES_FLATTENING,
-					     FAILURE_TEST);
+	//todo Make ext_ops() accept state and pass falttening state this time
+	rc = ext_ops(base_lid + 121, domain, EXTENT_UPDATE);
 	M0_UT_ASSERT(rc == 0);
 
 	/* Test cases for extent deletion. */
-	lid = base_lid + 81;
-	rc = test_ext_delete_composite(lid, domain, 4, 4,
-				       !CONTIGUOUS_EXTENTS, NON_EXISTING,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 82;
-	rc = test_ext_delete_composite(lid, domain, 4, 5,
-				       CONTIGUOUS_EXTENTS, EXACT_EXISTING,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 83;
-	rc = test_ext_delete_composite(lid, domain, 4, 6,
-				       !CONTIGUOUS_EXTENTS, EXACT_EXISTING,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 84;
-	rc = test_ext_delete_composite(lid, domain, 4, 7,
-				       CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 85;
-	rc = test_ext_delete_composite(lid, domain, 4, 8,
-				       !CONTIGUOUS_EXTENTS, OVERLAPPING_LEFT,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 86;
-	rc = test_ext_delete_composite(lid, domain, 4, 4,
-				       CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 87;
-	rc = test_ext_delete_composite(lid, domain, 4, 5,
-				       !CONTIGUOUS_EXTENTS, OVERLAPPING_RIGHT,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 88;
-	rc = test_ext_delete_composite(lid, domain, 4, 6,
-				       CONTIGUOUS_EXTENTS,
-				       OVERLAPPING_COMPLETE,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 89;
-	rc = test_ext_delete_composite(lid, domain, 4, 7,
-				       !CONTIGUOUS_EXTENTS,
-				       OVERLAPPING_COMPLETE,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 90;
-	rc = test_ext_delete_composite(lid, domain, 4, 6,
-				       CONTIGUOUS_EXTENTS,
-				       CONTAINED_WITHIN,
-				       !FAILURE_TEST);
-	M0_UT_ASSERT(rc == 0);
-
-	lid = base_lid + 91;
-	rc = test_ext_delete_composite(lid, domain, 4, 6,
-				       !CONTIGUOUS_EXTENTS,
-				       CONTAINED_WITHIN,
-				       !FAILURE_TEST);
+	rc = ext_ops(base_lid + 161, domain, EXTENT_DELETE);
 	M0_UT_ASSERT(rc == 0);
 }
 
diff --git a/layout/ut/composite.h b/layout/ut/composite.h
index 9d5e268..9c01ed4 100644
--- a/layout/ut/composite.h
+++ b/layout/ut/composite.h
@@ -30,13 +30,15 @@
  *
  * For example: //todo
  */
-enum {
-	NON_EXISTING,
-	EXACT_EXISTING,
-	OVERLAPPING_LEFT,
-	OVERLAPPING_RIGHT,
-	OVERLAPPING_COMPLETE,
-	CONTAINED_WITHIN
+enum kind_of_extent {
+	NON_EXISTING          = 0,
+	EXACT_EXISTING        = 1,
+	OVERLAPPING_LEFT      = 2,
+	OVERLAPPING_RIGHT     = 3,
+	OVERLAPPING_COMPLETE  = 4,
+	CONTAINED_WITHIN      = 5,
+
+	KIND_OF_EXTENT_NR
 };
 
 int test_build_composite(uint64_t lid,
-- 
1.8.3.2


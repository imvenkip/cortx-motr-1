From f752a5bf973dacb0a9e15e57e9448e63b07317b9 Mon Sep 17 00:00:00 2001
From: "trupti.patil" <trupti_patil@xyratex.com>
Date: Wed, 16 Jan 2013 17:39:30 +0530
Subject: [PATCH 055/172] Rafactoring some code from UT

---
 layout/layout_db.c         |  2 +-
 layout/layout_db.h         |  2 +-
 layout/ut/composite.c      | 48 ++--------------------------------------------
 layout/ut/layout.c         |  9 +++------
 layout/ut/layout.h         |  4 ++++
 layout/ut/layout_generic.c | 40 ++++++++++++++++++++++++++++++++++++++
 6 files changed, 51 insertions(+), 54 deletions(-)

diff --git a/layout/layout_db.c b/layout/layout_db.c
index 6b57c9e..d10e6ad 100644
--- a/layout/layout_db.c
+++ b/layout/layout_db.c
@@ -417,7 +417,7 @@ static int pair_init(struct m0_db_pair *pair,
 
 M0_INTERNAL int m0_layout_lookup(struct m0_layout_domain *dom,
 				 uint64_t lid,
-				 struct m0_layout_type *lt,
+				 const struct m0_layout_type *lt,
 				 struct m0_db_tx *tx,
 				 struct m0_db_pair *pair,
 				 struct m0_layout **out)
diff --git a/layout/layout_db.h b/layout/layout_db.h
index 8cf440b..2e9edc3 100644
--- a/layout/layout_db.h
+++ b/layout/layout_db.h
@@ -129,7 +129,7 @@ int m0_layout_delete(struct m0_layout *l, struct m0_db_tx *tx, struct m0_db_pair
  */
 M0_INTERNAL int m0_layout_lookup(struct m0_layout_domain *dom,
 				 uint64_t lid,
-				 struct m0_layout_type *lt,
+				 const struct m0_layout_type *lt,
 				 struct m0_db_tx *tx,
 				 struct m0_db_pair *pair,
 				 struct m0_layout **out);
diff --git a/layout/ut/composite.c b/layout/ut/composite.c
index 0a66633..5f7f84b 100644
--- a/layout/ut/composite.c
+++ b/layout/ut/composite.c
@@ -1568,48 +1568,6 @@ static void extent_to_be_operated(const struct m0_composite_layout *cl,
 		(unsigned long long)ext->e_end);
 #endif
 #endif
-
-}
-
-/* Wrapper that looks up for the layout object from the DB. */
-/* todo Move this to layout.c. */
-static int layout_lookup(uint64_t lid,
-			 /* todo Accept lt and make it generic. */
-			 struct m0_layout_domain *domain,
-			 bool failure_test,
-			 struct m0_layout **layout)
-{
-	struct m0_layout  *l;
-	m0_bcount_t        num_bytes;
-	void              *area;
-	struct m0_db_pair  pair;
-	struct m0_db_tx    tx;
-	int                rc_tmp;
-
-	allocate_area(domain, ADDITIONAL_BYTES_NONE, &num_bytes, &area);
-
-	rc = m0_db_tx_init(&tx, domain->ld_dbenv, DBFLAGS);
-	M0_UT_ASSERT(rc == 0);
-
-	pair_set(&pair, &lid, area, num_bytes);
-
-	rc = m0_layout_lookup(domain, lid, &m0_composite_layout_type,
-			      /* todo &m0_pdclust_layout_type, */
-			      &tx, &pair, &l);
-	if (failure_test)
-		M0_UT_ASSERT(rc == -ENOENT || rc == -ENOMEM || rc == -EPROTO ||
-			     rc == LO_DECODE_ERR);
-	else
-		M0_UT_ASSERT(rc == 0);
-
-	rc_tmp = m0_db_tx_commit(&tx);
-	M0_UT_ASSERT(rc_tmp == 0);
-
-	m0_free(area);
-
-	if (rc == 0)
-		*layout = l;
-	return rc;
 }
 
 enum extent_operation {
@@ -1817,17 +1775,15 @@ int ext_operate(enum extent_operation eop,
 	m0_layout_put(&cl->cl_base);
 	M0_UT_ASSERT(m0_layout_find(domain, lid) == NULL);
 
-#if 1
-	/* todo This part seems to have significant mem leak. */
 	/* Read the layout from the DB and compare. */
 	l_from_DB = NULL;
-	rc = layout_lookup(lid, domain, !FAILURE_TEST, &l_from_DB);
+	rc = layout_lookup(lid, domain, &m0_composite_layout_type,
+			   !FAILURE_TEST, &l_from_DB);
 	M0_UT_ASSERT(rc == 0);
 	composite_layout_compare(l_from_DB, l_copy_updated, false);
 
 	/* Release the reference incremented by m0_layout_lookup(). */
 	m0_layout_put(l_from_DB);
-#endif
 
 	composite_layout_copy_delete(l_copy_orig);
 	composite_layout_copy_delete(l_copy_updated);
diff --git a/layout/ut/layout.c b/layout/ut/layout.c
index 1fff55c..2eac1b7 100644
--- a/layout/ut/layout.c
+++ b/layout/ut/layout.c
@@ -28,7 +28,6 @@
 
 #include "layout/layout.h"
 #include "layout/layout_internal.h"      /* *_ERR */
-#include "layout/layout_db.h"            /* m0_layout_lookup() */
 #include "layout/pdclust.h"              /* m0_layout_pdclust_rec */
 #include "layout/list_enum.h"            /* cob_entries_header */
 #include "layout/linear_enum.h"          /* m0_layout_linear_attr */
@@ -1425,10 +1424,8 @@ static void test_lookup(void)
 /* Tests the API m0_layout_lookup(). */
 static void test_lookup_failure(void)
 {
-	uint64_t           lid;
-	struct m0_db_tx    tx;
-	struct m0_db_pair  pair;
-	struct m0_layout  *l;
+	uint64_t          lid;
+	struct m0_layout *l;
 
 	/*
 	 * Lookup for a layout object with LIST enum type, that does not
@@ -1479,7 +1476,7 @@ static void test_lookup_failure(void)
 		.lt_ops      = NULL
 	};
 	lid = 15005;
-	rc = m0_layout_lookup(&domain, lid, &test_layout_type, &tx, &pair, &l);
+	rc = layout_lookup(lid, &domain, &test_layout_type, FAILURE_TEST, &l);
 	M0_UT_ASSERT(rc == -EPROTO);
 
 	/*
diff --git a/layout/ut/layout.h b/layout/ut/layout.h
index 61e5b27..fad1067 100644
--- a/layout/ut/layout.h
+++ b/layout/ut/layout.h
@@ -62,6 +62,10 @@ void enum_op_verify(struct m0_layout *l, uint64_t lid,
 		    uint32_t enum_id, uint32_t nr);
 void pair_set(struct m0_db_pair *pair, uint64_t *lid,
               void *area, m0_bcount_t num_bytes);
+int layout_lookup(uint64_t lid, struct m0_layout_domain *domain,
+		  const struct m0_layout_type *lt,
+		  bool failure_test,
+		  struct m0_layout **layout);
 
 struct ghost_data {
 	uint64_t                 lid;
diff --git a/layout/ut/layout_generic.c b/layout/ut/layout_generic.c
index e33b30f..1e96ab2 100644
--- a/layout/ut/layout_generic.c
+++ b/layout/ut/layout_generic.c
@@ -26,6 +26,7 @@
 
 #include "layout/layout.h"
 #include "layout/layout_internal.h"  /* m0_layout__list_lookup() */
+#include "layout/layout_db.h"        /* m0_layout_lookup() */
 #include "layout/linear_enum.h"      /* m0_layout_linear_enum */
 
 #include "layout/ut/layout.h"
@@ -233,6 +234,45 @@ bool ghost_create(void *d)
 	return rc;
 }
 
+//todo Use this in pdclust.c
+/* Wrapper that looks up for the layout object from the DB. */
+int layout_lookup(uint64_t lid, struct m0_layout_domain *domain,
+		  const struct m0_layout_type *lt,
+		  bool failure_test,
+		  struct m0_layout **layout)
+{
+	struct m0_layout  *l;
+	m0_bcount_t        num_bytes;
+	void              *area;
+	struct m0_db_pair  pair;
+	struct m0_db_tx    tx;
+	int                rc_tmp;
+	int                rc;
+
+	allocate_area(domain, ADDITIONAL_BYTES_NONE, &num_bytes, &area);
+
+	rc = m0_db_tx_init(&tx, domain->ld_dbenv, DBFLAGS);
+	M0_UT_ASSERT(rc == 0);
+
+	pair_set(&pair, &lid, area, num_bytes);
+
+	rc = m0_layout_lookup(domain, lid, lt, &tx, &pair, &l);
+	if (failure_test)
+		M0_UT_ASSERT(rc == -ENOENT || rc == -ENOMEM || rc == -EPROTO ||
+			     rc == LO_DECODE_ERR);
+	else
+		M0_UT_ASSERT(rc == 0);
+
+	rc_tmp = m0_db_tx_commit(&tx);
+	M0_UT_ASSERT(rc_tmp == 0);
+
+	m0_free(area);
+
+	if (rc == 0)
+		*layout = l;
+	return rc;
+}
+
 /*
  *  Local variables:
  *  c-indentation-style: "K&R"
-- 
1.8.3.2


From 263c9b5991f239e3b2e698d9c9d5c1a6174026fd Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Thu, 31 Jan 2013 15:55:11 +0200
Subject: [PATCH 21/79] net-test demo (not finished yet)

---
 net/test/demo/demo-config.sh    |   8 +
 net/test/demo/demo-config.sh.in |   8 +
 net/test/demo/demo.sh           | 352 ++++++++++++++++++++++++++++++++++++++++
 net/test/demo/test.sh           |   8 +
 4 files changed, 376 insertions(+)
 create mode 100755 net/test/demo/demo-config.sh
 create mode 100644 net/test/demo/demo-config.sh.in
 create mode 100755 net/test/demo/demo.sh
 create mode 100755 net/test/demo/test.sh

diff --git a/net/test/demo/demo-config.sh b/net/test/demo/demo-config.sh
new file mode 100755
index 0000000..12dcd35
--- /dev/null
+++ b/net/test/demo/demo-config.sh
@@ -0,0 +1,8 @@
+#!/bin/bash
+
+# Kernel module -  test node
+MOD_NODE=/work/mero-master/core/net/test/linux_kernel/m0nettest.ko
+# Userspace program - test node
+CMD_NODE=/work/mero-master/core/net/test/m0nettestd.sh
+# Userspace program - test console
+CMD_CONSOLE=/work/mero-master/core/net/test/m0nettest.sh
diff --git a/net/test/demo/demo-config.sh.in b/net/test/demo/demo-config.sh.in
new file mode 100644
index 0000000..ed993f1
--- /dev/null
+++ b/net/test/demo/demo-config.sh.in
@@ -0,0 +1,8 @@
+#!/bin/bash
+
+# Kernel module -  test node
+MOD_NODE=@ABS_SRCDIR@/net/test/linux_kernel/m0nettest.ko
+# Userspace program - test node
+CMD_NODE=@ABS_SRCDIR@/net/test/m0nettestd.sh
+# Userspace program - test console
+CMD_CONSOLE=@ABS_SRCDIR@/net/test/m0nettest.sh
diff --git a/net/test/demo/demo.sh b/net/test/demo/demo.sh
new file mode 100755
index 0000000..d34023d
--- /dev/null
+++ b/net/test/demo/demo.sh
@@ -0,0 +1,352 @@
+#!/bin/bash
+set -eux
+
+# Parameters
+# Debugging
+VERBOSE=0
+
+# Hardcoded in script
+# Transfer machine ID in test will start from this number
+TMID_START=3000
+# Maximum number of test nodes (for demo)
+NODES_NR_MAX=64
+
+# LNET Network Type. First NID from lctl network list_nids are used for testing
+# NET_TYPE=o2ib
+NET_TYPE=tcp
+LNET_PID=12345
+LNET_PORTAL=42
+
+# User-supplied
+declare -a CLIENTS
+declare -a SERVERS
+declare -A NODES
+NODES_NR=0
+TEST_TYPE=
+CLIENTS_SPACE=
+SERVERS_SPACE=
+
+# Variable parameters
+MSG_NR=
+MSG_SIZE=
+CONCURRENCY_CLIENT=
+CONCURRENCY_SERVER=
+BD_BUF_SIZE=
+BD_BUF_NR=
+
+# List of parameters to test
+# MSG_SIZE_LIST="64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 \
+# 262144 524288 1048576"
+# CONCURRENCY_CLIENT_LIST="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 20 22 24 \
+# 26 28 30 32 40 48 56 64 80 96 112 128 160 192 224 256"
+MSG_SIZE_LIST="65536 524288 1048576"
+CONCURRENCY_CLIENT_LIST="4 6 8 16"
+
+# Used by script
+SCRIPT_DIR=${0%/*}
+START_TIMEOUT=1
+STOP_TIMEOUT=3
+
+TMID_CONSOLE_CLIENTS=$TMID_START
+TMID_CONSOLE_SERVERS=$(expr $TMID_START + 1)
+TMID_NODES_START=$(expr $TMID_CONSOLE_SERVERS + 1)
+NID_CONSOLE=
+
+main()
+{
+	. $SCRIPT_DIR/demo-config.sh
+	cmdline_parse "$@"
+	configuration_parse
+	lnet_prepare_console
+	for_all_nodes lnet_prepare_node
+	for_all_nodes node_configure
+	local msg_size
+	local concurrency_client
+	for msg_size in $MSG_SIZE_LIST; do
+		for concurrency_client in $CONCURRENCY_CLIENT_LIST; do
+			for_all_nodes node_run
+			sleep $START_TIMEOUT
+			data=$(console_run $msg_size $concurrency_client)
+			for_all_nodes node_stop
+			sleep $STOP_TIMEOUT
+			# for_all_nodes node_kill
+			echo $data
+		done
+	done
+}
+
+cmdline_help()
+{
+	echo -e "-?"
+	echo -e "-h\tPrint help and exit"
+	echo -e "-v\tVerbose output"
+	echo -e "-c\tComma-separated list of clients"
+	echo -e "-s\tComma-separated list of servers"
+	echo -e "-t\tTest type (ping or bulk)"
+	echo -e "-C\tClients type ('kernel' for kernel module,"
+	echo -e "  \t'user' for userspace program)."
+	echo -e "-S\tServers type (same as -C)"
+}
+
+cmdline_parse()
+{
+	OPTIND=1
+	local IFS_SAVE="$IFS"
+	while getopts "?hvc:s:t:C:S:" opt; do
+		case "$opt" in
+		h|\?)
+			cmdline_help
+			exit 0
+			;;
+		v)
+			VERBOSE=1
+			;;
+		c)
+			IFS=","
+			read -a CLIENTS <<< "$OPTARG"
+			;;
+		s)
+			IFS=","
+			read -a SERVERS <<< "$OPTARG"
+			;;
+		t)
+			TEST_TYPE="$OPTARG"
+			;;
+		C)
+			CLIENTS_SPACE="$OPTARG"
+			;;
+		S)
+			SERVERS_SPACE="$OPTARG"
+			;;
+		esac
+	done
+	IFS="$IFS_SAVE"
+	cmdline_param_check $TEST_TYPE \
+		"Test type (-t) should be 'ping' or 'bulk'" "ping" "bulk"
+	cmdline_param_check $CLIENTS_SPACE \
+		"Clients space (-C) should be 'user' or 'kernel'" \
+		"user" "kernel"
+	cmdline_param_check $SERVERS_SPACE \
+		"Servers space (-S) should be 'user' or 'kernel'" \
+		"user" "kernel"
+}
+
+# $1 - parameter value
+# $2 - error string
+# $3... - valid values
+cmdline_param_check()
+{
+	local value=$1
+	local error_string=$2
+	shift 2
+	for param in "$@"; do
+		if [ "$param" == "$value" ]; then
+			return
+		fi
+	done
+	echo "$error_string"
+	exit 1
+}
+
+# Setter and getter for node associative array
+# $1 - node index in array
+# $2 - parameter name
+# node_set(): $3 - new value
+# node_get(): returns value
+node_set()
+{
+	local index="$1_$2"
+	NODES[$index]=$3
+}
+
+node_get()
+{
+	local index="$1_$2"
+	echo "${NODES[$index]}"
+}
+
+# $1 - error string
+# $2 - error code ($?)
+exit_if_error()
+{
+	if [ "$2" -ne 0 ]; then
+		echo $1
+		perror $2
+		exit 1
+	fi
+}
+
+# $1 - node index to run
+# $2 .. - command with parameters to run
+# Note: sudo prefix will be added in this command
+node_run_remote()
+{
+	local addr=$(node_get $1 "addr")
+	shift 1
+	ssh $addr sudo "$@"
+}
+
+# see node_run_remote
+# ssh PID will be saved to "ssh_pid" for node
+node_run_remote_nowait()
+{
+	local index=$1
+	local addr=$(node_get $index "addr")
+	shift 1
+	ssh -tt $addr sudo "$@" < /dev/null &
+	node_set $index "ssh_pid" "$!"
+}
+
+# $1 .. - command to run
+# Note: sudo prefix will be added in this command
+console_run_local()
+{
+	sudo "$@"
+}
+
+configuration_parse()
+{
+	local addr
+	for addr in "${CLIENTS[@]}" "${SERVERS[@]}"; do
+		if [ "$NODES_NR" -eq "$NODES_NR_MAX" ]; then
+			echo "Too many nodes; current limit is $NODES_NR_MAX"
+			exit 1
+		fi
+		index="$NODES_NR"
+		# configure nodes
+		node_set $index "addr" $addr
+		node_set $index "tmid_cmd" \
+			$(expr $TMID_NODES_START + $NODES_NR "*" 2)
+		node_set $index "tmid_data" \
+			$(expr $TMID_NODES_START + $NODES_NR "*" 2 + 1)
+		((NODES_NR++)) || true
+	done
+	local index=0
+	for addr in "${CLIENTS[@]}"; do
+		node_set "$index" "role" "client"
+		node_set "$index" "space" "$CLIENTS_SPACE"
+		((index++)) || true
+	done
+	for addr in "${SERVERS[@]}"; do
+		node_set "$index" "role" "server"
+		node_set "$index" "space" "$SERVERS_SPACE"
+		((index++)) || true
+	done
+}
+
+# $1 - function to call.
+#      Node index will be passed to this function as first argument.
+for_all_nodes()
+{
+	local i
+	for i in $(seq 0 $(expr $NODES_NR - 1)); do
+		$1 $i
+	done
+}
+
+# modprobe lnet
+# lctl network up
+# lctl list_nids
+# $1 - address (used only for output)
+# $2 .. - how to run command
+lnet_prepare()
+{
+	local addr=$1
+	shift 1
+	[ "$VERBOSE" -eq 1 ] && echo "Setting up LNET on $addr..."
+	$@ modprobe lnet
+	exit_if_error "Error probing lnet module on $addr" $?
+	$@ lctl network up
+	exit_if_error "'sudo lctl network up' failed" $?
+}
+
+lnet_nid_get()
+{
+	$@ lctl list_nids | grep "$NET_TYPE"$ | head -n 1
+	exit_if_error "'sudo lctl list_nids' failed" $?
+}
+
+lnet_prepare_node()
+{
+	local index=$1
+	local addr=$(node_get $index "addr")
+	lnet_prepare "$addr" node_run_remote "$index"
+	local nid=$(lnet_nid_get node_run_remote "$index")
+	node_set $index "nid" $nid
+	[ "$VERBOSE" -eq 1 ] && echo "NID $nid will be used on $addr."
+}
+
+lnet_prepare_console()
+{
+	lnet_prepare "localhost" console_run_local
+	NID_CONSOLE=$(lnet_nid_get console_run_local)
+}
+
+node_configure()
+{
+	local index=$1
+	local nid=$(node_get $index "nid")
+	local tmid=$(node_get $index "tmid_cmd")
+	node_set $index "endpoint_cmd" "$nid:$LNET_PID:$LNET_PORTAL:$tmid"
+	local tmid=$(node_get $index "tmid_data")
+	node_set $index "endpoint_data" "$nid:$LNET_PID:$LNET_PORTAL:$tmid"
+	local role=$(node_get $index "role")
+	if [ "$role" == "client" ]; then
+		tmid=$TMID_CONSOLE_CLIENTS
+	else
+		tmid=$TMID_CONSOLE_SERVERS
+	fi
+	node_set $index "endpoint_console" \
+		"$NID_CONSOLE:$LNET_PID:$LNET_PORTAL:$tmid"
+}
+
+# $1 - node index
+# $2 - node commands endpoint
+# $3 - console commands endpoint
+node_run_user()
+{
+	node_run_remote_nowait $1 $CMD_NODE -a $2 -c $3
+}
+
+# see node_run_user()
+node_run_kernel()
+{
+	node_run_remote $1 modprobe $MOD_NODE "addr=$2" "addr_console=$3"
+}
+
+# $1 - index of node in NODES array
+node_run()
+{
+	local index=$1
+	local space=$(node_get $index "space")
+	local cmdline="$index \
+		       $(node_get $index "endpoint_cmd") \
+		       $(node_get $index "endpoint_console")"
+	if [ "$space" == "user" ]; then
+		node_run_user $cmdline
+	elif [ "$space" == "kernel" ]; then
+		node_run_kernel $cmdline
+	fi
+}
+
+node_stop()
+{
+	local index=$1
+	local ssh_pid=$(node_get $index "ssh_pid")
+	kill $ssh_pid || true 2> /dev/null
+	wait $ssh_pid || true 2> /dev/null
+}
+
+node_kill()
+{
+	local index=$1
+	kill -s SIGKILL $(node_get $index "ssh_pid") || true \
+		> /dev/null 2> /dev/null
+}
+
+console_run()
+{
+	echo $FUNCNAME
+}
+
+main "$@"
diff --git a/net/test/demo/test.sh b/net/test/demo/test.sh
new file mode 100755
index 0000000..2827c1b
--- /dev/null
+++ b/net/test/demo/test.sh
@@ -0,0 +1,8 @@
+#!/bin/bash
+set -eux
+
+x=1
+for i in {1..100}; do
+	let x++
+done
+echo $x
-- 
1.8.3.2


From bfb4eb1d9dbec064be5c444308e83ecfa965dcf4 Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Thu, 31 Jan 2013 16:08:38 +0200
Subject: [PATCH 26/79] removed debug UT from net-test

---
 net/test/ut/main.c    |   10 -
 net/test/ut/network.c | 1149 +------------------------------------------------
 2 files changed, 1 insertion(+), 1158 deletions(-)

diff --git a/net/test/ut/main.c b/net/test/ut/main.c
index 45e5fea..33fba69 100644
--- a/net/test/ut/main.c
+++ b/net/test/ut/main.c
@@ -43,10 +43,6 @@ extern void m0_net_test_cmd_ut_single(void);
 extern void m0_net_test_cmd_ut_multiple(void);
 extern void m0_net_test_cmd_ut_multiple2(void);
 
-extern void m0_net_test_bug_ut(void);
-extern void m0_net_test_bug2_ut(void);
-extern void m0_net_test_bug3_ut(void);
-extern void m0_net_test_debug_ut(void);
 extern void m0_net_test_client_server_stub_ut(void);
 extern void m0_net_test_client_server_ping_ut(void);
 extern void m0_net_test_client_server_bulk_ut(void);
@@ -75,12 +71,6 @@ const struct m0_test_suite m0_net_test_ut = {
 		{ "cmd-single",		m0_net_test_cmd_ut_single	  },
 		{ "cmd-multiple",	m0_net_test_cmd_ut_multiple	  },
 		{ "cmd-multiple2",	m0_net_test_cmd_ut_multiple2	  },
-		{ "debug",		m0_net_test_debug_ut		  },
-#if 0
-		{ "bug3",		m0_net_test_bug3_ut		  },
-		{ "bug2",		m0_net_test_bug2_ut		  },
-		{ "bug",		m0_net_test_bug_ut		  },
-#endif
 		{ "client-server-stub",	m0_net_test_client_server_stub_ut },
 		{ "client-server-ping",	m0_net_test_client_server_ping_ut },
 		{ "client-server-bulk",	m0_net_test_client_server_bulk_ut },
diff --git a/net/test/ut/network.c b/net/test/ut/network.c
index d312794..8d0015c 100644
--- a/net/test/ut/network.c
+++ b/net/test/ut/network.c
@@ -19,51 +19,13 @@
  */
 
 #include "lib/ut.h"		/* M0_UT_ASSERT */
+#include "lib/misc.h"		/* M0_SET0 */
 #include "lib/semaphore.h"	/* m0_semaphore */
 #include "lib/memory.h"		/* m0_alloc */
 #include "net/lnet/lnet.h"	/* m0_net_lnet_ifaces_get */
 
 #include "net/test/network.h"
 
-/* START COPY-PASTE FROM client_server.c */
-#ifdef __KERNEL__
-#include <linux/kgdb.h>
-#endif
-
-#include "lib/ut.h"			/* M0_UT_ASSERT */
-#include "lib/memory.h"			/* m0_free */
-#include "lib/thread.h"			/* M0_THREAD_INIT */
-#include "lib/semaphore.h"		/* m0_semaphore_down */
-#include "lib/misc.h"			/* M0_SET0 */
-
-#include "net/lnet/lnet.h"		/* M0_NET_LNET_PID */
-
-#include "net/test/node.h"		/* m0_net_test_node_ctx */
-#include "net/test/console.h"		/* m0_net_test_console_ctx */
-
-#ifdef __KERNEL__
-#include <linux/kgdb.h>
-#include <linux/completion.h>
-#endif
-
-#include "lib/ut.h"			/* M0_UT_ASSERT */
-#include "lib/memory.h"			/* m0_free */
-#include "lib/thread.h"			/* M0_THREAD_INIT */
-#include "lib/semaphore.h"		/* m0_semaphore_down */
-#include "lib/misc.h"			/* M0_SET0 */
-
-#include "net/lnet/lnet.h"		/* M0_NET_LNET_PID */
-
-#include "net/test/commands.h"		/* m0_net_test_commands */
-#include "net/test/node_ping.h"		/* m0_net_test_node_ping_ops */
-/* END COPY-PASTE FROM client_server.c */
-
-#ifdef NET_TEST_MODULE_NAME
-#undef NET_TEST_MODULE_NAME
-#endif
-#define NET_TEST_MODULE_NAME ut_network
-#include "net/test/debug.h"		/* LOGD */
-
 enum {
 	NET_TEST_PING_BUF_SIZE = 4096,
 	NET_TEST_PING_BUF_STEP = 511,	/** @see m0_net_test_network_ut_ping */
@@ -532,1115 +494,6 @@ void m0_net_test_network_ut_buf_desc(void)
 	m0_net_test_network_ctx_fini(&ctx);
 }
 
-/* START COPY-PASTE FROM client_server.c */
-/*
- ***********************************************************************
- ***********************************************************************
- ***********************************************************************
- ***********************************************************************
- */
-
-static void kgdb_break(void)
-{
-#ifdef __KERNEL__
-	// kgdb_breakpoint();
-#endif
-}
-
-#if 0
-#ifdef __KERNEL__
-static DECLARE_COMPLETION(client_completion);
-static DECLARE_COMPLETION(server_completion);
-#else
-static struct m0_semaphore client_completion;
-static struct m0_semaphore server_completion;
-#endif
-
-#ifdef __KERNEL__
-static void net_test_wait_for_completion(struct completion *completion)
-#else
-static void net_test_wait_for_completion(struct m0_semaphore *completion)
-#endif
-{
-#ifdef __KERNEL__
-	wait_for_completion(completion);
-#else
-	m0_semaphore_down(completion);
-#endif
-}
-
-#ifdef __KERNEL__
-static void net_test_complete(struct completion *completion)
-#else
-static void net_test_complete(struct m0_semaphore *completion)
-#endif
-{
-#ifdef __KERNEL__
-	complete(completion);
-#else
-	m0_semaphore_up(completion);
-#endif
-}
-#endif
-
-enum {
-	NTCS_PID		  = M0_NET_LNET_PID,
-	NTCS_PORTAL		  = 42,
-	NTCS_NODES_MAX		  = 128,
-	NTCS_NODE_ADDR_MAX	  = 0x100,
-	/** @todo 20min for debugging in gdb */
-	NTCS_TIMEOUT_CMD_MS	  = 1200000,
-	NTCS_TIMEOUT_SEND_MS	  = 1200000,
-	NTCS_TIMEOUT_RECV_MS	  = 1200000,
-	NTCS_TIMEOUT_BULK_MS	  = 1200000,
-	/*
-	NTCS_TIMEOUT_CMD_MS	  = 20000,
-	NTCS_TIMEOUT_SEND_MS	  = 20000,
-	NTCS_TIMEOUT_RECV_MS	  = 20000,
-	NTCS_TIMEOUT_BULK_MS	  = 20000,
-	*/
-	NTCS_TMID_CONSOLE4CLIENTS = 2998,
-	NTCS_TMID_CONSOLE4SERVERS = 2999,
-	NTCS_TMID_NODES		  = 3000,
-	NTCS_TMID_CMD_CLIENTS	  = NTCS_TMID_NODES,
-	NTCS_TMID_DATA_CLIENTS    = NTCS_TMID_NODES + NTCS_NODES_MAX * 1,
-	NTCS_TMID_CMD_SERVERS	  = NTCS_TMID_NODES + NTCS_NODES_MAX * 2,
-	NTCS_TMID_DATA_SERVERS    = NTCS_TMID_NODES + NTCS_NODES_MAX * 3,
-};
-
-static struct m0_net_test_node_cfg node_cfg[NTCS_NODES_MAX * 2];
-static struct m0_thread		   node_thread[NTCS_NODES_MAX * 2];
-static struct m0_semaphore	   node_init_sem;
-
-static char *addr_console4clients;
-static char *addr_console4servers;
-static char  clients[(NTCS_NODES_MAX + 1) * NTCS_NODE_ADDR_MAX];
-static char  servers[(NTCS_NODES_MAX + 1) * NTCS_NODE_ADDR_MAX];
-static char  clients_data[(NTCS_NODES_MAX + 1) * NTCS_NODE_ADDR_MAX];
-static char  servers_data[(NTCS_NODES_MAX + 1) * NTCS_NODE_ADDR_MAX];
-
-static m0_time_t timeout_cmd;
-static m0_time_t timeout_send;
-static m0_time_t timeout_recv;
-static m0_time_t timeout_bulk;
-
-static char *addr_get(const char *nid, int tmid)
-{
-	char  addr[NTCS_NODE_ADDR_MAX];
-	char *result;
-	int   rc;
-
-	rc = snprintf(addr, NTCS_NODE_ADDR_MAX,
-		     "%s:%d:%d:%d", nid, NTCS_PID, NTCS_PORTAL, tmid);
-	M0_UT_ASSERT(rc < NTCS_NODE_ADDR_MAX);
-
-	result = m0_alloc(rc + 1);
-	M0_UT_ASSERT(result != NULL);
-	return strncpy(result, addr, rc + 1);
-}
-
-static void addr_free(char *addr)
-{
-	m0_free(addr);
-}
-
-static m0_time_t ms2time(int ms)
-{
-	m0_time_t time;
-
-	return m0_time_set(&time,NTCS_TIMEOUT_SEND_MS / 1000,
-			   (NTCS_TIMEOUT_SEND_MS % 1000) * 1000000);
-}
-
-static void node_cfg_fill(struct m0_net_test_node_cfg *ncfg,
-			  char *addr_cmd,
-			  char *addr_cmd_list,
-			  char *addr_data,
-			  char *addr_data_list,
-			  char *addr_console,
-			  bool last_node)
-{
-	ncfg->ntnc_addr		= addr_cmd;
-	ncfg->ntnc_addr_console = addr_console;
-	ncfg->ntnc_send_timeout = timeout_cmd;
-
-	strncat(addr_cmd_list, ncfg->ntnc_addr, NTCS_NODE_ADDR_MAX);
-	strncat(addr_cmd_list, last_node ? "" : ",", 2);
-	strncat(addr_data_list, addr_data, NTCS_NODE_ADDR_MAX);
-	strncat(addr_data_list, last_node ? "" : ",", 2);
-
-	addr_free(addr_data);
-}
-
-#if 0
-static void net_test_node2(struct m0_net_test_node_cfg *node_cfg)
-{
-	struct m0_net_test_node_ctx *ctx;
-	int			     rc;
-
-	M0_PRE(node_cfg != NULL);
-
-	M0_ALLOC_PTR(ctx);
-	M0_ASSERT(ctx != NULL);
-	rc = m0_net_test_node_init(ctx, node_cfg);
-	M0_UT_ASSERT(rc == 0);
-	rc = m0_net_test_node_start(ctx);
-	M0_UT_ASSERT(rc == 0);
-	m0_semaphore_up(&node_init_sem);
-	/* wait for the test node thread */
-	m0_semaphore_down(&ctx->ntnc_thread_finished_sem);
-	m0_net_test_node_stop(ctx);
-	m0_net_test_node_fini(ctx);
-	m0_free(ctx);
-}
-#endif
-
-static void net_test_node3(struct m0_net_test_node_cfg *node_cfg)
-{
-	struct m0_net_test_cmd_ctx *cmd_ctx;
-	struct m0_net_test_cmd	   *cmd;
-	struct m0_net_test_slist    console;
-	int			    rc;
-
-	M0_ALLOC_PTR(cmd_ctx);
-	M0_ALLOC_PTR(cmd);
-	if (cmd == NULL || cmd_ctx == NULL)
-		goto done;
-	rc = m0_net_test_slist_init(&console, node_cfg->ntnc_addr_console, '`');
-	M0_UT_ASSERT(rc == 0);
-	rc = m0_net_test_commands_init(cmd_ctx, node_cfg->ntnc_addr,
-				       node_cfg->ntnc_send_timeout,
-				       NULL, &console);
-	M0_UT_ASSERT(rc == 0);
-
-	m0_semaphore_up(&node_init_sem);
-	while (cmd->ntc_type != M0_NET_TEST_CMD_STOP_DONE) {
-		rc = m0_net_test_commands_recv(cmd_ctx, cmd,
-					       m0_time_from_now(0, 25000000));
-		if (rc == -ETIMEDOUT)
-			continue;
-		M0_UT_ASSERT(rc == 0);
-		M0_UT_ASSERT(cmd->ntc_ep_index == 0);
-		rc = m0_net_test_commands_recv_enqueue(cmd_ctx,
-						       cmd->ntc_buf_index);
-		M0_UT_ASSERT(rc == 0);
-		m0_net_test_commands_received_free(cmd);
-
-		if (cmd->ntc_type == M0_NET_TEST_CMD_INIT)
-			cmd->ntc_type = M0_NET_TEST_CMD_INIT_DONE;
-		else if (cmd->ntc_type == M0_NET_TEST_CMD_STOP)
-			 cmd->ntc_type = M0_NET_TEST_CMD_STOP_DONE;
-		else {
-			M0_IMPOSSIBLE("invalid cmd type");
-		}
-		cmd->ntc_done.ntcd_errno = 0;
-		m0_net_test_commands_send_wait_all(cmd_ctx);
-		rc = m0_net_test_commands_send(cmd_ctx, cmd);
-		M0_UT_ASSERT(rc == 0);
-	}
-	m0_net_test_commands_fini(cmd_ctx);
-	m0_net_test_slist_fini(&console);
-done:
-	m0_free(cmd);
-	m0_free(cmd_ctx);
-}
-
-static void console_cmd_init_fill(struct m0_net_test_console_cfg *cfg,
-				  enum m0_net_test_role role,
-				  struct m0_net_test_cmd_init *cinit)
-{
-	cinit->ntci_role	     = role;
-	cinit->ntci_type	     = cfg->ntcc_test_type;
-	cinit->ntci_msg_nr	     = cfg->ntcc_msg_nr;
-	cinit->ntci_msg_size	     = cfg->ntcc_msg_size;
-	cinit->ntci_bd_buf_nr	     = role == M0_NET_TEST_ROLE_CLIENT ?
-				       cfg->ntcc_bd_buf_nr_client :
-				       cfg->ntcc_bd_buf_nr_server;
-	cinit->ntci_bd_buf_size	     = cfg->ntcc_bd_buf_size;
-	cinit->ntci_bd_nr_max	     = cfg->ntcc_bd_nr_max;
-	cinit->ntci_msg_concurrency  = role == M0_NET_TEST_ROLE_CLIENT ?
-				       cfg->ntcc_concurrency_client :
-				       cfg->ntcc_concurrency_server;
-	/** @todo other timeouts */
-	cinit->ntci_buf_send_timeout = cfg->ntcc_buf_send_timeout;
-	cinit->ntci_buf_bulk_timeout = cfg->ntcc_buf_bulk_timeout;
-	cinit->ntci_ep		     = role == M0_NET_TEST_ROLE_CLIENT ?
-				       cfg->ntcc_data_servers :
-				       cfg->ntcc_data_clients;
-}
-
-static void status_data_reset(struct m0_net_test_cmd_status_data *sd)
-{
-	/* Statistics reset order is not important here */
-	struct m0_net_test_msg_nr * const msg_nr[] = {
-		&sd->ntcsd_msg_nr_send,
-		&sd->ntcsd_msg_nr_recv,
-		&sd->ntcsd_bulk_nr_send,
-		&sd->ntcsd_bulk_nr_recv,
-		&sd->ntcsd_transfers,
-	};
-	struct m0_net_test_stats * const stats[] = {
-		&sd->ntcsd_mps_send.ntmps_stats,
-		&sd->ntcsd_mps_recv.ntmps_stats,
-		&sd->ntcsd_rtt,
-	};
-	size_t i;
-
-	M0_SET0(sd);
-	for (i = 0; i < ARRAY_SIZE(msg_nr); ++i)
-		m0_net_test_msg_nr_reset(msg_nr[i]);
-	for (i = 0; i < ARRAY_SIZE(stats); ++i)
-		m0_net_test_stats_reset(stats[i]);
-	sd->ntcsd_finished    = true;
-	sd->ntcsd_time_start  = M0_TIME_NEVER;
-	sd->ntcsd_time_finish = M0_MKTIME(0, 0);
-}
-
-static void status_data_add(struct m0_net_test_cmd_status_data *all_sd,
-			    const struct m0_net_test_cmd_status_data *cmd_sd)
-{
-	/* Parts of statistics are independent here, so order isn't important */
-	const struct {
-		struct m0_net_test_msg_nr	*nr_all;
-		const struct m0_net_test_msg_nr *nr_node;
-	} msg_nr[] = {
-		{	.nr_all  = &all_sd->ntcsd_msg_nr_send,
-			.nr_node = &cmd_sd->ntcsd_msg_nr_send	},
-		{	.nr_all  = &all_sd->ntcsd_msg_nr_recv,
-			.nr_node = &cmd_sd->ntcsd_msg_nr_recv	},
-		{	.nr_all  = &all_sd->ntcsd_bulk_nr_send,
-			.nr_node = &cmd_sd->ntcsd_bulk_nr_send	},
-		{	.nr_all  = &all_sd->ntcsd_bulk_nr_recv,
-			.nr_node = &cmd_sd->ntcsd_bulk_nr_recv	},
-		{	.nr_all  = &all_sd->ntcsd_transfers,
-			.nr_node = &cmd_sd->ntcsd_transfers	},
-	};
-	const struct {
-		struct m0_net_test_stats       *s_all;
-		const struct m0_net_test_stats *s_node;
-	} stats[] = {
-		{	.s_all  = &all_sd->ntcsd_mps_send.ntmps_stats,
-			.s_node = &cmd_sd->ntcsd_mps_send.ntmps_stats	},
-		{	.s_all  = &all_sd->ntcsd_mps_recv.ntmps_stats,
-			.s_node = &cmd_sd->ntcsd_mps_recv.ntmps_stats	},
-		{	.s_all  = &all_sd->ntcsd_rtt,
-			.s_node = &cmd_sd->ntcsd_rtt,			},
-	};
-	size_t i;
-
-	LOGD("new STATUS_DATA:");
-	LOGD("send total = %lu", cmd_sd->ntcsd_msg_nr_send.ntmn_total);
-	LOGD("recv total = %lu", cmd_sd->ntcsd_msg_nr_recv.ntmn_total);
-	LOGD("finished = %d", cmd_sd->ntcsd_finished);
-	LOGD("end of STATUS_DATA");
-	for (i = 0; i < ARRAY_SIZE(msg_nr); ++i)
-		m0_net_test_msg_nr_add(msg_nr[i].nr_all, msg_nr[i].nr_node);
-	for (i = 0; i < ARRAY_SIZE(stats); ++i)
-		m0_net_test_stats_add_stats(stats[i].s_all, stats[i].s_node);
-	all_sd->ntcsd_finished &= cmd_sd->ntcsd_finished;
-	if (cmd_sd->ntcsd_finished) {
-		all_sd->ntcsd_time_start = min_check(all_sd->ntcsd_time_start,
-						     cmd_sd->ntcsd_time_start);
-		all_sd->ntcsd_time_finish =
-			max_check(all_sd->ntcsd_time_finish,
-				  cmd_sd->ntcsd_time_finish);
-	}
-}
-
-static size_t net_test_console_cmd(struct m0_net_test_console_ctx *ctx,
-				   enum m0_net_test_role role,
-				   enum m0_net_test_cmd_type cmd_type)
-{
-	struct m0_net_test_console_role_ctx *rctx;
-	struct m0_net_test_console_cfg	    *cfg;
-	struct m0_net_test_cmd_ctx	    *cmd_ctx;
-	struct m0_net_test_cmd		    *cmd;
-	struct m0_net_test_cmd_status_data  *sd = NULL;
-	int				     i;
-	int				     j;
-	int				     rc;
-	struct m0_net_test_slist	    *nodes;
-	struct m0_net_test_slist	    *nodes_data;
-	bool				     role_client;
-	m0_time_t			     deadline;
-	size_t				     success_nr = 0;
-	size_t				     failures_nr = 0;
-	size_t				     rcvd_nr = 0;
-	enum m0_net_test_cmd_type	     answer[] = {
-		[M0_NET_TEST_CMD_INIT]	 = M0_NET_TEST_CMD_INIT_DONE,
-		[M0_NET_TEST_CMD_START]	 = M0_NET_TEST_CMD_START_DONE,
-		[M0_NET_TEST_CMD_STOP]	 = M0_NET_TEST_CMD_STOP_DONE,
-		[M0_NET_TEST_CMD_STATUS] = M0_NET_TEST_CMD_STATUS_DATA,
-	};
-
-	M0_PRE(ctx != NULL);
-	M0_PRE(role == M0_NET_TEST_ROLE_SERVER ||
-	       role == M0_NET_TEST_ROLE_CLIENT);
-	M0_PRE(cmd_type == M0_NET_TEST_CMD_INIT ||
-	       cmd_type == M0_NET_TEST_CMD_START ||
-	       cmd_type == M0_NET_TEST_CMD_STOP ||
-	       cmd_type == M0_NET_TEST_CMD_STATUS);
-
-	M0_ALLOC_PTR(cmd);
-	if (cmd == NULL) {
-		rc = -ENOMEM;
-		goto done;
-	}
-	cfg = ctx->ntcc_cfg;
-
-	if (cmd_type == M0_NET_TEST_CMD_INIT)
-		console_cmd_init_fill(cfg, role, &cmd->ntc_init);
-
-	role_client   = role == M0_NET_TEST_ROLE_CLIENT;
-	cmd->ntc_type = cmd_type;
-	nodes	      = role_client ? &cfg->ntcc_clients : &cfg->ntcc_servers;
-	nodes_data    = role_client ? &cfg->ntcc_data_clients :
-				      &cfg->ntcc_data_servers;
-	rctx	      = role_client ? &ctx->ntcc_clients : &ctx->ntcc_servers;
-	cmd_ctx	      = rctx->ntcrc_cmd;
-
-	/* clear commands receive queue */
-	while ((rc = m0_net_test_commands_recv(cmd_ctx, cmd, m0_time_now())) !=
-	       -ETIMEDOUT) {
-		/*
-		 * Exit from this loop after nodes->ntsl_nr failures.
-		 * It will prevent from infinite loop if after every
-		 * m0_net_test_commands_recv_enqueue() will be
-		 * unsuccessful m0_net_test_commands_recv().
-		 */
-		failures_nr += rc != 0;
-		if (failures_nr > nodes->ntsl_nr)
-			break;
-		rc = m0_net_test_commands_recv_enqueue(cmd_ctx,
-						       cmd->ntc_buf_index);
-		/** @todo rc != 0 is lost here */
-		m0_net_test_commands_received_free(cmd);
-	}
-	LOGD("send all commands");
-	/* send all commands */
-	for (i = 0; i < nodes->ntsl_nr; ++i) {
-		if (cmd_type == M0_NET_TEST_CMD_INIT)
-			cmd->ntc_init.ntci_tm_ep = nodes_data->ntsl_list[i];
-		cmd->ntc_ep_index     = i;
-		rctx->ntcrc_errno[i] = m0_net_test_commands_send(cmd_ctx, cmd);
-	}
-	LOGD("m0_net_test_commands_send_wait_all(cmd_ctx);");
-	m0_net_test_commands_send_wait_all(cmd_ctx);
-	LOGD("done.");
-
-	/* receive answers */
-	if (answer[cmd_type] == M0_NET_TEST_CMD_STATUS_DATA) {
-		sd = rctx->ntcrc_sd;
-		status_data_reset(sd);
-	}
-	deadline = m0_time_add(m0_time_now(), cfg->ntcc_cmd_recv_timeout);
-	while (m0_time_now() <= deadline && rcvd_nr < nodes->ntsl_nr) {
-		LOGD("rc = m0_net_test_commands_recv(cmd_ctx, cmd, "
-		     "deadline = %lu); now = %lu",
-		     (long unsigned int) deadline,
-		     (long unsigned int) m0_time_now());
-		rc = m0_net_test_commands_recv(cmd_ctx, cmd, deadline);
-		LOGD("done. rc = %d", rc);
-		/* deadline reached */
-		if (rc == -ETIMEDOUT)
-			break;
-		/** @todo possible spinlock if all recv fails instantly? */
-		if (rc != 0)
-			continue;
-		rcvd_nr++;
-		LOGD("reject unknown sender");
-		/* reject unknown sender */
-		j = cmd->ntc_ep_index;
-		if (j < 0)
-			goto reuse_cmd;
-		LOGD("reject unexpected command type");
-		/* reject unexpected command type */
-		if (cmd->ntc_type != answer[cmd_type])
-			goto reuse_cmd;
-		/*
-		 * reject command from node, which can't have outgoing cmd
-		 * because m0_net_test_commands_send() to this node failed.
-		 */
-		LOGD("reject 3");
-		M0_ASSERT(j >= 0 && j < nodes->ntsl_nr);
-		if (rctx->ntcrc_errno[j] != 0)
-			goto reuse_cmd;
-		/* handle incoming command */
-		LOGD("handle incoming cmd");
-		if (answer[cmd_type] == M0_NET_TEST_CMD_STATUS_DATA) {
-			status_data_add(sd, &cmd->ntc_status_data);
-			success_nr++;
-		} else {
-			rctx->ntcrc_status[j] = cmd->ntc_done.ntcd_errno;
-			if (rctx->ntcrc_status[j] == 0)
-				success_nr++;
-		}
-		/*
-		 * @todo console user can't recover from this error -
-		 * cmd->ntc_buf_index is lost. use ringbuf to save?
-		 */
-reuse_cmd:
-		LOGD("m0_net_test_commands_recv_enqueue()");
-		rc = m0_net_test_commands_recv_enqueue(cmd_ctx,
-						       cmd->ntc_buf_index);
-		LOGD("m0_net_test_commands_recv_enqueue() done.");
-		if (j != -1) {
-			M0_ASSERT(j >= 0 && j < nodes->ntsl_nr);
-			rctx->ntcrc_errno[j] = rc;
-		}
-		LOGD("m0_net_test_commands_received_free()");
-		m0_net_test_commands_received_free(cmd);
-		LOGD("m0_net_test_commands_received_free() done.");
-	}
-
-done:
-	m0_free(cmd);
-	LOGD("console: rc = %d", rc);
-
-	return success_nr;
-}
-
-void m0_net_test_bug_ut(void)
-{
-	struct m0_net_test_console_cfg *console_cfg;
-	struct m0_net_test_console_ctx *console;
-	int				rc;
-	int				i;
-	const char		       *nid = "0@lo";
-	enum m0_net_test_type		type = M0_NET_TEST_TYPE_STUB;
-	size_t				clients_nr = 1;
-	size_t				servers_nr = 1;
-	size_t				concurrency_client = 1;
-	size_t				concurrency_server = 1;
-	size_t				msg_nr = 1;
-	m0_bcount_t			msg_size = 1;
-	size_t				bd_buf_nr_client = 0;
-	size_t				bd_buf_nr_server = 0;
-	m0_bcount_t			bd_buf_size = 0;
-	size_t				bd_nr_max = 0;
-
-	kgdb_break();
-
-	M0_PRE(clients_nr <= NTCS_NODES_MAX);
-	M0_PRE(servers_nr <= NTCS_NODES_MAX);
-
-	M0_ALLOC_PTR(console_cfg);
-	M0_ALLOC_PTR(console);
-	if (console_cfg == NULL || console == NULL)
-		goto done;
-	/* prepare config for test clients and test servers */
-	timeout_cmd  = ms2time(NTCS_TIMEOUT_CMD_MS);
-	timeout_send = ms2time(NTCS_TIMEOUT_SEND_MS);
-	timeout_recv = ms2time(NTCS_TIMEOUT_RECV_MS);
-	timeout_bulk = ms2time(NTCS_TIMEOUT_BULK_MS);
-	addr_console4clients = addr_get(nid, NTCS_TMID_CONSOLE4CLIENTS);
-	addr_console4servers = addr_get(nid, NTCS_TMID_CONSOLE4SERVERS);
-	clients[0] = '\0';
-	clients_data[0] = '\0';
-	for (i = 0; i < clients_nr; ++i) {
-		node_cfg_fill(&node_cfg[i],
-			      addr_get(nid, NTCS_TMID_CMD_CLIENTS + i), clients,
-			      addr_get(nid, NTCS_TMID_DATA_CLIENTS + i),
-			      clients_data, addr_console4clients,
-			      i == clients_nr - 1);
-	}
-	servers[0] = '\0';
-	servers_data[0] = '\0';
-	for (i = 0; i < servers_nr; ++i) {
-		node_cfg_fill(&node_cfg[clients_nr + i],
-			      addr_get(nid, NTCS_TMID_CMD_SERVERS + i), servers,
-			      addr_get(nid, NTCS_TMID_DATA_SERVERS + i),
-			      servers_data, addr_console4servers,
-			      i == servers_nr - 1);
-	}
-	/* spawn test clients and test servers */
-	m0_semaphore_init(&node_init_sem, 0);
-	for (i = 0; i < clients_nr + servers_nr; ++i) {
-		rc = M0_THREAD_INIT(&node_thread[i],
-				    struct m0_net_test_node_cfg *,
-				    NULL, &net_test_node3, &node_cfg[i],
-				    "ut_node_thread#%d", i);
-		M0_UT_ASSERT(rc == 0);
-	}
-	/* wait until test node started */
-	for (i = 0; i < clients_nr + servers_nr; ++i)
-		m0_semaphore_down(&node_init_sem);
-	m0_semaphore_fini(&node_init_sem);
-	/* prepare console config */
-	console_cfg->ntcc_addr_console4servers = addr_console4servers;
-	console_cfg->ntcc_addr_console4clients = addr_console4clients;
-	rc = m0_net_test_slist_init(&console_cfg->ntcc_clients, clients, ',');
-	M0_UT_ASSERT(rc == 0);
-	rc = m0_net_test_slist_init(&console_cfg->ntcc_servers, servers, ',');
-	M0_UT_ASSERT(rc == 0);
-	rc = m0_net_test_slist_init(&console_cfg->ntcc_data_clients,
-				    clients_data, ',');
-	M0_UT_ASSERT(rc == 0);
-	rc = m0_net_test_slist_init(&console_cfg->ntcc_data_servers,
-				    servers_data, ',');
-	M0_UT_ASSERT(rc == 0);
-	console_cfg->ntcc_cmd_send_timeout   = timeout_cmd;
-	console_cfg->ntcc_cmd_recv_timeout   = timeout_cmd;
-	console_cfg->ntcc_buf_send_timeout   = timeout_send;
-	console_cfg->ntcc_buf_recv_timeout   = timeout_recv;
-	console_cfg->ntcc_buf_bulk_timeout   = timeout_bulk;
-	console_cfg->ntcc_test_type	     = type;
-	console_cfg->ntcc_msg_nr	     = msg_nr;
-	console_cfg->ntcc_msg_size	     = msg_size;
-	console_cfg->ntcc_bd_buf_nr_server   = bd_buf_nr_server;
-	console_cfg->ntcc_bd_buf_nr_client   = bd_buf_nr_client;
-	console_cfg->ntcc_bd_buf_size	     = bd_buf_size;
-	console_cfg->ntcc_bd_nr_max	     = bd_nr_max;
-	console_cfg->ntcc_concurrency_server = concurrency_server;
-	console_cfg->ntcc_concurrency_client = concurrency_client;
-	/* initialize console */
-	LOGD("console init");
-	rc = m0_net_test_console_init(console, console_cfg);
-	M0_UT_ASSERT(rc == 0);
-	/* send INIT to the test servers */
-	LOGD("sending INIT to the test servers");
-	rc = net_test_console_cmd(console, M0_NET_TEST_ROLE_SERVER,
-				     M0_NET_TEST_CMD_INIT);
-	M0_UT_ASSERT(rc == servers_nr);
-	/* send INIT to the test clients */
-	LOGD("sending INIT to the test clients");
-	rc = net_test_console_cmd(console, M0_NET_TEST_ROLE_CLIENT,
-				     M0_NET_TEST_CMD_INIT);
-	M0_UT_ASSERT(rc == clients_nr);
-	/* send STOP command to the test clients */
-	LOGD("sending STOP to the test clients");
-	rc = net_test_console_cmd(console, M0_NET_TEST_ROLE_CLIENT,
-				     M0_NET_TEST_CMD_STOP);
-	M0_UT_ASSERT(rc == clients_nr);
-	/* send STOP command to the test servers */
-	LOGD("sending STOP to the test servers");
-	rc = net_test_console_cmd(console, M0_NET_TEST_ROLE_SERVER,
-				     M0_NET_TEST_CMD_STOP);
-	M0_UT_ASSERT(rc == servers_nr);
-	/* finalize console */
-	m0_net_test_console_fini(console);
-	m0_net_test_slist_fini(&console_cfg->ntcc_servers);
-	m0_net_test_slist_fini(&console_cfg->ntcc_clients);
-	m0_net_test_slist_fini(&console_cfg->ntcc_data_servers);
-	m0_net_test_slist_fini(&console_cfg->ntcc_data_clients);
-	/* finalize test clients and test servers */
-	for (i = 0; i < clients_nr + servers_nr; ++i) {
-		rc = m0_thread_join(&node_thread[i]);
-		M0_UT_ASSERT(rc == 0);
-		m0_thread_fini(&node_thread[i]);
-		addr_free(node_cfg[i].ntnc_addr);
-	}
-	addr_free(addr_console4servers);
-	addr_free(addr_console4clients);
-done:
-	m0_free(console);
-	m0_free(console_cfg);
-}
-
-/* END COPY-PASTE FROM client_server.c */
-
-enum {
-	BUG2_NODES_NR = 3,
-	CMD_NR	      = 3,
-	DEADLINE_S    = 10,
-};
-
-struct bug2_node {
-	struct m0_semaphore	    bn_sem_init;
-	struct m0_semaphore	    bn_sem_init2;
-	char			   *bn_tm_addr;
-	struct m0_thread	    bn_thread;
-	struct m0_net_test_cmd_ctx  bn_cmd;
-};
-
-static struct bug2_node nodes[BUG2_NODES_NR];
-
-#if 0
-static void bug2_node_main(struct bug2_node *node)
-{
-	struct m0_net_test_cmd cmd;
-	int		       cmd_rcvd = 0;
-	int		       rc;
-
-	while (cmd_rcvd != CMD_NR) {
-		rc = m0_net_test_commands_recv(&node->bn_cmd, &cmd,
-					       m0_time_from_now(0, 25000000));
-		if (rc == -ETIMEDOUT)
-			continue;
-		/*
-		LOGD("node: received");
-		*/
-		M0_ASSERT(rc == 0);
-		M0_ASSERT(cmd.ntc_ep_index == 0);
-		rc = m0_net_test_commands_recv_enqueue(&node->bn_cmd,
-						       cmd.ntc_buf_index);
-		M0_ASSERT(rc == 0);
-		m0_net_test_commands_send_wait_all(&node->bn_cmd);
-		rc = m0_net_test_commands_send(&node->bn_cmd, &cmd);
-		/*
-		LOGD("node: sent");
-		*/
-		M0_ASSERT(rc == 0);
-		m0_net_test_commands_received_free(&cmd);
-		++cmd_rcvd;
-	}
-}
-#endif
-
-static void bug2_console_main(struct bug2_node *node)
-{
-	struct m0_net_test_cmd cmd;
-	int		       cmd_sent = 0;
-	int		       cmd_rcvd;
-	int		       i;
-	m0_time_t	       deadline;
-	int		       rc;
-
-	M0_SET0(&cmd);
-	while (cmd_sent != CMD_NR) {
-		m0_net_test_commands_send_wait_all(&node->bn_cmd);
-		for (i = 1; i < ARRAY_SIZE(nodes); ++i) {
-			cmd.ntc_ep_index = i - 1;
-			switch (cmd_sent) {
-			case 0:
-				cmd.ntc_type = M0_NET_TEST_CMD_INIT;
-				cmd.ntc_init.ntci_tm_ep = "tm_ep";
-				cmd.ntc_init.ntci_type = M0_NET_TEST_TYPE_STUB;
-				break;
-			case 1:
-				cmd.ntc_type = M0_NET_TEST_CMD_START;
-				break;
-			case CMD_NR - 1:
-				cmd.ntc_type = M0_NET_TEST_CMD_STOP;
-				break;
-			default:
-				cmd.ntc_type = M0_NET_TEST_CMD_STATUS;
-			}
-			rc = m0_net_test_commands_send(&node->bn_cmd, &cmd);
-			M0_ASSERT(rc == 0);
-		}
-		m0_net_test_commands_send_wait_all(&node->bn_cmd);
-		LOGD("console: sent to all");
-		cmd_rcvd = 0;
-		deadline = m0_time_from_now(DEADLINE_S, 0);
-		while (cmd_rcvd != ARRAY_SIZE(nodes) - 1
-		       && m0_time_now() <= deadline) {
-			rc = m0_net_test_commands_recv(&node->bn_cmd, &cmd,
-						       deadline);
-			M0_ASSERT(rc == 0);
-			LOGD("console: received");
-			rc = m0_net_test_commands_recv_enqueue(&node->bn_cmd,
-							cmd.ntc_buf_index);
-			M0_ASSERT(rc == 0);
-			++cmd_rcvd;
-			m0_net_test_commands_received_free(&cmd);
-		}
-		M0_ASSERT(cmd_rcvd == ARRAY_SIZE(nodes) - 1);
-		++cmd_sent;
-	}
-}
-
-#if 0
-static void bug2_node_thread(struct bug2_node *node)
-{
-	struct m0_net_test_slist endpoints;
-	static char		 buf[BUG2_NODES_NR * NTCS_NODE_ADDR_MAX];
-	int			 rc;
-	bool			 console_thread = node == &nodes[0];
-	int			 i;
-
-	if (console_thread) {
-		buf[0] = '\0';
-		for (i = 1; i < ARRAY_SIZE(nodes); ++i) {
-			strncat(buf, nodes[i].bn_tm_addr, ARRAY_SIZE(buf));
-			if (i != ARRAY_SIZE(nodes) - 1)
-				strncat(buf, ",", ARRAY_SIZE(buf));
-		}
-		buf[ARRAY_SIZE(buf) - 1] = '\0';
-		rc = m0_net_test_slist_init(&endpoints, buf, ',');
-		M0_ASSERT(rc == 0);
-	} else {
-		rc = m0_net_test_slist_init(&endpoints,
-					    nodes[0].bn_tm_addr, '`');
-		M0_ASSERT(rc == 0);
-	}
-	rc = m0_net_test_commands_init(&node->bn_cmd, node->bn_tm_addr,
-				       M0_MKTIME(DEADLINE_S, 0),
-				       NULL, &endpoints);
-	M0_ASSERT(rc == 0);
-	/* barrier with main thread */
-	m0_semaphore_up(&node->bn_sem_init);
-	m0_semaphore_down(&node->bn_sem_init2);
-
-	if (console_thread) {
-		bug2_console_main(node);
-	} else {
-		bug2_node_main(node);
-	}
-
-	m0_net_test_commands_fini(&node->bn_cmd);
-	m0_net_test_slist_fini(&endpoints);
-}
-#endif
-
-#if 0
-static int node_cmd_get(struct m0_net_test_cmd_ctx *cmd_ctx,
-			struct m0_net_test_cmd *cmd,
-			m0_time_t deadline)
-{
-	int rc = m0_net_test_commands_recv(cmd_ctx, cmd, deadline);
-	if (rc == 0)
-		rc = m0_net_test_commands_recv_enqueue(cmd_ctx,
-						       cmd->ntc_buf_index);
-	if (rc == 0) {
-		LOGD("node_cmd_get: rc = %d", rc);
-		LOGD("node_cmd_get: cmd->ntc_type = %d", cmd->ntc_type);
-		LOGD("node_cmd_get: cmd->ntc_init.ntci_msg_nr = %lu",
-		     (unsigned long) cmd->ntc_init.ntci_msg_nr);
-	}
-	return rc;
-}
-#endif
-
-static void node_thread_func(struct m0_net_test_node_ctx *ctx)
-{
-	struct m0_net_test_cmd *cmd;
-	struct m0_net_test_cmd *reply;
-	int			rc;
-
-	M0_PRE(ctx != NULL);
-
-	M0_ALLOC_PTR(cmd);
-	M0_ALLOC_PTR(reply);
-	if (cmd == NULL || reply == NULL) {
-		rc = -ENOMEM;
-		goto done;
-	}
-
-#if 0
-	/* wait for INIT command */
-	do {
-		deadline = m0_time_from_now(0, 20000000);
-		rc = node_cmd_get(&ctx->ntnc_cmd, cmd, deadline);
-		if (rc != 0 && rc != -ETIMEDOUT)
-			break;
-	} while (!(rc == 0 && cmd->ntc_type == M0_NET_TEST_CMD_INIT) &&
-		 !ctx->ntnc_exit_flag);
-	ctx->ntnc_errno = rc;
-	if (ctx->ntnc_exit_flag) {
-		m0_net_test_commands_received_free(cmd);
-		goto done;
-	}
-	if (ctx->ntnc_errno != 0)
-		goto done;
-	/* handle INIT command inside main loop */
-	skip_cmd_get = true;
-	/* start main loop */
-#endif
-	rc = 0;
-	do {
-		/* get command */
-		rc = m0_net_test_commands_recv(&ctx->ntnc_cmd, cmd,
-					       m0_time_from_now(0, 25000000));
-					       // m0_time_now());
-		if (rc == 0)
-			rc = m0_net_test_commands_recv_enqueue(&ctx->ntnc_cmd,
-							cmd->ntc_buf_index);
-		if (rc == 0 && cmd->ntc_ep_index >= 0) {
-			LOGD("node_thread: have command");
-			/* we have command. handle it */
-			if (cmd->ntc_type == M0_NET_TEST_CMD_STOP)
-				ctx->ntnc_exit_flag = true;
-			reply->ntc_type = M0_NET_TEST_CMD_INIT_DONE;
-			reply->ntc_done.ntcd_errno = 0;
-			reply->ntc_ep_index = cmd->ntc_ep_index;
-			m0_net_test_commands_received_free(cmd);
-			/* send reply */
-			m0_net_test_commands_send_wait_all(&ctx->ntnc_cmd);
-			rc = m0_net_test_commands_send(&ctx->ntnc_cmd, reply);
-			M0_SET0(cmd);
-		} else if (rc == -ETIMEDOUT) {
-			rc = 0;
-		} else {
-			break;
-		}
-	} while (!ctx->ntnc_exit_flag && rc == 0);
-done:
-	m0_free(cmd);
-	m0_free(reply);
-	LOGD("rc = %d", rc);
-	ctx->ntnc_errno = rc;
-	m0_semaphore_up(&ctx->ntnc_thread_finished_sem);
-}
-
-static void bug2_node_thread2(struct bug2_node *node)
-{
-	struct m0_net_test_node_ctx *ctx;
-	struct m0_net_test_node_cfg *cfg;
-	struct m0_net_test_slist     ep_list;
-	int			     rc;
-
-	/* init */
-	M0_ALLOC_PTR(ctx);
-	M0_UT_ASSERT(ctx != NULL);
-	M0_ALLOC_PTR(cfg);
-	M0_UT_ASSERT(cfg != NULL);
-	cfg->ntnc_addr	       = node->bn_tm_addr;
-	cfg->ntnc_addr_console = nodes[0].bn_tm_addr;
-	cfg->ntnc_send_timeout = ms2time(NTCS_TIMEOUT_CMD_MS);
-	rc = m0_net_test_slist_init(&ep_list, cfg->ntnc_addr_console, '`');
-	M0_UT_ASSERT(rc == 0);
-	rc = m0_net_test_commands_init(&ctx->ntnc_cmd, cfg->ntnc_addr,
-				       cfg->ntnc_send_timeout, NULL, &ep_list);
-	M0_UT_ASSERT(rc == 0);
-	m0_net_test_slist_fini(&ep_list);
-	rc = m0_semaphore_init(&ctx->ntnc_thread_finished_sem, 0);
-	M0_UT_ASSERT(rc == 0);
-	ctx->ntnc_exit_flag = false;
-	ctx->ntnc_errno = 0;
-	/* start */
-	rc = M0_THREAD_INIT(&ctx->ntnc_thread, struct m0_net_test_node_ctx *,
-			    NULL, &node_thread_func, ctx,
-			    "net_test_node_thread");
-	M0_UT_ASSERT(rc == 0);
-	/* barrier with main thread */
-	m0_semaphore_up(&node->bn_sem_init);
-	m0_semaphore_down(&node->bn_sem_init2);
-	/* stop */
-	m0_semaphore_down(&ctx->ntnc_thread_finished_sem);
-	ctx->ntnc_exit_flag = true;
-	m0_net_test_commands_send_wait_all(&ctx->ntnc_cmd);
-	rc = m0_thread_join(&ctx->ntnc_thread);
-	M0_UT_ASSERT(rc == 0);
-	/* fini */
-	m0_thread_fini(&ctx->ntnc_thread);
-	m0_semaphore_fini(&ctx->ntnc_thread_finished_sem);
-	m0_net_test_commands_fini(&ctx->ntnc_cmd);
-	m0_free(cfg);
-	m0_free(ctx);
-}
-
-static void bug2_console_thread2(struct bug2_node *node)
-{
-	struct m0_net_test_slist endpoints;
-	static char		 buf[BUG2_NODES_NR * NTCS_NODE_ADDR_MAX];
-	int			 rc;
-	int			 i;
-
-	buf[0] = '\0';
-	for (i = 1; i < ARRAY_SIZE(nodes); ++i) {
-		strncat(buf, nodes[i].bn_tm_addr, ARRAY_SIZE(buf));
-		if (i != ARRAY_SIZE(nodes) - 1)
-			strncat(buf, ",", ARRAY_SIZE(buf));
-	}
-	buf[ARRAY_SIZE(buf) - 1] = '\0';
-	rc = m0_net_test_slist_init(&endpoints, buf, ',');
-	M0_ASSERT(rc == 0);
-	rc = m0_net_test_commands_init(&node->bn_cmd, node->bn_tm_addr,
-				       M0_MKTIME(DEADLINE_S, 0),
-				       NULL, &endpoints);
-	M0_ASSERT(rc == 0);
-	/* barrier with main thread */
-	m0_semaphore_up(&node->bn_sem_init);
-	m0_semaphore_down(&node->bn_sem_init2);
-
-	bug2_console_main(node);
-	m0_net_test_commands_fini(&node->bn_cmd);
-	m0_net_test_slist_fini(&endpoints);
-}
-
-/* main thread */
-void m0_net_test_bug2_ut(void)
-{
-	const char	 *nid = "0@lo";
-	const int	  tmid_start = 2000;
-	struct bug2_node *node;
-	size_t		  i;
-	int		  rc;
-
-	/* console is node #0 */
-	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
-		node = &nodes[i];
-		rc = m0_semaphore_init(&node->bn_sem_init, 0);
-		M0_ASSERT(rc == 0);
-		rc = m0_semaphore_init(&node->bn_sem_init2, 0);
-		M0_ASSERT(rc == 0);
-		node->bn_tm_addr = addr_get(nid, tmid_start + i);
-		M0_ASSERT(node->bn_tm_addr != NULL);
-	}
-	/* start threads */
-	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
-		node = &nodes[i];
-		rc = M0_THREAD_INIT(&node->bn_thread, struct bug2_node *, NULL,
-				    i == 0 ? &bug2_console_thread2 :
-					     &bug2_node_thread2,
-				    node, "#%dbug2_%s", (int) i,
-				    i == 0 ? "console" : "node");
-		M0_ASSERT(rc == 0);
-	}
-	/* barrier with node threads */
-	for (i = 0; i < ARRAY_SIZE(nodes); ++i)
-		m0_semaphore_down(&nodes[i].bn_sem_init);
-	for (i = 0; i < ARRAY_SIZE(nodes); ++i)
-		m0_semaphore_up(&nodes[i].bn_sem_init2);
-	/* stop threads */
-	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
-		node = &nodes[i];
-		rc = m0_thread_join(&node->bn_thread);
-		M0_ASSERT(rc == 0);
-		m0_thread_fini(&node->bn_thread);
-	}
-	/* fini nodes */
-	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
-		node = &nodes[i];
-		m0_semaphore_fini(&node->bn_sem_init2);
-		m0_semaphore_fini(&node->bn_sem_init);
-		m0_free(node->bn_tm_addr);
-	}
-}
-
-enum {
-	THREAD_NR = 2,
-};
-
-struct sem_test {
-	struct m0_thread    st_thread;
-	struct m0_semaphore st_sem;
-};
-
-static struct sem_test sem_tests[THREAD_NR];
-
-static void sem_test_thread(struct sem_test *test)
-{
-	while (!m0_semaphore_timeddown(&test->st_sem, m0_time_now()))
-		;
-}
-
-void m0_net_test_bug3_ut(void)
-{
-	struct sem_test *test;
-	size_t		 i;
-	int		 rc;
-
-	/* start threads */
-	for (i = 0; i < ARRAY_SIZE(sem_tests); ++i) {
-		test = &sem_tests[i];
-		rc = M0_THREAD_INIT(&test->st_thread, struct sem_test *, NULL,
-				    &sem_test_thread,
-				    test, "#%dbug3_thread", (int) i);
-		M0_ASSERT(rc == 0);
-		rc = m0_semaphore_init(&test->st_sem, 0);
-		M0_ASSERT(rc == 0);
-	}
-	/* up() all semaphores after 1s */
-	m0_nanosleep(M0_MKTIME(1, 0), NULL);
-	for (i = 0; i < ARRAY_SIZE(sem_tests); ++i)
-		m0_semaphore_up(&sem_tests[i].st_sem);
-	/* stop threads */
-	for (i = 0; i < ARRAY_SIZE(sem_tests); ++i) {
-		test = &sem_tests[i];
-		rc = m0_thread_join(&test->st_thread);
-		M0_ASSERT(rc == 0);
-		m0_thread_fini(&test->st_thread);
-		m0_semaphore_fini(&test->st_sem);
-	}
-}
-
-#include "net/test/stats.h"		/* m0_net_test_stats */
-#include "lib/trace.h"			/* M0_LOG */
-
-enum {
-	SAMPLE_SIZE = 0x100000,
-	SEM_DOWN_NR = 0x1000,
-};
-
-static m0_time_t debug_get_time(void)
-{
-	struct timespec ts;
-#ifndef __KERNEL__
-	int		rc;
-
-	rc = clock_gettime(CLOCK_REALTIME, &ts);
-	M0_ASSERT(rc == 0);
-#else
-	getnstimeofday(&ts);
-#endif
-
-	return ts.tv_sec * M0_TIME_ONE_BILLION + ts.tv_nsec;
-}
-
-static void debug_log_stats(const char *descr,
-			    struct m0_net_test_stats *stats)
-{
-	M0_LOG(M0_INFO, "%s nr/min/max/~avg sumHI/sumLO/sum_sqrHI/sum_sqrLO = "
-	       "%lu/%ld/%ld/%lu %lu/%lu/%lu/%lu",
-	       descr,
-	       stats->nts_count,
-	       (long) m0_net_test_stats_time_min(stats),
-	       (long) m0_net_test_stats_time_max(stats),
-	       (unsigned long) stats->nts_sum.u_lo / stats->nts_count,
-	       (unsigned long) stats->nts_sum.u_hi,
-	       (unsigned long) stats->nts_sum.u_lo,
-	       (unsigned long) stats->nts_sum_sqr.u_hi,
-	       (unsigned long) stats->nts_sum_sqr.u_lo);
-}
-
-static void time_measure_accuracy(void)
-{
-	struct m0_net_test_stats stats;
-	size_t			 i;
-	m0_time_t		 time_current;
-	m0_time_t		 time_next;
-	m0_time_t		 delta;
-
-	m0_net_test_stats_reset(&stats);
-	time_current = debug_get_time();
-	for (i = 0; i < SAMPLE_SIZE; ++i) {
-		time_next = debug_get_time();
-		delta = time_next - time_current;
-		time_current = time_next;
-		if (delta != 0)
-			m0_net_test_stats_time_add(&stats, delta);
-	}
-	debug_log_stats("m0_time_now() delta ", &stats);
-}
-
-static void semaphore_timeddown_measure_speed(void)
-{
-	struct m0_net_test_stats stats;
-	struct m0_semaphore	 sem;
-	size_t			 i;
-	int			 rc;
-	m0_time_t		 time_start;
-	m0_time_t		 time_finish;
-	const size_t		 LOG_SIZE = 0x10;
-	m0_time_t		 small_log[LOG_SIZE];
-
-	rc = m0_semaphore_init(&sem, 0);
-	M0_ASSERT(rc == 0);
-	m0_net_test_stats_reset(&stats);
-	for (i = 0; i < SEM_DOWN_NR; ++i) {
-		time_start = debug_get_time();
-		m0_semaphore_timeddown(&sem, m0_time_now());
-		// m0_semaphore_timeddown(&sem, time_start);
-		// m0_semaphore_trydown(&sem);
-		time_finish = debug_get_time();
-		m0_net_test_stats_add(&stats, time_finish - time_start);
-		if (i < LOG_SIZE)
-			small_log[i] = time_finish - time_start;
-	}
-	m0_semaphore_fini(&sem);
-	debug_log_stats("m0_semaphore_down(&sem, m0_time_now()) time ", &stats);
-	for (i = 0; i < LOG_SIZE; ++i)
-		M0_LOG(M0_INFO, "%lu", (unsigned long) small_log[i]);
-}
-
-void m0_net_test_debug_ut(void)
-{
-	time_measure_accuracy();
-	semaphore_timeddown_measure_speed();
-}
-
 /*
  *  Local variables:
  *  c-indentation-style: "K&R"
-- 
1.8.3.2


From b3ccc17cf350d23e866bdcfab4575d3b0dd1dd90 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Wed, 2 Apr 2014 10:07:01 -0700
Subject: [PATCH 09/11] seg0: added 0types handling for mkfs mode.

---
 be/domain.c | 16 +++++++++++-----
 be/seg0.c   |  3 +--
 2 files changed, 12 insertions(+), 7 deletions(-)

diff --git a/be/domain.c b/be/domain.c
index 04c75bd..1f955ad 100644
--- a/be/domain.c
+++ b/be/domain.c
@@ -42,9 +42,16 @@ M0_TL_DEFINE(seg, M0_INTERNAL, struct m0_be_seg);
  *
  * @{
  */
+
 static void m0_be_domain__0types_fini(struct m0_be_domain *dom);
 static int m0_be_domain__0types_init(struct m0_be_domain *dom);
 
+/* check that we're in mkfs mode */
+static bool is_mkfs_mode(const struct m0_be_seg *dict)
+{
+	return dict == NULL || dict->bs_domain->bd_seg0_stob == NULL;
+}
+
 static int segobj_opt_begin(struct m0_be_seg         *dict,
 			    const struct m0_be_0type *objtype,
 			    struct m0_buf            *opt,
@@ -53,7 +60,7 @@ static int segobj_opt_begin(struct m0_be_seg         *dict,
 	struct m0_buf *buf;
 	int	       rc;
 
-	if (strstr(objtype->b0_name, "M0_BE_MKFS:") == objtype->b0_name)
+	if (is_mkfs_mode(dict))
 		return +1;
 
 	rc = m0_be_seg_dict_begin(dict, objtype->b0_name,
@@ -78,7 +85,7 @@ static int segobj_opt_next(struct m0_be_seg         *dict,
 	struct m0_buf *buf;
 	int            rc;
 
-	if (strstr(objtype->b0_name, "M0_BE_MKFS:") == objtype->b0_name)
+	if (is_mkfs_mode(dict))
 		return 0;
 
 	rc = m0_be_seg_dict_next(dict, objtype->b0_name, *suffix,
@@ -104,8 +111,6 @@ static int _0types_visit(struct m0_be_domain *dom, bool init)
 	struct m0_be_0type *objtype;
 	char               *suffix;
 
-	//M0_PRE(zt_tlist_head(&dom->bd_0type_list)->b0_name == "M0_BE:SEG0")
-
 	dict = m0_be_domain_seg0_get(dom);
 
         m0_tl_for(zt, &dom->bd_0type_list, objtype) {
@@ -252,7 +257,8 @@ struct m0_be_seg *m0_be_domain_seg0_get(const struct m0_be_domain *dom)
 
 M0_INTERNAL bool m0_be_domain_is_locked(const struct m0_be_domain *dom)
 {
-	return m0_mutex_is_locked(&dom->bd_engine.eng_lock);
+	/* XXX: return m0_mutex_is_locked(&dom->bd_engine.eng_lock); */
+	return true;
 }
 
 #undef M0_TRACE_SUBSYSTEM
diff --git a/be/seg0.c b/be/seg0.c
index 9f5d914..bc72e78 100644
--- a/be/seg0.c
+++ b/be/seg0.c
@@ -36,8 +36,7 @@ static bool be_0type_invarinat(const struct m0_be_0type *zt, bool registered)
 
 static bool dom_is_locked(const struct m0_be_domain *dom)
 {
-	return true;
-	/* XXX: return m0_be_domain_is_locked(dom); */
+	return m0_be_domain_is_locked(dom);
 }
 
 static struct m0_be_seg *seg0_get(const struct m0_be_domain *dom)
-- 
1.8.3.2


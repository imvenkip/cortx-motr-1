From f2629849ccab5c2866e79ba2c5fe464d76a5e3e9 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Mon, 7 Apr 2014 09:42:12 +0300
Subject: [PATCH 11/11] seg0: fixed after r/1659 insp. round 1.

---
 balloc/balloc.c   |  3 ---
 be/domain.c       | 48 +++++++++++++++++++++---------------------------
 be/seg0.c         | 37 +++++++++++++++++++++----------------
 be/seg_dict.c     | 12 ++++++++++++
 be/seg_dict.h     |  1 +
 be/ut/fake_mkfs.c |  2 +-
 be/ut/seg0.c      |  2 +-
 lib/buf.h         |  1 +
 8 files changed, 58 insertions(+), 48 deletions(-)

diff --git a/balloc/balloc.c b/balloc/balloc.c
index aa75972..12b81b6 100644
--- a/balloc/balloc.c
+++ b/balloc/balloc.c
@@ -42,9 +42,6 @@
 
  */
 
-/* XXX */
-#define M0_BUF_INIT_PTR(p)      M0_BUF_INIT(sizeof *(p), (p))
-
 /** XXX @todo rewrite using M0_BE_OP_SYNC() */
 static inline int btree_lookup_sync(struct m0_be_btree  *tree,
 			       const struct m0_buf *key,
diff --git a/be/domain.c b/be/domain.c
index 1f955ad..b3d95ef 100644
--- a/be/domain.c
+++ b/be/domain.c
@@ -52,19 +52,23 @@ static bool is_mkfs_mode(const struct m0_be_seg *dict)
 	return dict == NULL || dict->bs_domain->bd_seg0_stob == NULL;
 }
 
-static int segobj_opt_begin(struct m0_be_seg         *dict,
-			    const struct m0_be_0type *objtype,
-			    struct m0_buf            *opt,
-			    char                    **suffix)
+static int segobj_opt_iterate(struct m0_be_seg         *dict,
+			      const struct m0_be_0type *objtype,
+			      struct m0_buf            *opt,
+			      char                    **suffix,
+			      bool                      begin)
 {
 	struct m0_buf *buf;
 	int	       rc;
 
 	if (is_mkfs_mode(dict))
-		return +1;
+		return begin;
 
-	rc = m0_be_seg_dict_begin(dict, objtype->b0_name,
-				  (const char **)suffix, (void**) &buf);
+	rc = begin ?
+		m0_be_seg_dict_begin(dict, objtype->b0_name,
+				     (const char **)suffix, (void**) &buf) :
+		m0_be_seg_dict_next(dict, objtype->b0_name, *suffix,
+				    (const char**) suffix, (void**) &buf);
 
 	if (rc == -ENOENT)
 		return 0;
@@ -82,24 +86,15 @@ static int segobj_opt_next(struct m0_be_seg         *dict,
 			   struct m0_buf            *opt,
 			   char                    **suffix)
 {
-	struct m0_buf *buf;
-	int            rc;
-
-	if (is_mkfs_mode(dict))
-		return 0;
-
-	rc = m0_be_seg_dict_next(dict, objtype->b0_name, *suffix,
-				 (const char**) suffix, (void**) &buf);
-
-	if (rc == -ENOENT)
-		return 0;
-	else if (rc == 0) {
-		if (buf != NULL)
-			*opt = *buf;
-		return +1;
-	}
+	return segobj_opt_iterate(dict, objtype, opt, suffix, false);
+}
 
-	return rc;
+static int segobj_opt_begin(struct m0_be_seg         *dict,
+			    const struct m0_be_0type *objtype,
+			    struct m0_buf            *opt,
+			    char                    **suffix)
+{
+	return segobj_opt_iterate(dict, objtype, opt, suffix, true);
 }
 
 static int _0types_visit(struct m0_be_domain *dom, bool init)
@@ -158,7 +153,7 @@ static void m0_be_domain__seg0_fini(struct m0_be_domain *dom)
 
 	seg = m0_be_domain_seg0_get(dom);
 	seg_tlist_del(seg);
-	/* there's no need to fini seg dict here */
+	m0_be_seg_dict_fini(seg);
 	m0_be_seg_close(seg);
 	m0_be_seg_fini(seg);
 	m0_free(seg);
@@ -208,7 +203,6 @@ M0_INTERNAL int m0_be_domain_start(struct m0_be_domain *dom,
 	int		     rc;
 
 	dom->bd_cfg = *cfg;
-	M0_SET0(en);
 
 	rc = m0_be_domain__0types_init(dom);
 	if (rc != 0)
@@ -220,7 +214,7 @@ M0_INTERNAL int m0_be_domain_start(struct m0_be_domain *dom,
 		return rc;
 	}
 
-	m0_be_engine_start(en);
+	rc = m0_be_engine_start(en);
 
 	return rc;
 }
diff --git a/be/seg0.c b/be/seg0.c
index bc72e78..8798d34 100644
--- a/be/seg0.c
+++ b/be/seg0.c
@@ -18,6 +18,7 @@
  * Original creation date: 11-Feb-2014
  */
 
+#include <stdio.h>
 #include "be/domain.h"
 #include "be/seg0.h"
 #include "be/seg.h"
@@ -26,7 +27,7 @@
 #include "lib/buf.h"
 
 
-static bool be_0type_invarinat(const struct m0_be_0type *zt, bool registered)
+static bool be_0type_invariant(const struct m0_be_0type *zt, bool registered)
 {
 	return ergo(registered, zt_tlink_is_in(zt)) &&
 		zt->b0_name != NULL &&
@@ -44,22 +45,15 @@ static struct m0_be_seg *seg0_get(const struct m0_be_domain *dom)
 	return m0_be_domain_seg0_get(dom);
 }
 
-static void keyname_format(const struct m0_be_0type *zt,
-			   const char *suffix, char *keyname)
+static void keyname_format(const struct m0_be_0type *zt, const char *suffix,
+			   char *keyname, size_t keyname_len)
 {
-	const char *prefix = "M0_BE:";
-
-	M0_PRE(strlen(prefix) + strlen(zt->b0_name) + strlen(suffix) <
-	       ARRAY_SIZE(keyname) - sizeof('\0'));
-
-	strcat(keyname, prefix);
-	strcat(keyname, zt->b0_name);
-	strcat(keyname, suffix);
+	snprintf(keyname, keyname_len, "%s%s%s", "M0_BE:", zt->b0_name, suffix);
 }
 
 void m0_be_0type_register(struct m0_be_domain *dom, struct m0_be_0type *zt)
 {
-	M0_PRE(be_0type_invarinat(zt, false));
+	M0_PRE(be_0type_invariant(zt, false));
 	M0_PRE(dom_is_locked(dom));
 
 	zt_tlink_init_at_tail(zt, &dom->bd_0type_list);
@@ -73,11 +67,16 @@ int m0_be_0type_add(struct m0_be_0type *zt, const struct m0_be_domain *dom,
 	char              keyname[1024] = {};
 
 	M0_PRE(dom_is_locked(dom));
-	M0_PRE(be_0type_invarinat(zt, true));
+	M0_PRE(be_0type_invariant(zt, true));
 
 	seg = seg0_get(dom);
-	keyname_format(zt, suffix, keyname);
+	keyname_format(zt, suffix, keyname, ARRAY_SIZE(keyname));
+#if 0
 	return m0_be_seg_dict_insert(seg, tx, keyname, data->b_addr);
+#else
+	M0_IMPOSSIBLE("Implement BE engine start/stop before uncommenting!");
+	return -1;
+#endif
 }
 
 int m0_be_0type_del(struct m0_be_0type *zt, const struct m0_be_domain *dom,
@@ -88,11 +87,17 @@ int m0_be_0type_del(struct m0_be_0type *zt, const struct m0_be_domain *dom,
 	char              keyname[1024] = {};
 
 	M0_PRE(dom_is_locked(dom));
-	M0_PRE(be_0type_invarinat(zt, true));
+	M0_PRE(be_0type_invariant(zt, true));
 
 	seg = seg0_get(dom);
-	keyname_format(zt, suffix, keyname);
+	keyname_format(zt, suffix, keyname, ARRAY_SIZE(keyname));
+#if 0
 	return m0_be_seg_dict_delete(seg, tx, keyname);
+#else
+	M0_IMPOSSIBLE("Implement BE engine start/stop before uncommenting!");
+	return -1;
+#endif
+
 }
 
 /*
diff --git a/be/seg_dict.c b/be/seg_dict.c
index 694db17..89e4dda 100644
--- a/be/seg_dict.c
+++ b/be/seg_dict.c
@@ -140,6 +140,18 @@ M0_INTERNAL void m0_be_seg_dict_init(struct m0_be_seg *seg)
 	M0_LEAVE();
 }
 
+M0_INTERNAL void m0_be_seg_dict_fini(struct m0_be_seg *seg)
+{
+	struct m0_be_btree *tree = dict_get(seg);
+
+	M0_ENTRY("seg=%p", seg);
+	M0_PRE(m0_be_seg__invariant(seg));
+
+	m0_be_btree_fini(tree);
+
+	M0_LEAVE();
+}
+
 M0_INTERNAL int m0_be_seg_dict_lookup(struct m0_be_seg *seg,
 				      const char *name,
 				      void **out)
diff --git a/be/seg_dict.h b/be/seg_dict.h
index 48d2ae9..6ad4954 100644
--- a/be/seg_dict.h
+++ b/be/seg_dict.h
@@ -35,6 +35,7 @@ struct m0_sm_group;
 struct m0_be_tx_credit;
 
 M0_INTERNAL void m0_be_seg_dict_init(struct m0_be_seg *seg);
+M0_INTERNAL void m0_be_seg_dict_fini(struct m0_be_seg *seg);
 M0_INTERNAL int m0_be_seg_dict_lookup(struct m0_be_seg *seg,
 				      const char *name,	void **out);
 M0_INTERNAL int m0_be_seg_dict_begin(struct m0_be_seg *seg,
diff --git a/be/ut/fake_mkfs.c b/be/ut/fake_mkfs.c
index a19f7ff..43fc1eb 100644
--- a/be/ut/fake_mkfs.c
+++ b/be/ut/fake_mkfs.c
@@ -65,7 +65,7 @@ void m0_be_ut_fake_mkfs(void)
 	M0_BE_ALLOC_PTR_SYNC(log_opts, seg, &tx);
 	log_opts->lo_size            = 1 << 27;
 	log_opts->lo_stob_id.si_bits = M0_UINT128(0, 42);
-	m0_buf_init(log_opts_buf, log_opts, sizeof log_opts);
+	*log_opts_buf = M0_BUF_INIT_PTR(log_opts);
 	M0_BE_TX_CAPTURE_PTR(seg, &tx, log_opts);
 	M0_BE_TX_CAPTURE_PTR(seg, &tx, log_opts_buf);
 
diff --git a/be/ut/seg0.c b/be/ut/seg0.c
index f536383..c6f39c3 100644
--- a/be/ut/seg0.c
+++ b/be/ut/seg0.c
@@ -86,7 +86,7 @@ void m0_be_ut_seg0_test(void)
 {
 	struct m0_stob        *seg0_stob;
 	struct m0_stob_id      stob_id;
-	struct m0_be_domain    bedom;
+	struct m0_be_domain    bedom = {};
 	struct m0_stob_domain *dom;
 	int rc;
 
diff --git a/lib/buf.h b/lib/buf.h
index 5b1e9e3..ab29231 100644
--- a/lib/buf.h
+++ b/lib/buf.h
@@ -59,6 +59,7 @@ struct m0_buf {
 		.b_addr = (data)	\
 	})
 
+#define M0_BUF_INIT_PTR(p)      M0_BUF_INIT(sizeof *(p), (p))
 #define M0_BUF_INITS(str)       M0_BUF_INIT(strlen(str), (str))
 #define M0_BUF_INIT0            M0_BUF_INIT(0, NULL)
 
-- 
1.8.3.2


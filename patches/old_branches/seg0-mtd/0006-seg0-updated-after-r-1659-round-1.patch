From 31da5246cb62ad84852be44361a7a99073d4d249 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Tue, 1 Apr 2014 12:41:11 -0700
Subject: [PATCH 06/11] seg0: updated after r/1659, round 1.

---
 be/Makefile.sub  | 48 +++++++++++++++++++++++------------------------
 be/domain.h      |  2 +-
 be/seg0.h        |  4 ++--
 be/ut/helper.c   | 26 ++++++++++++--------------
 be/ut/helper.h   |  2 +-
 be/ut/seg_dict.c | 57 +++++++++++++++++++++++---------------------------------
 6 files changed, 63 insertions(+), 76 deletions(-)

diff --git a/be/Makefile.sub b/be/Makefile.sub
index c3807ef..16877a8 100644
--- a/be/Makefile.sub
+++ b/be/Makefile.sub
@@ -2,8 +2,8 @@ nobase_mero_include_HEADERS += be/alloc.h           \
                                be/alloc_internal.h  \
                                be/be.h              \
                                be/btree.h           \
-			       be/domain.h	    \
-			       be/engine.h	    \
+			       be/domain.h          \
+			       be/engine.h          \
                                be/extmap.h          \
                                be/extmap_internal.h \
                                be/io.h              \
@@ -21,33 +21,33 @@ nobase_mero_include_HEADERS += be/alloc.h           \
                                be/tx_group.h        \
                                be/tx_group_ondisk.h \
                                be/tx_group_ondisk_internal.h \
-			       be/tx_internal.h	    \
+			       be/tx_internal.h     \
                                be/tx_regmap.h       \
                                be/tx_service.h	    \
 			       be/ut/helper.h
 
-mero_libmero_la_SOURCES += be/alloc.c     	\
-			   be/be.c        	\
-			   be/btree.c     	\
-			   be/extmap.c		\
-			   be/extmap_xc.c	\
-			   be/domain.c		\
-			   be/engine.c       	\
-			   be/io.c        	\
-			   be/list.c      	\
-			   be/log.c       	\
-			   be/log_store.c 	\
-			   be/op.c 		\
-			   be/seg.c       	\
-			   be/seg0.c       	\
-			   be/seg_dict.c       	\
-			   be/tx.c        	\
-			   be/tx_credit.c 	\
-			   be/tx_group_fom.c	\
-			   be/tx_group.c  	\
+mero_libmero_la_SOURCES += be/alloc.c           \
+			   be/be.c              \
+			   be/btree.c           \
+			   be/extmap.c          \
+			   be/extmap_xc.c       \
+			   be/domain.c          \
+			   be/engine.c          \
+			   be/io.c              \
+			   be/list.c            \
+			   be/log.c             \
+			   be/log_store.c       \
+			   be/op.c              \
+			   be/seg.c             \
+			   be/seg0.c            \
+			   be/seg_dict.c        \
+			   be/tx.c              \
+			   be/tx_credit.c       \
+			   be/tx_group_fom.c    \
+			   be/tx_group.c        \
 			   be/tx_group_ondisk.c \
-			   be/tx_regmap.c 	\
-			   be/tx_service.c	\
+			   be/tx_regmap.c       \
+			   be/tx_service.c      \
                            be/ut/helper.c
 
 XC_FILES += be/extmap_xc.h
diff --git a/be/domain.h b/be/domain.h
index 7262954..5425e2c 100644
--- a/be/domain.h
+++ b/be/domain.h
@@ -34,7 +34,7 @@
 
 struct m0_be_domain_cfg {
 	struct m0_be_engine_cfg bc_engine;
-	uint64_t                bc_seg0_size;
+	m0_bcount_t             bc_seg0_size;
 };
 
 struct m0_be_domain {
diff --git a/be/seg0.h b/be/seg0.h
index db3a26f..8a7892f 100644
--- a/be/seg0.h
+++ b/be/seg0.h
@@ -57,10 +57,10 @@ struct m0_be_0type {
 	 * @param data is an opaque pointer and size to the options
 	 *             this type needs to perform startup.
 	 */
-	int       (*b0_init)(const struct m0_be_domain *dom, const char *suffix,
+	int       (*b0_init)(struct m0_be_domain *dom, const char *suffix,
 			     const struct m0_buf *data);
 
-	void      (*b0_fini)(const struct m0_be_domain *dom, const char *suffix,
+	void      (*b0_fini)(struct m0_be_domain *dom, const char *suffix,
 			     const struct m0_buf *data);
 
 	/** linkage in a list of 0types into m0_be_domain. */
diff --git a/be/ut/helper.c b/be/ut/helper.c
index 057f523..12d90db 100644
--- a/be/ut/helper.c
+++ b/be/ut/helper.c
@@ -774,11 +774,11 @@ M0_INTERNAL void m0_ut_be_fom_domain_idle_wait(struct m0_reqh *reqh)
  * have to be redeclared in mkfs utility.
  * ------------------------------------------------------------------ */
 
-static int ut_log0_init(const struct m0_be_domain *dom, const char *suffix,
+static int ut_log0_init(struct m0_be_domain *dom, const char *suffix,
 			const struct m0_buf *data)
 {
 	const struct m0_be_engine_cfg *en_cfg = &dom->bd_cfg.bc_engine;
-	struct m0_be_engine *en = (struct m0_be_engine*) &dom->bd_engine;
+	struct m0_be_engine *en = m0_be_domain_engine(dom);
 
 	M0_ENTRY();
 
@@ -795,22 +795,21 @@ static int ut_log0_init(const struct m0_be_domain *dom, const char *suffix,
 	return M0_RC(m0_be_log_create(&en->eng_log, en_cfg->bec_log_size));
 }
 
-static void ut_log0_fini(const struct m0_be_domain *dom, const char *suffix,
+static void ut_log0_fini(struct m0_be_domain *dom, const char *suffix,
 			 const struct m0_buf *data)
 {
-	struct m0_be_engine *en = (struct m0_be_engine*) &dom->bd_engine;
+	struct m0_be_engine *en = m0_be_domain_engine(dom);
 
 	M0_ENTRY();
 	m0_be_log_fini(&en->eng_log);
 	M0_LEAVE();
 }
 
-static int ut_seg0_init(const struct m0_be_domain *d, const char *suffix,
+static int ut_seg0_init(struct m0_be_domain *dom, const char *suffix,
 			const struct m0_buf *data)
 {
 	struct be_ut_helper_struct *h = &be_ut_helper;
 	struct m0_be_seg           *seg;
-	struct m0_be_domain        *dom = (struct m0_be_domain *) d;
 	uint64_t                    size = dom->bd_cfg.bc_seg0_size;
 	int			    rc;
 
@@ -829,10 +828,9 @@ static int ut_seg0_init(const struct m0_be_domain *d, const char *suffix,
 	return rc;
 }
 
-static void ut_seg0_fini(const struct m0_be_domain *d, const char *suffix,
+static void ut_seg0_fini(struct m0_be_domain *dom, const char *suffix,
 			 const struct m0_buf *data)
 {
-	struct m0_be_domain *dom = (struct m0_be_domain *) d;
 	struct m0_be_seg    *seg  = m0_be_domain_seg0_get(dom);
 	struct m0_stob      *stob = seg->bs_stob;
 	int		     rc;
@@ -859,7 +857,7 @@ struct m0_be_0type m0_be_ut_log0 = {
 	.b0_fini = ut_log0_fini
 };
 
-static int seg0_init(const struct m0_be_domain *d, const char *suffix,
+static int seg0_init(struct m0_be_domain *d, const char *suffix,
 		     const struct m0_buf *data)
 {
 	M0_ENTRY();
@@ -867,17 +865,17 @@ static int seg0_init(const struct m0_be_domain *d, const char *suffix,
 	return 0;
 }
 
-static void seg0_fini(const struct m0_be_domain *d, const char *suffix,
+static void seg0_fini(struct m0_be_domain *d, const char *suffix,
 		      const struct m0_buf *data)
 {
 	M0_ENTRY();
 	M0_LEAVE();
 }
 
-static int log0_init(const struct m0_be_domain *dom, const char *suffix,
+static int log0_init(struct m0_be_domain *dom, const char *suffix,
 		     const struct m0_buf *data)
 {
-	struct m0_be_engine *en = (struct m0_be_engine*) &dom->bd_engine;
+	struct m0_be_engine *en = m0_be_domain_engine(dom);
 	struct m0_be_0type_log_opts *opts =
 		(struct m0_be_0type_log_opts *) data->b_addr;
 	struct m0_stob *log_stob;
@@ -896,10 +894,10 @@ static int log0_init(const struct m0_be_domain *dom, const char *suffix,
 	return M0_RC(m0_be_log_create(&en->eng_log, opts->lo_size));
 }
 
-static void log0_fini(const struct m0_be_domain *dom, const char *suffix,
+static void log0_fini(struct m0_be_domain *dom, const char *suffix,
 			 const struct m0_buf *data)
 {
-	struct m0_be_engine *en = (struct m0_be_engine*) &dom->bd_engine;
+	struct m0_be_engine *en = m0_be_domain_engine(dom);
 
 	M0_ENTRY();
 	m0_be_log_fini(&en->eng_log);
diff --git a/be/ut/helper.h b/be/ut/helper.h
index c6a317f..3a44968 100644
--- a/be/ut/helper.h
+++ b/be/ut/helper.h
@@ -186,7 +186,7 @@ extern struct m0_be_0type m0_be_seg0;
 
 struct m0_be_0type_log_opts {
 	struct m0_stob_id lo_stob_id;
-	size_t            lo_size;
+	m0_bcount_t       lo_size;
 };
 
 
diff --git a/be/ut/seg_dict.c b/be/ut/seg_dict.c
index f5312d4..04e554a 100644
--- a/be/ut/seg_dict.c
+++ b/be/ut/seg_dict.c
@@ -101,27 +101,29 @@ void m0_be_ut_seg_dict(void)
 	struct m0_sm_group     *grp;
 	struct m0_be_seg       *seg;
 	struct m0_be_tx         tx;
-	const char             *next_key;
+	const char             *nk; /*next key */
 	void                   *p;
 	int                     i;
 	int                     rc;
+#define OPT 7
+#define END 11
 	struct {
 		const char *name;
 		void       **value;
 	} dict[] = {
-		{ "dead", (void*)0xdead },
-		{ "beaf", (void*)0xbeaf },
-		{ "cafe", (void*)0xcafe },
-		{ "babe", (void*)0xbabe },
-		{ "d00d", (void*)0xd00d },
-		{ "8bad", (void*)0x8bad },
-		{ "f00d", (void*)0xf00d },
-
-		{ "M0_BE:opt1", (void*)0xf00d0001 },
-		{ "M0_BE:opt2", (void*)0xf00d0002 },
-		{ "M0_BE:opt3", (void*)0xf00d0003 },
-		{ "M0_BE:opt4", (void*)0xf00d0004 },
-		{ "M0_BE:end0", (void*)0xf00d0000 },
+			{ "dead", (void*)0xdead },
+			{ "beaf", (void*)0xbeaf },
+			{ "cafe", (void*)0xcafe },
+			{ "babe", (void*)0xbabe },
+			{ "d00d", (void*)0xd00d },
+			{ "8bad", (void*)0x8bad },
+			{ "f00d", (void*)0xf00d },
+
+		[OPT] = { "M0_BE:opt1", (void*)0xf00d0001 },
+			{ "M0_BE:opt2", (void*)0xf00d0002 },
+			{ "M0_BE:opt3", (void*)0xf00d0003 },
+			{ "M0_BE:opt4", (void*)0xf00d0004 },
+		[END] =	{ "M0_BE:end0", (void*)0xf00d0000 },
 	};
 
 	M0_SET0(&ut_be);
@@ -152,26 +154,13 @@ void m0_be_ut_seg_dict(void)
 		M0_UT_ASSERT(rc == 0 && dict[i].value == p);
 	}
 
-
-	rc = m0_be_seg_dict_begin(seg, "M0_BE:opt", &next_key, &p);
-	M0_UT_ASSERT(rc == 0 && p == (void*)0xf00d0001 &&
-		     strcmp(next_key, "M0_BE:opt1") == 0);
-
-	rc = m0_be_seg_dict_next(seg, "M0_BE:opt", next_key, &next_key, &p);
-	M0_UT_ASSERT(rc == 0 && p == (void*)0xf00d0002 &&
-		     strcmp(next_key, "M0_BE:opt2") == 0);
-
-	rc = m0_be_seg_dict_next(seg, "M0_BE:opt", next_key, &next_key, &p);
-	M0_UT_ASSERT(rc == 0 && p == (void*)0xf00d0003 &&
-		     strcmp(next_key, "M0_BE:opt3") == 0);
-
-	rc = m0_be_seg_dict_next(seg, "M0_BE:opt", next_key, &next_key, &p);
-	M0_UT_ASSERT(rc == 0 && p == (void*)0xf00d0004 &&
-		     strcmp(next_key, "M0_BE:opt4") == 0);
-
-	rc = m0_be_seg_dict_next(seg, "M0_BE:opt", next_key, &next_key, &p);
-	M0_UT_ASSERT(rc != 0);
-
+	for (i = 0, rc = m0_be_seg_dict_begin(seg, "M0_BE:opt", &nk, &p);
+	     rc == 0;
+	     i++, rc = m0_be_seg_dict_next(seg, "M0_BE:opt", nk, &nk, &p)) {
+		M0_UT_ASSERT(rc == 0 && p == dict[i + OPT].value &&
+			     strcmp(nk, dict[i + OPT].name) == 0);
+	}
+	M0_UT_ASSERT(i == END-OPT);
 
 	for (i = 0; i < ARRAY_SIZE(dict); i+=2) {
 		rc = m0_be_seg_dict_delete(seg, &tx, dict[i].name);
-- 
1.8.3.2


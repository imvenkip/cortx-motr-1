From 57b24d0ddb210bb7b66b7eabf8acd7b903a0c741 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Thu, 27 Mar 2014 23:11:14 +0200
Subject: [PATCH 03/11] seg0: added seg0:mkfs 0type.

 * TODO:
  Building modules, stage 2.
  MODPOST 8 modules
  WARNING: "m0_be_ut__seg_allocator_init" [/mnt/hgfs/mero/utils/linux_kernel/m0ut.ko] undefined!
  WARNING: "m0_be_ut_backend_mkfs_init" [/mnt/hgfs/mero/utils/linux_kernel/m0ut.ko] undefined!
  WARNING: "m0_be_domain_seg0_get" [/mnt/hgfs/mero/utils/linux_kernel/m0ut.ko] undefined!
---
 be/ut/helper.c   | 57 +++++++++++++++++++++++++++++++++++++++++---------------
 be/ut/helper.h   |  6 ++++++
 be/ut/seg_dict.c | 10 +++-------
 3 files changed, 51 insertions(+), 22 deletions(-)

diff --git a/be/ut/helper.c b/be/ut/helper.c
index c1b5d59..b62bce3 100644
--- a/be/ut/helper.c
+++ b/be/ut/helper.c
@@ -249,8 +249,8 @@ void m0_be_ut_backend_cfg_default(struct m0_be_domain_cfg *cfg)
 	};
 }
 
-M0_INTERNAL void m0_be_ut_backend_init_cfg(struct m0_be_ut_backend *ut_be,
-					   struct m0_be_domain_cfg *cfg)
+static void ut_backend_init_cfg(struct m0_be_ut_backend *ut_be,
+				struct m0_be_domain_cfg *cfg)
 {
 	int rc = 0;
 
@@ -286,9 +286,16 @@ M0_INTERNAL void m0_be_ut_backend_init_cfg(struct m0_be_ut_backend *ut_be,
 		m0_mutex_fini(&ut_be->but_sgt_lock);
 }
 
-void m0_be_ut_backend_init(struct m0_be_ut_backend *ut_be)
+M0_INTERNAL void m0_be_ut_backend_init_cfg(struct m0_be_ut_backend *ut_be,
+					   struct m0_be_domain_cfg *cfg)
 {
 	(void)m0_be_domain_init(&ut_be->but_dom);
+	m0_be_0type_register(&ut_be->but_dom, &m0_be_ut_log0);
+	ut_backend_init_cfg(ut_be, cfg);
+}
+
+void m0_be_ut_backend_init(struct m0_be_ut_backend *ut_be)
+{
 	m0_be_ut_backend_init_cfg(ut_be, NULL);
 }
 
@@ -297,7 +304,7 @@ void m0_be_ut_backend_mkfs_init(struct m0_be_ut_backend *ut_be)
 	(void)m0_be_domain_init(&ut_be->but_dom);
 	m0_be_0type_register(&ut_be->but_dom, &m0_be_ut_log0);
 	m0_be_0type_register(&ut_be->but_dom, &m0_be_ut_seg0);
-	m0_be_ut_backend_init_cfg(ut_be, NULL);
+	ut_backend_init_cfg(ut_be, NULL);
 }
 
 void m0_be_ut_backend_fini(struct m0_be_ut_backend *ut_be)
@@ -425,15 +432,23 @@ void m0_be_ut_tx_init(struct m0_be_tx *tx, struct m0_be_ut_backend *ut_be)
 static int storage_prepare(const char *storage_dir, const char *obj_dir,
 			   struct m0_stob_domain **dom)
 {
+	int rc;
+
 	M0_PRE(*dom == NULL);
 
-	return
 #if 0
-		system("rm -rf " storage_dir) ?:
+	rc = system("rm -rf " storage_dir);
+	M0_ASSERT(rc == 0);
 #endif
-		mkdir(storage_dir, 0700) ?:
-		mkdir(obj_dir, 0700)     ?:
-		m0_linux_stob_domain_locate(storage_dir, dom);
+	rc = mkdir(storage_dir, 0700);
+	// M0_ASSERT(rc == 0);
+	rc = mkdir(obj_dir, 0700);
+	// M0_ASSERT(rc == 0);
+
+	rc = m0_linux_stob_domain_locate(storage_dir, dom);
+	M0_ASSERT(rc == 0);
+
+	return rc;
 }
 
 struct m0_stob *m0_be_ut_stob_get_by_id(uint64_t id, bool stob_create)
@@ -570,7 +585,7 @@ void m0_be_ut_seg_reload(struct m0_be_ut_seg *ut_seg)
 	m0_be_seg_open(&ut_seg->bus_seg);
 }
 
-static void be_ut_seg_allocator_initfini(struct m0_be_ut_seg *ut_seg,
+static void be_ut_seg_allocator_initfini(struct m0_be_seg *seg,
 					 struct m0_be_ut_backend *ut_be,
 					 bool init)
 {
@@ -579,8 +594,7 @@ static void be_ut_seg_allocator_initfini(struct m0_be_ut_seg *ut_seg,
 	struct m0_be_tx         tx;
 	int                     rc;
 
-	ut_seg->bus_allocator = m0_be_seg_allocator(&ut_seg->bus_seg);
-	a = ut_seg->bus_allocator;
+	a = m0_be_seg_allocator(seg);
 	if (ut_be != NULL) {
 		m0_be_ut_tx_init(&tx, ut_be);
 		be_ut_tx_lock_if(tx.t_sm.sm_grp, ut_be);
@@ -592,7 +606,7 @@ static void be_ut_seg_allocator_initfini(struct m0_be_ut_seg *ut_seg,
 	}
 
 	if (init) {
-		rc = m0_be_allocator_init(a, &ut_seg->bus_seg);
+		rc = m0_be_allocator_init(a, seg);
 		M0_ASSERT(rc == 0);
 		rc = m0_be_allocator_create(a, ut_be == NULL ? NULL : &tx);
 		M0_ASSERT(rc == 0);
@@ -611,13 +625,26 @@ static void be_ut_seg_allocator_initfini(struct m0_be_ut_seg *ut_seg,
 void m0_be_ut_seg_allocator_init(struct m0_be_ut_seg *ut_seg,
 				 struct m0_be_ut_backend *ut_be)
 {
-	be_ut_seg_allocator_initfini(ut_seg, ut_be, true);
+	be_ut_seg_allocator_initfini(&ut_seg->bus_seg, ut_be, true);
+	ut_seg->bus_allocator = m0_be_seg_allocator(&ut_seg->bus_seg);
 }
 
 void m0_be_ut_seg_allocator_fini(struct m0_be_ut_seg *ut_seg,
 				 struct m0_be_ut_backend *ut_be)
 {
-	be_ut_seg_allocator_initfini(ut_seg, ut_be, false);
+	be_ut_seg_allocator_initfini(&ut_seg->bus_seg, ut_be, false);
+}
+
+void m0_be_ut__seg_allocator_init(struct m0_be_seg *seg,
+				  struct m0_be_ut_backend *ut_be)
+{
+	be_ut_seg_allocator_initfini(seg, ut_be, true);
+}
+
+void m0_be_ut__seg_allocator_fini(struct m0_be_seg *seg,
+				  struct m0_be_ut_backend *ut_be)
+{
+	be_ut_seg_allocator_initfini(seg, ut_be, false);
 }
 
 M0_INTERNAL void m0_be_ut_txc_init(struct m0_be_ut_txc *tc)
diff --git a/be/ut/helper.h b/be/ut/helper.h
index 0639fd6..fecb48c 100644
--- a/be/ut/helper.h
+++ b/be/ut/helper.h
@@ -155,6 +155,12 @@ void m0_be_ut_seg_allocator_init(struct m0_be_ut_seg *ut_seg,
 void m0_be_ut_seg_allocator_fini(struct m0_be_ut_seg *ut_seg,
 				 struct m0_be_ut_backend *ut_be);
 
+void m0_be_ut__seg_allocator_init(struct m0_be_seg *seg,
+				  struct m0_be_ut_backend *ut_be);
+void m0_be_ut__seg_allocator_fini(struct m0_be_seg *seg,
+				  struct m0_be_ut_backend *ut_be);
+
+
 struct m0_stob *m0_be_ut_stob_get(bool stob_create);
 struct m0_stob *m0_be_ut_stob_get_by_id(uint64_t id, bool stob_create);
 void m0_be_ut_stob_put(struct m0_stob *stob, bool stob_destroy);
diff --git a/be/ut/seg_dict.c b/be/ut/seg_dict.c
index 027fc52..e633ca0 100644
--- a/be/ut/seg_dict.c
+++ b/be/ut/seg_dict.c
@@ -98,9 +98,8 @@ void m0_be_ut_seg_dict(void)
 {
 	struct m0_be_ut_backend ut_be;
 	M0_UNUSED struct m0_be_tx_credit  credit = {};
-	M0_UNUSED struct m0_be_ut_seg     ut_seg;
 	M0_UNUSED struct m0_sm_group     *grp;
-	M0_UNUSED struct m0_be_seg       *seg = &ut_seg.bus_seg;
+	M0_UNUSED struct m0_be_seg       *seg;
 	M0_UNUSED struct m0_be_tx         tx;
 	M0_UNUSED const char             *next_key;
 	M0_UNUSED void                   *p;
@@ -127,9 +126,8 @@ void m0_be_ut_seg_dict(void)
 
 	M0_SET0(&ut_be);
 	m0_be_ut_backend_mkfs_init(&ut_be);
-#if 0
-	m0_be_ut_seg_init(&ut_seg, &ut_be, 1 << 20);
-	m0_be_ut_seg_allocator_init(&ut_seg, &ut_be);
+	seg = m0_be_domain_seg0_get(&ut_be.but_dom);
+	m0_be_ut__seg_allocator_init(seg, &ut_be);
 	m0_be_ut_tx_init(&tx, &ut_be);
 
 	grp = m0_be_ut_backend_sm_group_lookup(&ut_be);
@@ -201,8 +199,6 @@ void m0_be_ut_seg_dict(void)
 
 	rc = m0_be_ut__seg_dict_destroy(seg, grp);
 	M0_UT_ASSERT(rc == 0);
-	m0_be_ut_seg_fini(&ut_seg);
-#endif
 	m0_be_ut_backend_fini(&ut_be);
 }
 
-- 
1.8.3.2


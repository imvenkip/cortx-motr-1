From 67a0fc9c1321be8ca1bed5b3a723e668aa183be0 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Fri, 12 Jul 2013 22:18:26 +0300
Subject: [PATCH 07/14] lnet: extract tm_start() from nlx_tm_ev_worker()

---
 net/lnet/lnet_tm.c | 91 ++++++++++++++++++++++++++++++++----------------------
 1 file changed, 54 insertions(+), 37 deletions(-)

diff --git a/net/lnet/lnet_tm.c b/net/lnet/lnet_tm.c
index edbbdd0..10da4b8 100644
--- a/net/lnet/lnet_tm.c
+++ b/net/lnet/lnet_tm.c
@@ -75,16 +75,44 @@ nlx_tm_get_buffer_timeout_tick(const struct m0_net_transfer_mc *tm)
 
 static int thread_confine(struct nlx_xo_transfer_mc *m)
 {
-	struct m0_thread_handle me;
+	struct m0_thread_handle h;
 
 	if (m->xtm_processors.b_nr == 0)
 		return 0;
 
-	m0_thread_self(&me);
-	M0_ASSERT(m0_thread_handle_eq(&me, &m->xtm_ev_thread.t_h));
+	m0_thread_self(&h);
+	M0_ASSERT(m0_thread_handle_eq(&h, &m->xtm_ev_thread.t_h));
 	return m0_thread_confine(&m->xtm_ev_thread, &m->xtm_processors);
 }
 
+static struct nlx_core_domain *core_domain(const struct m0_net_transfer_mc *tm)
+{
+	struct nlx_xo_domain *dom = tm->ntm_dom->nd_xprt_private;
+	return &dom->xd_core;
+}
+
+static int
+tm_start(struct m0_net_transfer_mc *tm, struct m0_net_end_point **epp)
+{
+	struct nlx_xo_transfer_mc   *tp  = tm->ntm_xprt_private;
+	struct nlx_core_transfer_mc *ctp = &tp->xtm_core;
+	struct nlx_core_domain      *cd  = core_domain(tm);
+	int                          rc;
+
+	M0_PRE(*epp == NULL);
+
+	rc = thread_confine(tp) ?: nlx_core_tm_start(cd, tm, ctp);
+	if (rc != 0)
+		return rc;
+
+	rc = nlx_ep_create(epp, tm, &ctp->ctm_addr);
+	if (rc != 0)
+		nlx_core_tm_stop(cd, ctp);
+
+	M0_POST((rc == 0) == (*epp != NULL));
+	return rc;
+}
+
 /**
    The entry point of the LNet transport event processing thread.
    It is spawned when the transfer machine starts.  It completes
@@ -95,14 +123,11 @@ static int thread_confine(struct nlx_xo_transfer_mc *m)
  */
 static void nlx_tm_ev_worker(struct m0_net_transfer_mc *tm)
 {
-	struct nlx_xo_transfer_mc   *tp;
-	struct nlx_core_transfer_mc *ctp;
-	struct nlx_xo_domain        *dp;
-	struct nlx_core_domain      *cd;
-	struct m0_net_tm_event       tmev = {
-		.nte_type = M0_NET_TEV_STATE_CHANGE,
-		.nte_tm   = tm
-	};
+	struct nlx_xo_transfer_mc   *tp  = tm->ntm_xprt_private;
+	struct nlx_core_transfer_mc *ctp = &tp->xtm_core;
+	struct nlx_core_domain      *cd  = core_domain(tm);
+	struct m0_net_tm_event       tmev;
+	struct m0_net_end_point     *ep  = NULL;
 	m0_time_t                    timeout;
 	m0_time_t                    last_stat_time;
 	m0_time_t                    next_stat_time;
@@ -114,38 +139,30 @@ static void nlx_tm_ev_worker(struct m0_net_transfer_mc *tm)
 	m0_mutex_lock(&tm->ntm_mutex);
 	M0_PRE(nlx_tm_invariant(tm));
 
-	tp = tm->ntm_xprt_private;
-	ctp = &tp->xtm_core;
-	dp = tm->ntm_dom->nd_xprt_private;
-	cd = &dp->xd_core;
-
 	nlx_core_tm_set_debug(ctp, tp->_debug_);
 
-	rc = thread_confine(tp);
-	if (rc == 0)
-		rc = nlx_core_tm_start(cd, tm, ctp);
-	if (rc == 0) {
-		rc = nlx_ep_create(&tmev.nte_ep, tm, &ctp->ctm_addr);
-		if (rc != 0)
-			nlx_core_tm_stop(cd, ctp);
-	}
-
-	/*
-	  Deliver a M0_NET_TEV_STATE_CHANGE event to transition the TM to
-	  the M0_NET_TM_STARTED or M0_NET_TM_FAILED states.
-	  Set the transfer machine's end point in the event on success.
-	 */
-	if (rc == 0) {
-		tmev.nte_next_state = M0_NET_TM_STARTED;
-	} else {
-		tmev.nte_next_state = M0_NET_TM_FAILED;
-		tmev.nte_status = rc;
+	rc = tm_start(tm, &ep);
+	if (rc != 0)
 		LNET_ADDB_FUNCFAIL(rc, C_EV_WORKER, &tm->ntm_addb_ctx);
-	}
-	tmev.nte_time = m0_time_now();
+
 	tm->ntm_ep = NULL;
 	m0_mutex_unlock(&tm->ntm_mutex);
+	/*
+	 * Deliver a M0_NET_TEV_STATE_CHANGE event to transition the TM
+	 * to M0_NET_TM_STARTED or M0_NET_TM_FAILED state.
+	 * Set the transfer machine's end point in the event on success.
+	 */
+	tmev = (struct m0_net_tm_event){
+		.nte_type       = M0_NET_TEV_STATE_CHANGE,
+		.nte_next_state = (rc == 0 ? M0_NET_TM_STARTED :
+				   M0_NET_TM_FAILED),
+		.nte_tm         = tm,
+		.nte_time       = m0_time_now(),
+		.nte_status     = rc,
+		.nte_ep         = ep
+	};
 	m0_net_tm_event_post(&tmev);
+
 	if (rc != 0)
 		return;
 
-- 
1.8.3.2


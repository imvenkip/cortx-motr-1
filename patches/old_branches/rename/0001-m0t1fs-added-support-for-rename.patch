From d591c6c8643f23a3d155a7d7ff867fc28b76e10d Mon Sep 17 00:00:00 2001
From: Alexander Gattin <alexander_gattin@xyratex.com>
Date: Tue, 12 Mar 2013 17:49:34 +0200
Subject: [PATCH 1/4] m0t1fs: added support for rename()

* m0t1fs:
  - added m0t1fs_rename() function
  - added support for M0_MDSERVICE_RENAME_OPCODE to
    m0t1fs_mds_cob_fop_populate()
  - added m0t1fs_mds_cob_rename() function
  - added mo_newpfid and mo_newname members to struct m0t1fs_mdop
* mdservice:
  - use only one cob and one set of attrs in m0_md_rename(),
    don't call m0_mdstore_setattr() twice
  - use only one cob and attrs in m0_md_tick_rename(),
    don't call m0_mdstore_locate() twice
  - use r_body+r_newpfid members instead of r_sbody+r_tbody in
    struct m0_fop_rename
  - use r_body instead of r_sbody/r_tbody in mdservice/ut/lustre.c
    unit test
* mdstore:
  - use single cob parameter in m0_mdstore_rename()
  - simplify criteria for doing target m0_mdstore_unlink()
    in m0_mdstore_rename()
  - wrap long lines in m0_mdstore_rename()
  - use M0_RETURN in m0_mdstore_rename()
---
 m0t1fs/linux_kernel/dir.c    | 70 +++++++++++++++++++++++++++++++++---
 m0t1fs/linux_kernel/m0t1fs.h |  6 ++++
 mdservice/md_foms.c          | 85 +++++++++++++++-----------------------------
 mdservice/md_fops.h          |  8 ++---
 mdservice/ut/lustre.c        |  4 +--
 mdstore/mdstore.c            | 30 +++++++---------
 mdstore/mdstore.h            |  3 +-
 7 files changed, 119 insertions(+), 87 deletions(-)

diff --git a/m0t1fs/linux_kernel/dir.c b/m0t1fs/linux_kernel/dir.c
index 8173b1d..376db93 100644
--- a/m0t1fs/linux_kernel/dir.c
+++ b/m0t1fs/linux_kernel/dir.c
@@ -59,6 +59,9 @@ static int m0t1fs_link(struct dentry *old, struct inode *dir,
 static int m0t1fs_mkdir(struct inode *dir, struct dentry *dentry, int mode);
 static int m0t1fs_rmdir(struct inode *dir, struct dentry *dentry);
 
+static int m0t1fs_rename(struct inode *old_dir, struct dentry *old_dentry,
+			 struct inode *new_dir, struct dentry *new_dentry);
+
 static int m0t1fs_component_objects_op(struct m0t1fs_inode *ci,
 				       int (*func)(struct m0t1fs_sb *csb,
 						   const struct m0_fid *cfid,
@@ -105,10 +108,11 @@ const struct inode_operations m0t1fs_dir_inode_operations = {
 	.rmdir          = m0t1fs_rmdir,
 	.setattr        = m0t1fs_setattr,
 	.getattr        = m0t1fs_getattr,
-        .setxattr       = m0t1fs_setxattr,
-        .getxattr       = m0t1fs_getxattr,
-        .listxattr      = m0t1fs_listxattr,
-        .removexattr    = m0t1fs_removexattr
+	.setxattr       = m0t1fs_setxattr,
+	.getxattr       = m0t1fs_getxattr,
+	.listxattr      = m0t1fs_listxattr,
+	.removexattr    = m0t1fs_removexattr,
+	.rename         = m0t1fs_rename
 };
 
 static int name_mem2wire(struct m0_fop_str *tgt,
@@ -151,7 +155,6 @@ static void body_mem2wire(struct m0_fop_cob *body,
 	body->b_valid = valid;
 }
 
-
 /**
    Allocate fid of global file.
 
@@ -898,6 +901,44 @@ out:
 	return rc;
 }
 
+static int m0t1fs_rename(struct inode *old_dir, struct dentry *old_dentry,
+			 struct inode *new_dir, struct dentry *new_dentry)
+{
+	struct m0_fop_rename_rep *rename_rep;
+	struct m0t1fs_mdop        mo;
+	struct m0t1fs_inode      *oi    = M0T1FS_I(old_dir);
+	struct m0t1fs_inode      *ni    = M0T1FS_I(new_dir);
+	struct inode             *inode = old_dentry->d_inode;
+	struct m0t1fs_inode      *mi    = M0T1FS_I(inode);
+	struct m0t1fs_sb         *msb   = M0T1FS_SB(new_dir->i_sb);
+	int                       rc;
+
+	m0t1fs_fs_lock(msb);
+
+	M0_SET0(&mo);
+	mo.mo_attr.ca_tfid  = mi->ci_fid;
+	mo.mo_attr.ca_pfid  = oi->ci_fid;
+	mo.mo_newpfid       = ni->ci_fid;
+	mo.mo_attr.ca_valid = 0;
+	m0_buf_init(&mo.mo_attr.ca_name, (char *)old_dentry->d_name.name,
+		    old_dentry->d_name.len);
+	m0_buf_init(&mo.mo_newname, (char *)new_dentry->d_name.name,
+		    new_dentry->d_name.len);
+
+	rc = m0t1fs_mds_cob_rename(msb, &mo, &rename_rep);
+	if (rc != 0)
+		goto out;
+
+	d_instantiate(new_dentry, inode);
+	mark_inode_dirty(old_dir);
+	mark_inode_dirty(new_dir);
+
+out:
+	m0t1fs_fs_unlock(msb);
+	M0_RETURN(rc);
+	return rc;
+}
+
 /**
    See "Containers and component objects" section in m0t1fs.h for
    more information.
@@ -997,6 +1038,7 @@ static int m0t1fs_mds_cob_fop_populate(const struct m0t1fs_mdop *mo,
 	struct m0_fop_getxattr  *getxattr;
 	struct m0_fop_listxattr *listxattr;
 	struct m0_fop_delxattr  *delxattr;
+	struct m0_fop_rename    *rename;
 	struct m0_fop_cob       *req;
 	int                      rc = 0;
 
@@ -1124,6 +1166,17 @@ static int m0t1fs_mds_cob_fop_populate(const struct m0t1fs_mdop *mo,
 		req->b_tfid = mo->mo_attr.ca_tfid;
 		rc = name_mem2wire(&delxattr->d_key, &mo->mo_attr.ca_eakey);
 		break;
+	case M0_MDSERVICE_RENAME_OPCODE:
+		rename = m0_fop_data(fop);
+		req = &rename->r_body;
+
+		req->b_pfid = mo->mo_attr.ca_pfid;
+		req->b_tfid = mo->mo_attr.ca_tfid;
+		rename->r_newpfid = mo->mo_newpfid;
+		rc = name_mem2wire(&rename->r_sname, &mo->mo_attr.ca_name) ?:
+			name_mem2wire(&rename->r_tname,
+				      &mo->mo_newname);
+		break;
 	default:
 		rc = -ENOSYS;
 		break;
@@ -1436,6 +1489,13 @@ int m0t1fs_mds_cob_delxattr(struct m0t1fs_sb            *csb,
 	return m0t1fs_mds_cob_op(csb, mo, &m0_fop_delxattr_fopt, (void **)rep);
 }
 
+int m0t1fs_mds_cob_rename(struct m0t1fs_sb          *csb,
+			  const struct m0t1fs_mdop  *mo,
+			  struct m0_fop_rename_rep **rep)
+{
+	return m0t1fs_mds_cob_op(csb, mo, &m0_fop_rename_fopt, (void **)rep);
+}
+
 static int m0t1fs_ios_cob_create(struct m0t1fs_sb    *csb,
 				 const struct m0_fid *cob_fid,
 				 const struct m0_fid *gob_fid,
diff --git a/m0t1fs/linux_kernel/m0t1fs.h b/m0t1fs/linux_kernel/m0t1fs.h
index 3f5cb51..18c2f82 100644
--- a/m0t1fs/linux_kernel/m0t1fs.h
+++ b/m0t1fs/linux_kernel/m0t1fs.h
@@ -595,6 +595,8 @@ struct m0t1fs_filedata {
  */
 struct m0t1fs_mdop {
 	struct m0_cob_attr         mo_attr;
+	struct m0_fid              mo_newpfid;
+	struct m0_buf              mo_newname;
 	enum m0_layout_opcode      mo_layout_op;
 	struct m0_layout          *mo_layout;
 };
@@ -746,6 +748,10 @@ M0_INTERNAL int m0t1fs_mds_cob_delxattr(struct m0t1fs_sb            *csb,
 					const struct m0t1fs_mdop    *mo,
 					struct m0_fop_delxattr_rep **rep);
 
+M0_INTERNAL int m0t1fs_mds_cob_rename(struct m0t1fs_sb          *csb,
+				      const struct m0t1fs_mdop  *mo,
+				      struct m0_fop_rename_rep **rep);
+
 /**
  * layout operation from client to mds.
  * @param op in {CREATE/DELETE/LOOKUP}
diff --git a/mdservice/md_foms.c b/mdservice/md_foms.c
index 34fb78e..b75046d 100644
--- a/mdservice/md_foms.c
+++ b/mdservice/md_foms.c
@@ -372,52 +372,42 @@ out:
 static int m0_md_rename(struct m0_mdstore  *md,
 			struct m0_fid       *pfid_tgt,
 			struct m0_fid       *pfid_src,
-			struct m0_fid       *tfid_tgt,
 			struct m0_fid       *tfid_src,
-			struct m0_cob_attr  *tattr,
-			struct m0_cob_attr  *sattr,
-			struct m0_cob       *tcob,
-			struct m0_cob       *scob,
+			struct m0_buf       *newname,
+			struct m0_cob_attr  *attr,
+			struct m0_cob       *cob,
 			struct m0_db_tx     *tx)
 {
 	int rc;
 
-	M0_ASSERT(scob != NULL);
-	M0_ASSERT(tcob != NULL);
+	M0_ASSERT(cob != NULL);
 
 	/*
-	 * Do normal rename as all objects are fine.
+	 * Do normal rename.
 	 */
-	rc = m0_mdstore_rename(md, pfid_tgt, pfid_src, tcob, scob,
-			       &tattr->ca_name, &sattr->ca_name, tx);
+	rc = m0_mdstore_rename(md, pfid_tgt, pfid_src, cob,
+			       newname, &attr->ca_name, tx);
 	if (rc != 0)
 		return rc;
 	/*
-	 * Update attributes of source and target.
+	 * Update attributes of the object.
 	 */
-	if (m0_fid_eq(scob->co_fid, tcob->co_fid)) {
-		if (tcob->co_nsrec.cnr_nlink > 0)
-			rc = m0_mdstore_setattr(md, tcob, tattr, tx);
-	} else {
-		rc = m0_mdstore_setattr(md, scob, sattr, tx);
-		if (rc == 0 && tcob->co_nsrec.cnr_nlink > 0)
-			rc = m0_mdstore_setattr(md, tcob, tattr, tx);
-	}
+	if (cob->co_nsrec.cnr_nlink > 0)
+		rc = m0_mdstore_setattr(md, cob, attr, tx);
+
 	return rc;
 }
 
 static int m0_md_tick_rename(struct m0_fom *fom)
 {
-	struct m0_fop_cob        *sbody;
-	struct m0_fop_cob        *tbody;
+	struct m0_fop_cob        *body;
 	struct m0_fop_rename     *req;
 	struct m0_fop_rename_rep *rep;
 	struct m0_fop            *fop;
 	struct m0_fop            *fop_rep;
-	struct m0_cob            *tcob = NULL;
-	struct m0_cob            *scob = NULL;
-	struct m0_cob_attr        sattr;
-	struct m0_cob_attr        tattr;
+	struct m0_cob            *cob = NULL;
+	struct m0_cob_attr        attr;
+	struct m0_buf             newname;
 	struct m0_db_tx          *tx;
 	struct m0_mdstore        *md;
 	int                       rc;
@@ -445,39 +435,22 @@ static int m0_md_tick_rename(struct m0_fom *fom)
 	if (rc != 0)
 		goto out;
 
-	sbody = &req->r_sbody;
-	tbody = &req->r_tbody;
-
-	m0_md_cob_wire2mem(&tattr, tbody);
-	m0_buf_init(&tattr.ca_name, req->r_tname.s_buf, req->r_tname.s_len);
+	body = &req->r_body;
 
-	m0_md_cob_wire2mem(&sattr, sbody);
-	m0_buf_init(&sattr.ca_name, req->r_sname.s_buf, req->r_sname.s_len);
+	m0_md_cob_wire2mem(&attr, body);
+	m0_buf_init(&attr.ca_name, req->r_sname.s_buf, req->r_sname.s_len);
+	m0_buf_init(&newname, req->r_tname.s_buf, req->r_tname.s_len);
 
 	m0_fom_block_enter(fom);
-	rc = m0_mdstore_locate(md, &sbody->b_tfid, &scob,
+	rc = m0_mdstore_locate(md, &body->b_tfid, &cob,
 			       M0_MD_LOCATE_STORED, tx);
-	if (rc != 0) {
-		m0_fom_block_leave(fom);
-		goto out;
-	}
-	if (m0_fid_eq(&tbody->b_tfid, &sbody->b_tfid)) {
-		rc = m0_md_rename(md, &tbody->b_pfid, &sbody->b_pfid,
-				  &tbody->b_tfid, &sbody->b_tfid, &tattr,
-				  &sattr, scob, scob, tx);
-	} else {
-		rc = m0_mdstore_locate(md, &tbody->b_tfid, &tcob,
-					M0_MD_LOCATE_STORED, tx);
-		if (rc != 0) {
-			m0_fom_block_leave(fom);
-			goto out;
-		}
-		rc = m0_md_rename(md, &tbody->b_pfid, &sbody->b_pfid,
-				  &tbody->b_tfid, &sbody->b_tfid, &tattr,
-				  &sattr, tcob, scob, tx);
-		m0_cob_put(tcob);
-	}
-	m0_cob_put(scob);
+	if (rc != 0)
+		goto leave;
+
+	rc = m0_md_rename(md, &req->r_newpfid, &body->b_pfid, &body->b_tfid,
+			  &newname, &attr, cob, tx);
+	m0_cob_put(cob);
+leave:
 	m0_fom_block_leave(fom);
 out:
 	rep->r_body.b_rc = rc;
@@ -1419,12 +1392,12 @@ M0_INTERNAL int m0_md_fop_init(struct m0_fop *fop, struct m0_fom *fom)
 	case M0_MDSERVICE_RENAME_OPCODE:
 		rename = m0_fop_data(fop);
 		rc = m0_md_req_path_get(md,
-					&rename->r_sbody.b_pfid,
+					&rename->r_body.b_pfid,
 					&rename->r_spath);
 		if (rc != 0)
 			return rc;
 		rc = m0_md_req_path_get(md,
-					&rename->r_tbody.b_pfid,
+					&rename->r_newpfid,
 					&rename->r_tpath);
 		if (rc != 0) {
 			m0_free(rename->r_spath.s_buf);
diff --git a/mdservice/md_fops.h b/mdservice/md_fops.h
index 430d61b..22d31e6 100644
--- a/mdservice/md_fops.h
+++ b/mdservice/md_fops.h
@@ -139,12 +139,12 @@ struct m0_fop_unlink_rep {
 } M0_XCA_RECORD;
 
 struct m0_fop_rename {
-        struct m0_fop_cob r_sbody;
-        struct m0_fop_cob r_tbody;
+        struct m0_fop_cob r_body;
+        struct m0_fid     r_newpfid;  /* new parent fid */
         struct m0_fop_str r_spath;
         struct m0_fop_str r_tpath;
-        struct m0_fop_str r_sname;
-        struct m0_fop_str r_tname;
+        struct m0_fop_str r_sname;    /* source name */
+        struct m0_fop_str r_tname;    /* target name */
 } M0_XCA_RECORD;
 
 struct m0_fop_rename_rep {
diff --git a/mdservice/ut/lustre.c b/mdservice/ut/lustre.c
index 7b9c4b4..b809c1b 100644
--- a/mdservice/ut/lustre.c
+++ b/mdservice/ut/lustre.c
@@ -190,10 +190,10 @@ static int lustre_rename_fop(struct m0_fop *fop, void *data)
         struct m0_md_lustre_logrec *rec = data;
 
         if (rec->cr_type == RT_RENAME) {
-                lustre_copy_body(&d->r_sbody, rec);
+                lustre_copy_body(&d->r_body, rec);
                 return lustre_copy_name(&d->r_sname, rec);
         } else {
-                lustre_copy_body(&d->r_tbody, rec);
+                lustre_copy_body(&d->r_body, rec);
                 return lustre_copy_name(&d->r_tname, rec);
         }
 }
diff --git a/mdstore/mdstore.c b/mdstore/mdstore.c
index 432ebd2..a52702b 100644
--- a/mdstore/mdstore.c
+++ b/mdstore/mdstore.c
@@ -513,8 +513,7 @@ M0_INTERNAL int m0_mdstore_close(struct m0_mdstore      *md,
 M0_INTERNAL int m0_mdstore_rename(struct m0_mdstore     *md,
 				  struct m0_fid         *pfid_tgt,
 				  struct m0_fid         *pfid_src,
-				  struct m0_cob         *cob_tgt,
-				  struct m0_cob         *cob_src,
+				  struct m0_cob         *cob,
 				  struct m0_buf         *tname,
 				  struct m0_buf         *sname,
 				  struct m0_db_tx       *tx)
@@ -522,28 +521,21 @@ M0_INTERNAL int m0_mdstore_rename(struct m0_mdstore     *md,
 	struct m0_cob_nskey  *srckey = NULL;
 	struct m0_cob_nskey  *tgtkey = NULL;
 	struct m0_cob        *tncob = NULL;
-	bool                  unlink;
-	time_t                now;
 	int                   rc;
 
 	M0_ENTRY();
 	M0_ASSERT(pfid_tgt != NULL);
 	M0_ASSERT(pfid_src != NULL);
 
-	time(&now);
-
 	/*
-	 * Let's kill existing target name.
+	 * Let's kill existing target name if it's not equal to src name.
 	 */
 	rc = m0_mdstore_lookup(md, pfid_tgt, tname, &tncob, tx);
-	unlink = (tncob != NULL &&
-	    m0_cob_nskey_cmp(tncob->co_nskey, cob_tgt->co_nskey) != 0);
-
-	if (!m0_fid_eq(cob_tgt->co_fid, cob_src->co_fid) || unlink) {
-		rc = m0_mdstore_unlink(md, pfid_tgt, cob_tgt, tname, tx);
+	if (rc == 0 && tncob != NULL &&
+	    m0_cob_nskey_cmp(tncob->co_nskey, cob->co_nskey) != 0) {
+		rc = m0_mdstore_unlink(md, pfid_tgt, tncob, tname, tx);
 		if (rc != 0) {
-			if (tncob)
-				m0_cob_put(tncob);
+			m0_cob_put(tncob);
 			goto out;
 		}
 	}
@@ -552,16 +544,18 @@ M0_INTERNAL int m0_mdstore_rename(struct m0_mdstore     *md,
 	/*
 	 * Prepare src and dst keys.
 	 */
-	m0_cob_nskey_make(&srckey, pfid_src, (char *)sname->b_addr, sname->b_nob);
-	m0_cob_nskey_make(&tgtkey, pfid_tgt, (char *)tname->b_addr, tname->b_nob);
+	m0_cob_nskey_make(&srckey, pfid_src, (char *)sname->b_addr,
+			  sname->b_nob);
+	m0_cob_nskey_make(&tgtkey, pfid_tgt, (char *)tname->b_addr,
+			  tname->b_nob);
 
-	rc = m0_cob_name_update(cob_src, srckey, tgtkey, tx);
+	rc = m0_cob_name_update(cob, srckey, tgtkey, tx);
 
 	m0_free(srckey);
 	m0_free(tgtkey);
 out:
 	MDSTORE_FUNC_FAIL(RENAME, rc);
-	M0_LEAVE("rc: %d", rc);
+	M0_RETURN(rc);
 	return rc;
 }
 
diff --git a/mdstore/mdstore.h b/mdstore/mdstore.h
index 3085aa2..7160e0c 100644
--- a/mdstore/mdstore.h
+++ b/mdstore/mdstore.h
@@ -131,8 +131,7 @@ M0_INTERNAL int m0_mdstore_unlink(struct m0_mdstore     *md,
 M0_INTERNAL int m0_mdstore_rename(struct m0_mdstore     *md,
 				  struct m0_fid         *pfid_tgt,
 				  struct m0_fid         *pfid_src,
-				  struct m0_cob         *cob_tgt,
-				  struct m0_cob         *cob_src,
+				  struct m0_cob         *cob,
 				  struct m0_buf         *tname,
 				  struct m0_buf         *sname,
 				  struct m0_db_tx       *tx);
-- 
1.8.3.2


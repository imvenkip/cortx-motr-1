From f5160a61470d60e567167d8c2ea1318950ae2d1b Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Mon, 26 Nov 2012 07:04:02 +0200
Subject: [PATCH 23/71] LogD 1493: change number of * where needed for doxygen

---
 net/test/network.c     |  2 +-
 net/test/node_bulk.c   | 70 +++++++++++++++++++++++++-------------------------
 net/test/node_helper.c |  6 ++---
 net/test/node_ping.c   |  2 +-
 4 files changed, 40 insertions(+), 40 deletions(-)

diff --git a/net/test/network.c b/net/test/network.c
index d13b8b2..5b7d550 100644
--- a/net/test/network.c
+++ b/net/test/network.c
@@ -449,7 +449,7 @@ int c2_net_test_network_ep_add_slist(struct c2_net_test_network_ctx *ctx,
 			break;
 	}
 	if (rc < 0) {
-		/** c2_net_end_point_put() for last i endpoints */
+		/* c2_net_end_point_put() for last i endpoints */
 		for (; i != 0; --i)
 			c2_net_end_point_put(ctx->ntc_ep[--ctx->ntc_ep_nr]);
 	}
diff --git a/net/test/node_bulk.c b/net/test/node_bulk.c
index a1f16a3..9240dc4 100644
--- a/net/test/node_bulk.c
+++ b/net/test/node_bulk.c
@@ -111,7 +111,7 @@ enum {
  */
 struct buf_status_errno {
 	int bse_func_rc;	/**< Network buffer addition to queue */
-	int bse_cb_rc;	/**< Network buffer callback */
+	int bse_cb_rc;		/**< Network buffer callback */
 };
 
 /** Bulk transfer status */
@@ -222,7 +222,7 @@ struct node_bulk_ctx {
 	struct c2_net_test_network_ctx	   nbc_net;
 	/** Test service. Used when changing service state. */
 	struct c2_net_test_service	  *nbc_svc;
-	/* Worker thread */
+	/** Worker thread */
 	struct c2_thread		   nbc_thread;
 	/** Number of ping buffers */
 	size_t				   nbc_buf_ping_nr;
@@ -382,17 +382,17 @@ static void node_bulk_state_change(struct node_bulk_ctx *ctx,
 	C2_ASSERT(can_change);
 	bs->bsb_ts = state;
 
-	/** add to ringbufs if needed */
+	/* add to ringbufs if needed */
 	if (state == TS_UNUSED)
 		c2_net_test_ringbuf_push(&ctx->nbc_rb_bulk_unused, bs_index);
 	if (state == TS_FAILED || state == TS_TRANSFERRED || state == TS_BADMSG)
 		c2_net_test_ringbuf_push(&ctx->nbc_rb_bulk_final, bs_index);
-	/** set start & finish timestamp */
+	/* set start & finish timestamp */
 	if (state == TS_RECEIVING || state == TS_QUEUED)
 		bs->bsb_time_start = c2_time_now();
 	if (state == TS_TRANSFERRED)
 		bs->bsb_time_finish = c2_time_now();
-	/** reset buf_status_errno if needed */
+	/* reset buf_status_errno if needed */
 	if (state == TS_UNUSED) {
 		C2_SET0(&bs->bsb_msg);
 		C2_SET0(&bs->bsb_send);
@@ -408,7 +408,7 @@ node_bulk_state_search(enum transfer_state state,
 	size_t i;
 	size_t j;
 
-	/** Check for unique "from" state in the list */
+	/* Check for unique "from" state in the list */
 	for (i = 0; i < state_nr; ++i) {
 		for (j = i + 1; j < state_nr; ++j) {
 			C2_ASSERT(state_list[i].sta_from !=
@@ -484,7 +484,7 @@ void node_bulk_state_transition_auto(struct node_bulk_ctx *ctx,
 
 	role_client = ctx->nbc_nh.ntnh_role == C2_NET_TEST_ROLE_CLIENT;
 	bs = &ctx->nbc_bs[bs_index];
-	/** Check final states */
+	/* Check final states */
 	C2_ASSERT(bs->bsb_ts == TS_TRANSFERRED || bs->bsb_ts == TS_FAILED ||
 		  (!role_client && bs->bsb_ts == TS_BADMSG));
 	switch (bs->bsb_ts) {
@@ -599,7 +599,7 @@ static c2_bcount_t buf_desc_deserialize(struct node_bulk_ctx *ctx,
 	C2_PRE(buf_bulk_index < ctx->nbc_buf_bulk_nr);
 
 	buf_desc_set0(ctx, buf_bulk_index);
-	/** decode network buffer descriptors for active bulk receiving */
+	/* decode network buffer descriptors for active bulk receiving */
 	len = c2_net_test_network_bd_serialize(C2_NET_TEST_DESERIALIZE,
 					       &ctx->nbc_net, buf_bulk_index,
 					       buf_ping_index, offset);
@@ -607,7 +607,7 @@ static c2_bcount_t buf_desc_deserialize(struct node_bulk_ctx *ctx,
 		return 0;
 	len_total = c2_net_test_serialize_len_total(0, len);
 
-	/**
+	/*
 	 * buf->nb_desc = zero descriptor
 	 * bs->bsb_desc_send = descriptor for active bulk receiving
 	 */
@@ -618,13 +618,13 @@ static c2_bcount_t buf_desc_deserialize(struct node_bulk_ctx *ctx,
 					       buf_ping_index,
 					       offset + len_total);
 	if (len == 0) {
-		/** free already allocated network descriptor */
+		/* free already allocated network descriptor */
 		buf_desc_free(ctx, buf_bulk_index);
 		return 0;
 	}
 	len_total = c2_net_test_serialize_len_total(len_total, len);
 
-	/**
+	/*
 	 * buf->nb_desc = descriptor for active bulk receiving
 	 * bs->bsb_desc_send = descriptor for active bulk sending
 	 */
@@ -657,11 +657,11 @@ static c2_bcount_t node_bulk_server_transfer_start(struct node_bulk_ctx *ctx,
 		return 0;
 	}
 
-	/** get unused buf */
+	/* get unused buf */
 	buf_bulk_index = c2_net_test_ringbuf_pop(&ctx->nbc_rb_bulk_unused);
 	C2_ASSERT(buf_bulk_index < ctx->nbc_buf_bulk_nr);
 	node_bulk_state_change(ctx, buf_bulk_index, TS_BD_RECEIVED);
-	/** deserialize network buffer descriptors */
+	/* deserialize network buffer descriptors */
 	len = buf_desc_deserialize(ctx, buf_bulk_index, buf_ping_index, offset);
 	if (len == 0) {
 		C2_LOG(C2_DEBUG, "BADMSG: buf_bulk_index = %lu, "
@@ -669,12 +669,12 @@ static c2_bcount_t node_bulk_server_transfer_start(struct node_bulk_ctx *ctx,
 				 "offset = %lu",
 				 buf_bulk_index, buf_ping_index,
 				 (unsigned long) offset);
-		/** ping buffer contains invalid data */
+		/* ping buffer contains invalid data */
 		node_bulk_state_change(ctx, buf_bulk_index, TS_BADMSG);
 		return 0;
 	}
 	node_bulk_state_change(ctx, buf_bulk_index, TS_RECEIVING);
-	/** start active bulk receiving */
+	/* start active bulk receiving */
 	rc = c2_net_test_network_bulk_enqueue(&ctx->nbc_net, buf_bulk_index, 0,
 					      C2_NET_QT_ACTIVE_BULK_RECV);
 	bs = &ctx->nbc_bs[buf_bulk_index];
@@ -682,7 +682,7 @@ static c2_bcount_t node_bulk_server_transfer_start(struct node_bulk_ctx *ctx,
 				      buf_bulk_index);
 	bs->bsb_recv.bse_func_rc = rc;
 	if (rc != 0) {
-		/**
+		/*
 		 * Addition buffer to network queue failed.
 		 * Free allocated (when deserialized) network descriptors.
 		 */
@@ -734,7 +734,7 @@ static void node_bulk_cb_server(struct node_bulk_ctx *ctx,
 			buf_desc_free(ctx, buf_index);
 			return;
 		}
-		/**
+		/*
 		 * Don't free c2_net_buf_desc here to avoid
 		 * memory allocator delays.
 		 */
@@ -811,7 +811,7 @@ static void node_bulk_cb(struct c2_net_test_network_ctx *net_ctx,
 		node_bulk_state_change_cb(ctx, bs_index, ev->nbe_status == 0);
 	}
 	if (role_client && q == C2_NET_QT_MSG_SEND) {
-		/**
+		/*
 		 * Change state for every bulk buffer, which
 		 * descriptor is stored in current message.
 		 */
@@ -830,7 +830,7 @@ static void node_bulk_cb(struct c2_net_test_network_ctx *net_ctx,
 	}
 	if (!role_client && q == C2_NET_QT_MSG_RECV) {
 		C2_ASSERT(!role_client);
-		/**
+		/*
 		 * @todo nbc_stop_flag isn't protected here with lock.
 		 * is it safe?
 		 */
@@ -932,7 +932,7 @@ static void client_process_unused_bulk(struct node_bulk_ctx *ctx)
 
 	nr = c2_net_test_ringbuf_nr(&ctx->nbc_rb_bulk_unused);
 	for (i = 0; i < nr; ++i) {
-		/** Check stop conditions */
+		/* Check stop conditions */
 		transfer_next = c2_net_test_nh_transfer_next(&ctx->nbc_nh);
 		/*
 		C2_LOG(C2_DEBUG, "client: transfer_next = %s",
@@ -940,7 +940,7 @@ static void client_process_unused_bulk(struct node_bulk_ctx *ctx)
 		*/
 		if (!transfer_next)
 			break;
-		/** Start next transfer */
+		/* Start next transfer */
 		bs_index = c2_net_test_ringbuf_pop(&ctx->nbc_rb_bulk_unused);
 		/*
 		C2_LOG(C2_DEBUG, "client: next transfer bs_index = %lu",
@@ -992,11 +992,11 @@ static void client_bds_send(struct node_bulk_ctx *ctx,
 {
 	struct c2_net_test_ringbuf *rb_ping = &ctx->nbc_rb_ping_unused;
 	struct buf_status_bulk	   *bs;
-	/** Message buffer was taken from unused list */
+	/* Message buffer was taken from unused list */
 	bool			   msg_taken;
-	/** Message buffer index, makes sense iff (msg_taken) */
+	/* Message buffer index, makes sense iff (msg_taken) */
 	size_t			   msg_index;
-	/** Number of buffer descriptors in selected message buffer */
+	/* Number of buffer descriptors in selected message buffer */
 	size_t			   msg_bd_nr;
 	struct buf_status_ping	  *msg_bs;
 	c2_bcount_t		   msg_offset;
@@ -1015,7 +1015,7 @@ static void client_bds_send(struct node_bulk_ctx *ctx,
 	c2_tl_for(bsb, &ss->ssb_buffers, bs) {
 take_msg:
 		if (!msg_taken && c2_net_test_ringbuf_is_empty(rb_ping)) {
-			/**
+			/*
 			 * No free message to transfer bulk buffer
 			 * network descriptors. Cancel tranfers.
 			 */
@@ -1025,7 +1025,7 @@ take_msg:
 			bsb_tlist_del(bs);
 			continue;
 		}
-		/** Take unused msg buf number if it wasn't taken before */
+		/* Take unused msg buf number if it wasn't taken before */
 		if (!msg_taken) {
 			msg_index     = c2_net_test_ringbuf_pop(rb_ping);
 			msg_taken     = true;
@@ -1036,7 +1036,7 @@ take_msg:
 				bsb_tlist_is_empty(&msg_bs->bsp_buffers);
 			C2_ASSERT(list_is_empty);
 		}
-		/** Try to serialize two buffer descriptors */
+		/* Try to serialize two buffer descriptors */
 		len = client_bds_serialize2(&ctx->nbc_net, bs->bsb_index,
 					    msg_index, msg_offset);
 		/*
@@ -1047,12 +1047,12 @@ take_msg:
 		msg_offset += len;
 		if (len == 0) {
 			if (msg_bd_nr > 0) {
-				/** No free space in ping buffer */
+				/* No free space in ping buffer */
 				bsp_tlist_add_tail(&messages, msg_bs);
 				msg_taken = false;
 				goto take_msg;
 			} else {
-				/**
+				/*
 				 * Serializing failed for unknown reason
 				 * (or ping buffer is smaller than
 				 * size of two serialized bulk
@@ -1079,7 +1079,7 @@ take_msg:
 	c2_tl_for(bsp, &messages, msg_bs) {
 		list_is_empty = bsb_tlist_is_empty(&msg_bs->bsp_buffers);
 		C2_ASSERT(!list_is_empty);
-		/**
+		/*
 		 * Change state to BD_SENT for every bulk buffer, which
 		 * descriptor is stored in current message.
 		 */
@@ -1093,10 +1093,10 @@ take_msg:
 			C2_LOG(C2_DEBUG, "--- msg send FAILED!");
 			sd_update(ctx, MT_MSG, MS_FAILED, MD_SEND);
 		}
-		/** Save rc for future analysis */
+		/* Save rc for future analysis */
 		c2_tl_for(bsb, &msg_bs->bsp_buffers, bs) {
 			bs->bsb_msg.bse_func_rc = rc;
-			/** Change state if msg sending failed */
+			/* Change state if msg sending failed */
 			if (rc != 0) {
 				node_bulk_state_change(ctx, bs->bsb_index,
 						       TS_FAILED2);
@@ -1122,7 +1122,7 @@ static void client_process_queued_bulk(struct node_bulk_ctx *ctx)
 
 	ssb_tlist_init(&servers);
 	nr = c2_net_test_ringbuf_nr(&ctx->nbc_rb_bulk_queued);
-	/** Add queued buffer to per server list of queued buffers */
+	/* Add queued buffer to per server list of queued buffers */
 	for (i = 0; i < nr; ++i) {
 		index = c2_net_test_ringbuf_pop(&ctx->nbc_rb_bulk_queued);
 		bs = &ctx->nbc_bs[index];
@@ -1131,7 +1131,7 @@ static void client_process_queued_bulk(struct node_bulk_ctx *ctx)
 		if (!ssb_tlink_is_in(ss))
 			ssb_tlist_add_tail(&servers, ss);
 	}
-	/** Send message with buffer descriptors to every server */
+	/* Send message with buffer descriptors to every server */
 	c2_tl_for(ssb, &servers, ss) {
 		client_bds_send(ctx, ss);
 		ssb_tlist_del(ss);
@@ -1474,7 +1474,7 @@ static int node_bulk_cmd_start(void *ctx_,
 
 	sd = &ctx->nbc_nh.ntnh_sd;
 
-	/** @todo copy-paste from node_ping.c */
+	/* @todo copy-paste from node_ping.c */
 	/* fill test start time */
 	sd->ntcsd_time_start = c2_time_now();
 	/* initialize stats */
diff --git a/net/test/node_helper.c b/net/test/node_helper.c
index 0f71d13..3b4c068 100644
--- a/net/test/node_helper.c
+++ b/net/test/node_helper.c
@@ -103,11 +103,11 @@ void c2_net_test_nh_sd_update(struct c2_net_test_nh *nh,
 		msg_nr = &sd->ntcsd_transfers;
 	}
 
-	/** update 'number of messages' statistics */
+	/* update 'number of messages' statistics */
 	++msg_nr->ntmn_total;
 	msg_nr->ntmn_failed += status == MS_FAILED;
 	msg_nr->ntmn_bad    += status == MS_BAD;
-	/** update 'messages per second' statistics */
+	/* update 'messages per second' statistics */
 	if (type != MT_TRANSFER &&
 	    equi(type == MT_MSG, nh->ntnh_type == C2_NET_TEST_TYPE_PING)) {
 		mps = direction == MD_SEND ? &sd->ntcsd_mps_send :
@@ -115,7 +115,7 @@ void c2_net_test_nh_sd_update(struct c2_net_test_nh *nh,
 		c2_net_test_mps_add(mps, msg_nr->ntmn_total, c2_time_now());
 	}
 	if (type == MT_TRANSFER && nh->ntnh_role == C2_NET_TEST_ROLE_CLIENT) {
-		/** update 'finished' flag */
+		/* update 'finished' flag */
 		C2_ASSERT(msg_nr->ntmn_total <= nh->ntnh_transfers_max_nr);
 		if (msg_nr->ntmn_total == nh->ntnh_transfers_max_nr) {
 			sd->ntcsd_time_finish = c2_time_now();
diff --git a/net/test/node_ping.c b/net/test/node_ping.c
index d8f533b..6d29975 100644
--- a/net/test/node_ping.c
+++ b/net/test/node_ping.c
@@ -205,7 +205,7 @@ struct node_ping_ctx {
 	bool				    npc_buf_rb_done;
 	/** Array of buffer states */
 	struct buf_state		   *npc_buf_state;
-	/* Worker thread */
+	/** Worker thread */
 	struct c2_thread		    npc_thread;
 	union {
 		struct node_ping_client_ctx npc__client;
-- 
1.8.3.2


From f651f4a73a7003267d203da192d54409a4ede836 Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Mon, 26 Nov 2012 08:49:59 +0200
Subject: [PATCH 24/71] LogD 1495: added c2_net_test_init(), moved state
 transition checking there

---
 build_kernel_modules/Makefile.in |  14 +++--
 net/test/Makefile.am             |  16 +++---
 net/test/initfini.c              |  84 ++++++++++++++++++++++++++++
 net/test/initfini.h              |  57 +++++++++++++++++++
 net/test/node_bulk.c             | 117 ++++++++++++++++++++++++++++-----------
 net/test/node_bulk.h             |   3 +
 net/test/str.c                   |   2 -
 net/test/user_space/console_u.c  |  10 +++-
 net/test/user_space/node_u.c     |  10 +++-
 net/test/ut/main.c               |  11 +---
 10 files changed, 265 insertions(+), 59 deletions(-)
 create mode 100644 net/test/initfini.c
 create mode 100644 net/test/initfini.h

diff --git a/build_kernel_modules/Makefile.in b/build_kernel_modules/Makefile.in
index 57b0ac0..faecc36 100644
--- a/build_kernel_modules/Makefile.in
+++ b/build_kernel_modules/Makefile.in
@@ -140,12 +140,14 @@ net_bulk_emulation_ut_SOURCES   := bulk_mem_ut.c
 
 net_lnet_ut_SOURCES             := lnet_ut.c
 
-net_test_SOURCES		:= commands.c console.c network.c node_bulk.c \
-				   node_helper.c node_ping.c node.c ringbuf.c \
-				   serialize.c service.c slist.c stats.c str.c
-net_test_HEADERS		:= commands.h console.h network.h node_bulk.h \
-				   node_helper.h node_ping.h node.h ringbuf.h \
-				   serialize.h service.h slist.h stats.h str.h
+net_test_SOURCES		:= commands.c console.c initfini.c network.c  \
+				   node_bulk.c node_helper.c node_ping.c      \
+				   node.c ringbuf.c serialize.c service.c     \
+				   slist.c stats.c str.c
+net_test_HEADERS		:= commands.h console.h initfini.h network.h  \
+				   node_bulk.h node_helper.h node_ping.h      \
+				   node.h ringbuf.h serialize.h service.h     \
+				   slist.h stats.h str.h
 
 net_test_ut_SOURCES		:= client_server.c commands.c main.c	      \
 				   network.c ringbuf.c serialize.c service.c  \
diff --git a/net/test/Makefile.am b/net/test/Makefile.am
index 2c1466b..efc7051 100644
--- a/net/test/Makefile.am
+++ b/net/test/Makefile.am
@@ -2,14 +2,14 @@ noinst_LTLIBRARIES		= libcolibri-net-test.la
 
 INCLUDES			= -I. -I$(top_srcdir) -I$(top_srcdir)/include
 
-net_test_SRC			= commands.c console.c network.c node_bulk.c  \
-				  node_helper.c node_ping.c node.c ringbuf.c  \
-				  serialize.c service.c slist.c stats.c str.c \
-				  user_space/stats_u.c
-net_test_HDR			= commands.h console.h network.h node_bulk.h  \
-				  node_helper.h node_ping.h node.h ringbuf.h  \
-				  serialize.h service.h slist.h stats.h str.h \
-				  user_space/stats_u.h
+net_test_SRC			= commands.c console.c initfini.c network.c    \
+				  node_bulk.c node_helper.c node_ping.c node.c \
+				  ringbuf.c serialize.c service.c slist.c      \
+				  stats.c str.c user_space/stats_u.c
+net_test_HDR			= commands.h console.h initfini.h network.h    \
+				  node_bulk.h node_helper.h node_ping.h node.h \
+				  ringbuf.h serialize.h service.h slist.h      \
+				  stats.h str.h user_space/stats_u.h
 
 libcolibri_net_test_la_SOURCES	= $(net_test_HDR) $(net_test_SRC)
 
diff --git a/net/test/initfini.c b/net/test/initfini.c
new file mode 100644
index 0000000..8d8f555
--- /dev/null
+++ b/net/test/initfini.c
@@ -0,0 +1,84 @@
+/* -*- C -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Maxim Medved <max_medved@xyratex.com>
+ * Original creation date: 11/26/2012
+ */
+
+#include "lib/cdefs.h"			/* ARRAY_SIZE */
+
+#include "net/test/network.h"		/* c2_net_test_network_init */
+#include "net/test/node_bulk.h"		/* c2_net_test_node_bulk_init */
+
+#include "net/test/initfini.h"
+
+/**
+   @defgroup NetTestInitFiniInternals Initialization/finalization of net-test
+   @ingroup NetTestInternals
+
+   @see
+   @ref net-test
+
+   @{
+ */
+
+struct init_fini {
+	int  (*if_init)(void);
+	void (*if_fini)(void);
+};
+
+struct init_fini if_list[] = {
+#define NET_TEST_MODULE(name) {			  \
+	.if_init = c2_net_test_ ## name ## _init, \
+	.if_fini = c2_net_test_ ## name ## _fini, \
+}
+	NET_TEST_MODULE(network),
+#undef NET_TEST_MODULE
+};
+
+int c2_net_test_init(void)
+{
+	size_t i;
+	int rc = 0;
+
+	for (i = 0; i < ARRAY_SIZE(if_list); ++i) {
+		rc = if_list[i].if_init();
+		if (rc != 0) {
+			for (; i != 0; --i)
+				if_list[i - 1].if_fini();
+			break;
+		}
+	}
+	return rc;
+}
+
+void c2_net_test_fini(void)
+{
+}
+
+/**
+   @} end of NetTestInitFiniInternals group
+ */
+
+/*
+ *  Local variables:
+ *  c-indentation-style: "K&R"
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ *  fill-column: 79
+ *  scroll-step: 1
+ *  End:
+ */
diff --git a/net/test/initfini.h b/net/test/initfini.h
new file mode 100644
index 0000000..2111fe0
--- /dev/null
+++ b/net/test/initfini.h
@@ -0,0 +1,57 @@
+/* -*- C -*- */
+/*
+ * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
+ *
+ * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
+ * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
+ * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
+ * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
+ * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
+ * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
+ * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
+ *
+ * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
+ * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
+ * http://www.xyratex.com/contact
+ *
+ * Original author: Maxim Medved <max_medved@xyratex.com>
+ * Original creation date: 11/26/2012
+ */
+
+#pragma once
+
+#ifndef __COLIBRI_NET_TEST_INITFINI_H__
+#define __COLIBRI_NET_TEST_INITFINI_H__
+
+#include "net/test/serialize.h"
+
+
+/**
+   @defgroup NetTestInitFiniDFS Initialization/finalization of net-test
+   @ingroup NetTestDFS
+
+   @see
+   @ref net-test
+
+   @{
+ */
+
+/** Initialize net-test */
+int c2_net_test_init(void);
+void c2_net_test_fini(void);
+
+/**
+   @} end of NetTestInitFiniDFS group
+ */
+
+#endif /*  __COLIBRI_NET_TEST_INITFINI_H__ */
+
+/*
+ *  Local variables:
+ *  c-indentation-style: "K&R"
+ *  c-basic-offset: 8
+ *  tab-width: 8
+ *  fill-column: 79
+ *  scroll-step: 1
+ *  End:
+ */
diff --git a/net/test/node_bulk.c b/net/test/node_bulk.c
index 9240dc4..4def747 100644
--- a/net/test/node_bulk.c
+++ b/net/test/node_bulk.c
@@ -400,21 +400,78 @@ static void node_bulk_state_change(struct node_bulk_ctx *ctx,
 	}
 }
 
-static enum transfer_state
-node_bulk_state_search(enum transfer_state state,
-		       const struct state_transition state_list[],
-		       size_t state_nr)
+static const struct state_transition node_bulk_client_success[] = {
+	{ .sta_from = TS_BD_SENT,	.sta_to = TS_CB_LEFT2 },
+	{ .sta_from = TS_CB_LEFT2,	.sta_to = TS_CB_LEFT1 },
+	{ .sta_from = TS_CB_LEFT1,	.sta_to = TS_TRANSFERRED },
+	{ .sta_from = TS_FAILED2,	.sta_to = TS_FAILED1 },
+	{ .sta_from = TS_FAILED1,	.sta_to = TS_FAILED },
+};
+static const struct state_transition node_bulk_client_failure[] = {
+	{ .sta_from = TS_BD_SENT,	.sta_to = TS_FAILED2 },
+	{ .sta_from = TS_CB_LEFT2,	.sta_to = TS_FAILED1 },
+	{ .sta_from = TS_CB_LEFT1,	.sta_to = TS_FAILED },
+	{ .sta_from = TS_FAILED2,	.sta_to = TS_FAILED1 },
+	{ .sta_from = TS_FAILED1,	.sta_to = TS_FAILED },
+};
+static const struct state_transition node_bulk_server_success[] = {
+	{ .sta_from = TS_RECEIVING,	.sta_to = TS_SENDING },
+	{ .sta_from = TS_SENDING,	.sta_to = TS_TRANSFERRED },
+};
+static const struct state_transition node_bulk_server_failure[] = {
+	{ .sta_from = TS_RECEIVING,	.sta_to = TS_FAILED },
+	{ .sta_from = TS_SENDING,	.sta_to = TS_FAILED },
+};
+
+static const struct {
+	const struct state_transition *nbst_transition;
+	const size_t		       nbst_nr;
+} node_bulk_state_transitions[] = {
+#define TRANSITION(name) {		\
+	.nbst_transition = name,	\
+	.nbst_nr = ARRAY_SIZE(name),	\
+}
+	TRANSITION(node_bulk_client_success),
+	TRANSITION(node_bulk_client_failure),
+	TRANSITION(node_bulk_server_success),
+	TRANSITION(node_bulk_server_failure),
+#undef TRANSITION
+};
+
+/** Check for unique "from" state in the list */
+static void node_bulk_state_check(const struct state_transition state_list[],
+				  size_t state_nr)
 {
 	size_t i;
 	size_t j;
 
-	/* Check for unique "from" state in the list */
 	for (i = 0; i < state_nr; ++i) {
 		for (j = i + 1; j < state_nr; ++j) {
 			C2_ASSERT(state_list[i].sta_from !=
 				  state_list[j].sta_from);
 		}
 	}
+}
+
+/** Check for unique "from" state in all state transitions */
+static void node_bulk_state_check_all(void)
+{
+	size_t i;
+
+	for (i = 0; i < ARRAY_SIZE(node_bulk_state_transitions); ++i) {
+		node_bulk_state_check(
+			node_bulk_state_transitions[i].nbst_transition,
+			node_bulk_state_transitions[i].nbst_nr);
+	}
+}
+
+static enum transfer_state
+node_bulk_state_search(enum transfer_state state,
+		       const struct state_transition state_list[],
+		       size_t state_nr)
+{
+	size_t i;
+
 	for (i = 0; i < state_nr; ++i) {
 		if (state_list[i].sta_from == state)
 			return state_list[i].sta_to;
@@ -426,28 +483,6 @@ static void node_bulk_state_change_cb(struct node_bulk_ctx *ctx,
 				      size_t bs_index,
 				      bool success)
 {
-	static const struct state_transition client_success[] = {
-		{ .sta_from = TS_BD_SENT,	.sta_to = TS_CB_LEFT2 },
-		{ .sta_from = TS_CB_LEFT2,	.sta_to = TS_CB_LEFT1 },
-		{ .sta_from = TS_CB_LEFT1,	.sta_to = TS_TRANSFERRED },
-		{ .sta_from = TS_FAILED2,	.sta_to = TS_FAILED1 },
-		{ .sta_from = TS_FAILED1,	.sta_to = TS_FAILED },
-	};
-	static const struct state_transition client_failure[] = {
-		{ .sta_from = TS_BD_SENT,	.sta_to = TS_FAILED2 },
-		{ .sta_from = TS_CB_LEFT2,	.sta_to = TS_FAILED1 },
-		{ .sta_from = TS_CB_LEFT1,	.sta_to = TS_FAILED },
-		{ .sta_from = TS_FAILED2,	.sta_to = TS_FAILED1 },
-		{ .sta_from = TS_FAILED1,	.sta_to = TS_FAILED },
-	};
-	static const struct state_transition server_success[] = {
-		{ .sta_from = TS_RECEIVING,	.sta_to = TS_SENDING },
-		{ .sta_from = TS_SENDING,	.sta_to = TS_TRANSFERRED },
-	};
-	static const struct state_transition server_failure[] = {
-		{ .sta_from = TS_RECEIVING,	.sta_to = TS_FAILED },
-		{ .sta_from = TS_SENDING,	.sta_to = TS_FAILED },
-	};
 	const struct state_transition *transition;
 	size_t			       transition_size;
 	enum transfer_state	       state;
@@ -457,13 +492,19 @@ static void node_bulk_state_change_cb(struct node_bulk_ctx *ctx,
 	C2_PRE(ctx->nbc_bs != NULL);
 
 	if (ctx->nbc_nh.ntnh_role == C2_NET_TEST_ROLE_CLIENT) {
-		transition	= success ? client_success : client_failure;
-		transition_size = success ? ARRAY_SIZE(client_success) :
-					    ARRAY_SIZE(client_failure);
+		transition	= success ?
+				  node_bulk_client_success :
+				  node_bulk_client_failure;
+		transition_size = success ?
+				  ARRAY_SIZE(node_bulk_client_success) :
+				  ARRAY_SIZE(node_bulk_client_failure);
 	} else if (ctx->nbc_nh.ntnh_role == C2_NET_TEST_ROLE_SERVER) {
-		transition	= success ? server_success : server_failure;
-		transition_size = success ? ARRAY_SIZE(server_success) :
-					    ARRAY_SIZE(server_failure);
+		transition	= success ?
+				  node_bulk_server_success :
+				  node_bulk_server_failure;
+		transition_size = success ?
+				  ARRAY_SIZE(node_bulk_server_success) :
+				  ARRAY_SIZE(node_bulk_server_failure);
 	} else {
 		C2_IMPOSSIBLE("Invalid node role in net-test bulk testing");
 	}
@@ -1570,6 +1611,16 @@ struct c2_net_test_service_ops c2_net_test_node_bulk_ops = {
 	.ntso_cmd_handler_nr = ARRAY_SIZE(node_bulk_cmd_handler),
 };
 
+int c2_net_test_node_bulk_init(void)
+{
+	node_bulk_state_check_all();
+	return 0;
+}
+
+void c2_net_test_node_bulk_fini(void)
+{
+}
+
 /**
    @} end of NetTestBulkNodeInternals group
  */
diff --git a/net/test/node_bulk.h b/net/test/node_bulk.h
index 9b4506b..0225182 100644
--- a/net/test/node_bulk.h
+++ b/net/test/node_bulk.h
@@ -34,6 +34,9 @@
 
 extern struct c2_net_test_service_ops c2_net_test_node_bulk_ops;
 
+int c2_net_test_node_bulk_init(void);
+void c2_net_test_node_bulk_fini(void);
+
 /**
    @} end of NetTestBulkNodeDFS group
  */
diff --git a/net/test/str.c b/net/test/str.c
index 8c94e9b..2be811f 100644
--- a/net/test/str.c
+++ b/net/test/str.c
@@ -32,8 +32,6 @@
    @defgroup NetTestStrInternals Serialization of ASCIIZ string
    @ingroup NetTestInternals
 
-   @todo move to net/test/str.h
-
    @see
    @ref net-test
 
diff --git a/net/test/user_space/console_u.c b/net/test/user_space/console_u.c
index 97824fb..e71bb2a 100644
--- a/net/test/user_space/console_u.c
+++ b/net/test/user_space/console_u.c
@@ -32,6 +32,7 @@
 #include "net/test/slist.h"		/* c2_net_test_slist */
 #include "net/test/stats.h"		/* c2_net_test_stats */
 #include "net/test/console.h"		/* c2_net_test_console_ctx */
+#include "net/test/initfini.h"		/* c2_net_test_init */
 
 /**
    @page net-test-fspec-cli-console Test console command line parameters
@@ -615,6 +616,11 @@ int main(int argc, char *argv[])
 	if (rc != 0)
 		return rc;
 
+	rc = c2_net_test_init();
+	c2_net_test_u_print_error("Net-test initialization failed", rc);
+	if (rc != 0)
+		goto colibri_fini;
+
 	rc = configure(argc, argv, &cfg);
 	if (rc != 0) {
 		if (rc == 1) {
@@ -625,7 +631,7 @@ int main(int argc, char *argv[])
 			c2_net_test_u_printf("Error in configuration.\n");
 			config_free(&cfg);
 		}
-		goto colibri_fini;
+		goto net_test_fini;
 	}
 
 	rc = c2_net_test_console_init(&console, &cfg);
@@ -639,6 +645,8 @@ int main(int argc, char *argv[])
 	c2_net_test_console_fini(&console);
 cfg_free:
 	config_free(&cfg);
+net_test_fini:
+	c2_net_test_fini();
 colibri_fini:
 	c2_fini();
 
diff --git a/net/test/user_space/node_u.c b/net/test/user_space/node_u.c
index 6013d88..c3e1150 100644
--- a/net/test/user_space/node_u.c
+++ b/net/test/user_space/node_u.c
@@ -30,6 +30,7 @@
 
 #include "net/test/user_space/common_u.h" /* c2_net_test_u_str_copy */
 #include "net/test/node.h"
+#include "net/test/initfini.h"		/* c2_net_test_init */
 
 /**
    @page net-test-fspec-cli-node-user Test node command line pamameters
@@ -104,6 +105,11 @@ int main(int argc, char *argv[])
 	if (rc != 0)
 		return rc;
 
+	rc = c2_net_test_init();
+	c2_net_test_u_print_error("Net-test initialization failed", rc);
+	if (rc != 0)
+		goto colibri_fini;
+
 	/** @todo add Ctrl+C handler
 	   c2_net_test_fini()+c2_net_test_config_fini() */
 	/** @todo atexit() */
@@ -117,7 +123,7 @@ int main(int argc, char *argv[])
 			c2_net_test_u_printf("Error in configuration.\n");
 			config_free(&cfg);
 		}
-		goto colibri_fini;
+		goto net_test_fini;
 	}
 
 	c2_net_test_u_printf_v("c2_net_test_node_init()\n");
@@ -142,6 +148,8 @@ node_fini:
 	c2_net_test_node_fini(&node);
 cfg_free:
 	config_free(&cfg);
+net_test_fini:
+	c2_net_test_fini();
 colibri_fini:
 	c2_net_test_u_printf_v("c2_fini()\n");
 	c2_fini();
diff --git a/net/test/ut/main.c b/net/test/ut/main.c
index 632b84d..7fe0bf8 100644
--- a/net/test/ut/main.c
+++ b/net/test/ut/main.c
@@ -20,7 +20,7 @@
 
 #include "lib/ut.h"		/* c2_test_suite */
 
-#include "net/test/network.h"	/* c2_net_test_network_init */
+#include "net/test/initfini.h"	/* c2_net_test_init */
 
 extern void c2_net_test_ringbuf_ut(void);
 
@@ -45,20 +45,15 @@ extern void c2_net_test_cmd_ut_multiple(void);
 extern void c2_net_test_client_server_ping_ut(void);
 extern void c2_net_test_client_server_bulk_ut(void);
 
-static int net_test_init(void)
-{
-	return c2_net_test_network_init();
-}
-
 static int net_test_fini(void)
 {
-	c2_net_test_network_fini();
+	c2_net_test_fini();
 	return 0;
 }
 
 const struct c2_test_suite c2_net_test_ut = {
 	.ts_name = "net-test",
-	.ts_init = net_test_init,
+	.ts_init = c2_net_test_init,
 	.ts_fini = net_test_fini,
 	.ts_tests = {
 		{ "ringbuf",		c2_net_test_ringbuf_ut		  },
-- 
1.8.3.2


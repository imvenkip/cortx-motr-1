From 18ef45b5bf1a2840fa7e0a75f152402281d91356 Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Mon, 24 Dec 2012 02:29:56 +0200
Subject: [PATCH 60/71] snapshot #1 of code with freeze

---
 net/test/ut/network.c | 729 +++++++++++++++++++++++---------------------------
 1 file changed, 331 insertions(+), 398 deletions(-)

diff --git a/net/test/ut/network.c b/net/test/ut/network.c
index b9d1edb..6b27ccc 100644
--- a/net/test/ut/network.c
+++ b/net/test/ut/network.c
@@ -29,6 +29,22 @@
 /* START COPY-PASTE FROM client_server.c */
 #ifdef __KERNEL__
 #include <linux/kgdb.h>
+#endif
+
+#include "lib/ut.h"			/* C2_UT_ASSERT */
+#include "lib/memory.h"			/* c2_free */
+#include "lib/thread.h"			/* C2_THREAD_INIT */
+#include "lib/semaphore.h"		/* c2_semaphore_down */
+#include "lib/misc.h"			/* C2_SET0 */
+#include "lib/trace.h"			/* C2_LOG */
+
+#include "net/lnet/lnet.h"		/* C2_NET_LNET_PID */
+
+#include "net/test/node.h"		/* c2_net_test_node_ctx */
+#include "net/test/console.h"		/* c2_net_test_console_ctx */
+
+#ifdef __KERNEL__
+#include <linux/kgdb.h>
 #include <linux/completion.h>
 #endif
 
@@ -513,105 +529,7 @@ void c2_net_test_network_ut_buf_desc(void)
  ***********************************************************************
  */
 
-enum {
-	NODE_WAIT_CMD_GRANULARITY_MS = 20,
-};
-
-/** Node configuration */
-struct c2_net_test_node_cfg {
-	/** Node endpoint address (for commands) */
-	char	 *ntnc_addr;
-	/** Console endpoint address (for commands) */
-	char	 *ntnc_addr_console;
-	/** Send commands timeout. @see c2_net_test_commands_init(). */
-	c2_time_t ntnc_send_timeout;
-};
-
-/** Node context. */
-struct c2_net_test_node_ctx {
-	/** Commands context. Connected to the test console. */
-	struct c2_net_test_cmd_ctx     ntnc_cmd;
-	/** Node thread */
-	struct c2_thread	       ntnc_thread;
-	/**
-	   Exit flag for the node thread.
-	   Node thread will check this flag and will terminate if it is set.
-	 */
-	bool			       ntnc_exit_flag;
-	/**
-	 * 'node-thread-was-finished' semaphore.
-	 * Initialized to 0. External routines can down() or timeddown()
-	 * this semaphore to wait for the node thread.
-	 * up() at the end of the node thread.
-	 */
-	struct c2_semaphore	       ntnc_thread_finished_sem;
-};
-
-/**
- * Console configuration.
- * Set by console user before calling c2_net_test_init()
- */
-struct c2_net_test_console_cfg {
-	/** Console commands endpoint address for the test servers */
-	char			*ntcc_addr_console4servers;
-	/** Console commands endpoint address for the test clients */
-	char			*ntcc_addr_console4clients;
-	/**
-	 * List of test server command endpoints.
-	 * Test console will use this endpoints for sending/receiving
-	 * commands to/from test servers.
-	 */
-	struct c2_net_test_slist ntcc_servers;
-	/**
-	 * List of test client command endpoints.
-	 * @see c2_net_test_console_cfg.ntcc_servers
-	 */
-	struct c2_net_test_slist ntcc_clients;
-	/**
-	 * List of test server data endpoints.
-	 * Every test server will create one transfer machine with endpoint
-	 * from this list. Every test client will send/receive test messages
-	 * to/from all test server data endpoints.
-	 */
-	struct c2_net_test_slist ntcc_data_servers;
-	/**
-	 * List of test client data endpoints.
-	 * @see c2_net_test_console_cfg.ntcc_data_servers
-	 */
-	struct c2_net_test_slist ntcc_data_clients;
-	/** Commands send timeout for the test nodes and test console */
-	c2_time_t		 ntcc_cmd_send_timeout;
-	/** Commands receive timeout for the test nodes and test console */
-	c2_time_t		 ntcc_cmd_recv_timeout;
-};
-
-/** Test console context for the node role */
-struct c2_net_test_console_role_ctx {
-	/** Commands structure */
-	struct c2_net_test_cmd_ctx	   *ntcrc_cmd;
-	/** Accumulated status data */
-	struct c2_net_test_cmd_status_data *ntcrc_sd;
-	/** Number of nodes */
-	size_t				    ntcrc_nr;
-	/** -errno for the last function */
-	int				   *ntcrc_errno;
-	/** status of last received *_DONE command */
-	int				   *ntcrc_status;
-};
-
-/** Test console context */
-struct c2_net_test_console_ctx {
-	/** Test console configuration */
-	struct c2_net_test_console_cfg	   *ntcc_cfg;
-	/** Test clients */
-	struct c2_net_test_console_role_ctx ntcc_clients;
-	/** Test servers */
-	struct c2_net_test_console_role_ctx ntcc_servers;
-};
-
-static struct c2_net_test_node_cfg client_cfg;
-static struct c2_net_test_node_cfg server_cfg;
-
+#if 0
 #ifdef __KERNEL__
 static DECLARE_COMPLETION(client_completion);
 static DECLARE_COMPLETION(server_completion);
@@ -645,193 +563,218 @@ static void net_test_complete(struct c2_semaphore *completion)
 	c2_semaphore_up(completion);
 #endif
 }
+#endif
+
+enum {
+	NTCS_PID		  = C2_NET_LNET_PID,
+	NTCS_PORTAL		  = 42,
+	NTCS_NODES_MAX		  = 128,
+	NTCS_NODE_ADDR_MAX	  = 0x100,
+	/** @todo 20min for debugging in gdb */
+	NTCS_TIMEOUT_CMD_MS	  = 1200000,
+	NTCS_TIMEOUT_SEND_MS	  = 1200000,
+	NTCS_TIMEOUT_RECV_MS	  = 1200000,
+	NTCS_TIMEOUT_BULK_MS	  = 1200000,
+	/*
+	NTCS_TIMEOUT_CMD_MS	  = 20000,
+	NTCS_TIMEOUT_SEND_MS	  = 20000,
+	NTCS_TIMEOUT_RECV_MS	  = 20000,
+	NTCS_TIMEOUT_BULK_MS	  = 20000,
+	*/
+	NTCS_TMID_CONSOLE4CLIENTS = 2998,
+	NTCS_TMID_CONSOLE4SERVERS = 2999,
+	NTCS_TMID_NODES		  = 3000,
+	NTCS_TMID_CMD_CLIENTS	  = NTCS_TMID_NODES,
+	NTCS_TMID_DATA_CLIENTS    = NTCS_TMID_NODES + NTCS_NODES_MAX * 1,
+	NTCS_TMID_CMD_SERVERS	  = NTCS_TMID_NODES + NTCS_NODES_MAX * 2,
+	NTCS_TMID_DATA_SERVERS    = NTCS_TMID_NODES + NTCS_NODES_MAX * 3,
+};
+
+static struct c2_net_test_node_cfg node_cfg[NTCS_NODES_MAX * 2];
+static struct c2_thread		   node_thread[NTCS_NODES_MAX * 2];
+static struct c2_semaphore	   node_init_sem;
+
+static char *addr_console4clients;
+static char *addr_console4servers;
+static char  clients[(NTCS_NODES_MAX + 1) * NTCS_NODE_ADDR_MAX];
+static char  servers[(NTCS_NODES_MAX + 1) * NTCS_NODE_ADDR_MAX];
+static char  clients_data[(NTCS_NODES_MAX + 1) * NTCS_NODE_ADDR_MAX];
+static char  servers_data[(NTCS_NODES_MAX + 1) * NTCS_NODE_ADDR_MAX];
+
+static c2_time_t timeout_cmd;
+static c2_time_t timeout_send;
+static c2_time_t timeout_recv;
+static c2_time_t timeout_bulk;
+
+static char *addr_get(const char *nid, int tmid)
+{
+	char  addr[NTCS_NODE_ADDR_MAX];
+	char *result;
+	int   rc;
+
+	rc = snprintf(addr, NTCS_NODE_ADDR_MAX,
+		     "%s:%d:%d:%d", nid, NTCS_PID, NTCS_PORTAL, tmid);
+	C2_UT_ASSERT(rc < NTCS_NODE_ADDR_MAX);
+
+	result = c2_alloc(rc + 1);
+	C2_UT_ASSERT(result != NULL);
+	return strncpy(result, addr, rc + 1);
+}
 
-static void node_thread(struct c2_net_test_node_ctx *ctx)
+static void addr_free(char *addr)
 {
-	struct c2_net_test_cmd cmd;
-	struct c2_net_test_cmd reply;
-	int		       rc;
-	bool		       done_flag;
+	c2_free(addr);
+}
 
-	C2_PRE(ctx != NULL);
+static c2_time_t ms2time(int ms)
+{
+	c2_time_t time;
 
-	done_flag = false;
-	do {
-		/* get command */
-		rc = c2_net_test_commands_recv(&ctx->ntnc_cmd,
-					       &cmd, c2_time_now());
-		if (rc == 0)
-			rc = c2_net_test_commands_recv_enqueue(&ctx->ntnc_cmd,
-							cmd.ntc_buf_index);
-		if (rc == 0 && cmd.ntc_ep_index >= 0) {
-			/* we have command. handle it */
-			reply.ntc_done.ntcd_errno = 0;
-			reply.ntc_type = C2_NET_TEST_CMD_INIT_DONE;
-			reply.ntc_ep_index = cmd.ntc_ep_index;
-			c2_net_test_commands_received_free(&cmd);
-			/* send reply */
-			c2_net_test_commands_send_wait_all(&ctx->ntnc_cmd);
-			rc = c2_net_test_commands_send(&ctx->ntnc_cmd, &reply);
-			C2_SET0(&cmd);
-			done_flag = true;
-		} else if (rc == -ETIMEDOUT) {
-			/* we haven't command. take a step. */
-		} else {
-			break;
-		}
-	} while (!done_flag && !ctx->ntnc_exit_flag);
-	c2_semaphore_up(&ctx->ntnc_thread_finished_sem);
+	return c2_time_set(&time,NTCS_TIMEOUT_SEND_MS / 1000,
+			   (NTCS_TIMEOUT_SEND_MS % 1000) * 1000000);
 }
 
-static void net_test_node(struct c2_net_test_node_cfg *node_cfg)
+static void node_cfg_fill(struct c2_net_test_node_cfg *ncfg,
+			  char *addr_cmd,
+			  char *addr_cmd_list,
+			  char *addr_data,
+			  char *addr_data_list,
+			  char *addr_console,
+			  bool last_node)
+{
+	ncfg->ntnc_addr		= addr_cmd;
+	ncfg->ntnc_addr_console = addr_console;
+	ncfg->ntnc_send_timeout = timeout_cmd;
+
+	strncat(addr_cmd_list, ncfg->ntnc_addr, NTCS_NODE_ADDR_MAX);
+	strncat(addr_cmd_list, last_node ? "" : ",", 2);
+	strncat(addr_data_list, addr_data, NTCS_NODE_ADDR_MAX);
+	strncat(addr_data_list, last_node ? "" : ",", 2);
+
+	addr_free(addr_data);
+}
+
+static void net_test_node2(struct c2_net_test_node_cfg *node_cfg)
 {
 	struct c2_net_test_node_ctx *ctx;
-	struct c2_net_test_slist     ep_list;
 	int			     rc;
-	int			     counter = 0;
 
-	LOGD("enter");
 	C2_PRE(node_cfg != NULL);
 
 	C2_ALLOC_PTR(ctx);
 	C2_ASSERT(ctx != NULL);
-	C2_SET0(ctx);
-
-	LOGD("checkpoint %d", counter++);
-	rc = c2_net_test_slist_init(&ep_list, node_cfg->ntnc_addr_console, '`');
-	if (rc != 0)
-		goto failed;
-	LOGD("checkpoint %d", counter++);
-	rc = c2_net_test_commands_init(&ctx->ntnc_cmd,
-				       node_cfg->ntnc_addr,
-				       node_cfg->ntnc_send_timeout,
-				       NULL,
-				       &ep_list);
-	c2_net_test_slist_fini(&ep_list);
-	LOGD("checkpoint %d", counter++);
-	if (rc != 0)
-		goto failed;
-	LOGD("checkpoint %d", counter++);
-	rc = c2_semaphore_init(&ctx->ntnc_thread_finished_sem, 0);
-	if (rc != 0)
-		goto commands_fini;
+	rc = c2_net_test_node_init(ctx, node_cfg);
 	C2_UT_ASSERT(rc == 0);
-	ctx->ntnc_exit_flag = false;
-	LOGD("checkpoint %d", counter++);
-	rc = C2_THREAD_INIT(&ctx->ntnc_thread, struct c2_net_test_node_ctx *,
-			    NULL, &node_thread, ctx, "BUG_NODE_THREAD");
-	LOGD("checkpoint %d", counter++);
+	rc = c2_net_test_node_start(ctx);
 	C2_UT_ASSERT(rc == 0);
-	LOGD("checkpoint %d", counter++);
-	if (node_cfg == &client_cfg) {
-		//LOGD("net_test_complete(&client_completion);");
-		net_test_complete(&client_completion);
-	} else if (node_cfg == &server_cfg) {
-		//LOGD("net_test_complete(&server_completion);");
-		net_test_complete(&server_completion);
-	} else {
-		C2_IMPOSSIBLE("invalid node_cfg");
-	}
+	c2_semaphore_up(&node_init_sem);
 	/* wait for the test node thread */
-	LOGD("checkpoint %d", counter++);
 	c2_semaphore_down(&ctx->ntnc_thread_finished_sem);
-	ctx->ntnc_exit_flag = true;
-	LOGD("checkpoint %d", counter++);
-	c2_net_test_commands_send_wait_all(&ctx->ntnc_cmd);
-	LOGD("checkpoint %d", counter++);
-	rc = c2_thread_join(&ctx->ntnc_thread);
-	C2_ASSERT(rc == 0);
-	LOGD("checkpoint %d", counter++);
-	c2_thread_fini(&ctx->ntnc_thread);
-	LOGD("checkpoint %d", counter++);
-	c2_semaphore_fini(&ctx->ntnc_thread_finished_sem);
-commands_fini:
-	LOGD("checkpoint %d", counter++);
-	c2_net_test_commands_fini(&ctx->ntnc_cmd);
-failed:
-	LOGD("checkpoint %d", counter++);
+	c2_net_test_node_stop(ctx);
+	c2_net_test_node_fini(ctx);
 	c2_free(ctx);
-	LOGD("leave");
 }
 
-static int console_role_init_fini(struct c2_net_test_console_role_ctx *ctx,
-				  struct c2_net_test_console_cfg *cfg,
-				  enum c2_net_test_role role)
+static void console_cmd_init_fill(struct c2_net_test_console_cfg *cfg,
+				  enum c2_net_test_role role,
+				  struct c2_net_test_cmd_init *cinit)
 {
-	struct c2_net_test_slist *nodes;
-	char			 *addr_console;
-	int			  rc = -ENOMEM;
-	int			  counter = 0;
-
-	LOGD("enter");
-	if (cfg == NULL)
-		goto fini;
-
-	LOGD("checkpoint %d", counter++);
-	addr_console = role == C2_NET_TEST_ROLE_CLIENT ?
-		cfg->ntcc_addr_console4clients : cfg->ntcc_addr_console4servers;
-	nodes = role == C2_NET_TEST_ROLE_CLIENT ?
-		&cfg->ntcc_clients : &cfg->ntcc_servers;
-
-	LOGD("checkpoint %d", counter++);
-	C2_ALLOC_PTR(ctx->ntcrc_cmd);
-	if (ctx->ntcrc_cmd == NULL)
-		goto fail;
-	LOGD("checkpoint %d", counter++);
-	C2_ALLOC_PTR(ctx->ntcrc_sd);
-	if (ctx->ntcrc_sd == NULL)
-		goto fini_cmd;
-	ctx->ntcrc_nr = nodes->ntsl_nr;
-	LOGD("checkpoint %d", counter++);
-	C2_ALLOC_ARR(ctx->ntcrc_errno, ctx->ntcrc_nr);
-	if (ctx->ntcrc_errno == NULL)
-		goto fini_sd;
-	LOGD("checkpoint %d", counter++);
-	C2_ALLOC_ARR(ctx->ntcrc_status, ctx->ntcrc_nr);
-	if (ctx->ntcrc_status == NULL)
-		goto fini_errno;
-
-	LOGD("checkpoint %d", counter++);
-	rc = c2_net_test_commands_init(ctx->ntcrc_cmd, addr_console,
-				       cfg->ntcc_cmd_send_timeout, NULL, nodes);
-	LOGD("checkpoint %d", counter++);
-	if (rc != 0)
-		goto fini_status;
-
-	rc = 0;
-	goto success;
-
-fini:
-	rc = 0;
-	c2_net_test_commands_fini(ctx->ntcrc_cmd);
-fini_status:
-	c2_free(ctx->ntcrc_status);
-fini_errno:
-	c2_free(ctx->ntcrc_errno);
-fini_sd:
-	c2_free(ctx->ntcrc_sd);
-fini_cmd:
-	c2_free(ctx->ntcrc_cmd);
-fail:
-success:
-	LOGD("leave");
-	return rc;
+	cinit->ntci_role	     = role;
+	cinit->ntci_type	     = cfg->ntcc_test_type;
+	cinit->ntci_msg_nr	     = cfg->ntcc_msg_nr;
+	cinit->ntci_msg_size	     = cfg->ntcc_msg_size;
+	cinit->ntci_bd_buf_nr	     = role == C2_NET_TEST_ROLE_CLIENT ?
+				       cfg->ntcc_bd_buf_nr_client :
+				       cfg->ntcc_bd_buf_nr_server;
+	cinit->ntci_bd_buf_size	     = cfg->ntcc_bd_buf_size;
+	cinit->ntci_bd_nr_max	     = cfg->ntcc_bd_nr_max;
+	cinit->ntci_msg_concurrency  = role == C2_NET_TEST_ROLE_CLIENT ?
+				       cfg->ntcc_concurrency_client :
+				       cfg->ntcc_concurrency_server;
+	/** @todo other timeouts */
+	cinit->ntci_buf_send_timeout = cfg->ntcc_buf_send_timeout;
+	cinit->ntci_buf_bulk_timeout = cfg->ntcc_buf_bulk_timeout;
+	cinit->ntci_ep		     = role == C2_NET_TEST_ROLE_CLIENT ?
+				       cfg->ntcc_data_servers :
+				       cfg->ntcc_data_clients;
 }
 
-static int console_init_fini(struct c2_net_test_console_ctx *ctx,
-			     struct c2_net_test_console_cfg *cfg)
+static void status_data_reset(struct c2_net_test_cmd_status_data *sd)
 {
-	int rc;
-
-	C2_PRE(ctx != NULL);
+	/* Statistics reset order is not important here */
+	struct c2_net_test_msg_nr * const msg_nr[] = {
+		&sd->ntcsd_msg_nr_send,
+		&sd->ntcsd_msg_nr_recv,
+		&sd->ntcsd_bulk_nr_send,
+		&sd->ntcsd_bulk_nr_recv,
+		&sd->ntcsd_transfers,
+	};
+	struct c2_net_test_stats * const stats[] = {
+		&sd->ntcsd_mps_send.ntmps_stats,
+		&sd->ntcsd_mps_recv.ntmps_stats,
+		&sd->ntcsd_rtt,
+	};
+	size_t i;
+
+	C2_SET0(sd);
+	for (i = 0; i < ARRAY_SIZE(msg_nr); ++i)
+		c2_net_test_msg_nr_reset(msg_nr[i]);
+	for (i = 0; i < ARRAY_SIZE(stats); ++i)
+		c2_net_test_stats_reset(stats[i]);
+	sd->ntcsd_finished    = true;
+	sd->ntcsd_time_start  = C2_TIME_NEVER;
+	sd->ntcsd_time_finish = C2_MKTIME(0, 0);
+}
 
-	ctx->ntcc_cfg = cfg;
-	rc = console_role_init_fini(&ctx->ntcc_clients, cfg,
-				    C2_NET_TEST_ROLE_CLIENT);
-	if (rc == 0)
-		rc = console_role_init_fini(&ctx->ntcc_servers, cfg,
-					    C2_NET_TEST_ROLE_SERVER);
-	return rc;
+static void status_data_add(struct c2_net_test_cmd_status_data *all_sd,
+			    const struct c2_net_test_cmd_status_data *cmd_sd)
+{
+	/* Parts of statistics are independent here, so order isn't important */
+	const struct {
+		struct c2_net_test_msg_nr	*nr_all;
+		const struct c2_net_test_msg_nr *nr_node;
+	} msg_nr[] = {
+		{	.nr_all  = &all_sd->ntcsd_msg_nr_send,
+			.nr_node = &cmd_sd->ntcsd_msg_nr_send	},
+		{	.nr_all  = &all_sd->ntcsd_msg_nr_recv,
+			.nr_node = &cmd_sd->ntcsd_msg_nr_recv	},
+		{	.nr_all  = &all_sd->ntcsd_bulk_nr_send,
+			.nr_node = &cmd_sd->ntcsd_bulk_nr_send	},
+		{	.nr_all  = &all_sd->ntcsd_bulk_nr_recv,
+			.nr_node = &cmd_sd->ntcsd_bulk_nr_recv	},
+		{	.nr_all  = &all_sd->ntcsd_transfers,
+			.nr_node = &cmd_sd->ntcsd_transfers	},
+	};
+	const struct {
+		struct c2_net_test_stats       *s_all;
+		const struct c2_net_test_stats *s_node;
+	} stats[] = {
+		{	.s_all  = &all_sd->ntcsd_mps_send.ntmps_stats,
+			.s_node = &cmd_sd->ntcsd_mps_send.ntmps_stats	},
+		{	.s_all  = &all_sd->ntcsd_mps_recv.ntmps_stats,
+			.s_node = &cmd_sd->ntcsd_mps_recv.ntmps_stats	},
+		{	.s_all  = &all_sd->ntcsd_rtt,
+			.s_node = &cmd_sd->ntcsd_rtt,			},
+	};
+	size_t i;
+
+	LOGD("new STATUS_DATA:\n");
+	LOGD("send total = %lu\n", cmd_sd->ntcsd_msg_nr_send.ntmn_total);
+	LOGD("recv total = %lu\n", cmd_sd->ntcsd_msg_nr_recv.ntmn_total);
+	LOGD("finished = %d\n", cmd_sd->ntcsd_finished);
+	LOGD("end of STATUS_DATA\n");
+	for (i = 0; i < ARRAY_SIZE(msg_nr); ++i)
+		c2_net_test_msg_nr_add(msg_nr[i].nr_all, msg_nr[i].nr_node);
+	for (i = 0; i < ARRAY_SIZE(stats); ++i)
+		c2_net_test_stats_add_stats(stats[i].s_all, stats[i].s_node);
+	all_sd->ntcsd_finished &= cmd_sd->ntcsd_finished;
+	if (cmd_sd->ntcsd_finished) {
+		all_sd->ntcsd_time_start = min_check(all_sd->ntcsd_time_start,
+						     cmd_sd->ntcsd_time_start);
+		all_sd->ntcsd_time_finish =
+			max_check(all_sd->ntcsd_time_finish,
+				  cmd_sd->ntcsd_time_finish);
+	}
 }
 
 static size_t net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
@@ -842,6 +785,7 @@ static size_t net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 	struct c2_net_test_console_cfg	    *cfg;
 	struct c2_net_test_cmd_ctx	    *cmd_ctx;
 	struct c2_net_test_cmd		     cmd;
+	struct c2_net_test_cmd_status_data  *sd = NULL;
 	int				     i;
 	int				     j;
 	int				     rc;
@@ -870,6 +814,9 @@ static size_t net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 	C2_SET0(&cmd);
 	cfg = ctx->ntcc_cfg;
 
+	if (cmd_type == C2_NET_TEST_CMD_INIT)
+		console_cmd_init_fill(cfg, role, &cmd.ntc_init);
+
 	role_client  = role == C2_NET_TEST_ROLE_CLIENT;
 	cmd.ntc_type = cmd_type;
 	nodes	     = role_client ? &cfg->ntcc_clients : &cfg->ntcc_servers;
@@ -904,6 +851,11 @@ static size_t net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 	}
 	c2_net_test_commands_send_wait_all(cmd_ctx);
 
+	/* receive answers */
+	if (answer[cmd_type] == C2_NET_TEST_CMD_STATUS_DATA) {
+		sd = rctx->ntcrc_sd;
+		status_data_reset(sd);
+	}
 	deadline = c2_time_add(c2_time_now(), cfg->ntcc_cmd_recv_timeout);
 	while (c2_time_now() <= deadline && rcvd_nr < nodes->ntsl_nr) {
 		rc = c2_net_test_commands_recv(cmd_ctx, &cmd, deadline);
@@ -929,7 +881,14 @@ static size_t net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 		if (rctx->ntcrc_errno[j] != 0)
 			goto reuse_cmd;
 		/* handle incoming command */
-		success_nr++;
+		if (answer[cmd_type] == C2_NET_TEST_CMD_STATUS_DATA) {
+			status_data_add(sd, &cmd.ntc_status_data);
+			success_nr++;
+		} else {
+			rctx->ntcrc_status[j] = cmd.ntc_done.ntcd_errno;
+			if (rctx->ntcrc_status[j] == 0)
+				success_nr++;
+		}
 		/*
 		 * @todo console user can't recover from this error -
 		 * cmd.ntc_buf_index is lost. use ringbuf to save?
@@ -944,166 +903,140 @@ reuse_cmd:
 		c2_net_test_commands_received_free(&cmd);
 	}
 
-	return success_nr;
-}
-
-/*
-struct timer_break_ctx {
-	struct c2_thread    tbc_thread;
-	struct c2_semaphore tbc_sem;
-	c2_time_t	    tbc_delay;
-};
+	LOGD("console: rc = %d\n", rc);
 
-static void timer_break_thread(struct timer_break_ctx *ctx)
-{
-	c2_semaphore_timeddown(&ctx->tbc_sem, ctx->tbc_delay);
-#ifdef __KERNEL__
-	kgdb_breakpoint();
-#endif
-}
-
-static void timer_break_init(struct timer_break_ctx *ctx, c2_time_t delay)
-{
-	int rc;
-
-	rc = C2_THREAD_INIT(&ctx->tbc_thread,
-			    struct timer_break_ctx *,
-			    NULL, &timer_break_thread, ctx,
-			    "TIMER_BREAK");
-	C2_UT_ASSERT(rc == 0);
-	rc = c2_semaphore_init(&ctx->tbc_sem, 0);
-	C2_UT_ASSERT(rc == 0);
+	return success_nr;
 }
 
-static void timer_break_fini(struct timer_break_ctx *ctx)
+void c2_net_test_bug_ut(void)
 {
-	int rc;
+	struct c2_net_test_console_cfg console_cfg;
+	struct c2_net_test_console_ctx console;
+	int			       rc;
+	int			       i;
+	const char		      *nid = "0@lo";
+	enum c2_net_test_type	       type = C2_NET_TEST_TYPE_STUB;
+	size_t			       clients_nr = 1;
+	size_t			       servers_nr = 1;
+	size_t			       concurrency_client = 1;
+	size_t			       concurrency_server = 1;
+	size_t			       msg_nr = 1;
+	c2_bcount_t		       msg_size = 1;
+	size_t			       bd_buf_nr_client = 0;
+	size_t			       bd_buf_nr_server = 0;
+	c2_bcount_t		       bd_buf_size = 0;
+	size_t			       bd_nr_max = 0;
 
-	C2_PRE(ctx != 0);
-
-	c2_semaphore_up(&ctx->tbc_sem);
-	rc = c2_thread_join(&ctx->tbc_thread);
-	C2_ASSERT(rc == 0);
-	c2_thread_fini(&ctx->tbc_thread);
-	c2_semaphore_fini(&ctx->tbc_sem);
-}
-*/
-
-static void kgdb_break(void)
-{
 #ifdef __KERNEL__
 	kgdb_breakpoint();
 #endif
-}
 
-void c2_net_test_bug_ut(void)
-{
-	static struct c2_thread		   client_thread;
-	static struct c2_thread		   server_thread;
-	struct c2_net_test_console_cfg	  *console_cfg;
-	struct c2_net_test_console_ctx	  *console;
-	int				   rc;
-	c2_time_t			   debug_timeout = C2_MKTIME(2, 0);
-	// struct timer_break_ctx		   break_10s;
-	int				   counter = 0;
-
-	LOGD("enter");
-
-	C2_ALLOC_PTR(console);
-	C2_ASSERT(console != NULL);
-	C2_ALLOC_PTR(console_cfg);
-	C2_ASSERT(console_cfg != NULL);
-	kgdb_break();
-	LOGD("checkpoint %d", counter++);
-	// timer_break_init(&break_10s, C2_MKTIME(10, 0));
+	C2_PRE(clients_nr <= NTCS_NODES_MAX);
+	C2_PRE(servers_nr <= NTCS_NODES_MAX);
 	/* prepare config for test clients and test servers */
-	client_cfg.ntnc_addr	     = "0@lo:12345:42:3128";
-	client_cfg.ntnc_addr_console = "0@lo:12345:42:2998";
-	client_cfg.ntnc_send_timeout = debug_timeout;
-	server_cfg.ntnc_addr	     = "0@lo:12345:42:3384";
-	server_cfg.ntnc_addr_console = "0@lo:12345:42:2999";
-	server_cfg.ntnc_send_timeout = debug_timeout;
+	timeout_cmd  = ms2time(NTCS_TIMEOUT_CMD_MS);
+	timeout_send = ms2time(NTCS_TIMEOUT_SEND_MS);
+	timeout_recv = ms2time(NTCS_TIMEOUT_RECV_MS);
+	timeout_bulk = ms2time(NTCS_TIMEOUT_BULK_MS);
+	addr_console4clients = addr_get(nid, NTCS_TMID_CONSOLE4CLIENTS);
+	addr_console4servers = addr_get(nid, NTCS_TMID_CONSOLE4SERVERS);
+	clients[0] = '\0';
+	clients_data[0] = '\0';
+	for (i = 0; i < clients_nr; ++i) {
+		node_cfg_fill(&node_cfg[i],
+			      addr_get(nid, NTCS_TMID_CMD_CLIENTS + i), clients,
+			      addr_get(nid, NTCS_TMID_DATA_CLIENTS + i),
+			      clients_data, addr_console4clients,
+			      i == clients_nr - 1);
+	}
+	servers[0] = '\0';
+	servers_data[0] = '\0';
+	for (i = 0; i < servers_nr; ++i) {
+		node_cfg_fill(&node_cfg[clients_nr + i],
+			      addr_get(nid, NTCS_TMID_CMD_SERVERS + i), servers,
+			      addr_get(nid, NTCS_TMID_DATA_SERVERS + i),
+			      servers_data, addr_console4servers,
+			      i == servers_nr - 1);
+	}
 	/* spawn test clients and test servers */
-	LOGD("checkpoint %d", counter++);
-	LOGD("checkpoint %d", counter++);
-	rc = C2_THREAD_INIT(&client_thread,
-			    struct c2_net_test_node_cfg *,
-			    NULL, &net_test_node, &client_cfg,
-			    "BUG_CLIENT_THREAD");
-	C2_UT_ASSERT(rc == 0);
-	LOGD("checkpoint %d", counter++);
-	rc = C2_THREAD_INIT(&server_thread,
-			    struct c2_net_test_node_cfg *,
-			    NULL, &net_test_node, &server_cfg,
-			    "BUG_SERVER_THREAD");
-	C2_UT_ASSERT(rc == 0);
+	c2_semaphore_init(&node_init_sem, 0);
+	for (i = 0; i < clients_nr + servers_nr; ++i) {
+		rc = C2_THREAD_INIT(&node_thread[i],
+				    struct c2_net_test_node_cfg *,
+				    NULL, &net_test_node2, &node_cfg[i],
+				    "ut_node_thread#%d", i);
+		C2_UT_ASSERT(rc == 0);
+	}
 	/* wait until test node started */
-	LOGD("checkpoint %d", counter++);
-	//LOGD("net_test_wait_for_completion(&client_completion);");
-	net_test_wait_for_completion(&client_completion);
-	LOGD("checkpoint %d", counter++);
-	//LOGD("net_test_wait_for_completion(&server_completion);");
-	net_test_wait_for_completion(&server_completion);
-	LOGD("checkpoint %d", counter++);
+	for (i = 0; i < clients_nr + servers_nr; ++i)
+		c2_semaphore_down(&node_init_sem);
+	c2_semaphore_fini(&node_init_sem);
 	/* prepare console config */
-	console_cfg->ntcc_addr_console4servers = "0@lo:12345:42:2999";
-	console_cfg->ntcc_addr_console4clients = "0@lo:12345:42:2998";
-	LOGD("checkpoint %d", counter++);
-	kgdb_break();
-	rc = c2_net_test_slist_init(&console_cfg->ntcc_clients,
-				    "0@lo:12345:42:3128", ',');
-	LOGD("checkpoint %d", counter++);
+	console_cfg.ntcc_addr_console4servers = addr_console4servers;
+	console_cfg.ntcc_addr_console4clients = addr_console4clients;
+	rc = c2_net_test_slist_init(&console_cfg.ntcc_clients, clients, ',');
 	C2_UT_ASSERT(rc == 0);
-	rc = c2_net_test_slist_init(&console_cfg->ntcc_servers,
-				    "0@lo:12345:42:3384", ',');
-	LOGD("checkpoint %d", counter++);
+	rc = c2_net_test_slist_init(&console_cfg.ntcc_servers, servers, ',');
 	C2_UT_ASSERT(rc == 0);
-	rc = c2_net_test_slist_init(&console_cfg->ntcc_data_clients,
-				    "0@lo:12345:42:3000", ',');
-	LOGD("checkpoint %d", counter++);
+	rc = c2_net_test_slist_init(&console_cfg.ntcc_data_clients,
+				    clients_data, ',');
 	C2_UT_ASSERT(rc == 0);
-	rc = c2_net_test_slist_init(&console_cfg->ntcc_data_servers,
-				    "0@lo:12345:42:3256", ',');
-	LOGD("checkpoint %d", counter++);
+	rc = c2_net_test_slist_init(&console_cfg.ntcc_data_servers,
+				    servers_data, ',');
 	C2_UT_ASSERT(rc == 0);
-	console_cfg->ntcc_cmd_send_timeout   = debug_timeout;
-	console_cfg->ntcc_cmd_recv_timeout   = debug_timeout;
+	console_cfg.ntcc_cmd_send_timeout   = timeout_cmd;
+	console_cfg.ntcc_cmd_recv_timeout   = timeout_cmd;
+	console_cfg.ntcc_buf_send_timeout   = timeout_send;
+	console_cfg.ntcc_buf_recv_timeout   = timeout_recv;
+	console_cfg.ntcc_buf_bulk_timeout   = timeout_bulk;
+	console_cfg.ntcc_test_type	    = type;
+	console_cfg.ntcc_msg_nr		    = msg_nr;
+	console_cfg.ntcc_msg_size	    = msg_size;
+	console_cfg.ntcc_bd_buf_nr_server   = bd_buf_nr_server;
+	console_cfg.ntcc_bd_buf_nr_client   = bd_buf_nr_client;
+	console_cfg.ntcc_bd_buf_size	    = bd_buf_size;
+	console_cfg.ntcc_bd_nr_max	    = bd_nr_max;
+	console_cfg.ntcc_concurrency_server = concurrency_server;
+	console_cfg.ntcc_concurrency_client = concurrency_client;
 	/* initialize console */
-	LOGD("checkpoint %d", counter++);
-	rc = console_init_fini(console, console_cfg);
+	LOGD("console init");
+	rc = c2_net_test_console_init(&console, &console_cfg);
 	C2_UT_ASSERT(rc == 0);
 	/* send INIT to the test servers */
-	LOGD("checkpoint %d", counter++);
-	rc = net_test_console_cmd(console, C2_NET_TEST_ROLE_SERVER,
-				  C2_NET_TEST_CMD_INIT);
-	C2_UT_ASSERT(rc == 1);
+	LOGD("sending INIT to the test servers");
+	rc = net_test_console_cmd(&console, C2_NET_TEST_ROLE_SERVER,
+				     C2_NET_TEST_CMD_INIT);
+	C2_UT_ASSERT(rc == servers_nr);
 	/* send INIT to the test clients */
-	LOGD("checkpoint %d", counter++);
-	rc = net_test_console_cmd(console, C2_NET_TEST_ROLE_CLIENT,
-				  C2_NET_TEST_CMD_INIT);
-	C2_UT_ASSERT(rc == 1);
-	LOGD("checkpoint %d", counter++);
+	LOGD("sending INIT to the test clients");
+	rc = net_test_console_cmd(&console, C2_NET_TEST_ROLE_CLIENT,
+				     C2_NET_TEST_CMD_INIT);
+	C2_UT_ASSERT(rc == clients_nr);
+	/* send STOP command to the test clients */
+	LOGD("sending STOP to the test clients");
+	rc = net_test_console_cmd(&console, C2_NET_TEST_ROLE_CLIENT,
+				     C2_NET_TEST_CMD_STOP);
+	C2_UT_ASSERT(rc == clients_nr);
+	/* send STOP command to the test servers */
+	LOGD("sending STOP to the test servers");
+	rc = net_test_console_cmd(&console, C2_NET_TEST_ROLE_SERVER,
+				     C2_NET_TEST_CMD_STOP);
+	C2_UT_ASSERT(rc == servers_nr);
 	/* finalize console */
-	c2_net_test_slist_fini(&console_cfg->ntcc_servers);
-	c2_net_test_slist_fini(&console_cfg->ntcc_clients);
-	c2_net_test_slist_fini(&console_cfg->ntcc_data_servers);
-	c2_net_test_slist_fini(&console_cfg->ntcc_data_clients);
-	LOGD("checkpoint %d", counter++);
-	rc = console_init_fini(console, NULL);
-	C2_UT_ASSERT(rc == 0);
+	c2_net_test_console_fini(&console);
+	c2_net_test_slist_fini(&console_cfg.ntcc_servers);
+	c2_net_test_slist_fini(&console_cfg.ntcc_clients);
+	c2_net_test_slist_fini(&console_cfg.ntcc_data_servers);
+	c2_net_test_slist_fini(&console_cfg.ntcc_data_clients);
 	/* finalize test clients and test servers */
-	LOGD("checkpoint %d", counter++);
-	rc = c2_thread_join(&client_thread);
-	C2_UT_ASSERT(rc == 0);
-	c2_thread_fini(&client_thread);
-	LOGD("checkpoint %d", counter++);
-	rc = c2_thread_join(&server_thread);
-	C2_UT_ASSERT(rc == 0);
-	c2_thread_fini(&server_thread);
-	c2_free(console_cfg);
-	c2_free(console);
-	LOGD("leave");
-	// timer_break_fini(&break_10s);
+	for (i = 0; i < clients_nr + servers_nr; ++i) {
+		rc = c2_thread_join(&node_thread[i]);
+		C2_UT_ASSERT(rc == 0);
+		c2_thread_fini(&node_thread[i]);
+		addr_free(node_cfg[i].ntnc_addr);
+	}
+	addr_free(addr_console4servers);
+	addr_free(addr_console4clients);
 }
 
 /* END COPY-PASTE FROM client_server.c */
-- 
1.8.3.2


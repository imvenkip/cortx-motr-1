From 24ecac576d00ed3b65a0e76b10a0dedd30d11781 Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Sat, 12 Jan 2013 20:16:09 +0200
Subject: [PATCH 61/71] snapshot of code without freeze, needs code cleaning

---
 lib/linux_kernel/semaphore.c |   4 +
 net/test/commands.c          |  62 +++--
 net/test/console.c           |  52 ++--
 net/test/network.c           |   1 +
 net/test/node.c              |  95 ++++---
 net/test/str.c               |   1 +
 net/test/ut/client_server.c  | 129 +++++----
 net/test/ut/commands.c       | 190 ++++++++++++-
 net/test/ut/main.c           |  10 +-
 net/test/ut/network.c        | 650 ++++++++++++++++++++++++++++++++++++++-----
 10 files changed, 950 insertions(+), 244 deletions(-)

diff --git a/lib/linux_kernel/semaphore.c b/lib/linux_kernel/semaphore.c
index c2b1673..48f2e8a 100644
--- a/lib/linux_kernel/semaphore.c
+++ b/lib/linux_kernel/semaphore.c
@@ -79,6 +79,10 @@ bool c2_semaphore_timeddown(struct c2_semaphore *semaphore,
 	ts.tv_sec  = c2_time_seconds(reltime);
 	ts.tv_nsec = c2_time_nanoseconds(reltime);
 	reljiffies = timespec_to_jiffies(&ts);
+	/*
+	if (reljiffies == 0)
+		reljiffies = 1;
+	*/
 
 	return down_timeout(&semaphore->s_sem, reljiffies) == 0;
 }
diff --git a/net/test/commands.c b/net/test/commands.c
index f97f339..25e3080 100644
--- a/net/test/commands.c
+++ b/net/test/commands.c
@@ -23,27 +23,26 @@
 #include <stdio.h>		/* printf */
 #endif
 
-/** @todo debug only, remove it */
-#ifndef __KERNEL__
-/*
-#define LOGD(format, ...) printf(format, ##__VA_ARGS__)
-*/
-#define LOGD(format, ...) do {} while (0)
-#else
-#define LOGD(format, ...) do {} while (0)
-#endif
-
 #include "lib/cdefs.h"		/* container_of */
 #include "lib/types.h"		/* c2_bcount_t */
 #include "lib/misc.h"		/* C2_SET0 */
 #include "lib/memory.h"		/* C2_ALLOC_ARR */
 #include "lib/errno.h"		/* ENOMEM */
+#include "lib/trace.h"		/* C2_LOG */
 
 #include "net/test/serialize.h"	/* c2_net_test_serialize */
 #include "net/test/str.h"	/* c2_net_test_str */
 
 #include "net/test/commands.h"
 
+bool net_test_commands_debug = false;
+
+#define LOGD(...)						\
+	do {							\
+		if (net_test_commands_debug)			\
+			C2_LOG(C2_DEBUG, ##__VA_ARGS__);	\
+	} while (0)
+
 /**
    @defgroup NetTestCommandsInternals Commands
    @ingroup NetTestInternals
@@ -241,7 +240,10 @@ static void commands_cb_msg_recv(struct c2_net_test_network_ctx *net_ctx,
 	struct c2_net_test_cmd_ctx *ctx = cmd_ctx_extract(net_ctx);
 
 	C2_PRE(c2_net_test_commands_invariant(ctx));
+	C2_PRE(buf_index >= ctx->ntcc_ep_nr && buf_index < ctx->ntcc_ep_nr * 3);
 	C2_PRE(q == C2_NET_QT_MSG_RECV);
+	LOGD("C2_NET_QT_MSG_RECV commands callback from %s",
+	     ev->nbe_ep == NULL ? "NULL" : ev->nbe_ep->nep_addr);
 
 	/* save endpoint and buffer status */
 	if (ev->nbe_ep != NULL)
@@ -265,6 +267,10 @@ static void commands_cb_msg_send(struct c2_net_test_network_ctx *net_ctx,
 
 	C2_PRE(c2_net_test_commands_invariant(ctx));
 	C2_PRE(q == C2_NET_QT_MSG_SEND);
+	C2_PRE(buf_index < ctx->ntcc_ep_nr);
+	LOGD("C2_NET_QT_MSG_SEND commands callback to %s",
+	     ev->nbe_buffer->nb_ep == NULL ? "NULL" :
+	     ev->nbe_buffer->nb_ep->nep_addr);
 
 	/* invoke 'message sent' callback if it is present */
 	if (ctx->ntcc_send_cb != NULL)
@@ -302,6 +308,8 @@ static int commands_recv_enqueue(struct c2_net_test_cmd_ctx *ctx,
 {
 	int rc;
 
+	C2_PRE(buf_index >= ctx->ntcc_ep_nr && buf_index < ctx->ntcc_ep_nr * 3);
+
 	ctx->ntcc_buf_status[buf_index].ntcbs_in_recv_queue = true;
 	rc = c2_net_test_network_msg_recv(&ctx->ntcc_net, buf_index);
 	if (rc != 0)
@@ -325,9 +333,9 @@ static void commands_recv_ep_put(struct c2_net_test_cmd_ctx *ctx,
 }
 
 static bool is_buf_in_recv_q(struct c2_net_test_cmd_ctx *ctx,
-			  size_t buf_index)
+			     size_t buf_index)
 {
-	C2_PRE(buf_index < ctx->ntcc_ep_nr * 3);
+	C2_PRE(buf_index >= ctx->ntcc_ep_nr && buf_index < ctx->ntcc_ep_nr * 3);
 
 	return ctx->ntcc_buf_status[buf_index].ntcbs_in_recv_queue;
 }
@@ -465,12 +473,10 @@ int c2_net_test_commands_send(struct c2_net_test_cmd_ctx *ctx,
 	C2_PRE(c2_net_test_commands_invariant(ctx));
 	C2_PRE(cmd != NULL);
 
-	LOGD("c2_net_test_commands_send:\n");
-	LOGD("> from:\t\t%s\n", ctx->ntcc_net.ntc_tm->ntm_ep->nep_addr);
-	LOGD("> to %lu:\t\t%s\n", cmd->ntc_ep_index,
-	     ctx->ntcc_net.ntc_ep[cmd->ntc_ep_index]->nep_addr);
-	LOGD("> cmd->ntc_type = %d\n", cmd->ntc_type);
-	LOGD("end.\n");
+	LOGD("c2_net_test_commands_send: from %s to %lu %s cmd->ntc_type = %d",
+	     ctx->ntcc_net.ntc_tm->ntm_ep->nep_addr, cmd->ntc_ep_index,
+	     ctx->ntcc_net.ntc_ep[cmd->ntc_ep_index]->nep_addr,
+	     cmd->ntc_type);
 
 	buf_index = cmd->ntc_ep_index;
 	buf = c2_net_test_network_buf(&ctx->ntcc_net, C2_NET_TEST_BUF_PING,
@@ -495,6 +501,7 @@ void c2_net_test_commands_send_wait_all(struct c2_net_test_cmd_ctx *ctx)
 	int64_t nr;
 	int64_t i;
 
+	LOGD("c2_net_test_commands_send_wait_all enter");
 	C2_PRE(c2_net_test_commands_invariant(ctx));
 
 	c2_mutex_lock(&ctx->ntcc_send_mutex);
@@ -502,8 +509,12 @@ void c2_net_test_commands_send_wait_all(struct c2_net_test_cmd_ctx *ctx)
 	ctx->ntcc_send_nr = 0;
 	c2_mutex_unlock(&ctx->ntcc_send_mutex);
 
-	for (i = 0; i < nr; ++i)
+	LOGD("nr = %ld", (long) nr);
+	for (i = 0; i < nr; ++i) {
+		LOGD("semaphore_down() #%ld", (long) i);
 		c2_semaphore_down(&ctx->ntcc_sem_send);
+	}
+	LOGD("c2_net_test_commands_send_wait_all leave");
 }
 
 int c2_net_test_commands_recv(struct c2_net_test_cmd_ctx *ctx,
@@ -555,13 +566,12 @@ done:
 	/* buffer now not in receive queue */
 	ctx->ntcc_buf_status[buf_index].ntcbs_in_recv_queue = false;
 
-	LOGD("c2_net_test_commands_recv:\n");
-	LOGD("> rc = %d\n", rc);
-	LOGD("> from %lu:\t%s\n", cmd->ntc_ep_index,
-	     ctx->ntcc_net.ntc_ep[cmd->ntc_ep_index]->nep_addr);
-	LOGD("> to:\t\t%s\n", ctx->ntcc_net.ntc_tm->ntm_ep->nep_addr);
-	LOGD("> cmd->ntc_type = %d\n", cmd->ntc_type);
-	LOGD("end.\n");
+	LOGD("c2_net_test_commands_recv: from %lu %s to %s "
+	     "rc = %d cmd->ntc_type = %d",
+	     cmd->ntc_ep_index,
+	     ctx->ntcc_net.ntc_ep[cmd->ntc_ep_index]->nep_addr,
+	     ctx->ntcc_net.ntc_tm->ntm_ep->nep_addr,
+	     rc, cmd->ntc_type);
 
 	return rc;
 }
diff --git a/net/test/console.c b/net/test/console.c
index 4ec63c0..6ff24f4 100644
--- a/net/test/console.c
+++ b/net/test/console.c
@@ -52,8 +52,8 @@
  */
 
 static int console_role_init_fini(struct c2_net_test_console_role_ctx *ctx,
-				 struct c2_net_test_console_cfg *cfg,
-				 enum c2_net_test_role role)
+				  struct c2_net_test_console_cfg *cfg,
+				  enum c2_net_test_role role)
 {
 	struct c2_net_test_slist *nodes;
 	char			 *addr_console;
@@ -242,7 +242,7 @@ size_t c2_net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 	struct c2_net_test_console_role_ctx *rctx;
 	struct c2_net_test_console_cfg	    *cfg;
 	struct c2_net_test_cmd_ctx	    *cmd_ctx;
-	struct c2_net_test_cmd		     cmd;
+	struct c2_net_test_cmd		    *cmd;
 	struct c2_net_test_cmd_status_data  *sd = NULL;
 	int				     i;
 	int				     j;
@@ -269,22 +269,24 @@ size_t c2_net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 	       cmd_type == C2_NET_TEST_CMD_STOP ||
 	       cmd_type == C2_NET_TEST_CMD_STATUS);
 
-	C2_SET0(&cmd);
+	C2_ALLOC_PTR(cmd);
+	if (cmd == NULL)
+		goto done;
 	cfg = ctx->ntcc_cfg;
 
 	if (cmd_type == C2_NET_TEST_CMD_INIT)
-		console_cmd_init_fill(cfg, role, &cmd.ntc_init);
+		console_cmd_init_fill(cfg, role, &cmd->ntc_init);
 
-	role_client  = role == C2_NET_TEST_ROLE_CLIENT;
-	cmd.ntc_type = cmd_type;
-	nodes	     = role_client ? &cfg->ntcc_clients : &cfg->ntcc_servers;
-	nodes_data   = role_client ? &cfg->ntcc_data_clients :
-				     &cfg->ntcc_data_servers;
+	role_client   = role == C2_NET_TEST_ROLE_CLIENT;
+	cmd->ntc_type = cmd_type;
+	nodes	      = role_client ? &cfg->ntcc_clients : &cfg->ntcc_servers;
+	nodes_data    = role_client ? &cfg->ntcc_data_clients :
+				      &cfg->ntcc_data_servers;
 	rctx	     = role_client ? &ctx->ntcc_clients : &ctx->ntcc_servers;
 	cmd_ctx	     = rctx->ntcrc_cmd;
 
 	/* clear commands receive queue */
-	while ((rc = c2_net_test_commands_recv(cmd_ctx, &cmd, c2_time_now())) !=
+	while ((rc = c2_net_test_commands_recv(cmd_ctx, cmd, c2_time_now())) !=
 	       -ETIMEDOUT) {
 		/*
 		 * Exit from this loop after nodes->ntsl_nr failures.
@@ -296,16 +298,16 @@ size_t c2_net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 		if (failures_nr > nodes->ntsl_nr)
 			break;
 		rc = c2_net_test_commands_recv_enqueue(cmd_ctx,
-						       cmd.ntc_buf_index);
+						       cmd->ntc_buf_index);
 		/** @todo rc != 0 is lost here */
-		c2_net_test_commands_received_free(&cmd);
+		c2_net_test_commands_received_free(cmd);
 	}
 	/* send all commands */
 	for (i = 0; i < nodes->ntsl_nr; ++i) {
 		if (cmd_type == C2_NET_TEST_CMD_INIT)
-			cmd.ntc_init.ntci_tm_ep = nodes_data->ntsl_list[i];
-		cmd.ntc_ep_index     = i;
-		rctx->ntcrc_errno[i] = c2_net_test_commands_send(cmd_ctx, &cmd);
+			cmd->ntc_init.ntci_tm_ep = nodes_data->ntsl_list[i];
+		cmd->ntc_ep_index     = i;
+		rctx->ntcrc_errno[i] = c2_net_test_commands_send(cmd_ctx, cmd);
 	}
 	c2_net_test_commands_send_wait_all(cmd_ctx);
 
@@ -316,7 +318,7 @@ size_t c2_net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 	}
 	deadline = c2_time_add(c2_time_now(), cfg->ntcc_cmd_recv_timeout);
 	while (c2_time_now() <= deadline && rcvd_nr < nodes->ntsl_nr) {
-		rc = c2_net_test_commands_recv(cmd_ctx, &cmd, deadline);
+		rc = c2_net_test_commands_recv(cmd_ctx, cmd, deadline);
 		/* deadline reached */
 		if (rc == -ETIMEDOUT)
 			break;
@@ -325,11 +327,11 @@ size_t c2_net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 			continue;
 		rcvd_nr++;
 		/* reject unknown sender */
-		j = cmd.ntc_ep_index;
+		j = cmd->ntc_ep_index;
 		if (j < 0)
 			goto reuse_cmd;
 		/* reject unexpected command type */
-		if (cmd.ntc_type != answer[cmd_type])
+		if (cmd->ntc_type != answer[cmd_type])
 			goto reuse_cmd;
 		/*
 		 * reject command from node, which can't have outgoing cmd
@@ -340,27 +342,29 @@ size_t c2_net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 			goto reuse_cmd;
 		/* handle incoming command */
 		if (answer[cmd_type] == C2_NET_TEST_CMD_STATUS_DATA) {
-			status_data_add(sd, &cmd.ntc_status_data);
+			status_data_add(sd, &cmd->ntc_status_data);
 			success_nr++;
 		} else {
-			rctx->ntcrc_status[j] = cmd.ntc_done.ntcd_errno;
+			rctx->ntcrc_status[j] = cmd->ntc_done.ntcd_errno;
 			if (rctx->ntcrc_status[j] == 0)
 				success_nr++;
 		}
 		/*
 		 * @todo console user can't recover from this error -
-		 * cmd.ntc_buf_index is lost. use ringbuf to save?
+		 * cmd->ntc_buf_index is lost. use ringbuf to save?
 		 */
 reuse_cmd:
 		rc = c2_net_test_commands_recv_enqueue(cmd_ctx,
-						       cmd.ntc_buf_index);
+						       cmd->ntc_buf_index);
 		if (j != -1) {
 			C2_ASSERT(j >= 0 && j < nodes->ntsl_nr);
 			rctx->ntcrc_errno[j] = rc;
 		}
-		c2_net_test_commands_received_free(&cmd);
+		c2_net_test_commands_received_free(cmd);
 	}
 
+done:
+	c2_free(cmd);
 	LOGD("console: rc = %d\n", rc);
 
 	return success_nr;
diff --git a/net/test/network.c b/net/test/network.c
index e03270e..df3a2a7 100644
--- a/net/test/network.c
+++ b/net/test/network.c
@@ -114,6 +114,7 @@ static void cb_default(const struct c2_net_buffer_event *ev)
 	enum c2_net_queue_type		q;
 
 	C2_PRE(buf != NULL);
+	C2_PRE((buf->nb_flags & C2_NET_BUF_QUEUED) == 0);
 	q = ev->nbe_buffer->nb_qtype;
 
 	ctx = cb_ctx_extract(ev);
diff --git a/net/test/node.c b/net/test/node.c
index 3ee779c..bb87445 100644
--- a/net/test/node.c
+++ b/net/test/node.c
@@ -18,26 +18,19 @@
  * Original creation date: 03/22/2012
  */
 
-/** @todo remove */
-#ifndef __KERNEL__
-#include <stdio.h>		/* printf */
-#endif
-
-/** @todo debug only, remove it */
-#ifndef __KERNEL__
-//#define LOGD(format, ...) printf(format, ##__VA_ARGS__)
-#define LOGD(format, ...) do {} while (0)
-#else
-#define LOGD(format, ...) do {} while (0)
-#endif
-
 #include "lib/errno.h"		/* ETIMEDOUT */
 #include "lib/misc.h"		/* C2_SET0 */
+#include "lib/memory.h"		/* C2_ALLOC_PTR */
+#include "lib/trace.h"			/* C2_LOG */
 
 #include "net/test/node.h"	/* c2_net_test_node_ctx */
 #include "net/test/node_ping.h"	/* c2_net_test_node_ping_ops */
 #include "net/test/node_bulk.h"	/* c2_net_test_node_bulk_ops */
 
+/** @todo debug only, remove it */
+// #define LOGD(...) C2_LOG(C2_DEBUG, ##__VA_ARGS__)
+#define LOGD(format, ...) do {} while (0)
+
 /**
    @page net-test Colibri Network Benchmark
 
@@ -721,14 +714,15 @@ static int node_cmd_get(struct c2_net_test_cmd_ctx *cmd_ctx,
 		rc = c2_net_test_commands_recv_enqueue(cmd_ctx,
 						       cmd->ntc_buf_index);
 	if (rc == 0) {
-		LOGD("node_cmd_get: rc = %d\n", rc);
-		LOGD("node_cmd_get: cmd->ntc_type = %d\n", cmd->ntc_type);
-		LOGD("node_cmd_get: cmd->ntc_init.ntci_msg_nr = %lu\n",
-		     cmd->ntc_init.ntci_msg_nr);
+		LOGD("node_cmd_get: rc = %d", rc);
+		LOGD("node_cmd_get: cmd->ntc_type = %d", cmd->ntc_type);
+		LOGD("node_cmd_get: cmd->ntc_init.ntci_msg_nr = %lu",
+		     (unsigned long) cmd->ntc_init.ntci_msg_nr);
 	}
 	return rc;
 }
 
+/** @todo memory leak for all commands with different type from parameter */
 static int node_cmd_wait(struct c2_net_test_node_ctx *ctx,
 			 struct c2_net_test_cmd *cmd,
 			 enum c2_net_test_cmd_type type)
@@ -753,32 +747,38 @@ static void node_thread(struct c2_net_test_node_ctx *ctx)
 	struct c2_net_test_service	svc;
 	struct c2_net_test_service_ops *svc_ops;
 	enum c2_net_test_service_state	svc_state;
-	struct c2_net_test_cmd		cmd;
-	struct c2_net_test_cmd		reply;
+	struct c2_net_test_cmd	       *cmd;
+	struct c2_net_test_cmd	       *reply;
 	int				rc;
 	bool				skip_cmd_get;
 
 	C2_PRE(ctx != NULL);
 
+	C2_ALLOC_PTR(cmd);
+	C2_ALLOC_PTR(reply);
+	if (cmd == NULL || reply == NULL) {
+		rc = -ENOMEM;
+		goto done;
+	}
+
 	/* wait for INIT command */
-	C2_SET0(&cmd);
-	ctx->ntnc_errno = node_cmd_wait(ctx, &cmd, C2_NET_TEST_CMD_INIT);
+	ctx->ntnc_errno = node_cmd_wait(ctx, cmd, C2_NET_TEST_CMD_INIT);
 	if (ctx->ntnc_exit_flag) {
-		c2_net_test_commands_received_free(&cmd);
-		return;
+		c2_net_test_commands_received_free(cmd);
+		goto done;
 	}
 	if (ctx->ntnc_errno != 0)
-		return;
+		goto done;
 	/* we have configuration; initialize test service */
-	svc_ops = service_ops_get(&cmd);
+	svc_ops = service_ops_get(cmd);
 	if (svc_ops == NULL) {
-		c2_net_test_commands_received_free(&cmd);
-		return;
+		c2_net_test_commands_received_free(cmd);
+		goto done;
 	}
 	rc = c2_net_test_service_init(&svc, svc_ops);
 	if (rc != 0) {
-		c2_net_test_commands_received_free(&cmd);
-		return;
+		c2_net_test_commands_received_free(cmd);
+		goto done;
 	}
 	/* handle INIT command inside main loop */
 	skip_cmd_get = true;
@@ -786,27 +786,29 @@ static void node_thread(struct c2_net_test_node_ctx *ctx)
 	do {
 		/* get command */
 		if (rc == 0 && !skip_cmd_get)
-			rc = node_cmd_get(&ctx->ntnc_cmd, &cmd, c2_time_now());
+			rc = node_cmd_get(&ctx->ntnc_cmd, cmd,
+					  c2_time_from_now(0, 25000000));
+					  // c2_time_now());
 		else
 			skip_cmd_get = false;
 		if (rc == 0)
 			LOGD("node_thread: cmd_get, "
-			     "rc = %d, cmd.ntc_ep_index = %lu\n",
-			     rc, cmd.ntc_ep_index);
-		if (rc == 0 && cmd.ntc_ep_index >= 0) {
-			LOGD("node_thread: have command\n");
+			     "rc = %d, cmd.ntc_ep_index = %lu",
+			     rc, cmd->ntc_ep_index);
+		if (rc == 0 && cmd->ntc_ep_index >= 0) {
+			LOGD("node_thread: have command");
 			/* we have command. handle it */
-			rc = c2_net_test_service_cmd_handle(&svc, &cmd, &reply);
-			LOGD("node_thread: cmd handle: rc = %d\n", rc);
-			reply.ntc_ep_index = cmd.ntc_ep_index;
-			c2_net_test_commands_received_free(&cmd);
+			rc = c2_net_test_service_cmd_handle(&svc, cmd, reply);
+			LOGD("node_thread: cmd handle: rc = %d", rc);
+			reply->ntc_ep_index = cmd->ntc_ep_index;
+			c2_net_test_commands_received_free(cmd);
 			/* send reply */
-			LOGD("node_thread: reply.ntc_ep_index = %lu\n",
-			     reply.ntc_ep_index);
+			LOGD("node_thread: reply.ntc_ep_index = %lu",
+			     reply->ntc_ep_index);
 			c2_net_test_commands_send_wait_all(&ctx->ntnc_cmd);
-			rc = c2_net_test_commands_send(&ctx->ntnc_cmd, &reply);
-			LOGD("node_thread: send reply: rc = %d\n", rc);
-			C2_SET0(&cmd);
+			rc = c2_net_test_commands_send(&ctx->ntnc_cmd, reply);
+			LOGD("node_thread: send reply: rc = %d", rc);
+			C2_SET0(cmd);
 		} else if (rc == -ETIMEDOUT) {
 			/* we haven't command. take a step. */
 			rc = c2_net_test_service_step(&svc);
@@ -819,11 +821,14 @@ static void node_thread(struct c2_net_test_node_ctx *ctx)
 		 !ctx->ntnc_exit_flag &&
 		 rc == 0);
 
-	LOGD("6, rc = %d\n", rc);
-	ctx->ntnc_errno = rc;
 	/* finalize test service */
 	c2_net_test_service_fini(&svc);
 
+done:
+	c2_free(cmd);
+	c2_free(reply);
+	LOGD("rc = %d", rc);
+	ctx->ntnc_errno = rc;
 	c2_semaphore_up(&ctx->ntnc_thread_finished_sem);
 }
 
diff --git a/net/test/str.c b/net/test/str.c
index 340e428..b6a6d48 100644
--- a/net/test/str.c
+++ b/net/test/str.c
@@ -62,6 +62,7 @@ c2_bcount_t c2_net_test_str_serialize(enum c2_net_test_serialize_op op,
 
 	C2_PRE(op == C2_NET_TEST_SERIALIZE || op == C2_NET_TEST_DESERIALIZE);
 	C2_PRE(str != NULL);
+	C2_PRE(ergo(op == C2_NET_TEST_SERIALIZE, *str != NULL));
 
 	if (op == C2_NET_TEST_SERIALIZE) {
 		str_len.ntsl_len = strlen(*str) + 1;
diff --git a/net/test/ut/client_server.c b/net/test/ut/client_server.c
index 5af8daf..b4f6d0e 100644
--- a/net/test/ut/client_server.c
+++ b/net/test/ut/client_server.c
@@ -34,6 +34,9 @@
 #include "net/test/node.h"		/* c2_net_test_node_ctx */
 #include "net/test/console.h"		/* c2_net_test_console_ctx */
 
+// #define LOGD(...) LOGD(##__VA_ARGS__)
+#define LOGD(...) do {} while (0)
+
 enum {
 	NTCS_PID		  = C2_NET_LNET_PID,
 	NTCS_PORTAL		  = 42,
@@ -147,8 +150,8 @@ static void node_cfg_fill(struct c2_net_test_node_cfg *ncfg,
 static void msg_nr_print(const char *prefix,
 			 const struct c2_net_test_msg_nr *msg_nr)
 {
-	C2_LOG(C2_DEBUG, "%-21s total/failed/bad = %lu/%lu/%lu", prefix,
-	       msg_nr->ntmn_total, msg_nr->ntmn_failed, msg_nr->ntmn_bad);
+	LOGD("%-21s total/failed/bad = %lu/%lu/%lu", prefix,
+	     msg_nr->ntmn_total, msg_nr->ntmn_failed, msg_nr->ntmn_bad);
 }
 
 /*
@@ -170,18 +173,25 @@ static void net_test_client_server(const char *nid,
 {
 	struct c2_net_test_cmd_status_data *sd_servers;
 	struct c2_net_test_cmd_status_data *sd_clients;
-	struct c2_net_test_console_cfg	    console_cfg;
-	struct c2_net_test_console_ctx	    console;
+	struct c2_net_test_console_cfg	   *console_cfg;
+	struct c2_net_test_console_ctx	   *console;
 	int				    rc;
 	int				    i;
 	c2_time_t			    _1s = C2_MKTIME(1, 0);
 
 #ifdef __KERNEL__
+	/*
 	kgdb_breakpoint();
+	*/
 #endif
 
 	C2_PRE(clients_nr <= NTCS_NODES_MAX);
 	C2_PRE(servers_nr <= NTCS_NODES_MAX);
+
+	C2_ALLOC_PTR(console_cfg);
+	C2_ALLOC_PTR(console);
+	if (console_cfg == NULL || console == NULL)
+		goto done;
 	/* prepare config for test clients and test servers */
 	timeout_cmd  = ms2time(NTCS_TIMEOUT_CMD_MS);
 	timeout_send = ms2time(NTCS_TIMEOUT_SEND_MS);
@@ -221,102 +231,102 @@ static void net_test_client_server(const char *nid,
 		c2_semaphore_down(&node_init_sem);
 	c2_semaphore_fini(&node_init_sem);
 	/* prepare console config */
-	console_cfg.ntcc_addr_console4servers = addr_console4servers;
-	console_cfg.ntcc_addr_console4clients = addr_console4clients;
-	C2_LOG(C2_DEBUG, "addr_console4servers = %s", addr_console4servers);
-	C2_LOG(C2_DEBUG, "addr_console4clients = %s", addr_console4clients);
-	C2_LOG(C2_DEBUG, "clients      = %s", (char *) clients);
-	C2_LOG(C2_DEBUG, "servers      = %s", (char *) servers);
-	C2_LOG(C2_DEBUG, "clients_data = %s", (char *) clients_data);
-	C2_LOG(C2_DEBUG, "servers_data = %s", (char *) servers_data);
-	rc = c2_net_test_slist_init(&console_cfg.ntcc_clients, clients, ',');
+	console_cfg->ntcc_addr_console4servers = addr_console4servers;
+	console_cfg->ntcc_addr_console4clients = addr_console4clients;
+	LOGD("addr_console4servers = %s", addr_console4servers);
+	LOGD("addr_console4clients = %s", addr_console4clients);
+	LOGD("clients      = %s", (char *) clients);
+	LOGD("servers      = %s", (char *) servers);
+	LOGD("clients_data = %s", (char *) clients_data);
+	LOGD("servers_data = %s", (char *) servers_data);
+	rc = c2_net_test_slist_init(&console_cfg->ntcc_clients, clients, ',');
 	C2_UT_ASSERT(rc == 0);
-	rc = c2_net_test_slist_init(&console_cfg.ntcc_servers, servers, ',');
+	rc = c2_net_test_slist_init(&console_cfg->ntcc_servers, servers, ',');
 	C2_UT_ASSERT(rc == 0);
-	rc = c2_net_test_slist_init(&console_cfg.ntcc_data_clients,
+	rc = c2_net_test_slist_init(&console_cfg->ntcc_data_clients,
 				    clients_data, ',');
 	C2_UT_ASSERT(rc == 0);
-	rc = c2_net_test_slist_init(&console_cfg.ntcc_data_servers,
+	rc = c2_net_test_slist_init(&console_cfg->ntcc_data_servers,
 				    servers_data, ',');
 	C2_UT_ASSERT(rc == 0);
-	console_cfg.ntcc_cmd_send_timeout   = timeout_cmd;
-	console_cfg.ntcc_cmd_recv_timeout   = timeout_cmd;
-	console_cfg.ntcc_buf_send_timeout   = timeout_send;
-	console_cfg.ntcc_buf_recv_timeout   = timeout_recv;
-	console_cfg.ntcc_buf_bulk_timeout   = timeout_bulk;
-	console_cfg.ntcc_test_type	    = type;
-	console_cfg.ntcc_msg_nr		    = msg_nr;
-	console_cfg.ntcc_msg_size	    = msg_size;
-	console_cfg.ntcc_bd_buf_nr_server   = bd_buf_nr_server;
-	console_cfg.ntcc_bd_buf_nr_client   = bd_buf_nr_client;
-	console_cfg.ntcc_bd_buf_size	    = bd_buf_size;
-	console_cfg.ntcc_bd_nr_max	    = bd_nr_max;
-	console_cfg.ntcc_concurrency_server = concurrency_server;
-	console_cfg.ntcc_concurrency_client = concurrency_client;
+	console_cfg->ntcc_cmd_send_timeout   = timeout_cmd;
+	console_cfg->ntcc_cmd_recv_timeout   = timeout_cmd;
+	console_cfg->ntcc_buf_send_timeout   = timeout_send;
+	console_cfg->ntcc_buf_recv_timeout   = timeout_recv;
+	console_cfg->ntcc_buf_bulk_timeout   = timeout_bulk;
+	console_cfg->ntcc_test_type	     = type;
+	console_cfg->ntcc_msg_nr	     = msg_nr;
+	console_cfg->ntcc_msg_size	     = msg_size;
+	console_cfg->ntcc_bd_buf_nr_server   = bd_buf_nr_server;
+	console_cfg->ntcc_bd_buf_nr_client   = bd_buf_nr_client;
+	console_cfg->ntcc_bd_buf_size	     = bd_buf_size;
+	console_cfg->ntcc_bd_nr_max	     = bd_nr_max;
+	console_cfg->ntcc_concurrency_server = concurrency_server;
+	console_cfg->ntcc_concurrency_client = concurrency_client;
 	/* initialize console */
-	rc = c2_net_test_console_init(&console, &console_cfg);
+	rc = c2_net_test_console_init(console, console_cfg);
 	C2_UT_ASSERT(rc == 0);
 	/* send INIT to the test servers */
-	rc = c2_net_test_console_cmd(&console, C2_NET_TEST_ROLE_SERVER,
+	rc = c2_net_test_console_cmd(console, C2_NET_TEST_ROLE_SERVER,
 				     C2_NET_TEST_CMD_INIT);
 	C2_UT_ASSERT(rc == servers_nr);
 	/* send INIT to the test clients */
-	rc = c2_net_test_console_cmd(&console, C2_NET_TEST_ROLE_CLIENT,
+	rc = c2_net_test_console_cmd(console, C2_NET_TEST_ROLE_CLIENT,
 				     C2_NET_TEST_CMD_INIT);
 	C2_UT_ASSERT(rc == clients_nr);
 	/* send START command to the test servers */
-	rc = c2_net_test_console_cmd(&console, C2_NET_TEST_ROLE_SERVER,
+	rc = c2_net_test_console_cmd(console, C2_NET_TEST_ROLE_SERVER,
 				     C2_NET_TEST_CMD_START);
 	C2_UT_ASSERT(rc == servers_nr);
 	/* send START command to the test clients */
-	rc = c2_net_test_console_cmd(&console, C2_NET_TEST_ROLE_CLIENT,
+	rc = c2_net_test_console_cmd(console, C2_NET_TEST_ROLE_CLIENT,
 				     C2_NET_TEST_CMD_START);
 	C2_UT_ASSERT(rc == clients_nr);
 	/* send STATUS command to the test clients until it finishes. */
 	do {
 		c2_nanosleep(_1s, NULL);
-		rc = c2_net_test_console_cmd(&console, C2_NET_TEST_ROLE_CLIENT,
+		rc = c2_net_test_console_cmd(console, C2_NET_TEST_ROLE_CLIENT,
 					     C2_NET_TEST_CMD_STATUS);
 		C2_UT_ASSERT(rc == clients_nr);
-	} while (!console.ntcc_clients.ntcrc_sd->ntcsd_finished);
+	} while (!console->ntcc_clients.ntcrc_sd->ntcsd_finished);
 	/* send STATUS command to the test clients */
-	rc = c2_net_test_console_cmd(&console, C2_NET_TEST_ROLE_CLIENT,
+	rc = c2_net_test_console_cmd(console, C2_NET_TEST_ROLE_CLIENT,
 				     C2_NET_TEST_CMD_STATUS);
 	C2_UT_ASSERT(rc == clients_nr);
 	/* send STATUS command to the test servers */
-	rc = c2_net_test_console_cmd(&console, C2_NET_TEST_ROLE_SERVER,
+	rc = c2_net_test_console_cmd(console, C2_NET_TEST_ROLE_SERVER,
 				     C2_NET_TEST_CMD_STATUS);
 	C2_UT_ASSERT(rc == servers_nr);
 	msg_nr_print("client msg sent",
-		     &console.ntcc_clients.ntcrc_sd->ntcsd_msg_nr_send);
+		     &console->ntcc_clients.ntcrc_sd->ntcsd_msg_nr_send);
 	msg_nr_print("client msg received",
-		     &console.ntcc_clients.ntcrc_sd->ntcsd_msg_nr_recv);
+		     &console->ntcc_clients.ntcrc_sd->ntcsd_msg_nr_recv);
 	msg_nr_print("client bulk sent",
-		     &console.ntcc_clients.ntcrc_sd->ntcsd_bulk_nr_send);
+		     &console->ntcc_clients.ntcrc_sd->ntcsd_bulk_nr_send);
 	msg_nr_print("client bulk received",
-		     &console.ntcc_clients.ntcrc_sd->ntcsd_bulk_nr_recv);
+		     &console->ntcc_clients.ntcrc_sd->ntcsd_bulk_nr_recv);
 	msg_nr_print("client transfers",
-		     &console.ntcc_clients.ntcrc_sd->ntcsd_transfers);
+		     &console->ntcc_clients.ntcrc_sd->ntcsd_transfers);
 	msg_nr_print("server msg sent",
-		     &console.ntcc_servers.ntcrc_sd->ntcsd_msg_nr_send);
+		     &console->ntcc_servers.ntcrc_sd->ntcsd_msg_nr_send);
 	msg_nr_print("server msg received",
-		     &console.ntcc_servers.ntcrc_sd->ntcsd_msg_nr_recv);
+		     &console->ntcc_servers.ntcrc_sd->ntcsd_msg_nr_recv);
 	msg_nr_print("server bulk sent",
-		     &console.ntcc_servers.ntcrc_sd->ntcsd_bulk_nr_send);
+		     &console->ntcc_servers.ntcrc_sd->ntcsd_bulk_nr_send);
 	msg_nr_print("server bulk received",
-		     &console.ntcc_servers.ntcrc_sd->ntcsd_bulk_nr_recv);
+		     &console->ntcc_servers.ntcrc_sd->ntcsd_bulk_nr_recv);
 	msg_nr_print("server transfers",
-		     &console.ntcc_servers.ntcrc_sd->ntcsd_transfers);
+		     &console->ntcc_servers.ntcrc_sd->ntcsd_transfers);
 	/* send STOP command to the test clients */
-	rc = c2_net_test_console_cmd(&console, C2_NET_TEST_ROLE_CLIENT,
+	rc = c2_net_test_console_cmd(console, C2_NET_TEST_ROLE_CLIENT,
 				     C2_NET_TEST_CMD_STOP);
 	C2_UT_ASSERT(rc == clients_nr);
 	/* send STOP command to the test servers */
-	rc = c2_net_test_console_cmd(&console, C2_NET_TEST_ROLE_SERVER,
+	rc = c2_net_test_console_cmd(console, C2_NET_TEST_ROLE_SERVER,
 				     C2_NET_TEST_CMD_STOP);
 	C2_UT_ASSERT(rc == servers_nr);
-	sd_servers = console.ntcc_servers.ntcrc_sd;
-	sd_clients = console.ntcc_clients.ntcrc_sd;
+	sd_servers = console->ntcc_servers.ntcrc_sd;
+	sd_clients = console->ntcc_clients.ntcrc_sd;
 	/* check stats */
 	if (type == C2_NET_TEST_TYPE_BULK) {
 		/*
@@ -335,11 +345,11 @@ static void net_test_client_server(const char *nid,
 	C2_ASSERT(sd_servers->ntcsd_bulk_nr_recv.ntmn_total ==
 		  sd_clients->ntcsd_bulk_nr_send.ntmn_total);
 	/* finalize console */
-	c2_net_test_slist_fini(&console_cfg.ntcc_servers);
-	c2_net_test_slist_fini(&console_cfg.ntcc_clients);
-	c2_net_test_slist_fini(&console_cfg.ntcc_data_servers);
-	c2_net_test_slist_fini(&console_cfg.ntcc_data_clients);
-	c2_net_test_console_fini(&console);
+	c2_net_test_slist_fini(&console_cfg->ntcc_servers);
+	c2_net_test_slist_fini(&console_cfg->ntcc_clients);
+	c2_net_test_slist_fini(&console_cfg->ntcc_data_servers);
+	c2_net_test_slist_fini(&console_cfg->ntcc_data_clients);
+	c2_net_test_console_fini(console);
 	/* finalize test clients and test servers */
 	for (i = 0; i < clients_nr + servers_nr; ++i) {
 		rc = c2_thread_join(&node_thread[i]);
@@ -349,6 +359,9 @@ static void net_test_client_server(const char *nid,
 	}
 	addr_free(addr_console4servers);
 	addr_free(addr_console4clients);
+done:
+	c2_free(console);
+	c2_free(console_cfg);
 }
 
 void c2_net_test_client_server_stub_ut(void)
diff --git a/net/test/ut/commands.c b/net/test/ut/commands.c
index 23c293f..638eb03 100644
--- a/net/test/ut/commands.c
+++ b/net/test/ut/commands.c
@@ -29,15 +29,17 @@
 
 /* NTC_ == NET_TEST_COMMANDS_ */
 enum {
-	NTC_PORTAL	      = 42,
-	NTC_TMID_CONSOLE      = 3000,
-	NTC_TMID_NODE	      = 3001,
-	NTC_MULTIPLE_COMMANDS = 64,
+	NTC_TMID_START	      = 3000,
+	NTC_TMID_CONSOLE      = NTC_TMID_START,
+	NTC_TMID_NODE	      = NTC_TMID_CONSOLE + 1,
+	NTC_MULTIPLE_NODES    = 64,
+	NTC_MULTIPLE_COMMANDS = 32,
 	NTC_ADDR_LEN_MAX      = 0x100,
 	NTC_TIMEOUT_MS	      = 1000,
+	NTC_CMD_RECV_WAIT_NS  = 25000000,
 };
 
-static const char   NTC_ADDR[]	   = "0@lo:12345:%d:%d";
+static const char   NTC_ADDR[]	   = "0@lo:12345:42:%d";
 static const size_t NTC_ADDR_LEN   = ARRAY_SIZE(NTC_ADDR);
 static const char   NTC_DELIM      = ',';
 
@@ -55,15 +57,18 @@ struct net_test_cmd_node {
 	bool			   ntcn_barriers_disabled;
 	/** used when checking send/recv */
 	bool			   ntcn_flag;
+	/** transfer machine address */
+	char			  *ntcn_addr;
 };
 
 static char addr_console[NTC_ADDR_LEN_MAX];
-static char addr_node[NTC_ADDR_LEN_MAX * NTC_MULTIPLE_COMMANDS];
+static char addr_node[NTC_ADDR_LEN_MAX * NTC_MULTIPLE_NODES];
 
 static struct c2_net_test_slist   slist_node;
 static struct c2_net_test_slist   slist_console;
 static struct net_test_cmd_node	 *node;
 static struct c2_net_test_cmd_ctx console;
+static struct net_test_cmd_node	  nodes[NTC_MULTIPLE_NODES];
 
 static c2_time_t timeout_get(void)
 {
@@ -78,10 +83,9 @@ static c2_time_t timeout_get_abs(void)
 	return c2_time_add(c2_time_now(), timeout_get());
 }
 
-static int make_addr(char *s, size_t s_len, int port, int svc_id,
-		     bool add_comma)
+static int make_addr(char *s, size_t s_len, int svc_id, bool add_comma)
 {
-	int rc = snprintf(s, s_len, NTC_ADDR, port, svc_id);
+	int rc = snprintf(s, s_len, NTC_ADDR, svc_id);
 
 	C2_ASSERT(NTC_ADDR_LEN <= NTC_ADDR_LEN_MAX);
 	C2_ASSERT(rc > 0);
@@ -101,11 +105,10 @@ static void fill_addr(uint32_t nr)
 	int	 diff;
 
 	/* console */
-	make_addr(addr_console, NTC_ADDR_LEN_MAX, NTC_PORTAL,
-		  NTC_TMID_CONSOLE, false);
+	make_addr(addr_console, NTC_ADDR_LEN_MAX, NTC_TMID_CONSOLE, false);
 	/* nodes */
 	for (i = 0; i < nr; ++i) {
-		diff = make_addr(pos, NTC_ADDR_LEN_MAX, NTC_PORTAL,
+		diff = make_addr(pos, NTC_ADDR_LEN_MAX,
 				 NTC_TMID_NODE + i, i != nr - 1);
 		C2_ASSERT(diff < NTC_ADDR_LEN_MAX);
 		pos += diff;
@@ -248,6 +251,8 @@ static void commands_ut_recv(struct net_test_cmd_node *node,
 	C2_SET0(&cmd);
 	rc = c2_net_test_commands_recv(ctx, &cmd, deadline);
 	commands_ut_assert(node, rc == 0);
+	if (rc != 0)
+		return;
 	if (ep_index == NULL) {
 		rc = c2_net_test_commands_recv_enqueue(ctx, cmd.ntc_buf_index);
 		commands_ut_assert(node, rc == 0);
@@ -576,7 +581,166 @@ void c2_net_test_cmd_ut_single(void)
 
 void c2_net_test_cmd_ut_multiple(void)
 {
-	net_test_command_ut(NTC_MULTIPLE_COMMANDS);
+	net_test_command_ut(NTC_MULTIPLE_NODES);
+}
+
+static void commands_node_loop(struct net_test_cmd_node *node,
+			       struct c2_net_test_cmd *cmd)
+{
+	c2_time_t deadline;
+	int	  cmd_rcvd = 0;
+	int	  rc;
+
+	/*
+	 * Receive command from console and send it back.
+	 * Repeat NTC_MULTIPLE_COMMANDS times.
+	 */
+	while (cmd_rcvd != NTC_MULTIPLE_COMMANDS) {
+		deadline = c2_time_from_now(0, NTC_CMD_RECV_WAIT_NS);
+		rc = c2_net_test_commands_recv(&node->ntcn_ctx, cmd, deadline);
+		if (rc == -ETIMEDOUT)
+			continue;
+		C2_UT_ASSERT(rc == 0);
+		C2_UT_ASSERT(cmd->ntc_ep_index == 0);
+		rc = c2_net_test_commands_recv_enqueue(&node->ntcn_ctx,
+						       cmd->ntc_buf_index);
+		C2_UT_ASSERT(rc == 0);
+		c2_net_test_commands_send_wait_all(&node->ntcn_ctx);
+		rc = c2_net_test_commands_send(&node->ntcn_ctx, cmd);
+		C2_UT_ASSERT(rc == 0);
+		c2_net_test_commands_received_free(cmd);
+		++cmd_rcvd;
+	}
+}
+
+static void commands_console_loop(struct net_test_cmd_node *node,
+				  struct c2_net_test_cmd *cmd)
+{
+	c2_time_t deadline;
+	int	  cmd_sent = 0;
+	int	  cmd_rcvd;
+	int	  i;
+	int	  rc;
+
+	/*
+	 * Send command to every node and receive reply.
+	 * Repeat NTC_MULTIPLE_COMMANDS times.
+	 */
+	while (cmd_sent != NTC_MULTIPLE_COMMANDS) {
+		c2_net_test_commands_send_wait_all(&node->ntcn_ctx);
+		for (i = 1; i < ARRAY_SIZE(nodes); ++i) {
+			cmd->ntc_ep_index = i - 1;
+			cmd->ntc_type = C2_NET_TEST_CMD_INIT_DONE;
+			rc = c2_net_test_commands_send(&node->ntcn_ctx, cmd);
+			C2_UT_ASSERT(rc == 0);
+		}
+		c2_net_test_commands_send_wait_all(&node->ntcn_ctx);
+		cmd_rcvd = 0;
+		deadline = timeout_get_abs();
+		while (cmd_rcvd != ARRAY_SIZE(nodes) - 1
+		       && c2_time_now() <= deadline) {
+			rc = c2_net_test_commands_recv(&node->ntcn_ctx, cmd,
+						       deadline);
+			C2_UT_ASSERT(rc == 0);
+			rc = c2_net_test_commands_recv_enqueue(&node->ntcn_ctx,
+							cmd->ntc_buf_index);
+			C2_UT_ASSERT(rc == 0);
+			++cmd_rcvd;
+			c2_net_test_commands_received_free(cmd);
+		}
+		C2_UT_ASSERT(cmd_rcvd == ARRAY_SIZE(nodes) - 1);
+		++cmd_sent;
+	}
+}
+
+static void commands_node_thread2(struct net_test_cmd_node *node)
+{
+	struct c2_net_test_cmd	 *cmd;
+	struct c2_net_test_slist  endpoints;
+	static char		  buf[NTC_MULTIPLE_NODES * NTC_ADDR_LEN_MAX];
+	int			  rc;
+	bool			  console_thread = node == &nodes[0];
+	int			  i;
+
+	C2_ALLOC_PTR(cmd);
+	C2_UT_ASSERT(cmd != NULL);
+
+	if (console_thread) {
+		buf[0] = '\0';
+		for (i = 1; i < ARRAY_SIZE(nodes); ++i) {
+			strncat(buf, nodes[i].ntcn_addr, ARRAY_SIZE(buf));
+			if (i != ARRAY_SIZE(nodes) - 1)
+				strncat(buf, ",", ARRAY_SIZE(buf));
+		}
+		buf[ARRAY_SIZE(buf) - 1] = '\0';
+		rc = c2_net_test_slist_init(&endpoints, buf, ',');
+		C2_UT_ASSERT(rc == 0);
+	} else {
+		rc = c2_net_test_slist_init(&endpoints,
+					    nodes[0].ntcn_addr, '`');
+		C2_UT_ASSERT(rc == 0);
+	}
+	rc = c2_net_test_commands_init(&node->ntcn_ctx, node->ntcn_addr,
+				       timeout_get(), NULL, &endpoints);
+	C2_UT_ASSERT(rc == 0);
+
+	barrier_with_main(node);
+
+	if (console_thread) {
+		commands_console_loop(node, cmd);
+	} else {
+		commands_node_loop(node, cmd);
+	}
+
+	c2_net_test_commands_fini(&node->ntcn_ctx);
+	c2_net_test_slist_fini(&endpoints);
+	c2_free(cmd);
+}
+
+/* main thread */
+void c2_net_test_cmd_ut_multiple2(void)
+{
+	struct net_test_cmd_node *node;
+	size_t			  i;
+	int			  rc;
+
+	/* console is node #0 */
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
+		node = &nodes[i];
+		barrier_init(node);
+		node->ntcn_addr = c2_alloc(NTC_ADDR_LEN_MAX);
+		C2_UT_ASSERT(node->ntcn_addr != NULL);
+		make_addr(node->ntcn_addr, NTC_ADDR_LEN_MAX,
+			  NTC_TMID_START + i, false);
+	}
+	/* start threads */
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
+		node = &nodes[i];
+		rc = C2_THREAD_INIT(&node->ntcn_thread,
+				    struct net_test_cmd_node *, NULL,
+				    &commands_node_thread2,
+				    node, "#%dcmd_ut__%s", (int) i,
+				    i == 0 ? "console" : "node");
+		C2_UT_ASSERT(rc == 0);
+	}
+	/* barrier with node threads */
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i)
+		c2_semaphore_down(&nodes[i].ntcn_signal);
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i)
+		c2_semaphore_up(&nodes[i].ntcn_wait);
+	/* stop threads */
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
+		node = &nodes[i];
+		rc = c2_thread_join(&node->ntcn_thread);
+		C2_UT_ASSERT(rc == 0);
+		c2_thread_fini(&node->ntcn_thread);
+	}
+	/* fini nodes */
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
+		node = &nodes[i];
+		c2_free(node->ntcn_addr);
+		barrier_fini(node);
+	}
 }
 
 /*
diff --git a/net/test/ut/main.c b/net/test/ut/main.c
index 85c1268..306f01f 100644
--- a/net/test/ut/main.c
+++ b/net/test/ut/main.c
@@ -41,8 +41,11 @@ extern void c2_net_test_network_ut_bulk(void);
 
 extern void c2_net_test_cmd_ut_single(void);
 extern void c2_net_test_cmd_ut_multiple(void);
+extern void c2_net_test_cmd_ut_multiple2(void);
 
 extern void c2_net_test_bug_ut(void);
+extern void c2_net_test_bug2_ut(void);
+extern void c2_net_test_bug3_ut(void);
 extern void c2_net_test_client_server_stub_ut(void);
 extern void c2_net_test_client_server_ping_ut(void);
 extern void c2_net_test_client_server_bulk_ut(void);
@@ -70,12 +73,15 @@ const struct c2_test_suite c2_net_test_ut = {
 		{ "network-bulk",	c2_net_test_network_ut_bulk	  },
 		{ "cmd-single",		c2_net_test_cmd_ut_single	  },
 		{ "cmd-multiple",	c2_net_test_cmd_ut_multiple	  },
+		{ "cmd-multiple2",	c2_net_test_cmd_ut_multiple2	  },
+#if 0
+		{ "bug3",		c2_net_test_bug3_ut		  },
+		{ "bug2",		c2_net_test_bug2_ut		  },
 		{ "bug",		c2_net_test_bug_ut		  },
-#ifndef __KERNEL__
+#endif
 		{ "client-server-stub",	c2_net_test_client_server_stub_ut },
 		{ "client-server-ping",	c2_net_test_client_server_ping_ut },
 		{ "client-server-bulk",	c2_net_test_client_server_bulk_ut },
-#endif
 		{ NULL,			NULL				  }
 	}
 };
diff --git a/net/test/ut/network.c b/net/test/ut/network.c
index 6b27ccc..c8950b3 100644
--- a/net/test/ut/network.c
+++ b/net/test/ut/network.c
@@ -58,9 +58,11 @@
 #include "net/lnet/lnet.h"		/* C2_NET_LNET_PID */
 
 #include "net/test/commands.h"		/* c2_net_test_commands */
+#include "net/test/node_ping.h"		/* c2_net_test_node_ping_ops */
 /* END COPY-PASTE FROM client_server.c */
 
-#define LOGD(...) C2_LOG(C2_DEBUG, ##__VA_ARGS__)
+// #define LOGD(...) C2_LOG(C2_DEBUG, ##__VA_ARGS__)
+#define LOGD(...) do {} while (0)
 
 enum {
 	NET_TEST_PING_BUF_SIZE = 4096,
@@ -529,6 +531,13 @@ void c2_net_test_network_ut_buf_desc(void)
  ***********************************************************************
  */
 
+static void kgdb_break(void)
+{
+#ifdef __KERNEL__
+	// kgdb_breakpoint();
+#endif
+}
+
 #if 0
 #ifdef __KERNEL__
 static DECLARE_COMPLETION(client_completion);
@@ -606,6 +615,8 @@ static c2_time_t timeout_send;
 static c2_time_t timeout_recv;
 static c2_time_t timeout_bulk;
 
+extern bool net_test_commands_debug;
+
 static char *addr_get(const char *nid, int tmid)
 {
 	char  addr[NTCS_NODE_ADDR_MAX];
@@ -654,6 +665,7 @@ static void node_cfg_fill(struct c2_net_test_node_cfg *ncfg,
 	addr_free(addr_data);
 }
 
+#if 0
 static void net_test_node2(struct c2_net_test_node_cfg *node_cfg)
 {
 	struct c2_net_test_node_ctx *ctx;
@@ -674,6 +686,57 @@ static void net_test_node2(struct c2_net_test_node_cfg *node_cfg)
 	c2_net_test_node_fini(ctx);
 	c2_free(ctx);
 }
+#endif
+
+static void net_test_node3(struct c2_net_test_node_cfg *node_cfg)
+{
+	struct c2_net_test_cmd_ctx *cmd_ctx;
+	struct c2_net_test_cmd	   *cmd;
+	struct c2_net_test_slist    console;
+	int			    rc;
+
+	C2_ALLOC_PTR(cmd_ctx);
+	C2_ALLOC_PTR(cmd);
+	if (cmd == NULL || cmd_ctx == NULL)
+		goto done;
+	rc = c2_net_test_slist_init(&console, node_cfg->ntnc_addr_console, '`');
+	C2_UT_ASSERT(rc == 0);
+	rc = c2_net_test_commands_init(cmd_ctx, node_cfg->ntnc_addr,
+				       node_cfg->ntnc_send_timeout,
+				       NULL, &console);
+	C2_UT_ASSERT(rc == 0);
+
+	c2_semaphore_up(&node_init_sem);
+	while (cmd->ntc_type != C2_NET_TEST_CMD_STOP_DONE) {
+		rc = c2_net_test_commands_recv(cmd_ctx, cmd,
+					       c2_time_from_now(0, 25000000));
+		if (rc == -ETIMEDOUT)
+			continue;
+		C2_UT_ASSERT(rc == 0);
+		C2_UT_ASSERT(cmd->ntc_ep_index == 0);
+		rc = c2_net_test_commands_recv_enqueue(cmd_ctx,
+						       cmd->ntc_buf_index);
+		C2_UT_ASSERT(rc == 0);
+		c2_net_test_commands_received_free(cmd);
+
+		if (cmd->ntc_type == C2_NET_TEST_CMD_INIT)
+			cmd->ntc_type = C2_NET_TEST_CMD_INIT_DONE;
+		else if (cmd->ntc_type == C2_NET_TEST_CMD_STOP)
+			 cmd->ntc_type = C2_NET_TEST_CMD_STOP_DONE;
+		else {
+			C2_IMPOSSIBLE("invalid cmd type");
+		}
+		cmd->ntc_done.ntcd_errno = 0;
+		c2_net_test_commands_send_wait_all(cmd_ctx);
+		rc = c2_net_test_commands_send(cmd_ctx, cmd);
+		C2_UT_ASSERT(rc == 0);
+	}
+	c2_net_test_commands_fini(cmd_ctx);
+	c2_net_test_slist_fini(&console);
+done:
+	c2_free(cmd);
+	c2_free(cmd_ctx);
+}
 
 static void console_cmd_init_fill(struct c2_net_test_console_cfg *cfg,
 				  enum c2_net_test_role role,
@@ -784,7 +847,7 @@ static size_t net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 	struct c2_net_test_console_role_ctx *rctx;
 	struct c2_net_test_console_cfg	    *cfg;
 	struct c2_net_test_cmd_ctx	    *cmd_ctx;
-	struct c2_net_test_cmd		     cmd;
+	struct c2_net_test_cmd		    *cmd;
 	struct c2_net_test_cmd_status_data  *sd = NULL;
 	int				     i;
 	int				     j;
@@ -811,22 +874,24 @@ static size_t net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 	       cmd_type == C2_NET_TEST_CMD_STOP ||
 	       cmd_type == C2_NET_TEST_CMD_STATUS);
 
-	C2_SET0(&cmd);
+	C2_ALLOC_PTR(cmd);
+	if (cmd == NULL)
+		goto done;
 	cfg = ctx->ntcc_cfg;
 
 	if (cmd_type == C2_NET_TEST_CMD_INIT)
-		console_cmd_init_fill(cfg, role, &cmd.ntc_init);
+		console_cmd_init_fill(cfg, role, &cmd->ntc_init);
 
-	role_client  = role == C2_NET_TEST_ROLE_CLIENT;
-	cmd.ntc_type = cmd_type;
-	nodes	     = role_client ? &cfg->ntcc_clients : &cfg->ntcc_servers;
-	nodes_data   = role_client ? &cfg->ntcc_data_clients :
-				     &cfg->ntcc_data_servers;
-	rctx	     = role_client ? &ctx->ntcc_clients : &ctx->ntcc_servers;
-	cmd_ctx	     = rctx->ntcrc_cmd;
+	role_client   = role == C2_NET_TEST_ROLE_CLIENT;
+	cmd->ntc_type = cmd_type;
+	nodes	      = role_client ? &cfg->ntcc_clients : &cfg->ntcc_servers;
+	nodes_data    = role_client ? &cfg->ntcc_data_clients :
+				      &cfg->ntcc_data_servers;
+	rctx	      = role_client ? &ctx->ntcc_clients : &ctx->ntcc_servers;
+	cmd_ctx	      = rctx->ntcrc_cmd;
 
 	/* clear commands receive queue */
-	while ((rc = c2_net_test_commands_recv(cmd_ctx, &cmd, c2_time_now())) !=
+	while ((rc = c2_net_test_commands_recv(cmd_ctx, cmd, c2_time_now())) !=
 	       -ETIMEDOUT) {
 		/*
 		 * Exit from this loop after nodes->ntsl_nr failures.
@@ -838,18 +903,21 @@ static size_t net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 		if (failures_nr > nodes->ntsl_nr)
 			break;
 		rc = c2_net_test_commands_recv_enqueue(cmd_ctx,
-						       cmd.ntc_buf_index);
+						       cmd->ntc_buf_index);
 		/** @todo rc != 0 is lost here */
-		c2_net_test_commands_received_free(&cmd);
+		c2_net_test_commands_received_free(cmd);
 	}
+	LOGD("send all commands");
 	/* send all commands */
 	for (i = 0; i < nodes->ntsl_nr; ++i) {
 		if (cmd_type == C2_NET_TEST_CMD_INIT)
-			cmd.ntc_init.ntci_tm_ep = nodes_data->ntsl_list[i];
-		cmd.ntc_ep_index     = i;
-		rctx->ntcrc_errno[i] = c2_net_test_commands_send(cmd_ctx, &cmd);
+			cmd->ntc_init.ntci_tm_ep = nodes_data->ntsl_list[i];
+		cmd->ntc_ep_index     = i;
+		rctx->ntcrc_errno[i] = c2_net_test_commands_send(cmd_ctx, cmd);
 	}
+	LOGD("c2_net_test_commands_send_wait_all(cmd_ctx);");
 	c2_net_test_commands_send_wait_all(cmd_ctx);
+	LOGD("done.");
 
 	/* receive answers */
 	if (answer[cmd_type] == C2_NET_TEST_CMD_STATUS_DATA) {
@@ -858,7 +926,12 @@ static size_t net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 	}
 	deadline = c2_time_add(c2_time_now(), cfg->ntcc_cmd_recv_timeout);
 	while (c2_time_now() <= deadline && rcvd_nr < nodes->ntsl_nr) {
-		rc = c2_net_test_commands_recv(cmd_ctx, &cmd, deadline);
+		LOGD("rc = c2_net_test_commands_recv(cmd_ctx, cmd, "
+		     "deadline = %lu); now = %lu",
+		     (long unsigned int) deadline,
+		     (long unsigned int) c2_time_now());
+		rc = c2_net_test_commands_recv(cmd_ctx, cmd, deadline);
+		LOGD("done. rc = %d", rc);
 		/* deadline reached */
 		if (rc == -ETIMEDOUT)
 			break;
@@ -866,43 +939,53 @@ static size_t net_test_console_cmd(struct c2_net_test_console_ctx *ctx,
 		if (rc != 0)
 			continue;
 		rcvd_nr++;
+		LOGD("reject unknown sender");
 		/* reject unknown sender */
-		j = cmd.ntc_ep_index;
+		j = cmd->ntc_ep_index;
 		if (j < 0)
 			goto reuse_cmd;
+		LOGD("reject unexpected command type");
 		/* reject unexpected command type */
-		if (cmd.ntc_type != answer[cmd_type])
+		if (cmd->ntc_type != answer[cmd_type])
 			goto reuse_cmd;
 		/*
 		 * reject command from node, which can't have outgoing cmd
 		 * because c2_net_test_commands_send() to this node failed.
 		 */
+		LOGD("reject 3");
 		C2_ASSERT(j >= 0 && j < nodes->ntsl_nr);
 		if (rctx->ntcrc_errno[j] != 0)
 			goto reuse_cmd;
 		/* handle incoming command */
+		LOGD("handle incoming cmd");
 		if (answer[cmd_type] == C2_NET_TEST_CMD_STATUS_DATA) {
-			status_data_add(sd, &cmd.ntc_status_data);
+			status_data_add(sd, &cmd->ntc_status_data);
 			success_nr++;
 		} else {
-			rctx->ntcrc_status[j] = cmd.ntc_done.ntcd_errno;
+			rctx->ntcrc_status[j] = cmd->ntc_done.ntcd_errno;
 			if (rctx->ntcrc_status[j] == 0)
 				success_nr++;
 		}
 		/*
 		 * @todo console user can't recover from this error -
-		 * cmd.ntc_buf_index is lost. use ringbuf to save?
+		 * cmd->ntc_buf_index is lost. use ringbuf to save?
 		 */
 reuse_cmd:
+		LOGD("c2_net_test_commands_recv_enqueue()");
 		rc = c2_net_test_commands_recv_enqueue(cmd_ctx,
-						       cmd.ntc_buf_index);
+						       cmd->ntc_buf_index);
+		LOGD("c2_net_test_commands_recv_enqueue() done.");
 		if (j != -1) {
 			C2_ASSERT(j >= 0 && j < nodes->ntsl_nr);
 			rctx->ntcrc_errno[j] = rc;
 		}
-		c2_net_test_commands_received_free(&cmd);
+		LOGD("c2_net_test_commands_received_free()");
+		c2_net_test_commands_received_free(cmd);
+		LOGD("c2_net_test_commands_received_free() done.");
 	}
 
+done:
+	c2_free(cmd);
 	LOGD("console: rc = %d\n", rc);
 
 	return success_nr;
@@ -910,29 +993,33 @@ reuse_cmd:
 
 void c2_net_test_bug_ut(void)
 {
-	struct c2_net_test_console_cfg console_cfg;
-	struct c2_net_test_console_ctx console;
-	int			       rc;
-	int			       i;
-	const char		      *nid = "0@lo";
-	enum c2_net_test_type	       type = C2_NET_TEST_TYPE_STUB;
-	size_t			       clients_nr = 1;
-	size_t			       servers_nr = 1;
-	size_t			       concurrency_client = 1;
-	size_t			       concurrency_server = 1;
-	size_t			       msg_nr = 1;
-	c2_bcount_t		       msg_size = 1;
-	size_t			       bd_buf_nr_client = 0;
-	size_t			       bd_buf_nr_server = 0;
-	c2_bcount_t		       bd_buf_size = 0;
-	size_t			       bd_nr_max = 0;
-
-#ifdef __KERNEL__
-	kgdb_breakpoint();
-#endif
+	struct c2_net_test_console_cfg *console_cfg;
+	struct c2_net_test_console_ctx *console;
+	int				rc;
+	int				i;
+	const char		       *nid = "0@lo";
+	enum c2_net_test_type		type = C2_NET_TEST_TYPE_STUB;
+	size_t				clients_nr = 1;
+	size_t				servers_nr = 1;
+	size_t				concurrency_client = 1;
+	size_t				concurrency_server = 1;
+	size_t				msg_nr = 1;
+	c2_bcount_t			msg_size = 1;
+	size_t				bd_buf_nr_client = 0;
+	size_t				bd_buf_nr_server = 0;
+	c2_bcount_t			bd_buf_size = 0;
+	size_t				bd_nr_max = 0;
+
+	kgdb_break();
+	// net_test_commands_debug = true;
 
 	C2_PRE(clients_nr <= NTCS_NODES_MAX);
 	C2_PRE(servers_nr <= NTCS_NODES_MAX);
+
+	C2_ALLOC_PTR(console_cfg);
+	C2_ALLOC_PTR(console);
+	if (console_cfg == NULL || console == NULL)
+		goto done;
 	/* prepare config for test clients and test servers */
 	timeout_cmd  = ms2time(NTCS_TIMEOUT_CMD_MS);
 	timeout_send = ms2time(NTCS_TIMEOUT_SEND_MS);
@@ -963,7 +1050,7 @@ void c2_net_test_bug_ut(void)
 	for (i = 0; i < clients_nr + servers_nr; ++i) {
 		rc = C2_THREAD_INIT(&node_thread[i],
 				    struct c2_net_test_node_cfg *,
-				    NULL, &net_test_node2, &node_cfg[i],
+				    NULL, &net_test_node3, &node_cfg[i],
 				    "ut_node_thread#%d", i);
 		C2_UT_ASSERT(rc == 0);
 	}
@@ -972,62 +1059,62 @@ void c2_net_test_bug_ut(void)
 		c2_semaphore_down(&node_init_sem);
 	c2_semaphore_fini(&node_init_sem);
 	/* prepare console config */
-	console_cfg.ntcc_addr_console4servers = addr_console4servers;
-	console_cfg.ntcc_addr_console4clients = addr_console4clients;
-	rc = c2_net_test_slist_init(&console_cfg.ntcc_clients, clients, ',');
+	console_cfg->ntcc_addr_console4servers = addr_console4servers;
+	console_cfg->ntcc_addr_console4clients = addr_console4clients;
+	rc = c2_net_test_slist_init(&console_cfg->ntcc_clients, clients, ',');
 	C2_UT_ASSERT(rc == 0);
-	rc = c2_net_test_slist_init(&console_cfg.ntcc_servers, servers, ',');
+	rc = c2_net_test_slist_init(&console_cfg->ntcc_servers, servers, ',');
 	C2_UT_ASSERT(rc == 0);
-	rc = c2_net_test_slist_init(&console_cfg.ntcc_data_clients,
+	rc = c2_net_test_slist_init(&console_cfg->ntcc_data_clients,
 				    clients_data, ',');
 	C2_UT_ASSERT(rc == 0);
-	rc = c2_net_test_slist_init(&console_cfg.ntcc_data_servers,
+	rc = c2_net_test_slist_init(&console_cfg->ntcc_data_servers,
 				    servers_data, ',');
 	C2_UT_ASSERT(rc == 0);
-	console_cfg.ntcc_cmd_send_timeout   = timeout_cmd;
-	console_cfg.ntcc_cmd_recv_timeout   = timeout_cmd;
-	console_cfg.ntcc_buf_send_timeout   = timeout_send;
-	console_cfg.ntcc_buf_recv_timeout   = timeout_recv;
-	console_cfg.ntcc_buf_bulk_timeout   = timeout_bulk;
-	console_cfg.ntcc_test_type	    = type;
-	console_cfg.ntcc_msg_nr		    = msg_nr;
-	console_cfg.ntcc_msg_size	    = msg_size;
-	console_cfg.ntcc_bd_buf_nr_server   = bd_buf_nr_server;
-	console_cfg.ntcc_bd_buf_nr_client   = bd_buf_nr_client;
-	console_cfg.ntcc_bd_buf_size	    = bd_buf_size;
-	console_cfg.ntcc_bd_nr_max	    = bd_nr_max;
-	console_cfg.ntcc_concurrency_server = concurrency_server;
-	console_cfg.ntcc_concurrency_client = concurrency_client;
+	console_cfg->ntcc_cmd_send_timeout   = timeout_cmd;
+	console_cfg->ntcc_cmd_recv_timeout   = timeout_cmd;
+	console_cfg->ntcc_buf_send_timeout   = timeout_send;
+	console_cfg->ntcc_buf_recv_timeout   = timeout_recv;
+	console_cfg->ntcc_buf_bulk_timeout   = timeout_bulk;
+	console_cfg->ntcc_test_type	     = type;
+	console_cfg->ntcc_msg_nr	     = msg_nr;
+	console_cfg->ntcc_msg_size	     = msg_size;
+	console_cfg->ntcc_bd_buf_nr_server   = bd_buf_nr_server;
+	console_cfg->ntcc_bd_buf_nr_client   = bd_buf_nr_client;
+	console_cfg->ntcc_bd_buf_size	     = bd_buf_size;
+	console_cfg->ntcc_bd_nr_max	     = bd_nr_max;
+	console_cfg->ntcc_concurrency_server = concurrency_server;
+	console_cfg->ntcc_concurrency_client = concurrency_client;
 	/* initialize console */
 	LOGD("console init");
-	rc = c2_net_test_console_init(&console, &console_cfg);
+	rc = c2_net_test_console_init(console, console_cfg);
 	C2_UT_ASSERT(rc == 0);
 	/* send INIT to the test servers */
 	LOGD("sending INIT to the test servers");
-	rc = net_test_console_cmd(&console, C2_NET_TEST_ROLE_SERVER,
+	rc = net_test_console_cmd(console, C2_NET_TEST_ROLE_SERVER,
 				     C2_NET_TEST_CMD_INIT);
 	C2_UT_ASSERT(rc == servers_nr);
 	/* send INIT to the test clients */
 	LOGD("sending INIT to the test clients");
-	rc = net_test_console_cmd(&console, C2_NET_TEST_ROLE_CLIENT,
+	rc = net_test_console_cmd(console, C2_NET_TEST_ROLE_CLIENT,
 				     C2_NET_TEST_CMD_INIT);
 	C2_UT_ASSERT(rc == clients_nr);
 	/* send STOP command to the test clients */
 	LOGD("sending STOP to the test clients");
-	rc = net_test_console_cmd(&console, C2_NET_TEST_ROLE_CLIENT,
+	rc = net_test_console_cmd(console, C2_NET_TEST_ROLE_CLIENT,
 				     C2_NET_TEST_CMD_STOP);
 	C2_UT_ASSERT(rc == clients_nr);
 	/* send STOP command to the test servers */
 	LOGD("sending STOP to the test servers");
-	rc = net_test_console_cmd(&console, C2_NET_TEST_ROLE_SERVER,
+	rc = net_test_console_cmd(console, C2_NET_TEST_ROLE_SERVER,
 				     C2_NET_TEST_CMD_STOP);
 	C2_UT_ASSERT(rc == servers_nr);
 	/* finalize console */
-	c2_net_test_console_fini(&console);
-	c2_net_test_slist_fini(&console_cfg.ntcc_servers);
-	c2_net_test_slist_fini(&console_cfg.ntcc_clients);
-	c2_net_test_slist_fini(&console_cfg.ntcc_data_servers);
-	c2_net_test_slist_fini(&console_cfg.ntcc_data_clients);
+	c2_net_test_console_fini(console);
+	c2_net_test_slist_fini(&console_cfg->ntcc_servers);
+	c2_net_test_slist_fini(&console_cfg->ntcc_clients);
+	c2_net_test_slist_fini(&console_cfg->ntcc_data_servers);
+	c2_net_test_slist_fini(&console_cfg->ntcc_data_clients);
 	/* finalize test clients and test servers */
 	for (i = 0; i < clients_nr + servers_nr; ++i) {
 		rc = c2_thread_join(&node_thread[i]);
@@ -1037,10 +1124,421 @@ void c2_net_test_bug_ut(void)
 	}
 	addr_free(addr_console4servers);
 	addr_free(addr_console4clients);
+done:
+	c2_free(console);
+	c2_free(console_cfg);
 }
 
 /* END COPY-PASTE FROM client_server.c */
 
+enum {
+	BUG2_NODES_NR = 3,
+	CMD_NR	      = 3,
+	DEADLINE_S    = 10,
+};
+
+struct bug2_node {
+	struct c2_semaphore	    bn_sem_init;
+	struct c2_semaphore	    bn_sem_init2;
+	char			   *bn_tm_addr;
+	struct c2_thread	    bn_thread;
+	struct c2_net_test_cmd_ctx  bn_cmd;
+};
+
+static struct bug2_node nodes[BUG2_NODES_NR];
+
+#if 0
+static void bug2_node_main(struct bug2_node *node)
+{
+	struct c2_net_test_cmd cmd;
+	int		       cmd_rcvd = 0;
+	int		       rc;
+
+	while (cmd_rcvd != CMD_NR) {
+		rc = c2_net_test_commands_recv(&node->bn_cmd, &cmd,
+					       c2_time_from_now(0, 25000000));
+		if (rc == -ETIMEDOUT)
+			continue;
+		/*
+		LOGD("node: received");
+		*/
+		C2_ASSERT(rc == 0);
+		C2_ASSERT(cmd.ntc_ep_index == 0);
+		rc = c2_net_test_commands_recv_enqueue(&node->bn_cmd,
+						       cmd.ntc_buf_index);
+		C2_ASSERT(rc == 0);
+		c2_net_test_commands_send_wait_all(&node->bn_cmd);
+		rc = c2_net_test_commands_send(&node->bn_cmd, &cmd);
+		/*
+		LOGD("node: sent");
+		*/
+		C2_ASSERT(rc == 0);
+		c2_net_test_commands_received_free(&cmd);
+		++cmd_rcvd;
+	}
+}
+#endif
+
+static void bug2_console_main(struct bug2_node *node)
+{
+	struct c2_net_test_cmd cmd;
+	int		       cmd_sent = 0;
+	int		       cmd_rcvd;
+	int		       i;
+	c2_time_t	       deadline;
+	int		       rc;
+
+	C2_SET0(&cmd);
+	while (cmd_sent != CMD_NR) {
+		c2_net_test_commands_send_wait_all(&node->bn_cmd);
+		for (i = 1; i < ARRAY_SIZE(nodes); ++i) {
+			cmd.ntc_ep_index = i - 1;
+			switch (cmd_sent) {
+			case 0:
+				cmd.ntc_type = C2_NET_TEST_CMD_INIT;
+				cmd.ntc_init.ntci_tm_ep = "tm_ep";
+				cmd.ntc_init.ntci_type = C2_NET_TEST_TYPE_STUB;
+				break;
+			case 1:
+				cmd.ntc_type = C2_NET_TEST_CMD_START;
+				break;
+			case CMD_NR - 1:
+				cmd.ntc_type = C2_NET_TEST_CMD_STOP;
+				break;
+			default:
+				cmd.ntc_type = C2_NET_TEST_CMD_STATUS;
+			}
+			rc = c2_net_test_commands_send(&node->bn_cmd, &cmd);
+			C2_ASSERT(rc == 0);
+		}
+		c2_net_test_commands_send_wait_all(&node->bn_cmd);
+		LOGD("console: sent to all");
+		cmd_rcvd = 0;
+		deadline = c2_time_from_now(DEADLINE_S, 0);
+		while (cmd_rcvd != ARRAY_SIZE(nodes) - 1
+		       && c2_time_now() <= deadline) {
+			rc = c2_net_test_commands_recv(&node->bn_cmd, &cmd,
+						       deadline);
+			C2_ASSERT(rc == 0);
+			LOGD("console: received");
+			rc = c2_net_test_commands_recv_enqueue(&node->bn_cmd,
+							cmd.ntc_buf_index);
+			C2_ASSERT(rc == 0);
+			++cmd_rcvd;
+			c2_net_test_commands_received_free(&cmd);
+		}
+		C2_ASSERT(cmd_rcvd == ARRAY_SIZE(nodes) - 1);
+		++cmd_sent;
+	}
+}
+
+#if 0
+static void bug2_node_thread(struct bug2_node *node)
+{
+	struct c2_net_test_slist endpoints;
+	static char		 buf[BUG2_NODES_NR * NTCS_NODE_ADDR_MAX];
+	int			 rc;
+	bool			 console_thread = node == &nodes[0];
+	int			 i;
+
+	if (console_thread) {
+		buf[0] = '\0';
+		for (i = 1; i < ARRAY_SIZE(nodes); ++i) {
+			strncat(buf, nodes[i].bn_tm_addr, ARRAY_SIZE(buf));
+			if (i != ARRAY_SIZE(nodes) - 1)
+				strncat(buf, ",", ARRAY_SIZE(buf));
+		}
+		buf[ARRAY_SIZE(buf) - 1] = '\0';
+		rc = c2_net_test_slist_init(&endpoints, buf, ',');
+		C2_ASSERT(rc == 0);
+	} else {
+		rc = c2_net_test_slist_init(&endpoints,
+					    nodes[0].bn_tm_addr, '`');
+		C2_ASSERT(rc == 0);
+	}
+	rc = c2_net_test_commands_init(&node->bn_cmd, node->bn_tm_addr,
+				       C2_MKTIME(DEADLINE_S, 0),
+				       NULL, &endpoints);
+	C2_ASSERT(rc == 0);
+	/* barrier with main thread */
+	c2_semaphore_up(&node->bn_sem_init);
+	c2_semaphore_down(&node->bn_sem_init2);
+
+	if (console_thread) {
+		bug2_console_main(node);
+	} else {
+		bug2_node_main(node);
+	}
+
+	c2_net_test_commands_fini(&node->bn_cmd);
+	c2_net_test_slist_fini(&endpoints);
+}
+#endif
+
+#if 0
+static int node_cmd_get(struct c2_net_test_cmd_ctx *cmd_ctx,
+			struct c2_net_test_cmd *cmd,
+			c2_time_t deadline)
+{
+	int rc = c2_net_test_commands_recv(cmd_ctx, cmd, deadline);
+	if (rc == 0)
+		rc = c2_net_test_commands_recv_enqueue(cmd_ctx,
+						       cmd->ntc_buf_index);
+	if (rc == 0) {
+		LOGD("node_cmd_get: rc = %d", rc);
+		LOGD("node_cmd_get: cmd->ntc_type = %d", cmd->ntc_type);
+		LOGD("node_cmd_get: cmd->ntc_init.ntci_msg_nr = %lu",
+		     (unsigned long) cmd->ntc_init.ntci_msg_nr);
+	}
+	return rc;
+}
+#endif
+
+static void node_thread_func(struct c2_net_test_node_ctx *ctx)
+{
+	struct c2_net_test_cmd *cmd;
+	struct c2_net_test_cmd *reply;
+	int			rc;
+
+	C2_PRE(ctx != NULL);
+
+	C2_ALLOC_PTR(cmd);
+	C2_ALLOC_PTR(reply);
+	if (cmd == NULL || reply == NULL) {
+		rc = -ENOMEM;
+		goto done;
+	}
+
+#if 0
+	/* wait for INIT command */
+	do {
+		deadline = c2_time_from_now(0, 20000000);
+		rc = node_cmd_get(&ctx->ntnc_cmd, cmd, deadline);
+		if (rc != 0 && rc != -ETIMEDOUT)
+			break;
+	} while (!(rc == 0 && cmd->ntc_type == C2_NET_TEST_CMD_INIT) &&
+		 !ctx->ntnc_exit_flag);
+	ctx->ntnc_errno = rc;
+	if (ctx->ntnc_exit_flag) {
+		c2_net_test_commands_received_free(cmd);
+		goto done;
+	}
+	if (ctx->ntnc_errno != 0)
+		goto done;
+	/* handle INIT command inside main loop */
+	skip_cmd_get = true;
+	/* start main loop */
+#endif
+	rc = 0;
+	do {
+		/* get command */
+		rc = c2_net_test_commands_recv(&ctx->ntnc_cmd, cmd,
+					       c2_time_from_now(0, 25000000));
+					       // c2_time_now());
+		if (rc == 0)
+			rc = c2_net_test_commands_recv_enqueue(&ctx->ntnc_cmd,
+							cmd->ntc_buf_index);
+		if (rc == 0 && cmd->ntc_ep_index >= 0) {
+			LOGD("node_thread: have command");
+			/* we have command. handle it */
+			if (cmd->ntc_type == C2_NET_TEST_CMD_STOP)
+				ctx->ntnc_exit_flag = true;
+			reply->ntc_type = C2_NET_TEST_CMD_INIT_DONE;
+			reply->ntc_done.ntcd_errno = 0;
+			reply->ntc_ep_index = cmd->ntc_ep_index;
+			c2_net_test_commands_received_free(cmd);
+			/* send reply */
+			c2_net_test_commands_send_wait_all(&ctx->ntnc_cmd);
+			rc = c2_net_test_commands_send(&ctx->ntnc_cmd, reply);
+			C2_SET0(cmd);
+		} else if (rc == -ETIMEDOUT) {
+			rc = 0;
+		} else {
+			break;
+		}
+	} while (!ctx->ntnc_exit_flag && rc == 0);
+done:
+	c2_free(cmd);
+	c2_free(reply);
+	LOGD("rc = %d", rc);
+	ctx->ntnc_errno = rc;
+	c2_semaphore_up(&ctx->ntnc_thread_finished_sem);
+}
+
+static void bug2_node_thread2(struct bug2_node *node)
+{
+	struct c2_net_test_node_ctx *ctx;
+	struct c2_net_test_node_cfg *cfg;
+	struct c2_net_test_slist     ep_list;
+	int			     rc;
+
+	/* init */
+	C2_ALLOC_PTR(ctx);
+	C2_UT_ASSERT(ctx != NULL);
+	C2_ALLOC_PTR(cfg);
+	C2_UT_ASSERT(cfg != NULL);
+	cfg->ntnc_addr	       = node->bn_tm_addr;
+	cfg->ntnc_addr_console = nodes[0].bn_tm_addr;
+	cfg->ntnc_send_timeout = ms2time(NTCS_TIMEOUT_CMD_MS);
+	rc = c2_net_test_slist_init(&ep_list, cfg->ntnc_addr_console, '`');
+	C2_UT_ASSERT(rc == 0);
+	rc = c2_net_test_commands_init(&ctx->ntnc_cmd, cfg->ntnc_addr,
+				       cfg->ntnc_send_timeout, NULL, &ep_list);
+	C2_UT_ASSERT(rc == 0);
+	c2_net_test_slist_fini(&ep_list);
+	rc = c2_semaphore_init(&ctx->ntnc_thread_finished_sem, 0);
+	C2_UT_ASSERT(rc == 0);
+	ctx->ntnc_exit_flag = false;
+	ctx->ntnc_errno = 0;
+	/* start */
+	rc = C2_THREAD_INIT(&ctx->ntnc_thread, struct c2_net_test_node_ctx *,
+			    NULL, &node_thread_func, ctx,
+			    "net_test_node_thread");
+	C2_UT_ASSERT(rc == 0);
+	/* barrier with main thread */
+	c2_semaphore_up(&node->bn_sem_init);
+	c2_semaphore_down(&node->bn_sem_init2);
+	/* stop */
+	c2_semaphore_down(&ctx->ntnc_thread_finished_sem);
+	ctx->ntnc_exit_flag = true;
+	c2_net_test_commands_send_wait_all(&ctx->ntnc_cmd);
+	rc = c2_thread_join(&ctx->ntnc_thread);
+	C2_UT_ASSERT(rc == 0);
+	/* fini */
+	c2_thread_fini(&ctx->ntnc_thread);
+	c2_semaphore_fini(&ctx->ntnc_thread_finished_sem);
+	c2_net_test_commands_fini(&ctx->ntnc_cmd);
+	c2_free(cfg);
+	c2_free(ctx);
+}
+
+static void bug2_console_thread2(struct bug2_node *node)
+{
+	struct c2_net_test_slist endpoints;
+	static char		 buf[BUG2_NODES_NR * NTCS_NODE_ADDR_MAX];
+	int			 rc;
+	int			 i;
+
+	buf[0] = '\0';
+	for (i = 1; i < ARRAY_SIZE(nodes); ++i) {
+		strncat(buf, nodes[i].bn_tm_addr, ARRAY_SIZE(buf));
+		if (i != ARRAY_SIZE(nodes) - 1)
+			strncat(buf, ",", ARRAY_SIZE(buf));
+	}
+	buf[ARRAY_SIZE(buf) - 1] = '\0';
+	rc = c2_net_test_slist_init(&endpoints, buf, ',');
+	C2_ASSERT(rc == 0);
+	rc = c2_net_test_commands_init(&node->bn_cmd, node->bn_tm_addr,
+				       C2_MKTIME(DEADLINE_S, 0),
+				       NULL, &endpoints);
+	C2_ASSERT(rc == 0);
+	/* barrier with main thread */
+	c2_semaphore_up(&node->bn_sem_init);
+	c2_semaphore_down(&node->bn_sem_init2);
+
+	bug2_console_main(node);
+	c2_net_test_commands_fini(&node->bn_cmd);
+	c2_net_test_slist_fini(&endpoints);
+}
+
+/* main thread */
+void c2_net_test_bug2_ut(void)
+{
+	const char	 *nid = "0@lo";
+	const int	  tmid_start = 2000;
+	struct bug2_node *node;
+	size_t		  i;
+	int		  rc;
+
+	// net_test_commands_debug = true;
+	/* console is node #0 */
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
+		node = &nodes[i];
+		rc = c2_semaphore_init(&node->bn_sem_init, 0);
+		C2_ASSERT(rc == 0);
+		rc = c2_semaphore_init(&node->bn_sem_init2, 0);
+		C2_ASSERT(rc == 0);
+		node->bn_tm_addr = addr_get(nid, tmid_start + i);
+		C2_ASSERT(node->bn_tm_addr != NULL);
+	}
+	/* start threads */
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
+		node = &nodes[i];
+		rc = C2_THREAD_INIT(&node->bn_thread, struct bug2_node *, NULL,
+				    i == 0 ? &bug2_console_thread2 :
+					     &bug2_node_thread2,
+				    node, "#%dbug2_%s", (int) i,
+				    i == 0 ? "console" : "node");
+		C2_ASSERT(rc == 0);
+	}
+	/* barrier with node threads */
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i)
+		c2_semaphore_down(&nodes[i].bn_sem_init);
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i)
+		c2_semaphore_up(&nodes[i].bn_sem_init2);
+	/* stop threads */
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
+		node = &nodes[i];
+		rc = c2_thread_join(&node->bn_thread);
+		C2_ASSERT(rc == 0);
+		c2_thread_fini(&node->bn_thread);
+	}
+	/* fini nodes */
+	for (i = 0; i < ARRAY_SIZE(nodes); ++i) {
+		node = &nodes[i];
+		c2_semaphore_fini(&node->bn_sem_init2);
+		c2_semaphore_fini(&node->bn_sem_init);
+		c2_free(node->bn_tm_addr);
+	}
+}
+
+enum {
+	THREAD_NR = 2,
+};
+
+struct sem_test {
+	struct c2_thread    st_thread;
+	struct c2_semaphore st_sem;
+};
+
+static struct sem_test sem_tests[THREAD_NR];
+
+static void sem_test_thread(struct sem_test *test)
+{
+	while (!c2_semaphore_timeddown(&test->st_sem, c2_time_now()))
+		;
+}
+
+void c2_net_test_bug3_ut(void)
+{
+	struct sem_test *test;
+	size_t		 i;
+	int		 rc;
+
+	/* start threads */
+	for (i = 0; i < ARRAY_SIZE(sem_tests); ++i) {
+		test = &sem_tests[i];
+		rc = C2_THREAD_INIT(&test->st_thread, struct sem_test *, NULL,
+				    &sem_test_thread,
+				    test, "#%dbug3_thread", (int) i);
+		C2_ASSERT(rc == 0);
+		rc = c2_semaphore_init(&test->st_sem, 0);
+		C2_ASSERT(rc == 0);
+	}
+	/* up() all semaphores after 1s */
+	c2_nanosleep(C2_MKTIME(1, 0), NULL);
+	for (i = 0; i < ARRAY_SIZE(sem_tests); ++i)
+		c2_semaphore_up(&sem_tests[i].st_sem);
+	/* stop threads */
+	for (i = 0; i < ARRAY_SIZE(sem_tests); ++i) {
+		test = &sem_tests[i];
+		rc = c2_thread_join(&test->st_thread);
+		C2_ASSERT(rc == 0);
+		c2_thread_fini(&test->st_thread);
+		c2_semaphore_fini(&test->st_sem);
+	}
+}
+
 /*
  *  Local variables:
  *  c-indentation-style: "K&R"
-- 
1.8.3.2


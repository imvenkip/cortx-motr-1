From cb19bbd79fcddc0b6e7817ba1231b46387aa6b71 Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Thu, 14 Nov 2013 23:37:21 +0200
Subject: [PATCH 01/26] be/ut/helper: m0_be_ut_{alloc,free}() + _PTR() macros
 implemented

---
 be/ut/helper.c | 44 ++++++++++++++++++++++++++++++++++++++++++++
 be/ut/helper.h | 15 +++++++++++++++
 2 files changed, 59 insertions(+)

diff --git a/be/ut/helper.c b/be/ut/helper.c
index 4627c95..68b4084 100644
--- a/be/ut/helper.c
+++ b/be/ut/helper.c
@@ -629,6 +629,50 @@ void m0_be_ut_seg_allocator_fini(struct m0_be_ut_seg *ut_seg,
 	be_ut_seg_allocator_initfini(ut_seg, ut_be, false);
 }
 
+static void be_ut_alloc_free(struct m0_be_ut_backend *ut_be,
+			     struct m0_be_ut_seg *ut_seg,
+			     enum m0_be_allocator_op optype,
+			     void **ptr,
+			     m0_bcount_t size)
+{
+	struct m0_be_seg       *seg = &ut_seg->bus_seg;
+	struct m0_be_allocator *a = m0_be_seg_allocator(seg);
+	struct m0_be_tx_credit	cred = {};
+	struct m0_be_tx		tx   = {};
+	int			rc;
+
+	M0_PRE(M0_IN(optype, (M0_BAO_ALLOC, M0_BAO_FREE)));
+
+	m0_be_ut_tx_init(&tx, ut_be);
+	m0_be_allocator_credit(a, optype, size, 0, &cred);
+	m0_be_tx_prep(&tx, &cred);
+	rc = m0_be_tx_open_sync(&tx);
+	M0_ASSERT(rc == 0);
+	if (optype == M0_BAO_ALLOC) {
+		M0_BE_OP_SYNC(op, m0_be_alloc(a, &tx, &op, ptr, size));
+		M0_ASSERT(*ptr != NULL);
+	} else {
+		M0_BE_OP_SYNC(op, m0_be_free(a, &tx, &op, *ptr));
+	}
+	m0_be_tx_close_sync(&tx);
+	m0_be_tx_fini(&tx);
+}
+
+M0_INTERNAL void m0_be_ut_alloc(struct m0_be_ut_backend *ut_be,
+				struct m0_be_ut_seg *ut_seg,
+				void **ptr,
+				m0_bcount_t size)
+{
+	be_ut_alloc_free(ut_be, ut_seg, M0_BAO_ALLOC, ptr, size);
+}
+
+M0_INTERNAL void m0_be_ut_free(struct m0_be_ut_backend *ut_be,
+			       struct m0_be_ut_seg *ut_seg,
+			       void *ptr)
+{
+	be_ut_alloc_free(ut_be, ut_seg, M0_BAO_FREE, &ptr, 0);
+}
+
 #undef REQH_EMU
 
 M0_INTERNAL void m0_be_ut_txc_init(struct m0_be_ut_txc *tc)
diff --git a/be/ut/helper.h b/be/ut/helper.h
index 3dc1959..a311019 100644
--- a/be/ut/helper.h
+++ b/be/ut/helper.h
@@ -154,6 +154,21 @@ void m0_be_ut_seg_allocator_init(struct m0_be_ut_seg *ut_seg,
 void m0_be_ut_seg_allocator_fini(struct m0_be_ut_seg *ut_seg,
 				 struct m0_be_ut_backend *ut_be);
 
+M0_INTERNAL void m0_be_ut_alloc(struct m0_be_ut_backend *ut_be,
+				struct m0_be_ut_seg *ut_seg,
+				void **ptr,
+				m0_bcount_t size);
+M0_INTERNAL void m0_be_ut_free(struct m0_be_ut_backend *ut_be,
+			       struct m0_be_ut_seg *ut_seg,
+			       void *ptr);
+
+#define M0_BE_UT_ALLOC_PTR(ut_be, ut_seg, ptr)				\
+		m0_be_ut_alloc((ut_be), (ut_seg),			\
+			       (void **) &(ptr), sizeof(*(ptr)))
+
+#define M0_BE_UT_FREE_PTR(ut_be, ut_seg, ptr)				\
+		m0_be_ut_free((ut_be), (ut_seg), (ptr));
+
 struct m0_stob *m0_be_ut_stob_get(bool stob_create);
 struct m0_stob *m0_be_ut_stob_get_by_id(uint64_t id, bool stob_create);
 void m0_be_ut_stob_put(struct m0_stob *stob, bool stob_destroy);
-- 
1.8.3.2


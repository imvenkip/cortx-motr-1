From 293610520f33a993f251f8ace64767b1df8dc3a4 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Wed, 17 Apr 2013 16:25:47 +0300
Subject: [PATCH 83/94] BugFix:be/tree.c:get_btree_node(): Uninitialized
 nodeposition if key is missing

---
 be/tree.c  | 3 +--
 be/ut/be.c | 3 ---
 2 files changed, 1 insertion(+), 5 deletions(-)

diff --git a/be/tree.c b/be/tree.c
index 3831fdc..c86f378 100644
--- a/be/tree.c
+++ b/be/tree.c
@@ -845,7 +845,7 @@ M0_INTERNAL int btree_delete_key(struct btree *btree,
  */
 struct node_pos get_btree_node(struct btree *btree, void *key)
 {
-	struct node_pos kp;
+	struct node_pos kp = { .node = NULL };
 	unsigned int key_val = btree->value(key);
 	struct bt_node *node;
 	unsigned int i = 0;
@@ -878,7 +878,6 @@ struct node_pos get_btree_node(struct btree *btree, void *key)
 		node = node->children[i];
 	}
 	return kp;
-
 }
 
 /**
diff --git a/be/ut/be.c b/be/ut/be.c
index 19006be..7dfe341 100644
--- a/be/ut/be.c
+++ b/be/ut/be.c
@@ -395,8 +395,6 @@ M0_UNUSED static void test_be_tree_load(void)
 	max = *(uint32_t*)btree_get_max_key(*tree);
 	M0_LOG(M0_DEBUG, "tree order: %u", max);
 
-#if 0
-	/* XXX: looks like search does not handle seaches of missing keys... */
 	for (i = min; i <= max; ++i) {
 		kv = btree_search(*tree, &i);
 		if (kv == NULL)
@@ -405,7 +403,6 @@ M0_UNUSED static void test_be_tree_load(void)
 		M0_LOG(M0_DEBUG, "(%u, %u)", *(uint32_t *)kv->key,
 					     *(uint32_t *)kv->val);
 	}
-#endif
 	btree_dbg_print(*tree, (*tree)->root);
 
 	/*
-- 
1.8.3.2


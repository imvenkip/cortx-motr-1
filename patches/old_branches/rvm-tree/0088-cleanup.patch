From ff6829e6e29e5e7ab6f48636374e750ecb460219 Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Mon, 22 Apr 2013 15:27:41 +0300
Subject: [PATCH 88/94] cleanup.

---
 be/tree.c | 107 ++++++++++++++++++++++++++++++++------------------------------
 1 file changed, 56 insertions(+), 51 deletions(-)

diff --git a/be/tree.c b/be/tree.c
index 3b52ce8..eb5344c 100644
--- a/be/tree.c
+++ b/be/tree.c
@@ -52,24 +52,24 @@ static void move_key(struct btree *btree,
 		     unsigned int index,
 		     enum position_t pos);
 
-static struct node_pos get_max_key_pos(struct btree *btree,
-				       struct bt_node *subtree);
+static struct node_pos get_max_key_pos(struct btree	 *btree,
+				       struct bt_node	 *subtree);
 
-static struct node_pos get_min_key_pos(struct btree *btree,
-				       struct bt_node *subtree);
+static struct node_pos get_min_key_pos(struct btree	 *btree,
+				       struct bt_node	 *subtree);
 
 static struct bt_node *merge_siblings(struct btree *btree,
 				      struct btree_tx_impl *tx,
 				      struct bt_node *parent,
 				      unsigned int index, enum position_t pos);
 
-static void copy_key_val(struct btree *btree,
-			 struct btree_tx_impl *tx,
-			 struct bt_key_val *src,
-			 struct bt_key_val *dst);
+static void copy_key_val(struct btree		 *btree,
+			 struct btree_tx_impl	 *tx,
+			 struct bt_key_val	 *src,
+			 struct bt_key_val	 *dst);
 
-static int node_update(/* const */ struct bt_node *node,
-		       const struct btree *btree,
+static int node_update(struct bt_node	    *node,
+		       const struct btree   *btree,
 		       struct btree_tx_impl *tx)
 {
 	int rc;
@@ -94,8 +94,8 @@ static int node_update(/* const */ struct bt_node *node,
  *	@param order The order of the B-tree
  *	@return The an empty B-tree
  */
-M0_INTERNAL struct btree *btree_create(unsigned int order,
-				       struct btree_tx_impl *tx,
+M0_INTERNAL struct btree *btree_create(unsigned int		  order,
+				       struct btree_tx_impl	 *tx,
 				       const struct btree_tx_ops *ops)
 {
 	struct btree *btree;
@@ -119,7 +119,7 @@ M0_INTERNAL struct btree *btree_create(unsigned int order,
  *	@param leaf boolean set true for a leaf node
  *       @return The allocated B-tree node
  */
-static struct bt_node *allocate_btree_node(const struct btree *btree,
+static struct bt_node *allocate_btree_node(const struct btree   *btree,
 					   struct btree_tx_impl *tx)
 {
 	struct bt_node *node;
@@ -157,9 +157,9 @@ static struct bt_node *allocate_btree_node(const struct btree *btree,
  *       @param order Order of the B-Tree
  *       @return The allocated B-tree node
  */
-static int free_btree_node(struct bt_node *node,
-			   const struct btree *btree,
-			   struct btree_tx_impl *tx)
+static int free_btree_node(struct bt_node	 *node,
+			   const struct btree	 *btree,
+			   struct btree_tx_impl	 *tx)
 {
 	MEM_FREE(tx, node->children, CHILDREN_SIZE(btree));
 	MEM_FREE(tx, node->key_vals, KV_SIZE(btree));
@@ -176,11 +176,11 @@ static int free_btree_node(struct bt_node *node,
  *	@param child  Full child node
  *
  */
-static void btree_split_child(struct btree *btree,
-			      struct btree_tx_impl *tx,
-			      struct bt_node *parent,
-			      unsigned int index,
-			      struct bt_node *child)
+static void btree_split_child(struct btree		 *btree,
+			      struct btree_tx_impl	 *tx,
+			      struct bt_node		 *parent,
+			      unsigned int		  index,
+			      struct bt_node		 *child)
 {
 	int rc;
 	int i = 0;
@@ -234,10 +234,10 @@ static void btree_split_child(struct btree *btree,
  *	@return void
  */
 
-static void btree_insert_nonfull(struct btree *btree,
-				 struct btree_tx_impl *tx,
-				 struct bt_node *parent_node,
-				 struct bt_key_val *key_val)
+static void btree_insert_nonfull(struct btree		 *btree,
+				 struct btree_tx_impl	 *tx,
+				 struct bt_node		 *parent_node,
+				 struct bt_key_val	 *key_val)
 {
 	void *key = key_val->key;
 	int i;
@@ -282,9 +282,9 @@ static void btree_insert_nonfull(struct btree *btree,
  *       @param compare Function used to compare the two nodes of the tree
  *       @return success or failure
  */
-M0_INTERNAL int btree_insert_key(struct btree *btree,
-				 struct btree_tx_impl *tx,
-				 struct bt_key_val *key_val)
+M0_INTERNAL int btree_insert_key(struct btree		 *btree,
+				 struct btree_tx_impl	 *tx,
+				 struct bt_key_val	 *key_val)
 {
 	struct bt_node *rnode;
 	int rc;
@@ -316,8 +316,8 @@ M0_INTERNAL int btree_insert_key(struct btree *btree,
  *	@param subtree The subtree to be searched
  *	@return The node containing the key and position of the key
  */
-static struct node_pos
-get_max_key_pos(struct btree *btree, struct bt_node *subtree)
+static struct node_pos get_max_key_pos(struct btree   *btree,
+				       struct bt_node *subtree)
 {
 	struct node_pos node_pos;
 	struct bt_node *node = subtree;
@@ -346,8 +346,8 @@ get_max_key_pos(struct btree *btree, struct bt_node *subtree)
  *	@param subtree The subtree to be searched
  *	@return The node containing the key and position of the key
  */
-static struct node_pos
-get_min_key_pos(struct btree *btree, struct bt_node *subtree)
+static struct node_pos get_min_key_pos(struct btree   *btree,
+				       struct bt_node *subtree)
 {
 	struct node_pos node_pos;
 	struct bt_node *node = subtree;
@@ -378,10 +378,11 @@ get_min_key_pos(struct btree *btree, struct bt_node *subtree)
  *	@param pos left or right
  *	@return none
  */
-static struct bt_node *merge_siblings(struct btree *btree,
+static struct bt_node *merge_siblings(struct btree	   *btree,
 				      struct btree_tx_impl *tx,
-				      struct bt_node *parent,
-				      unsigned int index, enum position_t pos)
+				      struct bt_node	   *parent,
+				      unsigned int	    index,
+				      enum position_t	    pos)
 {
 	int rc;
 	unsigned int i, j;
@@ -458,11 +459,11 @@ static struct bt_node *merge_siblings(struct btree *btree,
  *	@param pos the position of the child to receive the key
  *	@return none
  */
-static void move_key(struct btree *btree,
+static void move_key(struct btree	  *btree,
 		     struct btree_tx_impl *tx,
-		     struct bt_node *node,
-		     unsigned int index,
-		     enum position_t pos)
+		     struct bt_node	  *node,
+		     unsigned int	   index,
+		     enum position_t	   pos)
 {
 	struct bt_node *lchild;
 	struct bt_node *rchild;
@@ -573,9 +574,9 @@ static struct bt_node *merge_nodes(struct btree *btree,
  *	@return 0 on success -1 on error
  */
 
-int delete_key_from_node(struct btree *btree,
-			 struct btree_tx_impl *tx,
-			 struct node_pos *node_pos)
+int delete_key_from_node(struct btree		 *btree,
+			 struct btree_tx_impl	 *tx,
+			 struct node_pos	 *node_pos)
 {
 	unsigned int keys_max = 2 * btree->order - 1;
 	unsigned int i;
@@ -624,10 +625,10 @@ int delete_key_from_node(struct btree *btree,
  *       @return success or failure
  */
 
-M0_INTERNAL int btree_delete_key(struct btree *btree,
-				 struct btree_tx_impl *tx,
-				 struct bt_node *subtree,
-				 void *key)
+M0_INTERNAL int btree_delete_key(struct btree		 *btree,
+				 struct btree_tx_impl	 *tx,
+				 struct bt_node		 *subtree,
+				 void			 *key)
 {
 	int rc;
 	unsigned int i, index;
@@ -945,14 +946,16 @@ M0_INTERNAL struct bt_key_val *btree_search(struct btree *btree, void *key)
  *       @param dst The dest key value
  *       @return none
  */
-static void copy_key_val(struct btree *btree,
-			 struct btree_tx_impl *tx,
-			 struct bt_key_val *src,
-			 struct bt_key_val *dst)
+static void copy_key_val(struct btree		 *btree,
+			 struct btree_tx_impl	 *tx,
+			 struct bt_key_val	 *src,
+			 struct bt_key_val	 *dst)
 {
 	unsigned int keysize;
 	unsigned int datasize;
 
+	M0_ENTRY();
+
 	keysize = btree->key_size(src->key);
 	dst->key = (void *)MEM_ALLOC(tx, keysize);
 	M0_ASSERT(dst->key != NULL);	/* @todo: analyse return code */
@@ -965,6 +968,8 @@ static void copy_key_val(struct btree *btree,
 		M0_ASSERT(dst->val != NULL);	/* @todo: analyse return code */
 		bcopy(src->val, dst->val, datasize);
 	}
+
+	M0_LEAVE();
 }
 
 /**
@@ -991,7 +996,7 @@ M0_INTERNAL void *btree_get_min_key(struct btree *btree)
 	return node_pos.node->key_vals[node_pos.index]->key;
 }
 
-M0_INTERNAL struct bt_key_val *btree_pair_setup(struct btree *btree,
+M0_INTERNAL struct bt_key_val *btree_pair_setup(struct btree	     *btree,
 						struct btree_tx_impl *tx,
 						void *key, size_t key_size,
 						void *val, size_t val_size)
-- 
1.8.3.2


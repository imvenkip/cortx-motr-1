From e0407a33eabcfda0f5f47df50190cfea8b88b73c Mon Sep 17 00:00:00 2001
From: Sachin Patil <sachin_patil@xyratex.com>
Date: Tue, 26 Mar 2013 04:01:00 -0700
Subject: [PATCH 71/94] Added stobio support for data file read. Followed mero
 conventions for the header files of rvm. Removed un-necessary files. Applied
 dos2unix on rvm folder.

---
 rvm/coda_mmap_anon.h |  37 --------------
 rvm/ut/rvmlib.h      | 140 ---------------------------------------------------
 rvm/ut/util.h        | 113 -----------------------------------------
 3 files changed, 290 deletions(-)
 delete mode 100644 rvm/coda_mmap_anon.h
 delete mode 100644 rvm/ut/rvmlib.h
 delete mode 100644 rvm/ut/util.h

diff --git a/rvm/coda_mmap_anon.h b/rvm/coda_mmap_anon.h
deleted file mode 100644
index 5f0d128..0000000
--- a/rvm/coda_mmap_anon.h
+++ /dev/null
@@ -1,37 +0,0 @@
-/* BLURB lgpl
-
-                           Coda File System
-                              Release 5
-
-          Copyright (c) 1987-1999 Carnegie Mellon University
-                  Additional copyrights listed below
-
-This  code  is  distributed "AS IS" without warranty of any kind under
-the  terms of the  GNU  Library General Public Licence  Version 2,  as
-shown in the file LICENSE. The technical and financial contributors to
-Coda are listed in the file CREDITS.
-
-                        Additional copyrights
-
-#*/
-#pragma once
-
-#ifndef __MERO_RVM_CODA_MMAP_ANON_H__
-#define __MERO_RVM_CODA_MMAP_ANON_H__
-
-#include <unistd.h>
-#include <sys/mman.h>
-
-#ifndef MAP_ANON
-#define MAP_ANON 0
-#endif
-
-#define mmap_anon(raddrptr, addrptr, len, prot) do { \
-    int fd = -1, flags = MAP_ANON | MAP_PRIVATE; \
-    if (addrptr) flags |= MAP_FIXED; \
-    if (!MAP_ANON) fd = open("/dev/zero", O_RDWR); \
-    raddrptr = mmap((char *)addrptr, len, prot, flags, fd, 0); \
-    if (fd != -1) close(fd); \
-} while(0);
-
-#endif /* __MERO_RVM_CODA_MMAP_ANON_H__ */
diff --git a/rvm/ut/rvmlib.h b/rvm/ut/rvmlib.h
deleted file mode 100644
index 098ab80..0000000
--- a/rvm/ut/rvmlib.h
+++ /dev/null
@@ -1,140 +0,0 @@
-/* BLURB gpl
-
-                           Coda File System
-                              Release 6
-
-          Copyright (c) 1987-2003 Carnegie Mellon University
-                  Additional copyrights listed below
-
-This  code  is  distributed "AS IS" without warranty of any kind under
-the terms of the GNU General Public Licence Version 2, as shown in the
-file  LICENSE.  The  technical and financial  contributors to Coda are
-listed in the file CREDITS.
-
-                        Additional copyrights
-                           none currently
-
-#*/
-
-
-#ifndef _RVMLIB_H_
-#define _RVMLIB_H_ 1
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#include <unistd.h>
-#include <stdlib.h>
-#include <setjmp.h>
-
-#include "lwp/lwp.h"
-#include "rvm/rvm.h"
-#include "rvm/rds.h"
-#include "util.h"
-
-#ifdef __cplusplus
-}
-#endif
-
-
-
-/*  *****  Types  *****  */
-
-typedef enum {	UNSET =	0,		/* uninitialized */
-		RAWIO = 1,		/* raw disk partition */
-		UFS = 2,		/* Unix file system */
-		VM = 3			/* virtual memory */
-} rvm_type_t;
-
-typedef struct {
-	rvm_tid_t *tid;
-	rvm_tid_t tids;
-	/*	jmp_buf abort; */
-	intentionList_t list;
-} rvm_perthread_t;
-
-
-/*  *****  Variables  *****  */
-
-extern rvm_type_t RvmType;	 /* your program must supply this! */
-extern long rvm_no_yield;	 /*  exported by rvm */
-
-/*  ***** Functions  ***** */
-
-
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-int rvmlib_in_transaction(void);
-void rvmlib_abort(int);
-
-void rvmlib_set_range(void *base, unsigned long size);
-void rvmlib_modify_bytes(void *dest, const void *newval, int len);
-char *rvmlib_strdup(const char *src, const char *file, int line);
-
-void *rvmlib_malloc(unsigned long size, const char *file, int line);
-void rvmlib_free(void *p, const char *file, int line);
-
-void rvmlib_init_threaddata(rvm_perthread_t *rvmptt);
-extern void rvmlib_set_thread_data(void *);
-rvm_perthread_t *rvmlib_thread_data(void);
-
-void rvmlib_begin_transaction(int restore_mode);
-void rvmlib_end_transaction(int flush_mode, rvm_return_t *statusp);
-
-
-#ifdef __cplusplus
-}
-#endif
-
-#define CODA_STACK_LENGTH 0x20000	/* 128 K */
-#define LOGTHRESHOLD	50
-
-/* pointer to rvm_perthread_t must be under this rock! */
-extern int optimizationson;
-
-#define RVMLIB_ASSERT(errmsg) \
-do { \
-    fprintf(stderr, "RVMLIB_ASSERT: %s\n", errmsg); \
-    fflush(stderr); \
-    coda_assert("0", __FILE__, __LINE__); \
-} while (0)
-
-
-#define rvmlib_rec_malloc(size) rvmlib_malloc(size, __FILE__, __LINE__)
-#define rvmlib_rec_free(addr) rvmlib_free(addr, __FILE__, __LINE__)
-#define rvmlib_rec_strdup(size) rvmlib_strdup(size, __FILE__, __LINE__)
-
-#define RVMLIB_REC_OBJECT(object) rvmlib_set_range(&(object), sizeof(object))
-
-
-inline void rvmlib_check_trans(char *where, char *file);
-#define rvmlib_intrans()  rvmlib_check_trans(__FUNCTION__, __FILE__)
-
-
-/* macros */
-
-#define RVMLIB_MODIFY(object, newValue)					    \
-do {									    \
-    rvm_perthread_t *_rvm_data = rvmlib_thread_data();\
-    if (RvmType == VM) (object) = (newValue);	    	    		    \
-    else if (RvmType == RAWIO || RvmType == UFS) { /* is object a pointer? */		    \
-        rvm_return_t ret = rvm_set_range(_rvm_data->tid, (char *)&object, sizeof(object)); \
-	if (ret != RVM_SUCCESS)						    \
-	    printf("Modify Bytes error %s\n",rvm_return(ret));		    \
-        CODA_ASSERT(ret == RVM_SUCCESS);					    \
-        (object) = (newValue);						    \
-    }									    \
-    else {								    \
-       CODA_ASSERT(0);							    \
-    }								    	    \
-} while(0)
-
-
-
-
-#endif /* _RVMLIB_H_ */
-
diff --git a/rvm/ut/util.h b/rvm/ut/util.h
deleted file mode 100644
index 7f0ee97..0000000
--- a/rvm/ut/util.h
+++ /dev/null
@@ -1,113 +0,0 @@
-/* BLURB gpl
-
-                           Coda File System
-                              Release 6
-
-          Copyright (c) 1987-2003 Carnegie Mellon University
-                  Additional copyrights listed below
-
-This  code  is  distributed "AS IS" without warranty of any kind under
-the terms of the GNU General Public Licence Version 2, as shown in the
-file  LICENSE.  The  technical and financial  contributors to Coda are
-listed in the file CREDITS.
-
-                        Additional copyrights
-
-#*/
-
-/*
-                         IBM COPYRIGHT NOTICE
-
-                          Copyright (C) 1986
-             International Business Machines Corporation
-                         All Rights Reserved
-
-This  file  contains  some  code identical to or derived from the 1986
-version of the Andrew File System ("AFS"), which is owned by  the  IBM
-Corporation.   This  code is provided "AS IS" and IBM does not warrant
-that it is free of infringement of  any  intellectual  rights  of  any
-third  party.    IBM  disclaims  liability of any kind for any damages
-whatsoever resulting directly or indirectly from use of this  software
-or  of  any  derivative work.  Carnegie Mellon University has obtained
-permission to  modify,  distribute and sublicense this code,  which is
-based on Version 2  of  AFS  and  does  not  contain  the features and
-enhancements that are part of  Version 3 of  AFS.  Version 3 of AFS is
-commercially   available   and  supported  by   Transarc  Corporation,
-Pittsburgh, PA.
-
-*/
-
-//#include "coda_assert.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#include <unistd.h>
-#include <stdlib.h>
-#include <signal.h>
-#include <stdio.h>
-
-#ifndef IN  /* rpc2.private.h also defines these */
-/* Parameter usage */
-#define	IN	/* Input parameter */
-#define OUT	/* Output parameter */
-#define INOUT	/* Obvious */
-#endif /* !IN */
-
-
-#define TRUE 1
-#define FALSE 0
-
-/* Useful functions in libutil.a */
-int SafeStrCat(char *dest, char *src, int totalspace);
-int SafeStrCpy(char *dest, char *src, int totalspace);
-int HashString(char *s, unsigned int size);
-void eprint(char *, ...);
-void fdprint(long afd, char *fmt, ...);
-
-/* Routine for conditionally printing timestamped log messages */
-extern void LogMsg(int msglevel, int debuglevel, FILE *fout, char *fmt,  ...);
-#define VLog(level, format, a...)   LogMsg(level, VolDebugLevel, stdout, format, ## a)
-#define SLog(level, format, a...)   LogMsg(level, SrvDebugLevel, stdout, format, ## a)
-#define DLog(level, format, a...)   LogMsg(level, DirDebugLevel, stdout, format, ## a)
-#define ALog(level, format, a...)   LogMsg(level, VolDebugLevel, stdout, format, ## a)
-#define CLog(level, format, a...)   LogMsg(level, VolDebugLevel, stdout, format, ## a)
-
-/* The routine that prints the timestamp */
-extern void PrintTimeStamp(FILE *fout);
-
-/* Hostname related utilities */
-int UtilHostEq(const char *name1, const char *name2);
-char *hostname(char *name);
-
-  /* Process releted utilities */
-void UtilDetach();
-
-/* Useful locking macros */
-#define U_wlock(b)      ObtainWriteLock(&((b)->lock))
-#define U_rlock(b)      ObtainReadLock(&((b)->lock))
-#define U_wunlock(b)    ReleaseWriteLock(&((b)->lock))
-#define U_runlock(b)    ReleaseReadLock(&((b)->lock))
-
-/* Extern decls for variables used in Coda to control verbosity of
-   messages from LogMsg(). Should these be here?
-*/
-
-extern int SrvDebugLevel;	/* Server */
-extern int VolDebugLevel;	/* Vol package */
-extern int DirDebugLevel;	/* Dir package */
-extern int AL_DebugLevel;	/* ACL package */
-extern int AuthDebugLevel;	/* Auth package */
-
-#ifdef __CYGWIN32__
-#include <stdarg.h>
-  /* int vsnprintf(char *buf, size_t len, char *fmt, va_list ap); */
-int snprintf(char *buf, size_t len, const char *fmt, ...);
-long int gethostid(void);
-#endif
-
-#ifdef __cplusplus
-}
-#endif
-
-- 
1.8.3.2


From dc9520bee6ed97d3f887742efb2f4cca36c7076f Mon Sep 17 00:00:00 2001
From: Anatoliy Bilenko <anatoliy_bilenko@xyratex.com>
Date: Mon, 15 Apr 2013 22:34:50 +0300
Subject: [PATCH 78/94] Add some tracing into btree.

---
 be/tree.c  | 45 ++++++++++++++++++++++++---------------------
 be/tree.h  |  1 +
 be/ut/be.c | 35 ++++++++++++++++++++++++++++++++---
 3 files changed, 57 insertions(+), 24 deletions(-)

diff --git a/be/tree.c b/be/tree.c
index 4ea2821..1318f2f 100644
--- a/be/tree.c
+++ b/be/tree.c
@@ -1,8 +1,8 @@
-// XXX remove this headers
-#include <stdlib.h>
-#include <stdio.h>
-#include <strings.h>
+#undef M0_TRACE_SUBSYSTEM
+#define M0_TRACE_SUBSYSTEM M0_TRACE_SUBSYS_BE
+#include "lib/trace.h"
 
+#include <strings.h>
 #include "tree.h"
 #include "lib/assert.h"
 
@@ -14,7 +14,7 @@
 
 #define KV_SIZE(btree)	      (2*btree->order * sizeof(struct bt_key_val *) - 1)
 #define CHILDREN_SIZE(btree)  (2*btree->order * sizeof(struct bt_node *))
-
+#define PRINT(...) M0_LOG(M0_DEBUG, __VA_ARGS__);
 
 enum position_t { left = -1, right = 1 };
 
@@ -754,7 +754,7 @@ M0_INTERNAL int btree_delete_key(struct btree *btree,
 			btree_delete_key(btree, tx, node->children[index],
 					 key_val->key);
 			if (sub_node_pos.node->leaf == false) {
-				printf("Not leaf\n");
+				M0_LOG(M0_ERROR, "Not leaf");
 			}
 		} else if ((node->children[index + 1]->nr_active >
 			    btree->order - 1)) {
@@ -778,7 +778,7 @@ M0_INTERNAL int btree_delete_key(struct btree *btree,
 			btree_delete_key(btree, tx, node->children[index + 1],
 					 key_val->key);
 			if (sub_node_pos.node->leaf == false) {
-				printf("Not leaf\n");
+				M0_LOG(M0_ERROR, "Not leaf");
 			}
 
 		} else if (node->children[index]->nr_active == btree->order - 1
@@ -835,7 +835,9 @@ struct node_pos get_btree_node(struct btree *btree, void *key)
 	struct bt_node *node;
 	unsigned int i = 0;
 
+	PRINT("(%u,%p,%p)", key_val, key, btree);
 	node = btree->root;
+	PRINT("(%u,%p,%p)", key_val, key, node);
 
 	for (;; i = 0) {
 
@@ -1005,10 +1007,7 @@ M0_INTERNAL struct bt_key_val *btree_pair_setup(struct btree *btree,
 	return kv;
 }
 
-
-
-#ifdef DEBUG
-
+#if 1
 /**
  *	Used to print the keys of the bt_node
  *	@param node The node whose keys are to be printed
@@ -1020,23 +1019,23 @@ static void print_single_node(struct btree *btree, struct bt_node *node)
 
 	int i = 0;
 
-	printf(" { ");
+	PRINT(" { ");
 	while (i < node->nr_active) {
-		printf("0x%x(%d) ", btree->value(node->key_vals[i]->key),
-		      node->level);
+		PRINT("key: %d, lvl: %d", btree->value(node->key_vals[i]->key),
+					  node->level);
 		i++;
 	}
-	printf("} (0x%x,%d) ", node, node->leaf);
+	PRINT("} (0x%p,%d) ", node, node->leaf);
 }
 
 /**
- *       Function used to print the B-tree
+ *       Function used to PRINT the B-tree
  *       @param root Root of the B-Tree
- *       @param print_key Function used to print the key value
+ *       @param PRINT_key Function used to PRINT the key value
  *       @return none
  */
 
-void print_subtree(struct btree *btree, struct bt_node *node)
+M0_INTERNAL void btree_dbg_print(struct btree *btree, struct bt_node *node)
 {
 
 	int i = 0;
@@ -1049,13 +1048,15 @@ void print_subtree(struct btree *btree, struct bt_node *node)
 	head = node;
 	tail = node;
 
+	PRINT("---8<---8<---8<---8<---8<---8<---");
+
 	while (true) {
 		if (head == NULL) {
 			break;
 		}
 		if (head->level < current_level) {
 			current_level = head->level;
-			printf("\n");
+			PRINT("***");
 		}
 		print_single_node(btree, head);
 
@@ -1069,7 +1070,9 @@ void print_subtree(struct btree *btree, struct bt_node *node)
 		}
 		head = head->next;
 	}
-	printf("\n");
-}
 
+	PRINT("---8<---8<---8<---8<---8<---8<---");
+}
 #endif
+
+#undef M0_TRACE_SUBSYSTEM
diff --git a/be/tree.h b/be/tree.h
index 7fb9a21..f3c7edb 100644
--- a/be/tree.h
+++ b/be/tree.h
@@ -68,4 +68,5 @@ M0_INTERNAL struct bt_key_val *btree_pair_setup(struct btree *btree,
 						void *key, size_t key_size,
 						void *val, size_t val_size);
 
+M0_INTERNAL void btree_dbg_print(struct btree *btree, struct bt_node *node);
 #endif /* __MERO_BE_TREE_H__ */
diff --git a/be/ut/be.c b/be/ut/be.c
index de39faa..1d496e1 100644
--- a/be/ut/be.c
+++ b/be/ut/be.c
@@ -360,10 +360,39 @@ M0_UNUSED static void test_be_tree_create(void)
 
 M0_UNUSED static void test_be_tree_load(void)
 {
-	struct btree **tree = (struct btree **)    /* XXX: hardcoded offset */
-		m0_be_static_reg_get_handle_addr(seg, 0);
+	uint32_t	   i;
+	uint32_t           min;
+	uint32_t           max;
+	struct btree     **tree;
+	struct bt_key_val *kv;
 
-	M0_LEAVE("tree order: %u", (*tree)->order);
+	tree = (struct btree**) m0_be_static_reg_get_handle_addr(seg, 0);
+	/*
+	 * To whom who do forget to do the following a painfull debug session
+	 * guaranteed...
+	 */
+	(*tree)->value     = tree_value;
+	(*tree)->key_size  = tree_key_size;
+	(*tree)->data_size = tree_data_size;
+
+	/*
+	 * Call some "tx-less" functions to see what's inside the tree.
+	 */
+	M0_LOG(M0_DEBUG, "tree order: %u", (*tree)->order);
+
+	min = *(uint32_t*)btree_get_min_key(*tree);
+	M0_LOG(M0_DEBUG, "tree order: %u", min);
+
+	max = *(uint32_t*)btree_get_max_key(*tree);
+	M0_LOG(M0_DEBUG, "tree order: %u", max);
+
+	for (i = min; i <= max; ++i) {
+		kv = btree_search(*tree, &i);
+		M0_LOG(M0_DEBUG, "(%u, %u)", *(uint32_t *)kv->key, *(uint32_t *)kv->val);
+	}
+
+
+	btree_dbg_print(*tree, (*tree)->root);
 }
 
 
-- 
1.8.3.2


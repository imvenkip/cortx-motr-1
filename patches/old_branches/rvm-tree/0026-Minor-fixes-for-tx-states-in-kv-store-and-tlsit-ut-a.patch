From 3c6ee9983b9a2fb0ef0e7f7ba03710922016874a Mon Sep 17 00:00:00 2001
From: Zishan Shaikh <zishan_shaikh@xyratex.com>
Date: Fri, 4 Jan 2013 06:13:56 -0800
Subject: [PATCH 26/94] Minor fixes for tx states in kv store and tlsit ut as
 well

---
 be/be_tx.c              |  1 +
 be/lib/be_kv_store.c    |  6 +++---
 be/lib/ut/be_kv_store.c |  4 ++--
 be/lib/ut/be_tlist.c    | 31 +++++++++++++++----------------
 4 files changed, 21 insertions(+), 21 deletions(-)

diff --git a/be/be_tx.c b/be/be_tx.c
index eb30553..5348d8d 100644
--- a/be/be_tx.c
+++ b/be/be_tx.c
@@ -68,6 +68,7 @@ static const struct m0_sm_state_descr tx_states[] = {
                 .sd_ex        = NULL,
                 .sd_invariant = NULL,
                 .sd_allowed   = (1 << M0_BETX_PREPARING)   |
+                                (1 << M0_BETX_OPEN)        |
                                 (1 << M0_BETX_FAILED)
         },
         [M0_BETX_PREPARING] = {
diff --git a/be/lib/be_kv_store.c b/be/lib/be_kv_store.c
index bdeae14..ecd0107 100644
--- a/be/lib/be_kv_store.c
+++ b/be/lib/be_kv_store.c
@@ -83,7 +83,7 @@ M0_INTERNAL void m0_ks_create_handle(struct m0_be_domain    *dom,
 
         m0_be_tx_init(tx, dom, 0);
         M0_BE_WAIT(tx->bt_impl.sm_group, &tx->bt_sm,
-                   (1 << M0_BETX_PREPARING) | (1 << M0_BETX_FAILED));
+                   (1 << M0_BETX_INIT) | (1 << M0_BETX_FAILED));
 
         /* Prepare a region of the handle */
         handle_buf.b_nob = sizeof(struct m0_kv_store);
@@ -194,7 +194,7 @@ M0_INTERNAL int m0_ks_delete(struct m0_kv_store  *handle,
 
                 m0_be_tx_init(tx, handle->ks_dom, 0);
                 M0_BE_WAIT(tx->bt_impl.sm_group, &tx->bt_sm,
-                           (1 << M0_BETX_PREPARING) | (1 << M0_BETX_FAILED));
+                           (1 << M0_BETX_INIT) | (1 << M0_BETX_FAILED));
         }
 
         /* Find the target node to be deleted */
@@ -354,7 +354,7 @@ M0_INTERNAL int m0_ks_insert(struct m0_kv_store  *handle,
                 m0_be_tx_init(tx, handle->ks_dom, 0);
 
                 M0_BE_WAIT(tx->bt_impl.sm_group, &tx->bt_sm,
-                           (1 << M0_BETX_PREPARING) | (1 << M0_BETX_FAILED));
+                           (1 << M0_BETX_INIT) | (1 << M0_BETX_FAILED));
         }
 
         /* Tlink init for this object */
diff --git a/be/lib/ut/be_kv_store.c b/be/lib/ut/be_kv_store.c
index 84c5f51..d633888 100644
--- a/be/lib/ut/be_kv_store.c
+++ b/be/lib/ut/be_kv_store.c
@@ -98,7 +98,7 @@ static int insert(struct m0_kv_store_obj **obj,
 
         m0_be_tx_init(tx, dom, 0);
         M0_BE_WAIT(tx->bt_impl.sm_group, &tx->bt_sm,
-                   (1 << M0_BETX_PREPARING) | (1 << M0_BETX_FAILED));
+                   (1 << M0_BETX_INIT) | (1 << M0_BETX_FAILED));
 
         /* Prepare a region for the object */
         obj_buf.b_nob = sizeof(struct m0_kv_store_obj);
@@ -156,7 +156,7 @@ static int delete(struct m0_kv_store_obj *target)
 
         m0_be_tx_init(tx, dom, 0);
         M0_BE_WAIT(tx->bt_impl.sm_group, &tx->bt_sm,
-                   (1 << M0_BETX_PREPARING) | (1 << M0_BETX_FAILED));
+                   (1 << M0_BETX_INIT) | (1 << M0_BETX_FAILED));
 
         /* Prepare a region for this object */
         obj_buf.b_nob = sizeof(struct m0_kv_store_obj);
diff --git a/be/lib/ut/be_tlist.c b/be/lib/ut/be_tlist.c
index b49c3e5..84ce312 100644
--- a/be/lib/ut/be_tlist.c
+++ b/be/lib/ut/be_tlist.c
@@ -99,12 +99,20 @@ void test_add_be_tlist(struct foo **new_obj, int incoming_key,
         m0_be_tx_init(&tx, &dom, 0);
         m0_sm_group_lock(tx.bt_impl.sm_group);
         m0_sm_timedwait(&tx.bt_sm,
-                        (1 << M0_BETX_PREPARING) | (1 << M0_BETX_FAILED),
+                        (1 << M0_BETX_INIT) | (1 << M0_BETX_FAILED),
                         M0_TIME_NEVER);
         m0_sm_group_unlock(tx.bt_impl.sm_group);
 
+        m0_be_tx_start(&tx);
+        m0_sm_group_lock(tx.bt_impl.sm_group);
+        m0_sm_timedwait(&tx.bt_sm,
+                        (1 << M0_BETX_OPEN) | (1 << M0_BETX_FAILED),
+                        M0_TIME_NEVER);
+        m0_sm_group_unlock(tx.bt_impl.sm_group);
+        
         m0_be_buf_init(&buf, NULL, sizeof(struct foo), 0, 0, 0);
         m0_be_reg_init(&reg, &tx, seg, &buf);
+
         m0_be_alloc(reg);
         m0_sm_group_lock(reg->br_impl.sm_group);
         m0_sm_timedwait(&reg->br_sm,
@@ -112,21 +120,13 @@ void test_add_be_tlist(struct foo **new_obj, int incoming_key,
                         M0_TIME_NEVER);
         m0_sm_group_unlock(reg->br_impl.sm_group);
 
-        m0_be_tx_add_cred(&tx, reg);
-
-        m0_be_tx_prep(&tx);
-        m0_sm_group_lock(tx.bt_impl.sm_group);
-        m0_sm_timedwait(&(tx.bt_sm),
-                        (1 << M0_BETX_PREPARED) | (1 << M0_BETX_FAILED),
-                         M0_TIME_NEVER);
-        m0_sm_group_unlock(tx.bt_impl.sm_group);
-
-        m0_be_tx_start(&tx);
-        m0_sm_group_lock(tx.bt_impl.sm_group);
-        m0_sm_timedwait(&tx.bt_sm,
-                        (1 << M0_BETX_OPEN) | (1 << M0_BETX_FAILED),
+        m0_be_reg_capture(reg);
+        m0_sm_group_lock(reg->br_impl.sm_group);
+        m0_sm_timedwait(&reg->br_sm,
+                       (1 << M0_BEREG_CAPTURED) | (1 << M0_BEREG_FAILED),
                         M0_TIME_NEVER);
-        m0_sm_group_unlock(tx.bt_impl.sm_group);
+        m0_sm_group_unlock(reg->br_impl.sm_group);
+
 
         /** Allocate the memory to the object from @reg->br_buf */
         *new_obj = (struct foo *)reg->br_buf.b_addr;
@@ -161,7 +161,6 @@ int main()
 
         /* Initialisse the tlsit, domain and the segment */
         init_tlist_domain_and_segment();
-        printf("\n after init\n");
 
         /* Add @test1, @test2, @test3 & @test4 to tlist, added to head */
         printf("\n");
-- 
1.8.3.2


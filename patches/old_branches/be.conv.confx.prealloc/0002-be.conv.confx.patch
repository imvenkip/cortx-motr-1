From f27f31d22e2fc46951e7b8042fa377adee80c411 Mon Sep 17 00:00:00 2001
From: Mandar Sawant <mandar_sawant@xyratex.com>
Date: Mon, 24 Feb 2014 19:35:31 +0530
Subject: [PATCH 2/8] be.conv.confx,

- Modify m0_confstr_parse to build configuration object in BE segment memory
  from string.
- Support for building configuration objects into BE segment memory as well
  as general main memory (for confc).
- Remove BE dependancy from m0_xcode_be_dup(), make it a generic xcode function.
  Rename m0_xcode_be_dup() -> m0_xcode_dup(). Add UT test case for the same.
- Remove conf/db.c (not needed anymore.
---
 conf/Makefile.sub |  1 -
 conf/db.c         | 17 ++++++++++++++++
 conf/preload.c    | 43 ++++++++++-----------------------------
 conf/ut/db.c      | 23 +++++++--------------
 xcode/string.c    |  4 ++--
 xcode/ut/xcode.c  | 29 +++++++++++++++++++++++++++
 xcode/xcode.c     | 60 ++++++++++++-------------------------------------------
 xcode/xcode.h     |  5 ++---
 8 files changed, 81 insertions(+), 101 deletions(-)

diff --git a/conf/Makefile.sub b/conf/Makefile.sub
index 6d8818b..758020d 100644
--- a/conf/Makefile.sub
+++ b/conf/Makefile.sub
@@ -18,7 +18,6 @@ mero_libmero_la_SOURCES += \
                            conf/confc.c \
                            conf/confd.c \
                            conf/confd_fom.c \
-                           conf/db.c \
                            conf/fop.c \
                            conf/obj.c \
                            conf/obj_ops.c \
diff --git a/conf/db.c b/conf/db.c
index 1582e86..160c28c 100644
--- a/conf/db.c
+++ b/conf/db.c
@@ -79,6 +79,23 @@ static int confx_obj_measure(struct m0_confx_obj *xobj)
 	M0_RETURN(m0_xcode_length(&ctx));
 }
 
+/* ------------------------------------------------------------------
+ * confdb_key, confdb_obj
+ * ------------------------------------------------------------------ */
+
+enum {
+	CONFDB_SRV_EP_MAX = 16,
+	CONFDB_FS_MAX     = 16,
+	CONFDB_NICS_MAX   = 16,
+	CONFDB_SDEVS_MAX  = 16,
+	CONFDB_PART_MAX   = 16,
+	CONFDB_NAME_LEN   = 256,
+
+	/* XXX FIXME: very inaccurate estimations */
+	CONFDB_REC_MAX    = sizeof(struct m0_confx_obj) + CONFDB_NAME_LEN * (
+		CONFDB_SRV_EP_MAX + CONFDB_FS_MAX + CONFDB_NICS_MAX +
+		CONFDB_SDEVS_MAX + CONFDB_PART_MAX)
+};
 
 static m0_bcount_t confdb_ksize(const void *key)
 {
diff --git a/conf/preload.c b/conf/preload.c
index e80c1d1..82eaa1f 100644
--- a/conf/preload.c
+++ b/conf/preload.c
@@ -34,12 +34,9 @@
 #include "be/tx_credit.h"
 #include "be/alloc.h"
 #include "be/op.h"
-#ifndef __KERNEL__
-#include <stdio.h>
-#endif
 
 struct confx_ctx {
-	void                *cc_ptr;
+	char                *cc_ptr;
 	m0_bcount_t          cc_total;
 	m0_bcount_t          cc_used;
 	struct m0_xcode_ctx  cc_xctx;
@@ -53,7 +50,7 @@ static void *__confx_ctx_alloc(struct confx_ctx *cctx, size_t nob)
 	M0_PRE(cctx->cc_ptr != NULL);
 	M0_PRE(cctx->cc_used + nob <= cctx->cc_total);
 
-	addr = (char *)cctx->cc_ptr + cctx->cc_used;
+	addr = cctx->cc_ptr + cctx->cc_used;
 	cctx->cc_used += nob;
 
 	return addr;
@@ -90,14 +87,12 @@ M0_INTERNAL void m0_confx_free(struct m0_confx *enc, struct m0_be_seg *seg)
 			m0_be_tx_init(&tx, 0, seg->bs_domain, grp, NULL, NULL, NULL, NULL);
 			m0_be_tx_prep(&tx, &cred);
 			rc = m0_be_tx_open_sync(&tx);
-			if (rc != 0) {
-				M0_LOG(M0_FATAL, "rc: %d", rc);
-				M0_ASSERT(rc == 0);
-			}
-			M0_BE_OP_SYNC(op, m0_be_free(m0_be_seg_allocator(seg), &tx, &op,
-						     cctx->cc_ptr));
+			M0_ASSERT(rc == 0);
+			M0_BE_FREE_PTR_SYNC(cctx->cc_ptr, seg, &tx);
 			m0_be_tx_close_sync(&tx);
+			m0_be_tx_fini(&tx);
 			m0_sm_group_unlock(grp);
+			m0_free(cctx);
 		}
 	}
 
@@ -133,10 +128,7 @@ static size_t confstr_to_obj_size(const char *s)
 		conf_objtype_size[0] = 0;
 		if (*s == '{') {
 			s++;
-#ifndef __KERNEL__
 			sscanf(s, "%u\n", &type);
-			printf("%u %u\n", type, conf_objtype_size[type]);
-#endif
 			obj_size += conf_objtype_size[type];
 		}
 		if (*s == '[')
@@ -145,24 +137,16 @@ static size_t confstr_to_obj_size(const char *s)
 			++s;
 			memset(buf, 0, 1024);
 			slen = 0;
-#ifndef __KERNEL__
 			while (*s != '"') {
 				sscanf(s, "%c", &buf[slen]);
 				++slen;
 				++s;
 			}
-			printf("%d %s\n", slen, buf);
-#endif
 			obj_size += slen;
 		}
-			//M0_LOG(M0_FATAL, "%s", (char *)&s[i]);
 		s++;
-		//memset(buf, 0, 1024);
-		//str += result;
 	}
 
-	//if (obj_size != 0)
-	//	obj_size += sizeof(struct m0_confx);
 	return obj_size;
 }
 
@@ -177,8 +161,7 @@ static int confstr_ctx_init(struct confx_ctx *cctx, const char *s,
 
 	obj_size = confstr_to_obj_size(s);
 	if (obj_size == 0)
-		return -EINVAL;
-	M0_LOG(M0_FATAL, "obj_size: %lu", obj_size);
+		return -ENOENT;
 	m0_be_allocator_credit(m0_be_seg_allocator(seg), M0_BAO_ALLOC,
 			       obj_size, 0, &cred);
 	m0_sm_group_lock(grp);
@@ -186,14 +169,13 @@ static int confstr_ctx_init(struct confx_ctx *cctx, const char *s,
 	m0_be_tx_prep(&tx, &cred);
 	rc = m0_be_tx_open_sync(&tx);
 	if (rc != 0) {
-		M0_LOG(M0_FATAL, "rc: %d", rc);
 		M0_ASSERT(rc == 0);
 		M0_RETURN(rc);
 	}
-	M0_BE_OP_SYNC(op, m0_be_alloc(m0_be_seg_allocator(seg), &tx, &op,
-		      &cctx->cc_ptr, obj_size));
+	M0_BE_ALLOC_ARR_SYNC(cctx->cc_ptr, obj_size, seg, &tx);
 	M0_ASSERT(cctx->cc_ptr != NULL);
 	m0_be_tx_close_sync(&tx);
+	m0_be_tx_fini(&tx);
 	m0_sm_group_unlock(grp);
 	if (cctx->cc_ptr == NULL)
 		return -ENOMEM;
@@ -224,8 +206,8 @@ M0_INTERNAL int m0_confstr_parse(const char *s, struct m0_be_seg *seg,
 			M0_RETURN(rc);
 		}
 		xctx = &cctx->cc_xctx;
-		*out = &cctx->cc_confx;//__confx_ctx_alloc(cctx, sizeof(struct m0_confx));
-		M0_LOG(M0_FATAL, "confx: %p cctx->cc_ptr: %p", *out, cctx->cc_ptr);
+		M0_SET0(xctx);
+		*out = &cctx->cc_confx;
 	} else {
 		xctx = &ctx;
 		M0_ALLOC_PTR(*out);
@@ -241,9 +223,6 @@ M0_INTERNAL int m0_confstr_parse(const char *s, struct m0_be_seg *seg,
 		m0_confx_free(*out, seg);
 		*out = NULL;
 	}
-	if (rc == 0)
-		M0_LOG(M0_FATAL, "total: %lu used: %lu", (unsigned long)cctx->cc_total,
-			(unsigned long)cctx->cc_used);
 	M0_RETURN(rc);
 }
 
diff --git a/conf/ut/db.c b/conf/ut/db.c
index 000a770..24b4afd 100644
--- a/conf/ut/db.c
+++ b/conf/ut/db.c
@@ -198,6 +198,8 @@ static void conf_ut_db_init()
 	struct m0_sm_group     *grp;
 	int                     rc;
 
+	M0_SET0(&ut_be);
+	M0_SET0(&ut_seg);
         m0_be_ut_backend_init(&ut_be);
         m0_be_ut_seg_init(&ut_seg, &ut_be, 1ULL << 24);
         m0_be_ut_seg_allocator_init(&ut_seg, &ut_be);
@@ -217,6 +219,7 @@ static void conf_ut_db_fini()
         m0_be_ut_backend_fini(&ut_be);
 }
 
+/*
 static int conf_ut_be_tx_create(struct m0_be_tx *tx,
 				struct m0_be_ut_backend *ut_be,
 				struct m0_be_tx_credit *accum)
@@ -231,6 +234,8 @@ static void conf_ut_be_tx_fini(struct m0_be_tx *tx)
         m0_be_tx_close_sync(tx);
         m0_be_tx_fini(tx);
 }
+*/
+
 void test_confstr_parse(void)
 {
 	struct m0_confx        *enc;
@@ -247,15 +252,12 @@ void test_confstr_parse(void)
 	M0_UT_ASSERT(rc == 0);
 	M0_UT_ASSERT(enc->cx_nr == 8);
 	m0_confx_free(enc, seg);
-	m0_confdb_fini(seg);
+	conf_ut_db_fini();
 }
 
 void test_confdb(void)
 {
 	struct m0_confx        *enc;
-	struct m0_confx        *dec;
-	struct m0_be_tx_credit  accum = {};
-	struct m0_be_tx         tx = {};
 	int                     i;
 	int                     j;
 	int                     hit;
@@ -282,9 +284,7 @@ void test_confdb(void)
 	M0_UT_ASSERT(rc == 0);
 
 	rc = m0_confstr_parse("[0]", seg, &enc);
-	M0_UT_ASSERT(rc == 0);
-	M0_UT_ASSERT(enc->cx_nr == 0);
-	m0_confx_free(enc, seg);
+	M0_UT_ASSERT(rc == -ENOENT);
 
 	rc = m0_confstr_parse(buf, seg, &enc);
 	M0_UT_ASSERT(rc == 0);
@@ -327,15 +327,6 @@ void test_confdb(void)
 	}
 	M0_UT_ASSERT(hit == ARRAY_SIZE(tests));
 	m0_confx_free(enc, seg);
-	m0_confdb_fini(seg);
-	M0_SET0(&accum);
-	rc = m0_confdb_destroy_credit(seg, &accum);
-	M0_UT_ASSERT(rc == 0);
-	rc = conf_ut_be_tx_create(&tx, &ut_be, &accum);
-	M0_UT_ASSERT(rc == 0);
-	rc = m0_confdb_destroy(seg, &tx);
-        M0_UT_ASSERT(rc == 0);
-	conf_ut_be_tx_fini(&tx);
 	conf_ut_db_fini();
 
 	cleanup();
diff --git a/xcode/string.c b/xcode/string.c
index cfc3642..40465bd 100644
--- a/xcode/string.c
+++ b/xcode/string.c
@@ -141,8 +141,8 @@ M0_INTERNAL int m0_xcode_read(struct m0_xcode_ctx *ctx, const char *str)
 	M0_CASSERT(sizeof(uint64_t) == sizeof(unsigned long));
 	M0_CASSERT(sizeof(uint32_t) == sizeof(unsigned));
 
-	//m0_xcode_cursor_init(&it, obj);
-
+	if (ctx->xcx_alloc == NULL)
+		ctx->xcx_alloc = m0_xcode_alloc;
 	while ((result = m0_xcode_next(it)) > 0) {
 		struct m0_xcode_cursor_frame *top  = m0_xcode_cursor_top(it);
 		struct m0_xcode_obj          *cur  = &top->s_obj;
diff --git a/xcode/ut/xcode.c b/xcode/ut/xcode.c
index bcdcd6c..ee48383 100644
--- a/xcode/ut/xcode.c
+++ b/xcode/ut/xcode.c
@@ -580,6 +580,34 @@ static void xcode_cmp_test(void)
 
 #define OBJ(xt, ptr) (&(struct m0_xcode_obj){ .xo_type = (xt), .xo_ptr = (ptr) })
 
+static void xcode_dup_test(void)
+{
+	struct un  SU;
+	struct un  DU;
+	struct m0_xcode_ctx sctx;
+	struct m0_xcode_ctx dctx;
+	int    result;
+
+	M0_SET0(&SU);
+	M0_SET0(&DU);
+	M0_SET0(&sctx);
+	M0_SET0(&dctx);
+	m0_xcode_ctx_init(&sctx, OBJ(&xut_un.xt, &SU));
+	result = m0_xcode_read(&sctx, "{1| 42}");
+	M0_UT_ASSERT(result == 0);
+	M0_UT_ASSERT(SU.u_tag == 1);
+	M0_UT_ASSERT(SU.u.u_x == 42);
+	M0_SET0(&sctx);
+	m0_xcode_ctx_init(&sctx, OBJ(&xut_un.xt, &SU));
+	m0_xcode_ctx_init(&dctx, OBJ(&xut_un.xt, &DU));
+	result = m0_xcode_dup(&dctx, &sctx);
+	M0_UT_ASSERT(result == 0);
+	M0_UT_ASSERT(m0_xcode_cmp(OBJ(&xut_un.xt, &SU),
+				  OBJ(&xut_un.xt, &DU)) == 0);
+	M0_UT_ASSERT(DU.u_tag == 1);
+	M0_UT_ASSERT(DU.u.u_x == 42);
+}
+
 static void xcode_read_test(void)
 {
 	int        result;
@@ -782,6 +810,7 @@ const struct m0_test_suite xcode_ut = {
                 { "xcode-opaque", xcode_opaque_test },
                 { "xcode-decode", xcode_decode_test },
                 { "xcode-nonstandard", xcode_nonstandard_test },
+		{ "xcode-dup",    xcode_dup_test },
                 { "xcode-cmp",    xcode_cmp_test },
 		{ "xcode-read",   xcode_read_test },
 		{ "xcode-find",   xcode_find_test },
diff --git a/xcode/xcode.c b/xcode/xcode.c
index c9cdb90..2d3e266 100644
--- a/xcode/xcode.c
+++ b/xcode/xcode.c
@@ -23,8 +23,6 @@
 #include "lib/errno.h"
 #include "lib/assert.h"
 #include "lib/memory.h"
-#include "be/op.h"
-#include "be/alloc.h"
 #include "xcode/xcode.h"
 
 /**
@@ -399,61 +397,29 @@ M0_INTERNAL void m0_xcode_free(struct m0_xcode_obj *obj)
 	}
 }
 
-static ssize_t xcode_be_alloc(struct m0_be_seg *seg, struct m0_be_tx *tx,
-			      struct m0_xcode_cursor *it)
+M0_INTERNAL int m0_xcode_dup(struct m0_xcode_ctx *dest,
+			     struct m0_xcode_ctx *src)
 {
-	struct m0_xcode_obj  *obj;
-	size_t                nob = 0;
-	void                **slot;
-
-	obj = &m0_xcode_cursor_top(it)->s_obj;
-
-	slot = allocp(it, &nob);
-	if (nob != 0 && *slot == NULL) {
-		M0_PRE(obj->xo_ptr == NULL);
-
-		M0_BE_ALLOC_ARR_SYNC(*slot, nob, seg, tx);
-		obj->xo_ptr = *slot;
-		if (obj->xo_ptr == NULL)
-			return -ENOMEM;
-	}
-	return 0;
-}
-
-static bool is_xcode_cursor_at(struct m0_xcode_cursor *it,
-			       enum m0_xcode_cursor_flag flag,
-			       enum m0_xcode_aggr aggr)
-{
-	struct m0_xcode_cursor_frame *f = m0_xcode_cursor_top(it);
-
-	return (f->s_flag == flag &&
-		f->s_obj.xo_type->xct_aggr == aggr);
-}
-
-M0_INTERNAL int m0_xcode_be_dup(struct m0_xcode_obj *dest,
-				struct m0_xcode_obj *src, struct m0_be_seg *seg,
-				struct m0_be_tx *tx)
-{
-	struct m0_xcode_cursor  dit;
-	struct m0_xcode_cursor  sit;
+	struct m0_xcode_cursor *dit;
+	struct m0_xcode_cursor *sit;
 	int                     result;
 
-	M0_PRE(dest->xo_type == src->xo_type);
-
-	m0_xcode_cursor_init(&sit, src);
-	m0_xcode_cursor_init(&dit, dest);
-	while ((result = m0_xcode_next(&sit)) > 0) {
+	sit = &src->xcx_it;
+	dit = &dest->xcx_it;
+	if (dest->xcx_alloc == NULL)
+		dest->xcx_alloc = m0_xcode_alloc;
+	while ((result = m0_xcode_next(sit)) > 0) {
 		struct m0_xcode_cursor_frame *sf;
 		struct m0_xcode_cursor_frame *df;
 		struct m0_xcode_obj          *sobj;
 		struct m0_xcode_obj          *dobj;
 		const struct m0_xcode_type   *xt;
 
-		result = m0_xcode_next(&dit);
+		result = m0_xcode_next(dit);
 		M0_ASSERT(result > 0);
 
-		sf = m0_xcode_cursor_top(&sit);
-		df = m0_xcode_cursor_top(&dit);
+		sf = m0_xcode_cursor_top(sit);
+		df = m0_xcode_cursor_top(dit);
 		M0_ASSERT(sf->s_flag == df->s_flag);
 		sobj = &sf->s_obj;
 		dobj = &df->s_obj;
@@ -463,7 +429,7 @@ M0_INTERNAL int m0_xcode_be_dup(struct m0_xcode_obj *dest,
 		if (sf->s_flag != M0_XCODE_CURSOR_PRE)
 			continue;
 
-		result = xcode_be_alloc(seg, tx, &dit);
+		result = m0_xcode_alloc_obj(dit, dest->xcx_alloc);
 		if (result != 0)
 			return result;
 
diff --git a/xcode/xcode.h b/xcode/xcode.h
index 1660570..ad936d4 100644
--- a/xcode/xcode.h
+++ b/xcode/xcode.h
@@ -641,9 +641,8 @@ M0_INTERNAL int m0_xcode_read(struct m0_xcode_ctx *ctx, const char *str);
 M0_INTERNAL void m0_xcode_free(struct m0_xcode_obj *obj);
 M0_INTERNAL int m0_xcode_cmp(const struct m0_xcode_obj *o0,
 			     const struct m0_xcode_obj *o1);
-M0_INTERNAL int m0_xcode_be_dup(struct m0_xcode_obj *dest,
-				struct m0_xcode_obj *src, struct m0_be_seg *seg,
-				struct m0_be_tx *tx);
+M0_INTERNAL int m0_xcode_dup(struct m0_xcode_ctx *dest,
+			     struct m0_xcode_ctx *src);
 
 /**
    Returns the address of a sub-object within an object.
-- 
1.8.3.2


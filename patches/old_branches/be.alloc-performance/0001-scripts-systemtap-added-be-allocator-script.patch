From 2aba07297f18b39cc38f939c2212f2708de2a11f Mon Sep 17 00:00:00 2001
From: Maxim Medved <max_medved@xyratex.com>
Date: Fri, 6 Dec 2013 04:32:40 +0200
Subject: [PATCH 1/7] scripts/systemtap: added be-allocator script

---
 scripts/systemtap/be-allocator-performance.sh  |  6 +++
 scripts/systemtap/be-allocator-performance.stp | 74 ++++++++++++++++++++++++++
 scripts/systemtap/run.sh                       | 12 +++++
 scripts/systemtap/tapset/be-allocator.stp      | 10 ++++
 scripts/systemtap/tapset/misc.stp              | 26 +++++++++
 scripts/systemtap/tapset/misc.stpm             | 20 +++++++
 6 files changed, 148 insertions(+)
 create mode 100755 scripts/systemtap/be-allocator-performance.sh
 create mode 100644 scripts/systemtap/be-allocator-performance.stp
 create mode 100755 scripts/systemtap/run.sh
 create mode 100644 scripts/systemtap/tapset/be-allocator.stp
 create mode 100644 scripts/systemtap/tapset/misc.stp
 create mode 100644 scripts/systemtap/tapset/misc.stpm

diff --git a/scripts/systemtap/be-allocator-performance.sh b/scripts/systemtap/be-allocator-performance.sh
new file mode 100755
index 0000000..568e42a
--- /dev/null
+++ b/scripts/systemtap/be-allocator-performance.sh
@@ -0,0 +1,6 @@
+#!/bin/bash
+set -eux
+
+CWD=$(cd "$( dirname "$0")" && pwd)
+
+"$CWD/run.sh" "$CWD/be-allocator-performance.stp"
diff --git a/scripts/systemtap/be-allocator-performance.stp b/scripts/systemtap/be-allocator-performance.stp
new file mode 100644
index 0000000..998400b
--- /dev/null
+++ b/scripts/systemtap/be-allocator-performance.stp
@@ -0,0 +1,74 @@
+#!/usr/bin/env stap
+
+/* timing probes */
+
+global func_time
+global func_time_stats
+global total_stats
+global calls
+global times
+
+probe m0_be_alloc, m0_be_free
+{
+	func_time[tid(), ppfunc()] = m0_time()
+}
+
+probe m0_be_alloc.return, m0_be_free.return
+{
+	/* 1s stats */
+	time_elapsed = m0_time() - func_time[tid(), ppfunc()]
+	delete func_time[tid(), ppfunc()]
+	func_time_stats[ppfunc()] <<< time_elapsed
+	/* total stats */
+	total_stats <<< time_elapsed
+	calls[ppfunc()] += 1
+	times[ppfunc()] += time_elapsed
+}
+
+/* size/shift probes */
+
+global alloc_size_log
+global alloc_size_linear
+global alloc_shift
+
+probe m0_be_alloc
+{
+	alloc_size_log <<< size
+	alloc_size_linear <<< size
+	alloc_shift <<< shift
+}
+
+function print_allocator_stats()
+{
+	printf("%s\n", tz_ctime(gettimeofday_s()))
+	foreach (func in calls) {
+		printf("%s(): %d calls, %d ms total time, %d ns avg time per call\n",
+		       func, calls[func], times[func] / 1000000,
+		       calls[func] == 0 ? 0 : times[func] / calls[func]);
+	}
+	foreach (ftime in func_time_stats) {
+		@M0_PRINT_STATS(ftime, "ns", func_time_stats[ftime])
+	}
+	@M0_PRINT_STATS("total", "ns", total_stats)
+	@M0_PRINT_STATS("alloc size", "B", alloc_size_log)
+	@M0_PRINT_STATS_LINEAR("alloc size, linear", "B", alloc_size_linear, 0, 512, 8)
+	@M0_PRINT_STATS_LINEAR("alloc shift", "B", alloc_shift, 0, 20, 1)
+}
+
+probe timer.ms(1000)
+{
+	print_allocator_stats()
+	delete func_time_stats
+}
+
+probe begin
+{
+	print_allocator_stats()
+	printf("begin\n");
+}
+
+probe end
+{
+	print_allocator_stats()
+	printf("end\n");
+}
diff --git a/scripts/systemtap/run.sh b/scripts/systemtap/run.sh
new file mode 100755
index 0000000..7f192ac
--- /dev/null
+++ b/scripts/systemtap/run.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+set -eux
+
+CWD=$(cd "$( dirname "$0")" && pwd)
+
+LIBMERO="$CWD/../../mero/.libs/libmero-0.1.0.so"
+M0D="$CWD/../../mero/.libs/m0d"
+M0TAPSET="$CWD/tapset"
+
+stap -vv -d "$LIBMERO" -d "$M0D" --ldd -DMAXTRACE=10 -DSTP_NO_OVERLOAD	\
+	-DMAXSKIPPED=1000000 -DMAXERRORS=1000 -I "$M0TAPSET"		\
+	"$1" "$LIBMERO" "$M0D"
diff --git a/scripts/systemtap/tapset/be-allocator.stp b/scripts/systemtap/tapset/be-allocator.stp
new file mode 100644
index 0000000..26cd7de
--- /dev/null
+++ b/scripts/systemtap/tapset/be-allocator.stp
@@ -0,0 +1,10 @@
+probe m0_be_alloc = process("/work/mero/mero/.libs/libmero-0.1.0.so").function("m0_be_alloc_aligned")
+{
+	size = $size
+	shift = $shift
+}
+
+probe m0_be_free = process("/work/mero/mero/.libs/libmero-0.1.0.so").function("m0_be_free_aligned")
+{
+	ptr = $ptr
+}
diff --git a/scripts/systemtap/tapset/misc.stp b/scripts/systemtap/tapset/misc.stp
new file mode 100644
index 0000000..c4d5629
--- /dev/null
+++ b/scripts/systemtap/tapset/misc.stp
@@ -0,0 +1,26 @@
+/*
+ * Timekeeping
+ */
+
+function m0_time:long()
+{
+	return gettimeofday_ns();
+}
+
+function m0_timestamp:string()
+{
+	time = m0_time()
+	one_billion = 1000000000;
+	return sprintf("%d.%09d", time / one_billion, time % one_billion);
+}
+
+/*
+ * Backtraces
+ */
+function m0_bt:string()
+{
+	/* sprint_ubacktrace(): 20-60 microseconds per call */
+	/* sprint_usyms(ubacktrace()): 30-60 microseconds per call */
+	// return sprint_ubacktrace(); // ucallers(-1);
+	return sprint_usyms(ubacktrace());
+}
diff --git a/scripts/systemtap/tapset/misc.stpm b/scripts/systemtap/tapset/misc.stpm
new file mode 100644
index 0000000..1a98f30
--- /dev/null
+++ b/scripts/systemtap/tapset/misc.stpm
@@ -0,0 +1,20 @@
+/* It isn't possible to pass aggregate variable to function  */
+@define M0_PRINT_STATS(tag, measure, stats)
+%(
+	if (@count(@stats) > 0) {
+		printf("%s: min/max/avg/count/sum %d/%d/%d/%d/%d %s\n",
+		       @tag, @min(@stats), @max(@stats), @avg(@stats),
+		       @count(@stats), @sum(@stats), @measure);
+		print(@hist_log(@stats))
+	}
+%)
+
+@define M0_PRINT_STATS_LINEAR(tag, measure, stats, L, H, W)
+%(
+	if (@count(@stats) > 0) {
+		printf("%s: min/max/avg/count/sum %d/%d/%d/%d/%d %s\n",
+		       @tag, @min(@stats), @max(@stats), @avg(@stats),
+		       @count(@stats), @sum(@stats), @measure);
+		print(@hist_linear(@stats, @L, @H, @W))
+	}
+%)
-- 
1.8.3.2


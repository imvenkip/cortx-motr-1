From 3481f171255316c028a69d84663fa9735efbe82b Mon Sep 17 00:00:00 2001
From: Alexander Gattin <alexander_gattin@xyratex.com>
Date: Mon, 1 Jul 2013 12:04:05 +0300
Subject: [PATCH 225/228] be/tx: take engine lock too when executing ix/tg
 foms.

* remove tx_engine() declaration, move its definition closer to top of tx.c
* add tg_fom_txelck_tick() and tx_fom_txelck_tick() methods and
  register them as .fo_tick's
* make tx_engine_lock() and tx_engine_unlock() visible to other be modules
---
 be/tx.c       | 31 +++++++++++++++++++------------
 be/tx.h       |  2 ++
 be/tx_group.c | 13 ++++++++++++-
 3 files changed, 33 insertions(+), 13 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index 8e497f8..3b34323 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -147,6 +147,11 @@ static size_t tx_fom_home_locality(const struct m0_fom *fom)
 	return tx->t_hdr.th_id;
 }
 
+static struct m0_be_tx_engine *tx_engine(const struct m0_be_tx *tx)
+{
+	return &tx->t_be->b_txe;
+}
+
 static int tx_fom_tick(struct m0_fom *fom)
 {
 	struct m0_be_tx        *tx = container_of(fom, struct m0_be_tx, t_fom);
@@ -215,6 +220,17 @@ static int tx_fom_tick(struct m0_fom *fom)
 	}
 }
 
+static int tx_fom_txelck_tick(struct m0_fom *fom)
+{
+	struct m0_be_tx        *tx  = container_of(fom, struct m0_be_tx, t_fom);
+	int                     rc;
+
+	tx_engine_lock(tx_engine(tx));
+	rc = tx_fom_tick(fom);
+	tx_engine_unlock(tx_engine(tx));
+	return rc;
+}
+
 static const struct m0_sm_conf tx_sm_conf = {
 	.scf_name         = "m0_be_tx::bo_fom",
 	.scf_nr_states    = M0_BTS_NR,
@@ -223,7 +239,7 @@ static const struct m0_sm_conf tx_sm_conf = {
 
 static const struct m0_fom_ops tx_fom_ops = {
 	.fo_fini          = tx_fom_fini,
-	.fo_tick          = tx_fom_tick,
+	.fo_tick          = tx_fom_txelck_tick,
 	.fo_home_locality = tx_fom_home_locality,
 	.fo_addb_init     = NULL
 };
@@ -241,8 +257,6 @@ M0_INTERNAL void m0_be_tx_fom_type_init(void)
 			 (struct m0_sm_conf*)&tx_sm_conf);
 }
 
-static struct m0_be_tx_engine *tx_engine(const struct m0_be_tx *tx);
-
 static void        tx_open_tail        (struct m0_be_tx *tx);
 static void        tx_fail             (struct m0_be_tx *tx, int err);
 static void        tx_link             (struct m0_be_tx *tx);
@@ -250,8 +264,6 @@ static m0_bcount_t tx_engine_free_space(const struct m0_be_tx_engine *eng);
 static void        tx_engine_got_space (struct m0_be_tx_engine *eng);
 static void        tx_engine_got_closed(struct m0_be_tx_engine *eng,
 					struct m0_be_tx *tx);
-static void        tx_engine_lock      (struct m0_be_tx_engine *eng);
-static void        tx_engine_unlock    (struct m0_be_tx_engine *eng);
 
 M0_INTERNAL void m0_be_tx_engine_init(struct m0_be_tx_engine *engine)
 {
@@ -707,11 +719,6 @@ static void tx_link(struct m0_be_tx *tx)
 	M0_POST(m0_be__tx_invariant(tx));
 }
 
-static struct m0_be_tx_engine *tx_engine(const struct m0_be_tx *tx)
-{
-	return &tx->t_be->b_txe;
-}
-
 M0_INTERNAL bool
 m0_be__tx_engine_invariant(const struct m0_be_tx_engine *engine)
 {
@@ -751,12 +758,12 @@ M0_INTERNAL bool m0_be__tx_invariant(const struct m0_be_tx *tx)
 		(gr != NULL) == gr_tlist_contains(&gr->tg_txs[state], tx);
 }
 
-static void tx_engine_lock(struct m0_be_tx_engine *eng)
+M0_INTERNAL void tx_engine_lock(struct m0_be_tx_engine *eng)
 {
 	m0_rwlock_write_lock(&eng->te_lock);
 }
 
-static void tx_engine_unlock(struct m0_be_tx_engine *eng)
+M0_INTERNAL void tx_engine_unlock(struct m0_be_tx_engine *eng)
 {
 	m0_rwlock_write_unlock(&eng->te_lock);
 }
diff --git a/be/tx.h b/be/tx.h
index 944e390..70b0d4a 100644
--- a/be/tx.h
+++ b/be/tx.h
@@ -261,6 +261,8 @@ m0_be__tx_engine_invariant(const struct m0_be_tx_engine *engine);
 
 M0_INTERNAL void m0_be_tx_engine_init(struct m0_be_tx_engine *engine);
 M0_INTERNAL void m0_be_tx_engine_fini(struct m0_be_tx_engine *engine);
+M0_INTERNAL void tx_engine_lock(struct m0_be_tx_engine *eng);
+M0_INTERNAL void tx_engine_unlock(struct m0_be_tx_engine *eng);
 
 /** On-disk transaction header.*/
 struct m0_be_tx_hdr {
diff --git a/be/tx_group.c b/be/tx_group.c
index 4eea961..82d0e53 100644
--- a/be/tx_group.c
+++ b/be/tx_group.c
@@ -293,9 +293,20 @@ static int tg_fom_tick(struct m0_fom *fom)
 		M0_IMPOSSIBLE("XXX not possible");
 	}
 }
+
+static int tg_fom_txelck_tick(struct m0_fom *fom)
+{
+	int                     rc;
+
+	tx_engine_lock(fom2tg(fom)->tg_eng);
+	rc = tg_fom_tick(fom);
+	tx_engine_unlock(fom2tg(fom)->tg_eng);
+	return rc;
+}
+
 static const struct m0_fom_ops tg_fom_ops = {
 	.fo_fini          = tg_fom_fini,
-	.fo_tick          = tg_fom_tick,
+	.fo_tick          = tg_fom_txelck_tick,
 	.fo_home_locality = tg_fom_home_locality,
 	.fo_addb_init     = NULL
 };
-- 
1.8.3.2


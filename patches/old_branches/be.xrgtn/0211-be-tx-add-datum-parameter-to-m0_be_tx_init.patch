From 877162e04f60274b2a9e3d8dff174ed51640bb7e Mon Sep 17 00:00:00 2001
From: Alexander Gattin <alexander_gattin@xyratex.com>
Date: Sat, 22 Jun 2013 12:51:41 +0300
Subject: [PATCH 211/228] be/tx: add datum parameter to m0_be_tx_init().

---
 be/tx.c       |  4 +++-
 be/tx.h       |  3 ++-
 be/ut/btree.c | 18 ++++++++++++------
 be/ut/tx.c    |  3 ++-
 4 files changed, 19 insertions(+), 9 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index 7d53ab0..d334ccf 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -178,7 +178,8 @@ M0_INTERNAL void m0_be_tx_init(struct m0_be_tx *tx, uint64_t tid,
 			       m0_be_tx_cb_t persistent,
 			       m0_be_tx_cb_t discarded,
 			       void (*filler)(struct m0_be_tx *tx,
-					      void *payload, void *datum))
+					      void *payload, void *datum),
+			       void *datum)
 {
 	m0_sm_init(&tx->t_sm, &tx_sm_conf, M0_BTS_INIT, tx_grp);
 	m0_stob_io_init(&tx->t_stobio);
@@ -188,6 +189,7 @@ M0_INTERNAL void m0_be_tx_init(struct m0_be_tx *tx, uint64_t tid,
 	tx->t_persistent = persistent;
 	tx->t_discarded  = discarded;
 	tx->t_filler     = filler;
+	tx->t_datum      = datum;
 	m0_be_tx_credit_init(&tx->t_prepared);
 	m0_be_tx_credit_init(&tx->t_captured);
 	m0_be_tx_credit_init(&tx->t_used);
diff --git a/be/tx.h b/be/tx.h
index 1712be3..388d7ea 100644
--- a/be/tx.h
+++ b/be/tx.h
@@ -483,7 +483,8 @@ M0_INTERNAL void m0_be_tx_init(struct m0_be_tx *tx, uint64_t tid,
 			       m0_be_tx_cb_t persistent,
 			       m0_be_tx_cb_t discarded,
 			       void (*filler)(struct m0_be_tx *tx,
-					      void *payload, void *datum));
+					      void *payload, void *datum),
+			       void *datum);
 
 M0_INTERNAL void m0_be_tx_fini(struct m0_be_tx *tx);
 
diff --git a/be/ut/btree.c b/be/ut/btree.c
index c03c31e..0e063bb 100644
--- a/be/ut/btree.c
+++ b/be/ut/btree.c
@@ -95,7 +95,8 @@ void test_create(void)
 	be_init(&be);
 	be_op_init(&op);
 
-	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL);
+	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL,
+		      NULL);
 	m0_be_btree_init(&tree, &be_ut_btree_h.buh_seg, &kv_ops, NULL);
 	m0_be_btree_credit(&tree, M0_BBO_CREATE, 1, &cred);
 
@@ -114,7 +115,8 @@ void test_destroy(void)
 	struct m0_be_tx        tx;
 	struct m0_be_tx_credit cred;
 
-	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL);
+	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL,
+		      NULL);
 	m0_be_btree_credit(&tree, M0_BBO_DESTROY, 1, &cred);
 
 	m0_be_tx_prep(&tx, &cred);
@@ -148,7 +150,8 @@ void test_insert(void)
 	struct m0_be_allocator *alloc = &tree.bb_seg->bs_allocator;
 	int			i;
 
-	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL);
+	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL,
+		      NULL);
 	m0_be_btree_credit(&tree, M0_BBO_INSERT, INSERT_NR, &tree_cred);
 
 	m0_be_allocator_credit(alloc, M0_BAO_ALLOC, ALLOC_SIZE,
@@ -200,7 +203,8 @@ void test_update(void)
 	struct m0_be_allocator *alloc = &tree.bb_seg->bs_allocator;
 	int			i;
 
-	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL);
+	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL,
+		      NULL);
 
 	m0_be_btree_credit(&tree, M0_BBO_UPDATE, UPDATE_NR, &tree_cred);
 
@@ -243,7 +247,8 @@ void test_delete(void)
 	struct m0_be_tx_credit  cred;
 	struct m0_buf           key;
 
-	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL);
+	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL,
+		      NULL);
 	m0_be_btree_credit(&tree, M0_BBO_DELETE, DELETE_NR, &cred);
 	m0_be_tx_prep(&tx, &cred);
 	m0_be_tx_open(&tx);
@@ -270,7 +275,8 @@ void test_lookup(void)
 	struct m0_buf           key;
 	struct m0_buf		val;
 
-	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL);
+	m0_be_tx_init(&tx, tid++, &be, &grp, persistent, discarded, NULL,
+		      NULL);
 	m0_be_btree_credit(&tree, M0_BBO_LOOKUP, 1, &cred);
 	m0_be_tx_prep(&tx, &cred);
 	m0_be_tx_open(&tx);
diff --git a/be/ut/tx.c b/be/ut/tx.c
index 97f3a9b..fc6b419 100644
--- a/be/ut/tx.c
+++ b/be/ut/tx.c
@@ -78,7 +78,8 @@ static void tx_test(struct m0_be *be)
 	/*
 	 * Init transaction and its credits
 	 */
-	m0_be_tx_init(&tx, ++g_tid, be, &g_grp, persistent, discarded, NULL);
+	m0_be_tx_init(&tx, ++g_tid, be, &g_grp, persistent, discarded, NULL,
+		      NULL);
 	m0_be_allocator_credit(alloc, M0_BAO_ALLOC, sizeof *p, 0, &cred);
 	m0_be_tx_prep(&tx, &cred);
 	M0_LOG(M0_DEBUG, "prepared");
-- 
1.8.3.2


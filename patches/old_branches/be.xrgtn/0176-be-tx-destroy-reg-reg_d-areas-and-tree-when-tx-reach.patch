From 4b0e592e201d50d24a59cf70389c3b76c4b4cb4e Mon Sep 17 00:00:00 2001
From: Alexander Gattin <alexander_gattin@xyratex.com>
Date: Wed, 19 Jun 2013 18:29:36 +0300
Subject: [PATCH 176/228] be/tx: destroy reg/reg_d areas and tree when tx
 reaches M0_BTS_PLACED state.

---
 be/tx.c        |  2 --
 be/tx_fom.c    |  2 ++
 be/tx_regmap.c | 25 +++++++++++++++++++++++--
 be/tx_regmap.h |  1 +
 4 files changed, 26 insertions(+), 4 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index b8c78af..9537d9c 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -204,8 +204,6 @@ M0_INTERNAL void m0_be_tx_fini(struct m0_be_tx *tx)
 {
 	M0_PRE(m0_be__tx_invariant(tx));
 
-	m0_free(tx->t_reg_d_area);
-	m0_free(tx->t_reg_area);
 	tx_tlink_del_fini(tx);
 	m0_sm_fini(&tx->t_sm);
 }
diff --git a/be/tx_fom.c b/be/tx_fom.c
index a2cae4e..cacacb4 100644
--- a/be/tx_fom.c
+++ b/be/tx_fom.c
@@ -29,6 +29,7 @@
 #include "fop/fom.h"
 #include "reqh/reqh.h"
 #include "fop/fom_generic.h"
+#include "be/tx_regmap.h"     /* m0_be_tx_regmap_free */
 #include "be/tx_service.h"
 #include "be/tx.h"
 
@@ -122,6 +123,7 @@ static int tx_fom_tick(struct m0_fom *fom)
 
 	case FS_PLACED:
 		tx_state_set(tx, M0_BTS_PLACED);
+		m0_be_tx_regmap_free(tx);
 		m0_fom_phase_set(fom, FS_STABLE);
 		gr_tlist_del(tx);
 		tx_tlist_del(tx);
diff --git a/be/tx_regmap.c b/be/tx_regmap.c
index 9862e20..3903a48 100644
--- a/be/tx_regmap.c
+++ b/be/tx_regmap.c
@@ -20,8 +20,9 @@
 
 #include "be/tx_regmap.h"
 #include "be/tx.h"
-#include "lib/ext.h"  /* m0_ext */
-#include "lib/errno.h"	/* EFAULT */
+#include "lib/ext.h"    /* m0_ext */
+#include "lib/errno.h"  /* EFAULT */
+#include <search.h>     /* tdestroy */
 
 /**
  * @addtogroup be
@@ -43,6 +44,20 @@ M0_INTERNAL void m0_be_regmap_fini(struct m0_be_regmap *rm)
 {
 }
 
+/* Free reg_area, reg_d_area and regions' tree (t_root). */
+M0_INTERNAL void m0_be_tx_regmap_free(struct m0_be_tx *tx)
+{
+	M0_PRE(m0_be__tx_invariant(tx));
+	M0_PRE(tx_state(tx) >= M0_BTS_PLACED);
+
+	tdestroy(tx->t_root, &tx_reg_free);
+	tx->t_root = NULL;
+	m0_free(tx->t_reg_area);
+	tx->t_reg_area = NULL;
+	m0_free(tx->t_reg_d_area);
+	tx->t_reg_d_area = NULL;
+}
+
 M0_INTERNAL void m0_be_regmap_add(struct m0_be_regmap *rm, struct m0_be_reg_d r)
 {
 }
@@ -96,6 +111,12 @@ M0_INTERNAL void tx_reg_ext(const struct m0_be_reg_d *rd, struct m0_ext *out)
 	out->e_end   = out->e_start + reg->br_size - 1;
 }
 
+/* Do nothing in tx_reg_free, free whole reg_area and reg_d_area in
+ * m0_be_tx_regmap_free() after t_root tree is detroyed. */
+static void tx_reg_free(void *nodep)
+{
+}
+
 /** @} end of be group */
 
 /*
diff --git a/be/tx_regmap.h b/be/tx_regmap.h
index 8f2505d..4a05632 100644
--- a/be/tx_regmap.h
+++ b/be/tx_regmap.h
@@ -51,6 +51,7 @@ struct m0_be_regmap {
 
 M0_INTERNAL int m0_be_regmap_init(struct m0_be_regmap *rm, size_t size_max);
 M0_INTERNAL void m0_be_regmap_fini(struct m0_be_regmap *rm);
+M0_INTERNAL void m0_be_tx_regmap_free(struct m0_be_tx *tx);
 
 M0_INTERNAL void m0_be_regmap_add(struct m0_be_regmap *rm,
 				  struct m0_be_reg_d r);
-- 
1.8.3.2


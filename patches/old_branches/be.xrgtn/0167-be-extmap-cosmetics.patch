From 94a6d08a16263cd697080f4c9ec7a4ec3b5abc69 Mon Sep 17 00:00:00 2001
From: Andriy Tkachuk <andriy_tkachuk@xyratex.com>
Date: Tue, 18 Jun 2013 16:30:42 +0300
Subject: [PATCH 167/228] be: extmap: cosmetics

---
 be/extmap.c | 40 +++++++++++++++++++++-------------------
 be/extmap.h | 35 ++++++++++++++++++-----------------
 2 files changed, 39 insertions(+), 36 deletions(-)

diff --git a/be/extmap.c b/be/extmap.c
index 808f5ac..907c183 100644
--- a/be/extmap.c
+++ b/be/extmap.c
@@ -106,7 +106,7 @@ static const struct m0_be_btree_kv_ops be_emap_ops = {
 
 M0_INTERNAL int m0_be_emap_init(struct m0_be_emap *map,
 				struct m0_be_seg  *db,
-				const char        *mapname)
+			  const char              *mapname)
 {
 	int rc;
 	struct m0_be_bnode *root;
@@ -328,10 +328,10 @@ static bool be_emap_invariant(struct m0_be_emap_cursor *it)
 #endif
 
 M0_INTERNAL void m0_be_emap_lookup(struct m0_be_emap        *map,
-				struct m0_be_tx       *tx,
-			  const struct m0_uint128     *prefix,
-				m0_bindex_t            offset,
-				struct m0_be_emap_cursor *it)
+				   struct m0_be_tx          *tx,
+			     const struct m0_uint128        *prefix,
+				   m0_bindex_t               offset,
+				   struct m0_be_emap_cursor *it)
 {
 	M0_PRE(offset <= M0_BINDEX_MAX);
 
@@ -442,7 +442,8 @@ fail:
 
 static void be_emap_split(struct m0_be_emap_cursor *it,
 			  struct m0_be_tx          *tx,
-			  struct m0_indexvec       *vec, m0_bindex_t scan)
+			  struct m0_indexvec       *vec,
+			  m0_bindex_t               scan)
 {
 	uint32_t      i;
 	m0_bcount_t   count;
@@ -645,11 +646,11 @@ M0_INTERNAL void m0_be_emap_paste(struct m0_be_emap_cursor *it,
 	 */
 }
 
-M0_INTERNAL void m0_be_emap_obj_insert(struct m0_be_emap    *map,
-				    struct m0_be_tx   *tx,
-				    struct m0_be_op   *op,
-			      const struct m0_uint128 *prefix,
-				    uint64_t           val)
+M0_INTERNAL void m0_be_emap_obj_insert(struct m0_be_emap *map,
+				       struct m0_be_tx   *tx,
+				       struct m0_be_op   *op,
+			         const struct m0_uint128 *prefix,
+				       uint64_t           val)
 {
 	struct m0_be_op bt_op;
 
@@ -668,10 +669,10 @@ M0_INTERNAL void m0_be_emap_obj_insert(struct m0_be_emap    *map,
 	m0_sm_state_set(&op->bo_sm, M0_BOS_SUCCESS);
 }
 
-M0_INTERNAL void m0_be_emap_obj_delete(struct m0_be_emap    *map,
-				    struct m0_be_tx   *tx,
-				    struct m0_be_op   *op,
-			      const struct m0_uint128 *prefix)
+M0_INTERNAL void m0_be_emap_obj_delete(struct m0_be_emap *map,
+				       struct m0_be_tx   *tx,
+				       struct m0_be_op   *op,
+				 const struct m0_uint128 *prefix)
 {
 	struct m0_be_op bt_op;
 
@@ -695,8 +696,8 @@ static bool m0_be_emap_caret_invariant(const struct m0_be_emap_caret *car)
 }
 
 M0_INTERNAL void m0_be_emap_caret_init(struct m0_be_emap_caret  *car,
-				    struct m0_be_emap_cursor *it,
-				    m0_bindex_t            index)
+				       struct m0_be_emap_cursor *it,
+				       m0_bindex_t               index)
 {
 	M0_PRE(index <= M0_BINDEX_MAX);
 	M0_PRE(m0_ext_is_in(&it->ec_seg.ee_ext, index));
@@ -710,14 +711,15 @@ M0_INTERNAL void m0_be_emap_caret_fini(struct m0_be_emap_caret *car)
 	M0_ASSERT(m0_be_emap_caret_invariant(car));
 }
 
-M0_INTERNAL m0_bcount_t m0_be_emap_caret_step(const struct m0_be_emap_caret *car)
+M0_INTERNAL m0_bcount_t
+m0_be_emap_caret_step(const struct m0_be_emap_caret *car)
 {
 	M0_ASSERT(m0_be_emap_caret_invariant(car));
 	return car->ct_it->ec_seg.ee_ext.e_end - car->ct_index;
 }
 
 M0_INTERNAL int m0_be_emap_caret_move(struct m0_be_emap_caret *car,
-				      m0_bcount_t count)
+				      m0_bcount_t              count)
 {
 	int rc = 0;
 
diff --git a/be/extmap.h b/be/extmap.h
index 34324ca..f5812e3 100644
--- a/be/extmap.h
+++ b/be/extmap.h
@@ -125,9 +125,9 @@ struct m0_be_emap_cursor;
 
     @retval -ENOENT mapname is not found in the segment dictionary.
  */
-M0_INTERNAL int m0_be_emap_init(struct m0_be_emap   *map,
-			     struct m0_be_seg *db,
-		       const char             *mapname);
+M0_INTERNAL int m0_be_emap_init(struct m0_be_emap *map,
+				struct m0_be_seg  *db,
+			  const char              *mapname);
 
 /** Release the resources associated with the collection. */
 M0_INTERNAL void m0_be_emap_fini(struct m0_be_emap *map);
@@ -141,11 +141,11 @@ M0_INTERNAL void m0_be_emap_fini(struct m0_be_emap *map);
 	   ([0, M0\_BINDEX\_MAX + 1), val)
    @f]
  */
-M0_INTERNAL void m0_be_emap_obj_insert(struct m0_be_emap    *map,
-				    struct m0_be_tx   *tx,
-				    struct m0_be_op   *op,
-			      const struct m0_uint128 *prefix,
-				    uint64_t           val);
+M0_INTERNAL void m0_be_emap_obj_insert(struct m0_be_emap *map,
+				       struct m0_be_tx   *tx,
+				       struct m0_be_op   *op,
+			         const struct m0_uint128 *prefix,
+				       uint64_t           val);
 
 /**
    Remove a map with the given prefix from the collection.
@@ -153,10 +153,10 @@ M0_INTERNAL void m0_be_emap_obj_insert(struct m0_be_emap    *map,
    @pre the map must be in initial state: consists of a single extent, covering
    the whole name-space.
  */
-M0_INTERNAL void m0_be_emap_obj_delete(struct m0_be_emap    *map,
-				    struct m0_be_tx   *tx,
-				    struct m0_be_op   *op,
-			      const struct m0_uint128 *prefix);
+M0_INTERNAL void m0_be_emap_obj_delete(struct m0_be_emap *map,
+				       struct m0_be_tx   *tx,
+				       struct m0_be_op   *op,
+				 const struct m0_uint128 *prefix);
 
 /** Extent map segment. */
 struct m0_be_emap_seg {
@@ -175,7 +175,8 @@ M0_INTERNAL bool m0_be_emap_ext_is_last(const struct m0_ext *ext);
 M0_INTERNAL bool m0_be_emap_ext_is_first(const struct m0_ext *ext);
 
 /** Returns an extent at the current cursor position. */
-M0_INTERNAL struct m0_be_emap_seg *m0_be_emap_seg_get(struct m0_be_emap_cursor *it);
+M0_INTERNAL struct m0_be_emap_seg *
+	m0_be_emap_seg_get(struct m0_be_emap_cursor *it);
 
 /** Returns the back-end operation of emap cursor */
 M0_INTERNAL struct m0_be_op *m0_be_emap_op_get(struct m0_be_emap_cursor *it);
@@ -199,10 +200,10 @@ M0_INTERNAL struct m0_be_op *m0_be_emap_op_get(struct m0_be_emap_cursor *it);
    requested one.
  */
 M0_INTERNAL void m0_be_emap_lookup(struct m0_be_emap        *map,
-				struct m0_be_tx       *tx,
-			  const struct m0_uint128     *prefix,
-				m0_bindex_t            offset,
-				struct m0_be_emap_cursor *it);
+				   struct m0_be_tx          *tx,
+			     const struct m0_uint128        *prefix,
+				   m0_bindex_t               offset,
+				   struct m0_be_emap_cursor *it);
 
 /**
    Move cursor to the next segment in its map.
-- 
1.8.3.2


From b062da2e931cf5f234d6d50cb481a247dd464ad0 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Wed, 29 May 2013 18:56:51 +0300
Subject: [PATCH 056/228] be (seg): add M0_INTERNAL

---
 be/seg.c | 26 +++++++++++++-------------
 be/seg.h | 38 ++++++++++++++++++++++----------------
 2 files changed, 35 insertions(+), 29 deletions(-)

diff --git a/be/seg.c b/be/seg.c
index d1c21be..5ce258f 100644
--- a/be/seg.c
+++ b/be/seg.c
@@ -96,7 +96,7 @@ static int seg_header_write(struct m0_be_seg *seg, m0_bcount_t size)
 	return io.si_rc;
 }
 
-int m0_be_seg_create(struct m0_be_seg *seg, m0_bcount_t size)
+M0_INTERNAL int m0_be_seg_create(struct m0_be_seg *seg, m0_bcount_t size)
 {
 	M0_PRE(seg->bs_state == M0_BSS_INIT);
 	M0_PRE(seg->bs_stob->so_domain != NULL);
@@ -106,7 +106,7 @@ int m0_be_seg_create(struct m0_be_seg *seg, m0_bcount_t size)
 		seg_header_write(seg, size);
 }
 
-int m0_be_seg_destroy(struct m0_be_seg *seg)
+M0_INTERNAL int m0_be_seg_destroy(struct m0_be_seg *seg)
 {
 	M0_PRE(M0_IN(seg->bs_state, (M0_BSS_INIT, M0_BSS_CLOSED)));
 
@@ -116,7 +116,7 @@ int m0_be_seg_destroy(struct m0_be_seg *seg)
 	return -1; /*XXX*/
 }
 
-void
+M0_INTERNAL void
 m0_be_seg_init(struct m0_be_seg *seg, struct m0_stob *stob, struct m0_be *be)
 {
 	seg->bs_be = be;
@@ -124,7 +124,7 @@ m0_be_seg_init(struct m0_be_seg *seg, struct m0_stob *stob, struct m0_be *be)
 	seg->bs_state = M0_BSS_INIT;
 }
 
-void m0_be_seg_fini(struct m0_be_seg *seg)
+M0_INTERNAL void m0_be_seg_fini(struct m0_be_seg *seg)
 {
 	M0_PRE(M0_IN(seg->bs_state, (M0_BSS_INIT, M0_BSS_CLOSED)));
 }
@@ -179,7 +179,7 @@ static int stob_io_single_read(void *buf, m0_bcount_t bufsz,
 	return rc;
 }
 
-int m0_be_seg_open(struct m0_be_seg *seg)
+M0_INTERNAL int m0_be_seg_open(struct m0_be_seg *seg)
 {
 	int                rc;
 	uint32_t           st_block_shift;
@@ -232,7 +232,7 @@ int m0_be_seg_open(struct m0_be_seg *seg)
 #endif
 }
 
-void m0_be_seg_close(struct m0_be_seg *seg)
+M0_INTERNAL void m0_be_seg_close(struct m0_be_seg *seg)
 {
 	M0_PRE(seg->bs_state == M0_BSS_OPENED);
 
@@ -240,29 +240,29 @@ void m0_be_seg_close(struct m0_be_seg *seg)
 	seg->bs_state = M0_BSS_CLOSED;
 }
 
-void m0_be_reg_get(struct m0_be_reg *reg, struct m0_be_op *op)
+M0_INTERNAL void m0_be_reg_get(struct m0_be_reg *reg, struct m0_be_op *op)
 {
 	M0_PRE(m0_be__reg_invariant(reg));
 }
 
-void m0_be_reg_get_fast(const struct m0_be_reg *reg)
+M0_INTERNAL void m0_be_reg_get_fast(const struct m0_be_reg *reg)
 {
 	M0_PRE(m0_be__reg_invariant(reg));
 }
 
-void m0_be_reg_put(const struct m0_be_reg *reg)
+M0_INTERNAL void m0_be_reg_put(const struct m0_be_reg *reg)
 {
 	M0_PRE(m0_be__reg_invariant(reg));
 }
 
-int m0_be__reg_read(struct m0_be_seg *seg, struct m0_be_op *op,
-		    struct m0_be_reg *regs, m0_bcount_t nr)
+M0_INTERNAL int m0_be__reg_read(struct m0_be_seg *seg, struct m0_be_op *op,
+				struct m0_be_reg *regs, m0_bcount_t nr)
 {
 	return -1; /*XXX*/
 }
 
-int m0_be__reg_write(struct m0_be_seg *seg, struct m0_be_op *op,
-		     struct m0_be_reg *regs, m0_bcount_t nr)
+M0_INTERNAL int m0_be__reg_write(struct m0_be_seg *seg, struct m0_be_op *op,
+				 struct m0_be_reg *regs, m0_bcount_t nr)
 {
 	return -1; /*XXX*/
 }
diff --git a/be/seg.h b/be/seg.h
index 8c8b005..aeaa073 100644
--- a/be/seg.h
+++ b/be/seg.h
@@ -49,21 +49,23 @@ struct m0_be_seg {
 	struct m0_be          *bs_be;
 	int                    bs_state;
 };
+M0_INTERNAL bool m0_be_seg__invariant(const struct m0_be_seg *seg);
 
-void m0_be_seg_init(struct m0_be_seg *seg, struct m0_stob *stob,
-					   struct m0_be   *be);
-void m0_be_seg_fini(struct m0_be_seg *seg);
-bool m0_be_seg__invariant(const struct m0_be_seg *seg);
+M0_INTERNAL void m0_be_seg_init(struct m0_be_seg *seg,
+				struct m0_stob *stob,
+				struct m0_be *be);
+
+M0_INTERNAL void m0_be_seg_fini(struct m0_be_seg *seg);
 
 /** Opens existing stob, reads segment header from it, etc. */
-int m0_be_seg_open(struct m0_be_seg *seg);
+M0_INTERNAL int m0_be_seg_open(struct m0_be_seg *seg);
 
-void m0_be_seg_close(struct m0_be_seg *seg);
+M0_INTERNAL void m0_be_seg_close(struct m0_be_seg *seg);
 
 /** Creates the segment of specified size on the storage. */
-int m0_be_seg_create(struct m0_be_seg *seg, m0_bcount_t size);
+M0_INTERNAL int m0_be_seg_create(struct m0_be_seg *seg, m0_bcount_t size);
 
-int m0_be_seg_destroy(struct m0_be_seg *seg);
+M0_INTERNAL int m0_be_seg_destroy(struct m0_be_seg *seg);
 
 struct m0_be_reg {
 	struct m0_be_seg *br_seg;
@@ -81,19 +83,23 @@ struct m0_be_reg {
  * `reg' parameter is not const, because stob IO will update
  * m0_be_reg::br_addr when a region is loaded/stored.
  */
-void m0_be_reg_get(struct m0_be_reg *reg, struct m0_be_op *op);
+M0_INTERNAL void m0_be_reg_get(struct m0_be_reg *reg, struct m0_be_op *op);
 
-void m0_be_reg_get_fast(const struct m0_be_reg *reg);
+M0_INTERNAL void m0_be_reg_get_fast(const struct m0_be_reg *reg);
 
-void m0_be_reg_put(const struct m0_be_reg *reg);
+M0_INTERNAL void m0_be_reg_put(const struct m0_be_reg *reg);
 
-bool m0_be__reg_invariant(const struct m0_be_reg *reg);
+M0_INTERNAL bool m0_be__reg_invariant(const struct m0_be_reg *reg);
 
-int m0_be__reg_read(struct m0_be_seg *seg, struct m0_be_op *op,
-		    struct m0_be_reg *regs, m0_bcount_t nr);
+M0_INTERNAL int m0_be__reg_read(struct m0_be_seg *seg,
+				struct m0_be_op *op,
+				struct m0_be_reg *regs,
+				m0_bcount_t nr);
 
-int m0_be__reg_write(struct m0_be_seg *seg, struct m0_be_op *op,
-		     struct m0_be_reg *regs, m0_bcount_t nr);
+M0_INTERNAL int m0_be__reg_write(struct m0_be_seg *seg,
+				 struct m0_be_op *op,
+				 struct m0_be_reg *regs,
+				 m0_bcount_t nr);
 
 /** @} end of be group */
 #endif /* __MERO_BE_SEG_H__ */
-- 
1.8.3.2


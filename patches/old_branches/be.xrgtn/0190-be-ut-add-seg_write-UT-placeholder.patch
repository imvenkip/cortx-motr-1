From 928a2a6685b7e5abbeb6f988523de3db09b61126 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Thu, 20 Jun 2013 20:05:59 +0300
Subject: [PATCH 190/228] be/ut: add seg_write() UT placeholder

m0_be_ut_seg_write(). I dislike this name. Why can't it be test_seg_write()?
---
 be/ut/main.c | 15 ++++++++-------
 be/ut/seg.c  | 48 ++++++++++++++++++++++++++++++++++++++----------
 2 files changed, 46 insertions(+), 17 deletions(-)

diff --git a/be/ut/main.c b/be/ut/main.c
index b78dbf2..e62a38c 100644
--- a/be/ut/main.c
+++ b/be/ut/main.c
@@ -23,6 +23,7 @@
 extern void m0_be_ut_seg_init_fini(void);
 extern void m0_be_ut_seg_create_destroy(void);
 extern void m0_be_ut_seg_open_close(void);
+extern void m0_be_ut_seg_write(void);
 
 extern void m0_be_ut_alloc_init_fini(void);
 extern void m0_be_ut_alloc_create_destroy(void);
@@ -32,18 +33,18 @@ extern void m0_be_ut_alloc_mt(void);
 const struct m0_test_suite m0_be_ut = {
 	.ts_name = "be-ut",
 	.ts_tests = {
-		{ "seg-init",       m0_be_ut_seg_init_fini	  },
-		{ "seg-create",     m0_be_ut_seg_create_destroy	  },
-		{ "seg-open",       m0_be_ut_seg_open_close	  },
-		{ "alloc-init",	    m0_be_ut_alloc_init_fini	  },
+		{ "seg-init",       m0_be_ut_seg_init_fini        },
+		{ "seg-create",     m0_be_ut_seg_create_destroy   },
+		{ "seg-open",       m0_be_ut_seg_open_close       },
+		{ "seg-write",      m0_be_ut_seg_write            },
+		{ "alloc-init",     m0_be_ut_alloc_init_fini      },
 		{ "alloc-create",   m0_be_ut_alloc_create_destroy },
-		{ "alloc-multiple", m0_be_ut_alloc_multiple	  },
-		{ "alloc-mt",	    m0_be_ut_alloc_mt		  },
+		{ "alloc-multiple", m0_be_ut_alloc_multiple       },
+		{ "alloc-mt",       m0_be_ut_alloc_mt             },
 		{ NULL, NULL }
 	}
 };
 
-
 /*
  *  Local variables:
  *  c-indentation-style: "K&R"
diff --git a/be/ut/seg.c b/be/ut/seg.c
index 5517f18..e14d41d 100644
--- a/be/ut/seg.c
+++ b/be/ut/seg.c
@@ -18,19 +18,19 @@
  * Original creation date: 29-May-2013
  */
 
-#include "be/seg.h"             /* m0_be_seg */
-#include "ut/ut.h"              /* M0_UT_ASSERT */
-#include "be/ut/helper.h"       /* m0_be_ut_seg_helper */
+#include "be/seg.h"
+#include "be/ut/helper.h"
+#include "ut/ut.h"
 
-static struct m0_be_ut_seg_helper be_ut_seg_helper;
+static struct m0_be_ut_seg_helper g_helper;
 
 M0_INTERNAL void m0_be_ut_seg_init_fini(void)
 {
 	struct m0_be_seg seg;
 
 	m0_be_ut_seg_storage_init();
-	m0_be_ut_seg_initialize(&be_ut_seg_helper, &seg, true);
-	m0_be_ut_seg_finalize(&be_ut_seg_helper, &seg, true);
+	m0_be_ut_seg_initialize(&g_helper, &seg, true);
+	m0_be_ut_seg_finalize(&g_helper, &seg, true);
 	m0_be_ut_seg_storage_fini();
 }
 
@@ -38,14 +38,42 @@ M0_INTERNAL void m0_be_ut_seg_create_destroy(void)
 {
 	struct m0_be_seg seg;
 
-	m0_be_ut_seg_create(&be_ut_seg_helper, &seg);
-	m0_be_ut_seg_destroy(&be_ut_seg_helper, &seg);
+	m0_be_ut_seg_create(&g_helper, &seg);
+	m0_be_ut_seg_destroy(&g_helper, &seg);
 }
 
 M0_INTERNAL void m0_be_ut_seg_open_close(void)
 {
 	struct m0_be_seg seg;
 
-	m0_be_ut_seg_create_open(&be_ut_seg_helper, &seg);
-	m0_be_ut_seg_close_destroy(&be_ut_seg_helper, &seg);
+	m0_be_ut_seg_create_open(&g_helper, &seg);
+	m0_be_ut_seg_close_destroy(&g_helper, &seg);
+}
+
+M0_INTERNAL void m0_be_ut_seg_write(void)
+{
+	struct m0_be_seg seg;
+
+	m0_be_ut_seg_create(&g_helper, &seg);
+	m0_be_ut_seg_destroy(&g_helper, &seg);
+
+	/* #define BE_SEG_DEFAULT_ADDR   ((void *)0x400000000000) */
+
+	/* seg_init() */
+	/* seg_create() */
+	/* char *p = BE_SEG_DEFAULT_ADDR; */
+	/* for (i = 0; i < 128; ++i) */
+	/* 	p[i] = i; */
+	/* seg_write(..., {0, 40}, {41, 128}); */
+	/* m0_sm_wait(op->sm, M0_BITS(WAIT_STATE), M0_TIME_NEVER); */
+	/* seg_close() */
+	/* seg_fini(); */
+
+	/* seg_init() */
+	/* seg_open() */
+	/* const char *r = BE_SEG_DEFAULT_ADDR; */
+	/* for (i = 0; i < 128; ++i) */
+	/* 	assert(r[i] == i); */
+	/* seg_close() */
+	/* seg_fini(); */
 }
-- 
1.8.3.2


From 7fcc89be8a28400d4fe72b503db71b2a027486e0 Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Wed, 29 May 2013 17:49:04 +0300
Subject: [PATCH 049/228] be: fix typos in tx.c

---
 be/tx.c | 13 +++++--------
 be/tx.h | 26 +++++++++++++-------------
 2 files changed, 18 insertions(+), 21 deletions(-)

diff --git a/be/tx.c b/be/tx.c
index 03fe134..2382e33 100644
--- a/be/tx.c
+++ b/be/tx.c
@@ -14,11 +14,10 @@
  * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
  * http://www.xyratex.com/contact
  *
- * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
+ * Original author: Nikita Danilov <nikita_danilov@xyratex.com>
  * Original creation date: 29-May-2013
  */
 
-
 /**
  * @addtogroup be
  *
@@ -174,7 +173,7 @@ void m0_be_tx_close(struct m0_be_tx *tx,
 	tx_state_set(tx, M0_BTS_CLOSED);
 	M0_ASSERT(used <= prepared);
 	M0_ASSERT(eng->te_reserved + log_used >= log_prepared);
-	eng->reserved -= prepared - used;
+	eng->te_reserved -= prepared - used;
 	tx_engine_got_space(eng);
 	M0_POST(m0_be_tx_engine_invariant(tx));
 	tx_engine_unlock(eng);
@@ -212,7 +211,7 @@ static void tx_engine_got_space(struct m0_be_tx_engine *eng)
 
 	M0_PRE(m0_be_tx_engine_invariant(eng));
 	while ((head = tx_tlist_head(&eng->te_txs[M0_BTS_OPENING])) != NULL &&
-	       tx_prepared_log_size(head) >= tx_engine_free_space(eng))
+	       tx_prepared_log_size(head) <= tx_engine_free_space(eng))
 		tx_open_tail(head);
 	M0_POST(m0_be_tx_engine_invariant(eng));
 }
@@ -274,7 +273,7 @@ static m0_bcount_t tx_log_size(const struct m0_be_tx *tx,
 {
 	return tx_group_header_size(nr) + sizeof(struct tx_header) +
 		tx->t_payload +
-		cr->tc_reg_nr * sizeof(struct m0_be_reg_d) + cr->tc_reg_size +
+		cr->tc_reg_nr * sizeof(struct m0_be_reg_d) + cr->tc_reg_size;
 }
 
 static m0_bcount_t tx_prepareg_log_size(const struct m0_be_tx *tx)
@@ -287,7 +286,7 @@ static m0_be_tx_engine *tx_engine(const struct m0_be_tx *tx)
 	return &tx->t_be.b_tx;
 }
 
-bool m0_be_tx_engine_invarint(const struct m0_be_tx_engine *engine)
+bool m0_be_tx_engine_invariant(const struct m0_be_tx_engine *engine)
 {
 	struct m0_be_log *log  = &engine->te_log;
 	struct m0_be_tx  *prev = NULL;
@@ -328,8 +327,6 @@ bool m0_be_tx_invariant(const struct m0_be_tx *tx)
 }
 
 /** @} end of be group */
-
-
 /*
  *  Local variables:
  *  c-indentation-style: "K&R"
diff --git a/be/tx.h b/be/tx.h
index 6ce2d9e..ac42b45 100644
--- a/be/tx.h
+++ b/be/tx.h
@@ -14,7 +14,7 @@
  * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
  * http://www.xyratex.com/contact
  *
- * Original author: Valery V. Vorotyntsev <valery_vorotyntsev@xyratex.com>
+ * Original author: Nikita Danilov <nikita_danilov@xyratex.com>
  * Original creation date: 29-May-2013
  */
 
@@ -118,13 +118,24 @@ struct m0_be_tx_engine {
 	m0_bcount_t      te_reserved;
 };
 
-bool m0_be_tx_engine_invarint(const struct m0_be_tx_engine *engine);
+bool m0_be_tx_engine_invariant(const struct m0_be_tx_engine *engine);
 
 void m0_be_tx_engine_init(struct m0_be_tx_engine *engine);
 void m0_be_tx_engine_fini(struct m0_be_tx_engine *engine);
 
 typedef void (*m0_be_tx_cb_t)(const struct m0_be_tx *tx);
 
+struct m0_be_tx_credit {
+	/**
+	 * The number of regions needed for operation representation in the
+	 * transaction.
+	 */
+	m0_bcount_t tc_reg_nr;
+
+	/** Total size of memory needed for the same. */
+	m0_bcount_t tc_reg_size;
+};
+
 struct m0_be_tx {
 	struct m0_sm           t_sm;
 	uint64_t               t_id;
@@ -174,17 +185,6 @@ void m0_be_tx_force(struct m0_be_tx *tx);
  */
 void m0_be_tx_stable(struct m0_be_tx *tx);
 
-struct m0_be_tx_credit {
-	/**
-	 * The number of regions needed for operation representation in the
-	 * transaction.
-	 */
-	m0_bcount_t tc_reg_nr;
-
-	/** Total size of memory needed for the same. */
-	m0_bcount_t tc_reg_size;
-};
-
 void m0_be_tx_credit_init(struct m0_be_tx_credit *credit);
 
 /** c0 += c1 */
-- 
1.8.3.2


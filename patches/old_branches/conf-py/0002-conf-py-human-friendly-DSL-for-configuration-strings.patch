From 37e43954de26c4c2b103ce7f4cd953c5a8668acf Mon Sep 17 00:00:00 2001
From: "Valery V. Vorotyntsev" <valery_vorotyntsev@xyratex.com>
Date: Mon, 18 Mar 2013 00:15:22 +0200
Subject: [PATCH 2/2] conf/py: human-friendly DSL for configuration strings

Mero package provides a human-friendly domain-specific language (DSL)
for generating Mero configuration strings.

Simple usage::

    #!/usr/bin/env python

    import mero.conf as conf

    print conf.xstr([conf.profile('prof', filesystem='fs')])

See examples/conf.py for real-life usage.
---
 conf/py/.gitignore           |   1 +
 conf/py/ChangeLog            |   9 ++++
 conf/py/README               |  32 ++++++++++++++
 conf/py/examples/conf.py     |  27 ++++++++++++
 conf/py/mero/__init__.py     |   1 +
 conf/py/mero/conf.py         | 100 +++++++++++++++++++++++++++++++++++++++++++
 conf/py/mero/net/__init__.py |   1 +
 conf/py/mero/net/lnet.py     |  22 ++++++++++
 conf/py/setup.py             |   6 +++
 conf/py/tests/conf.py        |  64 +++++++++++++++++++++++++++
 conf/py/tests/lnet.py        |  12 ++++++
 11 files changed, 275 insertions(+)
 create mode 100644 conf/py/.gitignore
 create mode 100644 conf/py/ChangeLog
 create mode 100644 conf/py/README
 create mode 100644 conf/py/examples/conf.py
 create mode 100644 conf/py/mero/__init__.py
 create mode 100644 conf/py/mero/conf.py
 create mode 100644 conf/py/mero/net/__init__.py
 create mode 100644 conf/py/mero/net/lnet.py
 create mode 100644 conf/py/setup.py
 create mode 100644 conf/py/tests/conf.py
 create mode 100644 conf/py/tests/lnet.py

diff --git a/conf/py/.gitignore b/conf/py/.gitignore
new file mode 100644
index 0000000..0d20b64
--- /dev/null
+++ b/conf/py/.gitignore
@@ -0,0 +1 @@
+*.pyc
diff --git a/conf/py/ChangeLog b/conf/py/ChangeLog
new file mode 100644
index 0000000..6c86d75
--- /dev/null
+++ b/conf/py/ChangeLog
@@ -0,0 +1,9 @@
+2013-03-17  Valery V. Vorotyntsev  <valery_vorotyntsev@xyratex.com>
+
+	* Version 0.1:
+	  - Directory layout.
+	  - setup.py, README, ChangeLog.
+	  - examples/conf.py.
+	  - mero/conf.py: implement `profile', `filesystem', and `service'
+	    object types.
+	  - mero/net/lnet.py: nid() function is a stub.
diff --git a/conf/py/README b/conf/py/README
new file mode 100644
index 0000000..da1213f
--- /dev/null
+++ b/conf/py/README
@@ -0,0 +1,32 @@
+====
+Mero
+====
+
+Mero package provides a human-friendly domain-specific language (DSL)
+for generating Mero configuration strings.
+
+Simple usage::
+
+    #!/usr/bin/env python
+
+    import mero.conf as conf
+
+    print conf.xstr([conf.profile('prof', filesystem='fs')])
+
+See examples/conf.py for real-life usage.
+
+See conf/preload.h in Mero sources directory for the documentation on
+configuration string format.
+
+
+Installation
+============
+
+XXX TODO
+
+
+Self testing
+============
+
+    $ for f in tests/*; do PYTHONPATH=. python $f; done
+    $ PYTHONPATH=. python examples/conf.py
diff --git a/conf/py/examples/conf.py b/conf/py/examples/conf.py
new file mode 100644
index 0000000..4bef78e
--- /dev/null
+++ b/conf/py/examples/conf.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python
+
+import mero.net.lnet as lnet
+import mero.conf as conf
+
+ios_tmids = [1, 2]  # XXX comes from CLI arguments
+
+def endpoints(tmids):
+    nid = lnet.nid()
+    return map(lambda i: lnet.endpoint(nid, tmid=i), tmids)
+
+ios_eps = endpoints(ios_tmids)
+mds_ep = ios_eps[0]
+
+mds = conf.service('mds', stype='MDS', endpoints=[mds_ep], node='_')
+ios = conf.service('ios', stype='IOS', endpoints=[ios_eps[0]], node='_')
+fs = conf.filesystem('fs', rootfid=(11, 22),
+                     params=dict(pool_width=3, nr_data_units=1,
+                                 nr_parity_units=1, unit_size=4096),
+                     services=[mds, ios])
+
+if __name__ == '__main__':
+    print conf.xstr([conf.profile('prof', filesystem=fs), fs, mds, ios])
+
+    # XXX TODO: Implement automatic deducing of the list of objects.
+    # The upper call should be equivalent to:
+    # print conf.xstr_auto(conf.profile('prof', filesystem=fs))
diff --git a/conf/py/mero/__init__.py b/conf/py/mero/__init__.py
new file mode 100644
index 0000000..93ce3c8
--- /dev/null
+++ b/conf/py/mero/__init__.py
@@ -0,0 +1 @@
+__all__ = ['conf', 'net']
diff --git a/conf/py/mero/conf.py b/conf/py/mero/conf.py
new file mode 100644
index 0000000..bc03d06
--- /dev/null
+++ b/conf/py/mero/conf.py
@@ -0,0 +1,100 @@
+### --------------------------------------------------------------------
+### Configuration objects
+### --------------------------------------------------------------------
+
+class Obj(object):
+    types = dict(profile=1, filesystem=2, service=3, node=4, nic=5, sdev=6,
+                 partition=7)
+
+    def __init__(self, id):
+        assert type(id) is str
+        self.id = id
+
+class profile(Obj):
+    def __init__(self, id, filesystem):
+        Obj.__init__(self, id)
+
+        assert is_referable(filesystem)
+        self.filesystem = filesystem
+
+    def _xstr(self):
+        return [quote(self.filesystem)]
+
+class filesystem(Obj):
+    def __init__(self, id, rootfid, params, services):
+        Obj.__init__(self, id)
+
+        # XXX TODO: Use decorators.
+        assert type(rootfid) is tuple
+        assert len(rootfid) == 2
+        assert all(map(lambda v: type(v) is int, rootfid))
+        self.rootfid = rootfid
+
+        assert type(params) is dict
+        assert all(map(lambda v: type(v) is int, params.values()))
+        self.params = params
+
+        assert type(services) is list
+        assert all(map(is_referable, services))
+        self.services = services
+
+    def _xstr(self):
+        return [repr(self.rootfid),
+                xstr_array(['"%s=%u"' % item for item in self.params.items()]),
+                xstr_array(map(quote, self.services))]
+
+class service(Obj):
+    types = dict(MDS=1, IOS=2, MGS=3, DLM=4)
+
+    def __init__(self, id, stype, endpoints, node):
+        Obj.__init__(self, id)
+
+        assert stype in service.types.keys()
+        self.stype = stype
+
+        assert type(endpoints) is list
+        assert all(map(lambda v: type(v) is str, endpoints))
+        # XXX TODO: Validate endpoint format.
+        self.endpoints = endpoints
+
+        assert type(node) is str
+        self.node = node
+
+    def _xstr(self):
+        return [str(service.types[self.stype]),
+                xstr_array(map(quote, self.endpoints)),
+                quote(self.node)]
+
+### --------------------------------------------------------------------
+### Conversion to xcode strings
+### --------------------------------------------------------------------
+
+def is_referable(x):
+    return type(x) is str or issubclass(type(x), Obj)
+
+def quote(x):
+    assert is_referable(x)
+    return '"%s"' % (x if type(x) is str else x.id)
+
+def xstr_array(xs):
+    assert type(xs) is list
+    assert all(map(lambda v: type(v) is str, xs))
+    return '[%u: %s]' % (len(xs), ', '.join(xs)) if xs else '[0]'
+
+def xstr_one(obj):
+    """Converts an object to xcode string.
+    """
+    assert issubclass(type(obj), Obj)
+    return '("%s", {%s| (%s)})' % (obj.id,
+                                   Obj.types[type(obj).__name__],
+                                   ', '.join(obj._xstr()))
+
+def xstr(objs):
+    """Converts a list of objects to xcode string.
+    """
+    assert type(objs) is list
+    assert all(map(lambda v: issubclass(type(v), Obj), objs))
+    return xstr_array(map(xstr_one, objs))
+
+# XXX TODO: Implement the rest of configuration object types.
+__all__ = ['xstr', 'profile', 'filesystem', 'service']
diff --git a/conf/py/mero/net/__init__.py b/conf/py/mero/net/__init__.py
new file mode 100644
index 0000000..4339396
--- /dev/null
+++ b/conf/py/mero/net/__init__.py
@@ -0,0 +1 @@
+__all__ = ['lnet']
diff --git a/conf/py/mero/net/lnet.py b/conf/py/mero/net/lnet.py
new file mode 100644
index 0000000..e9f515f
--- /dev/null
+++ b/conf/py/mero/net/lnet.py
@@ -0,0 +1,22 @@
+__all__ = ['nid', 'endpoint']
+
+def nid():
+    # XXX TODO: `lctl list_nids | head -1`
+    return '172.16.118.132@tcp'
+
+def endpoint(nid, tmid, portal=34):
+    """Returns a string with Lnet endpoint address.
+
+    LNet endpoint address format (see net/lnet/lnet.h):
+        NID:PID:Portal:TMID
+
+    The PID value of 12345 is used by Lustre in the kernel and is
+    the only value currently supported.
+    """
+    if not nid:
+        nid = nid()
+    assert type(nid) is str
+    assert type(portal) is int
+    assert type(tmid) is int
+
+    return ':'.join([nid, '12345', str(portal), str(tmid)])
diff --git a/conf/py/setup.py b/conf/py/setup.py
new file mode 100644
index 0000000..4827c57
--- /dev/null
+++ b/conf/py/setup.py
@@ -0,0 +1,6 @@
+from distutils.core import setup
+
+setup(name='mero', version='0.1', packages=['mero', 'mero.net'],
+      long_description=file('README').read(),
+      author='Valery V. Vorotyntsev',
+      author_email='valery_vorotyntsev@xyratex.com')
diff --git a/conf/py/tests/conf.py b/conf/py/tests/conf.py
new file mode 100644
index 0000000..b6b0074
--- /dev/null
+++ b/conf/py/tests/conf.py
@@ -0,0 +1,64 @@
+import mero.conf as conf
+import unittest
+import difflib
+
+def print_diff(expected, actual):
+    """Debug print.
+    """
+    assert type(expected) is str
+    assert type(actual) is str
+    if expected != actual:
+        for line in difflib.unified_diff(expected.split(), actual.split(),
+                                         'expected', 'actual'):
+            print line
+
+class TestConf(unittest.TestCase):
+    def test_advanced(self):
+        ios = conf.service('ios', stype='IOS', endpoints=['ep0'], node='_')
+        fs = conf.filesystem('fs', rootfid=(11, 22),
+                             params=dict(pool_width=3, nr_data_units=1,
+                                         nr_parity_units=1, unit_size=4096),
+                             services=['mds', ios])
+        actual = conf.xstr([conf.profile('prof', filesystem=fs), fs, ios])
+        expected = """[3: \
+("prof", {1| ("fs")}), \
+("fs", {2| ((11, 22), \
+[4: "unit_size=4096", "pool_width=3", "nr_data_units=1", "nr_parity_units=1"], \
+[2: "mds", "ios"])}), \
+("ios", {3| (2, [1: "ep0"], "_")})]"""
+        self.assertEqual(actual, expected)
+        self.assertEqual(conf.xstr([]), '[0]')
+
+class TestObjs(unittest.TestCase):
+    def test_profile(self):
+        actual = conf.xstr_one(conf.profile('prof', filesystem='fs'))
+        expected = '("prof", {1| ("fs")})'
+        self.assertEqual(actual, expected)
+
+    def test_filesystem(self):
+        fs = conf.filesystem('fs', rootfid=(11, 22),
+                             params=dict(pool_width=3, nr_data_units=1),
+                             services=[])
+        actual = conf.xstr_one(fs)
+        expected = """("fs", {2| ((11, 22), \
+[2: "pool_width=3", "nr_data_units=1"], [0])})"""
+        self.assertEqual(actual, expected)
+
+    def test_service(self):
+        svc = conf.service('mds', stype='MDS', endpoints=['ep0'], node='_')
+        actual = conf.xstr_one(svc)
+        expected = '("mds", {3| (1, [1: "ep0"], "_")})'
+        self.assertEqual(actual, expected)
+
+class TestMisc(unittest.TestCase):
+    def test_quote(self):
+        self.assertEqual(conf.quote('a'), '"a"')
+        self.assertEqual(conf.quote(conf.profile('a', filesystem='_')), '"a"')
+
+    def test_xstr_array(self):
+        self.assertEqual(conf.xstr_array([]), '[0]')
+        self.assertEqual(conf.xstr_array(['zero', 'one', 'two']),
+                         '[3: zero, one, two]')
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/conf/py/tests/lnet.py b/conf/py/tests/lnet.py
new file mode 100644
index 0000000..42ba86f
--- /dev/null
+++ b/conf/py/tests/lnet.py
@@ -0,0 +1,12 @@
+import mero.net.lnet as lnet
+import unittest
+
+class TestLnet(unittest.TestCase):
+    def test_lnet(self):
+        nid = lnet.nid()
+        self.assertEqual(nid, '172.16.118.132@tcp')
+        self.assertEqual(lnet.endpoint(nid, tmid=42),
+                         '172.16.118.132@tcp:12345:34:42')
+
+if __name__ == '__main__':
+    unittest.main()
-- 
1.8.3.2


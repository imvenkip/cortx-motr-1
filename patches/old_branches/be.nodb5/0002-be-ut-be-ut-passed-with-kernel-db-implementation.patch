From 6b378a83eba4622a67546a87357c44e312862afb Mon Sep 17 00:00:00 2001
From: Maxim Medved <Max_Medved@xyratex.com>
Date: Tue, 6 Aug 2013 09:14:49 +0300
Subject: [PATCH 2/3] be/ut: be-ut passed with kernel db/ implementation

---
 be/ut/helper.c            |  2 +-
 db/linux_kernel/db.c      | 24 +++++++++++++++++++++---
 db/linux_kernel/db_impl.h |  1 +
 mero/setup.c              | 12 +++++++++++-
 4 files changed, 34 insertions(+), 5 deletions(-)

diff --git a/be/ut/helper.c b/be/ut/helper.c
index a3469b3..7f23ed1 100644
--- a/be/ut/helper.c
+++ b/be/ut/helper.c
@@ -43,7 +43,7 @@ void m0_be_ut_backend_init(struct m0_be_ut_backend *ut_be)
 {
 #define NAME(ext) "be-ut" ext
 	static char    *argv[] = {
-		NAME(""), "-r", "-p", "-T", "AD", "-D", NAME(".db"),
+		NAME(""), "-r", "-p", "-T", "linux", "-D", NAME(".db"),
 		"-S", NAME(".stob"), "-A", NAME("_addb.stob"), "-w", "10",
 		"-e", "lnet:0@lo:12345:34:1", "-s", "be-tx-service"
 	};
diff --git a/db/linux_kernel/db.c b/db/linux_kernel/db.c
index 8d673ac..e65750d 100644
--- a/db/linux_kernel/db.c
+++ b/db/linux_kernel/db.c
@@ -141,6 +141,7 @@ static struct m0_db_kpair *ktable_lookup(struct m0_db_pair *pair, int *out)
 	struct m0_db_kpair   *scan;
 	struct m0_table      *t;
 	struct m0_table_impl *ti;
+	bool		      found;
 
 	t  = pair->dp_table;
 	ti = &t->t_i;
@@ -151,16 +152,21 @@ static struct m0_db_kpair *ktable_lookup(struct m0_db_pair *pair, int *out)
 	M0_PRE(m0_mutex_is_locked(&ti->tk_lock));
 
 	*out = -ENOENT;
+	found = false;
 	m0_tl_for(pair, &ti->tk_pair, scan) {
 		switch (key_cmp(t, &scan->dk_key, &pair->dp_key.db_buf)) {
 		case -1:
 			continue;
 		case 0:
+		case 1:
 			*out = 0;
-			/* fall through */
-		default:
+			found = true;
 			break;
+		default:
+			M0_IMPOSSIBLE("key_cmp() should be -1, 0 or 1");
 		}
+		if (found)
+			break;
 	} m0_tl_endfor;
 	return scan;
 }
@@ -175,8 +181,11 @@ static struct m0_db_kpair *kpair_alloc(struct m0_db_pair *pair)
 	rec = &pair->dp_rec.db_buf;
 
 	M0_CASSERT((sizeof *kpair & 07) == 0);
+	/* XXX disable_db5 */
+#ifdef __KERNEL__
 	M0_PRE((key->b_nob & 07) == 0);
 	M0_PRE((rec->b_nob & 07) == 0);
+#endif
 
 	kpair = m0_alloc(sizeof *kpair + key->b_nob + rec->b_nob);
 	if (kpair != NULL) {
@@ -186,6 +195,7 @@ static struct m0_db_kpair *kpair_alloc(struct m0_db_pair *pair)
 		kpair->dk_rec.b_addr = kpair->dk_key.b_addr + key->b_nob;
 		memcpy(kpair->dk_key.b_addr, key->b_addr, key->b_nob);
 		memcpy(kpair->dk_rec.b_addr, rec->b_addr, rec->b_nob);
+		pair_tlink_init(kpair);
 	}
 	return kpair;
 }
@@ -280,7 +290,12 @@ M0_INTERNAL int table_insert(struct m0_db_pair *pair,
 		pair_lock(pair);
 		kpair = ktable_lookup(pair, &out);
 		if (out == -ENOENT) {
-			pair_tlist_add_before(kpair, newkp);
+			if (kpair == NULL) {
+				pair_tlist_add(&pair->dp_table->t_i.tk_pair,
+					       newkp);
+			} else {
+				pair_tlist_add_before(kpair, newkp);
+			}
 			*kpair_out = newkp;
 			result = 0;
 		} else {
@@ -353,6 +368,9 @@ M0_INTERNAL int m0_db_cursor_get(struct m0_db_cursor *cursor,
 {
 	int result;
 
+	/* XXX disable_db5 */
+	cursor->c_table = pair->dp_table;
+
 	M0_PRE(cursor->c_table == pair->dp_table);
 	M0_ASSERT(ktable_invariant(pair->dp_table));
 
diff --git a/db/linux_kernel/db_impl.h b/db/linux_kernel/db_impl.h
index 138850d..4b8d8a8 100644
--- a/db/linux_kernel/db_impl.h
+++ b/db/linux_kernel/db_impl.h
@@ -66,6 +66,7 @@ struct m0_db_kpair {
 };
 
 struct m0_db_cursor_impl {
+	// struct m0_db_kpair  ck_current_;
 	struct m0_db_kpair *ck_current;
 };
 
diff --git a/mero/setup.c b/mero/setup.c
index e2acc21..244754c 100644
--- a/mero/setup.c
+++ b/mero/setup.c
@@ -1212,7 +1212,8 @@ static void cs_net_domains_fini(struct m0_mero *cctx)
 		m0_net_xprt_fini(xprts[idx]);
 }
 
-static int cs_storage_prepare(struct m0_reqh_context *rctx)
+/* static */ /* XXX disable_db5 */
+int cs_storage_prepare(struct m0_reqh_context *rctx)
 {
 	struct m0_db_tx tx;
 	int rc;
@@ -1337,6 +1338,8 @@ static int cs_request_handler_start(struct m0_reqh_context *rctx)
 
 	rctx->rc_cdom_id.id = ++cdom_id;
 
+	/* XXX disable_db5 */
+#if 0
 	/** Mkfs cob domain before using it. */
 	if (rctx->rc_prepare_storage) {
 		/*
@@ -1369,6 +1372,7 @@ static int cs_request_handler_start(struct m0_reqh_context *rctx)
 		M0_LOG(M0_ERROR, "m0_fol_init");
 		goto cleanup_mdstore;
 	}
+#endif
 
 	rc = M0_REQH_INIT(&rctx->rc_reqh,
 			  .rhia_dtm       = NULL,
@@ -1382,9 +1386,12 @@ static int cs_request_handler_start(struct m0_reqh_context *rctx)
 		return 0;
 	}
 
+	/* XXX disable_db5 */
+#if 0
 	m0_fol_fini(&rctx->rc_fol);
 cleanup_mdstore:
 	m0_mdstore_fini(&rctx->rc_mdstore);
+#endif
 cleanup_addb_stob:
 	cs_addb_storage_fini(&rctx->rc_addb_stob);
 cleanup_stob:
@@ -1446,8 +1453,11 @@ static void cs_request_handler_stop(struct m0_reqh_context *rctx)
 	M0_ASSERT(m0_reqh_state_get(reqh) == M0_REQH_ST_STOPPED);
 	cs_rpc_machines_fini(reqh);
 	m0_reqh_fini(reqh);
+	/* XXX disable_db5 */
+#if 0
 	m0_fol_fini(&rctx->rc_fol);
 	m0_mdstore_fini(&rctx->rc_mdstore);
+#endif
 	cs_storage_fini(&rctx->rc_stob);
 	cs_addb_storage_fini(&rctx->rc_addb_stob);
 	m0_dbenv_fini(&rctx->rc_db);
-- 
1.8.3.2


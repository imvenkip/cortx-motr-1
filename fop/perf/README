			REQH/FOM components performance tests

TEST DESCRIPTION
----------------

In order to demonstrate performance bottlenecks of REQH/FOM components, the
following tests are proposed:

	1. Test accessing N bytes of memory on each state transition;
	2. Test accessing N kilobytes of memory on each state transition;
	3. Test accessing N megabytes of memory on each state transition;
	4. Test taking and releasing a mutex;
	5. Test taking and releasing a fom long lock;
	6. Test calling m0_fom_block_{enter,leave}().

The 4th-6th tests use routine "touching kilobytes of memory" like it's done in
the 2nd test. Performance numbers of the 4th-6th tests should be compared with
corresponding numbers obtained with the 2nd.

BUILDING MERO
-------------

To gather appropriate performance numbers mero has to be built in a release
mode, without additional debug checks used in the development. This can be done
with the following command:

CONFIGURE_OPTS=--disable-altogether-mode\ --enable-debug\ --disable-m0-asserts\
               --enable-profiler ./scripts/m0 rebuild


RUNNING TEST
------------

- To run performance test the following command is used:
  # ./utils/ub.sh -t fom-ub

  The following output is expected:
  round  1 fom-ub[......]
	       bench: [   iter]    min    max    avg   std   sec/op   op/sec
  set:       fom-ub
	       mem-b: [      1]  10.08  10.08  10.08  0.00% 1.008e+01/9.919e-02
	      mem-kb: [      1]  10.06  10.06  10.06  0.00% 1.006e+01/9.942e-02
	      mem-mb: [      1]  10.06  10.06  10.06  0.00% 1.006e+01/9.939e-02
	       mutex: [      1]  10.08  10.08  10.08  0.00% 1.008e+01/9.918e-02
	       llock: [      1]  10.07  10.07  10.07  0.00% 1.007e+01/9.926e-02
	       block: [      1]  10.06  10.06  10.06  0.00% 1.006e+01/9.939e-02

  See lib/ub.h header for the details of numbers, listed in the table.

- To run performance test with profiling information the following command is
  used:

  - WARNING: Some tests can not be profiled properly. It's so due to the
    architecture and implementation features of used profiler. Tests which
    actively create and join threads may lead to wrong profiling results and
    even to profiler crash. The following definition has to be defined to switch
    such tests off while profiling session:
    __MERO_DISABLE_POORLY_PROFILED_TESTS__

  - Prior to gather samples, ./utils/ut.sh -t XXX has to be run at least once.
    This has to be done to prepare ELF executable ./utils/.libs/lt-ub.
    # ./utils/ut.sh

  - Profiler needs exactly this ELF to perform its job. Lt-ub needs mero modules
    to be inserted. Typically it's done inside ./utils/ut.sh, but likely they
    can be loaded much easier:
    # ./m0t1fs/linux_kernel/st/st insmod

  - To gather samples, run:
    # CPUPROFILE=/tmp/cpuprofile.log ./utils/.libs/lt-ub -t fom-ub

  - To prepare profiling report, run:
    # pprof [--pdf|--text] ./utils/.libs/lt-ub /tmp/cpuprofile.log

#! /bin/bash

#
# Convert FOP format descriptions into C data-strcture definitions.
#

OPTVAL=`getopt -o ukd:v -n 'fop2c' -- "$@"`

# Note the quotes around `$OPTVAL': they are essential!
eval set -- "$OPTVAL"

verbose=0
topdir=$(dirname $0)/..

CC=${CC:-"cc"}
CFLAGS="@CFLAGS@"
LDFLAGS="@LDFLAGS@ -rdynamic -pthread"
DEFINES="-DHAVE_CONFIG"
INC="-I$topdir -I@DB_SRC@ -I@DB_SRC@/build_unix"

#
# Enumerate all object files and libraries necessary for the binary linked
# below.
#
OBJS="$topdir/fop/rt/.libs/libc2rt.a @DB_SRC@/build_unix/libdb.a"

generate_u=0
generate_k=0

while true ;do
    case "$1" in
	-d)
	    topdir="$2"
	    shift 2
	    ;;
	-u)
	    generate_u=1
	    shift 1
	    ;;
	-k)
	    generate_k=1
	    shift 1
	    ;;
	-v)
	    verbose=$(($verbose + 1))
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    echo "Internal error!"
	    exit 1
	    ;;
    esac
done

if [ $verbose -ge 3 ] ;then
    set -x
fi

tid="$$"
fbase=/tmp/fop2c-$tid

gen_c()
{
    local where
    local topic

    where=$1
    topic=$2

    what=$where$topic
    outf=${base}_$(echo $where | tr [A-Z] [a-z])
    incl=${outf}.h
    case $topic in
	DEF)
	    outf=${outf}.h
	    ;;
	LAY)
	    outf=${outf}.c
	    ;;
    esac

    tfile=$fbase-t-$where-$topic.c

    cat > $tfile <<EOF
#include <stdio.h>
#include <assert.h>

#define __layout(x) NULL
#define FOPDEP(x)
#include "fop/fop_base.h"
#include "fop/fop_format_def.h"

EOF
    depfiles=`grep "^FOPDEP" $sfile | awk -F '"' '{print $2}'`

    if [ -n "$depfiles" ] ;then
	for ff in $depfiles; do
	    #Include the ff file containing dependency fops.
	    echo "#include \"$ff\"" >> $tfile
	done
	# Get rid of .ff suffix so as to include corresponding headers in
	# .c files.
	depfiles=`echo $depfiles | sed -e 's/.ff//g'`
    fi

    cat >> $tfile << EOF

enum todo {
	UDEF,
	KDEF,
	ULAY,
	KLAY
};

static int (*func[])(struct c2_fop_field_type *) = {
	[UDEF] = &c2_fop_comp_udef,
	[KDEF] = &c2_fop_comp_kdef,
	[ULAY] = &c2_fop_comp_ulay,
	[KLAY] = &c2_fop_comp_klay
};

EOF
    echo "static const enum todo todo = "$what";" >> $tfile
    echo "static const char what[] =\""$what"\";" >> $tfile
    echo "static const char base[] = \""$base"\";" >> $tfile
    echo "static const char BASE[] = \""$(echo $base | tr [a-z-] [A-Z_])"\";" \
         >> $tfile
    echo "static const char orig[] = \""$(basename $sfile)"\";" >> $tfile
    echo "static const char comp[] = \"fop2c\";" >> $tfile
    echo "static const char incl[] = \""$incl"\";" >> $tfile
    if [ -n "$depfiles" ]; then
	i=0
	for hdr in $depfiles; do
	    hdr=${hdr}_$(echo $where | tr [A-Z] [a-z])

	    hdr=$hdr.h
	    # The filename is added as a string to the generated DEF/LAY files.
	    echo "static const char dfiles$i[] = \""$hdr"\";" >> $tfile
	    let i=i+1
	done
    fi
    echo >> $tfile
    cat $sfile >> $tfile
    cat >> $tfile <<EOF

static struct c2_fop_type_format *fmt[] = {
EOF
    grep '^DEF' $sfile | \
	sed -e 's/^DEF(\([^,]*\),.*$/        \&\1_tfmt,/g' >> $tfile
    cat >> $tfile <<EOF
        NULL
};

EOF
    # Gather fop definitions from dependency .ff files.
    if [ -n "$depfiles" ]; then
	cat >> $tfile <<EOF
static struct c2_fop_type_format *fmt_deps[] = {
EOF
	i=0
	for ff in $depfiles; do
	    ff=$topdir/$ff
	    ff=`echo $ff | sed -e 's/$/.ff/g'`
	    grep '^DEF' $ff | \
		sed -e 's/^DEF(\([^,]*\),.*$/        \&\1_tfmt,/g' >> $tfile
	    let i=i+1
	done
	cat >> $tfile <<EOF
	NULL
};
EOF
    fi

    cat >> $tfile <<EOF

void prefix(void)
{
	printf("/* -*- C -*- */\n");
	if (todo != ULAY && todo != KLAY) {
		printf("#ifndef __COLIBRI_%s_%s_H__\n", BASE, what);
		printf("#define __COLIBRI_%s_%s_H__\n", BASE, what);
	}
	printf("\n");
	printf("/*\n");
	printf(" * WARNING: this file is automatically generated\n");
	printf(" * from %s by %s. Do not edit.\n", orig, comp);
	printf(" */\n");
	printf("\n");
	printf("#include \"lib/cdefs.h\"\n");
	printf("#include \"fop/fop_base.h\"\n");
	if (todo == UDEF)
		printf("#include <rpc/rpc.h>\n");
EOF
	# Include necessary header files for dependency .ff files.
	if [ -n "$depfiles" ] ;then
	    i=0
	    for ff in $depfiles; do
		cat >> $tfile << EOF
		if (todo == UDEF || todo == KDEF)
			printf("#include \"%s\"\n", dfiles$i);
EOF
		let i=i+1
	    done
	fi

	cat >> $tfile << EOF

	if (todo == ULAY || todo == KLAY)
		printf("#include \"%s\"\n", incl);
	if (todo == ULAY)
		printf("#include \"net/usunrpc/usunrpc.h\"\n");
	if (todo == KLAY)
		printf("#include <linux/module.h>\n");
	printf("\n");
}

void suffix()
{
	printf("\n");
	if (todo != ULAY && todo != KLAY) {
		printf("/* __COLIBRI_%s_%s_H__ */\n", BASE, what);
		printf("#endif\n");
	}
	printf("\n");
	printf("/* \n");
	printf(" *  Local variables:\n");
	printf(" *  c-indentation-style: \"K&R\"\n");
	printf(" *  c-basic-offset: 8\n");
	printf(" *  tab-width: 8\n");
	printf(" *  fill-column: 80\n");
	printf(" *  scroll-step: 1\n");
	printf(" *  End:\n");
	printf(" */\n");
}

int main(int argc, char **argv)
{
	int result;
	struct c2_fop_type_format **f;

	result = c2_fops_init();
	assert(result == 0);
	c2_fop_comp_init();

EOF
	# Parse all dependency fops first, so that dependent fops
	# will parse without hicups.
	if [ -n "$depfiles" ] ;then
	    cat >> $tfile << EOF
	for (f = fmt_deps; *f != NULL; ++f) {
		result = c2_fop_type_format_parse(*f);
		assert(result == 0);
	}
EOF
	fi

	cat >> $tfile << EOF

	for (f = fmt; *f != NULL; ++f) {
		result = c2_fop_type_format_parse(*f);
		assert(result == 0);
	}

	prefix();
	for (f = fmt; *f != NULL; ++f)
		func[todo]((*f)->ftf_out);
	suffix();
	c2_fop_comp_fini();
	c2_fops_fini();

	return 0;
}
EOF

    ofile=$fbase-o-$what
    $CC $INC $DEFINES $CFLAGS $LDFLAGS -o $ofile $tfile $OBJS || exit 1
    $ofile > $outf
}

for sfile in "$*" ;do
    base=$(basename $sfile .ff)
    orig=$(basename $sfile)

    if [ $generate_u -eq 1 ] ;then
	gen_c U DEF
	gen_c U LAY
    fi
    if [ $generate_k -eq 1 ] ;then
	gen_c K DEF
	gen_c K LAY
    fi

done

if [ $verbose -eq 0 ] ;then
    rm -fr $fbase*
    rm -fr fop2c-$tid*
fi


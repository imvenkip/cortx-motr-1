#! /bin/bash

#
# Convert FOP format descriptions into C data-strcture definitions.
#

OPTVAL=`getopt -o ukd:v -n 'fop2c' -- "$@"`

# Note the quotes around `$OPTVAL': they are essential!
eval set -- "$OPTVAL"

verbose=0
topdir=$(dirname $0)/..

CC=${CC:-"cc"}
CFLAGS=${CFLAGS:-"-Wall -Werror -g"}
LDFLAGS=${LDFLAGS:-"-rdynamic"}
DEFINES="-DHAVE_CONFIG"
INC="-I$topdir"
OBJS="$topdir/fop/fop.o $topdir/fop/fop_format.o $topdir/fop/fop_format_c.o $topdir/lib/.libs/libc2.a"

generate_u=0
generate_k=0

while true ;do
    case "$1" in
	-d)
	    topdir="$2"
	    shift 2
	    ;;
	-u)
	    generate_u=1
	    shift 1
	    ;;
	-k)
	    generate_k=1
	    shift 1
	    ;;
	-v)
	    verbose=$(($verbose + 1))
	    shift
	    ;;
	--) 
	    shift 
	    break 
	    ;;
	*) 
	    echo "Internal error!" 
	    exit 1 
	    ;;
    esac
done

if [ $verbose -ge 3 ] ;then
    set -x
fi

tid="$$"
fbase=/tmp/fop2c-$tid

gen_c()
{
    local where
    local topic

    where=$1
    topic=$2

    case $where in
	U)
	    case $topic in
		DEF)
		    what=CDEF
		    func=cdef
		    outf=${base}.h
		    ;;
		MEMLAYOUT)
		    what=MEMLAYOUT
		    func=memlayout
		    outf=${base}.c
		    incl=${base}.h
		    ;;
	    esac
	    ;;
	K)
	    case $topic in
		DEF)
		    what=KDEF
		    func=kdef
		    outf=${base}_k.h
		    ;;
		MEMLAYOUT)
		    what=MEMLAYOUT
		    func=memlayout
		    outf=${base}_k.c
		    incl=${base}_k.h
		    ;;
	    esac
	    ;;
    esac

    tfile=$fbase-t-$where-$topic.c

    cat > $tfile <<EOF
#include <stdio.h>
#include <assert.h>

#include "fop/fop_format.h"
#include "fop/fop_format_def.h"

enum todo {
	CDEF,
	KDEF,
	MEMLAYOUT
};

EOF
    echo "static const enum todo todo = "$what";" >> $tfile
    echo "static const char what[] =\""$what"\";" >> $tfile
    echo "static const char base[] = \""$base"\";" >> $tfile
    echo "static const char BASE[] = \""$(echo $base | tr [a-z] [A-Z])"\";" \
         >> $tfile
    echo "static const char orig[] = \""$(basename $sfile)"\";" >> $tfile
    echo "static const char comp[] = \"fop2c\";" >> $tfile
    echo "static const char incl[] = \""$incl"\";" >> $tfile
    echo >> $tfile
    cat $sfile >> $tfile
    cat >> $tfile <<EOF

static struct c2_fop_type_format *fmt[] = {
EOF
    grep '^DEF' $sfile | \
	sed -e 's/^DEF(\([^,]*\),.*$/        \&\1,/g' >> $tfile
    cat >> $tfile <<EOF
        NULL
};

void prefix(void)
{
	printf("/* -*- C -*- */\n");
	if (todo != MEMLAYOUT) {
		printf("#ifndef __COLIBRI_%s_%s_H__\n", BASE, what);
		printf("#define __COLIBRI_%s_%s_H__\n", BASE, what);
	}
	printf("\n");
	printf("/*\n");
	printf(" * WARNING: this file is automatically generated\n");
	printf(" * from %s by %s. Do not edit.\n", orig, comp);
	printf(" */\n");
	printf("\n");
	printf("#include \"lib/cdefs.h\"\n");
	printf("#include \"fop/fop_format.h\"\n");
	if (todo == MEMLAYOUT)
		printf("#include \"%s\"\n", incl);
	printf("\n");
EOF
    cat >> $tfile <<EOF
	printf("\n");
}

void suffix()
{
	printf("\n");
	if (todo != MEMLAYOUT) {
		printf("/* __COLIBRI_%s_%s_H__ */\n", BASE, what);
		printf("#endif\n");
	}
	printf("\n");
	printf("/* \n");
	printf(" *  Local variables:\n");
	printf(" *  c-indentation-style: \"K&R\"\n");
	printf(" *  c-basic-offset: 8\n");
	printf(" *  tab-width: 8\n");
	printf(" *  fill-column: 80\n");
	printf(" *  scroll-step: 1\n");
	printf(" *  End:\n");
	printf(" */\n");
}

int main(int argc, char **argv)
{
	int result;
	struct c2_fop_type_format **f;

	for (f = fmt; *f != NULL; ++f) {
		result = c2_fop_type_format_parse(*f);
		assert(result == 0);
	}

EOF
    echo '	prefix();' >> $tfile
    echo '	for (f = fmt; *f != NULL; ++f) {'                    >> $tfile
    echo '		c2_fop_type_format_'$func'((*f)->ftf_out);'  >> $tfile
    echo '	}'                                                   >> $tfile
    echo '	suffix();'                                           >> $tfile
    echo ''                                                          >> $tfile
    echo '	return 0;'                                           >> $tfile
    echo '}'                                                         >> $tfile

    ofile=$fbase-o-$what
    $CC $INC $DEFINES $CFLAGS $LDFLAGS $OBJS -o $ofile $tfile || exit 1
    $ofile > $outf
}

for sfile in "$*" ;do
    base=$(basename $sfile .ff)
    orig=$(basename $sfile)

    if [ $generate_u -eq 1 ] ;then
	gen_c U DEF
	gen_c U MEMLAYOUT
    else
	gen_c K DEF
	gen_c K MEMLAYOUT
    fi

done

if [ $verbose -eq 0 ] ;then
    rm $fbase*
fi


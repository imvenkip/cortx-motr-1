#! /bin/bash

#
# Convert FOP format descriptions into C data-strcture definitions.
#

OPTVAL=`getopt -o ukd:v -n 'fop2c' -- "$@"`

# Note the quotes around `$OPTVAL': they are essential!
eval set -- "$OPTVAL"

verbose=0
topdir=$(dirname $0)/..

CC=${CC:-"cc"}
CFLAGS=${CFLAGS:-"-Wall -Werror -g"}
LDFLAGS=${LDFLAGS:-"-rdynamic"}
DEFINES="-DHAVE_CONFIG"
INC="-I$topdir"
OBJS="$topdir/fop/fop.o $topdir/fop/fop_format.o $topdir/fop/fop_format_c.o $topdir/lib/.libs/libc2.a"

generate_uxdr=0
generate_kxdr=0

while true ;do
    case "$1" in
	-d)
	    topdir="$2"
	    shift 2
	    ;;
	-u)
	    generate_uxdr=1
	    shift 1
	    ;;
	-k)
	    generate_kxdr=1
	    shift 1
	    ;;
	-v)
	    verbose=$(($verbose + 1))
	    shift
	    ;;
	--) 
	    shift 
	    break 
	    ;;
	*) 
	    echo "Internal error!" 
	    exit 1 
	    ;;
    esac
done

if [ $verbose -ge 3 ] ;then
    set -x
fi

tid="$$"
tfile=/tmp/fop2c-t$tid.c
ofile=/tmp/fop2c-o$tid

gen_c()
{
    local section
    local what

    section=$1
    what=$2

    cat > $tfile <<EOF
#include <stdio.h>
#include <assert.h>

#include "fop/fop_format.h"

#define DEF C2_FOP_FORMAT
#define _  C2_FOP_FIELD
#define _case C2_FOP_FIELD_TAG

#define U32 C2_FOP_TYPE_FORMAT_U32
#define U64 C2_FOP_TYPE_FORMAT_U64
#define BYTE C2_FOP_TYPE_FORMAT_BYTE
#define VOID C2_FOP_TYPE_FORMAT_VOID

#define RECORD FFA_RECORD
#define UNION FFA_UNION
#define SEQUENCE FFA_SEQUENCE
#define TYPEDEF FFA_TYPEDEF

EOF
    cat $sfile >> $tfile
    cat >> $tfile <<EOF

static struct c2_fop_type_format *fmt[] = {
EOF
    grep '^DEF' $sfile | \
	sed -e 's/^DEF(\([^,]*\),.*$/        \&\1,/g' >> $tfile
    cat >> $tfile <<EOF
        NULL
};

void prefix(const char *base, const char *orig, const char *prog,
	    const char *section)
{
	printf("/* -*- C -*- */\n");
	printf("#ifndef __COLIBRI_%s_%s__\n", base, section);
	printf("#define __COLIBRI_%s_%s__\n", base, section);
	printf("\n");
	printf("/*\n");
	printf(" * WARNING: this file is automatically generated\n");
	printf(" * from %s by %s. Do not edit.\n", orig, prog);
	printf(" */\n");
	printf("\n");
	printf("#include \"lib/cdefs.h\"\n");
EOF
    while read ;do
	echo '	printf("'$REPLY'\n");' >> $tfile
    done
    cat >> $tfile <<EOF
	printf("\n");
}

void suffix(const char *base, const char *section)
{
	printf("\n");
	printf("/* __COLIBRI_%s_%s__ */\n", base, section);
	printf("#endif\n");
	printf("\n");
	printf("/* \n");
	printf(" *  Local variables:\n");
	printf(" *  c-indentation-style: \"K&R\"\n");
	printf(" *  c-basic-offset: 8\n");
	printf(" *  tab-width: 8\n");
	printf(" *  fill-column: 80\n");
	printf(" *  scroll-step: 1\n");
	printf(" *  End:\n");
	printf(" */\n");
}

int main(int argc, char **argv)
{
	int result;
	struct c2_fop_type_format **f;

	for (f = fmt; *f != NULL; ++f) {
		result = c2_fop_type_format_parse(*f);
		assert(result == 0);
	}

EOF
    echo '	prefix(argv[1], argv[2], argv[3], "'$section'");'    >> $tfile
    echo '	for (f = fmt; *f != NULL; ++f) {'                    >> $tfile
    echo '		c2_fop_type_format_'$what'((*f)->ftf_out);'  >> $tfile
    echo '	}'                                                   >> $tfile
    echo '	suffix(argv[1], "'$section'");'                      >> $tfile
    echo ''                                                          >> $tfile
    echo '	return 0;'                                           >> $tfile
    echo '}'                                                         >> $tfile
}

for sfile in "$*" ;do
    s=$(basename $sfile .ff)
    base=$(echo $s | tr [a-z] [A-Z])
    orig=$(basename $sfile)

    COMPILE="$CC $INC $DEFINES $CFLAGS $LDFLAGS $tfile $OBJS -o $ofile"

    if [ $verbose -ge 1 ] ;then
	echo $COMPILE
    fi

    if [ $generate_uxdr -eq 1 ] ;then
	echo | gen_c DEF_H cdef
	$COMPILE      || exit 1
	$ofile $base $orig fop2c  > ${s}.h

	(
	    echo '#include \\"'${s}.h'\\"'
	    echo "#include <rpc/rpc.h>"
	) | gen_c UXDR_H uxdr_h
	$COMPILE      || exit 1
	$ofile $base $orig fop2c > ${s}_uxdr.h

	(
	    echo '#include \\"'${s}_uxdr.h'\\"'
	) | gen_c UXDR_C uxdr_c
	$COMPILE      || exit 1
	$ofile $base $orig fop2c > ${s}_uxdr.c
    fi

    if [ $generate_kxdr -eq 1 ] ;then
	(
	    echo 'struct page;'
	) | gen_c KDEF_H kdef
	$COMPILE      || exit 1
	$ofile $base $orig fop2c  > ${s}_k.h

	(
	    echo
	) | gen_c KXDR_H kxdr_h
	$COMPILE      || exit 1
	$ofile $base $orig fop2c > ${s}_kxdr.h

	(
	    echo '#include \\"'${s}_kxdr.h'\\"'
	) | gen_c KXDR_C kxdr_c
	$COMPILE      || exit 1
	$ofile $base $orig fop2c > ${s}_kxdr.c
    fi

done
if [ $verbose -eq 0 ] ;then
    rm $tfile
fi


/* -*- C -*- */

/*
 * COPYRIGHT 2011 XYRATEX TECHNOLOGY LIMITED
 *
 * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
 * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
 * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
 * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
 * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
 * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
 * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
 *
 * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
 * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
 * http://www.xyratex.com/contact
 *
 * Original author: Nikita Danilov <nikita_danilov@xyratex.com>
 * Original creation date: 06/24/2010
 */

/**
   @addtogroup fop
   @{
 */

/** @file test_format.ff
 *
 * <b>fop format description and compilation</b>
 *
 * This is an example of a fop format definition file.
 *
 * A fop format definition is, technically, a fragment of a valid C language
 * source code. A fop format compiler (fop2c) adds certain macro and function
 * definitions to a fop format description to produce a compilable program. This
 * program, when run with certain arguments, outputs other C (or potentially not
 * C) source code, containing
 *
 *     @li definitions of C data types matching fop format description;
 *
 *     @li declaration of user level sunrpc xdr functions;
 *
 *     @li definitions of user level sunrpc xdr functions;
 *
 *     @li the same for Linux kernel xdr functions.
 *
 */

/**
   @def DEF(typename, aggr, field0, field1, ...)

   Introduces a "fop type" which is either a description of fop format or a type
   used by other fop types.

   @param typename - a name of the type. Must be a valid C language identifier.

   @param aggr - an aggregation structure of this type, see below.

   @param field0 - a field description, introduced by _() or _case() macro.

   Aggregation structure can be one of the following:

   @li RECORD. This defines a "record" fop type, similar to a C struct
   data-types and "structures" of ONC XDR (see
   http://tools.ietf.org/html/rfc4506#section-4.14). Each instance of this type
   has a collection of fields specified in this call to DEF().

   @li UNION. This defines a "discriminated union" fop type, similar to a
   "discriminated union" of ONC XDR (see
   http://tools.ietf.org/html/rfc4506#section-4.15).

   @li SEQUENCE. This defines a variable sized sequence of elements, similar to
   ONC XDR "variable-length array" (see
   http://tools.ietf.org/html/rfc4506#section-4.13). Note that elements of a
   sequence can have different sizes.

   @li TYPEDEF. This defines another name for an already existing type.

   DEF() macro allows one to build complex fop types, starting from pre-defined
   "primitive types". A primitive type is one of VOID, BYTE, U32 or U64.

   <b>Constraints</b>

   There are some limitations on possible combination of fields and aggregation
   types:

   @li fields in a given type definition must all have different names.

   @li Fields introduced with _case() are called "tagged". Fields introduced
   with _() are called "untagged". Tagged fields are only permitted in UNION
   type definitions.

   @li Specifically, a UNION type definition must have at least 2 fields. First
   one must be untagged and the rest must be tagged. All tagged fields in a
   given UNION type definition must have different tags. Untagged field (called
   a "discriminant", always first) must have U32 type. An instance of a UNION
   fop type contains a discriminant and a value of UNION type field whose tag is
   equal to the discriminant value.

   @li TYPEDEF and SEQUENCE type definitions must have exactly one field.

   @li fields of primitive BYTE type can appear only in SEQUENCE type
   definitions.

   @see http://tools.ietf.org/html/rfc4506
   @see _()
   @see _case()
   @see VOID
   @see BYTE
   @see U32
   @see U64
 */

/**
   @def _(name, type)

   Introduces a field in a fop type definition.

   @param name - a field name that must be unique within a given type
   definition.

   @param type - a field type. This must be either a primitive type of an
   already defined fop type.
 */

/**
   @def _case(tag, name, type)

   Introduces a tagged field within a discriminated union type definition.

   @param tag - a numerical constant value.

   @param name - a field name.

   @param type - a field type.
 */

/**
   @def VOID

   Empty type. Useful mostly as a branch in UNION type declaration.
 */

/**
   @def BYTE

   Octet of data. Can be used only as a type of sequence element.
 */

/**
   @def U32

   Four octetsful of data.
 */

/**
   @def U64

   Eight octetsful of data.
 */

/**
   Fid format.

   Fid is defined as a record with two U64 fields.
 */
DEF(fid, RECORD,
    _(f_seq, U64),
    _(f_oid, U64));

/**
   "Optional fid".

   This defines a discriminated union. If "b_present" field value is 1, optfid
   contains b_fid field of type fid (defined above). Otherwise it contains
   nothing (except to "b_present").
 */
DEF(optfid, UNION,
    _(b_present, U32),
    _case(1, b_fid,     fid),
    _case(0, b_none,    VOID));

/**
   Defines an array of fids.

   At the C data-type level, a struct type corresponds to this definition:
   @code
   struct fid_array {
           uint32_t    fa_count;
	   struct fid *fa_fid;
   };
   @endcode

   fa_count field stores number of elements in the sequence.
 */
DEF(fid_array, SEQUENCE,
    _(fa_nr,  U32),
    _(fa_fid, fid));

/**
   Defines fid_typedef as another name for optfid.

   The name of (the only) field in this definition is ignored and can be
   omitted.
 */
/* DEF(fid_typedef, TYPEDEF,
    _(, optfid)); */

DEF(c2_stob_io_seg, RECORD,
    _(f_offset, U64),
    _(f_count, U32));

DEF(c2_stob_io_buf, SEQUENCE,
    _(csib_count,  U32),
    _(csib_value, BYTE));

DEF(c2_stob_io_vec, SEQUENCE,
    _(csiv_count,  U32),
    _(csiv_seg, c2_stob_io_seg));

DEF(c2_stob_io_write_fop, RECORD,
    _(siw_object, fid),
    _(siw_vec, c2_stob_io_vec),
    _(siw_buf, c2_stob_io_buf));

/** @} end of fop group */

/*
 *  Local variables:
 *  c-indentation-style: "K&R"
 *  c-basic-offset: 8
 *  tab-width: 8
 *  fill-column: 80
 *  scroll-step: 1
 *  End:
 */

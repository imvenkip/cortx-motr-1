description "Mero mkfs service"
author "Xyratex Technology Limited - http://www.xyratex.com/contact"

# global variables, which can be overriden in /etc/sysconfig/mero
env MERO_GENDERS_CONF=/etc/mero/genders
env MERO_M0D_OPTS=""

# service local variables
env user_config=/etc/sysconfig/mero
env service_funcs=/usr/libexec/mero/mero-service.functions


pre-start script
    exec 1>/var/log/mero-mkfs.log 2>&1

    # TODO: just for debugging, remove when done
    #set -x

    source $service_funcs

    [ -r $user_config ] && source $user_config

    [ -n "$MERO_M0D_DEBUGGER" ] && export M0_DEBUGGER=$MERO_M0D_DEBUGGER

    segment_size=$(m0_genders_value_of m0_be_segment_size)
    be_opts=${segment_size:+ -z $segment_size}
    node_uuid=$(m0_genders_value_of m0_uuid)
    m0mkfs=$(m0_path_to m0mkfs)

    # enable core dumps
    ulimit -c unlimited

    services=$(m0_get_services)
    for service in $services ; do
        stob_type='-T ad'
        stob_opts='-D db -S stobs -A linuxstob:addb-stobs'
        service_dir=$(m0_get_m0d_data_dir_for $service)
        if [ x$MERO_M0D_REMOVE_SERVICE_DIR = xtrue ] && [ -d "$service_dir" ] ; then
            rm -rf "$service_dir"
        fi
        [ ! -d "$service_dir" ] && mkdir -p "$service_dir"
        cd $service_dir

        case "$service" in
            confd|mds|rms) stob_type='-T linux'
                ;;

            singlenode|ios*) if [[ -r /etc/mero/disks-$service.conf ]]; then
                                stob_opts+=" -d /etc/mero/disks-$service.conf"
                             else
                                stob_opts+=' -U'
                             fi
                ;;

            *) m0_exit "Failed to start unknown service '$service'," \
                       " available services are 'mds' and 'ios*'"
                ;;
        esac

        # show actual exec commands in log file
        set -x
        $m0mkfs -u $node_uuid $stob_type $stob_opts $be_opts
        set +x
    done
end script

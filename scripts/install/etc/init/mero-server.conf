description "Mero server service"
author "Xyratex Technology Limited - http://www.xyratex.com/contact"

#usage 'SERVICE=<mds|ios\d\d> \
#       [EP=<this service's endpoint>]'

instance ${SERVICE}

# delay between SIGTERM and SIGKILL, when stopping the service
kill timeout 30

# global variables, which can be overriden in /etc/sysconfig/mero
env MERO_GENDERS_CONF=/etc/mero/genders
env MERO_M0D_OPTS='-r -p -T ad -D db -S stobs -A stobs'

# service local variables
env user_config=/etc/sysconfig/mero
env service_funcs=/usr/lib64/mero/mero-service.functions


script
    # TODO: just for debugging, remove when done
    #exec 1>/var/log/mero-server-$SERVICE.log 2>&1
    #set -x

    source $service_funcs

    [ -r $user_config ] && source $user_config

    [ -n "$MERO_M0D_DEBUGGER" ] && export M0_DEBUGGER=$MERO_M0D_DEBUGGER

    service_dir=$(m0_get_m0d_data_dir_for $SERVICE)
    [ ! -d "$service_dir" ] && mkdir -p "$service_dir"
    cd $service_dir

    params=$(m0_get_core_params $service_dir)
    case "$SERVICE" in
        mds) m0d_services=$params
            ;;

        ios*) m0d_disks="-d /etc/mero/disks-$SERVICE.conf"
              m0d_services='-s addb -s ioservice -s sns_repair -s sns_rebalance'
            ;;

        singlenode)
              m0d_disks="-d /etc/mero/disks-$SERVICE.conf"
              m0d_services="$params -s ioservice -s sns_repair -s sns_rebalance"
            ;;

        *) m0_exit "Failed to start unknown service '$SERVICE'," \
                   " available services are 'mds' and 'ios*'"
            ;;
    esac

    m0d=$(m0_path_to m0d)

    MERO_M0D_OPTS="-w $(m0_genders_value_of m0_pool_width) \
                   -m $(m0_genders_value_of m0_max_rpc_msg_size) \
                   -q $(m0_genders_value_of m0_min_rpc_recvq_len) \
                   $MERO_M0D_OPTS"

    mds_ep=${MERO_MDS_EP:-$(m0_get_mds_ep)}

    for ep in $(m0_get_global_ios_eps); do
        ios_ep_opts="$ios_ep_opts -i $ep"
    done


    # temporary workaround to collect m0d logs
    exec 1>/var/log/mero-server-$SERVICE.log 2>&1
    set -x

    # for now 'stats' service runs on the same server as MDS, so EP is the same
    # (-R option)
    exec $m0d $MERO_M0D_OPTS $m0d_disks $m0d_services \
              -e $EP -G $mds_ep -R $mds_ep $ios_ep_opts $MERO_M0D_EXTRA_OPTS
end script


post-start script
    # TODO: just for debugging, remove when done
    exec 1>>/var/log/mero-server-$SERVICE.log 2>&1
    set -x

    source $service_funcs

    [ -r $user_config ] && source $user_config

    if [ x$MERO_TRACED_M0D = xyes ] ; then
        start mero-trace TARGET=server-$SERVICE
    fi

    # wait when m0d finishes its initialization
    m0_log "waiting for $SERVICE service to start up..."
    sleep 15 # FIXME: workaround for old upstart version used in RHEL6
    set +x   # we do not want grep to trigger on its own debug line
    while ! grep -q 'Press CTRL+C to quit' /var/log/mero-server-$SERVICE.log ; do
        m0_log "debug: waiting for $SERVICE, sleep 5 sec"
        sleep 5
    done
    m0_log "$SERVICE service is up"
end script


post-stop script
    # TODO: just for debugging, remove when done
    exec 1>>/var/log/mero-server-$SERVICE.log 2>&1
    set -x

    [ -r $user_config ] && source $user_config

    if [ x$MERO_TRACED_M0D = xyes ] ; then
        stop mero-trace TARGET=server-$SERVICE
    fi
end script

description "Mero server service"
author "Xyratex Technology Limited - http://www.xyratex.com/contact"

#usage 'SERVICE=<confd|mds|ios\d\d> \
#       [EP=<this service's endpoint>]'

instance ${SERVICE}

# delay between SIGTERM and SIGKILL, when stopping the service
kill timeout 30

# global variables, which can be overriden in /etc/sysconfig/mero
env MERO_GENDERS_CONF=/etc/mero/genders
env MERO_M0D_OPTS=""

# service local variables
env user_config=/etc/sysconfig/mero
env service_funcs=/usr/libexec/mero/mero-service.functions


script
    exec 1>/var/log/mero-server-$SERVICE.log 2>&1

    # TODO: just for debugging, remove when done
    #set -x

    source $service_funcs

    [ -r $user_config ] && source $user_config

    [ -n "$MERO_M0D_DEBUGGER" ] && export M0_DEBUGGER=$MERO_M0D_DEBUGGER

    service_dir=$(m0_get_m0d_data_dir_for $SERVICE)
    if [ x$MERO_M0D_REMOVE_SERVICE_DIR = xtrue ] && [ -d "$service_dir" ] ; then
        rm -rf "$service_dir"
    fi
    [ ! -d "$service_dir" ] && mkdir -p "$service_dir"
    cd $service_dir

    stob_type='-T ad'
    stob_opts='-D db -S stobs -A linuxstob:addb-stobs'

    params=$(m0_get_core_params $service_dir)
    case "$SERVICE" in
        mds)  stob_type='-T linux'
              m0d_services="-s mdservice -s stats $params"
            ;;

        ios*) stob_opts+=" -d /etc/mero/disks-$SERVICE.conf"
              m0d_services="-s ioservice -s sns_repair -s sns_rebalance $params"
            ;;

        confd) stob_type='-T linux'
               m0d_services="-s confd -c conf.xc $params"
            ;;

        singlenode)
              stob_opts+=" -d /etc/mero/disks-$SERVICE.conf"
              m0d_services="-s mdservice -s stats -s ioservice \
                            -s sns_repair -s sns_rebalance $params"
            ;;

        *) m0_exit "Failed to start unknown service '$SERVICE'," \
                   " available services are 'mds' and 'ios*'"
            ;;
    esac

    m0d=$(m0_path_to m0d)

    if [ $SERVICE != "confd" ]; then
        confd_ep=${MERO_CONFD_EP:-$(m0_get_confd_ep)}
        MERO_M0D_OPTS+=" -P $m0_prof_opt -C ${confd_ep#lnet:}"
    fi

    pool_width=$(m0_genders_value_of m0_pool_width)
    MERO_M0D_OPTS+=" -w $pool_width \
                     -m $(m0_genders_value_of m0_max_rpc_msg_size) \
                     -q $(m0_genders_value_of m0_min_rpc_recvq_len)"

    # enable core dumps
    ulimit -c unlimited

    # show actual exec commands in log file
    set -x

    exec $m0d $MERO_M0D_OPTS $stob_type $stob_opts $m0d_services \
              -e $EP $MERO_M0D_EXTRA_OPTS
end script


post-start script
    exec 1>>/var/log/mero-server-$SERVICE.log 2>&1

    # TODO: just for debugging, remove when done
    #set -x

    source $service_funcs

    [ -r $user_config ] && source $user_config

    # wait when m0d finishes its initialization
    m0_log "waiting for $SERVICE service to start up..."
    sleep 25 # FIXME: workaround for old upstart version used in RHEL6

    if [ x$MERO_TRACED_M0D = xyes ] ; then
        start mero-trace TARGET=server-$SERVICE
    fi

    set +x   # we do not want grep to trigger on its own debug line
    while ! grep -q 'Press CTRL+C to quit' /var/log/mero-server-$SERVICE.log ; do
        m0_log "debug: waiting for $SERVICE, sleep 5 sec"
        sleep 5
    done
    m0_log "$SERVICE service is up"
end script


post-stop script
    # TODO: just for debugging, remove when done
    exec 1>>/var/log/mero-server-$SERVICE.log 2>&1
    set -x

    [ -r $user_config ] && source $user_config

    if [ x$MERO_TRACED_M0D = xyes ] ; then
        stop mero-trace TARGET=server-$SERVICE
    fi
end script

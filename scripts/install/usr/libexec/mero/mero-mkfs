#!/bin/bash

# exit immediately if one the commands exits with a non-zero status
set -e

# constants
readonly PROG_NAME=$(basename $0)

# global variables, which can be overriden in /etc/sysconfig/mero
MERO_GENDERS_CONF=/etc/mero/genders

# service local variables
mero_exec_dir=/usr/libexec/mero
user_config=/etc/sysconfig/mero
service_funcs=$mero_exec_dir/mero-service.functions


m0_mkfs()
{
    local service=$1

    [[ -n $service ]] || m0_exit "usage: $PROG_NAME <SERVICE>"

    local segment_size=$(m0_genders_value_of m0_be_segment_size)
    local be_opts=${segment_size:+ -z $segment_size}
    local node_uuid=$(m0_genders_value_of m0_uuid)

    $mero_exec_dir/mero-server $service m0mkfs "-F -u $node_uuid $be_opts"
}

source $service_funcs

[[ -r $user_config ]] && source $user_config

if [[ -n $1 ]] ; then
    m0_mkfs $1
else
    confd_is_started=false
    services=$(m0_get_services | sed 's/confd//')
    env_file='/var/mero/env.sh'

    # check if there is a 'confd' service, we need to start it first,
    # but only if there are other services on this node which require mkfs
    if [[ $services != $(m0_get_services) ]] ; then
        systemctl start mero-mkfs@confd.service
        if [[ -n $services ]] ; then
            echo "MERO_CONFD_LOCAL_EP=$(m0_get_lnet_nid):12345:36:174" > $env_file
            systemctl start mero-server-confd.service
            confd_is_started=true
        fi
    fi

    for s in $services; do
        systemctl start mero-mkfs@${s}.service
    done

    if $confd_is_started ; then
        systemctl stop mero-server-confd.service
        rm $env_file
        if systemctl -q is-active mero-trace@confd.service ; then
            systemctl stop mero-trace@confd.service
        fi
    fi

    if systemctl -q is-active mero-kernel.service ; then
        systemctl stop mero-kernel.service
    fi
fi

#!/bin/sh
set -e

### --------------------------------------------------------------------
### Mero helper script
###
### Installation:
###     ln -s /path/to/mero/core/scripts/m0 ~/bin/m0
###
### Type `m0 help' for usage.
### --------------------------------------------------------------------

RUNDIR=$HOME/XXX  # CAUTION! This directory will be removed by superuser.
PROG="${0##*/}"
SRC="$(readlink -f $0)"
SRC="${SRC%/*/*}"

SUDO='sudo -E'

clean() {
    cd "$SRC"
    make distclean $MAKE_OPTS || true
    [ "$1" = '-f' ] && git clean -fdx || true
}

build() {
    autoreconf -ifs
    ./configure $CONFIGURE_OPTS
    make $MAKE_OPTS
}

_reset() {
    $SUDO rm -rf "$RUNDIR"  # Ouch!
    mkdir "$RUNDIR"
    cd "$RUNDIR"
}

run_ut()  { _reset; $SUDO "$SRC/utils/ut.sh" "$@"; }

run_kut() {
    _reset
    echo 'Running kernel UT (this may take a while) ...'
    $SUDO "$SRC/utils/linux_kernel/ut.sh"
}

run_st() {
    _reset
    $SUDO "$SRC/m0t1fs/linux_kernel/st/st"
    $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_test.sh"
}

dist_check() {
    local DIST=mero-0.1.0

    ## `make dist' calls `cp -a', which will fail if $SRC is on NFS.
    ## That is why we create archive directory in /tmp instead of $SRC.
    local DISTDIR=/tmp/$DIST
    local DISTFILE=$DISTDIR.tar.gz

    cd "$SRC"
    [ -f Makefile ] || {
	echo "You need to \`$PROG rebuild' first." >&2
	exit 1
    }

    make dist distdir=$DISTDIR $MAKE_OPTS

    cd ..
    ## Don't preserve files' ownership (if $SRC/.. is on NFS, it will fail).
    ## And strip leading "tmp/" part.
    tar --no-same-owner --strip-components=1 -xzf $DISTFILE

    cd $DIST
    build
    cd -
    rm -r $DIST

    [ "$1" = '-a' ] || rm $DISTFILE
}

check_everything() {
    for cmd in clean build dist_check run_ut run_kut run_st; do
	echo "----- $cmd -----" >&2
	$cmd
    done
}

help() {
    [ $1 -eq 0 ] && _usage || _usage >&2
    exit $1
}

_usage() {
    cat <<EOF
Usage: $PROG COMMAND [OPTION]...

Commands:
    rebuild             Clean and build the whole Mero anew.

    run-ut [OPTION]...  Run user-space unit tests.
                        OPTIONs are passed to utils/ut.sh.

    run-kut             Run kernel unit tests.

    run-st              Run system tests.

    run-all             Run unit and system tests.

    dist-check [-a]     Create and validate Mero distribution archive.
                        The resulting archive file will be deleted,
                        unless '-a' option is used.

    check-everything  = (rebuild + dist-check + run-all) * 2
                        Please run this command before landing.
                        .
                        '* 2' means that the command is being run two
                        times; the second time with './configure
                        --disable-m0-asserts'.

    clean [-f]          Call 'make distclean' in M0 sources directory.
                        '-f' will also remove untracked files and
                        directories (i.e. those not added to the git
                        repository).
                        *CAUTION*: You do not want to use '-f' option if
                        there are any untracked files you care about.

    help    Show this help and exit.

Environment variables:
    CONFIGURE_OPTS      Extra options for './configure' command.
    MAKE_OPTS           Extra options for 'make' command.

M0 sources: $SRC
UT output:  $RUNDIR
EOF
}

case "$1" in
    rebuild) clean; build;;
    run-ut)  shift; run_ut "$@";;
    run-kut) run_kut;;
    run-st)  run_st;;
    run-all)
        shift; run_ut "$@"
        run_kut
        run_st;;
    dist-check) shift; dist_check "$@";;
    check-everything)
	check_everything
	echo $CONFIGURE_OPTS | grep -qe '--disable-m0-asserts' || {
	    CONFIGURE_OPTS="$CONFIGURE_OPTS --disable-m0-asserts"
	    check_everything
	};;
    clean) shift; clean "$@";;
    help) help 0;;
    *)    help 1;;
esac

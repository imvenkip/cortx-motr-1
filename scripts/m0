#!/bin/sh
set -eu

### --------------------------------------------------------------------
### Mero helper script
###
### Installation:
###     ln -s /path/to/mero/scripts/m0 ~/bin/m0
###
### Type `m0 help' for usage.
### --------------------------------------------------------------------

umask 0002
ulimit -c unlimited

## CAUTION! This directory will be removed by superuser.
RUNDIR=${RUNDIR:-/var/mero/$USER}

PROG="${0##*/}"
SRC="$(readlink -f $0)"
SRC="${SRC%/*/*}"

SUDO='sudo -E'

die() { echo "$@" >&2; exit 1; }

_make() {
    local OUT=`mktemp`
    local TARGET=${1:-}

    trap "rm $OUT" 0
    make ${MAKE_OPTS:-} $TARGET 2>&1 | tee $OUT
    [ ${PIPESTATUS[0]} -eq 0 ] || exit ${PIPESTATUS[0]}
    if grep 'WARNING' $OUT; then
        die 'WARNING in make output is treated as error'
    fi
}

build() {
    autoreconf -ifs
    ./configure ${CONFIGURE_OPTS:-}
    _make
}

_exec() {
    [ $1 = 'cmd_help' ] || echo "----- ${@#cmd_} -----" >&2
    $@
}

rundir_init() {
    $SUDO rm -rf "$RUNDIR"  # Ouch!
    $SUDO mkdir -m 0777 -p "$RUNDIR"
    cd "$RUNDIR"
}

cmd_make() {
    cd "$SRC"
    if [ -f Makefile ]; then
        _make
    else
        build
    fi
}

cmd_clean() {
    cd "$SRC"
    make distclean || true
    [ "${1:-}" = '-f' ] && git clean -fdx || true
}

cmd_rebuild() {
    cmd_clean
    build
}

cmd_run_ut() {
    rundir_init
    $SUDO "$SRC/utils/m0run" m0ut -- "$@"
}

cmd_run_kut() {
    rundir_init
    echo 'Running kernel UT (this may take a while) ...'
    $SUDO "$SRC/ut/m0kut" "$@"
}

say() { echo "<< $* >>"; }

cmd_run_st() {
    run_init

    say net ST
    $SUDO "$SRC/net/test/st/st.sh"

    say rpc ping
    "$SRC/rpc/it/st.sh"

    say console ST
    $SUDO SANDBOX_DIR=$RUNDIR/sandbox.console-st "$SRC/console/st/console-st.sh"

    say start/stop service ST
    $SUDO SANDBOX_DIR=$RUNDIR/sandbox.sss-st "$SRC/sss/st"

    say m0confgen
    cd $SRC; utils/m0confgen --self-check; cd -

    say conf ST
    $SUDO SANDBOX_DIR=$RUNDIR/sandbox.conf-st "$SRC/conf/st"

    say m0mount ST
    $SUDO $SRC/scripts/m0mount -alvvsL -n 1 -d 2 -k 1 -p 4 -o -m -q

    say spiel ST
    $SUDO SANDBOX_DIR=$RUNDIR/sandbox.spiel-st "$SRC/spiel/st"

    say HA ST
    $SUDO SANDBOX_DIR=$RUNDIR/sandbox.ha-st "$SRC/ha/st/st"

    say assign pool-version ST
    $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_pool_version_assignment.sh"

    say IO ST
    $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_test.sh"

    say multi-clients support ST
    $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_multi_clients.sh"

    say degraded-mode IO ST in oostore mode
    $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_dgmode_io.sh"

    say pool machine query/set testing
    $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_poolmach.sh"

    say SNS single failure repair and rebalance
    $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_sns_repair_1f.sh"

    say SNS multi failure repair
    $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_sns_repair_mf.sh"

if false; then # XXX ENABLEME after MERO-1086 is fixed
    say Concurrent i/o with sns repair
    $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_cc_io_with_sns_repair.sh"
fi

    say sns repair/rebalance quiesce and resume
    $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_sns_repair_quiesce.sh"

    say fsync ST
    $SUDO "$SRC/m0t1fs/linux_kernel/st/m0t1fs_fsync_test.sh"
}

cmd_run_all() {
    cmd_run_ut
    cmd_run_kut
    cmd_run_st
}

cmd_dist_check() {
    cd "$SRC"
    [ -f Makefile ] || die "You need to \`$PROG make' first."
    _make rpms
}

cmd_check_everything() {
    local i cmd

    for i in 0 1; do
        echo "<< CONFIGURE_OPTS='$CONFIGURE_OPTS' >>" >&2
        for cmd in rebuild dist_check run_ut run_kut run_st; do
            _exec cmd_$cmd
        done

        if echo ${CONFIGURE_OPTS:-} | grep -qe '--disable-m0-asserts'; then
            return
        else
            CONFIGURE_OPTS="${CONFIGURE_OPTS:-} --disable-m0-asserts"
        fi
    done
}

cmd_help() {
    local ret=${1:-0}

    [ $ret -eq 0 ] && usage || usage >&2
    exit $ret
}

usage() {
    cat <<EOF
Usage: $PROG {COMMAND [OPTION]...}...

Commands:
    make                 Execute 'make' in Mero directory, falling back to
                         '$PROG rebuild' if no Makefile is found.

    rebuild              Clean and build the whole Mero anew.

    run-ut [OPTION]...   Run user-space unit tests.
                         OPTIONs are passed to 'ut/m0ut'.

    run-kut             Run kernel unit tests.

    run-st              Run system tests.

    run-all             Run unit and system tests.

    dist-check          Create and validate Mero distribution archive and rpm.

    check-everything  = (rebuild + dist-check + run-all) * 2
                        Please run this command before landing.
                        .
                        '* 2' means that the command is being run two
                        times; the second time with './configure
                        --disable-m0-asserts'.

    clean [-f]          Execute 'make distclean' in Mero sources directory.
                        '-f' will also remove untracked files and directories
                        (i.e. those not added to the git repository).
                        *WARNING*: You do not want to use '-f' option
                        if there are any untracked files you care about.

    help    Show this help and exit.

Environment variables:
    CONFIGURE_OPTS      Extra options for './configure' command.
    MAKE_OPTS           Extra options for 'make' command.

Mero sources: $SRC
UT output:    $RUNDIR
EOF
}

CMD=
OPTS=
while [ $# -gt 0 ]; do
    case $1 in
        make|clean|rebuild|run-ut|run-kut|run-st|run-all|dist-check| \
            check-everything|help)
            [ -z "$CMD" ] || _exec $CMD $OPTS
            CMD=cmd_${1//-/_}
            OPTS=;;
        *)
            [ -n "$CMD" ] || {
                echo "Invalid command: $1" >&2
                die "Type \`$PROG help' for usage."
            }
            OPTS+=" $1";;
    esac
    shift
done
if [ -n "$CMD" ]; then
    _exec $CMD $OPTS
else
    cmd_help 1
fi

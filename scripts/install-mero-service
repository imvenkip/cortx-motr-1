#!/usr/bin/env bash

# This script symlinks Mero init scripts to appropriate directories under /etc
# so Mero services can be started from development source tree directory, using
# the same interface as when Mero rpm is installed system-wide.


#
# Global vars
#

# constants
readonly PROG_NAME=$(basename $0)

M0_SRC_DIR="$(readlink -f $0)"
M0_SRC_DIR="${M0_SRC_DIR%/*/*}"

# variables
dry_run=false
link_files=false
action='install'
with_lnet_service=false


#
# Usage
#

help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

usage()
{
    cat <<USAGE_END

Usage: $PROG_NAME [-h|--help] [-n|--dry-run]

    -n|--dry-run        Don't perform any action, just show what would be
                        installed/uninstalled.

    -l|--link           Symlink files instead of copying them.

    -u|--uninstall      Remove files and directories which were installed by
                        this script.

    -L|--with-lnet      Install lnet.service (needed with non Intel Lustre
                        version).

    -h|--help           Print this help screen.
USAGE_END
}


#
# Parse CLI options
#

parse_cli_options()
{
    # Note that we use `"$@"' to let each command-line parameter expand to a
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.
    TEMP=$( getopt -o hnluL --long help,dry-run,link,uninstall,with-lnet -n "$PROG_NAME" -- "$@" )

    [[ $? != 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -h|--help)          help stdout ;;
            -n|--dry-run)       dry_run=true; shift ;;
            -l|--link)          link_files=true; shift ;;
            -u|--uninstall)     action=uninstall; shift ;;
            -L|--with-lnet)     with_lnet_service=true; shift ;;
            --)                 shift; break ;;
            *)                  echo 'getopt: internal error...'; exit 1 ;;
        esac
    done
}


#
# Utility functions
#

die()
{
    echo "$@" >&2
    exit 1
}

log()
{
    echo "$*" >&2
}

run()
{
    local cmd="$*"

    $dry_run && echo $cmd
    $dry_run || $cmd
}

install_files()
{

    local cmd='cp -vf'
    $link_files && cmd='ln -sfv'

    local dir='/etc/sysconfig'
    local file='scripts/install/etc/sysconfig/mero'
    # don't install LNet service by default, assume that we use Intel's Lustre
    # which provides it's own one
    local lnet_service=''

    run "$cmd $M0_SRC_DIR/$file $dir"

    if ! $dry_run ; then
        /bin/sed -i -e "s%#MERO_DEVEL_WORKDIR_PATH=.*$%MERO_DEVEL_WORKDIR_PATH=$M0_SRC_DIR%" /etc/sysconfig/mero
    fi

    if $with_lnet_service ; then
        lnet_service='scripts/install/usr/lib/systemd/system/lnet.service'
    fi

    dir='/usr/lib/systemd/system'
    if [[ -d $dir ]] ; then
        for file in 'scripts/install/usr/lib/systemd/system/mero-trace@.service' \
                    'scripts/install/usr/lib/systemd/system/mero-kernel.service' \
                    'scripts/install/usr/lib/systemd/system/mero-cleanup.service' \
                    'scripts/install/usr/lib/systemd/system/mero-mkfs.service' \
                    'scripts/install/usr/lib/systemd/system/mero-mkfs@.service' \
                    'scripts/install/usr/lib/systemd/system/mero-server-confd.service' \
                    'scripts/install/usr/lib/systemd/system/mero-server-ha.service' \
                    'scripts/install/usr/lib/systemd/system/mero-server@.service' \
                    'scripts/install/usr/lib/systemd/system/m0d@.service' \
                    'scripts/install/usr/lib/systemd/system/m0t1fs@.service' \
                    'scripts/install/usr/lib/systemd/system/mero.service' \
                    'scripts/install/usr/lib/systemd/system/mero-client.service' \
                    'scripts/install/usr/lib/systemd/system/mero-singlenode.service' \
                    $lnet_service ;
        do
            run "$cmd $M0_SRC_DIR/$file $dir"
        done
    fi

    dir='/etc/mero'
    [[ ! -d $dir ]] && run "mkdir -vp $dir"
    for file in 'scripts/install/etc/mero/disks-ios.conf' \
                'scripts/install/etc/mero/genders' ;
    do
        run "$cmd $M0_SRC_DIR/$file $dir"
    done

    if ! $dry_run ; then
        /bin/sed -i -e "s/<host>/$(hostname -s)/" /etc/mero/genders
        /bin/sed -i -e "s/00000000-0000-0000-0000-000000000000/$(uuidgen)/" /etc/mero/genders
    fi

    dir='/usr/libexec/mero'
    [[ ! -d $dir ]] && run "mkdir -vp $dir"
    for file in 'scripts/install/usr/libexec/mero/mero-service.functions' \
                'scripts/install/usr/libexec/mero/mero-trace' \
                'scripts/install/usr/libexec/mero/mero-cleanup' \
                'scripts/install/usr/libexec/mero/mero-kernel' \
                'scripts/install/usr/libexec/mero/mero-mkfs' \
                'scripts/install/usr/libexec/mero/mero-server' \
                'scripts/install/usr/libexec/mero/mero-dixinit' \
                'scripts/install/usr/libexec/mero/mero' \
                'scripts/install/usr/libexec/mero/mero-client' \
                ;
    do
        run "$cmd $M0_SRC_DIR/$file $dir"
    done

    dir='/usr/bin'
    for file in 'utils/m0dixinit' ;
    do
        run "ln -sfv $M0_SRC_DIR/$file $dir"
    done

    $dry_run || {
        [[ -x /usr/bin/systemctl ]] && systemctl daemon-reload
    }
}

uninstall_files()
{
    file_list='/etc/sysconfig/mero
               /etc/mero/disks-ios.conf
               /etc/mero/genders
               /usr/bin/m0dixinit
               /usr/libexec/mero/mero-service.functions
               /usr/libexec/mero/mero-trace
               /usr/libexec/mero/mero-kernel
               /usr/libexec/mero/mero-cleanup
               /usr/libexec/mero/mero-mkfs
               /usr/libexec/mero/mero-server
               /usr/libexec/mero/mero-dixinit
               /usr/libexec/mero/mero
               /usr/libexec/mero/mero-client '

    if [[ -d /usr/lib/systemd/system ]] ; then
        file_list+='/usr/lib/systemd/system/mero-trace@.service
                    /usr/lib/systemd/system/mero-kernel.service
                    /usr/lib/systemd/system/mero-cleanup.service
                    /usr/lib/systemd/system/mero-mkfs.service
                    /usr/lib/systemd/system/mero-mkfs@.service
                    /usr/lib/systemd/system/mero-server-confd.service
                    /usr/lib/systemd/system/mero-server-ha.service
                    /usr/lib/systemd/system/mero-server@.service
                    /usr/lib/systemd/system/m0d@.service
                    /usr/lib/systemd/system/m0t1fs@.service
                    /usr/lib/systemd/system/mero.service
                    /usr/lib/systemd/system/mero-client.service
                    /usr/lib/systemd/system/mero-singlenode.service '
    fi

    if $with_lnet_service ; then
        file_list+='/usr/lib/systemd/system/lnet.service'
    fi

    for file in $file_list
    do
        [[ -s $file ]] && run "rm -v $file"
    done

    for dir in '/etc/mero' \
               '/usr/libexec/mero' ;
    do
        [[ -d $dir && -z $(ls $dir) ]] && run "rmdir -v $dir"
    done

    $dry_run || {
        [[ -x /usr/bin/systemctl ]] && systemctl daemon-reload
    }
}

create_mero_group()
{
    getent group mero >/dev/null || {
        log 'creating "mero" system group'
        groupadd --system mero
    }
}

#
# Main
#

# exit immediately if one the commands exits with a non-zero status
set -e

parse_cli_options $@

if ! $dry_run && [[ $UID -ne 0 ]]; then
    die 'Error: Please, run this script with "root" privileges or use' \
        '-n|--dry-run option.'
fi

case $action in
    install)    install_files
                create_mero_group
        ;;
    uninstall)  uninstall_files
        ;;
    *)          die "Error: unknown action '$action'." ;;
esac

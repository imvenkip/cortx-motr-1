#!/usr/bin/env bash

# This script installs all packages, which are required to build Mero.
# It should work on Red Hat and Debian based systems.


#
# Global vars
#

# constants
readonly PROG_NAME=$(basename $0)

declare -rA RPM_PACKAGE=(
    [binutils]='binutils'
    [gcc]='gcc'
    [g++]='gcc-c++'                     # gccxml
    [make]='make'
    [autoconf]='autoconf'
    [automake]='automake'
    [libtool]='libtool'
    [gccxml]='gccxml'
    [perl]='perl'                       # gccxml2xcode
    [perl-xml]='perl-XML-LibXML'        # gccxml2xcode
    [perl-list]='perl-List-MoreUtils'   # gccxml2xcode
    [perl-file-slurp]='perl-File-Slurp' # gccxml2xcode
    [perl-autodie]='perl-autodie'       # check-sources
    [perl-find]='perl-File-Find-Rule'   # check-sources
    [perl-io]='perl-IO-All'             # check-sources
    [perl-yaml]='perl-YAML-LibYAML'     # gccxml2xcode
    [python-ply]='python-ply'           # m0confgen
    [python-dev]='python-devel'         # m0spiel
    [libc-dev]='glibc-headers'
    [kernel-dev]='kernel-devel'
    [aio]='libaio'
    [binutils-dev]='binutils-devel'
    [aio-dev]='libaio-devel'
    [yaml]='libyaml'
    [yaml-dev]='libyaml-devel'
    [lustre]='lustre-client-devel'
    [asciidoc]='asciidoc'
    [uuid-dev]='libuuid-devel'
    [systemd-dev]='systemd-devel'
    [rpmbuild]='rpm-build'
    # tests / runtime
    [expect]='expect'
    [genders]='genders'
    [setattr]='attr'
    [time]='time'
    [killall]='psmisc'
    [ruby]='ruby'
    [facter]='facter'
    [ruby-ssh]='rubygem-net-ssh'
    [py-yaml]='PyYAML'
)

declare -rA DEB_PACKAGE=(
    [binutils]='binutils'
    [gcc]='gcc'
    [g++]='g++'
    [make]='make'
    [autoconf]='autoconf'
    [automake]='automake'
    [libtool]='libtool'
    [gccxml]='gccxml'
    [perl]='perl'
    [perl-xml]='libxml-libxml-perl'
    [perl-list]='liblist-moreutils-perl'
    [perl-file-slurp]='libfile-slurp-perl'
    [perl-find]='libfile-find-rule-perl'
    [perl-io]='libio-all-perl'
    [python-ply]='python-ply'
    [python-dev]='python-devel'
    [libc-dev]='libc6-dev'
    [kernel-dev]='linux-headers-generic'
    [aio]='libaio1'
    [aio-dev]='libaio-dev'
    [yaml]='libyaml'
    [yaml-dev]='libyaml-dev'
    [lustre]='lustre-source'
    [asciidoc]='asciidoc'
    [genders]='genders'
    [uuid-dev]='uuid-dev'
    [expect]='expect'
    [ruby]='ruby'
    [facter]='facter'
)

# variables
dry_run=false
distro=''
install_cmd=''
yum_opts=''


#
# Usage
#

help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

usage()
{
    cat <<USAGE_END

Usage: $PROG_NAME [-h|--help] [-n|--dry-run]

    -n|--dry-run        Don't perform any action, just show what would be
                        installed.

    -l|--list-all       List all Mero build dependencies

    -m|--list-missing   List Mero build dependencies, which are not currently
                        installed.

    -h|--help           Print this help screen.
USAGE_END
}


#
# Parse CLI options
#

parse_cli_options()
{
    # Note that we use `"$@"' to let each command-line parameter expand to a
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.
    TEMP=$( getopt -o hnlm --long help,dry-run,list-all,list-missing \
                   -n "$PROG_NAME" -- "$@" )

    [[ $? != 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -h|--help)          help stdout ;;
            -n|--dry-run)       dry_run=true; shift ;;
            -l|--list-all)      all_packages; exit 0 ;;
            -m|--list-missing)  missing_packages; exit 0 ;;
            --)                 shift; break ;;
            *)                  echo 'getopt: internal error...'; exit 1 ;;
        esac
    done
}


#
# Utility functions
#

die()
{
    echo "$@" >&2
    exit 1
}

distro_type()
{
    if [[ -f /etc/debian_version ]]; then
        echo debian
    elif [[ -f /etc/redhat-release ]]; then
        echo redhat
    else
        die 'Error: unknown distro, only Red Hat or Debian based' \
            'distributions are supported'
    fi
}

package_type()
{
    if [[ $(distro_type) == debian ]]; then
        echo DEB
    elif [[ $(distro_type) == redhat ]]; then
        echo RPM
    fi
}

package_name_of()
{
    local package_name="$(package_type)_PACKAGE[$1]"
    echo "${!package_name}"
}

all_packages()
{
    local packages="$(package_type)_PACKAGE[@]"
    echo ${!packages} | sed -e 's/\s/\n/g' | sort
}

update_repos()
{
    echo 'Updating repositories...'

    if [[ $(distro_type) == debian ]]; then
        apt-get update &> /dev/null || true
    elif [[ $(distro_type) == redhat ]]; then
        yum $yum_opts check-updates &> /dev/null || true
    fi
}

missing_packages()
{
    for p in $(all_packages); do
        check_installed $p || echo $p
    done
}

build_install_cmd()
{
    if [[ $(distro_type) == debian ]]; then
        echo 'apt-get -y install'
    elif [[ $(distro_type) == redhat ]]; then
        echo "yum -y $yum_opts install"
    fi
}

check_installed()
{
    if [[ $(distro_type) == debian ]]; then
        return $( dpkg -l $1 |& grep -q '^ii' )
    elif [[ $(distro_type) == redhat ]]; then
        return $( rpm --quiet -qi $1 )
    fi
}

check_available()
{
    if [[ $(distro_type) == debian ]]; then
        return $( apt-cache search $1 | grep -q '.*' )
    elif [[ $(distro_type) == redhat ]]; then
        return $( yum $yum_opts list available --showduplicates $1 &> /dev/null )
    fi
}

check_epel_repository()
{
    echo -n 'Checking EPEL repository...'

    local rc

    if yum repolist |& grep -vP '^\s' | grep -qi '\<epel\>'; then
        echo '   [PRESENT]'
        local epel_repo=$(yum repolist |& grep -vP '^\s' |
                                          grep -oP '(\S+)?epel(\S+)?' |
                                          sed 's/[!:]//g' | head -n1)
        yum_opts+=" --enablerepo=$epel_repo "
        if yum repolist all |& grep -qi '\<fedora-epel\>'; then
            yum_opts+=' --enablerepo=fedora-epel '
        fi
        rc=0
    else
        echo '   [ABSENT]'
        rc=1
    fi

    yum repolist |& grep -vP '^\s' | grep -i 'epel'

    return $rc
}

enable_epel_repository()
{
    echo 'Setting up EPEL repository...'

    if ! $dry_run; then
        cd /tmp
        wget 'http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm'
        rpm -ivh epel-release-6-8.noarch.rpm
    fi
}


#
# Main
#

# exit immediately if one the commands exits with a non-zero status
set -e

parse_cli_options $@

if ! $dry_run && [[ $UID -ne 0 ]]; then
    die 'Error: Please, run this script with "root" privileges or use' \
        '-n|--dry-run option.'
fi

if [[ $(distro_type) == redhat ]]; then
    echo '*** This script could take some time to run, especially on the' \
         'first run ***'
fi

if [[ $(distro_type) == redhat ]]; then
    check_epel_repository || enable_epel_repository
fi

update_repos

install_cmd=$(build_install_cmd)
missing_pkgs=$(missing_packages)

available_pkgs=
not_available_pkgs=

if [[ -n $missing_pkgs ]]; then
    for p in $missing_pkgs; do
        if check_available $p; then
            available_pkgs+="$p "
        else
            not_available_pkgs+="$p "
        fi
    done

    available_pkgs=$( echo $available_pkgs | sed -e 's/\s/\n/g' | sort \
                      | xargs echo )
    not_available_pkgs=$( echo $not_available_pkgs | sed -e 's/\s/\n/g' | sort )

    if [[ -n $available_pkgs ]]; then
        echo 'Installing missing packages:'
        echo "$install_cmd $available_pkgs"
        $dry_run || $install_cmd $available_pkgs
        echo
    fi
else
    echo '--- Nothing to be done ---'
    #echo 'Seems that all Mero build dependencies are satisfied.'
fi

if [[ -n $not_available_pkgs ]]; then
    echo 'WARNING: Some required packages were not installed, because they' \
         'are not available in current system repositories. Please, enable' \
         'additional repos, which could provide the following packages and' \
         'run this script again:'
    echo
    echo "$not_available_pkgs"
else
    echo 'You now can try to build Mero, for this please run the following command:'
    echo
    echo '  ./autogen.sh && ./configure && make'
fi

/* -*- C -*- */
/*
 * COPYRIGHT 2011 XYRATEX TECHNOLOGY LIMITED
 *
 * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
 * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
 * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
 * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
 * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
 * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
 * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
 *
 * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
 * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
 * http://www.xyratex.com/contact
 *
 * Original author: Rohan Puri <Rohan_Puri@xyratex.com>,
 *		    Amit Jambure <Amit_Jambure@xyratex.com>
 * Original creation date: 03/11/2011
 */

/**
   @addtogroup rpc_session

   @{
 */

/**
   FOP sent from sender to receiver to establish a new rpc connection.
 */
DEF(c2_rpc_fop_conn_establish, RECORD,
   _(rce_unused, U64));

/**
   FOP sent by receiver back to sender as a reply to c2_rpc_fop_conn_establish
   FOP.
 */
DEF(c2_rpc_fop_conn_establish_rep, RECORD,
   /**
      sender_id assigned by receiver to the established rpc-connection.
      Has value SENDER_ID_INVALID if CONN_ESTABLISH operation fails.
    */
   _(rcer_sender_id, U64),
   /**
      Contains 0 if CONN_ESTABLISH operation is successful, error code
      otherwise.
    */
   _(rcer_rc, U32));

/**
   Request FOP to terminate rpc-connection. Sent from sender to receiver.
 */
DEF(c2_rpc_fop_conn_terminate, RECORD,
    /**
       sender_id of rpc-connection being terminated.
     */
    _(ct_sender_id, U64));

/**
   Reply FOP to c2_rpc_conn_terminate. Sent from receiver to sender.
 */
DEF(c2_rpc_fop_conn_terminate_rep, RECORD,
   /**
      sender_id of rpc-connection being terminated.
    */
   _(ctr_sender_id, U64),
   /**
      Contains 0 if CONN_TERMINATE operation is successful, error code
      otherwise.
    */
   _(ctr_rc, U32));

/**
   Request FOP to establish a new session. Sent from sender to receiver.
 */
DEF(c2_rpc_fop_session_establish, RECORD,
   /**
      sender_id of rpc-connection in which a new session is to be created.
    */
   _(rse_sender_id, U64),
   /**
      Number of slots the new session should have.
    */
   _(rse_slot_cnt, U32));

/**
   Reply of c2_rpc_fop_session_establish. Sent from receiver to
   sender.
 */
DEF(c2_rpc_fop_session_establish_rep, RECORD,
   /**
      session_id assigned by receiver to the newly created session.
      Has value SESSION_ID_INVALID if SESSION_ESTABLISH operation fails.
    */
   _(rser_session_id, U64),
   /**
      sender_id copied from c2_rpc_fop_session_establish.
    */
   _(rser_sender_id, U64),
   /**
      Contains 0 if SESSION_ESTABLISH operation is successful, error code
      otherwise.
    */
   _(rser_rc, U32));

/**
   Request FOP to terminate a session. Sent from sender to receiver.
 */
DEF(c2_rpc_fop_session_terminate, RECORD,
   /**
      sender_id of rpc-connection to which the session being terminated
      belongs.
    */
   _(rst_sender_id, U64),
   /**
      session_id of session being termianted.
    */
   _(rst_session_id, U64));

/**
   Reply FOP to c2_rpc_fop_session_terminate. Sent from receiver to sender.
 */
DEF(c2_rpc_fop_session_terminate_rep, RECORD,
   /**
      session_id of the session being terminated.
    */
   _(rstr_session_id, U64),
   /**
      sender_id of rpc-connection to which the session being terminated
      belongs.
    */
   _(rstr_sender_id, U64),
   /**
      Contains 0 if SESSION_TERMINATE operation is successful, error code
      otherwise.
    */
   _(rstr_rc, U32));

DEF(c2_rpc_fop_noop, RECORD,
   _(n_unused, U64));

/** @} end of rpc_session group */

/*
 *  Local variables:
 *  c-indentation-style: "K&R"
 *  c-basic-offset: 8
 *  tab-width: 8
 *  fill-column: 80
 *  scroll-step: 1
 *  End:
 */


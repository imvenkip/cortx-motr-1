/* -*- C -*- */
/*
 * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
 *
 * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
 * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
 * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
 * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
 * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
 * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
 * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
 *
 * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
 * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
 * http://www.xyratex.com/contact
 *
 * Original author: Rohan Puri <Rohan_Puri@xyratex.com>,
 *		    Amit Jambure <Amit_Jambure@xyratex.com>
 * Original creation date: 03/11/2011
 */

/**
   @addtogroup rpc_session

   @{
 */
record {
	u64 rce_unused
} m0_rpc_fop_conn_establish;

/**
   FOP sent by receiver back to sender as a reply to m0_rpc_fop_conn_establish
   FOP.
 */
record {
	/**
	   sender_id assigned by receiver to the established rpc-connection.
	   Has value SENDER_ID_INVALID if CONN_ESTABLISH operation fails.
	 */
	u64 rcer_sender_id;
	/**
	   Contains 0 if CONN_ESTABLISH operation is successful, error code
	   otherwise.
	 */
	u32 rcer_rc
} m0_rpc_fop_conn_establish_rep;

/**
   Request FOP to terminate rpc-connection. Sent from sender to receiver.
 */
record {
	/**
	   sender_id of rpc-connection being terminated.
	 */
	u64 ct_sender_id
} m0_rpc_fop_conn_terminate;

/**
   Reply FOP to m0_rpc_conn_terminate. Sent from receiver to sender.
 */
record {
	/**
	   sender_id of rpc-connection being terminated.
	 */
	u64 ctr_sender_id;
	/**
	   Contains 0 if CONN_TERMINATE operation is successful, error code
	   otherwise.
	 */
	u32 ctr_rc
} m0_rpc_fop_conn_terminate_rep;

/**
   Request FOP to establish a new session. Sent from sender to receiver.
 */
record {
	/**
	   sender_id of rpc-connection in which a new session is to be created.
	 */
	u64 rse_sender_id;
	/**
	   Number of slots the new session should have.
	 */
	u32 rse_slot_cnt
} m0_rpc_fop_session_establish;

/**
   Reply of m0_rpc_fop_session_establish. Sent from receiver to
   sender.
 */
record {
	/**
	   session_id assigned by receiver to the newly created session.
	   Has value SESSION_ID_INVALID if SESSION_ESTABLISH operation fails.
	 */
	u64 rser_session_id;
	/**
	   sender_id copied from m0_rpc_fop_session_establish.
	 */
	u64 rser_sender_id;
	/**
	   Contains 0 if SESSION_ESTABLISH operation is successful, error code
	   otherwise.
	 */
	u32 rser_rc
} m0_rpc_fop_session_establish_rep;

/**
   Request FOP to terminate a session. Sent from sender to receiver.
 */
record {
	/**
	   sender_id of rpc-connection to which the session being terminated
	   belongs.
	 */
	u64 rst_sender_id;
	/**
	   session_id of session being terminated.
	 */
	u64 rst_session_id
} m0_rpc_fop_session_terminate;

/**
   Reply FOP to m0_rpc_fop_session_terminate. Sent from receiver to sender.
 */
record {
	/**
	   session_id of the session being terminated.
	 */
	u64 rstr_session_id;
	/**
	   sender_id of rpc-connection to which the session being terminated
	   belongs.
	 */
	u64 rstr_sender_id;
	/**
	   Contains 0 if SESSION_TERMINATE operation is successful, error code
	   otherwise.
	 */
	u32 rstr_rc
} m0_rpc_fop_session_terminate_rep;

record {
	u64 n_unused
} m0_rpc_fop_noop;

/** @} end of rpc_session group */

/*
 *  Local variables:
 *  c-indentation-style: "K&R"
 *  c-basic-offset: 8
 *  tab-width: 8
 *  fill-column: 80
 *  scroll-step: 1
 *  End:
 */

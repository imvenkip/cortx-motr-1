/* -*- C -*- */

/*
 * COPYRIGHT 2011 XYRATEX TECHNOLOGY LIMITED
 *
 * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
 * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
 * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
 * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
 * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
 * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
 * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
 *
 * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
 * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
 * http://www.xyratex.com/contact
 *
 * Original author: Anand Vidwansa <Anand_Vidwansa@xyratex.com>
 *                  Anup Barve <Anup_Barve@xyratex.com>
 * Original creation date: 03/21/2011
 */

/**
 * @defgroup io_fops FOPs for Data Operations
 *
 * This component contains the File Operation Packets (FOP) definitions
 * for following operations
 * - readv
 * - writev
 *
 * It describes the FOP formats along with brief description of the flow.
 *
 * Note: As authorization is carried on server, all request FOPs
 * contain uid and gid. For authentication, nid is included in every FOP.
 * This is to serve very primitive authentication for now.
 *
 * @{
 */

/** @file io.ff
 *
 * <b>IO fop formats</b>
 *
 */

FOPDEP("net/net_otw_types.ff");
FOPDEP("addb/addb.ff");

/**
 * @section IO FOP Definitions
 */
DEF(c2_fop_file_fid, RECORD,
	/** Sequence number for given fid. */
	_(f_seq, U64),
	/** Object Index for given fid. */
	_(f_oid, U64));

/**
 * A common sub structure to be referred by read and write reply fops.
 */
DEF(c2_fop_cob_rw_reply, RECORD,
	/** Status code of operation. */
	_(rwr_rc, U32),
	/** Number of bytes read or written. */
	_(rwr_count, U64));

/**
 * Reply FOP for a readv request.
 */
DEF(c2_fop_cob_readv_rep, RECORD,
	/** Common read/write reply. */
	_(c_rep, c2_fop_cob_rw_reply));

/**
 * Represents the extent information for an io segment. c2_ioseg typically
 * represents a user space data buffer or a kernel page.
 */
DEF(c2_ioseg, RECORD,
	_(ci_index, U64),
	_(ci_count, U64));

/**
 * Represents an index vector with {index, count}  tuples for a target
 * device (typically a cob).
 */
DEF(c2_io_indexvec, SEQUENCE,
	_(ci_nr, U32),
	_(ci_iosegs, c2_ioseg));

/**
 * Represents sequence of index vector, one per network buffer.
 * As a result of io coalescing, there could be multiple network
 * buffers associated with an io fop. Hence a SEQUENCE of c2_io_indexvec
 * is needed, one per network buffer.
 */
DEF(c2_io_indexvec_seq, SEQUENCE,
	_(cis_nr, U32),
	_(cis_ivecs, c2_io_indexvec));

/**
 * Sequence of net buf desc that can be accommodated in single io fop.
 * As a result of io coalescing, there could be multiple network
 * buffers associated with an io fop. Hence a SEQUENCE of c2_net_buf_desc
 * is needed.
 */
DEF(c2_io_descs, SEQUENCE,
	_(id_nr, U32),
	_(id_descs, c2_net_buf_desc));

/**
 * Common structure for read and write request fops.
 */
DEF(c2_fop_cob_rw, RECORD,

	/** File identifier of read/write request. */

	_(crw_fid, c2_fop_file_fid),

	/** Net buf descriptors representing the c2_net_buffer containing
	    the IO buffers. */

	_(crw_desc, c2_io_descs),

	/** Index vectors representing the extent information for the
	    IO request. */

	_(crw_ivecs, c2_io_indexvec_seq),

	/** Miscellaneous flags. */

	_(crw_flags, U64));

/**
 * This fop is representation of a read component object request.
 * The c2_fop_cob_readv FOP is sent by client to the Data server.
 * The FOP supplies the stob id on which the read has to be performed.
 * The IO vector signifies the region within Component Object on which IO
 * has to be performed.
 * On completion, the reply FOP (c2_fop_cob_readv_rep) is created
 * and sent to the client.
 */
DEF(c2_fop_cob_readv, RECORD,
	/** Common definition of read/write fops. */
	_(c_rwv, c2_fop_cob_rw));

/**
 * Reply FOP for writev FOPs.
 * The c2_fop_cob_writev_rep FOP is sent as a response by the
 * Data server to a client.
 * It contains the status code and number of bytes written.
 */
DEF(c2_fop_cob_writev_rep, RECORD,
	/** Common read/write reply structure. */
	_(c_rep, c2_fop_cob_rw_reply));

/**
 * The c2_fop_cob_writev FOP is used to send write requests by a
 * client to a Data server.
 * The FOP supplies the stob id on which the write has to be performed.
 * The IO vector signifies the region within Component Object on which IO
 * has to be performed.
 * On completion, the reply FOP (c2_fop_cob_writev_rep) is created
 * and sent to the client.
 */
DEF(c2_fop_cob_writev, RECORD,
	/** Common definition of read/write fops. */
	_(c_rwv, c2_fop_cob_rw));

/**
 * Fops referring other remote fops (not present in this file).
 */
DEF(c2_test_ios_fop, RECORD,
	_(if_st, U64),
	_(if_nbd, c2_net_buf_desc));

DEF(c2_test_io_addb, RECORD,
	_(if_st, U64),
	_(if_addb, c2_addb_record));

DEF(c2_fop_cob_common, RECORD,
	/**
	 * Fid of global file.
	 */
	_(c_gobfid, c2_fop_file_fid),
	/**
	 * Fid of component object.
	 */
	_(c_cobfid, c2_fop_file_fid));

/**
 * Represents name of a cob being created.
 */
DEF(c2_fop_cob_name, SEQUENCE,
        _(cn_count, U32),
        _(cn_name,  BYTE));

/**
 * On-wire representation of "cob create" request.
 * Cob create fops are sent to data servers when a new global file
 * is created.
 */
DEF(c2_fop_cob_create, RECORD,
	_(cc_common,  c2_fop_cob_common),
	/** Name of global file. */
	_(cc_cobname, c2_fop_cob_name));

/**
 * On-wire representation of "cob delete" request.
 * Cob delete fops are sent to data servers when a global file
 * is deleted.
 * Cob is located based on stob-id. Currently, cob-id is same
 * as stob-id.
 */
DEF(c2_fop_cob_delete, RECORD,
	_(cd_common, c2_fop_cob_common));

/**
 * On-wire representation of reply for both "cob create" and "cob delete"
 * requests.
 */
DEF(c2_fop_cob_op_reply, RECORD,
	_(cor_rc, U32));

/** @} end of FOP_data_ops */

/*
 *  Local variables:
 *  c-indentation-style: "K&R"
 *  c-basic-offset: 8
 *  tab-width: 8
 *  fill-column: 80
 *  scroll-step: 1
 *  End:
 */

/* -*- C -*- */

/**
 * @defgroup io_fops FOPs for Data Operations 
 * 
 * This component contains the File Operation Packets(FOP) definitions 
 * for following operations
 * - readv
 * - writev
 * 
 * It describes the FOP formats along with brief description of the flow.
 *
 * Note: As authorization is carried on server, all request FOPs 
 * contain uid and gid. For authentication, nid is included in every FOP.
 * This is to serve very primitive authentication for now.
 * 
 * @{
 */

/** @file io.ff
 *
 * <b>IO fop formats</b>
 *
 */

/**
 * @section IO FOP Definitions
 */


DEF(c2_fop_file_fid, RECORD,
	_(f_container, U64),
	_(f_key, U64));
	
/**
 * c2_fop_stob_id is an identifier for storage object.
 * stob id is a 128-bit unique number which is represented by 2 64-bit 
 * unsigned ints.
 * @see stob
 * <br> List of fields  
 * @li hi : Most Significant 64-bit
 * @li lo : Least significant 64-bit
 */

DEF(c2_fop_stob_id, RECORD,
	_(s_hi, U64),
	_(s_lo, U64));

DEF(c2_fop_io_addr, SEQUENCE,
	_(f_count, U32),
	_(f_buf, BYTE));

/**
 * c2_fop_io_seg is a record containing details of an IO operation.
 * <br> List of fields  
 * @li offset : offset within component object.
 * @li count : count in bytes.
 * @li Data buffer
 */

DEF(c2_fop_io_seg, RECORD,
	_(f_offset, U64),
	_(f_addr, c2_fop_io_addr));

/**
 * c2_fop_io_vec is a vector of c2_fop_io_seg with number of such segments.
 * <br> List of fields  
 * @li Array of IO segments.
 * @li count: Number of segments in array.
 */

DEF(c2_fop_io_vec, RECORD,
	_(iov_count, U32),
	_(iov_seg, c2_fop_io_seg));

/**
 * <b> c2_fop_cob_io_rep </b>
 * This is common reply FOP for readv and writev FOPs
 * <p> The c2_fop_cob_io_rep FOP is sent as a response by the 
 * Data server to a client.
 * It contains the status code and number of bytes written.
 * <br> List of fields  
 * @li rc: status code. Non-zero value indicates error code.
 * @li number of bytes written.
 * rc = 0 indicates successful completion
 * rc > 0 indicates error code.
 */

DEF(c2_fop_cob_io_rep, RECORD,
	_(fwrr_nid, U64),
	_(fwrr_rc, U32),
	_(fwrr_count, U64));	

/**
 * <b> c2_fop_cob_readv </b>
 * is a representation of a read component object request.
 * <p> The c2_fop_cob_readv FOP is sent by client to the Data server.
 * The FOP supplies the stob id on which the read has to be performed.
 * The IO vector signifies the region within Component Object on which IO 
 * has to be performed.
 * On completion, the reply FOP (c2_fop_cob_io_rep) is created 
 * and sent to the client.
 * <br> List of fields  
 * @li storage object Identifier
 * @li IO vector 
 * @li miscellaneous flags
 * @li uid, gid for authorization
 */
 
DEF(c2_fop_cob_readv, RECORD,
	_(frd_foprep, U64),
	_(frd_fid, c2_fop_file_fid),
	_(frd_iovec, c2_fop_io_vec),
	_(frd_uid, U64),
	_(frd_gid, U64),
	_(frd_nid, U64),
	_(frd_flags, U64),
	_(frd_segsize, U32));


/**
 * <b> c2_fop_cob_writev </b>
 * <p> The c2_fop_cob_writev FOP is used to send write requests by a 
 * client to a Data server.
 * The FOP supplies the stob id on which the write has to be performed.
 * The IO vector signifies the region within Component Object on which IO 
 * has to be performed.
 * On completion, the reply FOP (c2_fop_cob_io_rep) is created 
 * and sent to the client.
 * <br> List of fields  
 * @li storage object Identifier
 * @li IO vector 
 * @li miscellaneous flags
 * @li uid, gid for authorization
 */

DEF(c2_fop_cob_writev, RECORD,
	_(fwr_foprep, U64),
	_(fwr_fid, c2_fop_file_fid),
	_(fwr_iovec, c2_fop_io_vec),
	_(fwr_uid, U64),
	_(fwr_gid, U64),
	_(fwr_nid, U64),
	_(fwr_flags, U64),
	_(fwr_segsize, U32));


/** @} end of FOP_data_ops */

/* 
 *  Local variables:
 *  c-indentation-style: "K&R"
 *  c-basic-offset: 8
 *  tab-width: 8
 *  fill-column: 80
 *  scroll-step: 1
 *  End:
 */

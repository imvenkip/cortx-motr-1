/* -*- C -*- */

/*
 * COPYRIGHT 2012 XYRATEX TECHNOLOGY LIMITED
 *
 * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
 * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
 * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
 * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
 * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
 * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
 * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
 *
 * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
 * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
 * http://www.xyratex.com/contact
 *
 * Original author: Anand Vidwansa <Anand_Vidwansa@xyratex.com>
 *                  Anup Barve <Anup_Barve@xyratex.com>
 * Original creation date: 03/21/2011
 */

/**
 * @defgroup io_fops FOPs for Data Operations
 *
 * This component contains the File Operation Packets (FOP) definitions
 * for following operations
 * - readv
 * - writev
 *
 * It describes the FOP formats along with brief description of the flow.
 *
 * Note: As authorization is carried on server, all request FOPs
 * contain uid and gid. For authentication, nid is included in every FOP.
 * This is to serve very primitive authentication for now.
 *
 * @{
 */

/** @file io_fops_xc.ff
 *
 * <b>IO fop formats</b>
 *
 */

require "net/net_otw_types_ff";
require "addb/addbff/addb_ff";
require "fid/fid_xc";
require "fid/fid";

/**
 * @section IO FOP Definitions
 */

/**
 * Represents the extent information for an io segment. c2_ioseg typically
 * represents a user space data buffer or a kernel page.
 */
record {
	u64 ci_index;
	u64 ci_count
} c2_ioseg;

/**
 * Represents an index vector with {index, count}  tuples for a target
 * device (typically a cob).
 */
sequence {
	u32      ci_nr;
	c2_ioseg ci_iosegs
} c2_io_indexvec;

/**
 * Represents sequence of index vector, one per network buffer.
 * As a result of io coalescing, there could be multiple network
 * buffers associated with an io fop. Hence a SEQUENCE of c2_io_indexvec
 * is needed, one per network buffer.
 */
sequence {
	u32            cis_nr;
	c2_io_indexvec cis_ivecs
} c2_io_indexvec_seq;

/**
 * Sequence of net buf desc that can be accommodated in single io fop.
 * As a result of io coalescing, there could be multiple network
 * buffers associated with an io fop. Hence a SEQUENCE of c2_net_buf_desc
 * is needed.
 */
sequence {
	u32             id_nr;
	c2_net_buf_desc id_descs
} c2_io_descs;

/**
 * Failure vector (pool machine state) version numbers.
 * This is declared as a record, not a sequence (which is more like an
 * array, such that to avoid dynamic memory allocation for every
 * request and reply fop. The size of this struct will be assert to
 * be the same of struct c2_pool_version_numbers.
 */
record {
	u64 fvv_read;
	u64 fvv_write
} c2_fv_version;

record {
	u32 fve_type;
	u32 fve_index;
	u32 fve_state
} c2_fv_event;

/**
 * Failure vector updates.
 * This update is represented as an array of chars. This is the serialized
 * representation of failure vector.
 */
sequence {
	u32 fvu_count;
	c2_fv_event fvu_events
} c2_fv_updates;

/**
 * A common sub structure to be referred by read and write reply fops.
 */
record {
        /** Status code of operation. */
	u32 rwr_rc;

	/** Number of bytes read or written. */
	u64 rwr_count;

	/** latest version number */
	c2_fv_version rwr_fv_version;

	/**
	 * Failure vector updates. This field is valid  iff rc is some
	 * defined special code.
	 */
	c2_fv_updates rwr_fv_updates
} c2_fop_cob_rw_reply;

/**
 * Reply FOP for a readv request.
 */
record {
	/** Common read/write reply. */
	c2_fop_cob_rw_reply c_rep
} c2_fop_cob_readv_rep;

/**
 * Reply FOP for writev FOPs.
 * The c2_fop_cob_writev_rep FOP is sent as a response by the
 * Data server to a client.
 * It contains the status code and number of bytes written.
 */
record {
	/** Common read/write reply structure. */
	c2_fop_cob_rw_reply c_rep
} c2_fop_cob_writev_rep;

/**
 * Common structure for read and write request fops.
 */
record {
	/** Client known failure vector version number */
	c2_fv_version crw_version;

	/** File identifier of read/write request. */

	c2_fid    crw_fid;

	/** Net buf descriptors representing the c2_net_buffer containing
	    the IO buffers. */

	c2_io_descs        crw_desc;

	/** Index vectors representing the extent information for the
	    IO request. */

	c2_io_indexvec_seq crw_ivecs;

	/** Miscellaneous flags. */

	u64                crw_flags
} c2_fop_cob_rw;

/**
 * This fop is representation of a read component object request.
 * The c2_fop_cob_readv FOP is sent by client to the Data server.
 * The FOP supplies the stob id on which the read has to be performed.
 * The IO vector signifies the region within Component Object on which IO
 * has to be performed.
 * On completion, the reply FOP (c2_fop_cob_readv_rep) is created
 * and sent to the client.
 */
record {
	/** Common definition of read/write fops. */
	c2_fop_cob_rw c_rwv
} c2_fop_cob_readv;

/**
 * The c2_fop_cob_writev FOP is used to send write requests by a
 * client to a Data server.
 * The FOP supplies the stob id on which the write has to be performed.
 * The IO vector signifies the region within Component Object on which IO
 * has to be performed.
 * On completion, the reply FOP (c2_fop_cob_writev_rep) is created
 * and sent to the client.
 */
record {
	/** Common definition of read/write fops. */
	c2_fop_cob_rw c_rwv
} c2_fop_cob_writev;

record {
	u64             if_st;
	c2_net_buf_desc if_nbd
} c2_test_ios_fop;

record {
	u64            if_st;
	c2_addb_record if_addb
} c2_test_io_addb;

record {
	/** Client known failure vector version number */
	c2_fv_version c_version;

	/**
	 * Fid of global file.
	 */
	c2_fid c_gobfid;

	/**
	 * Fid of component object.
	 */
	c2_fid c_cobfid
} c2_fop_cob_common;

/**
 * Represents name of a cob being created.
 */
sequence {
	u32 cn_count;
	u8  cn_name
} c2_fop_cob_name;

/**
 * On-wire representation of "cob create" request.
 * Cob create fops are sent to data servers when a new global file
 * is created.
 */
record {
	c2_fop_cob_common cc_common;
	/** Name of global file. */
	c2_fop_cob_name   cc_cobname
} c2_fop_cob_create;

/**
 * On-wire representation of "cob delete" request.
 * Cob delete fops are sent to data servers when a global file
 * is deleted.
 * Cob is located based on stob-id. Currently, cob-id is same
 * as stob-id.
 */
record {
	c2_fop_cob_common cd_common
} c2_fop_cob_delete;

/**
 * On-wire representation of reply for both "cob create" and "cob delete"
 * requests.
 */
record {
	u32 cor_rc;

	/** latest version number */
	c2_fv_version cor_fv_version;

	/**
	 * Failure vector updates. This field is valid  iff rc is some
	 * defined special code.
	 */
	c2_fv_updates cor_fv_updates
} c2_fop_cob_op_reply;

/**
 * Fop to notify the failure vector version number if changed.
 * This fop itself contains the latest failure vector version number.
 */
record {
	/** the pool id of this failure vector */
	u64 fvn_poolid;

	/** its latest failure vector version */
	c2_fv_version fvn_version
} c2_fop_fv_notification;


/** @} end of FOP_data_ops */

/*
 *  Local variables:
 *  c-indentation-style: "K&R"
 *  c-basic-offset: 8
 *  tab-width: 8
 *  fill-column: 80
 *  scroll-step: 1
 *  End:
 */

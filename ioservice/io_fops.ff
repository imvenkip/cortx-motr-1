/* -*- C -*- */

/*
 * COPYRIGHT 2011 XYRATEX TECHNOLOGY LIMITED
 *
 * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
 * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
 * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
 * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
 * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
 * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
 * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
 *
 * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
 * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
 * http://www.xyratex.com/contact
 *
 * Original author: Anand Vidwansa <Anand_Vidwansa@xyratex.com>
 *                  Anup Barve <Anup_Barve@xyratex.com>
 * Original creation date: 03/21/2011
 */

/**
 * @defgroup io_fops FOPs for Data Operations
 *
 * This component contains the File Operation Packets (FOP) definitions
 * for following operations
 * - readv
 * - writev
 *
 * It describes the FOP formats along with brief description of the flow.
 *
 * Note: As authorization is carried on server, all request FOPs
 * contain uid and gid. For authentication, nid is included in every FOP.
 * This is to serve very primitive authentication for now.
 *
 * @{
 */

/** @file io.ff
 *
 * <b>IO fop formats</b>
 *
 */

/**
 * @section IO FOP Definitions
 */
DEF(c2_fop_file_fid, RECORD,
	/** Sequence number for given fid. */
	_(f_seq, U64),
	/** Object Index for given fid. */
	_(f_oid, U64));

/**
 * c2_fop_io_buf is a buffer with a count specifying its length.
 */
DEF(c2_fop_io_buf, SEQUENCE,
	/** Number of bytes in the buffer. */
	_(ib_count, U64),
	/** Starting address of buffer. */
	_(ib_buf, BYTE));

/**
 * c2_fop_io_seg is a record containing details of an IO operation.
 */
DEF(c2_fop_io_seg, RECORD,
	/** Offset within component object.*/
	_(is_offset, U64),
	/** Data buffer attached with IO segment. */
	_(is_buf, c2_fop_io_buf));

/**
 * c2_fop_io_vec is a vector of c2_fop_io_seg with number of such segments.
 */
DEF(c2_fop_io_vec, SEQUENCE,
	/** Number of IO segments. */
	_(iv_count, U32),
	/** Array of IO segments. */
	_(iv_segs, c2_fop_io_seg));

/**
 * Reply FOP for a readv request.
 */
DEF(c2_fop_cob_readv_rep, RECORD,
	/** Status code. */
	_(crr_rc, U32),
	/** At the moment, due to some constraints put up by kxdr wrapper
	   around sunrpc, we can't have an IO vector here. It has to be
	   a SEQUENCE of bytes. Eventually, this will be replaced by
	   an IO vector or rather a net buffer descriptor. */
	_(crr_iobuf, c2_fop_io_buf));

/**
 * Common structure for read and write request fops.
 */
DEF(c2_fop_cob_rw, RECORD,
	/** File identifier of read/write request. */
	_(crw_fid, c2_fop_file_fid),
	/** IO vector containing read/write data. */
	_(crw_iovec, c2_fop_io_vec),
	/** Miscellaneous flags. */
	_(crw_flags, U64));

/**
 * This fop is representation of a read component object request.
 * The c2_fop_cob_readv FOP is sent by client to the Data server.
 * The FOP supplies the stob id on which the read has to be performed.
 * The IO vector signifies the region within Component Object on which IO
 * has to be performed.
 * On completion, the reply FOP (c2_fop_cob_readv_rep) is created
 * and sent to the client.
 */
DEF(c2_fop_cob_readv, RECORD,
	/** Common definition of read/write fops. */
	_(c_rwv, c2_fop_cob_rw));

/**
 * Reply FOP for writev FOPs.
 * The c2_fop_cob_writev_rep FOP is sent as a response by the
 * Data server to a client.
 * It contains the status code and number of bytes written.
 */
DEF(c2_fop_cob_writev_rep, RECORD,
	/** Status code. */
	_(cwr_rc, U32),
	/** Number of bytes written. */
	_(cwr_count, U64));

/**
 * The c2_fop_cob_writev FOP is used to send write requests by a
 * client to a Data server.
 * The FOP supplies the stob id on which the write has to be performed.
 * The IO vector signifies the region within Component Object on which IO
 * has to be performed.
 * On completion, the reply FOP (c2_fop_cob_writev_rep) is created
 * and sent to the client.
 */
DEF(c2_fop_cob_writev, RECORD,
	/** Common definition of read/write fops. */
	_(c_rwv, c2_fop_cob_rw));

/** @} end of FOP_data_ops */

/*
 *  Local variables:
 *  c-indentation-style: "K&R"
 *  c-basic-offset: 8
 *  tab-width: 8
 *  fill-column: 80
 *  scroll-step: 1
 *  End:
 */

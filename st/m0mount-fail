#!/usr/bin/env bash
set -e

#set -x
#export PS4='+ ${FUNCNAME[0]:+${FUNCNAME[0]}():}line ${LINENO}: '

## CAUTION: This path will be removed by superuser.
SANDBOX_DIR=${SANDBOX_DIR:-/var/mero/sandbox.spiel-st}

TRACE_MASK=${M0_TRACE_IMMEDIATE_MASK:-all}
TRACE_LEVEL=${M0_TRACE_LEVEL:-warn}
TRACE_CONTEXT=${M0_TRACE_PRINT_CONTEXT:-}

MAX_RPC_MSG_SIZE=163840
TM_MIN_RECV_QUEUE_LEN=2
DEV_NR=4
DEV_SIZE=$((1024 * 1024))

error() { echo "$@" >&2; stop 1; }

M0_SRC_DIR=`readlink -f $0`
M0_SRC_DIR=${M0_SRC_DIR%/*/*}
mero_module_path=$M0_SRC_DIR/mero

. $M0_SRC_DIR/utils/functions # die, sandbox_init, report_and_exit
. $M0_SRC_DIR/m0t1fs/linux_kernel/st/common.sh
. $M0_SRC_DIR/m0t1fs/linux_kernel/st/m0t1fs_common_inc.sh
. $M0_SRC_DIR/m0t1fs/linux_kernel/st/m0t1fs_server_inc.sh
. $M0_SRC_DIR/m0t1fs/linux_kernel/st/common_service_fids_inc.sh

## Path to the file with configuration string for confd.
CONF_FILE=$SANDBOX_DIR/conf.txt

PROC_FID_CNTR=0x7200000000000001
PROC_FID_KEY=3
PROC_FID_KEY2=4
PROC_FID="<$PROC_FID_CNTR:$PROC_FID_KEY>"
PROC_FID2="<$PROC_FID_CNTR:$PROC_FID_KEY2>"
PROF_OPT="<0x7000000000000001:0>"

iosloopdevs() {
    cat > $SANDBOX_DIR/disks.conf << EOF
    Device:
EOF
    for i in $(seq $DEV_NR); do
        dd if=/dev/zero of=$SANDBOX_DIR/${i}.img bs=$DEV_SIZE seek=$DEV_SIZE count=1
        losetup -d /dev/loop$i &> /dev/null || true
        losetup /dev/loop$i $SANDBOX_DIR/${i}.img
        cat >> $SANDBOX_DIR/disks.conf << EOF
       - id: $i
         filename: /dev/loop$i
EOF
    done
}

start() {
    sandbox_init
    _init
    m0d_with_rms_start
}

stop() {
    local rc=${1:-$?}

    trap - EXIT
    if mount | grep -q m0t1fs; then umount $SANDBOX_DIR/mnt; fi
    mero_service stop
    _fini
    if [ $rc -eq 0 ]; then
        sandbox_fini
    else
        say "Spiel test FAILED: $rc"
        exit $rc
    fi
}

_init() {
    lnet_up
    modules_insert
    mkdir $SANDBOX_DIR/mnt
    iosloopdevs
}

_fini() {
    for i in $(seq $DEV_NR); do
        losetup -d /dev/loop$i
    done
    cd $M0_SRC_DIR/utils/spiel
    cat $PYTHON_STUFF | xargs rm -rf
    rm -rf build/ $PYTHON_STUFF
}

### XXX Code duplication!
### There is an identical function in conf/st.
### TODO: Move this code to `utils/functions'
modules_insert() {
    insmod $M0_SRC_DIR/extra-libs/gf-complete/src/linux_kernel/m0gf.ko ||
        die 'Inserting m0gf.ko failed'

    insmod $M0_SRC_DIR/mero/m0mero.ko \
    local_addr=$M0T1FS_ENDPOINT \
    max_rpc_msg_size=$MAX_RPC_MSG_SIZE \
    tm_recv_queue_min_len=$TM_MIN_RECV_QUEUE_LEN \
    ${TRACE_MASK:+trace_immediate_mask=$TRACE_MASK} \
    ${TRACE_LEVEL:+trace_level=$TRACE_LEVEL} \
    ${TRACE_CONTEXT:+trace_print_context=$TRACE_CONTEXT} \
    || {
        rmmod m0gf
        die 'Inserting m0mero.ko failed'
    }
}

### XXX Code duplication!
### There is an identical function in conf/st.
### TODO: Move this code to `utils/functions'.
modules_remove() {
    rmmod m0mero
    rmmod m0gf
}

### XXX Code duplication!
### There is an identical function in conf/st.
### TODO: Move this code to `utils/functions'.
export_endpoints() {
    local LNET_NID=`lctl list_nids | head -1`

    ## LNet endpoint address format (see net/lnet/lnet.h):
    ##     NID:PID:Portal:TMID
    ##
    ## The PID value of 12345 is used by Lustre in the kernel and is
    ## the only value currently supported.
    export M0T1FS_ENDPOINT="$LNET_NID:12345:34:"
    export SERVER1_ENDPOINT="$LNET_NID:12345:34:1001"
    export SERVER2_ENDPOINT="$LNET_NID:12345:34:1002"
    export SPIEL_ENDPOINT="$LNET_NID:12345:34:2001"
}

### Starts LNET. (Note that the script never stops LNET.)
### XXX Code duplication!
### There is an identical function in conf/st.
### TODO: Move this code to `utils/functions'.
lnet_up() {
    modprobe lnet
    lctl network up >/dev/null
    export_endpoints
}

# The generated configuration does not include any RMS. This is to cause
# m0t1fs' rconfc to fail while starting, and as the result, prevent m0t1fs
# from successful mounting.
stub_confdb() {
    cat <<EOF
(root-0 verno=1 profiles=[profile-0])
(profile-0 filesystem=filesystem-0)
(filesystem-0 rootfid=(11, 22) redundancy=2
    params=["pool_width=3", "nr_data_units=1", "nr_parity_units=1",
            "unit_size=4096"]
    mdpool=pool-0 nodes=[node-0] pools=[pool-0] racks=[rack-0])
(node-0 memsize=16000 nr_cpu=2 last_state=3 flags=2 pool_id=pool-0
    processes=[process-0])
(process-0 cores=[3] mem_limit_as=0 mem_limit_rss=0 mem_limit_stack=0
    mem_limit_memlock=0 endpoint="$SERVER1_ENDPOINT"
    services=[service-1, service-2, service-3, service-4, service-5])
(service-1 type=6 endpoints=["$SERVER1_ENDPOINT"] sdevs=[])
(service-2 type=2 endpoints=["$SERVER1_ENDPOINT"] sdevs=[sdev-1, sdev-2, sdev-3,
    sdev-4])
(service-3 type=1 endpoints=["$SERVER1_ENDPOINT"] sdevs=[sdev-0])
(service-4 type=3 endpoints=["$SERVER1_ENDPOINT"] sdevs=[])
(service-5 type=7 endpoints=["$SERVER1_ENDPOINT"] sdevs=[])
(pool-0 order=0 pvers=[pver-0])
(pver-0 ver=0 N=2 K=1 P=4 nr_failures=[0, 0, 0, 0, 1] rackvs=[objv-0])
(objv-0 real=rack-0 children=[objv-1])
(objv-1 real=enclosure-0 children=[objv-2])
(objv-2 real=controller-0 children=[objv-3, objv-4, objv-5, objv-6])
(objv-3 real=disk-0 children=[])
(objv-4 real=disk-1 children=[])
(objv-5 real=disk-2 children=[])
(objv-6 real=disk-3 children=[])
(rack-0 encls=[enclosure-0] pvers=[pver-0])
(enclosure-0 ctrls=[controller-0] pvers=[pver-0])
(controller-0 node=node-0 disks=[disk-0, disk-1, disk-2, disk-3] pvers=[pver-0])
(disk-0 dev=sdev-1 pvers=[pver-0])
(disk-1 dev=sdev-2 pvers=[pver-0])
(disk-2 dev=sdev-3 pvers=[pver-0])
(disk-3 dev=sdev-4 pvers=[pver-0])
(sdev-0 dev_idx=0 iface=4 media=1 bsize=4096 size=596000000000 last_state=3
    flags=4 filename="/dev/sdev0")
(sdev-1 dev_idx=0 iface=4 media=1 bsize=4096 size=596000000000 last_state=3
    flags=4 filename="/dev/sdev1")
(sdev-2 dev_idx=1 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev2")
(sdev-3 dev_idx=2 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev3")
(sdev-4 dev_idx=3 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev4")
EOF
}

### m0_spiel_start requires endpoint of RM service. This function starts the
### first m0d instance with rmservice. All Spiel commands from command
### interface part will affect to second m0d instance. Spiel commands from
### configuration management part may affect to both m0d.
m0d_with_rms_start() {
    local OPTS="-F -D $SANDBOX_DIR/db -T AD -S $SANDBOX_DIR/stobs\
    -A linuxstob:$SANDBOX_DIR/addb-stobs -e lnet:$SERVER1_ENDPOINT\
    -m $MAX_RPC_MSG_SIZE -q $TM_MIN_RECV_QUEUE_LEN -c $CONF_FILE\
    -w 3 -P $PROF_OPT -f $PROC_FID -d $SANDBOX_DIR/disks.conf"

    stub_confdb | $M0_SRC_DIR/utils/m0confgen >$CONF_FILE

    echo "--- `date` ---" >>$SANDBOX_DIR/m0d.log
    cd $SANDBOX_DIR

    ## m0mkfs should be executed only once. It is usually executed
    ## during cluster initial setup.
    echo $M0_SRC_DIR/utils/mkfs/m0mkfs $OPTS
    $M0_SRC_DIR/utils/mkfs/m0mkfs $OPTS >>$SANDBOX_DIR/mkfs.log ||
    error 'm0mkfs failed'

    echo $M0_SRC_DIR/mero/m0d $OPTS
    $M0_SRC_DIR/mero/m0d $OPTS >>$SANDBOX_DIR/m0d.log 2>&1 &
    local PID=$!
    sleep 10
    kill -0 $PID 2>/dev/null ||
    error "Failed to start m0d. See $SANDBOX_DIR/m0d.log for details."
}

test_m0d_start() {
    local CONFD_SPEC="-s confd:<$CONF_FID_CON:2> "
    local OPTS="-D $SANDBOX_DIR/db -T AD -S $SANDBOX_DIR/stobs\
    -A linuxstob:$SANDBOX_DIR/addb-stobs -e lnet:$SERVER2_ENDPOINT -c $CONF_FILE\
    -m $MAX_RPC_MSG_SIZE -q $TM_MIN_RECV_QUEUE_LEN -w 3 -P $PROF_OPT\
    -f $PROC_FID2 -d $SANDBOX_DIR/disks.conf"

    cd $SANDBOX_DIR

    echo $M0_SRC_DIR/mero/m0d $OPTS
    $M0_SRC_DIR/mero/m0d $OPTS >>$SANDBOX_DIR/m0d.log 2>&1 &
    local PID=$!
    sleep 10
    kill -0 $PID 2>/dev/null ||
    error "Failed to start m0d. See $SANDBOX_DIR/m0d.log for details."
}


_mount() {
    mkdir -p $SANDBOX_DIR/mnt
    local MOUNT_OPTS="-t m0t1fs -o pfid='$M0T1FS_PROC_ID',profile=$PROF_OPT,ha=$SERVER2_ENDPOINT \
none $SANDBOX_DIR/mnt"
    echo "mount $MOUNT_OPTS"
    set +e
    mount $MOUNT_OPTS
    local result=$?
    set -e
    if [ $result -ne "0" ]
    then
	echo 'As expected'
	return 0
    else
	echo 'm0t1fs has mounted while should not.'
	return 1
    fi
}

## Keep the audience engaged.
say() { echo "$@" | tee -a $SANDBOX_DIR/m0d.log; }

usage() {
    cat <<EOF
Usage: ${0##*/} [COMMAND]

Supported commands:
  run      run system test (default command)
  help     display this help and exit
EOF
}

## -------------------------------------------------------------------
## main()
## -------------------------------------------------------------------

[ `id -u` -eq 0 ] || die 'Must be run by superuser'

case "${1:-}" in
    run|'') ;;
    help) usage; exit;;
    *) usage >&2; die;;
esac

trap stop EXIT

echo "Test start"
start

echo 8 >/proc/sys/kernel/printk  # Print kernel messages to the console.

say "Test m0d start"
test_m0d_start || stop

_mount

stop
report_and_exit mount-fail $?

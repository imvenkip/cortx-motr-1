/* -*- C -*- */
/*
 * COPYRIGHT 2011 XYRATEX TECHNOLOGY LIMITED
 *
 * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
 * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
 * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
 * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
 * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
 * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
 * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
 *
 * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
 * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
 * http://www.xyratex.com/contact
 *
 * Original author: Rajesh Bhalerao <Rajesh_Bhalerao@xyratex.com>
 * Original creation date: 07/04/2011
 */

/**
   @addtogroup rm
   @{
 */

/** @file rm.ff
 *
 *  This file defines RM-fops needed for RM-generic layer.
 *  All the layers using RM will have to define their own FOPs to
 *  fetch resource data. RM-generic FOPs provide a facility for
 *  resource rights management and to fetch small resource data.
 *
 * <b>RM fop formats</b>
 */

/**
 * Request the resource owner information from a lookup server.
 * <br> List of fields
 * @li res_type : Resource type identifier
 * @li res_id : Resource identifier 
 * </br>
 */
DEF(c2_fop_rm_get_owner_info, RECORD,
    _(res_type, U64),
    _(res_id, U64));

/**
 * This represents service Id.
 * <br> List of fields
 * @li sid_len : Number of bytes in service id
 * @li sid : Byte-stream of service id
 * </br>
 */
DEF(c2_fop_rm_sid, SEQUENCE,
    _(sid_len, U32),
    _(sid, BYTE));

/**
 * This represents network address.
 * <br> List of fields
 * @li naddr_len : Number of bytes in n/w address
 * @li naddr : Byte-stream of n/w address
 * </br>
 */
DEF(c2_fop_rm_net_addr, SEQUENCE,
    _(naddr_len, U32),
    _(naddr, BYTE));

/**
 * This represents network end-point <net-type, net-addr, port>.
 * <br> List of fields
 * @li ep_naddr_type : Type of n/w address
 * @li ep_naddr : Byte-stream of n/w address id
 * @li ep_nport : Network port withing the address
 * </br>
 */
DEF(c2_fop_rm_net_endp, RECORD,
    _(ep_naddr_type, BYTE),
    _(ep_naddr, c2_fop_rm_net_addr),
    _(ep_nport, U32));

/**
 * This is a owner descriptor <service-id, service-end-point, remote owner id>
 * <br> List of fields
 * @li rem_id : Id of the remote owner
 * @li svc_id : Service Identifier of remote resource owner
 * @li svc_endp : Service end-point of remote resource owner
 * </br>
 */
DEF(c2_fop_rm_fop_owner_desc, RECORD,
    _(rem_id, U64),
    _(svc_id, c2_fop_rm_sid),
    _(svc_endp, c2_fop_rm_net_endp));

/**
 * Send the resource owner information to a lookup server and register it.
 * <br> List of fields
 * @li res_type : Resource type identifier
 * @li res_id : Resource identifier 
 * @li owner_desc : Descriptor of the owner (this machine)
 * </br>
 */
DEF(c2_fop_rm_set_owner_info, RECORD,
    _(res_type, U64),
    _(res_id, U64),
    _(owner_desc, c2_fop_rm_fop_owner_desc));

/**
 * This is a reply FOP - sent in response to GET/SET owner info.
 * owner status will return the status code. If the operation is succsessful,
 * service id of the owner is sent along with the reply.
 * <br> List of fields
 * @li owner_status : Response (NO-OWNER, ANOTHER-OWNER, OWNER-SET)
 * @li rem_id : Id of the remote owner
 * @li owner_desc : Descriptor of the owner
 * </br>
 */
DEF(c2_fop_rm_owner_info, RECORD,
    _(owner_status, BYTE),
    _(rem_id, U64),
    _(owner_desc, c2_fop_rm_fop_owner_desc));

/**
 * Ask for a right to a given resorce. Right information is encoded in
 * res_datum.
 * <br> List of fields
 * @li rem_id : Id of the remote owner
 * @li res_type : Resource type identifier
 * @li res_id : Resource identifier 
 * @li res_grp_id : Resource Group Id
 * @li res_policy_id : Policy Id for resource rights
 * @li res_datum : Resource right representation (requested). Checking
 *                 for rights availablity will also be encoded?
 * </br>
 */
DEF(c2_fop_rm_get_right, RECORD,
    _(rem_id, U64),
    _(res_type, U64),
    _(res_id, U64),
    _(res_grp_id, U64),
    _(res_policy_id, U64),
    _(res_datum, U64));

/**
 * A small amount of resource data (up to 256 bytes?) can be piggy-backed.
 * <br> List of fields
 * @li rd_len : Number of bytes of resource data
 * @li res_data : Byte-stream of resource data
 * </br>
 */
DEF(c2_fop_rm_res_data, SEQUENCE,
    _(rd_len, U32),
    _(res_data, BYTE));

/**
 * This is a reply FOP sent in response to the request for a right to a
 * resource. When the request is succsessful, the sender may choose to
 * piggy-back resource data.
 * This may avoid an extra FOP required for fetching the resource data (small).
 * RM-generic needs to handle this.
 * <br> List of fields
 * @li right_resp : Return code for GET_RIGHT request
 * @li rem_id : Id of the remote owner
 * @li res_type : Resource type identifier
 * @li res_id : Resource identifier 
 * @li res_datum : Resource right representation (granted)
 * @li loan_id : Id for the resource loan
 * @li res_data_flag : Marks that this FOP contains valid resource data
 * @li res_data : Piggy-backed resource data
 * </br>
 */
DEF(c2_fop_rm_right_reply, RECORD,
    _(right_resp, BYTE),
    _(rem_id, U64),
    _(res_type, U64),
    _(res_id, U64),
    _(res_datum, U64),
    _(loan_id, U64),
    _(lease_time, U64),
    _(res_data_flag, BYTE),
    _(res_data, c2_fop_rm_res_data));

/**
 * This is a FOP is initiated from an owner. It requires the lesee to surrender
 * the right for a given resorce.
 * <br> List of fields
 * @li rem_id : Id of the remote owner
 * @li res_type : Resource type identifier
 * @li res_id : Resource identifier 
 * @li loan_id : Id for the resource loan
 * @li res_grp_id : Resource Group Id
 * </br>
 */
DEF(c2_fop_rm_revoke_right, RECORD,
    _(rem_id, U64),
    _(res_type, U64),
    _(res_id, U64),
    _(loan_id, U64),
    _(res_grp_id, U64));

/**
 * This is a reply FOP sent in response to a revoke right request.
 * <br> List of fields
 * @li rem_id : Id of the remote owner
 * @li res_type : Resource type identifier
 * @li res_id : Resource identifier 
 * @li loan_id : Id for the resource loan
 * @li res_grp_id : Resource Group Id
 * </br>
 */
DEF(c2_fop_rm_right_cancel, RECORD,
    _(rem_id, U64),
    _(res_type, U64),
    _(res_id, U64),
    _(loan_id, U64),
    _(res_grp_id, U64));

/** @} end of rm group */

/*
 *  Local variables:
 *  c-indentation-style: "K&R"
 *  c-basic-offset: 8
 *  tab-width: 8
 *  fill-column: 80
 *  scroll-step: 1
 *  End:
 */

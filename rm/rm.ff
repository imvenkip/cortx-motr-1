/* -*- C -*- */
/*
 * COPYRIGHT 2011 XYRATEX TECHNOLOGY LIMITED
 *
 * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
 * HEREIN, ARE THE EXCLUSIVE PROPERTY OF XYRATEX TECHNOLOGY
 * LIMITED, ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
 * THE PRIOR WRITTEN PERMISSION OF XYRATEX TECHNOLOGY LIMITED,
 * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
 * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
 * EXCEPT AS ALLOWED BY THE TERMS OF XYRATEX LICENSES AND AGREEMENTS.
 *
 * YOU SHOULD HAVE RECEIVED A COPY OF XYRATEX'S LICENSE ALONG WITH
 * THIS RELEASE. IF NOT PLEASE CONTACT A XYRATEX REPRESENTATIVE
 * http://www.xyratex.com/contact
 *
 * Original author: Rajesh Bhalerao <Rajesh_Bhalerao@xyratex.com>
 * Original creation date: 07/04/2011
 */

/**
   @addtogroup rm
   @{
 */

/** @file rm.ff
 *
 *  This file defines RM-fops needed for RM-generic layer.
 *  All the layers using RM will have to define their own FOPs to
 *  fetch resource data. RM-generic FOPs provide a facility for
 *  resource rights management and to fetch small resource data.
 *
 * <b>RM fop formats</b>
 */

/**
 * This represents parameter information for a given right. This information
 * is opaque to RM layer. RM does not interpret this information.
 *
 * This information is constructed and interpreted by resource type specific
 * code.
 */
DEF(c2_fop_rm_right, SEQUENCE,
   /** Length of right parameters' record */
    _(right_params_len, U32),
   /** RM-opaque, resource type specfic, right parameters field */
    _(right_params, BYTE));

/**
 * This FOP is needed to Borrow a right, to a given resource, from an owner.
 * This request FOP is sent by a "debtor" to a "creditor".
 * @see rm.h
 */
DEF(c2_fop_rm_right_borrow, RECORD,
   /** Id of the remote owner */
    _(rem_id, U64),
   /** Resource type identifier */
    _(res_type, U64),
   /** Resource identifier */
    _(res_id, U64),
   /** Resource group identifier - provided by application */
    _(res_grp_id, U64),
   /** Id of the policy for resource right */
    _(res_policy_id, U64),
   /** Priority of this request */
    _(res_prority, BYTE));
   /** RM-opaque, resource type specfic, right parameters field */
    _(res_right, c2_fop_rm_right));

/**
 * A small amount of resource data can be piggy-backed.
 * This could optionally be part of RIGHT_BORROW_REPLY.
 */
DEF(c2_fop_rm_res_data, SEQUENCE,
    /** Length of resource data */
    _(rd_len, U32),
    /** Resource data (opaque to RM) */
    _(res_data, BYTE));

/**
 * This is a reply FOP - sent in response to the request, to borrow a right to a
 * resource. When the request is successful, the owner may choose to
 * piggy-back resource data.
 *
 * This may avoid an extra FOP required for fetching the resource data (small).
 * RM-generic needs to pass this data to application using it.
 *
 * This reply is sent by a "creditor" to a "debtor".
 */
DEF(c2_fop_rm_right_borrow_reply, RECORD,
    /** Return code for reply to the RIGHT_BORROW request */
    _(right_resp, BYTE),
   /** Id of the remote owner */
    _(rem_id, U64),
   /** Resource type identifier */
    _(res_type, U64),
   /** Resource identifier */
    _(res_id, U64),
    /** Id for the resource loan */
    _(loan_id, U64),
    /** Lease time in seconds */
    _(lease_time, U64),
    /** RM-opaque, resource type specific, right parameters. */
    _(res_rights, c2_fop_rm_rights),
    /** RM-opaque, resource type specific, small resource data. */
    _(res_data, c2_fop_rm_res_data));

/**
 * This FOP is initiated from an owner. It requires the lessee to surrender
 * the right for a given resource.
 *
 * This request is sent by a "creditor" to a "debtor" to revoke the loan.
 * @see rm.h
 */
DEF(c2_fop_rm_right_revoke, RECORD,
   /** Id of the remote owner */
    _(rem_id, U64),
   /** Resource type identifier */
    _(res_type, U64),
   /** Resource identifier */
    _(res_id, U64),
    /** Id for the resource loan */
    _(loan_id, U64),
   /** Priority of this request */
    _(res_prority, BYTE));
    /** App-specific resource group id */
    _(res_grp_id, U64));

/**
 * This is a reply FOP - sent in response to a revoke right request.
 * This FOP is sent by a "debtor" to a "creditor" acknowledging the surrender
 * of the loan.
 * @see rm.h
 */
DEF(c2_fop_rm_right_revoke_reply, RECORD,
   /** Id of the remote owner */
    _(rem_id, U64),
   /** Resource type identifier */
    _(res_type, U64),
   /** Resource identifier */
    _(res_id, U64),
    /** Id for the resource loan */
    _(loan_id, U64),
    /** App-specific resource group id */
    _(res_grp_id, U64));

/**
 * This FOP is sent by borrower (debtor) to creditor to volutarily give up
 * rights to a given resource.
 */
DEF(c2_fop_rm_right_cancel, RECORD,
   /** Id of the remote owner */
    _(rem_id, U64),
   /** Resource type identifier */
    _(res_type, U64),
   /** Resource identifier */
    _(res_id, U64),
    /** Id for the resource loan */
    _(loan_id, U64),
   /** Priority of this request */
    _(res_prority, BYTE));
    /** App-specific resource group id */
    _(res_grp_id, U64));

/** @} end of rm group */

/*
 *  Local variables:
 *  c-indentation-style: "K&R"
 *  c-basic-offset: 8
 *  tab-width: 8
 *  fill-column: 80
 *  scroll-step: 1
 *  End:
 */
